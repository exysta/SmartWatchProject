
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc5c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800cf10  0800cf10  0000df10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d31c  0800d31c  0000e31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d324  0800d324  0000e324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d328  0800d328  0000e328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800d32c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000764  240001d8  0800d504  0000f1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400093c  0800d504  0000f93c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001694e  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e0a  00000000  00000000  00025b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f80  00000000  00000000  00028960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bf8  00000000  00000000  000298e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004666  00000000  00000000  0002a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018100  00000000  00000000  0002eb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00137d59  00000000  00000000  00046c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0017e997  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f60  00000000  00000000  0017e9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  0018393c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800cef4 	.word	0x0800cef4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	0800cef4 	.word	0x0800cef4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <MX_DMA_Init+0x6c>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006d8:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <MX_DMA_Init+0x6c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_DMA_Init+0x6c>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200b      	movs	r0, #11
 80006f6:	f001 fad4 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 faeb 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	200c      	movs	r0, #12
 8000706:	f001 facc 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800070a:	200c      	movs	r0, #12
 800070c:	f001 fae3 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	200d      	movs	r0, #13
 8000716:	f001 fac4 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800071a:	200d      	movs	r0, #13
 800071c:	f001 fadb 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200e      	movs	r0, #14
 8000726:	f001 fabc 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800072a:	200e      	movs	r0, #14
 800072c:	f001 fad3 	bl	8001cd6 <HAL_NVIC_EnableIRQ>

}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	58024400 	.word	0x58024400

0800073c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	@ 0x30
 8000740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b4d      	ldr	r3, [pc, #308]	@ (8000888 <MX_GPIO_Init+0x14c>)
 8000754:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000758:	4a4b      	ldr	r2, [pc, #300]	@ (8000888 <MX_GPIO_Init+0x14c>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000762:	4b49      	ldr	r3, [pc, #292]	@ (8000888 <MX_GPIO_Init+0x14c>)
 8000764:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000770:	4b45      	ldr	r3, [pc, #276]	@ (8000888 <MX_GPIO_Init+0x14c>)
 8000772:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000776:	4a44      	ldr	r2, [pc, #272]	@ (8000888 <MX_GPIO_Init+0x14c>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800077c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000780:	4b41      	ldr	r3, [pc, #260]	@ (8000888 <MX_GPIO_Init+0x14c>)
 8000782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <MX_GPIO_Init+0x14c>)
 8000790:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000794:	4a3c      	ldr	r2, [pc, #240]	@ (8000888 <MX_GPIO_Init+0x14c>)
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800079e:	4b3a      	ldr	r3, [pc, #232]	@ (8000888 <MX_GPIO_Init+0x14c>)
 80007a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ac:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <MX_GPIO_Init+0x14c>)
 80007ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b2:	4a35      	ldr	r2, [pc, #212]	@ (8000888 <MX_GPIO_Init+0x14c>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007bc:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <MX_GPIO_Init+0x14c>)
 80007be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000888 <MX_GPIO_Init+0x14c>)
 80007cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000888 <MX_GPIO_Init+0x14c>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_GPIO_Init+0x14c>)
 80007dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <MX_GPIO_Init+0x14c>)
 80007ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007ee:	4a26      	ldr	r2, [pc, #152]	@ (8000888 <MX_GPIO_Init+0x14c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_GPIO_Init+0x14c>)
 80007fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f244 0101 	movw	r1, #16385	@ 0x4001
 800080c:	481f      	ldr	r0, [pc, #124]	@ (800088c <MX_GPIO_Init+0x150>)
 800080e:	f004 fb8f 	bl	8004f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000818:	481d      	ldr	r0, [pc, #116]	@ (8000890 <MX_GPIO_Init+0x154>)
 800081a:	f004 fb89 	bl	8004f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2102      	movs	r1, #2
 8000822:	481b      	ldr	r0, [pc, #108]	@ (8000890 <MX_GPIO_Init+0x154>)
 8000824:	f004 fb84 	bl	8004f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4815      	ldr	r0, [pc, #84]	@ (8000894 <MX_GPIO_Init+0x158>)
 800083e:	f004 f9c7 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000842:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	480c      	ldr	r0, [pc, #48]	@ (800088c <MX_GPIO_Init+0x150>)
 800085c:	f004 f9b8 	bl	8004bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|LD2_Pin;
 8000860:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_GPIO_Init+0x154>)
 800087a:	f004 f9a9 	bl	8004bd0 <HAL_GPIO_Init>

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	58024400 	.word	0x58024400
 800088c:	58020400 	.word	0x58020400
 8000890:	58021000 	.word	0x58021000
 8000894:	58020800 	.word	0x58020800

08000898 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800089c:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <MX_I2C2_Init+0x74>)
 800089e:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <MX_I2C2_Init+0x78>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_I2C2_Init+0x74>)
 80008a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_I2C2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ae:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_I2C2_Init+0x74>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <MX_I2C2_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ba:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_I2C2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <MX_I2C2_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_I2C2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_I2C2_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d2:	480e      	ldr	r0, [pc, #56]	@ (800090c <MX_I2C2_Init+0x74>)
 80008d4:	f004 fb46 	bl	8004f64 <HAL_I2C_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008de:	f000 fb61 	bl	8000fa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4809      	ldr	r0, [pc, #36]	@ (800090c <MX_I2C2_Init+0x74>)
 80008e6:	f004 fbd9 	bl	800509c <HAL_I2CEx_ConfigAnalogFilter>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f0:	f000 fb58 	bl	8000fa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_I2C2_Init+0x74>)
 80008f8:	f004 fc1b 	bl	8005132 <HAL_I2CEx_ConfigDigitalFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000902:	f000 fb4f 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	240001f4 	.word	0x240001f4
 8000910:	40005800 	.word	0x40005800
 8000914:	20b0ccff 	.word	0x20b0ccff

08000918 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0ba      	sub	sp, #232	@ 0xe8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	22c0      	movs	r2, #192	@ 0xc0
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f00a fb13 	bl	800af64 <memset>
  if(i2cHandle->Instance==I2C2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a27      	ldr	r2, [pc, #156]	@ (80009e0 <HAL_I2C_MspInit+0xc8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d146      	bne.n	80009d6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000948:	f04f 0208 	mov.w	r2, #8
 800094c:	f04f 0300 	mov.w	r3, #0
 8000950:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fc4c 	bl	80061fc <HAL_RCCEx_PeriphCLKConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800096a:	f000 fb1b 	bl	8000fa4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <HAL_I2C_MspInit+0xcc>)
 8000970:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000974:	4a1b      	ldr	r2, [pc, #108]	@ (80009e4 <HAL_I2C_MspInit+0xcc>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <HAL_I2C_MspInit+0xcc>)
 8000980:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800098c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000990:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000994:	2312      	movs	r3, #18
 8000996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009a6:	2304      	movs	r3, #4
 80009a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <HAL_I2C_MspInit+0xd0>)
 80009b4:	f004 f90c 	bl	8004bd0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <HAL_I2C_MspInit+0xcc>)
 80009ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80009be:	4a09      	ldr	r2, [pc, #36]	@ (80009e4 <HAL_I2C_MspInit+0xcc>)
 80009c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009c4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_I2C_MspInit+0xcc>)
 80009ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80009ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80009d6:	bf00      	nop
 80009d8:	37e8      	adds	r7, #232	@ 0xe8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40005800 	.word	0x40005800
 80009e4:	58024400 	.word	0x58024400
 80009e8:	58020400 	.word	0x58020400

080009ec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80009f4:	1d39      	adds	r1, r7, #4
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	2201      	movs	r2, #1
 80009fc:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <__io_putchar+0x20>)
 80009fe:	f007 fa2d 	bl	8007e5c <HAL_UART_Transmit>
	return chr;
 8000a02:	687b      	ldr	r3, [r7, #4]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	24000578 	.word	0x24000578

08000a10 <sendATCommand.1>:
  /* USER CODE BEGIN 2 */

#ifdef BLE_TEST

  // Function to send AT command and receive response
  void sendATCommand(UART_HandleTypeDef *huart, char *command) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0b6      	sub	sp, #216	@ 0xd8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	f8c7 c004 	str.w	ip, [r7, #4]
      uint8_t txBuffer[100];
      uint8_t rxBuffer[100];

      // Préparer la commande
      sprintf((char*)txBuffer, "%s\r\n", command);
 8000a1e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4918      	ldr	r1, [pc, #96]	@ (8000a88 <sendATCommand.1+0x78>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00a f9a2 	bl	800ad70 <siprintf>

      // Vider le buffer de réception
      HAL_UART_AbortReceive(huart);
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f007 fb6b 	bl	8008108 <HAL_UART_AbortReceive>
      memset(rxBuffer, 0, sizeof(rxBuffer));
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	2264      	movs	r2, #100	@ 0x64
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f00a fa92 	bl	800af64 <memset>

      // Envoyer la commande
      HAL_UART_Transmit(huart, txBuffer, strlen((char*)txBuffer), 300);
 8000a40:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fca3 	bl	8000390 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8000a52:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	f007 fa00 	bl	8007e5c <HAL_UART_Transmit>


      // Réception avec timeout étendu
      HAL_UART_Receive(huart, rxBuffer, sizeof(rxBuffer), 2000);
 8000a5c:	f107 0110 	add.w	r1, r7, #16
 8000a60:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a64:	2264      	movs	r2, #100	@ 0x64
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f007 fa86 	bl	8007f78 <HAL_UART_Receive>

      printf("Received: %s\r\n", rxBuffer);
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	@ (8000a8c <sendATCommand.1+0x7c>)
 8000a74:	f00a f90c 	bl	800ac90 <iprintf>
      HAL_Delay(1500);
 8000a78:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000a7c:	f001 f812 	bl	8001aa4 <HAL_Delay>
  }
 8000a80:	bf00      	nop
 8000a82:	37d8      	adds	r7, #216	@ 0xd8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	0800cf10 	.word	0x0800cf10
 8000a8c:	0800cf18 	.word	0x0800cf18

08000a90 <main>:
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
int main(void)
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	607b      	str	r3, [r7, #4]
  MPU_Config();
 8000a9c:	f000 fa56 	bl	8000f4c <MPU_Config>
  HAL_Init();
 8000aa0:	f000 ff6e 	bl	8001980 <HAL_Init>
  SystemClock_Config();
 8000aa4:	f000 f900 	bl	8000ca8 <SystemClock_Config>
  MX_GPIO_Init();
 8000aa8:	f7ff fe48 	bl	800073c <MX_GPIO_Init>
  MX_DMA_Init();
 8000aac:	f7ff fe0e 	bl	80006cc <MX_DMA_Init>
  MX_UART4_Init();
 8000ab0:	f000 fc72 	bl	8001398 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000ab4:	f000 fd08 	bl	80014c8 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000ab8:	f7ff feee 	bl	8000898 <MX_I2C2_Init>
  MX_UART5_Init();
 8000abc:	f000 fcb8 	bl	8001430 <MX_UART5_Init>
      // Optionally disable half-transfer interrupt to reduce overhead
      __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
  }


  printf("--------------------------\r\n");
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <main+0x64>)
 8000ac2:	f00a f94d 	bl	800ad60 <puts>


  configureHM10();
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	469c      	mov	ip, r3
 8000aca:	f000 f81d 	bl	8000b08 <configureHM10.0>
  startUartReception(&huart4);
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	469c      	mov	ip, r3
 8000ad2:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <main+0x68>)
 8000ad4:	f000 f82c 	bl	8000b30 <startUartReception.2>
			printf("--------------------------------------\r\n" );
			Timer = HAL_GetTick();
		}
#endif
#ifdef BLE_TEST
        if (messageReady) {
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <main+0x6c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0fa      	beq.n	8000ad8 <main+0x48>
            // Process the complete message
            printf("Received complete message: %s\r\n", messageBuffer);
 8000ae2:	4907      	ldr	r1, [pc, #28]	@ (8000b00 <main+0x70>)
 8000ae4:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <main+0x74>)
 8000ae6:	f00a f8d3 	bl	800ac90 <iprintf>
            messageReady = 0;
 8000aea:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <main+0x6c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
        if (messageReady) {
 8000af0:	e7f2      	b.n	8000ad8 <main+0x48>
 8000af2:	bf00      	nop
 8000af4:	0800cf28 	.word	0x0800cf28
 8000af8:	24000450 	.word	0x24000450
 8000afc:	24000448 	.word	0x24000448
 8000b00:	24000348 	.word	0x24000348
 8000b04:	0800cf44 	.word	0x0800cf44

08000b08 <configureHM10.0>:
  void configureHM10() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4663      	mov	r3, ip
 8000b10:	f8c7 c004 	str.w	ip, [r7, #4]
	  sendATCommand(&huart4, "AT");          // Basic test - should return "OK"
 8000b14:	469c      	mov	ip, r3
 8000b16:	4904      	ldr	r1, [pc, #16]	@ (8000b28 <configureHM10.0+0x20>)
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <configureHM10.0+0x24>)
 8000b1a:	f7ff ff79 	bl	8000a10 <sendATCommand.1>
  }
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	0800cf64 	.word	0x0800cf64
 8000b2c:	24000450 	.word	0x24000450

08000b30 <startUartReception.2>:
  {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	f8c7 c000 	str.w	ip, [r7]
      HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000b3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b40:	4948      	ldr	r1, [pc, #288]	@ (8000c64 <startUartReception.2+0x134>)
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f009 fb0b 	bl	800a15e <HAL_UARTEx_ReceiveToIdle_DMA>
      __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a45      	ldr	r2, [pc, #276]	@ (8000c68 <startUartReception.2+0x138>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d068      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a43      	ldr	r2, [pc, #268]	@ (8000c6c <startUartReception.2+0x13c>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d061      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a40      	ldr	r2, [pc, #256]	@ (8000c70 <startUartReception.2+0x140>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d05a      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c74 <startUartReception.2+0x144>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d053      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a3b      	ldr	r2, [pc, #236]	@ (8000c78 <startUartReception.2+0x148>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d04c      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a39      	ldr	r2, [pc, #228]	@ (8000c7c <startUartReception.2+0x14c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d045      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a36      	ldr	r2, [pc, #216]	@ (8000c80 <startUartReception.2+0x150>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d03e      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a34      	ldr	r2, [pc, #208]	@ (8000c84 <startUartReception.2+0x154>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d037      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a31      	ldr	r2, [pc, #196]	@ (8000c88 <startUartReception.2+0x158>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d030      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a2f      	ldr	r2, [pc, #188]	@ (8000c8c <startUartReception.2+0x15c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d029      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8000c90 <startUartReception.2+0x160>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d022      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a2a      	ldr	r2, [pc, #168]	@ (8000c94 <startUartReception.2+0x164>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d01b      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a27      	ldr	r2, [pc, #156]	@ (8000c98 <startUartReception.2+0x168>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d014      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a25      	ldr	r2, [pc, #148]	@ (8000c9c <startUartReception.2+0x16c>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d00d      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a22      	ldr	r2, [pc, #136]	@ (8000ca0 <startUartReception.2+0x170>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d006      	beq.n	8000c28 <startUartReception.2+0xf8>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a20      	ldr	r2, [pc, #128]	@ (8000ca4 <startUartReception.2+0x174>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d10c      	bne.n	8000c42 <startUartReception.2+0x112>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 0208 	bic.w	r2, r2, #8
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e00c      	b.n	8000c5c <startUartReception.2+0x12c>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0204 	bic.w	r2, r2, #4
 8000c58:	601a      	str	r2, [r3, #0]
  }
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	24000248 	.word	0x24000248
 8000c68:	40020010 	.word	0x40020010
 8000c6c:	40020028 	.word	0x40020028
 8000c70:	40020040 	.word	0x40020040
 8000c74:	40020058 	.word	0x40020058
 8000c78:	40020070 	.word	0x40020070
 8000c7c:	40020088 	.word	0x40020088
 8000c80:	400200a0 	.word	0x400200a0
 8000c84:	400200b8 	.word	0x400200b8
 8000c88:	40020410 	.word	0x40020410
 8000c8c:	40020428 	.word	0x40020428
 8000c90:	40020440 	.word	0x40020440
 8000c94:	40020458 	.word	0x40020458
 8000c98:	40020470 	.word	0x40020470
 8000c9c:	40020488 	.word	0x40020488
 8000ca0:	400204a0 	.word	0x400204a0
 8000ca4:	400204b8 	.word	0x400204b8

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b09c      	sub	sp, #112	@ 0x70
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	224c      	movs	r2, #76	@ 0x4c
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00a f954 	bl	800af64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2220      	movs	r2, #32
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f00a f94e 	bl	800af64 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d88 <SystemClock_Config+0xe0>)
 8000cca:	f04f 32ff 	mov.w	r2, #4294967295
 8000cce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cd2:	2004      	movs	r0, #4
 8000cd4:	f004 fa7a 	bl	80051cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8000d8c <SystemClock_Config+0xe4>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8000d8c <SystemClock_Config+0xe4>)
 8000ce2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <SystemClock_Config+0xe4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cf4:	bf00      	nop
 8000cf6:	4b25      	ldr	r3, [pc, #148]	@ (8000d8c <SystemClock_Config+0xe4>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d02:	d1f8      	bne.n	8000cf6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d04:	2301      	movs	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d12:	2302      	movs	r3, #2
 8000d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000d1a:	2346      	movs	r3, #70	@ 0x46
 8000d1c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d22:	2304      	movs	r3, #4
 8000d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f004 faa0 	bl	8005280 <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d46:	f000 f92d 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	233f      	movs	r3, #63	@ 0x3f
 8000d4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d5a:	2340      	movs	r3, #64	@ 0x40
 8000d5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d5e:	2340      	movs	r3, #64	@ 0x40
 8000d60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d68:	2340      	movs	r3, #64	@ 0x40
 8000d6a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2106      	movs	r1, #6
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 feb7 	bl	8005ae4 <HAL_RCC_ClockConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000d7c:	f000 f912 	bl	8000fa4 <Error_Handler>
  }
}
 8000d80:	bf00      	nop
 8000d82:	3770      	adds	r7, #112	@ 0x70
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	58024400 	.word	0x58024400
 8000d8c:	58024800 	.word	0x58024800

08000d90 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a56      	ldr	r2, [pc, #344]	@ (8000efc <HAL_UARTEx_RxEventCallback+0x16c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	f040 80a5 	bne.w	8000ef2 <HAL_UARTEx_RxEventCallback+0x162>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4954      	ldr	r1, [pc, #336]	@ (8000f00 <HAL_UARTEx_RxEventCallback+0x170>)
 8000dae:	4855      	ldr	r0, [pc, #340]	@ (8000f04 <HAL_UARTEx_RxEventCallback+0x174>)
 8000db0:	f00a f957 	bl	800b062 <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	4a53      	ldr	r2, [pc, #332]	@ (8000f04 <HAL_UARTEx_RxEventCallback+0x174>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8000dbc:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <HAL_UARTEx_RxEventCallback+0x178>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f007 f9a0 	bl	8008108 <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8000dc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dcc:	2100      	movs	r1, #0
 8000dce:	484c      	ldr	r0, [pc, #304]	@ (8000f00 <HAL_UARTEx_RxEventCallback+0x170>)
 8000dd0:	f00a f8c8 	bl	800af64 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000dd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd8:	4949      	ldr	r1, [pc, #292]	@ (8000f00 <HAL_UARTEx_RxEventCallback+0x170>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f009 f9bf 	bl	800a15e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a48      	ldr	r2, [pc, #288]	@ (8000f0c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d068      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a46      	ldr	r2, [pc, #280]	@ (8000f10 <HAL_UARTEx_RxEventCallback+0x180>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d061      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a43      	ldr	r2, [pc, #268]	@ (8000f14 <HAL_UARTEx_RxEventCallback+0x184>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d05a      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a41      	ldr	r2, [pc, #260]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0x188>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d053      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a3e      	ldr	r2, [pc, #248]	@ (8000f1c <HAL_UARTEx_RxEventCallback+0x18c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d04c      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f20 <HAL_UARTEx_RxEventCallback+0x190>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d045      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a39      	ldr	r2, [pc, #228]	@ (8000f24 <HAL_UARTEx_RxEventCallback+0x194>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d03e      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a37      	ldr	r2, [pc, #220]	@ (8000f28 <HAL_UARTEx_RxEventCallback+0x198>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d037      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a34      	ldr	r2, [pc, #208]	@ (8000f2c <HAL_UARTEx_RxEventCallback+0x19c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d030      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a32      	ldr	r2, [pc, #200]	@ (8000f30 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d029      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a2f      	ldr	r2, [pc, #188]	@ (8000f34 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d022      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a2d      	ldr	r2, [pc, #180]	@ (8000f38 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d01b      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a2a      	ldr	r2, [pc, #168]	@ (8000f3c <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d014      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a28      	ldr	r2, [pc, #160]	@ (8000f40 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d00d      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a25      	ldr	r2, [pc, #148]	@ (8000f44 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d006      	beq.n	8000ec0 <HAL_UARTEx_RxEventCallback+0x130>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a23      	ldr	r2, [pc, #140]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d10c      	bne.n	8000eda <HAL_UARTEx_RxEventCallback+0x14a>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0208 	bic.w	r2, r2, #8
 8000ed6:	601a      	str	r2, [r3, #0]
    }
}
 8000ed8:	e00b      	b.n	8000ef2 <HAL_UARTEx_RxEventCallback+0x162>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0204 	bic.w	r2, r2, #4
 8000ef0:	601a      	str	r2, [r3, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40004c00 	.word	0x40004c00
 8000f00:	24000248 	.word	0x24000248
 8000f04:	24000348 	.word	0x24000348
 8000f08:	24000448 	.word	0x24000448
 8000f0c:	40020010 	.word	0x40020010
 8000f10:	40020028 	.word	0x40020028
 8000f14:	40020040 	.word	0x40020040
 8000f18:	40020058 	.word	0x40020058
 8000f1c:	40020070 	.word	0x40020070
 8000f20:	40020088 	.word	0x40020088
 8000f24:	400200a0 	.word	0x400200a0
 8000f28:	400200b8 	.word	0x400200b8
 8000f2c:	40020410 	.word	0x40020410
 8000f30:	40020428 	.word	0x40020428
 8000f34:	40020440 	.word	0x40020440
 8000f38:	40020458 	.word	0x40020458
 8000f3c:	40020470 	.word	0x40020470
 8000f40:	40020488 	.word	0x40020488
 8000f44:	400204a0 	.word	0x400204a0
 8000f48:	400204b8 	.word	0x400204b8

08000f4c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f5e:	f000 fed5 	bl	8001d0c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f62:	2301      	movs	r3, #1
 8000f64:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f6e:	231f      	movs	r3, #31
 8000f70:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f72:	2387      	movs	r3, #135	@ 0x87
 8000f74:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f82:	2301      	movs	r3, #1
 8000f84:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f8e:	463b      	mov	r3, r7
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fef3 	bl	8001d7c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f96:	2004      	movs	r0, #4
 8000f98:	f000 fed0 	bl	8001d3c <HAL_MPU_Enable>

}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <Error_Handler+0x8>

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_MspInit+0x30>)
 8000fb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000fbc:	4a08      	ldr	r2, [pc, #32]	@ (8000fe0 <HAL_MspInit+0x30>)
 8000fbe:	f043 0302 	orr.w	r3, r3, #2
 8000fc2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_MspInit+0x30>)
 8000fc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	58024400 	.word	0x58024400

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <NMI_Handler+0x4>

08000fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <UsageFault_Handler+0x4>

0800100c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103a:	f000 fd13 	bl	8001a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <DMA1_Stream0_IRQHandler+0x10>)
 800104a:	f002 fa33 	bl	80034b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	240006fc 	.word	0x240006fc

08001058 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800105c:	4802      	ldr	r0, [pc, #8]	@ (8001068 <DMA1_Stream1_IRQHandler+0x10>)
 800105e:	f002 fa29 	bl	80034b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	24000774 	.word	0x24000774

0800106c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001070:	4802      	ldr	r0, [pc, #8]	@ (800107c <DMA1_Stream2_IRQHandler+0x10>)
 8001072:	f002 fa1f 	bl	80034b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2400060c 	.word	0x2400060c

08001080 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <DMA1_Stream3_IRQHandler+0x10>)
 8001086:	f002 fa15 	bl	80034b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	24000684 	.word	0x24000684

08001094 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <UART4_IRQHandler+0x10>)
 800109a:	f007 f8eb 	bl	8008274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	24000450 	.word	0x24000450

080010a8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80010ac:	4802      	ldr	r0, [pc, #8]	@ (80010b8 <UART5_IRQHandler+0x10>)
 80010ae:	f007 f8e1 	bl	8008274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	240004e4 	.word	0x240004e4

080010bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_kill>:

int _kill(int pid, int sig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010d6:	f009 ff97 	bl	800b008 <__errno>
 80010da:	4603      	mov	r3, r0
 80010dc:	2216      	movs	r2, #22
 80010de:	601a      	str	r2, [r3, #0]
  return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_exit>:

void _exit (int status)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffe7 	bl	80010cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80010fe:	bf00      	nop
 8001100:	e7fd      	b.n	80010fe <_exit+0x12>

08001102 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e00a      	b.n	800112a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001114:	f3af 8000 	nop.w
 8001118:	4601      	mov	r1, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	60ba      	str	r2, [r7, #8]
 8001120:	b2ca      	uxtb	r2, r1
 8001122:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	dbf0      	blt.n	8001114 <_read+0x12>
  }

  return len;
 8001132:	687b      	ldr	r3, [r7, #4]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	e009      	b.n	8001162 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	60ba      	str	r2, [r7, #8]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fc48 	bl	80009ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	dbf1      	blt.n	800114e <_write+0x12>
  }
  return len;
 800116a:	687b      	ldr	r3, [r7, #4]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_close>:

int _close(int file)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800119c:	605a      	str	r2, [r3, #4]
  return 0;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <_isatty>:

int _isatty(int file)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	@ (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f009 fefc 	bl	800b008 <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	24100000 	.word	0x24100000
 800123c:	00000400 	.word	0x00000400
 8001240:	2400044c 	.word	0x2400044c
 8001244:	24000940 	.word	0x24000940

08001248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800124c:	4b3e      	ldr	r3, [pc, #248]	@ (8001348 <SystemInit+0x100>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001252:	4a3d      	ldr	r2, [pc, #244]	@ (8001348 <SystemInit+0x100>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800125c:	4b3b      	ldr	r3, [pc, #236]	@ (800134c <SystemInit+0x104>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	2b02      	cmp	r3, #2
 8001266:	d807      	bhi.n	8001278 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001268:	4b38      	ldr	r3, [pc, #224]	@ (800134c <SystemInit+0x104>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 030f 	bic.w	r3, r3, #15
 8001270:	4a36      	ldr	r2, [pc, #216]	@ (800134c <SystemInit+0x104>)
 8001272:	f043 0303 	orr.w	r3, r3, #3
 8001276:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001278:	4b35      	ldr	r3, [pc, #212]	@ (8001350 <SystemInit+0x108>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a34      	ldr	r2, [pc, #208]	@ (8001350 <SystemInit+0x108>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001284:	4b32      	ldr	r3, [pc, #200]	@ (8001350 <SystemInit+0x108>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800128a:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <SystemInit+0x108>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4930      	ldr	r1, [pc, #192]	@ (8001350 <SystemInit+0x108>)
 8001290:	4b30      	ldr	r3, [pc, #192]	@ (8001354 <SystemInit+0x10c>)
 8001292:	4013      	ands	r3, r2
 8001294:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001296:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <SystemInit+0x104>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012a2:	4b2a      	ldr	r3, [pc, #168]	@ (800134c <SystemInit+0x104>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 030f 	bic.w	r3, r3, #15
 80012aa:	4a28      	ldr	r2, [pc, #160]	@ (800134c <SystemInit+0x104>)
 80012ac:	f043 0303 	orr.w	r3, r3, #3
 80012b0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80012b2:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <SystemInit+0x108>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80012b8:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <SystemInit+0x108>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80012be:	4b24      	ldr	r3, [pc, #144]	@ (8001350 <SystemInit+0x108>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <SystemInit+0x108>)
 80012c6:	4a24      	ldr	r2, [pc, #144]	@ (8001358 <SystemInit+0x110>)
 80012c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <SystemInit+0x108>)
 80012cc:	4a23      	ldr	r2, [pc, #140]	@ (800135c <SystemInit+0x114>)
 80012ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <SystemInit+0x108>)
 80012d2:	4a23      	ldr	r2, [pc, #140]	@ (8001360 <SystemInit+0x118>)
 80012d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <SystemInit+0x108>)
 80012d8:	2200      	movs	r2, #0
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <SystemInit+0x108>)
 80012de:	4a20      	ldr	r2, [pc, #128]	@ (8001360 <SystemInit+0x118>)
 80012e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <SystemInit+0x108>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012e8:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <SystemInit+0x108>)
 80012ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <SystemInit+0x118>)
 80012ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012ee:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <SystemInit+0x108>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <SystemInit+0x108>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a15      	ldr	r2, [pc, #84]	@ (8001350 <SystemInit+0x108>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <SystemInit+0x108>)
 8001302:	2200      	movs	r2, #0
 8001304:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <SystemInit+0x108>)
 8001308:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800130c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d113      	bne.n	800133c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <SystemInit+0x108>)
 8001316:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800131a:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <SystemInit+0x108>)
 800131c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001320:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <SystemInit+0x11c>)
 8001326:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800132a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <SystemInit+0x108>)
 800132e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001332:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <SystemInit+0x108>)
 8001334:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001338:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00
 800134c:	52002000 	.word	0x52002000
 8001350:	58024400 	.word	0x58024400
 8001354:	eaf6ed7f 	.word	0xeaf6ed7f
 8001358:	02020200 	.word	0x02020200
 800135c:	01ff0000 	.word	0x01ff0000
 8001360:	01010280 	.word	0x01010280
 8001364:	52004000 	.word	0x52004000

08001368 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <ExitRun0Mode+0x2c>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <ExitRun0Mode+0x2c>)
 8001372:	f023 0302 	bic.w	r3, r3, #2
 8001376:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001378:	bf00      	nop
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <ExitRun0Mode+0x2c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f9      	beq.n	800137a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	58024800 	.word	0x58024800

08001398 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800139c:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <MX_UART4_Init+0x90>)
 800139e:	4a23      	ldr	r2, [pc, #140]	@ (800142c <MX_UART4_Init+0x94>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_UART4_Init+0x90>)
 80013a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_UART4_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_UART4_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_UART4_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_UART4_Init+0x90>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_UART4_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_UART4_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <MX_UART4_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_UART4_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013da:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <MX_UART4_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013e0:	4811      	ldr	r0, [pc, #68]	@ (8001428 <MX_UART4_Init+0x90>)
 80013e2:	f006 fceb 	bl	8007dbc <HAL_UART_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80013ec:	f7ff fdda 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f0:	2100      	movs	r1, #0
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_UART4_Init+0x90>)
 80013f4:	f008 fe37 	bl	800a066 <HAL_UARTEx_SetTxFifoThreshold>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80013fe:	f7ff fdd1 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001402:	2100      	movs	r1, #0
 8001404:	4808      	ldr	r0, [pc, #32]	@ (8001428 <MX_UART4_Init+0x90>)
 8001406:	f008 fe6c 	bl	800a0e2 <HAL_UARTEx_SetRxFifoThreshold>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001410:	f7ff fdc8 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_UART4_Init+0x90>)
 8001416:	f008 fded 	bl	8009ff4 <HAL_UARTEx_DisableFifoMode>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001420:	f7ff fdc0 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	24000450 	.word	0x24000450
 800142c:	40004c00 	.word	0x40004c00

08001430 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001434:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <MX_UART5_Init+0x90>)
 8001436:	4a23      	ldr	r2, [pc, #140]	@ (80014c4 <MX_UART5_Init+0x94>)
 8001438:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <MX_UART5_Init+0x90>)
 800143c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001440:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <MX_UART5_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_UART5_Init+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <MX_UART5_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_UART5_Init+0x90>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_UART5_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <MX_UART5_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_UART5_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_UART5_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_UART5_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001478:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <MX_UART5_Init+0x90>)
 800147a:	f006 fc9f 	bl	8007dbc <HAL_UART_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001484:	f7ff fd8e 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001488:	2100      	movs	r1, #0
 800148a:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <MX_UART5_Init+0x90>)
 800148c:	f008 fdeb 	bl	800a066 <HAL_UARTEx_SetTxFifoThreshold>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001496:	f7ff fd85 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149a:	2100      	movs	r1, #0
 800149c:	4808      	ldr	r0, [pc, #32]	@ (80014c0 <MX_UART5_Init+0x90>)
 800149e:	f008 fe20 	bl	800a0e2 <HAL_UARTEx_SetRxFifoThreshold>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80014a8:	f7ff fd7c 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	@ (80014c0 <MX_UART5_Init+0x90>)
 80014ae:	f008 fda1 	bl	8009ff4 <HAL_UARTEx_DisableFifoMode>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80014b8:	f7ff fd74 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	240004e4 	.word	0x240004e4
 80014c4:	40005000 	.word	0x40005000

080014c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014cc:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 80014ce:	4a23      	ldr	r2, [pc, #140]	@ (800155c <MX_USART3_UART_Init+0x94>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fe:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001504:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800150a:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001510:	4811      	ldr	r0, [pc, #68]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 8001512:	f006 fc53 	bl	8007dbc <HAL_UART_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800151c:	f7ff fd42 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001520:	2100      	movs	r1, #0
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 8001524:	f008 fd9f 	bl	800a066 <HAL_UARTEx_SetTxFifoThreshold>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800152e:	f7ff fd39 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001532:	2100      	movs	r1, #0
 8001534:	4808      	ldr	r0, [pc, #32]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 8001536:	f008 fdd4 	bl	800a0e2 <HAL_UARTEx_SetRxFifoThreshold>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001540:	f7ff fd30 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001544:	4804      	ldr	r0, [pc, #16]	@ (8001558 <MX_USART3_UART_Init+0x90>)
 8001546:	f008 fd55 	bl	8009ff4 <HAL_UARTEx_DisableFifoMode>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001550:	f7ff fd28 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	24000578 	.word	0x24000578
 800155c:	40004800 	.word	0x40004800

08001560 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0be      	sub	sp, #248	@ 0xf8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	22c0      	movs	r2, #192	@ 0xc0
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f009 fcef 	bl	800af64 <memset>
  if(uartHandle->Instance==UART4)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4ab0      	ldr	r2, [pc, #704]	@ (800184c <HAL_UART_MspInit+0x2ec>)
 800158c:	4293      	cmp	r3, r2
 800158e:	f040 80ac 	bne.w	80016ea <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001592:	f04f 0202 	mov.w	r2, #2
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a4:	f107 0320 	add.w	r3, r7, #32
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 fe27 	bl	80061fc <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80015b4:	f7ff fcf6 	bl	8000fa4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015b8:	4ba5      	ldr	r3, [pc, #660]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 80015ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015be:	4aa4      	ldr	r2, [pc, #656]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 80015c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015c4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80015c8:	4ba1      	ldr	r3, [pc, #644]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 80015ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b9e      	ldr	r3, [pc, #632]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 80015d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015dc:	4a9c      	ldr	r2, [pc, #624]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015e6:	4b9a      	ldr	r3, [pc, #616]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 80015e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800160e:	2308      	movs	r3, #8
 8001610:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001618:	4619      	mov	r1, r3
 800161a:	488e      	ldr	r0, [pc, #568]	@ (8001854 <HAL_UART_MspInit+0x2f4>)
 800161c:	f003 fad8 	bl	8004bd0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001620:	4b8d      	ldr	r3, [pc, #564]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 8001622:	4a8e      	ldr	r2, [pc, #568]	@ (800185c <HAL_UART_MspInit+0x2fc>)
 8001624:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001626:	4b8c      	ldr	r3, [pc, #560]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 8001628:	223f      	movs	r2, #63	@ 0x3f
 800162a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162c:	4b8a      	ldr	r3, [pc, #552]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001632:	4b89      	ldr	r3, [pc, #548]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001638:	4b87      	ldr	r3, [pc, #540]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 800163a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800163e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001640:	4b85      	ldr	r3, [pc, #532]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001646:	4b84      	ldr	r3, [pc, #528]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800164c:	4b82      	ldr	r3, [pc, #520]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 800164e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001652:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001654:	4b80      	ldr	r3, [pc, #512]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165a:	4b7f      	ldr	r3, [pc, #508]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001660:	487d      	ldr	r0, [pc, #500]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 8001662:	f000 fbcb 	bl	8001dfc <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 800166c:	f7ff fc9a 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a79      	ldr	r2, [pc, #484]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 8001674:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001678:	4a77      	ldr	r2, [pc, #476]	@ (8001858 <HAL_UART_MspInit+0x2f8>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 800167e:	4b78      	ldr	r3, [pc, #480]	@ (8001860 <HAL_UART_MspInit+0x300>)
 8001680:	4a78      	ldr	r2, [pc, #480]	@ (8001864 <HAL_UART_MspInit+0x304>)
 8001682:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001684:	4b76      	ldr	r3, [pc, #472]	@ (8001860 <HAL_UART_MspInit+0x300>)
 8001686:	2240      	movs	r2, #64	@ 0x40
 8001688:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800168a:	4b75      	ldr	r3, [pc, #468]	@ (8001860 <HAL_UART_MspInit+0x300>)
 800168c:	2240      	movs	r2, #64	@ 0x40
 800168e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001690:	4b73      	ldr	r3, [pc, #460]	@ (8001860 <HAL_UART_MspInit+0x300>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001696:	4b72      	ldr	r3, [pc, #456]	@ (8001860 <HAL_UART_MspInit+0x300>)
 8001698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800169c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169e:	4b70      	ldr	r3, [pc, #448]	@ (8001860 <HAL_UART_MspInit+0x300>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001860 <HAL_UART_MspInit+0x300>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80016aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001860 <HAL_UART_MspInit+0x300>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001860 <HAL_UART_MspInit+0x300>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001860 <HAL_UART_MspInit+0x300>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80016bc:	4868      	ldr	r0, [pc, #416]	@ (8001860 <HAL_UART_MspInit+0x300>)
 80016be:	f000 fb9d 	bl	8001dfc <HAL_DMA_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 80016c8:	f7ff fc6c 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a64      	ldr	r2, [pc, #400]	@ (8001860 <HAL_UART_MspInit+0x300>)
 80016d0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80016d2:	4a63      	ldr	r2, [pc, #396]	@ (8001860 <HAL_UART_MspInit+0x300>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2034      	movs	r0, #52	@ 0x34
 80016de:	f000 fae0 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016e2:	2034      	movs	r0, #52	@ 0x34
 80016e4:	f000 faf7 	bl	8001cd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016e8:	e114      	b.n	8001914 <HAL_UART_MspInit+0x3b4>
  else if(uartHandle->Instance==UART5)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001868 <HAL_UART_MspInit+0x308>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f040 80c3 	bne.w	800187c <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80016f6:	f04f 0202 	mov.w	r2, #2
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001708:	f107 0320 	add.w	r3, r7, #32
 800170c:	4618      	mov	r0, r3
 800170e:	f004 fd75 	bl	80061fc <HAL_RCCEx_PeriphCLKConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001718:	f7ff fc44 	bl	8000fa4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800171c:	4b4c      	ldr	r3, [pc, #304]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 800171e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001722:	4a4b      	ldr	r2, [pc, #300]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 8001724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001728:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800172c:	4b48      	ldr	r3, [pc, #288]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 800172e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	4b45      	ldr	r3, [pc, #276]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 800173c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001740:	4a43      	ldr	r2, [pc, #268]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800174a:	4b41      	ldr	r3, [pc, #260]	@ (8001850 <HAL_UART_MspInit+0x2f0>)
 800174c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001758:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800175c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001772:	230e      	movs	r3, #14
 8001774:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800177c:	4619      	mov	r1, r3
 800177e:	4835      	ldr	r0, [pc, #212]	@ (8001854 <HAL_UART_MspInit+0x2f4>)
 8001780:	f003 fa26 	bl	8004bd0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001784:	4b39      	ldr	r3, [pc, #228]	@ (800186c <HAL_UART_MspInit+0x30c>)
 8001786:	4a3a      	ldr	r2, [pc, #232]	@ (8001870 <HAL_UART_MspInit+0x310>)
 8001788:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800178a:	4b38      	ldr	r3, [pc, #224]	@ (800186c <HAL_UART_MspInit+0x30c>)
 800178c:	2241      	movs	r2, #65	@ 0x41
 800178e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001790:	4b36      	ldr	r3, [pc, #216]	@ (800186c <HAL_UART_MspInit+0x30c>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001796:	4b35      	ldr	r3, [pc, #212]	@ (800186c <HAL_UART_MspInit+0x30c>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800179c:	4b33      	ldr	r3, [pc, #204]	@ (800186c <HAL_UART_MspInit+0x30c>)
 800179e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017a2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a4:	4b31      	ldr	r3, [pc, #196]	@ (800186c <HAL_UART_MspInit+0x30c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017aa:	4b30      	ldr	r3, [pc, #192]	@ (800186c <HAL_UART_MspInit+0x30c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80017b0:	4b2e      	ldr	r3, [pc, #184]	@ (800186c <HAL_UART_MspInit+0x30c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017b6:	4b2d      	ldr	r3, [pc, #180]	@ (800186c <HAL_UART_MspInit+0x30c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017bc:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <HAL_UART_MspInit+0x30c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80017c2:	482a      	ldr	r0, [pc, #168]	@ (800186c <HAL_UART_MspInit+0x30c>)
 80017c4:	f000 fb1a 	bl	8001dfc <HAL_DMA_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_UART_MspInit+0x272>
      Error_Handler();
 80017ce:	f7ff fbe9 	bl	8000fa4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a25      	ldr	r2, [pc, #148]	@ (800186c <HAL_UART_MspInit+0x30c>)
 80017d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017da:	4a24      	ldr	r2, [pc, #144]	@ (800186c <HAL_UART_MspInit+0x30c>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 80017e0:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <HAL_UART_MspInit+0x314>)
 80017e2:	4a25      	ldr	r2, [pc, #148]	@ (8001878 <HAL_UART_MspInit+0x318>)
 80017e4:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <HAL_UART_MspInit+0x314>)
 80017e8:	2242      	movs	r2, #66	@ 0x42
 80017ea:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ec:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <HAL_UART_MspInit+0x314>)
 80017ee:	2240      	movs	r2, #64	@ 0x40
 80017f0:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_UART_MspInit+0x314>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <HAL_UART_MspInit+0x314>)
 80017fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017fe:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_UART_MspInit+0x314>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_UART_MspInit+0x314>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_UART_MspInit+0x314>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_UART_MspInit+0x314>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001818:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_UART_MspInit+0x314>)
 800181a:	2200      	movs	r2, #0
 800181c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800181e:	4815      	ldr	r0, [pc, #84]	@ (8001874 <HAL_UART_MspInit+0x314>)
 8001820:	f000 faec 	bl	8001dfc <HAL_DMA_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 800182a:	f7ff fbbb 	bl	8000fa4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a10      	ldr	r2, [pc, #64]	@ (8001874 <HAL_UART_MspInit+0x314>)
 8001832:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001834:	4a0f      	ldr	r2, [pc, #60]	@ (8001874 <HAL_UART_MspInit+0x314>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2035      	movs	r0, #53	@ 0x35
 8001840:	f000 fa2f 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001844:	2035      	movs	r0, #53	@ 0x35
 8001846:	f000 fa46 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
}
 800184a:	e063      	b.n	8001914 <HAL_UART_MspInit+0x3b4>
 800184c:	40004c00 	.word	0x40004c00
 8001850:	58024400 	.word	0x58024400
 8001854:	58020400 	.word	0x58020400
 8001858:	2400060c 	.word	0x2400060c
 800185c:	40020040 	.word	0x40020040
 8001860:	24000684 	.word	0x24000684
 8001864:	40020058 	.word	0x40020058
 8001868:	40005000 	.word	0x40005000
 800186c:	240006fc 	.word	0x240006fc
 8001870:	40020010 	.word	0x40020010
 8001874:	24000774 	.word	0x24000774
 8001878:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a26      	ldr	r2, [pc, #152]	@ (800191c <HAL_UART_MspInit+0x3bc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d146      	bne.n	8001914 <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001886:	f04f 0202 	mov.w	r2, #2
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	4618      	mov	r0, r3
 800189e:	f004 fcad 	bl	80061fc <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_UART_MspInit+0x34c>
      Error_Handler();
 80018a8:	f7ff fb7c 	bl	8000fa4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <HAL_UART_MspInit+0x3c0>)
 80018ae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001920 <HAL_UART_MspInit+0x3c0>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80018bc:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <HAL_UART_MspInit+0x3c0>)
 80018be:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_UART_MspInit+0x3c0>)
 80018cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018d0:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <HAL_UART_MspInit+0x3c0>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <HAL_UART_MspInit+0x3c0>)
 80018dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001902:	2307      	movs	r3, #7
 8001904:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001908:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <HAL_UART_MspInit+0x3c4>)
 8001910:	f003 f95e 	bl	8004bd0 <HAL_GPIO_Init>
}
 8001914:	bf00      	nop
 8001916:	37f8      	adds	r7, #248	@ 0xf8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40004800 	.word	0x40004800
 8001920:	58024400 	.word	0x58024400
 8001924:	58020c00 	.word	0x58020c00

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001928:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001964 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800192c:	f7ff fd1c 	bl	8001368 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001930:	f7ff fc8a 	bl	8001248 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001934:	480c      	ldr	r0, [pc, #48]	@ (8001968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001936:	490d      	ldr	r1, [pc, #52]	@ (800196c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001938:	4a0d      	ldr	r2, [pc, #52]	@ (8001970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800194c:	4c0a      	ldr	r4, [pc, #40]	@ (8001978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800195a:	f009 fb5b 	bl	800b014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195e:	f7ff f897 	bl	8000a90 <main>
  bx  lr
 8001962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001964:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001968:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800196c:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001970:	0800d32c 	.word	0x0800d32c
  ldr r2, =_sbss
 8001974:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001978:	2400093c 	.word	0x2400093c

0800197c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001986:	2003      	movs	r0, #3
 8001988:	f000 f980 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800198c:	f004 fa60 	bl	8005e50 <HAL_RCC_GetSysClockFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_Init+0x68>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	4913      	ldr	r1, [pc, #76]	@ (80019ec <HAL_Init+0x6c>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <HAL_Init+0x68>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	4a0e      	ldr	r2, [pc, #56]	@ (80019ec <HAL_Init+0x6c>)
 80019b4:	5cd3      	ldrb	r3, [r2, r3]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	4a0b      	ldr	r2, [pc, #44]	@ (80019f0 <HAL_Init+0x70>)
 80019c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019c4:	4a0b      	ldr	r2, [pc, #44]	@ (80019f4 <HAL_Init+0x74>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 f814 	bl	80019f8 <HAL_InitTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e002      	b.n	80019e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019da:	f7ff fae9 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	58024400 	.word	0x58024400
 80019ec:	0800cf68 	.word	0x0800cf68
 80019f0:	24000004 	.word	0x24000004
 80019f4:	24000000 	.word	0x24000000

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a00:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <HAL_InitTick+0x60>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e021      	b.n	8001a50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <HAL_InitTick+0x64>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <HAL_InitTick+0x60>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f965 	bl	8001cf2 <HAL_SYSTICK_Config>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00e      	b.n	8001a50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b0f      	cmp	r3, #15
 8001a36:	d80a      	bhi.n	8001a4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f000 f92f 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a44:	4a06      	ldr	r2, [pc, #24]	@ (8001a60 <HAL_InitTick+0x68>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2400000c 	.word	0x2400000c
 8001a5c:	24000000 	.word	0x24000000
 8001a60:	24000008 	.word	0x24000008

08001a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_IncTick+0x20>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_IncTick+0x24>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <HAL_IncTick+0x24>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2400000c 	.word	0x2400000c
 8001a88:	240007ec 	.word	0x240007ec

08001a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <HAL_GetTick+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	240007ec 	.word	0x240007ec

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff ffee 	bl	8001a8c <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d005      	beq.n	8001aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_Delay+0x44>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aca:	bf00      	nop
 8001acc:	f7ff ffde 	bl	8001a8c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d8f7      	bhi.n	8001acc <HAL_Delay+0x28>
  {
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2400000c 	.word	0x2400000c

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x40>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x40>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00
 8001b30:	05fa0000 	.word	0x05fa0000

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	@ (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	@ (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff29 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff40 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff90 	bl	8001be0 <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5f 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff33 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffa4 	bl	8001c48 <SysTick_Config>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d10:	f3bf 8f5f 	dmb	sy
}
 8001d14:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <HAL_MPU_Disable+0x28>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	4a06      	ldr	r2, [pc, #24]	@ (8001d34 <HAL_MPU_Disable+0x28>)
 8001d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d20:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d22:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <HAL_MPU_Disable+0x2c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00
 8001d38:	e000ed90 	.word	0xe000ed90

08001d3c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d44:	4a0b      	ldr	r2, [pc, #44]	@ (8001d74 <HAL_MPU_Enable+0x38>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_MPU_Enable+0x3c>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	4a09      	ldr	r2, [pc, #36]	@ (8001d78 <HAL_MPU_Enable+0x3c>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d58:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d5a:	f3bf 8f4f 	dsb	sy
}
 8001d5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d60:	f3bf 8f6f 	isb	sy
}
 8001d64:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed90 	.word	0xe000ed90
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	785a      	ldrb	r2, [r3, #1]
 8001d88:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d8a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	4a19      	ldr	r2, [pc, #100]	@ (8001df8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d98:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <HAL_MPU_ConfigRegion+0x7c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7b1b      	ldrb	r3, [r3, #12]
 8001da4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7adb      	ldrb	r3, [r3, #11]
 8001daa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7a9b      	ldrb	r3, [r3, #10]
 8001db2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001db4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7b5b      	ldrb	r3, [r3, #13]
 8001dba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001dbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7b9b      	ldrb	r3, [r3, #14]
 8001dc2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001dc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7bdb      	ldrb	r3, [r3, #15]
 8001dca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001dcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7a5b      	ldrb	r3, [r3, #9]
 8001dd2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7a1b      	ldrb	r3, [r3, #8]
 8001dda:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ddc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001de6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001de8:	6113      	str	r3, [r2, #16]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed90 	.word	0xe000ed90

08001dfc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff fe42 	bl	8001a8c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e37d      	b.n	8002510 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a66      	ldr	r2, [pc, #408]	@ (8001fb4 <HAL_DMA_Init+0x1b8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d04a      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a65      	ldr	r2, [pc, #404]	@ (8001fb8 <HAL_DMA_Init+0x1bc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d045      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a63      	ldr	r2, [pc, #396]	@ (8001fbc <HAL_DMA_Init+0x1c0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d040      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a62      	ldr	r2, [pc, #392]	@ (8001fc0 <HAL_DMA_Init+0x1c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d03b      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a60      	ldr	r2, [pc, #384]	@ (8001fc4 <HAL_DMA_Init+0x1c8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d036      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8001fc8 <HAL_DMA_Init+0x1cc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d031      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a5d      	ldr	r2, [pc, #372]	@ (8001fcc <HAL_DMA_Init+0x1d0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d02c      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a5c      	ldr	r2, [pc, #368]	@ (8001fd0 <HAL_DMA_Init+0x1d4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d027      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a5a      	ldr	r2, [pc, #360]	@ (8001fd4 <HAL_DMA_Init+0x1d8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d022      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a59      	ldr	r2, [pc, #356]	@ (8001fd8 <HAL_DMA_Init+0x1dc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d01d      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a57      	ldr	r2, [pc, #348]	@ (8001fdc <HAL_DMA_Init+0x1e0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d018      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a56      	ldr	r2, [pc, #344]	@ (8001fe0 <HAL_DMA_Init+0x1e4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a54      	ldr	r2, [pc, #336]	@ (8001fe4 <HAL_DMA_Init+0x1e8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00e      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a53      	ldr	r2, [pc, #332]	@ (8001fe8 <HAL_DMA_Init+0x1ec>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a51      	ldr	r2, [pc, #324]	@ (8001fec <HAL_DMA_Init+0x1f0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_DMA_Init+0xb8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a50      	ldr	r2, [pc, #320]	@ (8001ff0 <HAL_DMA_Init+0x1f4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_DMA_Init+0xbc>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_DMA_Init+0xbe>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 813c 	beq.w	8002138 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a37      	ldr	r2, [pc, #220]	@ (8001fb4 <HAL_DMA_Init+0x1b8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d04a      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a36      	ldr	r2, [pc, #216]	@ (8001fb8 <HAL_DMA_Init+0x1bc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d045      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a34      	ldr	r2, [pc, #208]	@ (8001fbc <HAL_DMA_Init+0x1c0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d040      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a33      	ldr	r2, [pc, #204]	@ (8001fc0 <HAL_DMA_Init+0x1c4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d03b      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a31      	ldr	r2, [pc, #196]	@ (8001fc4 <HAL_DMA_Init+0x1c8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d036      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a30      	ldr	r2, [pc, #192]	@ (8001fc8 <HAL_DMA_Init+0x1cc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d031      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2e      	ldr	r2, [pc, #184]	@ (8001fcc <HAL_DMA_Init+0x1d0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d02c      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd0 <HAL_DMA_Init+0x1d4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d027      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd4 <HAL_DMA_Init+0x1d8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d022      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd8 <HAL_DMA_Init+0x1dc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d01d      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a28      	ldr	r2, [pc, #160]	@ (8001fdc <HAL_DMA_Init+0x1e0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d018      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a27      	ldr	r2, [pc, #156]	@ (8001fe0 <HAL_DMA_Init+0x1e4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d013      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a25      	ldr	r2, [pc, #148]	@ (8001fe4 <HAL_DMA_Init+0x1e8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00e      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a24      	ldr	r2, [pc, #144]	@ (8001fe8 <HAL_DMA_Init+0x1ec>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a22      	ldr	r2, [pc, #136]	@ (8001fec <HAL_DMA_Init+0x1f0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d004      	beq.n	8001f70 <HAL_DMA_Init+0x174>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a21      	ldr	r2, [pc, #132]	@ (8001ff0 <HAL_DMA_Init+0x1f4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d108      	bne.n	8001f82 <HAL_DMA_Init+0x186>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e007      	b.n	8001f92 <HAL_DMA_Init+0x196>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f92:	e02f      	b.n	8001ff4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f94:	f7ff fd7a 	bl	8001a8c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d928      	bls.n	8001ff4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2203      	movs	r2, #3
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e2ad      	b.n	8002510 <HAL_DMA_Init+0x714>
 8001fb4:	40020010 	.word	0x40020010
 8001fb8:	40020028 	.word	0x40020028
 8001fbc:	40020040 	.word	0x40020040
 8001fc0:	40020058 	.word	0x40020058
 8001fc4:	40020070 	.word	0x40020070
 8001fc8:	40020088 	.word	0x40020088
 8001fcc:	400200a0 	.word	0x400200a0
 8001fd0:	400200b8 	.word	0x400200b8
 8001fd4:	40020410 	.word	0x40020410
 8001fd8:	40020428 	.word	0x40020428
 8001fdc:	40020440 	.word	0x40020440
 8001fe0:	40020458 	.word	0x40020458
 8001fe4:	40020470 	.word	0x40020470
 8001fe8:	40020488 	.word	0x40020488
 8001fec:	400204a0 	.word	0x400204a0
 8001ff0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1c8      	bne.n	8001f94 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4b73      	ldr	r3, [pc, #460]	@ (80021dc <HAL_DMA_Init+0x3e0>)
 800200e:	4013      	ands	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800201a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002026:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002032:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	2b04      	cmp	r3, #4
 8002046:	d107      	bne.n	8002058 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4313      	orrs	r3, r2
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b28      	cmp	r3, #40	@ 0x28
 800205e:	d903      	bls.n	8002068 <HAL_DMA_Init+0x26c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b2e      	cmp	r3, #46	@ 0x2e
 8002066:	d91f      	bls.n	80020a8 <HAL_DMA_Init+0x2ac>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b3e      	cmp	r3, #62	@ 0x3e
 800206e:	d903      	bls.n	8002078 <HAL_DMA_Init+0x27c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b42      	cmp	r3, #66	@ 0x42
 8002076:	d917      	bls.n	80020a8 <HAL_DMA_Init+0x2ac>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b46      	cmp	r3, #70	@ 0x46
 800207e:	d903      	bls.n	8002088 <HAL_DMA_Init+0x28c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b48      	cmp	r3, #72	@ 0x48
 8002086:	d90f      	bls.n	80020a8 <HAL_DMA_Init+0x2ac>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b4e      	cmp	r3, #78	@ 0x4e
 800208e:	d903      	bls.n	8002098 <HAL_DMA_Init+0x29c>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b52      	cmp	r3, #82	@ 0x52
 8002096:	d907      	bls.n	80020a8 <HAL_DMA_Init+0x2ac>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b73      	cmp	r3, #115	@ 0x73
 800209e:	d905      	bls.n	80020ac <HAL_DMA_Init+0x2b0>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b77      	cmp	r3, #119	@ 0x77
 80020a6:	d801      	bhi.n	80020ac <HAL_DMA_Init+0x2b0>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_DMA_Init+0x2b2>
 80020ac:	2300      	movs	r3, #0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f023 0307 	bic.w	r3, r3, #7
 80020d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4313      	orrs	r3, r2
 80020da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d117      	bne.n	8002114 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00e      	beq.n	8002114 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f002 fbe0 	bl	80048bc <DMA_CheckFifoParam>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2240      	movs	r2, #64	@ 0x40
 8002106:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e1fd      	b.n	8002510 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f002 fb1b 	bl	8004758 <DMA_CalcBaseAndBitshift>
 8002122:	4603      	mov	r3, r0
 8002124:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	223f      	movs	r2, #63	@ 0x3f
 8002130:	409a      	lsls	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	e0fd      	b.n	8002334 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a28      	ldr	r2, [pc, #160]	@ (80021e0 <HAL_DMA_Init+0x3e4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d04a      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a27      	ldr	r2, [pc, #156]	@ (80021e4 <HAL_DMA_Init+0x3e8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d045      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <HAL_DMA_Init+0x3ec>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d040      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a24      	ldr	r2, [pc, #144]	@ (80021ec <HAL_DMA_Init+0x3f0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d03b      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a22      	ldr	r2, [pc, #136]	@ (80021f0 <HAL_DMA_Init+0x3f4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d036      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a21      	ldr	r2, [pc, #132]	@ (80021f4 <HAL_DMA_Init+0x3f8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d031      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1f      	ldr	r2, [pc, #124]	@ (80021f8 <HAL_DMA_Init+0x3fc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02c      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1e      	ldr	r2, [pc, #120]	@ (80021fc <HAL_DMA_Init+0x400>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d027      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1c      	ldr	r2, [pc, #112]	@ (8002200 <HAL_DMA_Init+0x404>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d022      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1b      	ldr	r2, [pc, #108]	@ (8002204 <HAL_DMA_Init+0x408>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d01d      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a19      	ldr	r2, [pc, #100]	@ (8002208 <HAL_DMA_Init+0x40c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d018      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a18      	ldr	r2, [pc, #96]	@ (800220c <HAL_DMA_Init+0x410>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a16      	ldr	r2, [pc, #88]	@ (8002210 <HAL_DMA_Init+0x414>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00e      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a15      	ldr	r2, [pc, #84]	@ (8002214 <HAL_DMA_Init+0x418>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d009      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a13      	ldr	r2, [pc, #76]	@ (8002218 <HAL_DMA_Init+0x41c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d004      	beq.n	80021d8 <HAL_DMA_Init+0x3dc>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a12      	ldr	r2, [pc, #72]	@ (800221c <HAL_DMA_Init+0x420>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d123      	bne.n	8002220 <HAL_DMA_Init+0x424>
 80021d8:	2301      	movs	r3, #1
 80021da:	e022      	b.n	8002222 <HAL_DMA_Init+0x426>
 80021dc:	fe10803f 	.word	0xfe10803f
 80021e0:	48022c08 	.word	0x48022c08
 80021e4:	48022c1c 	.word	0x48022c1c
 80021e8:	48022c30 	.word	0x48022c30
 80021ec:	48022c44 	.word	0x48022c44
 80021f0:	48022c58 	.word	0x48022c58
 80021f4:	48022c6c 	.word	0x48022c6c
 80021f8:	48022c80 	.word	0x48022c80
 80021fc:	48022c94 	.word	0x48022c94
 8002200:	58025408 	.word	0x58025408
 8002204:	5802541c 	.word	0x5802541c
 8002208:	58025430 	.word	0x58025430
 800220c:	58025444 	.word	0x58025444
 8002210:	58025458 	.word	0x58025458
 8002214:	5802546c 	.word	0x5802546c
 8002218:	58025480 	.word	0x58025480
 800221c:	58025494 	.word	0x58025494
 8002220:	2300      	movs	r3, #0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d07d      	beq.n	8002322 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7f      	ldr	r2, [pc, #508]	@ (8002428 <HAL_DMA_Init+0x62c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d021      	beq.n	8002274 <HAL_DMA_Init+0x478>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a7d      	ldr	r2, [pc, #500]	@ (800242c <HAL_DMA_Init+0x630>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01c      	beq.n	8002274 <HAL_DMA_Init+0x478>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7c      	ldr	r2, [pc, #496]	@ (8002430 <HAL_DMA_Init+0x634>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d017      	beq.n	8002274 <HAL_DMA_Init+0x478>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a7a      	ldr	r2, [pc, #488]	@ (8002434 <HAL_DMA_Init+0x638>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d012      	beq.n	8002274 <HAL_DMA_Init+0x478>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a79      	ldr	r2, [pc, #484]	@ (8002438 <HAL_DMA_Init+0x63c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00d      	beq.n	8002274 <HAL_DMA_Init+0x478>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a77      	ldr	r2, [pc, #476]	@ (800243c <HAL_DMA_Init+0x640>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d008      	beq.n	8002274 <HAL_DMA_Init+0x478>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a76      	ldr	r2, [pc, #472]	@ (8002440 <HAL_DMA_Init+0x644>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <HAL_DMA_Init+0x478>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a74      	ldr	r2, [pc, #464]	@ (8002444 <HAL_DMA_Init+0x648>)
 8002272:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4b6e      	ldr	r3, [pc, #440]	@ (8002448 <HAL_DMA_Init+0x64c>)
 8002290:	4013      	ands	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b40      	cmp	r3, #64	@ 0x40
 800229a:	d008      	beq.n	80022ae <HAL_DMA_Init+0x4b2>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b80      	cmp	r3, #128	@ 0x80
 80022a2:	d102      	bne.n	80022aa <HAL_DMA_Init+0x4ae>
 80022a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022a8:	e002      	b.n	80022b0 <HAL_DMA_Init+0x4b4>
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_DMA_Init+0x4b4>
 80022ae:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68d2      	ldr	r2, [r2, #12]
 80022b4:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022b6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022be:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022c6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022ce:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022d6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022de:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b55      	ldr	r3, [pc, #340]	@ (800244c <HAL_DMA_Init+0x650>)
 80022f6:	4413      	add	r3, r2
 80022f8:	4a55      	ldr	r2, [pc, #340]	@ (8002450 <HAL_DMA_Init+0x654>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	009a      	lsls	r2, r3, #2
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f002 fa26 	bl	8004758 <DMA_CalcBaseAndBitshift>
 800230c:	4603      	mov	r3, r0
 800230e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2201      	movs	r2, #1
 800231a:	409a      	lsls	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	e008      	b.n	8002334 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2240      	movs	r2, #64	@ 0x40
 8002326:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2203      	movs	r2, #3
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0ed      	b.n	8002510 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a46      	ldr	r2, [pc, #280]	@ (8002454 <HAL_DMA_Init+0x658>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d072      	beq.n	8002424 <HAL_DMA_Init+0x628>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a45      	ldr	r2, [pc, #276]	@ (8002458 <HAL_DMA_Init+0x65c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d06d      	beq.n	8002424 <HAL_DMA_Init+0x628>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a43      	ldr	r2, [pc, #268]	@ (800245c <HAL_DMA_Init+0x660>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d068      	beq.n	8002424 <HAL_DMA_Init+0x628>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a42      	ldr	r2, [pc, #264]	@ (8002460 <HAL_DMA_Init+0x664>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d063      	beq.n	8002424 <HAL_DMA_Init+0x628>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a40      	ldr	r2, [pc, #256]	@ (8002464 <HAL_DMA_Init+0x668>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d05e      	beq.n	8002424 <HAL_DMA_Init+0x628>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a3f      	ldr	r2, [pc, #252]	@ (8002468 <HAL_DMA_Init+0x66c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d059      	beq.n	8002424 <HAL_DMA_Init+0x628>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3d      	ldr	r2, [pc, #244]	@ (800246c <HAL_DMA_Init+0x670>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d054      	beq.n	8002424 <HAL_DMA_Init+0x628>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a3c      	ldr	r2, [pc, #240]	@ (8002470 <HAL_DMA_Init+0x674>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d04f      	beq.n	8002424 <HAL_DMA_Init+0x628>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a3a      	ldr	r2, [pc, #232]	@ (8002474 <HAL_DMA_Init+0x678>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d04a      	beq.n	8002424 <HAL_DMA_Init+0x628>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a39      	ldr	r2, [pc, #228]	@ (8002478 <HAL_DMA_Init+0x67c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d045      	beq.n	8002424 <HAL_DMA_Init+0x628>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a37      	ldr	r2, [pc, #220]	@ (800247c <HAL_DMA_Init+0x680>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d040      	beq.n	8002424 <HAL_DMA_Init+0x628>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a36      	ldr	r2, [pc, #216]	@ (8002480 <HAL_DMA_Init+0x684>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d03b      	beq.n	8002424 <HAL_DMA_Init+0x628>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a34      	ldr	r2, [pc, #208]	@ (8002484 <HAL_DMA_Init+0x688>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d036      	beq.n	8002424 <HAL_DMA_Init+0x628>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a33      	ldr	r2, [pc, #204]	@ (8002488 <HAL_DMA_Init+0x68c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d031      	beq.n	8002424 <HAL_DMA_Init+0x628>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a31      	ldr	r2, [pc, #196]	@ (800248c <HAL_DMA_Init+0x690>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02c      	beq.n	8002424 <HAL_DMA_Init+0x628>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a30      	ldr	r2, [pc, #192]	@ (8002490 <HAL_DMA_Init+0x694>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d027      	beq.n	8002424 <HAL_DMA_Init+0x628>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a13      	ldr	r2, [pc, #76]	@ (8002428 <HAL_DMA_Init+0x62c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d022      	beq.n	8002424 <HAL_DMA_Init+0x628>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a12      	ldr	r2, [pc, #72]	@ (800242c <HAL_DMA_Init+0x630>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01d      	beq.n	8002424 <HAL_DMA_Init+0x628>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a10      	ldr	r2, [pc, #64]	@ (8002430 <HAL_DMA_Init+0x634>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d018      	beq.n	8002424 <HAL_DMA_Init+0x628>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002434 <HAL_DMA_Init+0x638>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_DMA_Init+0x628>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0d      	ldr	r2, [pc, #52]	@ (8002438 <HAL_DMA_Init+0x63c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_DMA_Init+0x628>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a0c      	ldr	r2, [pc, #48]	@ (800243c <HAL_DMA_Init+0x640>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_DMA_Init+0x628>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <HAL_DMA_Init+0x644>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_DMA_Init+0x628>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a09      	ldr	r2, [pc, #36]	@ (8002444 <HAL_DMA_Init+0x648>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d137      	bne.n	8002494 <HAL_DMA_Init+0x698>
 8002424:	2301      	movs	r3, #1
 8002426:	e036      	b.n	8002496 <HAL_DMA_Init+0x69a>
 8002428:	58025408 	.word	0x58025408
 800242c:	5802541c 	.word	0x5802541c
 8002430:	58025430 	.word	0x58025430
 8002434:	58025444 	.word	0x58025444
 8002438:	58025458 	.word	0x58025458
 800243c:	5802546c 	.word	0x5802546c
 8002440:	58025480 	.word	0x58025480
 8002444:	58025494 	.word	0x58025494
 8002448:	fffe000f 	.word	0xfffe000f
 800244c:	a7fdabf8 	.word	0xa7fdabf8
 8002450:	cccccccd 	.word	0xcccccccd
 8002454:	40020010 	.word	0x40020010
 8002458:	40020028 	.word	0x40020028
 800245c:	40020040 	.word	0x40020040
 8002460:	40020058 	.word	0x40020058
 8002464:	40020070 	.word	0x40020070
 8002468:	40020088 	.word	0x40020088
 800246c:	400200a0 	.word	0x400200a0
 8002470:	400200b8 	.word	0x400200b8
 8002474:	40020410 	.word	0x40020410
 8002478:	40020428 	.word	0x40020428
 800247c:	40020440 	.word	0x40020440
 8002480:	40020458 	.word	0x40020458
 8002484:	40020470 	.word	0x40020470
 8002488:	40020488 	.word	0x40020488
 800248c:	400204a0 	.word	0x400204a0
 8002490:	400204b8 	.word	0x400204b8
 8002494:	2300      	movs	r3, #0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d032      	beq.n	8002500 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f002 fa8a 	bl	80049b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b80      	cmp	r3, #128	@ 0x80
 80024a6:	d102      	bne.n	80024ae <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024c2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d010      	beq.n	80024ee <HAL_DMA_Init+0x6f2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d80c      	bhi.n	80024ee <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f002 fb07 	bl	8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	e008      	b.n	8002500 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e226      	b.n	8002982 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_DMA_Start_IT+0x2a>
 800253e:	2302      	movs	r3, #2
 8002540:	e21f      	b.n	8002982 <HAL_DMA_Start_IT+0x46a>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	f040 820a 	bne.w	800296c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a68      	ldr	r2, [pc, #416]	@ (800270c <HAL_DMA_Start_IT+0x1f4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d04a      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a66      	ldr	r2, [pc, #408]	@ (8002710 <HAL_DMA_Start_IT+0x1f8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d045      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a65      	ldr	r2, [pc, #404]	@ (8002714 <HAL_DMA_Start_IT+0x1fc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d040      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a63      	ldr	r2, [pc, #396]	@ (8002718 <HAL_DMA_Start_IT+0x200>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d03b      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a62      	ldr	r2, [pc, #392]	@ (800271c <HAL_DMA_Start_IT+0x204>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d036      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a60      	ldr	r2, [pc, #384]	@ (8002720 <HAL_DMA_Start_IT+0x208>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002724 <HAL_DMA_Start_IT+0x20c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d02c      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002728 <HAL_DMA_Start_IT+0x210>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d027      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5c      	ldr	r2, [pc, #368]	@ (800272c <HAL_DMA_Start_IT+0x214>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002730 <HAL_DMA_Start_IT+0x218>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a59      	ldr	r2, [pc, #356]	@ (8002734 <HAL_DMA_Start_IT+0x21c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d018      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a57      	ldr	r2, [pc, #348]	@ (8002738 <HAL_DMA_Start_IT+0x220>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a56      	ldr	r2, [pc, #344]	@ (800273c <HAL_DMA_Start_IT+0x224>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a54      	ldr	r2, [pc, #336]	@ (8002740 <HAL_DMA_Start_IT+0x228>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a53      	ldr	r2, [pc, #332]	@ (8002744 <HAL_DMA_Start_IT+0x22c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_DMA_Start_IT+0xee>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a51      	ldr	r2, [pc, #324]	@ (8002748 <HAL_DMA_Start_IT+0x230>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d108      	bne.n	8002618 <HAL_DMA_Start_IT+0x100>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e007      	b.n	8002628 <HAL_DMA_Start_IT+0x110>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f001 feae 	bl	8004390 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a34      	ldr	r2, [pc, #208]	@ (800270c <HAL_DMA_Start_IT+0x1f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d04a      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a33      	ldr	r2, [pc, #204]	@ (8002710 <HAL_DMA_Start_IT+0x1f8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d045      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a31      	ldr	r2, [pc, #196]	@ (8002714 <HAL_DMA_Start_IT+0x1fc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d040      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a30      	ldr	r2, [pc, #192]	@ (8002718 <HAL_DMA_Start_IT+0x200>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d03b      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a2e      	ldr	r2, [pc, #184]	@ (800271c <HAL_DMA_Start_IT+0x204>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d036      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2d      	ldr	r2, [pc, #180]	@ (8002720 <HAL_DMA_Start_IT+0x208>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d031      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a2b      	ldr	r2, [pc, #172]	@ (8002724 <HAL_DMA_Start_IT+0x20c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d02c      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2a      	ldr	r2, [pc, #168]	@ (8002728 <HAL_DMA_Start_IT+0x210>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d027      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a28      	ldr	r2, [pc, #160]	@ (800272c <HAL_DMA_Start_IT+0x214>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d022      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a27      	ldr	r2, [pc, #156]	@ (8002730 <HAL_DMA_Start_IT+0x218>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d01d      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a25      	ldr	r2, [pc, #148]	@ (8002734 <HAL_DMA_Start_IT+0x21c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d018      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a24      	ldr	r2, [pc, #144]	@ (8002738 <HAL_DMA_Start_IT+0x220>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d013      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a22      	ldr	r2, [pc, #136]	@ (800273c <HAL_DMA_Start_IT+0x224>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00e      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a21      	ldr	r2, [pc, #132]	@ (8002740 <HAL_DMA_Start_IT+0x228>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002744 <HAL_DMA_Start_IT+0x22c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <HAL_DMA_Start_IT+0x1bc>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002748 <HAL_DMA_Start_IT+0x230>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_DMA_Start_IT+0x1c0>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_DMA_Start_IT+0x1c2>
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d036      	beq.n	800274c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 021e 	bic.w	r2, r3, #30
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0216 	orr.w	r2, r2, #22
 80026f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d03e      	beq.n	8002778 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0208 	orr.w	r2, r2, #8
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e035      	b.n	8002778 <HAL_DMA_Start_IT+0x260>
 800270c:	40020010 	.word	0x40020010
 8002710:	40020028 	.word	0x40020028
 8002714:	40020040 	.word	0x40020040
 8002718:	40020058 	.word	0x40020058
 800271c:	40020070 	.word	0x40020070
 8002720:	40020088 	.word	0x40020088
 8002724:	400200a0 	.word	0x400200a0
 8002728:	400200b8 	.word	0x400200b8
 800272c:	40020410 	.word	0x40020410
 8002730:	40020428 	.word	0x40020428
 8002734:	40020440 	.word	0x40020440
 8002738:	40020458 	.word	0x40020458
 800273c:	40020470 	.word	0x40020470
 8002740:	40020488 	.word	0x40020488
 8002744:	400204a0 	.word	0x400204a0
 8002748:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 020e 	bic.w	r2, r3, #14
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 020a 	orr.w	r2, r2, #10
 800275e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d007      	beq.n	8002778 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0204 	orr.w	r2, r2, #4
 8002776:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a83      	ldr	r2, [pc, #524]	@ (800298c <HAL_DMA_Start_IT+0x474>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d072      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a82      	ldr	r2, [pc, #520]	@ (8002990 <HAL_DMA_Start_IT+0x478>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d06d      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a80      	ldr	r2, [pc, #512]	@ (8002994 <HAL_DMA_Start_IT+0x47c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d068      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a7f      	ldr	r2, [pc, #508]	@ (8002998 <HAL_DMA_Start_IT+0x480>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d063      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a7d      	ldr	r2, [pc, #500]	@ (800299c <HAL_DMA_Start_IT+0x484>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d05e      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7c      	ldr	r2, [pc, #496]	@ (80029a0 <HAL_DMA_Start_IT+0x488>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d059      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a7a      	ldr	r2, [pc, #488]	@ (80029a4 <HAL_DMA_Start_IT+0x48c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d054      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a79      	ldr	r2, [pc, #484]	@ (80029a8 <HAL_DMA_Start_IT+0x490>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d04f      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a77      	ldr	r2, [pc, #476]	@ (80029ac <HAL_DMA_Start_IT+0x494>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d04a      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a76      	ldr	r2, [pc, #472]	@ (80029b0 <HAL_DMA_Start_IT+0x498>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d045      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a74      	ldr	r2, [pc, #464]	@ (80029b4 <HAL_DMA_Start_IT+0x49c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d040      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a73      	ldr	r2, [pc, #460]	@ (80029b8 <HAL_DMA_Start_IT+0x4a0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d03b      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a71      	ldr	r2, [pc, #452]	@ (80029bc <HAL_DMA_Start_IT+0x4a4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d036      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a70      	ldr	r2, [pc, #448]	@ (80029c0 <HAL_DMA_Start_IT+0x4a8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d031      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6e      	ldr	r2, [pc, #440]	@ (80029c4 <HAL_DMA_Start_IT+0x4ac>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d02c      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6d      	ldr	r2, [pc, #436]	@ (80029c8 <HAL_DMA_Start_IT+0x4b0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d027      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6b      	ldr	r2, [pc, #428]	@ (80029cc <HAL_DMA_Start_IT+0x4b4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d022      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6a      	ldr	r2, [pc, #424]	@ (80029d0 <HAL_DMA_Start_IT+0x4b8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d01d      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a68      	ldr	r2, [pc, #416]	@ (80029d4 <HAL_DMA_Start_IT+0x4bc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d018      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a67      	ldr	r2, [pc, #412]	@ (80029d8 <HAL_DMA_Start_IT+0x4c0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d013      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	@ (80029dc <HAL_DMA_Start_IT+0x4c4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00e      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a64      	ldr	r2, [pc, #400]	@ (80029e0 <HAL_DMA_Start_IT+0x4c8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d009      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a62      	ldr	r2, [pc, #392]	@ (80029e4 <HAL_DMA_Start_IT+0x4cc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d004      	beq.n	8002868 <HAL_DMA_Start_IT+0x350>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a61      	ldr	r2, [pc, #388]	@ (80029e8 <HAL_DMA_Start_IT+0x4d0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d101      	bne.n	800286c <HAL_DMA_Start_IT+0x354>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_DMA_Start_IT+0x356>
 800286c:	2300      	movs	r3, #0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01a      	beq.n	80028a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800288e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a37      	ldr	r2, [pc, #220]	@ (800298c <HAL_DMA_Start_IT+0x474>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d04a      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a36      	ldr	r2, [pc, #216]	@ (8002990 <HAL_DMA_Start_IT+0x478>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d045      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a34      	ldr	r2, [pc, #208]	@ (8002994 <HAL_DMA_Start_IT+0x47c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d040      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a33      	ldr	r2, [pc, #204]	@ (8002998 <HAL_DMA_Start_IT+0x480>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d03b      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a31      	ldr	r2, [pc, #196]	@ (800299c <HAL_DMA_Start_IT+0x484>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d036      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a30      	ldr	r2, [pc, #192]	@ (80029a0 <HAL_DMA_Start_IT+0x488>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d031      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2e      	ldr	r2, [pc, #184]	@ (80029a4 <HAL_DMA_Start_IT+0x48c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02c      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <HAL_DMA_Start_IT+0x490>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d027      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a2b      	ldr	r2, [pc, #172]	@ (80029ac <HAL_DMA_Start_IT+0x494>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d022      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2a      	ldr	r2, [pc, #168]	@ (80029b0 <HAL_DMA_Start_IT+0x498>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d01d      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a28      	ldr	r2, [pc, #160]	@ (80029b4 <HAL_DMA_Start_IT+0x49c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d018      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a27      	ldr	r2, [pc, #156]	@ (80029b8 <HAL_DMA_Start_IT+0x4a0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a25      	ldr	r2, [pc, #148]	@ (80029bc <HAL_DMA_Start_IT+0x4a4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00e      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a24      	ldr	r2, [pc, #144]	@ (80029c0 <HAL_DMA_Start_IT+0x4a8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a22      	ldr	r2, [pc, #136]	@ (80029c4 <HAL_DMA_Start_IT+0x4ac>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_DMA_Start_IT+0x430>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a21      	ldr	r2, [pc, #132]	@ (80029c8 <HAL_DMA_Start_IT+0x4b0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d108      	bne.n	800295a <HAL_DMA_Start_IT+0x442>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e012      	b.n	8002980 <HAL_DMA_Start_IT+0x468>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e009      	b.n	8002980 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002980:	7dfb      	ldrb	r3, [r7, #23]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40020010 	.word	0x40020010
 8002990:	40020028 	.word	0x40020028
 8002994:	40020040 	.word	0x40020040
 8002998:	40020058 	.word	0x40020058
 800299c:	40020070 	.word	0x40020070
 80029a0:	40020088 	.word	0x40020088
 80029a4:	400200a0 	.word	0x400200a0
 80029a8:	400200b8 	.word	0x400200b8
 80029ac:	40020410 	.word	0x40020410
 80029b0:	40020428 	.word	0x40020428
 80029b4:	40020440 	.word	0x40020440
 80029b8:	40020458 	.word	0x40020458
 80029bc:	40020470 	.word	0x40020470
 80029c0:	40020488 	.word	0x40020488
 80029c4:	400204a0 	.word	0x400204a0
 80029c8:	400204b8 	.word	0x400204b8
 80029cc:	58025408 	.word	0x58025408
 80029d0:	5802541c 	.word	0x5802541c
 80029d4:	58025430 	.word	0x58025430
 80029d8:	58025444 	.word	0x58025444
 80029dc:	58025458 	.word	0x58025458
 80029e0:	5802546c 	.word	0x5802546c
 80029e4:	58025480 	.word	0x58025480
 80029e8:	58025494 	.word	0x58025494

080029ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff f84a 	bl	8001a8c <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e2dc      	b.n	8002fbe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d008      	beq.n	8002a22 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2280      	movs	r2, #128	@ 0x80
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e2cd      	b.n	8002fbe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a76      	ldr	r2, [pc, #472]	@ (8002c00 <HAL_DMA_Abort+0x214>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04a      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a74      	ldr	r2, [pc, #464]	@ (8002c04 <HAL_DMA_Abort+0x218>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d045      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a73      	ldr	r2, [pc, #460]	@ (8002c08 <HAL_DMA_Abort+0x21c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d040      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a71      	ldr	r2, [pc, #452]	@ (8002c0c <HAL_DMA_Abort+0x220>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d03b      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a70      	ldr	r2, [pc, #448]	@ (8002c10 <HAL_DMA_Abort+0x224>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d036      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6e      	ldr	r2, [pc, #440]	@ (8002c14 <HAL_DMA_Abort+0x228>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d031      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6d      	ldr	r2, [pc, #436]	@ (8002c18 <HAL_DMA_Abort+0x22c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02c      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6b      	ldr	r2, [pc, #428]	@ (8002c1c <HAL_DMA_Abort+0x230>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d027      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6a      	ldr	r2, [pc, #424]	@ (8002c20 <HAL_DMA_Abort+0x234>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a68      	ldr	r2, [pc, #416]	@ (8002c24 <HAL_DMA_Abort+0x238>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01d      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a67      	ldr	r2, [pc, #412]	@ (8002c28 <HAL_DMA_Abort+0x23c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a65      	ldr	r2, [pc, #404]	@ (8002c2c <HAL_DMA_Abort+0x240>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a64      	ldr	r2, [pc, #400]	@ (8002c30 <HAL_DMA_Abort+0x244>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a62      	ldr	r2, [pc, #392]	@ (8002c34 <HAL_DMA_Abort+0x248>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a61      	ldr	r2, [pc, #388]	@ (8002c38 <HAL_DMA_Abort+0x24c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DMA_Abort+0xd6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5f      	ldr	r2, [pc, #380]	@ (8002c3c <HAL_DMA_Abort+0x250>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <HAL_DMA_Abort+0xda>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_DMA_Abort+0xdc>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 021e 	bic.w	r2, r2, #30
 8002ada:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e00a      	b.n	8002b0a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 020e 	bic.w	r2, r2, #14
 8002b02:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c00 <HAL_DMA_Abort+0x214>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d072      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a3a      	ldr	r2, [pc, #232]	@ (8002c04 <HAL_DMA_Abort+0x218>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d06d      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a39      	ldr	r2, [pc, #228]	@ (8002c08 <HAL_DMA_Abort+0x21c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d068      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a37      	ldr	r2, [pc, #220]	@ (8002c0c <HAL_DMA_Abort+0x220>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d063      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a36      	ldr	r2, [pc, #216]	@ (8002c10 <HAL_DMA_Abort+0x224>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d05e      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a34      	ldr	r2, [pc, #208]	@ (8002c14 <HAL_DMA_Abort+0x228>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d059      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a33      	ldr	r2, [pc, #204]	@ (8002c18 <HAL_DMA_Abort+0x22c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d054      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a31      	ldr	r2, [pc, #196]	@ (8002c1c <HAL_DMA_Abort+0x230>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d04f      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a30      	ldr	r2, [pc, #192]	@ (8002c20 <HAL_DMA_Abort+0x234>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d04a      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2e      	ldr	r2, [pc, #184]	@ (8002c24 <HAL_DMA_Abort+0x238>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d045      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2d      	ldr	r2, [pc, #180]	@ (8002c28 <HAL_DMA_Abort+0x23c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d040      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c2c <HAL_DMA_Abort+0x240>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d03b      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2a      	ldr	r2, [pc, #168]	@ (8002c30 <HAL_DMA_Abort+0x244>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d036      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a28      	ldr	r2, [pc, #160]	@ (8002c34 <HAL_DMA_Abort+0x248>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d031      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a27      	ldr	r2, [pc, #156]	@ (8002c38 <HAL_DMA_Abort+0x24c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d02c      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a25      	ldr	r2, [pc, #148]	@ (8002c3c <HAL_DMA_Abort+0x250>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d027      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a24      	ldr	r2, [pc, #144]	@ (8002c40 <HAL_DMA_Abort+0x254>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d022      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a22      	ldr	r2, [pc, #136]	@ (8002c44 <HAL_DMA_Abort+0x258>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01d      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a21      	ldr	r2, [pc, #132]	@ (8002c48 <HAL_DMA_Abort+0x25c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d018      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <HAL_DMA_Abort+0x260>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c50 <HAL_DMA_Abort+0x264>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00e      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <HAL_DMA_Abort+0x268>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1b      	ldr	r2, [pc, #108]	@ (8002c58 <HAL_DMA_Abort+0x26c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_DMA_Abort+0x20e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <HAL_DMA_Abort+0x270>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d132      	bne.n	8002c60 <HAL_DMA_Abort+0x274>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e031      	b.n	8002c62 <HAL_DMA_Abort+0x276>
 8002bfe:	bf00      	nop
 8002c00:	40020010 	.word	0x40020010
 8002c04:	40020028 	.word	0x40020028
 8002c08:	40020040 	.word	0x40020040
 8002c0c:	40020058 	.word	0x40020058
 8002c10:	40020070 	.word	0x40020070
 8002c14:	40020088 	.word	0x40020088
 8002c18:	400200a0 	.word	0x400200a0
 8002c1c:	400200b8 	.word	0x400200b8
 8002c20:	40020410 	.word	0x40020410
 8002c24:	40020428 	.word	0x40020428
 8002c28:	40020440 	.word	0x40020440
 8002c2c:	40020458 	.word	0x40020458
 8002c30:	40020470 	.word	0x40020470
 8002c34:	40020488 	.word	0x40020488
 8002c38:	400204a0 	.word	0x400204a0
 8002c3c:	400204b8 	.word	0x400204b8
 8002c40:	58025408 	.word	0x58025408
 8002c44:	5802541c 	.word	0x5802541c
 8002c48:	58025430 	.word	0x58025430
 8002c4c:	58025444 	.word	0x58025444
 8002c50:	58025458 	.word	0x58025458
 8002c54:	5802546c 	.word	0x5802546c
 8002c58:	58025480 	.word	0x58025480
 8002c5c:	58025494 	.word	0x58025494
 8002c60:	2300      	movs	r3, #0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6d      	ldr	r2, [pc, #436]	@ (8002e30 <HAL_DMA_Abort+0x444>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d04a      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6b      	ldr	r2, [pc, #428]	@ (8002e34 <HAL_DMA_Abort+0x448>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d045      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6a      	ldr	r2, [pc, #424]	@ (8002e38 <HAL_DMA_Abort+0x44c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d040      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a68      	ldr	r2, [pc, #416]	@ (8002e3c <HAL_DMA_Abort+0x450>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d03b      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a67      	ldr	r2, [pc, #412]	@ (8002e40 <HAL_DMA_Abort+0x454>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d036      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a65      	ldr	r2, [pc, #404]	@ (8002e44 <HAL_DMA_Abort+0x458>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d031      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a64      	ldr	r2, [pc, #400]	@ (8002e48 <HAL_DMA_Abort+0x45c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d02c      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a62      	ldr	r2, [pc, #392]	@ (8002e4c <HAL_DMA_Abort+0x460>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d027      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a61      	ldr	r2, [pc, #388]	@ (8002e50 <HAL_DMA_Abort+0x464>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d022      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a5f      	ldr	r2, [pc, #380]	@ (8002e54 <HAL_DMA_Abort+0x468>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01d      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a5e      	ldr	r2, [pc, #376]	@ (8002e58 <HAL_DMA_Abort+0x46c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d018      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a5c      	ldr	r2, [pc, #368]	@ (8002e5c <HAL_DMA_Abort+0x470>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e60 <HAL_DMA_Abort+0x474>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00e      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a59      	ldr	r2, [pc, #356]	@ (8002e64 <HAL_DMA_Abort+0x478>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d009      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a58      	ldr	r2, [pc, #352]	@ (8002e68 <HAL_DMA_Abort+0x47c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <HAL_DMA_Abort+0x32a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a56      	ldr	r2, [pc, #344]	@ (8002e6c <HAL_DMA_Abort+0x480>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d108      	bne.n	8002d28 <HAL_DMA_Abort+0x33c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e007      	b.n	8002d38 <HAL_DMA_Abort+0x34c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d38:	e013      	b.n	8002d62 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d3a:	f7fe fea7 	bl	8001a8c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d90c      	bls.n	8002d62 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2203      	movs	r2, #3
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e12d      	b.n	8002fbe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e5      	bne.n	8002d3a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2f      	ldr	r2, [pc, #188]	@ (8002e30 <HAL_DMA_Abort+0x444>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04a      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e34 <HAL_DMA_Abort+0x448>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d045      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2c      	ldr	r2, [pc, #176]	@ (8002e38 <HAL_DMA_Abort+0x44c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d040      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2a      	ldr	r2, [pc, #168]	@ (8002e3c <HAL_DMA_Abort+0x450>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d03b      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a29      	ldr	r2, [pc, #164]	@ (8002e40 <HAL_DMA_Abort+0x454>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d036      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a27      	ldr	r2, [pc, #156]	@ (8002e44 <HAL_DMA_Abort+0x458>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d031      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a26      	ldr	r2, [pc, #152]	@ (8002e48 <HAL_DMA_Abort+0x45c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d02c      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a24      	ldr	r2, [pc, #144]	@ (8002e4c <HAL_DMA_Abort+0x460>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d027      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a23      	ldr	r2, [pc, #140]	@ (8002e50 <HAL_DMA_Abort+0x464>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a21      	ldr	r2, [pc, #132]	@ (8002e54 <HAL_DMA_Abort+0x468>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01d      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a20      	ldr	r2, [pc, #128]	@ (8002e58 <HAL_DMA_Abort+0x46c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d018      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e5c <HAL_DMA_Abort+0x470>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1d      	ldr	r2, [pc, #116]	@ (8002e60 <HAL_DMA_Abort+0x474>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e64 <HAL_DMA_Abort+0x478>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e68 <HAL_DMA_Abort+0x47c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_Abort+0x422>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a18      	ldr	r2, [pc, #96]	@ (8002e6c <HAL_DMA_Abort+0x480>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_DMA_Abort+0x426>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_DMA_Abort+0x428>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d02b      	beq.n	8002e70 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	223f      	movs	r2, #63	@ 0x3f
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	e02a      	b.n	8002e86 <HAL_DMA_Abort+0x49a>
 8002e30:	40020010 	.word	0x40020010
 8002e34:	40020028 	.word	0x40020028
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	40020070 	.word	0x40020070
 8002e44:	40020088 	.word	0x40020088
 8002e48:	400200a0 	.word	0x400200a0
 8002e4c:	400200b8 	.word	0x400200b8
 8002e50:	40020410 	.word	0x40020410
 8002e54:	40020428 	.word	0x40020428
 8002e58:	40020440 	.word	0x40020440
 8002e5c:	40020458 	.word	0x40020458
 8002e60:	40020470 	.word	0x40020470
 8002e64:	40020488 	.word	0x40020488
 8002e68:	400204a0 	.word	0x400204a0
 8002e6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e74:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2201      	movs	r2, #1
 8002e80:	409a      	lsls	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a4f      	ldr	r2, [pc, #316]	@ (8002fc8 <HAL_DMA_Abort+0x5dc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d072      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a4d      	ldr	r2, [pc, #308]	@ (8002fcc <HAL_DMA_Abort+0x5e0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d06d      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002fd0 <HAL_DMA_Abort+0x5e4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d068      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd4 <HAL_DMA_Abort+0x5e8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d063      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a49      	ldr	r2, [pc, #292]	@ (8002fd8 <HAL_DMA_Abort+0x5ec>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d05e      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a47      	ldr	r2, [pc, #284]	@ (8002fdc <HAL_DMA_Abort+0x5f0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d059      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a46      	ldr	r2, [pc, #280]	@ (8002fe0 <HAL_DMA_Abort+0x5f4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d054      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a44      	ldr	r2, [pc, #272]	@ (8002fe4 <HAL_DMA_Abort+0x5f8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d04f      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a43      	ldr	r2, [pc, #268]	@ (8002fe8 <HAL_DMA_Abort+0x5fc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d04a      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a41      	ldr	r2, [pc, #260]	@ (8002fec <HAL_DMA_Abort+0x600>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d045      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a40      	ldr	r2, [pc, #256]	@ (8002ff0 <HAL_DMA_Abort+0x604>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d040      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a3e      	ldr	r2, [pc, #248]	@ (8002ff4 <HAL_DMA_Abort+0x608>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d03b      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a3d      	ldr	r2, [pc, #244]	@ (8002ff8 <HAL_DMA_Abort+0x60c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d036      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002ffc <HAL_DMA_Abort+0x610>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d031      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a3a      	ldr	r2, [pc, #232]	@ (8003000 <HAL_DMA_Abort+0x614>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d02c      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a38      	ldr	r2, [pc, #224]	@ (8003004 <HAL_DMA_Abort+0x618>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d027      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a37      	ldr	r2, [pc, #220]	@ (8003008 <HAL_DMA_Abort+0x61c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d022      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a35      	ldr	r2, [pc, #212]	@ (800300c <HAL_DMA_Abort+0x620>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01d      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a34      	ldr	r2, [pc, #208]	@ (8003010 <HAL_DMA_Abort+0x624>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d018      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a32      	ldr	r2, [pc, #200]	@ (8003014 <HAL_DMA_Abort+0x628>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a31      	ldr	r2, [pc, #196]	@ (8003018 <HAL_DMA_Abort+0x62c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00e      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800301c <HAL_DMA_Abort+0x630>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2e      	ldr	r2, [pc, #184]	@ (8003020 <HAL_DMA_Abort+0x634>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_DMA_Abort+0x58a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2c      	ldr	r2, [pc, #176]	@ (8003024 <HAL_DMA_Abort+0x638>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_DMA_Abort+0x58e>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_DMA_Abort+0x590>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f88:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002faa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40020010 	.word	0x40020010
 8002fcc:	40020028 	.word	0x40020028
 8002fd0:	40020040 	.word	0x40020040
 8002fd4:	40020058 	.word	0x40020058
 8002fd8:	40020070 	.word	0x40020070
 8002fdc:	40020088 	.word	0x40020088
 8002fe0:	400200a0 	.word	0x400200a0
 8002fe4:	400200b8 	.word	0x400200b8
 8002fe8:	40020410 	.word	0x40020410
 8002fec:	40020428 	.word	0x40020428
 8002ff0:	40020440 	.word	0x40020440
 8002ff4:	40020458 	.word	0x40020458
 8002ff8:	40020470 	.word	0x40020470
 8002ffc:	40020488 	.word	0x40020488
 8003000:	400204a0 	.word	0x400204a0
 8003004:	400204b8 	.word	0x400204b8
 8003008:	58025408 	.word	0x58025408
 800300c:	5802541c 	.word	0x5802541c
 8003010:	58025430 	.word	0x58025430
 8003014:	58025444 	.word	0x58025444
 8003018:	58025458 	.word	0x58025458
 800301c:	5802546c 	.word	0x5802546c
 8003020:	58025480 	.word	0x58025480
 8003024:	58025494 	.word	0x58025494

08003028 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e237      	b.n	80034aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d004      	beq.n	8003050 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2280      	movs	r2, #128	@ 0x80
 800304a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e22c      	b.n	80034aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5c      	ldr	r2, [pc, #368]	@ (80031c8 <HAL_DMA_Abort_IT+0x1a0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d04a      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5b      	ldr	r2, [pc, #364]	@ (80031cc <HAL_DMA_Abort_IT+0x1a4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d045      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a59      	ldr	r2, [pc, #356]	@ (80031d0 <HAL_DMA_Abort_IT+0x1a8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d040      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a58      	ldr	r2, [pc, #352]	@ (80031d4 <HAL_DMA_Abort_IT+0x1ac>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d03b      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a56      	ldr	r2, [pc, #344]	@ (80031d8 <HAL_DMA_Abort_IT+0x1b0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d036      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a55      	ldr	r2, [pc, #340]	@ (80031dc <HAL_DMA_Abort_IT+0x1b4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d031      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a53      	ldr	r2, [pc, #332]	@ (80031e0 <HAL_DMA_Abort_IT+0x1b8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d02c      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a52      	ldr	r2, [pc, #328]	@ (80031e4 <HAL_DMA_Abort_IT+0x1bc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d027      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a50      	ldr	r2, [pc, #320]	@ (80031e8 <HAL_DMA_Abort_IT+0x1c0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d022      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a4f      	ldr	r2, [pc, #316]	@ (80031ec <HAL_DMA_Abort_IT+0x1c4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d01d      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a4d      	ldr	r2, [pc, #308]	@ (80031f0 <HAL_DMA_Abort_IT+0x1c8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d018      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a4c      	ldr	r2, [pc, #304]	@ (80031f4 <HAL_DMA_Abort_IT+0x1cc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d013      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a4a      	ldr	r2, [pc, #296]	@ (80031f8 <HAL_DMA_Abort_IT+0x1d0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00e      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a49      	ldr	r2, [pc, #292]	@ (80031fc <HAL_DMA_Abort_IT+0x1d4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d009      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a47      	ldr	r2, [pc, #284]	@ (8003200 <HAL_DMA_Abort_IT+0x1d8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_DMA_Abort_IT+0xc8>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a46      	ldr	r2, [pc, #280]	@ (8003204 <HAL_DMA_Abort_IT+0x1dc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_DMA_Abort_IT+0xcc>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_DMA_Abort_IT+0xce>
 80030f4:	2300      	movs	r3, #0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8086 	beq.w	8003208 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2204      	movs	r2, #4
 8003100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a2f      	ldr	r2, [pc, #188]	@ (80031c8 <HAL_DMA_Abort_IT+0x1a0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d04a      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a2e      	ldr	r2, [pc, #184]	@ (80031cc <HAL_DMA_Abort_IT+0x1a4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d045      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a2c      	ldr	r2, [pc, #176]	@ (80031d0 <HAL_DMA_Abort_IT+0x1a8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d040      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2b      	ldr	r2, [pc, #172]	@ (80031d4 <HAL_DMA_Abort_IT+0x1ac>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d03b      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a29      	ldr	r2, [pc, #164]	@ (80031d8 <HAL_DMA_Abort_IT+0x1b0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d036      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a28      	ldr	r2, [pc, #160]	@ (80031dc <HAL_DMA_Abort_IT+0x1b4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d031      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a26      	ldr	r2, [pc, #152]	@ (80031e0 <HAL_DMA_Abort_IT+0x1b8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02c      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a25      	ldr	r2, [pc, #148]	@ (80031e4 <HAL_DMA_Abort_IT+0x1bc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d027      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a23      	ldr	r2, [pc, #140]	@ (80031e8 <HAL_DMA_Abort_IT+0x1c0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d022      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a22      	ldr	r2, [pc, #136]	@ (80031ec <HAL_DMA_Abort_IT+0x1c4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d01d      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a20      	ldr	r2, [pc, #128]	@ (80031f0 <HAL_DMA_Abort_IT+0x1c8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d018      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1f      	ldr	r2, [pc, #124]	@ (80031f4 <HAL_DMA_Abort_IT+0x1cc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d013      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1d      	ldr	r2, [pc, #116]	@ (80031f8 <HAL_DMA_Abort_IT+0x1d0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00e      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1c      	ldr	r2, [pc, #112]	@ (80031fc <HAL_DMA_Abort_IT+0x1d4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d009      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1a      	ldr	r2, [pc, #104]	@ (8003200 <HAL_DMA_Abort_IT+0x1d8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x17c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <HAL_DMA_Abort_IT+0x1dc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d108      	bne.n	80031b6 <HAL_DMA_Abort_IT+0x18e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e178      	b.n	80034a8 <HAL_DMA_Abort_IT+0x480>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e16f      	b.n	80034a8 <HAL_DMA_Abort_IT+0x480>
 80031c8:	40020010 	.word	0x40020010
 80031cc:	40020028 	.word	0x40020028
 80031d0:	40020040 	.word	0x40020040
 80031d4:	40020058 	.word	0x40020058
 80031d8:	40020070 	.word	0x40020070
 80031dc:	40020088 	.word	0x40020088
 80031e0:	400200a0 	.word	0x400200a0
 80031e4:	400200b8 	.word	0x400200b8
 80031e8:	40020410 	.word	0x40020410
 80031ec:	40020428 	.word	0x40020428
 80031f0:	40020440 	.word	0x40020440
 80031f4:	40020458 	.word	0x40020458
 80031f8:	40020470 	.word	0x40020470
 80031fc:	40020488 	.word	0x40020488
 8003200:	400204a0 	.word	0x400204a0
 8003204:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 020e 	bic.w	r2, r2, #14
 8003216:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a6c      	ldr	r2, [pc, #432]	@ (80033d0 <HAL_DMA_Abort_IT+0x3a8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d04a      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a6b      	ldr	r2, [pc, #428]	@ (80033d4 <HAL_DMA_Abort_IT+0x3ac>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d045      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a69      	ldr	r2, [pc, #420]	@ (80033d8 <HAL_DMA_Abort_IT+0x3b0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d040      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a68      	ldr	r2, [pc, #416]	@ (80033dc <HAL_DMA_Abort_IT+0x3b4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d03b      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a66      	ldr	r2, [pc, #408]	@ (80033e0 <HAL_DMA_Abort_IT+0x3b8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d036      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a65      	ldr	r2, [pc, #404]	@ (80033e4 <HAL_DMA_Abort_IT+0x3bc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d031      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a63      	ldr	r2, [pc, #396]	@ (80033e8 <HAL_DMA_Abort_IT+0x3c0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d02c      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a62      	ldr	r2, [pc, #392]	@ (80033ec <HAL_DMA_Abort_IT+0x3c4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d027      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a60      	ldr	r2, [pc, #384]	@ (80033f0 <HAL_DMA_Abort_IT+0x3c8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d022      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5f      	ldr	r2, [pc, #380]	@ (80033f4 <HAL_DMA_Abort_IT+0x3cc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d01d      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a5d      	ldr	r2, [pc, #372]	@ (80033f8 <HAL_DMA_Abort_IT+0x3d0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d018      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a5c      	ldr	r2, [pc, #368]	@ (80033fc <HAL_DMA_Abort_IT+0x3d4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a5a      	ldr	r2, [pc, #360]	@ (8003400 <HAL_DMA_Abort_IT+0x3d8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a59      	ldr	r2, [pc, #356]	@ (8003404 <HAL_DMA_Abort_IT+0x3dc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d009      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a57      	ldr	r2, [pc, #348]	@ (8003408 <HAL_DMA_Abort_IT+0x3e0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x290>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a56      	ldr	r2, [pc, #344]	@ (800340c <HAL_DMA_Abort_IT+0x3e4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d108      	bne.n	80032ca <HAL_DMA_Abort_IT+0x2a2>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e007      	b.n	80032da <HAL_DMA_Abort_IT+0x2b2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0201 	bic.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3c      	ldr	r2, [pc, #240]	@ (80033d0 <HAL_DMA_Abort_IT+0x3a8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d072      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3a      	ldr	r2, [pc, #232]	@ (80033d4 <HAL_DMA_Abort_IT+0x3ac>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d06d      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a39      	ldr	r2, [pc, #228]	@ (80033d8 <HAL_DMA_Abort_IT+0x3b0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d068      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a37      	ldr	r2, [pc, #220]	@ (80033dc <HAL_DMA_Abort_IT+0x3b4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d063      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a36      	ldr	r2, [pc, #216]	@ (80033e0 <HAL_DMA_Abort_IT+0x3b8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d05e      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a34      	ldr	r2, [pc, #208]	@ (80033e4 <HAL_DMA_Abort_IT+0x3bc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d059      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a33      	ldr	r2, [pc, #204]	@ (80033e8 <HAL_DMA_Abort_IT+0x3c0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d054      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a31      	ldr	r2, [pc, #196]	@ (80033ec <HAL_DMA_Abort_IT+0x3c4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d04f      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a30      	ldr	r2, [pc, #192]	@ (80033f0 <HAL_DMA_Abort_IT+0x3c8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d04a      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2e      	ldr	r2, [pc, #184]	@ (80033f4 <HAL_DMA_Abort_IT+0x3cc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d045      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2d      	ldr	r2, [pc, #180]	@ (80033f8 <HAL_DMA_Abort_IT+0x3d0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d040      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2b      	ldr	r2, [pc, #172]	@ (80033fc <HAL_DMA_Abort_IT+0x3d4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d03b      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a2a      	ldr	r2, [pc, #168]	@ (8003400 <HAL_DMA_Abort_IT+0x3d8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d036      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a28      	ldr	r2, [pc, #160]	@ (8003404 <HAL_DMA_Abort_IT+0x3dc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d031      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a27      	ldr	r2, [pc, #156]	@ (8003408 <HAL_DMA_Abort_IT+0x3e0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d02c      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a25      	ldr	r2, [pc, #148]	@ (800340c <HAL_DMA_Abort_IT+0x3e4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d027      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a24      	ldr	r2, [pc, #144]	@ (8003410 <HAL_DMA_Abort_IT+0x3e8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d022      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a22      	ldr	r2, [pc, #136]	@ (8003414 <HAL_DMA_Abort_IT+0x3ec>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01d      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a21      	ldr	r2, [pc, #132]	@ (8003418 <HAL_DMA_Abort_IT+0x3f0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d018      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1f      	ldr	r2, [pc, #124]	@ (800341c <HAL_DMA_Abort_IT+0x3f4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003420 <HAL_DMA_Abort_IT+0x3f8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00e      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003424 <HAL_DMA_Abort_IT+0x3fc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d009      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003428 <HAL_DMA_Abort_IT+0x400>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d004      	beq.n	80033ca <HAL_DMA_Abort_IT+0x3a2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a19      	ldr	r2, [pc, #100]	@ (800342c <HAL_DMA_Abort_IT+0x404>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d132      	bne.n	8003430 <HAL_DMA_Abort_IT+0x408>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e031      	b.n	8003432 <HAL_DMA_Abort_IT+0x40a>
 80033ce:	bf00      	nop
 80033d0:	40020010 	.word	0x40020010
 80033d4:	40020028 	.word	0x40020028
 80033d8:	40020040 	.word	0x40020040
 80033dc:	40020058 	.word	0x40020058
 80033e0:	40020070 	.word	0x40020070
 80033e4:	40020088 	.word	0x40020088
 80033e8:	400200a0 	.word	0x400200a0
 80033ec:	400200b8 	.word	0x400200b8
 80033f0:	40020410 	.word	0x40020410
 80033f4:	40020428 	.word	0x40020428
 80033f8:	40020440 	.word	0x40020440
 80033fc:	40020458 	.word	0x40020458
 8003400:	40020470 	.word	0x40020470
 8003404:	40020488 	.word	0x40020488
 8003408:	400204a0 	.word	0x400204a0
 800340c:	400204b8 	.word	0x400204b8
 8003410:	58025408 	.word	0x58025408
 8003414:	5802541c 	.word	0x5802541c
 8003418:	58025430 	.word	0x58025430
 800341c:	58025444 	.word	0x58025444
 8003420:	58025458 	.word	0x58025458
 8003424:	5802546c 	.word	0x5802546c
 8003428:	58025480 	.word	0x58025480
 800342c:	58025494 	.word	0x58025494
 8003430:	2300      	movs	r3, #0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d028      	beq.n	8003488 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003444:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2201      	movs	r2, #1
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003464:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800347c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003486:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop

080034b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	@ 0x28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034c0:	4b67      	ldr	r3, [pc, #412]	@ (8003660 <HAL_DMA_IRQHandler+0x1ac>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a67      	ldr	r2, [pc, #412]	@ (8003664 <HAL_DMA_IRQHandler+0x1b0>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0a9b      	lsrs	r3, r3, #10
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003668 <HAL_DMA_IRQHandler+0x1b4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d04a      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a5d      	ldr	r2, [pc, #372]	@ (800366c <HAL_DMA_IRQHandler+0x1b8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d045      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003670 <HAL_DMA_IRQHandler+0x1bc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d040      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a5a      	ldr	r2, [pc, #360]	@ (8003674 <HAL_DMA_IRQHandler+0x1c0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d03b      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a59      	ldr	r2, [pc, #356]	@ (8003678 <HAL_DMA_IRQHandler+0x1c4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d036      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a57      	ldr	r2, [pc, #348]	@ (800367c <HAL_DMA_IRQHandler+0x1c8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d031      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a56      	ldr	r2, [pc, #344]	@ (8003680 <HAL_DMA_IRQHandler+0x1cc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d02c      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a54      	ldr	r2, [pc, #336]	@ (8003684 <HAL_DMA_IRQHandler+0x1d0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d027      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a53      	ldr	r2, [pc, #332]	@ (8003688 <HAL_DMA_IRQHandler+0x1d4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a51      	ldr	r2, [pc, #324]	@ (800368c <HAL_DMA_IRQHandler+0x1d8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01d      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a50      	ldr	r2, [pc, #320]	@ (8003690 <HAL_DMA_IRQHandler+0x1dc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a4e      	ldr	r2, [pc, #312]	@ (8003694 <HAL_DMA_IRQHandler+0x1e0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a4d      	ldr	r2, [pc, #308]	@ (8003698 <HAL_DMA_IRQHandler+0x1e4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a4b      	ldr	r2, [pc, #300]	@ (800369c <HAL_DMA_IRQHandler+0x1e8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a4a      	ldr	r2, [pc, #296]	@ (80036a0 <HAL_DMA_IRQHandler+0x1ec>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_DMA_IRQHandler+0xd2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a48      	ldr	r2, [pc, #288]	@ (80036a4 <HAL_DMA_IRQHandler+0x1f0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_DMA_IRQHandler+0xd6>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_DMA_IRQHandler+0xd8>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 842b 	beq.w	8003de8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	2208      	movs	r2, #8
 800359c:	409a      	lsls	r2, r3
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80a2 	beq.w	80036ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003668 <HAL_DMA_IRQHandler+0x1b4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d04a      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a2d      	ldr	r2, [pc, #180]	@ (800366c <HAL_DMA_IRQHandler+0x1b8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d045      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003670 <HAL_DMA_IRQHandler+0x1bc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d040      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003674 <HAL_DMA_IRQHandler+0x1c0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d03b      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a28      	ldr	r2, [pc, #160]	@ (8003678 <HAL_DMA_IRQHandler+0x1c4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d036      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a27      	ldr	r2, [pc, #156]	@ (800367c <HAL_DMA_IRQHandler+0x1c8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d031      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a25      	ldr	r2, [pc, #148]	@ (8003680 <HAL_DMA_IRQHandler+0x1cc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d02c      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a24      	ldr	r2, [pc, #144]	@ (8003684 <HAL_DMA_IRQHandler+0x1d0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d027      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a22      	ldr	r2, [pc, #136]	@ (8003688 <HAL_DMA_IRQHandler+0x1d4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d022      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a21      	ldr	r2, [pc, #132]	@ (800368c <HAL_DMA_IRQHandler+0x1d8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d01d      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1f      	ldr	r2, [pc, #124]	@ (8003690 <HAL_DMA_IRQHandler+0x1dc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d018      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1e      	ldr	r2, [pc, #120]	@ (8003694 <HAL_DMA_IRQHandler+0x1e0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d013      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1c      	ldr	r2, [pc, #112]	@ (8003698 <HAL_DMA_IRQHandler+0x1e4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00e      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1b      	ldr	r2, [pc, #108]	@ (800369c <HAL_DMA_IRQHandler+0x1e8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a19      	ldr	r2, [pc, #100]	@ (80036a0 <HAL_DMA_IRQHandler+0x1ec>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_DMA_IRQHandler+0x194>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <HAL_DMA_IRQHandler+0x1f0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d12f      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x1f4>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e02e      	b.n	80036bc <HAL_DMA_IRQHandler+0x208>
 800365e:	bf00      	nop
 8003660:	24000000 	.word	0x24000000
 8003664:	1b4e81b5 	.word	0x1b4e81b5
 8003668:	40020010 	.word	0x40020010
 800366c:	40020028 	.word	0x40020028
 8003670:	40020040 	.word	0x40020040
 8003674:	40020058 	.word	0x40020058
 8003678:	40020070 	.word	0x40020070
 800367c:	40020088 	.word	0x40020088
 8003680:	400200a0 	.word	0x400200a0
 8003684:	400200b8 	.word	0x400200b8
 8003688:	40020410 	.word	0x40020410
 800368c:	40020428 	.word	0x40020428
 8003690:	40020440 	.word	0x40020440
 8003694:	40020458 	.word	0x40020458
 8003698:	40020470 	.word	0x40020470
 800369c:	40020488 	.word	0x40020488
 80036a0:	400204a0 	.word	0x400204a0
 80036a4:	400204b8 	.word	0x400204b8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf14      	ite	ne
 80036b6:	2301      	movne	r3, #1
 80036b8:	2300      	moveq	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d015      	beq.n	80036ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0204 	bic.w	r2, r2, #4
 80036ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2208      	movs	r2, #8
 80036da:	409a      	lsls	r2, r3
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	fa22 f303 	lsr.w	r3, r2, r3
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d06e      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a69      	ldr	r2, [pc, #420]	@ (80038ac <HAL_DMA_IRQHandler+0x3f8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d04a      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a67      	ldr	r2, [pc, #412]	@ (80038b0 <HAL_DMA_IRQHandler+0x3fc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d045      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a66      	ldr	r2, [pc, #408]	@ (80038b4 <HAL_DMA_IRQHandler+0x400>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d040      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a64      	ldr	r2, [pc, #400]	@ (80038b8 <HAL_DMA_IRQHandler+0x404>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d03b      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a63      	ldr	r2, [pc, #396]	@ (80038bc <HAL_DMA_IRQHandler+0x408>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d036      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a61      	ldr	r2, [pc, #388]	@ (80038c0 <HAL_DMA_IRQHandler+0x40c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d031      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a60      	ldr	r2, [pc, #384]	@ (80038c4 <HAL_DMA_IRQHandler+0x410>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d02c      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a5e      	ldr	r2, [pc, #376]	@ (80038c8 <HAL_DMA_IRQHandler+0x414>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d027      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a5d      	ldr	r2, [pc, #372]	@ (80038cc <HAL_DMA_IRQHandler+0x418>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d022      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a5b      	ldr	r2, [pc, #364]	@ (80038d0 <HAL_DMA_IRQHandler+0x41c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01d      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a5a      	ldr	r2, [pc, #360]	@ (80038d4 <HAL_DMA_IRQHandler+0x420>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d018      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a58      	ldr	r2, [pc, #352]	@ (80038d8 <HAL_DMA_IRQHandler+0x424>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a57      	ldr	r2, [pc, #348]	@ (80038dc <HAL_DMA_IRQHandler+0x428>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a55      	ldr	r2, [pc, #340]	@ (80038e0 <HAL_DMA_IRQHandler+0x42c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a54      	ldr	r2, [pc, #336]	@ (80038e4 <HAL_DMA_IRQHandler+0x430>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x2ee>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a52      	ldr	r2, [pc, #328]	@ (80038e8 <HAL_DMA_IRQHandler+0x434>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10a      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x304>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e003      	b.n	80037c0 <HAL_DMA_IRQHandler+0x30c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2300      	movs	r3, #0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2201      	movs	r2, #1
 80037ce:	409a      	lsls	r2, r3
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	f043 0202 	orr.w	r2, r3, #2
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2204      	movs	r2, #4
 80037ea:	409a      	lsls	r2, r3
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 808f 	beq.w	8003914 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a2c      	ldr	r2, [pc, #176]	@ (80038ac <HAL_DMA_IRQHandler+0x3f8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d04a      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a2a      	ldr	r2, [pc, #168]	@ (80038b0 <HAL_DMA_IRQHandler+0x3fc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d045      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a29      	ldr	r2, [pc, #164]	@ (80038b4 <HAL_DMA_IRQHandler+0x400>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d040      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a27      	ldr	r2, [pc, #156]	@ (80038b8 <HAL_DMA_IRQHandler+0x404>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d03b      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a26      	ldr	r2, [pc, #152]	@ (80038bc <HAL_DMA_IRQHandler+0x408>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d036      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a24      	ldr	r2, [pc, #144]	@ (80038c0 <HAL_DMA_IRQHandler+0x40c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d031      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a23      	ldr	r2, [pc, #140]	@ (80038c4 <HAL_DMA_IRQHandler+0x410>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d02c      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a21      	ldr	r2, [pc, #132]	@ (80038c8 <HAL_DMA_IRQHandler+0x414>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d027      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a20      	ldr	r2, [pc, #128]	@ (80038cc <HAL_DMA_IRQHandler+0x418>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1e      	ldr	r2, [pc, #120]	@ (80038d0 <HAL_DMA_IRQHandler+0x41c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01d      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1d      	ldr	r2, [pc, #116]	@ (80038d4 <HAL_DMA_IRQHandler+0x420>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d018      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1b      	ldr	r2, [pc, #108]	@ (80038d8 <HAL_DMA_IRQHandler+0x424>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1a      	ldr	r2, [pc, #104]	@ (80038dc <HAL_DMA_IRQHandler+0x428>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a18      	ldr	r2, [pc, #96]	@ (80038e0 <HAL_DMA_IRQHandler+0x42c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a17      	ldr	r2, [pc, #92]	@ (80038e4 <HAL_DMA_IRQHandler+0x430>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_DMA_IRQHandler+0x3e2>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a15      	ldr	r2, [pc, #84]	@ (80038e8 <HAL_DMA_IRQHandler+0x434>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d12a      	bne.n	80038ec <HAL_DMA_IRQHandler+0x438>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e023      	b.n	80038f4 <HAL_DMA_IRQHandler+0x440>
 80038ac:	40020010 	.word	0x40020010
 80038b0:	40020028 	.word	0x40020028
 80038b4:	40020040 	.word	0x40020040
 80038b8:	40020058 	.word	0x40020058
 80038bc:	40020070 	.word	0x40020070
 80038c0:	40020088 	.word	0x40020088
 80038c4:	400200a0 	.word	0x400200a0
 80038c8:	400200b8 	.word	0x400200b8
 80038cc:	40020410 	.word	0x40020410
 80038d0:	40020428 	.word	0x40020428
 80038d4:	40020440 	.word	0x40020440
 80038d8:	40020458 	.word	0x40020458
 80038dc:	40020470 	.word	0x40020470
 80038e0:	40020488 	.word	0x40020488
 80038e4:	400204a0 	.word	0x400204a0
 80038e8:	400204b8 	.word	0x400204b8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00d      	beq.n	8003914 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	2204      	movs	r2, #4
 8003902:	409a      	lsls	r2, r3
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390c:	f043 0204 	orr.w	r2, r3, #4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	2210      	movs	r2, #16
 800391e:	409a      	lsls	r2, r3
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a6 	beq.w	8003a76 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a85      	ldr	r2, [pc, #532]	@ (8003b44 <HAL_DMA_IRQHandler+0x690>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d04a      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a83      	ldr	r2, [pc, #524]	@ (8003b48 <HAL_DMA_IRQHandler+0x694>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d045      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a82      	ldr	r2, [pc, #520]	@ (8003b4c <HAL_DMA_IRQHandler+0x698>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d040      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a80      	ldr	r2, [pc, #512]	@ (8003b50 <HAL_DMA_IRQHandler+0x69c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d03b      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a7f      	ldr	r2, [pc, #508]	@ (8003b54 <HAL_DMA_IRQHandler+0x6a0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d036      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a7d      	ldr	r2, [pc, #500]	@ (8003b58 <HAL_DMA_IRQHandler+0x6a4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d031      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b5c <HAL_DMA_IRQHandler+0x6a8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d02c      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a7a      	ldr	r2, [pc, #488]	@ (8003b60 <HAL_DMA_IRQHandler+0x6ac>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d027      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a79      	ldr	r2, [pc, #484]	@ (8003b64 <HAL_DMA_IRQHandler+0x6b0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d022      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a77      	ldr	r2, [pc, #476]	@ (8003b68 <HAL_DMA_IRQHandler+0x6b4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01d      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a76      	ldr	r2, [pc, #472]	@ (8003b6c <HAL_DMA_IRQHandler+0x6b8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d018      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a74      	ldr	r2, [pc, #464]	@ (8003b70 <HAL_DMA_IRQHandler+0x6bc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a73      	ldr	r2, [pc, #460]	@ (8003b74 <HAL_DMA_IRQHandler+0x6c0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00e      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a71      	ldr	r2, [pc, #452]	@ (8003b78 <HAL_DMA_IRQHandler+0x6c4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d009      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a70      	ldr	r2, [pc, #448]	@ (8003b7c <HAL_DMA_IRQHandler+0x6c8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d004      	beq.n	80039ca <HAL_DMA_IRQHandler+0x516>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b80 <HAL_DMA_IRQHandler+0x6cc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10a      	bne.n	80039e0 <HAL_DMA_IRQHandler+0x52c>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e009      	b.n	80039f4 <HAL_DMA_IRQHandler+0x540>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d03e      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	2210      	movs	r2, #16
 8003a02:	409a      	lsls	r2, r3
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d108      	bne.n	8003a36 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d024      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
 8003a34:	e01f      	b.n	8003a76 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01b      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
 8003a46:	e016      	b.n	8003a76 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0208 	bic.w	r2, r2, #8
 8003a64:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2220      	movs	r2, #32
 8003a80:	409a      	lsls	r2, r3
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8110 	beq.w	8003cac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a2c      	ldr	r2, [pc, #176]	@ (8003b44 <HAL_DMA_IRQHandler+0x690>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d04a      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b48 <HAL_DMA_IRQHandler+0x694>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d045      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a29      	ldr	r2, [pc, #164]	@ (8003b4c <HAL_DMA_IRQHandler+0x698>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d040      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a28      	ldr	r2, [pc, #160]	@ (8003b50 <HAL_DMA_IRQHandler+0x69c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d03b      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a26      	ldr	r2, [pc, #152]	@ (8003b54 <HAL_DMA_IRQHandler+0x6a0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d036      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a25      	ldr	r2, [pc, #148]	@ (8003b58 <HAL_DMA_IRQHandler+0x6a4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d031      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a23      	ldr	r2, [pc, #140]	@ (8003b5c <HAL_DMA_IRQHandler+0x6a8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02c      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a22      	ldr	r2, [pc, #136]	@ (8003b60 <HAL_DMA_IRQHandler+0x6ac>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d027      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a20      	ldr	r2, [pc, #128]	@ (8003b64 <HAL_DMA_IRQHandler+0x6b0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d022      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1f      	ldr	r2, [pc, #124]	@ (8003b68 <HAL_DMA_IRQHandler+0x6b4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d01d      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b6c <HAL_DMA_IRQHandler+0x6b8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d018      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	@ (8003b70 <HAL_DMA_IRQHandler+0x6bc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1a      	ldr	r2, [pc, #104]	@ (8003b74 <HAL_DMA_IRQHandler+0x6c0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a19      	ldr	r2, [pc, #100]	@ (8003b78 <HAL_DMA_IRQHandler+0x6c4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <HAL_DMA_IRQHandler+0x6c8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x678>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <HAL_DMA_IRQHandler+0x6cc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d12b      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x6d0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf14      	ite	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	2300      	moveq	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	e02a      	b.n	8003b98 <HAL_DMA_IRQHandler+0x6e4>
 8003b42:	bf00      	nop
 8003b44:	40020010 	.word	0x40020010
 8003b48:	40020028 	.word	0x40020028
 8003b4c:	40020040 	.word	0x40020040
 8003b50:	40020058 	.word	0x40020058
 8003b54:	40020070 	.word	0x40020070
 8003b58:	40020088 	.word	0x40020088
 8003b5c:	400200a0 	.word	0x400200a0
 8003b60:	400200b8 	.word	0x400200b8
 8003b64:	40020410 	.word	0x40020410
 8003b68:	40020428 	.word	0x40020428
 8003b6c:	40020440 	.word	0x40020440
 8003b70:	40020458 	.word	0x40020458
 8003b74:	40020470 	.word	0x40020470
 8003b78:	40020488 	.word	0x40020488
 8003b7c:	400204a0 	.word	0x400204a0
 8003b80:	400204b8 	.word	0x400204b8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf14      	ite	ne
 8003b92:	2301      	movne	r3, #1
 8003b94:	2300      	moveq	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8087 	beq.w	8003cac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d139      	bne.n	8003c2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0216 	bic.w	r2, r2, #22
 8003bc8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bd8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <HAL_DMA_IRQHandler+0x736>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0208 	bic.w	r2, r2, #8
 8003bf8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	223f      	movs	r2, #63	@ 0x3f
 8003c04:	409a      	lsls	r2, r3
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8382 	beq.w	8004328 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
          }
          return;
 8003c2c:	e37c      	b.n	8004328 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d018      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d108      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d02c      	beq.n	8003cac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
 8003c5a:	e027      	b.n	8003cac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d023      	beq.n	8003cac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
 8003c6c:	e01e      	b.n	8003cac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0210 	bic.w	r2, r2, #16
 8003c8a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 833e 	beq.w	8004332 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8088 	beq.w	8003dd4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a89      	ldr	r2, [pc, #548]	@ (8003ef8 <HAL_DMA_IRQHandler+0xa44>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d04a      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a88      	ldr	r2, [pc, #544]	@ (8003efc <HAL_DMA_IRQHandler+0xa48>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d045      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a86      	ldr	r2, [pc, #536]	@ (8003f00 <HAL_DMA_IRQHandler+0xa4c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d040      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a85      	ldr	r2, [pc, #532]	@ (8003f04 <HAL_DMA_IRQHandler+0xa50>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d03b      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a83      	ldr	r2, [pc, #524]	@ (8003f08 <HAL_DMA_IRQHandler+0xa54>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d036      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a82      	ldr	r2, [pc, #520]	@ (8003f0c <HAL_DMA_IRQHandler+0xa58>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d031      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a80      	ldr	r2, [pc, #512]	@ (8003f10 <HAL_DMA_IRQHandler+0xa5c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d02c      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a7f      	ldr	r2, [pc, #508]	@ (8003f14 <HAL_DMA_IRQHandler+0xa60>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d027      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a7d      	ldr	r2, [pc, #500]	@ (8003f18 <HAL_DMA_IRQHandler+0xa64>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d022      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f1c <HAL_DMA_IRQHandler+0xa68>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d01d      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7a      	ldr	r2, [pc, #488]	@ (8003f20 <HAL_DMA_IRQHandler+0xa6c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d018      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a79      	ldr	r2, [pc, #484]	@ (8003f24 <HAL_DMA_IRQHandler+0xa70>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a77      	ldr	r2, [pc, #476]	@ (8003f28 <HAL_DMA_IRQHandler+0xa74>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00e      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a76      	ldr	r2, [pc, #472]	@ (8003f2c <HAL_DMA_IRQHandler+0xa78>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d009      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a74      	ldr	r2, [pc, #464]	@ (8003f30 <HAL_DMA_IRQHandler+0xa7c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x8b8>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a73      	ldr	r2, [pc, #460]	@ (8003f34 <HAL_DMA_IRQHandler+0xa80>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d108      	bne.n	8003d7e <HAL_DMA_IRQHandler+0x8ca>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e007      	b.n	8003d8e <HAL_DMA_IRQHandler+0x8da>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3301      	adds	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d307      	bcc.n	8003daa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f2      	bne.n	8003d8e <HAL_DMA_IRQHandler+0x8da>
 8003da8:	e000      	b.n	8003dac <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003daa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003dc2:	e003      	b.n	8003dcc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 82aa 	beq.w	8004332 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
 8003de6:	e2a4      	b.n	8004332 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a52      	ldr	r2, [pc, #328]	@ (8003f38 <HAL_DMA_IRQHandler+0xa84>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d04a      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a51      	ldr	r2, [pc, #324]	@ (8003f3c <HAL_DMA_IRQHandler+0xa88>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d045      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a4f      	ldr	r2, [pc, #316]	@ (8003f40 <HAL_DMA_IRQHandler+0xa8c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d040      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a4e      	ldr	r2, [pc, #312]	@ (8003f44 <HAL_DMA_IRQHandler+0xa90>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d03b      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a4c      	ldr	r2, [pc, #304]	@ (8003f48 <HAL_DMA_IRQHandler+0xa94>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d036      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a4b      	ldr	r2, [pc, #300]	@ (8003f4c <HAL_DMA_IRQHandler+0xa98>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d031      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a49      	ldr	r2, [pc, #292]	@ (8003f50 <HAL_DMA_IRQHandler+0xa9c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02c      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a48      	ldr	r2, [pc, #288]	@ (8003f54 <HAL_DMA_IRQHandler+0xaa0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d027      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a46      	ldr	r2, [pc, #280]	@ (8003f58 <HAL_DMA_IRQHandler+0xaa4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d022      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a45      	ldr	r2, [pc, #276]	@ (8003f5c <HAL_DMA_IRQHandler+0xaa8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d01d      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a43      	ldr	r2, [pc, #268]	@ (8003f60 <HAL_DMA_IRQHandler+0xaac>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a42      	ldr	r2, [pc, #264]	@ (8003f64 <HAL_DMA_IRQHandler+0xab0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a40      	ldr	r2, [pc, #256]	@ (8003f68 <HAL_DMA_IRQHandler+0xab4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f6c <HAL_DMA_IRQHandler+0xab8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a3d      	ldr	r2, [pc, #244]	@ (8003f70 <HAL_DMA_IRQHandler+0xabc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x9d4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3c      	ldr	r2, [pc, #240]	@ (8003f74 <HAL_DMA_IRQHandler+0xac0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_DMA_IRQHandler+0x9d8>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_DMA_IRQHandler+0x9da>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 824f 	beq.w	8004332 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80dd 	beq.w	800406c <HAL_DMA_IRQHandler+0xbb8>
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80d7 	beq.w	800406c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d059      	beq.n	8003f8c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d14a      	bne.n	8003f78 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8220 	beq.w	800432c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ef4:	e21a      	b.n	800432c <HAL_DMA_IRQHandler+0xe78>
 8003ef6:	bf00      	nop
 8003ef8:	40020010 	.word	0x40020010
 8003efc:	40020028 	.word	0x40020028
 8003f00:	40020040 	.word	0x40020040
 8003f04:	40020058 	.word	0x40020058
 8003f08:	40020070 	.word	0x40020070
 8003f0c:	40020088 	.word	0x40020088
 8003f10:	400200a0 	.word	0x400200a0
 8003f14:	400200b8 	.word	0x400200b8
 8003f18:	40020410 	.word	0x40020410
 8003f1c:	40020428 	.word	0x40020428
 8003f20:	40020440 	.word	0x40020440
 8003f24:	40020458 	.word	0x40020458
 8003f28:	40020470 	.word	0x40020470
 8003f2c:	40020488 	.word	0x40020488
 8003f30:	400204a0 	.word	0x400204a0
 8003f34:	400204b8 	.word	0x400204b8
 8003f38:	48022c08 	.word	0x48022c08
 8003f3c:	48022c1c 	.word	0x48022c1c
 8003f40:	48022c30 	.word	0x48022c30
 8003f44:	48022c44 	.word	0x48022c44
 8003f48:	48022c58 	.word	0x48022c58
 8003f4c:	48022c6c 	.word	0x48022c6c
 8003f50:	48022c80 	.word	0x48022c80
 8003f54:	48022c94 	.word	0x48022c94
 8003f58:	58025408 	.word	0x58025408
 8003f5c:	5802541c 	.word	0x5802541c
 8003f60:	58025430 	.word	0x58025430
 8003f64:	58025444 	.word	0x58025444
 8003f68:	58025458 	.word	0x58025458
 8003f6c:	5802546c 	.word	0x5802546c
 8003f70:	58025480 	.word	0x58025480
 8003f74:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 81d5 	beq.w	800432c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f8a:	e1cf      	b.n	800432c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d160      	bne.n	8004058 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7f      	ldr	r2, [pc, #508]	@ (8004198 <HAL_DMA_IRQHandler+0xce4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d04a      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7d      	ldr	r2, [pc, #500]	@ (800419c <HAL_DMA_IRQHandler+0xce8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d045      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7c      	ldr	r2, [pc, #496]	@ (80041a0 <HAL_DMA_IRQHandler+0xcec>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d040      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a7a      	ldr	r2, [pc, #488]	@ (80041a4 <HAL_DMA_IRQHandler+0xcf0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d03b      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a79      	ldr	r2, [pc, #484]	@ (80041a8 <HAL_DMA_IRQHandler+0xcf4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d036      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a77      	ldr	r2, [pc, #476]	@ (80041ac <HAL_DMA_IRQHandler+0xcf8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d031      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a76      	ldr	r2, [pc, #472]	@ (80041b0 <HAL_DMA_IRQHandler+0xcfc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d02c      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a74      	ldr	r2, [pc, #464]	@ (80041b4 <HAL_DMA_IRQHandler+0xd00>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d027      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a73      	ldr	r2, [pc, #460]	@ (80041b8 <HAL_DMA_IRQHandler+0xd04>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d022      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a71      	ldr	r2, [pc, #452]	@ (80041bc <HAL_DMA_IRQHandler+0xd08>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01d      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a70      	ldr	r2, [pc, #448]	@ (80041c0 <HAL_DMA_IRQHandler+0xd0c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d018      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6e      	ldr	r2, [pc, #440]	@ (80041c4 <HAL_DMA_IRQHandler+0xd10>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6d      	ldr	r2, [pc, #436]	@ (80041c8 <HAL_DMA_IRQHandler+0xd14>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6b      	ldr	r2, [pc, #428]	@ (80041cc <HAL_DMA_IRQHandler+0xd18>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a6a      	ldr	r2, [pc, #424]	@ (80041d0 <HAL_DMA_IRQHandler+0xd1c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb82>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a68      	ldr	r2, [pc, #416]	@ (80041d4 <HAL_DMA_IRQHandler+0xd20>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d108      	bne.n	8004048 <HAL_DMA_IRQHandler+0xb94>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0208 	bic.w	r2, r2, #8
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e007      	b.n	8004058 <HAL_DMA_IRQHandler+0xba4>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0204 	bic.w	r2, r2, #4
 8004056:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8165 	beq.w	800432c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800406a:	e15f      	b.n	800432c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2202      	movs	r2, #2
 8004076:	409a      	lsls	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80c5 	beq.w	800420c <HAL_DMA_IRQHandler+0xd58>
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80bf 	beq.w	800420c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2202      	movs	r2, #2
 8004098:	409a      	lsls	r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d018      	beq.n	80040da <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 813a 	beq.w	8004330 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040c4:	e134      	b.n	8004330 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8130 	beq.w	8004330 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040d8:	e12a      	b.n	8004330 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 8089 	bne.w	80041f8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004198 <HAL_DMA_IRQHandler+0xce4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d04a      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a29      	ldr	r2, [pc, #164]	@ (800419c <HAL_DMA_IRQHandler+0xce8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d045      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a28      	ldr	r2, [pc, #160]	@ (80041a0 <HAL_DMA_IRQHandler+0xcec>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d040      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a26      	ldr	r2, [pc, #152]	@ (80041a4 <HAL_DMA_IRQHandler+0xcf0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d03b      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a25      	ldr	r2, [pc, #148]	@ (80041a8 <HAL_DMA_IRQHandler+0xcf4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d036      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a23      	ldr	r2, [pc, #140]	@ (80041ac <HAL_DMA_IRQHandler+0xcf8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d031      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a22      	ldr	r2, [pc, #136]	@ (80041b0 <HAL_DMA_IRQHandler+0xcfc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d02c      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a20      	ldr	r2, [pc, #128]	@ (80041b4 <HAL_DMA_IRQHandler+0xd00>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d027      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1f      	ldr	r2, [pc, #124]	@ (80041b8 <HAL_DMA_IRQHandler+0xd04>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d022      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1d      	ldr	r2, [pc, #116]	@ (80041bc <HAL_DMA_IRQHandler+0xd08>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d01d      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1c      	ldr	r2, [pc, #112]	@ (80041c0 <HAL_DMA_IRQHandler+0xd0c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d018      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1a      	ldr	r2, [pc, #104]	@ (80041c4 <HAL_DMA_IRQHandler+0xd10>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a19      	ldr	r2, [pc, #100]	@ (80041c8 <HAL_DMA_IRQHandler+0xd14>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00e      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a17      	ldr	r2, [pc, #92]	@ (80041cc <HAL_DMA_IRQHandler+0xd18>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d009      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a16      	ldr	r2, [pc, #88]	@ (80041d0 <HAL_DMA_IRQHandler+0xd1c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_DMA_IRQHandler+0xcd2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a14      	ldr	r2, [pc, #80]	@ (80041d4 <HAL_DMA_IRQHandler+0xd20>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d128      	bne.n	80041d8 <HAL_DMA_IRQHandler+0xd24>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0214 	bic.w	r2, r2, #20
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e027      	b.n	80041e8 <HAL_DMA_IRQHandler+0xd34>
 8004198:	40020010 	.word	0x40020010
 800419c:	40020028 	.word	0x40020028
 80041a0:	40020040 	.word	0x40020040
 80041a4:	40020058 	.word	0x40020058
 80041a8:	40020070 	.word	0x40020070
 80041ac:	40020088 	.word	0x40020088
 80041b0:	400200a0 	.word	0x400200a0
 80041b4:	400200b8 	.word	0x400200b8
 80041b8:	40020410 	.word	0x40020410
 80041bc:	40020428 	.word	0x40020428
 80041c0:	40020440 	.word	0x40020440
 80041c4:	40020458 	.word	0x40020458
 80041c8:	40020470 	.word	0x40020470
 80041cc:	40020488 	.word	0x40020488
 80041d0:	400204a0 	.word	0x400204a0
 80041d4:	400204b8 	.word	0x400204b8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 020a 	bic.w	r2, r2, #10
 80041e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8097 	beq.w	8004330 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800420a:	e091      	b.n	8004330 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2208      	movs	r2, #8
 8004216:	409a      	lsls	r2, r3
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8088 	beq.w	8004332 <HAL_DMA_IRQHandler+0xe7e>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8082 	beq.w	8004332 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a41      	ldr	r2, [pc, #260]	@ (8004338 <HAL_DMA_IRQHandler+0xe84>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d04a      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3f      	ldr	r2, [pc, #252]	@ (800433c <HAL_DMA_IRQHandler+0xe88>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d045      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a3e      	ldr	r2, [pc, #248]	@ (8004340 <HAL_DMA_IRQHandler+0xe8c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d040      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3c      	ldr	r2, [pc, #240]	@ (8004344 <HAL_DMA_IRQHandler+0xe90>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d03b      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3b      	ldr	r2, [pc, #236]	@ (8004348 <HAL_DMA_IRQHandler+0xe94>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d036      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a39      	ldr	r2, [pc, #228]	@ (800434c <HAL_DMA_IRQHandler+0xe98>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d031      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a38      	ldr	r2, [pc, #224]	@ (8004350 <HAL_DMA_IRQHandler+0xe9c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d02c      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a36      	ldr	r2, [pc, #216]	@ (8004354 <HAL_DMA_IRQHandler+0xea0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d027      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a35      	ldr	r2, [pc, #212]	@ (8004358 <HAL_DMA_IRQHandler+0xea4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d022      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a33      	ldr	r2, [pc, #204]	@ (800435c <HAL_DMA_IRQHandler+0xea8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01d      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a32      	ldr	r2, [pc, #200]	@ (8004360 <HAL_DMA_IRQHandler+0xeac>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d018      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a30      	ldr	r2, [pc, #192]	@ (8004364 <HAL_DMA_IRQHandler+0xeb0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004368 <HAL_DMA_IRQHandler+0xeb4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2d      	ldr	r2, [pc, #180]	@ (800436c <HAL_DMA_IRQHandler+0xeb8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2c      	ldr	r2, [pc, #176]	@ (8004370 <HAL_DMA_IRQHandler+0xebc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_DMA_IRQHandler+0xe1a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004374 <HAL_DMA_IRQHandler+0xec0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <HAL_DMA_IRQHandler+0xe2c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 021c 	bic.w	r2, r2, #28
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e007      	b.n	80042f0 <HAL_DMA_IRQHandler+0xe3c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 020e 	bic.w	r2, r2, #14
 80042ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
 8004326:	e004      	b.n	8004332 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004328:	bf00      	nop
 800432a:	e002      	b.n	8004332 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800432c:	bf00      	nop
 800432e:	e000      	b.n	8004332 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004330:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004332:	3728      	adds	r7, #40	@ 0x28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40020010 	.word	0x40020010
 800433c:	40020028 	.word	0x40020028
 8004340:	40020040 	.word	0x40020040
 8004344:	40020058 	.word	0x40020058
 8004348:	40020070 	.word	0x40020070
 800434c:	40020088 	.word	0x40020088
 8004350:	400200a0 	.word	0x400200a0
 8004354:	400200b8 	.word	0x400200b8
 8004358:	40020410 	.word	0x40020410
 800435c:	40020428 	.word	0x40020428
 8004360:	40020440 	.word	0x40020440
 8004364:	40020458 	.word	0x40020458
 8004368:	40020470 	.word	0x40020470
 800436c:	40020488 	.word	0x40020488
 8004370:	400204a0 	.word	0x400204a0
 8004374:	400204b8 	.word	0x400204b8

08004378 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a7f      	ldr	r2, [pc, #508]	@ (80045ac <DMA_SetConfig+0x21c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d072      	beq.n	800449a <DMA_SetConfig+0x10a>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a7d      	ldr	r2, [pc, #500]	@ (80045b0 <DMA_SetConfig+0x220>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d06d      	beq.n	800449a <DMA_SetConfig+0x10a>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a7c      	ldr	r2, [pc, #496]	@ (80045b4 <DMA_SetConfig+0x224>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d068      	beq.n	800449a <DMA_SetConfig+0x10a>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a7a      	ldr	r2, [pc, #488]	@ (80045b8 <DMA_SetConfig+0x228>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d063      	beq.n	800449a <DMA_SetConfig+0x10a>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a79      	ldr	r2, [pc, #484]	@ (80045bc <DMA_SetConfig+0x22c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d05e      	beq.n	800449a <DMA_SetConfig+0x10a>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a77      	ldr	r2, [pc, #476]	@ (80045c0 <DMA_SetConfig+0x230>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d059      	beq.n	800449a <DMA_SetConfig+0x10a>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a76      	ldr	r2, [pc, #472]	@ (80045c4 <DMA_SetConfig+0x234>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d054      	beq.n	800449a <DMA_SetConfig+0x10a>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a74      	ldr	r2, [pc, #464]	@ (80045c8 <DMA_SetConfig+0x238>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d04f      	beq.n	800449a <DMA_SetConfig+0x10a>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a73      	ldr	r2, [pc, #460]	@ (80045cc <DMA_SetConfig+0x23c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d04a      	beq.n	800449a <DMA_SetConfig+0x10a>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a71      	ldr	r2, [pc, #452]	@ (80045d0 <DMA_SetConfig+0x240>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d045      	beq.n	800449a <DMA_SetConfig+0x10a>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a70      	ldr	r2, [pc, #448]	@ (80045d4 <DMA_SetConfig+0x244>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d040      	beq.n	800449a <DMA_SetConfig+0x10a>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a6e      	ldr	r2, [pc, #440]	@ (80045d8 <DMA_SetConfig+0x248>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d03b      	beq.n	800449a <DMA_SetConfig+0x10a>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6d      	ldr	r2, [pc, #436]	@ (80045dc <DMA_SetConfig+0x24c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d036      	beq.n	800449a <DMA_SetConfig+0x10a>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a6b      	ldr	r2, [pc, #428]	@ (80045e0 <DMA_SetConfig+0x250>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d031      	beq.n	800449a <DMA_SetConfig+0x10a>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a6a      	ldr	r2, [pc, #424]	@ (80045e4 <DMA_SetConfig+0x254>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d02c      	beq.n	800449a <DMA_SetConfig+0x10a>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a68      	ldr	r2, [pc, #416]	@ (80045e8 <DMA_SetConfig+0x258>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d027      	beq.n	800449a <DMA_SetConfig+0x10a>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a67      	ldr	r2, [pc, #412]	@ (80045ec <DMA_SetConfig+0x25c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <DMA_SetConfig+0x10a>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a65      	ldr	r2, [pc, #404]	@ (80045f0 <DMA_SetConfig+0x260>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <DMA_SetConfig+0x10a>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a64      	ldr	r2, [pc, #400]	@ (80045f4 <DMA_SetConfig+0x264>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <DMA_SetConfig+0x10a>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a62      	ldr	r2, [pc, #392]	@ (80045f8 <DMA_SetConfig+0x268>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <DMA_SetConfig+0x10a>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a61      	ldr	r2, [pc, #388]	@ (80045fc <DMA_SetConfig+0x26c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <DMA_SetConfig+0x10a>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a5f      	ldr	r2, [pc, #380]	@ (8004600 <DMA_SetConfig+0x270>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <DMA_SetConfig+0x10a>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a5e      	ldr	r2, [pc, #376]	@ (8004604 <DMA_SetConfig+0x274>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <DMA_SetConfig+0x10a>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a5c      	ldr	r2, [pc, #368]	@ (8004608 <DMA_SetConfig+0x278>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <DMA_SetConfig+0x10e>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <DMA_SetConfig+0x110>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80044ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d004      	beq.n	80044c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a39      	ldr	r2, [pc, #228]	@ (80045ac <DMA_SetConfig+0x21c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d04a      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a38      	ldr	r2, [pc, #224]	@ (80045b0 <DMA_SetConfig+0x220>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d045      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a36      	ldr	r2, [pc, #216]	@ (80045b4 <DMA_SetConfig+0x224>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d040      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a35      	ldr	r2, [pc, #212]	@ (80045b8 <DMA_SetConfig+0x228>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d03b      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a33      	ldr	r2, [pc, #204]	@ (80045bc <DMA_SetConfig+0x22c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d036      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a32      	ldr	r2, [pc, #200]	@ (80045c0 <DMA_SetConfig+0x230>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d031      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a30      	ldr	r2, [pc, #192]	@ (80045c4 <DMA_SetConfig+0x234>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d02c      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2f      	ldr	r2, [pc, #188]	@ (80045c8 <DMA_SetConfig+0x238>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d027      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2d      	ldr	r2, [pc, #180]	@ (80045cc <DMA_SetConfig+0x23c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d022      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2c      	ldr	r2, [pc, #176]	@ (80045d0 <DMA_SetConfig+0x240>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d01d      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2a      	ldr	r2, [pc, #168]	@ (80045d4 <DMA_SetConfig+0x244>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d018      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a29      	ldr	r2, [pc, #164]	@ (80045d8 <DMA_SetConfig+0x248>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d013      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a27      	ldr	r2, [pc, #156]	@ (80045dc <DMA_SetConfig+0x24c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00e      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a26      	ldr	r2, [pc, #152]	@ (80045e0 <DMA_SetConfig+0x250>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d009      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a24      	ldr	r2, [pc, #144]	@ (80045e4 <DMA_SetConfig+0x254>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <DMA_SetConfig+0x1d0>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a23      	ldr	r2, [pc, #140]	@ (80045e8 <DMA_SetConfig+0x258>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d101      	bne.n	8004564 <DMA_SetConfig+0x1d4>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <DMA_SetConfig+0x1d6>
 8004564:	2300      	movs	r3, #0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d059      	beq.n	800461e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	223f      	movs	r2, #63	@ 0x3f
 8004574:	409a      	lsls	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004588:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b40      	cmp	r3, #64	@ 0x40
 8004598:	d138      	bne.n	800460c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045aa:	e0ae      	b.n	800470a <DMA_SetConfig+0x37a>
 80045ac:	40020010 	.word	0x40020010
 80045b0:	40020028 	.word	0x40020028
 80045b4:	40020040 	.word	0x40020040
 80045b8:	40020058 	.word	0x40020058
 80045bc:	40020070 	.word	0x40020070
 80045c0:	40020088 	.word	0x40020088
 80045c4:	400200a0 	.word	0x400200a0
 80045c8:	400200b8 	.word	0x400200b8
 80045cc:	40020410 	.word	0x40020410
 80045d0:	40020428 	.word	0x40020428
 80045d4:	40020440 	.word	0x40020440
 80045d8:	40020458 	.word	0x40020458
 80045dc:	40020470 	.word	0x40020470
 80045e0:	40020488 	.word	0x40020488
 80045e4:	400204a0 	.word	0x400204a0
 80045e8:	400204b8 	.word	0x400204b8
 80045ec:	58025408 	.word	0x58025408
 80045f0:	5802541c 	.word	0x5802541c
 80045f4:	58025430 	.word	0x58025430
 80045f8:	58025444 	.word	0x58025444
 80045fc:	58025458 	.word	0x58025458
 8004600:	5802546c 	.word	0x5802546c
 8004604:	58025480 	.word	0x58025480
 8004608:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	60da      	str	r2, [r3, #12]
}
 800461c:	e075      	b.n	800470a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a3d      	ldr	r2, [pc, #244]	@ (8004718 <DMA_SetConfig+0x388>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d04a      	beq.n	80046be <DMA_SetConfig+0x32e>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a3b      	ldr	r2, [pc, #236]	@ (800471c <DMA_SetConfig+0x38c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d045      	beq.n	80046be <DMA_SetConfig+0x32e>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3a      	ldr	r2, [pc, #232]	@ (8004720 <DMA_SetConfig+0x390>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d040      	beq.n	80046be <DMA_SetConfig+0x32e>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a38      	ldr	r2, [pc, #224]	@ (8004724 <DMA_SetConfig+0x394>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d03b      	beq.n	80046be <DMA_SetConfig+0x32e>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a37      	ldr	r2, [pc, #220]	@ (8004728 <DMA_SetConfig+0x398>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d036      	beq.n	80046be <DMA_SetConfig+0x32e>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a35      	ldr	r2, [pc, #212]	@ (800472c <DMA_SetConfig+0x39c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d031      	beq.n	80046be <DMA_SetConfig+0x32e>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a34      	ldr	r2, [pc, #208]	@ (8004730 <DMA_SetConfig+0x3a0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d02c      	beq.n	80046be <DMA_SetConfig+0x32e>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a32      	ldr	r2, [pc, #200]	@ (8004734 <DMA_SetConfig+0x3a4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d027      	beq.n	80046be <DMA_SetConfig+0x32e>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a31      	ldr	r2, [pc, #196]	@ (8004738 <DMA_SetConfig+0x3a8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d022      	beq.n	80046be <DMA_SetConfig+0x32e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a2f      	ldr	r2, [pc, #188]	@ (800473c <DMA_SetConfig+0x3ac>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01d      	beq.n	80046be <DMA_SetConfig+0x32e>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2e      	ldr	r2, [pc, #184]	@ (8004740 <DMA_SetConfig+0x3b0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d018      	beq.n	80046be <DMA_SetConfig+0x32e>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2c      	ldr	r2, [pc, #176]	@ (8004744 <DMA_SetConfig+0x3b4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <DMA_SetConfig+0x32e>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2b      	ldr	r2, [pc, #172]	@ (8004748 <DMA_SetConfig+0x3b8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00e      	beq.n	80046be <DMA_SetConfig+0x32e>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a29      	ldr	r2, [pc, #164]	@ (800474c <DMA_SetConfig+0x3bc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d009      	beq.n	80046be <DMA_SetConfig+0x32e>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a28      	ldr	r2, [pc, #160]	@ (8004750 <DMA_SetConfig+0x3c0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <DMA_SetConfig+0x32e>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a26      	ldr	r2, [pc, #152]	@ (8004754 <DMA_SetConfig+0x3c4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <DMA_SetConfig+0x332>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <DMA_SetConfig+0x334>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d020      	beq.n	800470a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2201      	movs	r2, #1
 80046d2:	409a      	lsls	r2, r3
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b40      	cmp	r3, #64	@ 0x40
 80046e6:	d108      	bne.n	80046fa <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	60da      	str	r2, [r3, #12]
}
 80046f8:	e007      	b.n	800470a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	48022c08 	.word	0x48022c08
 800471c:	48022c1c 	.word	0x48022c1c
 8004720:	48022c30 	.word	0x48022c30
 8004724:	48022c44 	.word	0x48022c44
 8004728:	48022c58 	.word	0x48022c58
 800472c:	48022c6c 	.word	0x48022c6c
 8004730:	48022c80 	.word	0x48022c80
 8004734:	48022c94 	.word	0x48022c94
 8004738:	58025408 	.word	0x58025408
 800473c:	5802541c 	.word	0x5802541c
 8004740:	58025430 	.word	0x58025430
 8004744:	58025444 	.word	0x58025444
 8004748:	58025458 	.word	0x58025458
 800474c:	5802546c 	.word	0x5802546c
 8004750:	58025480 	.word	0x58025480
 8004754:	58025494 	.word	0x58025494

08004758 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a42      	ldr	r2, [pc, #264]	@ (8004870 <DMA_CalcBaseAndBitshift+0x118>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d04a      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a41      	ldr	r2, [pc, #260]	@ (8004874 <DMA_CalcBaseAndBitshift+0x11c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d045      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a3f      	ldr	r2, [pc, #252]	@ (8004878 <DMA_CalcBaseAndBitshift+0x120>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d040      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a3e      	ldr	r2, [pc, #248]	@ (800487c <DMA_CalcBaseAndBitshift+0x124>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d03b      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a3c      	ldr	r2, [pc, #240]	@ (8004880 <DMA_CalcBaseAndBitshift+0x128>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d036      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a3b      	ldr	r2, [pc, #236]	@ (8004884 <DMA_CalcBaseAndBitshift+0x12c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d031      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a39      	ldr	r2, [pc, #228]	@ (8004888 <DMA_CalcBaseAndBitshift+0x130>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02c      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a38      	ldr	r2, [pc, #224]	@ (800488c <DMA_CalcBaseAndBitshift+0x134>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d027      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a36      	ldr	r2, [pc, #216]	@ (8004890 <DMA_CalcBaseAndBitshift+0x138>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d022      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a35      	ldr	r2, [pc, #212]	@ (8004894 <DMA_CalcBaseAndBitshift+0x13c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d01d      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a33      	ldr	r2, [pc, #204]	@ (8004898 <DMA_CalcBaseAndBitshift+0x140>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d018      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a32      	ldr	r2, [pc, #200]	@ (800489c <DMA_CalcBaseAndBitshift+0x144>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a30      	ldr	r2, [pc, #192]	@ (80048a0 <DMA_CalcBaseAndBitshift+0x148>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00e      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2f      	ldr	r2, [pc, #188]	@ (80048a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a2d      	ldr	r2, [pc, #180]	@ (80048a8 <DMA_CalcBaseAndBitshift+0x150>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <DMA_CalcBaseAndBitshift+0xa8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2c      	ldr	r2, [pc, #176]	@ (80048ac <DMA_CalcBaseAndBitshift+0x154>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d101      	bne.n	8004804 <DMA_CalcBaseAndBitshift+0xac>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <DMA_CalcBaseAndBitshift+0xae>
 8004804:	2300      	movs	r3, #0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d024      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3b10      	subs	r3, #16
 8004812:	4a27      	ldr	r2, [pc, #156]	@ (80048b0 <DMA_CalcBaseAndBitshift+0x158>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	4a24      	ldr	r2, [pc, #144]	@ (80048b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004824:	5cd3      	ldrb	r3, [r2, r3]
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b03      	cmp	r3, #3
 8004830:	d908      	bls.n	8004844 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	4b1f      	ldr	r3, [pc, #124]	@ (80048b8 <DMA_CalcBaseAndBitshift+0x160>)
 800483a:	4013      	ands	r3, r2
 800483c:	1d1a      	adds	r2, r3, #4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	659a      	str	r2, [r3, #88]	@ 0x58
 8004842:	e00d      	b.n	8004860 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	4b1b      	ldr	r3, [pc, #108]	@ (80048b8 <DMA_CalcBaseAndBitshift+0x160>)
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6593      	str	r3, [r2, #88]	@ 0x58
 8004852:	e005      	b.n	8004860 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	40020010 	.word	0x40020010
 8004874:	40020028 	.word	0x40020028
 8004878:	40020040 	.word	0x40020040
 800487c:	40020058 	.word	0x40020058
 8004880:	40020070 	.word	0x40020070
 8004884:	40020088 	.word	0x40020088
 8004888:	400200a0 	.word	0x400200a0
 800488c:	400200b8 	.word	0x400200b8
 8004890:	40020410 	.word	0x40020410
 8004894:	40020428 	.word	0x40020428
 8004898:	40020440 	.word	0x40020440
 800489c:	40020458 	.word	0x40020458
 80048a0:	40020470 	.word	0x40020470
 80048a4:	40020488 	.word	0x40020488
 80048a8:	400204a0 	.word	0x400204a0
 80048ac:	400204b8 	.word	0x400204b8
 80048b0:	aaaaaaab 	.word	0xaaaaaaab
 80048b4:	0800cf78 	.word	0x0800cf78
 80048b8:	fffffc00 	.word	0xfffffc00

080048bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d120      	bne.n	8004912 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d858      	bhi.n	800498a <DMA_CheckFifoParam+0xce>
 80048d8:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <DMA_CheckFifoParam+0x24>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	080048f1 	.word	0x080048f1
 80048e4:	08004903 	.word	0x08004903
 80048e8:	080048f1 	.word	0x080048f1
 80048ec:	0800498b 	.word	0x0800498b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d048      	beq.n	800498e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004900:	e045      	b.n	800498e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004906:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800490a:	d142      	bne.n	8004992 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004910:	e03f      	b.n	8004992 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800491a:	d123      	bne.n	8004964 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	2b03      	cmp	r3, #3
 8004922:	d838      	bhi.n	8004996 <DMA_CheckFifoParam+0xda>
 8004924:	a201      	add	r2, pc, #4	@ (adr r2, 800492c <DMA_CheckFifoParam+0x70>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	0800493d 	.word	0x0800493d
 8004930:	08004943 	.word	0x08004943
 8004934:	0800493d 	.word	0x0800493d
 8004938:	08004955 	.word	0x08004955
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
        break;
 8004940:	e030      	b.n	80049a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d025      	beq.n	800499a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004952:	e022      	b.n	800499a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004958:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800495c:	d11f      	bne.n	800499e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004962:	e01c      	b.n	800499e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	2b02      	cmp	r3, #2
 800496a:	d902      	bls.n	8004972 <DMA_CheckFifoParam+0xb6>
 800496c:	2b03      	cmp	r3, #3
 800496e:	d003      	beq.n	8004978 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004970:	e018      	b.n	80049a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
        break;
 8004976:	e015      	b.n	80049a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
    break;
 8004988:	e00b      	b.n	80049a2 <DMA_CheckFifoParam+0xe6>
        break;
 800498a:	bf00      	nop
 800498c:	e00a      	b.n	80049a4 <DMA_CheckFifoParam+0xe8>
        break;
 800498e:	bf00      	nop
 8004990:	e008      	b.n	80049a4 <DMA_CheckFifoParam+0xe8>
        break;
 8004992:	bf00      	nop
 8004994:	e006      	b.n	80049a4 <DMA_CheckFifoParam+0xe8>
        break;
 8004996:	bf00      	nop
 8004998:	e004      	b.n	80049a4 <DMA_CheckFifoParam+0xe8>
        break;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <DMA_CheckFifoParam+0xe8>
        break;
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <DMA_CheckFifoParam+0xe8>
    break;
 80049a2:	bf00      	nop
    }
  }

  return status;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop

080049b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a38      	ldr	r2, [pc, #224]	@ (8004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d022      	beq.n	8004a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a36      	ldr	r2, [pc, #216]	@ (8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01d      	beq.n	8004a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a35      	ldr	r2, [pc, #212]	@ (8004ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d018      	beq.n	8004a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a33      	ldr	r2, [pc, #204]	@ (8004ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a32      	ldr	r2, [pc, #200]	@ (8004ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a30      	ldr	r2, [pc, #192]	@ (8004abc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004a16:	2300      	movs	r3, #0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01a      	beq.n	8004a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	3b08      	subs	r3, #8
 8004a24:	4a28      	ldr	r2, [pc, #160]	@ (8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4b26      	ldr	r3, [pc, #152]	@ (8004acc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a24      	ldr	r2, [pc, #144]	@ (8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a40:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2201      	movs	r2, #1
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a50:	e024      	b.n	8004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	3b10      	subs	r3, #16
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d806      	bhi.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d902      	bls.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3308      	adds	r3, #8
 8004a78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4b18      	ldr	r3, [pc, #96]	@ (8004ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	461a      	mov	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a16      	ldr	r2, [pc, #88]	@ (8004ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a8c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	2201      	movs	r2, #1
 8004a96:	409a      	lsls	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	58025408 	.word	0x58025408
 8004aac:	5802541c 	.word	0x5802541c
 8004ab0:	58025430 	.word	0x58025430
 8004ab4:	58025444 	.word	0x58025444
 8004ab8:	58025458 	.word	0x58025458
 8004abc:	5802546c 	.word	0x5802546c
 8004ac0:	58025480 	.word	0x58025480
 8004ac4:	58025494 	.word	0x58025494
 8004ac8:	cccccccd 	.word	0xcccccccd
 8004acc:	16009600 	.word	0x16009600
 8004ad0:	58025880 	.word	0x58025880
 8004ad4:	aaaaaaab 	.word	0xaaaaaaab
 8004ad8:	400204b8 	.word	0x400204b8
 8004adc:	4002040f 	.word	0x4002040f
 8004ae0:	10008200 	.word	0x10008200
 8004ae4:	40020880 	.word	0x40020880

08004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d04a      	beq.n	8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d847      	bhi.n	8004b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a25      	ldr	r2, [pc, #148]	@ (8004ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d022      	beq.n	8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a24      	ldr	r2, [pc, #144]	@ (8004ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d01d      	beq.n	8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a22      	ldr	r2, [pc, #136]	@ (8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d018      	beq.n	8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a21      	ldr	r2, [pc, #132]	@ (8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d013      	beq.n	8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00e      	beq.n	8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d101      	bne.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4b17      	ldr	r3, [pc, #92]	@ (8004bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	461a      	mov	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a15      	ldr	r2, [pc, #84]	@ (8004bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b70:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b72:	e009      	b.n	8004b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a11      	ldr	r2, [pc, #68]	@ (8004bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b86:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	58025408 	.word	0x58025408
 8004ba4:	5802541c 	.word	0x5802541c
 8004ba8:	58025430 	.word	0x58025430
 8004bac:	58025444 	.word	0x58025444
 8004bb0:	58025458 	.word	0x58025458
 8004bb4:	5802546c 	.word	0x5802546c
 8004bb8:	58025480 	.word	0x58025480
 8004bbc:	58025494 	.word	0x58025494
 8004bc0:	1600963f 	.word	0x1600963f
 8004bc4:	58025940 	.word	0x58025940
 8004bc8:	1000823f 	.word	0x1000823f
 8004bcc:	40020940 	.word	0x40020940

08004bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	@ 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bde:	4b89      	ldr	r3, [pc, #548]	@ (8004e04 <HAL_GPIO_Init+0x234>)
 8004be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be2:	e194      	b.n	8004f0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	2101      	movs	r1, #1
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8186 	beq.w	8004f08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d005      	beq.n	8004c14 <HAL_GPIO_Init+0x44>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d130      	bne.n	8004c76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	2203      	movs	r2, #3
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	091b      	lsrs	r3, r3, #4
 8004c60:	f003 0201 	and.w	r2, r3, #1
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d017      	beq.n	8004cb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4013      	ands	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d123      	bne.n	8004d06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	08da      	lsrs	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3208      	adds	r2, #8
 8004cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	08da      	lsrs	r2, r3, #3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3208      	adds	r2, #8
 8004d00:	69b9      	ldr	r1, [r7, #24]
 8004d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	2203      	movs	r2, #3
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0203 	and.w	r2, r3, #3
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 80e0 	beq.w	8004f08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d48:	4b2f      	ldr	r3, [pc, #188]	@ (8004e08 <HAL_GPIO_Init+0x238>)
 8004d4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8004e08 <HAL_GPIO_Init+0x238>)
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004d58:	4b2b      	ldr	r3, [pc, #172]	@ (8004e08 <HAL_GPIO_Init+0x238>)
 8004d5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d66:	4a29      	ldr	r2, [pc, #164]	@ (8004e0c <HAL_GPIO_Init+0x23c>)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	220f      	movs	r2, #15
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a20      	ldr	r2, [pc, #128]	@ (8004e10 <HAL_GPIO_Init+0x240>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d052      	beq.n	8004e38 <HAL_GPIO_Init+0x268>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1f      	ldr	r2, [pc, #124]	@ (8004e14 <HAL_GPIO_Init+0x244>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d031      	beq.n	8004dfe <HAL_GPIO_Init+0x22e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e18 <HAL_GPIO_Init+0x248>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d02b      	beq.n	8004dfa <HAL_GPIO_Init+0x22a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e1c <HAL_GPIO_Init+0x24c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d025      	beq.n	8004df6 <HAL_GPIO_Init+0x226>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a1c      	ldr	r2, [pc, #112]	@ (8004e20 <HAL_GPIO_Init+0x250>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01f      	beq.n	8004df2 <HAL_GPIO_Init+0x222>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e24 <HAL_GPIO_Init+0x254>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d019      	beq.n	8004dee <HAL_GPIO_Init+0x21e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e28 <HAL_GPIO_Init+0x258>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <HAL_GPIO_Init+0x21a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	@ (8004e2c <HAL_GPIO_Init+0x25c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00d      	beq.n	8004de6 <HAL_GPIO_Init+0x216>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a18      	ldr	r2, [pc, #96]	@ (8004e30 <HAL_GPIO_Init+0x260>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d007      	beq.n	8004de2 <HAL_GPIO_Init+0x212>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a17      	ldr	r2, [pc, #92]	@ (8004e34 <HAL_GPIO_Init+0x264>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d101      	bne.n	8004dde <HAL_GPIO_Init+0x20e>
 8004dda:	2309      	movs	r3, #9
 8004ddc:	e02d      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004dde:	230a      	movs	r3, #10
 8004de0:	e02b      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004de2:	2308      	movs	r3, #8
 8004de4:	e029      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004de6:	2307      	movs	r3, #7
 8004de8:	e027      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004dea:	2306      	movs	r3, #6
 8004dec:	e025      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004dee:	2305      	movs	r3, #5
 8004df0:	e023      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004df2:	2304      	movs	r3, #4
 8004df4:	e021      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004df6:	2303      	movs	r3, #3
 8004df8:	e01f      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e01d      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e01b      	b.n	8004e3a <HAL_GPIO_Init+0x26a>
 8004e02:	bf00      	nop
 8004e04:	58000080 	.word	0x58000080
 8004e08:	58024400 	.word	0x58024400
 8004e0c:	58000400 	.word	0x58000400
 8004e10:	58020000 	.word	0x58020000
 8004e14:	58020400 	.word	0x58020400
 8004e18:	58020800 	.word	0x58020800
 8004e1c:	58020c00 	.word	0x58020c00
 8004e20:	58021000 	.word	0x58021000
 8004e24:	58021400 	.word	0x58021400
 8004e28:	58021800 	.word	0x58021800
 8004e2c:	58021c00 	.word	0x58021c00
 8004e30:	58022000 	.word	0x58022000
 8004e34:	58022400 	.word	0x58022400
 8004e38:	2300      	movs	r3, #0
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	f002 0203 	and.w	r2, r2, #3
 8004e40:	0092      	lsls	r2, r2, #2
 8004e42:	4093      	lsls	r3, r2
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e4a:	4938      	ldr	r1, [pc, #224]	@ (8004f2c <HAL_GPIO_Init+0x35c>)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	3302      	adds	r3, #2
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4013      	ands	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004eac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f47f ae63 	bne.w	8004be4 <HAL_GPIO_Init+0x14>
  }
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	3724      	adds	r7, #36	@ 0x24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	58000400 	.word	0x58000400

08004f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	807b      	strh	r3, [r7, #2]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f40:	787b      	ldrb	r3, [r7, #1]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f46:	887a      	ldrh	r2, [r7, #2]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f4c:	e003      	b.n	8004f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f4e:	887b      	ldrh	r3, [r7, #2]
 8004f50:	041a      	lsls	r2, r3, #16
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	619a      	str	r2, [r3, #24]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e08b      	b.n	800508e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fb fcc4 	bl	8000918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	@ 0x24
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	e006      	b.n	8004fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d108      	bne.n	8005006 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	e007      	b.n	8005016 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6859      	ldr	r1, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b1d      	ldr	r3, [pc, #116]	@ (8005098 <HAL_I2C_Init+0x134>)
 8005022:	430b      	orrs	r3, r1
 8005024:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005034:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69d9      	ldr	r1, [r3, #28]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	02008000 	.word	0x02008000

0800509c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d138      	bne.n	8005124 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050bc:	2302      	movs	r3, #2
 80050be:	e032      	b.n	8005126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2224      	movs	r2, #36	@ 0x24
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6819      	ldr	r1, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b20      	cmp	r3, #32
 8005146:	d139      	bne.n	80051bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005152:	2302      	movs	r3, #2
 8005154:	e033      	b.n	80051be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2224      	movs	r2, #36	@ 0x24
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005184:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e000      	b.n	80051be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051bc:	2302      	movs	r3, #2
  }
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80051d4:	4b29      	ldr	r3, [pc, #164]	@ (800527c <HAL_PWREx_ConfigSupply+0xb0>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	2b06      	cmp	r3, #6
 80051de:	d00a      	beq.n	80051f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80051e0:	4b26      	ldr	r3, [pc, #152]	@ (800527c <HAL_PWREx_ConfigSupply+0xb0>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d001      	beq.n	80051f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e040      	b.n	8005274 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e03e      	b.n	8005274 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051f6:	4b21      	ldr	r3, [pc, #132]	@ (800527c <HAL_PWREx_ConfigSupply+0xb0>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80051fe:	491f      	ldr	r1, [pc, #124]	@ (800527c <HAL_PWREx_ConfigSupply+0xb0>)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4313      	orrs	r3, r2
 8005204:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005206:	f7fc fc41 	bl	8001a8c <HAL_GetTick>
 800520a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800520c:	e009      	b.n	8005222 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800520e:	f7fc fc3d 	bl	8001a8c <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800521c:	d901      	bls.n	8005222 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e028      	b.n	8005274 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005222:	4b16      	ldr	r3, [pc, #88]	@ (800527c <HAL_PWREx_ConfigSupply+0xb0>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800522a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800522e:	d1ee      	bne.n	800520e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b1e      	cmp	r3, #30
 8005234:	d008      	beq.n	8005248 <HAL_PWREx_ConfigSupply+0x7c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b2e      	cmp	r3, #46	@ 0x2e
 800523a:	d005      	beq.n	8005248 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b1d      	cmp	r3, #29
 8005240:	d002      	beq.n	8005248 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b2d      	cmp	r3, #45	@ 0x2d
 8005246:	d114      	bne.n	8005272 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005248:	f7fc fc20 	bl	8001a8c <HAL_GetTick>
 800524c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800524e:	e009      	b.n	8005264 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005250:	f7fc fc1c 	bl	8001a8c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800525e:	d901      	bls.n	8005264 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e007      	b.n	8005274 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005264:	4b05      	ldr	r3, [pc, #20]	@ (800527c <HAL_PWREx_ConfigSupply+0xb0>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800526c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005270:	d1ee      	bne.n	8005250 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	58024800 	.word	0x58024800

08005280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b08c      	sub	sp, #48	@ 0x30
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	f000 bc1f 	b.w	8005ad2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80b3 	beq.w	8005408 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a2:	4b95      	ldr	r3, [pc, #596]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052ac:	4b92      	ldr	r3, [pc, #584]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d007      	beq.n	80052c8 <HAL_RCC_OscConfig+0x48>
 80052b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ba:	2b18      	cmp	r3, #24
 80052bc:	d112      	bne.n	80052e4 <HAL_RCC_OscConfig+0x64>
 80052be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d10d      	bne.n	80052e4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c8:	4b8b      	ldr	r3, [pc, #556]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8098 	beq.w	8005406 <HAL_RCC_OscConfig+0x186>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f040 8093 	bne.w	8005406 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e3f6      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ec:	d106      	bne.n	80052fc <HAL_RCC_OscConfig+0x7c>
 80052ee:	4b82      	ldr	r3, [pc, #520]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a81      	ldr	r2, [pc, #516]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80052f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e058      	b.n	80053ae <HAL_RCC_OscConfig+0x12e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d112      	bne.n	800532a <HAL_RCC_OscConfig+0xaa>
 8005304:	4b7c      	ldr	r3, [pc, #496]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a7b      	ldr	r2, [pc, #492]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800530a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4b79      	ldr	r3, [pc, #484]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a78      	ldr	r2, [pc, #480]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005316:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b76      	ldr	r3, [pc, #472]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a75      	ldr	r2, [pc, #468]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e041      	b.n	80053ae <HAL_RCC_OscConfig+0x12e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005332:	d112      	bne.n	800535a <HAL_RCC_OscConfig+0xda>
 8005334:	4b70      	ldr	r3, [pc, #448]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a6f      	ldr	r2, [pc, #444]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800533a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	4b6d      	ldr	r3, [pc, #436]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a6c      	ldr	r2, [pc, #432]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005346:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	4b6a      	ldr	r3, [pc, #424]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a69      	ldr	r2, [pc, #420]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e029      	b.n	80053ae <HAL_RCC_OscConfig+0x12e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005362:	d112      	bne.n	800538a <HAL_RCC_OscConfig+0x10a>
 8005364:	4b64      	ldr	r3, [pc, #400]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a63      	ldr	r2, [pc, #396]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800536a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b61      	ldr	r3, [pc, #388]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a60      	ldr	r2, [pc, #384]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4b5e      	ldr	r3, [pc, #376]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a5d      	ldr	r2, [pc, #372]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	e011      	b.n	80053ae <HAL_RCC_OscConfig+0x12e>
 800538a:	4b5b      	ldr	r3, [pc, #364]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a5a      	ldr	r2, [pc, #360]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	4b58      	ldr	r3, [pc, #352]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a57      	ldr	r2, [pc, #348]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800539c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	4b55      	ldr	r3, [pc, #340]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a54      	ldr	r2, [pc, #336]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80053a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80053ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d013      	beq.n	80053de <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fc fb69 	bl	8001a8c <HAL_GetTick>
 80053ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053be:	f7fc fb65 	bl	8001a8c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b64      	cmp	r3, #100	@ 0x64
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e380      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053d0:	4b49      	ldr	r3, [pc, #292]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0f0      	beq.n	80053be <HAL_RCC_OscConfig+0x13e>
 80053dc:	e014      	b.n	8005408 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053de:	f7fc fb55 	bl	8001a8c <HAL_GetTick>
 80053e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e6:	f7fc fb51 	bl	8001a8c <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b64      	cmp	r3, #100	@ 0x64
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e36c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053f8:	4b3f      	ldr	r3, [pc, #252]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1f0      	bne.n	80053e6 <HAL_RCC_OscConfig+0x166>
 8005404:	e000      	b.n	8005408 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005406:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 808c 	beq.w	800552e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005416:	4b38      	ldr	r3, [pc, #224]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800541e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005420:	4b35      	ldr	r3, [pc, #212]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005424:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_RCC_OscConfig+0x1bc>
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2b18      	cmp	r3, #24
 8005430:	d137      	bne.n	80054a2 <HAL_RCC_OscConfig+0x222>
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f003 0303 	and.w	r3, r3, #3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d132      	bne.n	80054a2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800543c:	4b2e      	ldr	r3, [pc, #184]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_RCC_OscConfig+0x1d4>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e33e      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005454:	4b28      	ldr	r3, [pc, #160]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f023 0219 	bic.w	r2, r3, #25
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4925      	ldr	r1, [pc, #148]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005462:	4313      	orrs	r3, r2
 8005464:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fc fb11 	bl	8001a8c <HAL_GetTick>
 800546a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800546e:	f7fc fb0d 	bl	8001a8c <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e328      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005480:	4b1d      	ldr	r3, [pc, #116]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548c:	4b1a      	ldr	r3, [pc, #104]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	061b      	lsls	r3, r3, #24
 800549a:	4917      	ldr	r1, [pc, #92]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 800549c:	4313      	orrs	r3, r2
 800549e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a0:	e045      	b.n	800552e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d028      	beq.n	80054fc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054aa:	4b13      	ldr	r3, [pc, #76]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f023 0219 	bic.w	r2, r3, #25
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	4910      	ldr	r1, [pc, #64]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054bc:	f7fc fae6 	bl	8001a8c <HAL_GetTick>
 80054c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c4:	f7fc fae2 	bl	8001a8c <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e2fd      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054d6:	4b08      	ldr	r3, [pc, #32]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f0      	beq.n	80054c4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e2:	4b05      	ldr	r3, [pc, #20]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	061b      	lsls	r3, r3, #24
 80054f0:	4901      	ldr	r1, [pc, #4]	@ (80054f8 <HAL_RCC_OscConfig+0x278>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	604b      	str	r3, [r1, #4]
 80054f6:	e01a      	b.n	800552e <HAL_RCC_OscConfig+0x2ae>
 80054f8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fc:	4b97      	ldr	r3, [pc, #604]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a96      	ldr	r2, [pc, #600]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fc fac0 	bl	8001a8c <HAL_GetTick>
 800550c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005510:	f7fc fabc 	bl	8001a8c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e2d7      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005522:	4b8e      	ldr	r3, [pc, #568]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2b00      	cmp	r3, #0
 8005538:	d06a      	beq.n	8005610 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800553a:	4b88      	ldr	r3, [pc, #544]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005542:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005544:	4b85      	ldr	r3, [pc, #532]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d007      	beq.n	8005560 <HAL_RCC_OscConfig+0x2e0>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b18      	cmp	r3, #24
 8005554:	d11b      	bne.n	800558e <HAL_RCC_OscConfig+0x30e>
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d116      	bne.n	800558e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005560:	4b7e      	ldr	r3, [pc, #504]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_RCC_OscConfig+0x2f8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	2b80      	cmp	r3, #128	@ 0x80
 8005572:	d001      	beq.n	8005578 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e2ac      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005578:	4b78      	ldr	r3, [pc, #480]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	061b      	lsls	r3, r3, #24
 8005586:	4975      	ldr	r1, [pc, #468]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 8005588:	4313      	orrs	r3, r2
 800558a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800558c:	e040      	b.n	8005610 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d023      	beq.n	80055de <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005596:	4b71      	ldr	r3, [pc, #452]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a70      	ldr	r2, [pc, #448]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 800559c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a2:	f7fc fa73 	bl	8001a8c <HAL_GetTick>
 80055a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055aa:	f7fc fa6f 	bl	8001a8c <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e28a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055bc:	4b67      	ldr	r3, [pc, #412]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0f0      	beq.n	80055aa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055c8:	4b64      	ldr	r3, [pc, #400]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	061b      	lsls	r3, r3, #24
 80055d6:	4961      	ldr	r1, [pc, #388]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	60cb      	str	r3, [r1, #12]
 80055dc:	e018      	b.n	8005610 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055de:	4b5f      	ldr	r3, [pc, #380]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a5e      	ldr	r2, [pc, #376]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80055e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fc fa4f 	bl	8001a8c <HAL_GetTick>
 80055ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055f2:	f7fc fa4b 	bl	8001a8c <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e266      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005604:	4b55      	ldr	r3, [pc, #340]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1f0      	bne.n	80055f2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d036      	beq.n	800568a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d019      	beq.n	8005658 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005624:	4b4d      	ldr	r3, [pc, #308]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 8005626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005628:	4a4c      	ldr	r2, [pc, #304]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005630:	f7fc fa2c 	bl	8001a8c <HAL_GetTick>
 8005634:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005638:	f7fc fa28 	bl	8001a8c <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e243      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800564a:	4b44      	ldr	r3, [pc, #272]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 800564c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f0      	beq.n	8005638 <HAL_RCC_OscConfig+0x3b8>
 8005656:	e018      	b.n	800568a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005658:	4b40      	ldr	r3, [pc, #256]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 800565a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800565c:	4a3f      	ldr	r2, [pc, #252]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fc fa12 	bl	8001a8c <HAL_GetTick>
 8005668:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800566c:	f7fc fa0e 	bl	8001a8c <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e229      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800567e:	4b37      	ldr	r3, [pc, #220]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 8005680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f0      	bne.n	800566c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d036      	beq.n	8005704 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d019      	beq.n	80056d2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800569e:	4b2f      	ldr	r3, [pc, #188]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2e      	ldr	r2, [pc, #184]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80056a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056aa:	f7fc f9ef 	bl	8001a8c <HAL_GetTick>
 80056ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056b2:	f7fc f9eb 	bl	8001a8c <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e206      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056c4:	4b25      	ldr	r3, [pc, #148]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x432>
 80056d0:	e018      	b.n	8005704 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056d2:	4b22      	ldr	r3, [pc, #136]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a21      	ldr	r2, [pc, #132]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80056d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056de:	f7fc f9d5 	bl	8001a8c <HAL_GetTick>
 80056e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056e6:	f7fc f9d1 	bl	8001a8c <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e1ec      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056f8:	4b18      	ldr	r3, [pc, #96]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f0      	bne.n	80056e6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80af 	beq.w	8005870 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005712:	4b13      	ldr	r3, [pc, #76]	@ (8005760 <HAL_RCC_OscConfig+0x4e0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a12      	ldr	r2, [pc, #72]	@ (8005760 <HAL_RCC_OscConfig+0x4e0>)
 8005718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800571c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800571e:	f7fc f9b5 	bl	8001a8c <HAL_GetTick>
 8005722:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005726:	f7fc f9b1 	bl	8001a8c <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b64      	cmp	r3, #100	@ 0x64
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e1cc      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005738:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <HAL_RCC_OscConfig+0x4e0>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d10b      	bne.n	8005764 <HAL_RCC_OscConfig+0x4e4>
 800574c:	4b03      	ldr	r3, [pc, #12]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 800574e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005750:	4a02      	ldr	r2, [pc, #8]	@ (800575c <HAL_RCC_OscConfig+0x4dc>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	6713      	str	r3, [r2, #112]	@ 0x70
 8005758:	e05b      	b.n	8005812 <HAL_RCC_OscConfig+0x592>
 800575a:	bf00      	nop
 800575c:	58024400 	.word	0x58024400
 8005760:	58024800 	.word	0x58024800
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d112      	bne.n	8005792 <HAL_RCC_OscConfig+0x512>
 800576c:	4b9d      	ldr	r3, [pc, #628]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005770:	4a9c      	ldr	r2, [pc, #624]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	6713      	str	r3, [r2, #112]	@ 0x70
 8005778:	4b9a      	ldr	r3, [pc, #616]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800577a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577c:	4a99      	ldr	r2, [pc, #612]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800577e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005782:	6713      	str	r3, [r2, #112]	@ 0x70
 8005784:	4b97      	ldr	r3, [pc, #604]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005788:	4a96      	ldr	r2, [pc, #600]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800578a:	f023 0304 	bic.w	r3, r3, #4
 800578e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005790:	e03f      	b.n	8005812 <HAL_RCC_OscConfig+0x592>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b05      	cmp	r3, #5
 8005798:	d112      	bne.n	80057c0 <HAL_RCC_OscConfig+0x540>
 800579a:	4b92      	ldr	r3, [pc, #584]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579e:	4a91      	ldr	r2, [pc, #580]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057a0:	f043 0304 	orr.w	r3, r3, #4
 80057a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a6:	4b8f      	ldr	r3, [pc, #572]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057aa:	4a8e      	ldr	r2, [pc, #568]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b2:	4b8c      	ldr	r3, [pc, #560]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b6:	4a8b      	ldr	r2, [pc, #556]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057be:	e028      	b.n	8005812 <HAL_RCC_OscConfig+0x592>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b85      	cmp	r3, #133	@ 0x85
 80057c6:	d112      	bne.n	80057ee <HAL_RCC_OscConfig+0x56e>
 80057c8:	4b86      	ldr	r3, [pc, #536]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057cc:	4a85      	ldr	r2, [pc, #532]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057d4:	4b83      	ldr	r3, [pc, #524]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d8:	4a82      	ldr	r2, [pc, #520]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057de:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e0:	4b80      	ldr	r3, [pc, #512]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e4:	4a7f      	ldr	r2, [pc, #508]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ec:	e011      	b.n	8005812 <HAL_RCC_OscConfig+0x592>
 80057ee:	4b7d      	ldr	r3, [pc, #500]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f2:	4a7c      	ldr	r2, [pc, #496]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057fa:	4b7a      	ldr	r3, [pc, #488]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fe:	4a79      	ldr	r2, [pc, #484]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	6713      	str	r3, [r2, #112]	@ 0x70
 8005806:	4b77      	ldr	r3, [pc, #476]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580a:	4a76      	ldr	r2, [pc, #472]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800580c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005810:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d015      	beq.n	8005846 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581a:	f7fc f937 	bl	8001a8c <HAL_GetTick>
 800581e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005820:	e00a      	b.n	8005838 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005822:	f7fc f933 	bl	8001a8c <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005830:	4293      	cmp	r3, r2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e14c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005838:	4b6a      	ldr	r3, [pc, #424]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800583a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0ee      	beq.n	8005822 <HAL_RCC_OscConfig+0x5a2>
 8005844:	e014      	b.n	8005870 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005846:	f7fc f921 	bl	8001a8c <HAL_GetTick>
 800584a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800584c:	e00a      	b.n	8005864 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584e:	f7fc f91d 	bl	8001a8c <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e136      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005864:	4b5f      	ldr	r3, [pc, #380]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1ee      	bne.n	800584e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 812b 	beq.w	8005ad0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800587a:	4b5a      	ldr	r3, [pc, #360]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005882:	2b18      	cmp	r3, #24
 8005884:	f000 80bb 	beq.w	80059fe <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588c:	2b02      	cmp	r3, #2
 800588e:	f040 8095 	bne.w	80059bc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005892:	4b54      	ldr	r3, [pc, #336]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a53      	ldr	r2, [pc, #332]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800589c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fc f8f5 	bl	8001a8c <HAL_GetTick>
 80058a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a6:	f7fc f8f1 	bl	8001a8c <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e10c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b8:	4b4a      	ldr	r3, [pc, #296]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f0      	bne.n	80058a6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058c4:	4b47      	ldr	r3, [pc, #284]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80058c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058c8:	4b47      	ldr	r3, [pc, #284]	@ (80059e8 <HAL_RCC_OscConfig+0x768>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058d4:	0112      	lsls	r2, r2, #4
 80058d6:	430a      	orrs	r2, r1
 80058d8:	4942      	ldr	r1, [pc, #264]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e2:	3b01      	subs	r3, #1
 80058e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ec:	3b01      	subs	r3, #1
 80058ee:	025b      	lsls	r3, r3, #9
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f8:	3b01      	subs	r3, #1
 80058fa:	041b      	lsls	r3, r3, #16
 80058fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005906:	3b01      	subs	r3, #1
 8005908:	061b      	lsls	r3, r3, #24
 800590a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800590e:	4935      	ldr	r1, [pc, #212]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005910:	4313      	orrs	r3, r2
 8005912:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005914:	4b33      	ldr	r3, [pc, #204]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	4a32      	ldr	r2, [pc, #200]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800591a:	f023 0301 	bic.w	r3, r3, #1
 800591e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005920:	4b30      	ldr	r3, [pc, #192]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005924:	4b31      	ldr	r3, [pc, #196]	@ (80059ec <HAL_RCC_OscConfig+0x76c>)
 8005926:	4013      	ands	r3, r2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800592c:	00d2      	lsls	r2, r2, #3
 800592e:	492d      	ldr	r1, [pc, #180]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005930:	4313      	orrs	r3, r2
 8005932:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005934:	4b2b      	ldr	r3, [pc, #172]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005938:	f023 020c 	bic.w	r2, r3, #12
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005940:	4928      	ldr	r1, [pc, #160]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005942:	4313      	orrs	r3, r2
 8005944:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005946:	4b27      	ldr	r3, [pc, #156]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	f023 0202 	bic.w	r2, r3, #2
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005952:	4924      	ldr	r1, [pc, #144]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005954:	4313      	orrs	r3, r2
 8005956:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005958:	4b22      	ldr	r3, [pc, #136]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	4a21      	ldr	r2, [pc, #132]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800595e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005964:	4b1f      	ldr	r3, [pc, #124]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005968:	4a1e      	ldr	r2, [pc, #120]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800596a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800596e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005970:	4b1c      	ldr	r3, [pc, #112]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005974:	4a1b      	ldr	r2, [pc, #108]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005976:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800597a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800597c:	4b19      	ldr	r3, [pc, #100]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	4a18      	ldr	r2, [pc, #96]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005988:	4b16      	ldr	r3, [pc, #88]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a15      	ldr	r2, [pc, #84]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 800598e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7fc f87a 	bl	8001a8c <HAL_GetTick>
 8005998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599c:	f7fc f876 	bl	8001a8c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e091      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059ae:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0x71c>
 80059ba:	e089      	b.n	8005ad0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059bc:	4b09      	ldr	r3, [pc, #36]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a08      	ldr	r2, [pc, #32]	@ (80059e4 <HAL_RCC_OscConfig+0x764>)
 80059c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fc f860 	bl	8001a8c <HAL_GetTick>
 80059cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ce:	e00f      	b.n	80059f0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d0:	f7fc f85c 	bl	8001a8c <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d908      	bls.n	80059f0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e077      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
 80059e2:	bf00      	nop
 80059e4:	58024400 	.word	0x58024400
 80059e8:	fffffc0c 	.word	0xfffffc0c
 80059ec:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059f0:	4b3a      	ldr	r3, [pc, #232]	@ (8005adc <HAL_RCC_OscConfig+0x85c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e9      	bne.n	80059d0 <HAL_RCC_OscConfig+0x750>
 80059fc:	e068      	b.n	8005ad0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059fe:	4b37      	ldr	r3, [pc, #220]	@ (8005adc <HAL_RCC_OscConfig+0x85c>)
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a04:	4b35      	ldr	r3, [pc, #212]	@ (8005adc <HAL_RCC_OscConfig+0x85c>)
 8005a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a08:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d031      	beq.n	8005a76 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f003 0203 	and.w	r2, r3, #3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d12a      	bne.n	8005a76 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d122      	bne.n	8005a76 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d11a      	bne.n	8005a76 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	0a5b      	lsrs	r3, r3, #9
 8005a44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d111      	bne.n	8005a76 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	0c1b      	lsrs	r3, r3, #16
 8005a56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d108      	bne.n	8005a76 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	0e1b      	lsrs	r3, r3, #24
 8005a68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d001      	beq.n	8005a7a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e02b      	b.n	8005ad2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a7a:	4b18      	ldr	r3, [pc, #96]	@ (8005adc <HAL_RCC_OscConfig+0x85c>)
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7e:	08db      	lsrs	r3, r3, #3
 8005a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a84:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d01f      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a90:	4b12      	ldr	r3, [pc, #72]	@ (8005adc <HAL_RCC_OscConfig+0x85c>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a94:	4a11      	ldr	r2, [pc, #68]	@ (8005adc <HAL_RCC_OscConfig+0x85c>)
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a9c:	f7fb fff6 	bl	8001a8c <HAL_GetTick>
 8005aa0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005aa2:	bf00      	nop
 8005aa4:	f7fb fff2 	bl	8001a8c <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d0f9      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8005adc <HAL_RCC_OscConfig+0x85c>)
 8005ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae0 <HAL_RCC_OscConfig+0x860>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005abc:	00d2      	lsls	r2, r2, #3
 8005abe:	4907      	ldr	r1, [pc, #28]	@ (8005adc <HAL_RCC_OscConfig+0x85c>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_RCC_OscConfig+0x85c>)
 8005ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac8:	4a04      	ldr	r2, [pc, #16]	@ (8005adc <HAL_RCC_OscConfig+0x85c>)
 8005aca:	f043 0301 	orr.w	r3, r3, #1
 8005ace:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3730      	adds	r7, #48	@ 0x30
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	ffff0007 	.word	0xffff0007

08005ae4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e19c      	b.n	8005e32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af8:	4b8a      	ldr	r3, [pc, #552]	@ (8005d24 <HAL_RCC_ClockConfig+0x240>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d910      	bls.n	8005b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b06:	4b87      	ldr	r3, [pc, #540]	@ (8005d24 <HAL_RCC_ClockConfig+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f023 020f 	bic.w	r2, r3, #15
 8005b0e:	4985      	ldr	r1, [pc, #532]	@ (8005d24 <HAL_RCC_ClockConfig+0x240>)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b16:	4b83      	ldr	r3, [pc, #524]	@ (8005d24 <HAL_RCC_ClockConfig+0x240>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d001      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e184      	b.n	8005e32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d010      	beq.n	8005b56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	4b7b      	ldr	r3, [pc, #492]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d908      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b44:	4b78      	ldr	r3, [pc, #480]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	4975      	ldr	r1, [pc, #468]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d010      	beq.n	8005b84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	4b70      	ldr	r3, [pc, #448]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d908      	bls.n	8005b84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b72:	4b6d      	ldr	r3, [pc, #436]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	496a      	ldr	r1, [pc, #424]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d010      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699a      	ldr	r2, [r3, #24]
 8005b94:	4b64      	ldr	r3, [pc, #400]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d908      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ba0:	4b61      	ldr	r3, [pc, #388]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	495e      	ldr	r1, [pc, #376]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d010      	beq.n	8005be0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69da      	ldr	r2, [r3, #28]
 8005bc2:	4b59      	ldr	r3, [pc, #356]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d908      	bls.n	8005be0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bce:	4b56      	ldr	r3, [pc, #344]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	4953      	ldr	r1, [pc, #332]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d010      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d908      	bls.n	8005c0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f023 020f 	bic.w	r2, r3, #15
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4947      	ldr	r1, [pc, #284]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d055      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c1a:	4b43      	ldr	r3, [pc, #268]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4940      	ldr	r1, [pc, #256]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d107      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c34:	4b3c      	ldr	r3, [pc, #240]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d121      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0f6      	b.n	8005e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c4c:	4b36      	ldr	r3, [pc, #216]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d115      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0ea      	b.n	8005e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d107      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c64:	4b30      	ldr	r3, [pc, #192]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d109      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0de      	b.n	8005e32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c74:	4b2c      	ldr	r3, [pc, #176]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0d6      	b.n	8005e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c84:	4b28      	ldr	r3, [pc, #160]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f023 0207 	bic.w	r2, r3, #7
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4925      	ldr	r1, [pc, #148]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c96:	f7fb fef9 	bl	8001a8c <HAL_GetTick>
 8005c9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9c:	e00a      	b.n	8005cb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c9e:	f7fb fef5 	bl	8001a8c <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e0be      	b.n	8005e32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d1eb      	bne.n	8005c9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d010      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	4b14      	ldr	r3, [pc, #80]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d208      	bcs.n	8005cf4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce2:	4b11      	ldr	r3, [pc, #68]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f023 020f 	bic.w	r2, r3, #15
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	490e      	ldr	r1, [pc, #56]	@ (8005d28 <HAL_RCC_ClockConfig+0x244>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8005d24 <HAL_RCC_ClockConfig+0x240>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d214      	bcs.n	8005d2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d02:	4b08      	ldr	r3, [pc, #32]	@ (8005d24 <HAL_RCC_ClockConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f023 020f 	bic.w	r2, r3, #15
 8005d0a:	4906      	ldr	r1, [pc, #24]	@ (8005d24 <HAL_RCC_ClockConfig+0x240>)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d12:	4b04      	ldr	r3, [pc, #16]	@ (8005d24 <HAL_RCC_ClockConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d005      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e086      	b.n	8005e32 <HAL_RCC_ClockConfig+0x34e>
 8005d24:	52002000 	.word	0x52002000
 8005d28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d208      	bcs.n	8005d5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d48:	4b3c      	ldr	r3, [pc, #240]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	4939      	ldr	r1, [pc, #228]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d010      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	4b34      	ldr	r3, [pc, #208]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d208      	bcs.n	8005d88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d76:	4b31      	ldr	r3, [pc, #196]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	492e      	ldr	r1, [pc, #184]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d010      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	4b28      	ldr	r3, [pc, #160]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d208      	bcs.n	8005db6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005da4:	4b25      	ldr	r3, [pc, #148]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	4922      	ldr	r1, [pc, #136]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d010      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69da      	ldr	r2, [r3, #28]
 8005dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d208      	bcs.n	8005de4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	4917      	ldr	r1, [pc, #92]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005de4:	f000 f834 	bl	8005e50 <HAL_RCC_GetSysClockFreq>
 8005de8:	4602      	mov	r2, r0
 8005dea:	4b14      	ldr	r3, [pc, #80]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	4912      	ldr	r1, [pc, #72]	@ (8005e40 <HAL_RCC_ClockConfig+0x35c>)
 8005df6:	5ccb      	ldrb	r3, [r1, r3]
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005e00:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005e02:	4b0e      	ldr	r3, [pc, #56]	@ (8005e3c <HAL_RCC_ClockConfig+0x358>)
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8005e40 <HAL_RCC_ClockConfig+0x35c>)
 8005e0c:	5cd3      	ldrb	r3, [r2, r3]
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	4a0a      	ldr	r2, [pc, #40]	@ (8005e44 <HAL_RCC_ClockConfig+0x360>)
 8005e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e48 <HAL_RCC_ClockConfig+0x364>)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e22:	4b0a      	ldr	r3, [pc, #40]	@ (8005e4c <HAL_RCC_ClockConfig+0x368>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fb fde6 	bl	80019f8 <HAL_InitTick>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	0800cf68 	.word	0x0800cf68
 8005e44:	24000004 	.word	0x24000004
 8005e48:	24000000 	.word	0x24000000
 8005e4c:	24000008 	.word	0x24000008

08005e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	@ 0x24
 8005e54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e56:	4bb3      	ldr	r3, [pc, #716]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e5e:	2b18      	cmp	r3, #24
 8005e60:	f200 8155 	bhi.w	800610e <HAL_RCC_GetSysClockFreq+0x2be>
 8005e64:	a201      	add	r2, pc, #4	@ (adr r2, 8005e6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005ed1 	.word	0x08005ed1
 8005e70:	0800610f 	.word	0x0800610f
 8005e74:	0800610f 	.word	0x0800610f
 8005e78:	0800610f 	.word	0x0800610f
 8005e7c:	0800610f 	.word	0x0800610f
 8005e80:	0800610f 	.word	0x0800610f
 8005e84:	0800610f 	.word	0x0800610f
 8005e88:	0800610f 	.word	0x0800610f
 8005e8c:	08005ef7 	.word	0x08005ef7
 8005e90:	0800610f 	.word	0x0800610f
 8005e94:	0800610f 	.word	0x0800610f
 8005e98:	0800610f 	.word	0x0800610f
 8005e9c:	0800610f 	.word	0x0800610f
 8005ea0:	0800610f 	.word	0x0800610f
 8005ea4:	0800610f 	.word	0x0800610f
 8005ea8:	0800610f 	.word	0x0800610f
 8005eac:	08005efd 	.word	0x08005efd
 8005eb0:	0800610f 	.word	0x0800610f
 8005eb4:	0800610f 	.word	0x0800610f
 8005eb8:	0800610f 	.word	0x0800610f
 8005ebc:	0800610f 	.word	0x0800610f
 8005ec0:	0800610f 	.word	0x0800610f
 8005ec4:	0800610f 	.word	0x0800610f
 8005ec8:	0800610f 	.word	0x0800610f
 8005ecc:	08005f03 	.word	0x08005f03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed0:	4b94      	ldr	r3, [pc, #592]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d009      	beq.n	8005ef0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005edc:	4b91      	ldr	r3, [pc, #580]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	08db      	lsrs	r3, r3, #3
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	4a90      	ldr	r2, [pc, #576]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005eee:	e111      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ef0:	4b8d      	ldr	r3, [pc, #564]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ef2:	61bb      	str	r3, [r7, #24]
      break;
 8005ef4:	e10e      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ef8:	61bb      	str	r3, [r7, #24]
      break;
 8005efa:	e10b      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005efc:	4b8c      	ldr	r3, [pc, #560]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005efe:	61bb      	str	r3, [r7, #24]
      break;
 8005f00:	e108      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f02:	4b88      	ldr	r3, [pc, #544]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005f0c:	4b85      	ldr	r3, [pc, #532]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f10:	091b      	lsrs	r3, r3, #4
 8005f12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f18:	4b82      	ldr	r3, [pc, #520]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f22:	4b80      	ldr	r3, [pc, #512]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f26:	08db      	lsrs	r3, r3, #3
 8005f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 80e1 	beq.w	8006108 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	f000 8083 	beq.w	8006054 <HAL_RCC_GetSysClockFreq+0x204>
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	f200 80a1 	bhi.w	8006098 <HAL_RCC_GetSysClockFreq+0x248>
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0x114>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d056      	beq.n	8006010 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f62:	e099      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f64:	4b6f      	ldr	r3, [pc, #444]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0320 	and.w	r3, r3, #32
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d02d      	beq.n	8005fcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f70:	4b6c      	ldr	r3, [pc, #432]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	08db      	lsrs	r3, r3, #3
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	4a6b      	ldr	r2, [pc, #428]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9a:	4b62      	ldr	r3, [pc, #392]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005fca:	e087      	b.n	80060dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006138 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fde:	4b51      	ldr	r3, [pc, #324]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ff2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800600e:	e065      	b.n	80060dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800613c <HAL_RCC_GetSysClockFreq+0x2ec>
 800601e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006022:	4b40      	ldr	r3, [pc, #256]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006032:	ed97 6a02 	vldr	s12, [r7, #8]
 8006036:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800603a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006052:	e043      	b.n	80060dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006140 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006066:	4b2f      	ldr	r3, [pc, #188]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006076:	ed97 6a02 	vldr	s12, [r7, #8]
 800607a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800607e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006096:	e021      	b.n	80060dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800613c <HAL_RCC_GetSysClockFreq+0x2ec>
 80060a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80060be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006134 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80060dc:	4b11      	ldr	r3, [pc, #68]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e0:	0a5b      	lsrs	r3, r3, #9
 80060e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060e6:	3301      	adds	r3, #1
 80060e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006100:	ee17 3a90 	vmov	r3, s15
 8006104:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006106:	e005      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	61bb      	str	r3, [r7, #24]
      break;
 800610c:	e002      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800610e:	4b07      	ldr	r3, [pc, #28]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006110:	61bb      	str	r3, [r7, #24]
      break;
 8006112:	bf00      	nop
  }

  return sysclockfreq;
 8006114:	69bb      	ldr	r3, [r7, #24]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3724      	adds	r7, #36	@ 0x24
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
 8006128:	03d09000 	.word	0x03d09000
 800612c:	003d0900 	.word	0x003d0900
 8006130:	007a1200 	.word	0x007a1200
 8006134:	46000000 	.word	0x46000000
 8006138:	4c742400 	.word	0x4c742400
 800613c:	4a742400 	.word	0x4a742400
 8006140:	4af42400 	.word	0x4af42400

08006144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800614a:	f7ff fe81 	bl	8005e50 <HAL_RCC_GetSysClockFreq>
 800614e:	4602      	mov	r2, r0
 8006150:	4b10      	ldr	r3, [pc, #64]	@ (8006194 <HAL_RCC_GetHCLKFreq+0x50>)
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	490f      	ldr	r1, [pc, #60]	@ (8006198 <HAL_RCC_GetHCLKFreq+0x54>)
 800615c:	5ccb      	ldrb	r3, [r1, r3]
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	fa22 f303 	lsr.w	r3, r2, r3
 8006166:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006168:	4b0a      	ldr	r3, [pc, #40]	@ (8006194 <HAL_RCC_GetHCLKFreq+0x50>)
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	4a09      	ldr	r2, [pc, #36]	@ (8006198 <HAL_RCC_GetHCLKFreq+0x54>)
 8006172:	5cd3      	ldrb	r3, [r2, r3]
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	fa22 f303 	lsr.w	r3, r2, r3
 800617e:	4a07      	ldr	r2, [pc, #28]	@ (800619c <HAL_RCC_GetHCLKFreq+0x58>)
 8006180:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006182:	4a07      	ldr	r2, [pc, #28]	@ (80061a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006188:	4b04      	ldr	r3, [pc, #16]	@ (800619c <HAL_RCC_GetHCLKFreq+0x58>)
 800618a:	681b      	ldr	r3, [r3, #0]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	58024400 	.word	0x58024400
 8006198:	0800cf68 	.word	0x0800cf68
 800619c:	24000004 	.word	0x24000004
 80061a0:	24000000 	.word	0x24000000

080061a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80061a8:	f7ff ffcc 	bl	8006144 <HAL_RCC_GetHCLKFreq>
 80061ac:	4602      	mov	r2, r0
 80061ae:	4b06      	ldr	r3, [pc, #24]	@ (80061c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	091b      	lsrs	r3, r3, #4
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	4904      	ldr	r1, [pc, #16]	@ (80061cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80061ba:	5ccb      	ldrb	r3, [r1, r3]
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	58024400 	.word	0x58024400
 80061cc:	0800cf68 	.word	0x0800cf68

080061d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80061d4:	f7ff ffb6 	bl	8006144 <HAL_RCC_GetHCLKFreq>
 80061d8:	4602      	mov	r2, r0
 80061da:	4b06      	ldr	r3, [pc, #24]	@ (80061f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	4904      	ldr	r1, [pc, #16]	@ (80061f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061e6:	5ccb      	ldrb	r3, [r1, r3]
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	58024400 	.word	0x58024400
 80061f8:	0800cf68 	.word	0x0800cf68

080061fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006200:	b0c8      	sub	sp, #288	@ 0x120
 8006202:	af00      	add	r7, sp, #0
 8006204:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006208:	2300      	movs	r3, #0
 800620a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800620e:	2300      	movs	r3, #0
 8006210:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006220:	2500      	movs	r5, #0
 8006222:	ea54 0305 	orrs.w	r3, r4, r5
 8006226:	d049      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800622c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800622e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006232:	d02f      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006234:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006238:	d828      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800623a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800623e:	d01a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006244:	d822      	bhi.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800624a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800624e:	d007      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006250:	e01c      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006252:	4ba7      	ldr	r3, [pc, #668]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006256:	4aa6      	ldr	r2, [pc, #664]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800625c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800625e:	e01a      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006264:	3308      	adds	r3, #8
 8006266:	2102      	movs	r1, #2
 8006268:	4618      	mov	r0, r3
 800626a:	f001 fc43 	bl	8007af4 <RCCEx_PLL2_Config>
 800626e:	4603      	mov	r3, r0
 8006270:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006274:	e00f      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800627a:	3328      	adds	r3, #40	@ 0x28
 800627c:	2102      	movs	r1, #2
 800627e:	4618      	mov	r0, r3
 8006280:	f001 fcea 	bl	8007c58 <RCCEx_PLL3_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800628a:	e004      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006292:	e000      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006296:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800629e:	4b94      	ldr	r3, [pc, #592]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ac:	4a90      	ldr	r2, [pc, #576]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ae:	430b      	orrs	r3, r1
 80062b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80062b2:	e003      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80062c8:	f04f 0900 	mov.w	r9, #0
 80062cc:	ea58 0309 	orrs.w	r3, r8, r9
 80062d0:	d047      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80062d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d82a      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062dc:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	080062f9 	.word	0x080062f9
 80062e8:	08006307 	.word	0x08006307
 80062ec:	0800631d 	.word	0x0800631d
 80062f0:	0800633b 	.word	0x0800633b
 80062f4:	0800633b 	.word	0x0800633b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f8:	4b7d      	ldr	r3, [pc, #500]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	4a7c      	ldr	r2, [pc, #496]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006304:	e01a      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800630a:	3308      	adds	r3, #8
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fbf0 	bl	8007af4 <RCCEx_PLL2_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800631a:	e00f      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800631c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006320:	3328      	adds	r3, #40	@ 0x28
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f001 fc97 	bl	8007c58 <RCCEx_PLL3_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006330:	e004      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006338:	e000      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800633a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006344:	4b6a      	ldr	r3, [pc, #424]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006348:	f023 0107 	bic.w	r1, r3, #7
 800634c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006352:	4a67      	ldr	r2, [pc, #412]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006354:	430b      	orrs	r3, r1
 8006356:	6513      	str	r3, [r2, #80]	@ 0x50
 8006358:	e003      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800635e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800636e:	f04f 0b00 	mov.w	fp, #0
 8006372:	ea5a 030b 	orrs.w	r3, sl, fp
 8006376:	d054      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800637c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006382:	d036      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006384:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006388:	d82f      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800638a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800638e:	d032      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006394:	d829      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006396:	2bc0      	cmp	r3, #192	@ 0xc0
 8006398:	d02f      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800639a:	2bc0      	cmp	r3, #192	@ 0xc0
 800639c:	d825      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800639e:	2b80      	cmp	r3, #128	@ 0x80
 80063a0:	d018      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80063a2:	2b80      	cmp	r3, #128	@ 0x80
 80063a4:	d821      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80063aa:	2b40      	cmp	r3, #64	@ 0x40
 80063ac:	d007      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80063ae:	e01c      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b0:	4b4f      	ldr	r3, [pc, #316]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b4:	4a4e      	ldr	r2, [pc, #312]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80063bc:	e01e      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063c2:	3308      	adds	r3, #8
 80063c4:	2100      	movs	r1, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 fb94 	bl	8007af4 <RCCEx_PLL2_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80063d2:	e013      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063d8:	3328      	adds	r3, #40	@ 0x28
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 fc3b 	bl	8007c58 <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80063e8:	e008      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80063f0:	e004      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80063f2:	bf00      	nop
 80063f4:	e002      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80063f6:	bf00      	nop
 80063f8:	e000      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80063fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006404:	4b3a      	ldr	r3, [pc, #232]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006408:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800640c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006412:	4a37      	ldr	r2, [pc, #220]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006414:	430b      	orrs	r3, r1
 8006416:	6513      	str	r3, [r2, #80]	@ 0x50
 8006418:	e003      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800641e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800642e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006432:	2300      	movs	r3, #0
 8006434:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006438:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800643c:	460b      	mov	r3, r1
 800643e:	4313      	orrs	r3, r2
 8006440:	d05c      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006448:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800644c:	d03b      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800644e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006452:	d834      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006458:	d037      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800645a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800645e:	d82e      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006460:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006464:	d033      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006466:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800646a:	d828      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800646c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006470:	d01a      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006476:	d822      	bhi.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800647c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006480:	d007      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006482:	e01c      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006484:	4b1a      	ldr	r3, [pc, #104]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	4a19      	ldr	r2, [pc, #100]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800648e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006490:	e01e      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006496:	3308      	adds	r3, #8
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f001 fb2a 	bl	8007af4 <RCCEx_PLL2_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80064a6:	e013      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ac:	3328      	adds	r3, #40	@ 0x28
 80064ae:	2100      	movs	r1, #0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 fbd1 	bl	8007c58 <RCCEx_PLL3_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80064bc:	e008      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064c4:	e004      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80064c6:	bf00      	nop
 80064c8:	e002      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80064ca:	bf00      	nop
 80064cc:	e000      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80064ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10d      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80064d8:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064dc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80064e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e6:	4a02      	ldr	r2, [pc, #8]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80064ec:	e006      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80064ee:	bf00      	nop
 80064f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80064fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006508:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800650c:	2300      	movs	r3, #0
 800650e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006512:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006516:	460b      	mov	r3, r1
 8006518:	4313      	orrs	r3, r2
 800651a:	d03a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800651c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006522:	2b30      	cmp	r3, #48	@ 0x30
 8006524:	d01f      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006526:	2b30      	cmp	r3, #48	@ 0x30
 8006528:	d819      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800652a:	2b20      	cmp	r3, #32
 800652c:	d00c      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800652e:	2b20      	cmp	r3, #32
 8006530:	d815      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d019      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006536:	2b10      	cmp	r3, #16
 8006538:	d111      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800653a:	4bae      	ldr	r3, [pc, #696]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	4aad      	ldr	r2, [pc, #692]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006546:	e011      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800654c:	3308      	adds	r3, #8
 800654e:	2102      	movs	r1, #2
 8006550:	4618      	mov	r0, r3
 8006552:	f001 facf 	bl	8007af4 <RCCEx_PLL2_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800655c:	e006      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006564:	e002      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800656a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006574:	4b9f      	ldr	r3, [pc, #636]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006578:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800657c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006582:	4a9c      	ldr	r2, [pc, #624]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006584:	430b      	orrs	r3, r1
 8006586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006588:	e003      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800658e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800659e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065a2:	2300      	movs	r3, #0
 80065a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d051      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80065b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065bc:	d035      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80065be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c2:	d82e      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80065c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065c8:	d031      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80065ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065ce:	d828      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d4:	d01a      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80065d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065da:	d822      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80065e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065e4:	d007      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80065e6:	e01c      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e8:	4b82      	ldr	r3, [pc, #520]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ec:	4a81      	ldr	r2, [pc, #516]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065f4:	e01c      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065fa:	3308      	adds	r3, #8
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 fa78 	bl	8007af4 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800660a:	e011      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800660c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006610:	3328      	adds	r3, #40	@ 0x28
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f001 fb1f 	bl	8007c58 <RCCEx_PLL3_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006620:	e006      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006628:	e002      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800662e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006630:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006638:	4b6e      	ldr	r3, [pc, #440]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800663a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800663c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006646:	4a6b      	ldr	r2, [pc, #428]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006648:	430b      	orrs	r3, r1
 800664a:	6513      	str	r3, [r2, #80]	@ 0x50
 800664c:	e003      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006652:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006662:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006666:	2300      	movs	r3, #0
 8006668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800666c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006670:	460b      	mov	r3, r1
 8006672:	4313      	orrs	r3, r2
 8006674:	d053      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800667a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800667c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006680:	d033      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006682:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006686:	d82c      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006688:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800668c:	d02f      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800668e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006692:	d826      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006694:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006698:	d02b      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800669a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800669e:	d820      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066a4:	d012      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80066a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066aa:	d81a      	bhi.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d022      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80066b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b4:	d115      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ba:	3308      	adds	r3, #8
 80066bc:	2101      	movs	r1, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 fa18 	bl	8007af4 <RCCEx_PLL2_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066ca:	e015      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066d0:	3328      	adds	r3, #40	@ 0x28
 80066d2:	2101      	movs	r1, #1
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 fabf 	bl	8007c58 <RCCEx_PLL3_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066e0:	e00a      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80066e8:	e006      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80066ea:	bf00      	nop
 80066ec:	e004      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80066ee:	bf00      	nop
 80066f0:	e002      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80066f2:	bf00      	nop
 80066f4:	e000      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80066f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006700:	4b3c      	ldr	r3, [pc, #240]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006704:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800670c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800670e:	4a39      	ldr	r2, [pc, #228]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006710:	430b      	orrs	r3, r1
 8006712:	6513      	str	r3, [r2, #80]	@ 0x50
 8006714:	e003      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800671a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800671e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800672a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800672e:	2300      	movs	r3, #0
 8006730:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006734:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d060      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800673e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006742:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006746:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800674a:	d039      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800674c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006750:	d832      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006756:	d035      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800675c:	d82c      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006762:	d031      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006768:	d826      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800676a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800676e:	d02d      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006770:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006774:	d820      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800677a:	d012      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800677c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006780:	d81a      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d024      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800678a:	d115      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800678c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006790:	3308      	adds	r3, #8
 8006792:	2101      	movs	r1, #1
 8006794:	4618      	mov	r0, r3
 8006796:	f001 f9ad 	bl	8007af4 <RCCEx_PLL2_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067a0:	e017      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067a6:	3328      	adds	r3, #40	@ 0x28
 80067a8:	2101      	movs	r1, #1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fa54 	bl	8007c58 <RCCEx_PLL3_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067b6:	e00c      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067be:	e008      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067c0:	bf00      	nop
 80067c2:	e006      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067c4:	bf00      	nop
 80067c6:	e004      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067c8:	bf00      	nop
 80067ca:	e002      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067cc:	bf00      	nop
 80067ce:	e000      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10e      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067da:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067ea:	4a02      	ldr	r2, [pc, #8]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067ec:	430b      	orrs	r3, r1
 80067ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f0:	e006      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80067f2:	bf00      	nop
 80067f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800680c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006810:	2300      	movs	r3, #0
 8006812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006816:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d037      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800682a:	d00e      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800682c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006830:	d816      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d018      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800683a:	d111      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800683c:	4bc4      	ldr	r3, [pc, #784]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800683e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006840:	4ac3      	ldr	r2, [pc, #780]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006848:	e00f      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800684a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800684e:	3308      	adds	r3, #8
 8006850:	2101      	movs	r1, #1
 8006852:	4618      	mov	r0, r3
 8006854:	f001 f94e 	bl	8007af4 <RCCEx_PLL2_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800685e:	e004      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006866:	e000      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006872:	4bb7      	ldr	r3, [pc, #732]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006876:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800687a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800687e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006880:	4ab3      	ldr	r2, [pc, #716]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006882:	430b      	orrs	r3, r1
 8006884:	6513      	str	r3, [r2, #80]	@ 0x50
 8006886:	e003      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800688c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800689c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068a0:	2300      	movs	r3, #0
 80068a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80068a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4313      	orrs	r3, r2
 80068ae:	d039      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80068b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d81c      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80068ba:	a201      	add	r2, pc, #4	@ (adr r2, 80068c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80068bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c0:	080068fd 	.word	0x080068fd
 80068c4:	080068d1 	.word	0x080068d1
 80068c8:	080068df 	.word	0x080068df
 80068cc:	080068fd 	.word	0x080068fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d0:	4b9f      	ldr	r3, [pc, #636]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d4:	4a9e      	ldr	r2, [pc, #632]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068dc:	e00f      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068e2:	3308      	adds	r3, #8
 80068e4:	2102      	movs	r1, #2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 f904 	bl	8007af4 <RCCEx_PLL2_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068f2:	e004      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80068fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10a      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006906:	4b92      	ldr	r3, [pc, #584]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800690a:	f023 0103 	bic.w	r1, r3, #3
 800690e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006914:	4a8e      	ldr	r2, [pc, #568]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006916:	430b      	orrs	r3, r1
 8006918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800691a:	e003      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006920:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006930:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006934:	2300      	movs	r3, #0
 8006936:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800693a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800693e:	460b      	mov	r3, r1
 8006940:	4313      	orrs	r3, r2
 8006942:	f000 8099 	beq.w	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006946:	4b83      	ldr	r3, [pc, #524]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a82      	ldr	r2, [pc, #520]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800694c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006952:	f7fb f89b 	bl	8001a8c <HAL_GetTick>
 8006956:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800695a:	e00b      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695c:	f7fb f896 	bl	8001a8c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b64      	cmp	r3, #100	@ 0x64
 800696a:	d903      	bls.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006972:	e005      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006974:	4b77      	ldr	r3, [pc, #476]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0ed      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006980:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006984:	2b00      	cmp	r3, #0
 8006986:	d173      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006988:	4b71      	ldr	r3, [pc, #452]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800698a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800698c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006994:	4053      	eors	r3, r2
 8006996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800699a:	2b00      	cmp	r3, #0
 800699c:	d015      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800699e:	4b6c      	ldr	r3, [pc, #432]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069aa:	4b69      	ldr	r3, [pc, #420]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ae:	4a68      	ldr	r2, [pc, #416]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069b6:	4b66      	ldr	r3, [pc, #408]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ba:	4a65      	ldr	r2, [pc, #404]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069c2:	4a63      	ldr	r2, [pc, #396]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069d6:	d118      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d8:	f7fb f858 	bl	8001a8c <HAL_GetTick>
 80069dc:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069e0:	e00d      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e2:	f7fb f853 	bl	8001a8c <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80069ec:	1ad2      	subs	r2, r2, r3
 80069ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d903      	bls.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80069fc:	e005      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069fe:	4b54      	ldr	r3, [pc, #336]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0eb      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006a0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d129      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a22:	d10e      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006a24:	4b4a      	ldr	r3, [pc, #296]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a34:	091a      	lsrs	r2, r3, #4
 8006a36:	4b48      	ldr	r3, [pc, #288]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	4a45      	ldr	r2, [pc, #276]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6113      	str	r3, [r2, #16]
 8006a40:	e005      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006a42:	4b43      	ldr	r3, [pc, #268]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	4a42      	ldr	r2, [pc, #264]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a4c:	6113      	str	r3, [r2, #16]
 8006a4e:	4b40      	ldr	r3, [pc, #256]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a50:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a5e:	4a3c      	ldr	r2, [pc, #240]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a64:	e008      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006a6e:	e003      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	f002 0301 	and.w	r3, r2, #1
 8006a84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f000 8090 	beq.w	8006bba <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa2:	2b28      	cmp	r3, #40	@ 0x28
 8006aa4:	d870      	bhi.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006b91 	.word	0x08006b91
 8006ab0:	08006b89 	.word	0x08006b89
 8006ab4:	08006b89 	.word	0x08006b89
 8006ab8:	08006b89 	.word	0x08006b89
 8006abc:	08006b89 	.word	0x08006b89
 8006ac0:	08006b89 	.word	0x08006b89
 8006ac4:	08006b89 	.word	0x08006b89
 8006ac8:	08006b89 	.word	0x08006b89
 8006acc:	08006b5d 	.word	0x08006b5d
 8006ad0:	08006b89 	.word	0x08006b89
 8006ad4:	08006b89 	.word	0x08006b89
 8006ad8:	08006b89 	.word	0x08006b89
 8006adc:	08006b89 	.word	0x08006b89
 8006ae0:	08006b89 	.word	0x08006b89
 8006ae4:	08006b89 	.word	0x08006b89
 8006ae8:	08006b89 	.word	0x08006b89
 8006aec:	08006b73 	.word	0x08006b73
 8006af0:	08006b89 	.word	0x08006b89
 8006af4:	08006b89 	.word	0x08006b89
 8006af8:	08006b89 	.word	0x08006b89
 8006afc:	08006b89 	.word	0x08006b89
 8006b00:	08006b89 	.word	0x08006b89
 8006b04:	08006b89 	.word	0x08006b89
 8006b08:	08006b89 	.word	0x08006b89
 8006b0c:	08006b91 	.word	0x08006b91
 8006b10:	08006b89 	.word	0x08006b89
 8006b14:	08006b89 	.word	0x08006b89
 8006b18:	08006b89 	.word	0x08006b89
 8006b1c:	08006b89 	.word	0x08006b89
 8006b20:	08006b89 	.word	0x08006b89
 8006b24:	08006b89 	.word	0x08006b89
 8006b28:	08006b89 	.word	0x08006b89
 8006b2c:	08006b91 	.word	0x08006b91
 8006b30:	08006b89 	.word	0x08006b89
 8006b34:	08006b89 	.word	0x08006b89
 8006b38:	08006b89 	.word	0x08006b89
 8006b3c:	08006b89 	.word	0x08006b89
 8006b40:	08006b89 	.word	0x08006b89
 8006b44:	08006b89 	.word	0x08006b89
 8006b48:	08006b89 	.word	0x08006b89
 8006b4c:	08006b91 	.word	0x08006b91
 8006b50:	58024400 	.word	0x58024400
 8006b54:	58024800 	.word	0x58024800
 8006b58:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b60:	3308      	adds	r3, #8
 8006b62:	2101      	movs	r1, #1
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 ffc5 	bl	8007af4 <RCCEx_PLL2_Config>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b70:	e00f      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b76:	3328      	adds	r3, #40	@ 0x28
 8006b78:	2101      	movs	r1, #1
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 f86c 	bl	8007c58 <RCCEx_PLL3_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b86:	e004      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b8e:	e000      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b9a:	4bc0      	ldr	r3, [pc, #768]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006baa:	4abc      	ldr	r2, [pc, #752]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f002 0302 	and.w	r3, r2, #2
 8006bc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006bd0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	d043      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	d824      	bhi.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006be6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bec <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c39 	.word	0x08006c39
 8006bf0:	08006c05 	.word	0x08006c05
 8006bf4:	08006c1b 	.word	0x08006c1b
 8006bf8:	08006c39 	.word	0x08006c39
 8006bfc:	08006c39 	.word	0x08006c39
 8006c00:	08006c39 	.word	0x08006c39
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c08:	3308      	adds	r3, #8
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 ff71 	bl	8007af4 <RCCEx_PLL2_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c18:	e00f      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c1e:	3328      	adds	r3, #40	@ 0x28
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 f818 	bl	8007c58 <RCCEx_PLL3_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c2e:	e004      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c36:	e000      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10b      	bne.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c42:	4b96      	ldr	r3, [pc, #600]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c46:	f023 0107 	bic.w	r1, r3, #7
 8006c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c52:	4a92      	ldr	r2, [pc, #584]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c58:	e003      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f002 0304 	and.w	r3, r2, #4
 8006c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c72:	2300      	movs	r3, #0
 8006c74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c78:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	d043      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c8a:	2b05      	cmp	r3, #5
 8006c8c:	d824      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c94 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006ce1 	.word	0x08006ce1
 8006c98:	08006cad 	.word	0x08006cad
 8006c9c:	08006cc3 	.word	0x08006cc3
 8006ca0:	08006ce1 	.word	0x08006ce1
 8006ca4:	08006ce1 	.word	0x08006ce1
 8006ca8:	08006ce1 	.word	0x08006ce1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 ff1d 	bl	8007af4 <RCCEx_PLL2_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cc0:	e00f      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cc6:	3328      	adds	r3, #40	@ 0x28
 8006cc8:	2101      	movs	r1, #1
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 ffc4 	bl	8007c58 <RCCEx_PLL3_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cd6:	e004      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006cde:	e000      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ce2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10b      	bne.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cea:	4b6c      	ldr	r3, [pc, #432]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	f023 0107 	bic.w	r1, r3, #7
 8006cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cfa:	4a68      	ldr	r2, [pc, #416]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d00:	e003      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f002 0320 	and.w	r3, r2, #32
 8006d16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d24:	460b      	mov	r3, r1
 8006d26:	4313      	orrs	r3, r2
 8006d28:	d055      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d36:	d033      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d3c:	d82c      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d42:	d02f      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d48:	d826      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d4e:	d02b      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006d50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d54:	d820      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d5a:	d012      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d60:	d81a      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d022      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006d66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d6a:	d115      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d70:	3308      	adds	r3, #8
 8006d72:	2100      	movs	r1, #0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 febd 	bl	8007af4 <RCCEx_PLL2_Config>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d80:	e015      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d86:	3328      	adds	r3, #40	@ 0x28
 8006d88:	2102      	movs	r1, #2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 ff64 	bl	8007c58 <RCCEx_PLL3_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d96:	e00a      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d9e:	e006      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006da0:	bf00      	nop
 8006da2:	e004      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006da4:	bf00      	nop
 8006da6:	e002      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006da8:	bf00      	nop
 8006daa:	e000      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10b      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006db6:	4b39      	ldr	r3, [pc, #228]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dc6:	4a35      	ldr	r2, [pc, #212]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dcc:	e003      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006de6:	2300      	movs	r3, #0
 8006de8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006dec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4313      	orrs	r3, r2
 8006df4:	d058      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006dfe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e02:	d033      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006e04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e08:	d82c      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e0e:	d02f      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e14:	d826      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e1a:	d02b      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006e1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e20:	d820      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e26:	d012      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e2c:	d81a      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d022      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e36:	d115      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	2100      	movs	r1, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fe57 	bl	8007af4 <RCCEx_PLL2_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e4c:	e015      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e52:	3328      	adds	r3, #40	@ 0x28
 8006e54:	2102      	movs	r1, #2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fefe 	bl	8007c58 <RCCEx_PLL3_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e62:	e00a      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e6a:	e006      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e6c:	bf00      	nop
 8006e6e:	e004      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e70:	bf00      	nop
 8006e72:	e002      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e74:	bf00      	nop
 8006e76:	e000      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10e      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e82:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e92:	4a02      	ldr	r2, [pc, #8]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e98:	e006      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006e9a:	bf00      	nop
 8006e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ea4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006eb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ebe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	d055      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ecc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006ed0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ed4:	d033      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006ed6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006eda:	d82c      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee0:	d02f      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee6:	d826      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006ee8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006eec:	d02b      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006eee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ef2:	d820      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006ef4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ef8:	d012      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006efa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006efe:	d81a      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d022      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f08:	d115      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f0e:	3308      	adds	r3, #8
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fdee 	bl	8007af4 <RCCEx_PLL2_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f1e:	e015      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f24:	3328      	adds	r3, #40	@ 0x28
 8006f26:	2102      	movs	r1, #2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fe95 	bl	8007c58 <RCCEx_PLL3_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f34:	e00a      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f3c:	e006      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f3e:	bf00      	nop
 8006f40:	e004      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f42:	bf00      	nop
 8006f44:	e002      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f46:	bf00      	nop
 8006f48:	e000      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f54:	4ba1      	ldr	r3, [pc, #644]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f64:	4a9d      	ldr	r2, [pc, #628]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f66:	430b      	orrs	r3, r1
 8006f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f6a:	e003      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	f002 0308 	and.w	r3, r2, #8
 8006f80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f84:	2300      	movs	r3, #0
 8006f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4313      	orrs	r3, r2
 8006f92:	d01e      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa0:	d10c      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fa6:	3328      	adds	r3, #40	@ 0x28
 8006fa8:	2102      	movs	r1, #2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fe54 	bl	8007c58 <RCCEx_PLL3_Config>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fbc:	4b87      	ldr	r3, [pc, #540]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fcc:	4a83      	ldr	r2, [pc, #524]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f002 0310 	and.w	r3, r2, #16
 8006fde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006fe8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006fec:	460b      	mov	r3, r1
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	d01e      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ff6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ffe:	d10c      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007004:	3328      	adds	r3, #40	@ 0x28
 8007006:	2102      	movs	r1, #2
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fe25 	bl	8007c58 <RCCEx_PLL3_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800701a:	4b70      	ldr	r3, [pc, #448]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800701c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007026:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800702a:	4a6c      	ldr	r2, [pc, #432]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800702c:	430b      	orrs	r3, r1
 800702e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800703c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007040:	2300      	movs	r3, #0
 8007042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007046:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800704a:	460b      	mov	r3, r1
 800704c:	4313      	orrs	r3, r2
 800704e:	d03e      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007054:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800705c:	d022      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800705e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007062:	d81b      	bhi.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800706c:	d00b      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800706e:	e015      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007074:	3308      	adds	r3, #8
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fd3b 	bl	8007af4 <RCCEx_PLL2_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007084:	e00f      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800708a:	3328      	adds	r3, #40	@ 0x28
 800708c:	2102      	movs	r1, #2
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fde2 	bl	8007c58 <RCCEx_PLL3_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800709a:	e004      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80070a2:	e000      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80070a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10b      	bne.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070ae:	4b4b      	ldr	r3, [pc, #300]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80070b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80070b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070be:	4a47      	ldr	r2, [pc, #284]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80070c0:	430b      	orrs	r3, r1
 80070c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80070c4:	e003      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80070da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070dc:	2300      	movs	r3, #0
 80070de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80070e4:	460b      	mov	r3, r1
 80070e6:	4313      	orrs	r3, r2
 80070e8:	d03b      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80070ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070f6:	d01f      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80070f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070fc:	d818      	bhi.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80070fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007102:	d003      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007104:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007108:	d007      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800710a:	e011      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800710c:	4b33      	ldr	r3, [pc, #204]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800710e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007110:	4a32      	ldr	r2, [pc, #200]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007118:	e00f      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800711a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800711e:	3328      	adds	r3, #40	@ 0x28
 8007120:	2101      	movs	r1, #1
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fd98 	bl	8007c58 <RCCEx_PLL3_Config>
 8007128:	4603      	mov	r3, r0
 800712a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800712e:	e004      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007136:	e000      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800713a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10b      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007142:	4b26      	ldr	r3, [pc, #152]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007146:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800714a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007152:	4a22      	ldr	r2, [pc, #136]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007154:	430b      	orrs	r3, r1
 8007156:	6553      	str	r3, [r2, #84]	@ 0x54
 8007158:	e003      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800715e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800716e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007170:	2300      	movs	r3, #0
 8007172:	677b      	str	r3, [r7, #116]	@ 0x74
 8007174:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007178:	460b      	mov	r3, r1
 800717a:	4313      	orrs	r3, r2
 800717c:	d034      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800717e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800718c:	d007      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800718e:	e011      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007190:	4b12      	ldr	r3, [pc, #72]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007194:	4a11      	ldr	r2, [pc, #68]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800719a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800719c:	e00e      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800719e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071a2:	3308      	adds	r3, #8
 80071a4:	2102      	movs	r1, #2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fca4 	bl	8007af4 <RCCEx_PLL2_Config>
 80071ac:	4603      	mov	r3, r0
 80071ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071b2:	e003      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10d      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071c4:	4b05      	ldr	r3, [pc, #20]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d2:	4a02      	ldr	r2, [pc, #8]	@ (80071dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071d4:	430b      	orrs	r3, r1
 80071d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071d8:	e006      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80071da:	bf00      	nop
 80071dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80071f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071f6:	2300      	movs	r3, #0
 80071f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80071fe:	460b      	mov	r3, r1
 8007200:	4313      	orrs	r3, r2
 8007202:	d00c      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007208:	3328      	adds	r3, #40	@ 0x28
 800720a:	2102      	movs	r1, #2
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fd23 	bl	8007c58 <RCCEx_PLL3_Config>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800721e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800722a:	663b      	str	r3, [r7, #96]	@ 0x60
 800722c:	2300      	movs	r3, #0
 800722e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007230:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007234:	460b      	mov	r3, r1
 8007236:	4313      	orrs	r3, r2
 8007238:	d038      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800723a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007246:	d018      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800724c:	d811      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800724e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007252:	d014      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007258:	d80b      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d011      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800725e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007262:	d106      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007264:	4bc3      	ldr	r3, [pc, #780]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007268:	4ac2      	ldr	r2, [pc, #776]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800726a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800726e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007270:	e008      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007278:	e004      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800727a:	bf00      	nop
 800727c:	e002      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800727e:	bf00      	nop
 8007280:	e000      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007284:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10b      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800728c:	4bb9      	ldr	r3, [pc, #740]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800728e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007290:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800729c:	4ab5      	ldr	r2, [pc, #724]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800729e:	430b      	orrs	r3, r1
 80072a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80072a2:	e003      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80072b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072ba:	2300      	movs	r3, #0
 80072bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80072c2:	460b      	mov	r3, r1
 80072c4:	4313      	orrs	r3, r2
 80072c6:	d009      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072c8:	4baa      	ldr	r3, [pc, #680]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072d6:	4aa7      	ldr	r2, [pc, #668]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072d8:	430b      	orrs	r3, r1
 80072da:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80072e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80072ea:	2300      	movs	r3, #0
 80072ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80072f2:	460b      	mov	r3, r1
 80072f4:	4313      	orrs	r3, r2
 80072f6:	d009      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072f8:	4b9e      	ldr	r3, [pc, #632]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072fc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007306:	4a9b      	ldr	r2, [pc, #620]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007308:	430b      	orrs	r3, r1
 800730a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800730c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800731a:	2300      	movs	r3, #0
 800731c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800731e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007322:	460b      	mov	r3, r1
 8007324:	4313      	orrs	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007328:	4b92      	ldr	r3, [pc, #584]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800732a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8007330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007336:	4a8f      	ldr	r2, [pc, #572]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007338:	430b      	orrs	r3, r1
 800733a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800733c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007348:	643b      	str	r3, [r7, #64]	@ 0x40
 800734a:	2300      	movs	r3, #0
 800734c:	647b      	str	r3, [r7, #68]	@ 0x44
 800734e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007352:	460b      	mov	r3, r1
 8007354:	4313      	orrs	r3, r2
 8007356:	d00e      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007358:	4b86      	ldr	r3, [pc, #536]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	4a85      	ldr	r2, [pc, #532]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800735e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007362:	6113      	str	r3, [r2, #16]
 8007364:	4b83      	ldr	r3, [pc, #524]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007366:	6919      	ldr	r1, [r3, #16]
 8007368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800736c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007370:	4a80      	ldr	r2, [pc, #512]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007372:	430b      	orrs	r3, r1
 8007374:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007382:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007384:	2300      	movs	r3, #0
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007388:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800738c:	460b      	mov	r3, r1
 800738e:	4313      	orrs	r3, r2
 8007390:	d009      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007392:	4b78      	ldr	r3, [pc, #480]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007396:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800739a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800739e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a0:	4a74      	ldr	r2, [pc, #464]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073a2:	430b      	orrs	r3, r1
 80073a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80073b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b4:	2300      	movs	r3, #0
 80073b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80073bc:	460b      	mov	r3, r1
 80073be:	4313      	orrs	r3, r2
 80073c0:	d00a      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073c2:	4b6c      	ldr	r3, [pc, #432]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80073ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073d2:	4a68      	ldr	r2, [pc, #416]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073d4:	430b      	orrs	r3, r1
 80073d6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80073d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	2100      	movs	r1, #0
 80073e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80073ee:	460b      	mov	r3, r1
 80073f0:	4313      	orrs	r3, r2
 80073f2:	d011      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073f8:	3308      	adds	r3, #8
 80073fa:	2100      	movs	r1, #0
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 fb79 	bl	8007af4 <RCCEx_PLL2_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007408:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007410:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007414:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	2100      	movs	r1, #0
 8007422:	6239      	str	r1, [r7, #32]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
 800742a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800742e:	460b      	mov	r3, r1
 8007430:	4313      	orrs	r3, r2
 8007432:	d011      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007438:	3308      	adds	r3, #8
 800743a:	2101      	movs	r1, #1
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fb59 	bl	8007af4 <RCCEx_PLL2_Config>
 8007442:	4603      	mov	r3, r0
 8007444:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007448:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007450:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007454:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	2100      	movs	r1, #0
 8007462:	61b9      	str	r1, [r7, #24]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800746e:	460b      	mov	r3, r1
 8007470:	4313      	orrs	r3, r2
 8007472:	d011      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007478:	3308      	adds	r3, #8
 800747a:	2102      	movs	r1, #2
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fb39 	bl	8007af4 <RCCEx_PLL2_Config>
 8007482:	4603      	mov	r3, r0
 8007484:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007488:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007490:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007494:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	2100      	movs	r1, #0
 80074a2:	6139      	str	r1, [r7, #16]
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80074ae:	460b      	mov	r3, r1
 80074b0:	4313      	orrs	r3, r2
 80074b2:	d011      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074b8:	3328      	adds	r3, #40	@ 0x28
 80074ba:	2100      	movs	r1, #0
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fbcb 	bl	8007c58 <RCCEx_PLL3_Config>
 80074c2:	4603      	mov	r3, r0
 80074c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80074c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80074d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	2100      	movs	r1, #0
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	f003 0310 	and.w	r3, r3, #16
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80074ee:	460b      	mov	r3, r1
 80074f0:	4313      	orrs	r3, r2
 80074f2:	d011      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074f8:	3328      	adds	r3, #40	@ 0x28
 80074fa:	2101      	movs	r1, #1
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fbab 	bl	8007c58 <RCCEx_PLL3_Config>
 8007502:	4603      	mov	r3, r0
 8007504:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007508:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007510:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007514:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	2100      	movs	r1, #0
 8007522:	6039      	str	r1, [r7, #0]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	607b      	str	r3, [r7, #4]
 800752a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800752e:	460b      	mov	r3, r1
 8007530:	4313      	orrs	r3, r2
 8007532:	d011      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007538:	3328      	adds	r3, #40	@ 0x28
 800753a:	2102      	movs	r1, #2
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fb8b 	bl	8007c58 <RCCEx_PLL3_Config>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007548:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007550:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007554:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007558:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	e000      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
}
 8007566:	4618      	mov	r0, r3
 8007568:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800756c:	46bd      	mov	sp, r7
 800756e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007572:	bf00      	nop
 8007574:	58024400 	.word	0x58024400

08007578 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800757c:	f7fe fde2 	bl	8006144 <HAL_RCC_GetHCLKFreq>
 8007580:	4602      	mov	r2, r0
 8007582:	4b06      	ldr	r3, [pc, #24]	@ (800759c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	091b      	lsrs	r3, r3, #4
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	4904      	ldr	r1, [pc, #16]	@ (80075a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800758e:	5ccb      	ldrb	r3, [r1, r3]
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007598:	4618      	mov	r0, r3
 800759a:	bd80      	pop	{r7, pc}
 800759c:	58024400 	.word	0x58024400
 80075a0:	0800cf68 	.word	0x0800cf68

080075a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b089      	sub	sp, #36	@ 0x24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075ac:	4ba1      	ldr	r3, [pc, #644]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80075b6:	4b9f      	ldr	r3, [pc, #636]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ba:	0b1b      	lsrs	r3, r3, #12
 80075bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075c2:	4b9c      	ldr	r3, [pc, #624]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c6:	091b      	lsrs	r3, r3, #4
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80075ce:	4b99      	ldr	r3, [pc, #612]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d2:	08db      	lsrs	r3, r3, #3
 80075d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	fb02 f303 	mul.w	r3, r2, r3
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 8111 	beq.w	8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	f000 8083 	beq.w	8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	f200 80a1 	bhi.w	8007744 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d056      	beq.n	80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800760e:	e099      	b.n	8007744 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007610:	4b88      	ldr	r3, [pc, #544]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d02d      	beq.n	8007678 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800761c:	4b85      	ldr	r3, [pc, #532]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	08db      	lsrs	r3, r3, #3
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	4a84      	ldr	r2, [pc, #528]	@ (8007838 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
 800762c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	ee07 3a90 	vmov	s15, r3
 8007634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007646:	4b7b      	ldr	r3, [pc, #492]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007656:	ed97 6a03 	vldr	s12, [r7, #12]
 800765a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800765e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800766a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007672:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007676:	e087      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007682:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768a:	4b6a      	ldr	r3, [pc, #424]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800768c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769a:	ed97 6a03 	vldr	s12, [r7, #12]
 800769e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ba:	e065      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ce:	4b59      	ldr	r3, [pc, #356]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076de:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fe:	e043      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800770e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007712:	4b48      	ldr	r3, [pc, #288]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007722:	ed97 6a03 	vldr	s12, [r7, #12]
 8007726:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800772a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007742:	e021      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007756:	4b37      	ldr	r3, [pc, #220]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007766:	ed97 6a03 	vldr	s12, [r7, #12]
 800776a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800776e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800777a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007786:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007788:	4b2a      	ldr	r3, [pc, #168]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800778a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778c:	0a5b      	lsrs	r3, r3, #9
 800778e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800779e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ae:	ee17 2a90 	vmov	r2, s15
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80077b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ba:	0c1b      	lsrs	r3, r3, #16
 80077bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077c0:	ee07 3a90 	vmov	s15, r3
 80077c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077dc:	ee17 2a90 	vmov	r2, s15
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80077e4:	4b13      	ldr	r3, [pc, #76]	@ (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e8:	0e1b      	lsrs	r3, r3, #24
 80077ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800780a:	ee17 2a90 	vmov	r2, s15
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007812:	e008      	b.n	8007826 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	609a      	str	r2, [r3, #8]
}
 8007826:	bf00      	nop
 8007828:	3724      	adds	r7, #36	@ 0x24
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	58024400 	.word	0x58024400
 8007838:	03d09000 	.word	0x03d09000
 800783c:	46000000 	.word	0x46000000
 8007840:	4c742400 	.word	0x4c742400
 8007844:	4a742400 	.word	0x4a742400
 8007848:	4af42400 	.word	0x4af42400

0800784c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800784c:	b480      	push	{r7}
 800784e:	b089      	sub	sp, #36	@ 0x24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007854:	4ba1      	ldr	r3, [pc, #644]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800785e:	4b9f      	ldr	r3, [pc, #636]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007862:	0d1b      	lsrs	r3, r3, #20
 8007864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007868:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800786a:	4b9c      	ldr	r3, [pc, #624]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007876:	4b99      	ldr	r3, [pc, #612]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800787a:	08db      	lsrs	r3, r3, #3
 800787c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	fb02 f303 	mul.w	r3, r2, r3
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8111 	beq.w	8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b02      	cmp	r3, #2
 800789e:	f000 8083 	beq.w	80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	f200 80a1 	bhi.w	80079ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d056      	beq.n	8007964 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80078b6:	e099      	b.n	80079ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078b8:	4b88      	ldr	r3, [pc, #544]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d02d      	beq.n	8007920 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078c4:	4b85      	ldr	r3, [pc, #532]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	08db      	lsrs	r3, r3, #3
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	4a84      	ldr	r2, [pc, #528]	@ (8007ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80078d0:	fa22 f303 	lsr.w	r3, r2, r3
 80078d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	ee07 3a90 	vmov	s15, r3
 80078dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ee:	4b7b      	ldr	r3, [pc, #492]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007902:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800791e:	e087      	b.n	8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800792e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007932:	4b6a      	ldr	r3, [pc, #424]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007942:	ed97 6a03 	vldr	s12, [r7, #12]
 8007946:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800794a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007962:	e065      	b.n	8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007aec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007976:	4b59      	ldr	r3, [pc, #356]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007986:	ed97 6a03 	vldr	s12, [r7, #12]
 800798a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800798e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800799a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a6:	e043      	b.n	8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007af0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80079b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ba:	4b48      	ldr	r3, [pc, #288]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ea:	e021      	b.n	8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007aec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079fe:	4b37      	ldr	r3, [pc, #220]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a30:	4b2a      	ldr	r3, [pc, #168]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a34:	0a5b      	lsrs	r3, r3, #9
 8007a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a3a:	ee07 3a90 	vmov	s15, r3
 8007a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a56:	ee17 2a90 	vmov	r2, s15
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a62:	0c1b      	lsrs	r3, r3, #16
 8007a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a84:	ee17 2a90 	vmov	r2, s15
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a8c:	4b13      	ldr	r3, [pc, #76]	@ (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a90:	0e1b      	lsrs	r3, r3, #24
 8007a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab2:	ee17 2a90 	vmov	r2, s15
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007aba:	e008      	b.n	8007ace <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	609a      	str	r2, [r3, #8]
}
 8007ace:	bf00      	nop
 8007ad0:	3724      	adds	r7, #36	@ 0x24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	58024400 	.word	0x58024400
 8007ae0:	03d09000 	.word	0x03d09000
 8007ae4:	46000000 	.word	0x46000000
 8007ae8:	4c742400 	.word	0x4c742400
 8007aec:	4a742400 	.word	0x4a742400
 8007af0:	4af42400 	.word	0x4af42400

08007af4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b02:	4b53      	ldr	r3, [pc, #332]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b06:	f003 0303 	and.w	r3, r3, #3
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d101      	bne.n	8007b12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e099      	b.n	8007c46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b12:	4b4f      	ldr	r3, [pc, #316]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a4e      	ldr	r2, [pc, #312]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007b18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b1e:	f7f9 ffb5 	bl	8001a8c <HAL_GetTick>
 8007b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b24:	e008      	b.n	8007b38 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b26:	f7f9 ffb1 	bl	8001a8c <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d901      	bls.n	8007b38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e086      	b.n	8007c46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b38:	4b45      	ldr	r3, [pc, #276]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1f0      	bne.n	8007b26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b44:	4b42      	ldr	r3, [pc, #264]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b48:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	031b      	lsls	r3, r3, #12
 8007b52:	493f      	ldr	r1, [pc, #252]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	025b      	lsls	r3, r3, #9
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	061b      	lsls	r3, r3, #24
 8007b84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b88:	4931      	ldr	r1, [pc, #196]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b8e:	4b30      	ldr	r3, [pc, #192]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	492d      	ldr	r1, [pc, #180]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba4:	f023 0220 	bic.w	r2, r3, #32
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	4928      	ldr	r1, [pc, #160]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bb2:	4b27      	ldr	r3, [pc, #156]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb6:	4a26      	ldr	r2, [pc, #152]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007bb8:	f023 0310 	bic.w	r3, r3, #16
 8007bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bbe:	4b24      	ldr	r3, [pc, #144]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007bc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bc2:	4b24      	ldr	r3, [pc, #144]	@ (8007c54 <RCCEx_PLL2_Config+0x160>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	69d2      	ldr	r2, [r2, #28]
 8007bca:	00d2      	lsls	r2, r2, #3
 8007bcc:	4920      	ldr	r1, [pc, #128]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007bd8:	f043 0310 	orr.w	r3, r3, #16
 8007bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d106      	bne.n	8007bf2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007be4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be8:	4a19      	ldr	r2, [pc, #100]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007bea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bf0:	e00f      	b.n	8007c12 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d106      	bne.n	8007c06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bf8:	4b15      	ldr	r3, [pc, #84]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfc:	4a14      	ldr	r2, [pc, #80]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c04:	e005      	b.n	8007c12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c06:	4b12      	ldr	r3, [pc, #72]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0a:	4a11      	ldr	r2, [pc, #68]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007c0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c12:	4b0f      	ldr	r3, [pc, #60]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a0e      	ldr	r2, [pc, #56]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007c18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c1e:	f7f9 ff35 	bl	8001a8c <HAL_GetTick>
 8007c22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c24:	e008      	b.n	8007c38 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c26:	f7f9 ff31 	bl	8001a8c <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d901      	bls.n	8007c38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e006      	b.n	8007c46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c38:	4b05      	ldr	r3, [pc, #20]	@ (8007c50 <RCCEx_PLL2_Config+0x15c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0f0      	beq.n	8007c26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	58024400 	.word	0x58024400
 8007c54:	ffff0007 	.word	0xffff0007

08007c58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c66:	4b53      	ldr	r3, [pc, #332]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d101      	bne.n	8007c76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e099      	b.n	8007daa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c76:	4b4f      	ldr	r3, [pc, #316]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a4e      	ldr	r2, [pc, #312]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007c7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c82:	f7f9 ff03 	bl	8001a8c <HAL_GetTick>
 8007c86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c88:	e008      	b.n	8007c9c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c8a:	f7f9 feff 	bl	8001a8c <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d901      	bls.n	8007c9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e086      	b.n	8007daa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c9c:	4b45      	ldr	r3, [pc, #276]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1f0      	bne.n	8007c8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ca8:	4b42      	ldr	r3, [pc, #264]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	051b      	lsls	r3, r3, #20
 8007cb6:	493f      	ldr	r1, [pc, #252]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	628b      	str	r3, [r1, #40]	@ 0x28
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	025b      	lsls	r3, r3, #9
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	041b      	lsls	r3, r3, #16
 8007cda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	061b      	lsls	r3, r3, #24
 8007ce8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007cec:	4931      	ldr	r1, [pc, #196]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cf2:	4b30      	ldr	r3, [pc, #192]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	492d      	ldr	r1, [pc, #180]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d04:	4b2b      	ldr	r3, [pc, #172]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	4928      	ldr	r1, [pc, #160]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d16:	4b27      	ldr	r3, [pc, #156]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1a:	4a26      	ldr	r2, [pc, #152]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d22:	4b24      	ldr	r3, [pc, #144]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d26:	4b24      	ldr	r3, [pc, #144]	@ (8007db8 <RCCEx_PLL3_Config+0x160>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	69d2      	ldr	r2, [r2, #28]
 8007d2e:	00d2      	lsls	r2, r2, #3
 8007d30:	4920      	ldr	r1, [pc, #128]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d36:	4b1f      	ldr	r3, [pc, #124]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d106      	bne.n	8007d56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d48:	4b1a      	ldr	r3, [pc, #104]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4c:	4a19      	ldr	r2, [pc, #100]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d54:	e00f      	b.n	8007d76 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d106      	bne.n	8007d6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d5c:	4b15      	ldr	r3, [pc, #84]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d60:	4a14      	ldr	r2, [pc, #80]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d68:	e005      	b.n	8007d76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d6a:	4b12      	ldr	r3, [pc, #72]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6e:	4a11      	ldr	r2, [pc, #68]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d76:	4b0f      	ldr	r3, [pc, #60]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d82:	f7f9 fe83 	bl	8001a8c <HAL_GetTick>
 8007d86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d88:	e008      	b.n	8007d9c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d8a:	f7f9 fe7f 	bl	8001a8c <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d901      	bls.n	8007d9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e006      	b.n	8007daa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d9c:	4b05      	ldr	r3, [pc, #20]	@ (8007db4 <RCCEx_PLL3_Config+0x15c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0f0      	beq.n	8007d8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	58024400 	.word	0x58024400
 8007db8:	ffff0007 	.word	0xffff0007

08007dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e042      	b.n	8007e54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d106      	bne.n	8007de6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7f9 fbbd 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2224      	movs	r2, #36	@ 0x24
 8007dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0201 	bic.w	r2, r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fc9e 	bl	8009748 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fe2f 	bl	8008a70 <UART_SetConfig>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e01b      	b.n	8007e54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f042 0201 	orr.w	r2, r2, #1
 8007e4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fd1d 	bl	800988c <UART_CheckIdleState>
 8007e52:	4603      	mov	r3, r0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	@ 0x28
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d17b      	bne.n	8007f6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <HAL_UART_Transmit+0x26>
 8007e7c:	88fb      	ldrh	r3, [r7, #6]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e074      	b.n	8007f70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2221      	movs	r2, #33	@ 0x21
 8007e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e96:	f7f9 fdf9 	bl	8001a8c <HAL_GetTick>
 8007e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	88fa      	ldrh	r2, [r7, #6]
 8007ea0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	88fa      	ldrh	r2, [r7, #6]
 8007ea8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb4:	d108      	bne.n	8007ec8 <HAL_UART_Transmit+0x6c>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d104      	bne.n	8007ec8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	61bb      	str	r3, [r7, #24]
 8007ec6:	e003      	b.n	8007ed0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ed0:	e030      	b.n	8007f34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2180      	movs	r1, #128	@ 0x80
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f001 fd7f 	bl	80099e0 <UART_WaitOnFlagUntilTimeout>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d005      	beq.n	8007ef4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e03d      	b.n	8007f70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	e007      	b.n	8007f22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	781a      	ldrb	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1c8      	bne.n	8007ed2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2200      	movs	r2, #0
 8007f48:	2140      	movs	r1, #64	@ 0x40
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f001 fd48 	bl	80099e0 <UART_WaitOnFlagUntilTimeout>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e006      	b.n	8007f70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e000      	b.n	8007f70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f6e:	2302      	movs	r3, #2
  }
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3720      	adds	r7, #32
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	@ 0x28
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	603b      	str	r3, [r7, #0]
 8007f84:	4613      	mov	r3, r2
 8007f86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	f040 80b5 	bne.w	80080fe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_UART_Receive+0x28>
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0ad      	b.n	8008100 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2222      	movs	r2, #34	@ 0x22
 8007fb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fba:	f7f9 fd67 	bl	8001a8c <HAL_GetTick>
 8007fbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	88fa      	ldrh	r2, [r7, #6]
 8007fc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	88fa      	ldrh	r2, [r7, #6]
 8007fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fd8:	d10e      	bne.n	8007ff8 <HAL_UART_Receive+0x80>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d105      	bne.n	8007fee <HAL_UART_Receive+0x76>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007fe8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007fec:	e02d      	b.n	800804a <HAL_UART_Receive+0xd2>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	22ff      	movs	r2, #255	@ 0xff
 8007ff2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ff6:	e028      	b.n	800804a <HAL_UART_Receive+0xd2>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10d      	bne.n	800801c <HAL_UART_Receive+0xa4>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d104      	bne.n	8008012 <HAL_UART_Receive+0x9a>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	22ff      	movs	r2, #255	@ 0xff
 800800c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008010:	e01b      	b.n	800804a <HAL_UART_Receive+0xd2>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	227f      	movs	r2, #127	@ 0x7f
 8008016:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800801a:	e016      	b.n	800804a <HAL_UART_Receive+0xd2>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008024:	d10d      	bne.n	8008042 <HAL_UART_Receive+0xca>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d104      	bne.n	8008038 <HAL_UART_Receive+0xc0>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	227f      	movs	r2, #127	@ 0x7f
 8008032:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008036:	e008      	b.n	800804a <HAL_UART_Receive+0xd2>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	223f      	movs	r2, #63	@ 0x3f
 800803c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008040:	e003      	b.n	800804a <HAL_UART_Receive+0xd2>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008050:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800805a:	d108      	bne.n	800806e <HAL_UART_Receive+0xf6>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008064:	2300      	movs	r3, #0
 8008066:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	e003      	b.n	8008076 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008072:	2300      	movs	r3, #0
 8008074:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008076:	e036      	b.n	80080e6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2200      	movs	r2, #0
 8008080:	2120      	movs	r1, #32
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f001 fcac 	bl	80099e0 <UART_WaitOnFlagUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e032      	b.n	8008100 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10c      	bne.n	80080ba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	8a7b      	ldrh	r3, [r7, #18]
 80080aa:	4013      	ands	r3, r2
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	3302      	adds	r3, #2
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	e00c      	b.n	80080d4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	8a7b      	ldrh	r3, [r7, #18]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	4013      	ands	r3, r2
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	3301      	adds	r3, #1
 80080d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080da:	b29b      	uxth	r3, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	b29a      	uxth	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1c2      	bne.n	8008078 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e000      	b.n	8008100 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80080fe:	2302      	movs	r3, #2
  }
}
 8008100:	4618      	mov	r0, r3
 8008102:	3720      	adds	r7, #32
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b09a      	sub	sp, #104	@ 0x68
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800811e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008124:	667b      	str	r3, [r7, #100]	@ 0x64
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800812e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008130:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008134:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800813c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e6      	bne.n	8008110 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3308      	adds	r3, #8
 8008148:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008154:	4b46      	ldr	r3, [pc, #280]	@ (8008270 <HAL_UART_AbortReceive+0x168>)
 8008156:	4013      	ands	r3, r2
 8008158:	663b      	str	r3, [r7, #96]	@ 0x60
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3308      	adds	r3, #8
 8008160:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008162:	643a      	str	r2, [r7, #64]	@ 0x40
 8008164:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008168:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e5      	bne.n	8008142 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800817a:	2b01      	cmp	r3, #1
 800817c:	d118      	bne.n	80081b0 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	61fb      	str	r3, [r7, #28]
   return(result);
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f023 0310 	bic.w	r3, r3, #16
 8008192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	461a      	mov	r2, r3
 800819a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800819c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800819e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081a4:	e841 2300 	strex	r3, r2, [r1]
 80081a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e6      	bne.n	800817e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ba:	2b40      	cmp	r3, #64	@ 0x40
 80081bc:	d13b      	bne.n	8008236 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3308      	adds	r3, #8
 80081c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081de:	61ba      	str	r2, [r7, #24]
 80081e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6979      	ldr	r1, [r7, #20]
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	613b      	str	r3, [r7, #16]
   return(result);
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e5      	bne.n	80081be <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01c      	beq.n	8008236 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008202:	2200      	movs	r2, #0
 8008204:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800820c:	4618      	mov	r0, r3
 800820e:	f7fa fbed 	bl	80029ec <HAL_DMA_Abort>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00e      	beq.n	8008236 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800821e:	4618      	mov	r0, r3
 8008220:	f7fc f8aa 	bl	8004378 <HAL_DMA_GetError>
 8008224:	4603      	mov	r3, r0
 8008226:	2b20      	cmp	r3, #32
 8008228:	d105      	bne.n	8008236 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2210      	movs	r2, #16
 800822e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e017      	b.n	8008266 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	220f      	movs	r2, #15
 8008244:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	699a      	ldr	r2, [r3, #24]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f042 0208 	orr.w	r2, r2, #8
 8008254:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2220      	movs	r2, #32
 800825a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3768      	adds	r7, #104	@ 0x68
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	effffffe 	.word	0xeffffffe

08008274 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b0ba      	sub	sp, #232	@ 0xe8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800829a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800829e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80082a2:	4013      	ands	r3, r2
 80082a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80082a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d11b      	bne.n	80082e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d015      	beq.n	80082e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d009      	beq.n	80082e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8393 	beq.w	8008a04 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
      }
      return;
 80082e6:	e38d      	b.n	8008a04 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8123 	beq.w	8008538 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80082f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80082f6:	4b8d      	ldr	r3, [pc, #564]	@ (800852c <HAL_UART_IRQHandler+0x2b8>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d106      	bne.n	800830c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80082fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008302:	4b8b      	ldr	r3, [pc, #556]	@ (8008530 <HAL_UART_IRQHandler+0x2bc>)
 8008304:	4013      	ands	r3, r2
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 8116 	beq.w	8008538 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d011      	beq.n	800833c <HAL_UART_IRQHandler+0xc8>
 8008318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800831c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2201      	movs	r2, #1
 800832a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008332:	f043 0201 	orr.w	r2, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800833c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d011      	beq.n	800836c <HAL_UART_IRQHandler+0xf8>
 8008348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2202      	movs	r2, #2
 800835a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008362:	f043 0204 	orr.w	r2, r3, #4
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800836c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d011      	beq.n	800839c <HAL_UART_IRQHandler+0x128>
 8008378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2204      	movs	r2, #4
 800838a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008392:	f043 0202 	orr.w	r2, r3, #2
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800839c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083a0:	f003 0308 	and.w	r3, r3, #8
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d017      	beq.n	80083d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d105      	bne.n	80083c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80083b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80083b8:	4b5c      	ldr	r3, [pc, #368]	@ (800852c <HAL_UART_IRQHandler+0x2b8>)
 80083ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2208      	movs	r2, #8
 80083c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ce:	f043 0208 	orr.w	r2, r3, #8
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d012      	beq.n	800840a <HAL_UART_IRQHandler+0x196>
 80083e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00c      	beq.n	800840a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008400:	f043 0220 	orr.w	r2, r3, #32
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 82f9 	beq.w	8008a08 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d013      	beq.n	800844a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d105      	bne.n	800843a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800842e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d007      	beq.n	800844a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008450:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845e:	2b40      	cmp	r3, #64	@ 0x40
 8008460:	d005      	beq.n	800846e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008466:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800846a:	2b00      	cmp	r3, #0
 800846c:	d054      	beq.n	8008518 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 fc0c 	bl	8009c8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847e:	2b40      	cmp	r3, #64	@ 0x40
 8008480:	d146      	bne.n	8008510 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3308      	adds	r3, #8
 8008488:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800849c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3308      	adds	r3, #8
 80084aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80084ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80084b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80084ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80084c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1d9      	bne.n	8008482 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d017      	beq.n	8008508 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084de:	4a15      	ldr	r2, [pc, #84]	@ (8008534 <HAL_UART_IRQHandler+0x2c0>)
 80084e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fa fd9d 	bl	8003028 <HAL_DMA_Abort_IT>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d019      	beq.n	8008528 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008502:	4610      	mov	r0, r2
 8008504:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008506:	e00f      	b.n	8008528 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 faa7 	bl	8008a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800850e:	e00b      	b.n	8008528 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 faa3 	bl	8008a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008516:	e007      	b.n	8008528 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fa9f 	bl	8008a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008526:	e26f      	b.n	8008a08 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008528:	bf00      	nop
    return;
 800852a:	e26d      	b.n	8008a08 <HAL_UART_IRQHandler+0x794>
 800852c:	10000001 	.word	0x10000001
 8008530:	04000120 	.word	0x04000120
 8008534:	08009f3f 	.word	0x08009f3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800853c:	2b01      	cmp	r3, #1
 800853e:	f040 8203 	bne.w	8008948 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008546:	f003 0310 	and.w	r3, r3, #16
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 81fc 	beq.w	8008948 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008554:	f003 0310 	and.w	r3, r3, #16
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 81f5 	beq.w	8008948 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2210      	movs	r2, #16
 8008564:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008570:	2b40      	cmp	r3, #64	@ 0x40
 8008572:	f040 816d 	bne.w	8008850 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4aa4      	ldr	r2, [pc, #656]	@ (8008810 <HAL_UART_IRQHandler+0x59c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d068      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4aa1      	ldr	r2, [pc, #644]	@ (8008814 <HAL_UART_IRQHandler+0x5a0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d061      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a9f      	ldr	r2, [pc, #636]	@ (8008818 <HAL_UART_IRQHandler+0x5a4>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d05a      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a9c      	ldr	r2, [pc, #624]	@ (800881c <HAL_UART_IRQHandler+0x5a8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d053      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a9a      	ldr	r2, [pc, #616]	@ (8008820 <HAL_UART_IRQHandler+0x5ac>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d04c      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a97      	ldr	r2, [pc, #604]	@ (8008824 <HAL_UART_IRQHandler+0x5b0>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d045      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a95      	ldr	r2, [pc, #596]	@ (8008828 <HAL_UART_IRQHandler+0x5b4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d03e      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a92      	ldr	r2, [pc, #584]	@ (800882c <HAL_UART_IRQHandler+0x5b8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d037      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a90      	ldr	r2, [pc, #576]	@ (8008830 <HAL_UART_IRQHandler+0x5bc>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d030      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a8d      	ldr	r2, [pc, #564]	@ (8008834 <HAL_UART_IRQHandler+0x5c0>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d029      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a8b      	ldr	r2, [pc, #556]	@ (8008838 <HAL_UART_IRQHandler+0x5c4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d022      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a88      	ldr	r2, [pc, #544]	@ (800883c <HAL_UART_IRQHandler+0x5c8>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d01b      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a86      	ldr	r2, [pc, #536]	@ (8008840 <HAL_UART_IRQHandler+0x5cc>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d014      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a83      	ldr	r2, [pc, #524]	@ (8008844 <HAL_UART_IRQHandler+0x5d0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00d      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a81      	ldr	r2, [pc, #516]	@ (8008848 <HAL_UART_IRQHandler+0x5d4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d006      	beq.n	8008656 <HAL_UART_IRQHandler+0x3e2>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a7e      	ldr	r2, [pc, #504]	@ (800884c <HAL_UART_IRQHandler+0x5d8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d106      	bne.n	8008664 <HAL_UART_IRQHandler+0x3f0>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	b29b      	uxth	r3, r3
 8008662:	e005      	b.n	8008670 <HAL_UART_IRQHandler+0x3fc>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	b29b      	uxth	r3, r3
 8008670:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008674:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 80ad 	beq.w	80087d8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008684:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008688:	429a      	cmp	r2, r3
 800868a:	f080 80a5 	bcs.w	80087d8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008694:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086a4:	f000 8087 	beq.w	80087b6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80086bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80086d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80086d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80086de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80086ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1da      	bne.n	80086a8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008704:	f023 0301 	bic.w	r3, r3, #1
 8008708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3308      	adds	r3, #8
 8008712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800871a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800871e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e1      	bne.n	80086f2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3308      	adds	r3, #8
 8008734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800873e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3308      	adds	r3, #8
 800874e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e3      	bne.n	800872e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008784:	f023 0310 	bic.w	r3, r3, #16
 8008788:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008796:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008798:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800879c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e4      	bne.n	8008774 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fa f91b 	bl	80029ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2202      	movs	r2, #2
 80087ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7f8 fadd 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80087d6:	e119      	b.n	8008a0c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087e2:	429a      	cmp	r2, r3
 80087e4:	f040 8112 	bne.w	8008a0c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087f4:	f040 810a 	bne.w	8008a0c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7f8 fac2 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
      return;
 800880c:	e0fe      	b.n	8008a0c <HAL_UART_IRQHandler+0x798>
 800880e:	bf00      	nop
 8008810:	40020010 	.word	0x40020010
 8008814:	40020028 	.word	0x40020028
 8008818:	40020040 	.word	0x40020040
 800881c:	40020058 	.word	0x40020058
 8008820:	40020070 	.word	0x40020070
 8008824:	40020088 	.word	0x40020088
 8008828:	400200a0 	.word	0x400200a0
 800882c:	400200b8 	.word	0x400200b8
 8008830:	40020410 	.word	0x40020410
 8008834:	40020428 	.word	0x40020428
 8008838:	40020440 	.word	0x40020440
 800883c:	40020458 	.word	0x40020458
 8008840:	40020470 	.word	0x40020470
 8008844:	40020488 	.word	0x40020488
 8008848:	400204a0 	.word	0x400204a0
 800884c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800885c:	b29b      	uxth	r3, r3
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80cf 	beq.w	8008a10 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 80ca 	beq.w	8008a10 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800888a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008890:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800889e:	647b      	str	r3, [r7, #68]	@ 0x44
 80088a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e4      	bne.n	800887c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3308      	adds	r3, #8
 80088b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	623b      	str	r3, [r7, #32]
   return(result);
 80088c2:	6a3a      	ldr	r2, [r7, #32]
 80088c4:	4b55      	ldr	r3, [pc, #340]	@ (8008a1c <HAL_UART_IRQHandler+0x7a8>)
 80088c6:	4013      	ands	r3, r2
 80088c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3308      	adds	r3, #8
 80088d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80088d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80088d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e3      	bne.n	80088b2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	e853 3f00 	ldrex	r3, [r3]
 800890a:	60fb      	str	r3, [r7, #12]
   return(result);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f023 0310 	bic.w	r3, r3, #16
 8008912:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008920:	61fb      	str	r3, [r7, #28]
 8008922:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	69b9      	ldr	r1, [r7, #24]
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	617b      	str	r3, [r7, #20]
   return(result);
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e4      	bne.n	80088fe <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800893a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7f8 fa25 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008946:	e063      	b.n	8008a10 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800894c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00e      	beq.n	8008972 <HAL_UART_IRQHandler+0x6fe>
 8008954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f001 fb24 	bl	8009fb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008970:	e051      	b.n	8008a16 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897a:	2b00      	cmp	r3, #0
 800897c:	d014      	beq.n	80089a8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800897e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008986:	2b00      	cmp	r3, #0
 8008988:	d105      	bne.n	8008996 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800898a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800898e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d008      	beq.n	80089a8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800899a:	2b00      	cmp	r3, #0
 800899c:	d03a      	beq.n	8008a14 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	4798      	blx	r3
    }
    return;
 80089a6:	e035      	b.n	8008a14 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <HAL_UART_IRQHandler+0x754>
 80089b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 face 	bl	8009f62 <UART_EndTransmit_IT>
    return;
 80089c6:	e026      	b.n	8008a16 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80089c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d009      	beq.n	80089e8 <HAL_UART_IRQHandler+0x774>
 80089d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d003      	beq.n	80089e8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 fafd 	bl	8009fe0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089e6:	e016      	b.n	8008a16 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d010      	beq.n	8008a16 <HAL_UART_IRQHandler+0x7a2>
 80089f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	da0c      	bge.n	8008a16 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 fae5 	bl	8009fcc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a02:	e008      	b.n	8008a16 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008a04:	bf00      	nop
 8008a06:	e006      	b.n	8008a16 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008a08:	bf00      	nop
 8008a0a:	e004      	b.n	8008a16 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008a0c:	bf00      	nop
 8008a0e:	e002      	b.n	8008a16 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008a10:	bf00      	nop
 8008a12:	e000      	b.n	8008a16 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008a14:	bf00      	nop
  }
}
 8008a16:	37e8      	adds	r7, #232	@ 0xe8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	effffffe 	.word	0xeffffffe

08008a20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a74:	b092      	sub	sp, #72	@ 0x48
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	4bbe      	ldr	r3, [pc, #760]	@ (8008d98 <UART_SetConfig+0x328>)
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	6812      	ldr	r2, [r2, #0]
 8008aa6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008aa8:	430b      	orrs	r3, r1
 8008aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4ab3      	ldr	r2, [pc, #716]	@ (8008d9c <UART_SetConfig+0x32c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d004      	beq.n	8008adc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	4baf      	ldr	r3, [pc, #700]	@ (8008da0 <UART_SetConfig+0x330>)
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	6812      	ldr	r2, [r2, #0]
 8008aea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008aec:	430b      	orrs	r3, r1
 8008aee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af6:	f023 010f 	bic.w	r1, r3, #15
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4aa6      	ldr	r2, [pc, #664]	@ (8008da4 <UART_SetConfig+0x334>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d177      	bne.n	8008c00 <UART_SetConfig+0x190>
 8008b10:	4ba5      	ldr	r3, [pc, #660]	@ (8008da8 <UART_SetConfig+0x338>)
 8008b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b18:	2b28      	cmp	r3, #40	@ 0x28
 8008b1a:	d86d      	bhi.n	8008bf8 <UART_SetConfig+0x188>
 8008b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b24 <UART_SetConfig+0xb4>)
 8008b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b22:	bf00      	nop
 8008b24:	08008bc9 	.word	0x08008bc9
 8008b28:	08008bf9 	.word	0x08008bf9
 8008b2c:	08008bf9 	.word	0x08008bf9
 8008b30:	08008bf9 	.word	0x08008bf9
 8008b34:	08008bf9 	.word	0x08008bf9
 8008b38:	08008bf9 	.word	0x08008bf9
 8008b3c:	08008bf9 	.word	0x08008bf9
 8008b40:	08008bf9 	.word	0x08008bf9
 8008b44:	08008bd1 	.word	0x08008bd1
 8008b48:	08008bf9 	.word	0x08008bf9
 8008b4c:	08008bf9 	.word	0x08008bf9
 8008b50:	08008bf9 	.word	0x08008bf9
 8008b54:	08008bf9 	.word	0x08008bf9
 8008b58:	08008bf9 	.word	0x08008bf9
 8008b5c:	08008bf9 	.word	0x08008bf9
 8008b60:	08008bf9 	.word	0x08008bf9
 8008b64:	08008bd9 	.word	0x08008bd9
 8008b68:	08008bf9 	.word	0x08008bf9
 8008b6c:	08008bf9 	.word	0x08008bf9
 8008b70:	08008bf9 	.word	0x08008bf9
 8008b74:	08008bf9 	.word	0x08008bf9
 8008b78:	08008bf9 	.word	0x08008bf9
 8008b7c:	08008bf9 	.word	0x08008bf9
 8008b80:	08008bf9 	.word	0x08008bf9
 8008b84:	08008be1 	.word	0x08008be1
 8008b88:	08008bf9 	.word	0x08008bf9
 8008b8c:	08008bf9 	.word	0x08008bf9
 8008b90:	08008bf9 	.word	0x08008bf9
 8008b94:	08008bf9 	.word	0x08008bf9
 8008b98:	08008bf9 	.word	0x08008bf9
 8008b9c:	08008bf9 	.word	0x08008bf9
 8008ba0:	08008bf9 	.word	0x08008bf9
 8008ba4:	08008be9 	.word	0x08008be9
 8008ba8:	08008bf9 	.word	0x08008bf9
 8008bac:	08008bf9 	.word	0x08008bf9
 8008bb0:	08008bf9 	.word	0x08008bf9
 8008bb4:	08008bf9 	.word	0x08008bf9
 8008bb8:	08008bf9 	.word	0x08008bf9
 8008bbc:	08008bf9 	.word	0x08008bf9
 8008bc0:	08008bf9 	.word	0x08008bf9
 8008bc4:	08008bf1 	.word	0x08008bf1
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e326      	b.n	800921e <UART_SetConfig+0x7ae>
 8008bd0:	2304      	movs	r3, #4
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e322      	b.n	800921e <UART_SetConfig+0x7ae>
 8008bd8:	2308      	movs	r3, #8
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e31e      	b.n	800921e <UART_SetConfig+0x7ae>
 8008be0:	2310      	movs	r3, #16
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e31a      	b.n	800921e <UART_SetConfig+0x7ae>
 8008be8:	2320      	movs	r3, #32
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e316      	b.n	800921e <UART_SetConfig+0x7ae>
 8008bf0:	2340      	movs	r3, #64	@ 0x40
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e312      	b.n	800921e <UART_SetConfig+0x7ae>
 8008bf8:	2380      	movs	r3, #128	@ 0x80
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfe:	e30e      	b.n	800921e <UART_SetConfig+0x7ae>
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a69      	ldr	r2, [pc, #420]	@ (8008dac <UART_SetConfig+0x33c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d130      	bne.n	8008c6c <UART_SetConfig+0x1fc>
 8008c0a:	4b67      	ldr	r3, [pc, #412]	@ (8008da8 <UART_SetConfig+0x338>)
 8008c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	2b05      	cmp	r3, #5
 8008c14:	d826      	bhi.n	8008c64 <UART_SetConfig+0x1f4>
 8008c16:	a201      	add	r2, pc, #4	@ (adr r2, 8008c1c <UART_SetConfig+0x1ac>)
 8008c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1c:	08008c35 	.word	0x08008c35
 8008c20:	08008c3d 	.word	0x08008c3d
 8008c24:	08008c45 	.word	0x08008c45
 8008c28:	08008c4d 	.word	0x08008c4d
 8008c2c:	08008c55 	.word	0x08008c55
 8008c30:	08008c5d 	.word	0x08008c5d
 8008c34:	2300      	movs	r3, #0
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3a:	e2f0      	b.n	800921e <UART_SetConfig+0x7ae>
 8008c3c:	2304      	movs	r3, #4
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e2ec      	b.n	800921e <UART_SetConfig+0x7ae>
 8008c44:	2308      	movs	r3, #8
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e2e8      	b.n	800921e <UART_SetConfig+0x7ae>
 8008c4c:	2310      	movs	r3, #16
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c52:	e2e4      	b.n	800921e <UART_SetConfig+0x7ae>
 8008c54:	2320      	movs	r3, #32
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e2e0      	b.n	800921e <UART_SetConfig+0x7ae>
 8008c5c:	2340      	movs	r3, #64	@ 0x40
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e2dc      	b.n	800921e <UART_SetConfig+0x7ae>
 8008c64:	2380      	movs	r3, #128	@ 0x80
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6a:	e2d8      	b.n	800921e <UART_SetConfig+0x7ae>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a4f      	ldr	r2, [pc, #316]	@ (8008db0 <UART_SetConfig+0x340>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d130      	bne.n	8008cd8 <UART_SetConfig+0x268>
 8008c76:	4b4c      	ldr	r3, [pc, #304]	@ (8008da8 <UART_SetConfig+0x338>)
 8008c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	2b05      	cmp	r3, #5
 8008c80:	d826      	bhi.n	8008cd0 <UART_SetConfig+0x260>
 8008c82:	a201      	add	r2, pc, #4	@ (adr r2, 8008c88 <UART_SetConfig+0x218>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008ca1 	.word	0x08008ca1
 8008c8c:	08008ca9 	.word	0x08008ca9
 8008c90:	08008cb1 	.word	0x08008cb1
 8008c94:	08008cb9 	.word	0x08008cb9
 8008c98:	08008cc1 	.word	0x08008cc1
 8008c9c:	08008cc9 	.word	0x08008cc9
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e2ba      	b.n	800921e <UART_SetConfig+0x7ae>
 8008ca8:	2304      	movs	r3, #4
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e2b6      	b.n	800921e <UART_SetConfig+0x7ae>
 8008cb0:	2308      	movs	r3, #8
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e2b2      	b.n	800921e <UART_SetConfig+0x7ae>
 8008cb8:	2310      	movs	r3, #16
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cbe:	e2ae      	b.n	800921e <UART_SetConfig+0x7ae>
 8008cc0:	2320      	movs	r3, #32
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e2aa      	b.n	800921e <UART_SetConfig+0x7ae>
 8008cc8:	2340      	movs	r3, #64	@ 0x40
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e2a6      	b.n	800921e <UART_SetConfig+0x7ae>
 8008cd0:	2380      	movs	r3, #128	@ 0x80
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e2a2      	b.n	800921e <UART_SetConfig+0x7ae>
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a35      	ldr	r2, [pc, #212]	@ (8008db4 <UART_SetConfig+0x344>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d130      	bne.n	8008d44 <UART_SetConfig+0x2d4>
 8008ce2:	4b31      	ldr	r3, [pc, #196]	@ (8008da8 <UART_SetConfig+0x338>)
 8008ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce6:	f003 0307 	and.w	r3, r3, #7
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	d826      	bhi.n	8008d3c <UART_SetConfig+0x2cc>
 8008cee:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf4 <UART_SetConfig+0x284>)
 8008cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf4:	08008d0d 	.word	0x08008d0d
 8008cf8:	08008d15 	.word	0x08008d15
 8008cfc:	08008d1d 	.word	0x08008d1d
 8008d00:	08008d25 	.word	0x08008d25
 8008d04:	08008d2d 	.word	0x08008d2d
 8008d08:	08008d35 	.word	0x08008d35
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e284      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d14:	2304      	movs	r3, #4
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e280      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d1c:	2308      	movs	r3, #8
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e27c      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d24:	2310      	movs	r3, #16
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e278      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d2c:	2320      	movs	r3, #32
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e274      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d34:	2340      	movs	r3, #64	@ 0x40
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e270      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d3c:	2380      	movs	r3, #128	@ 0x80
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e26c      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a1b      	ldr	r2, [pc, #108]	@ (8008db8 <UART_SetConfig+0x348>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d142      	bne.n	8008dd4 <UART_SetConfig+0x364>
 8008d4e:	4b16      	ldr	r3, [pc, #88]	@ (8008da8 <UART_SetConfig+0x338>)
 8008d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	2b05      	cmp	r3, #5
 8008d58:	d838      	bhi.n	8008dcc <UART_SetConfig+0x35c>
 8008d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d60 <UART_SetConfig+0x2f0>)
 8008d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d60:	08008d79 	.word	0x08008d79
 8008d64:	08008d81 	.word	0x08008d81
 8008d68:	08008d89 	.word	0x08008d89
 8008d6c:	08008d91 	.word	0x08008d91
 8008d70:	08008dbd 	.word	0x08008dbd
 8008d74:	08008dc5 	.word	0x08008dc5
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7e:	e24e      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d80:	2304      	movs	r3, #4
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d86:	e24a      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d88:	2308      	movs	r3, #8
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e246      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d90:	2310      	movs	r3, #16
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e242      	b.n	800921e <UART_SetConfig+0x7ae>
 8008d98:	cfff69f3 	.word	0xcfff69f3
 8008d9c:	58000c00 	.word	0x58000c00
 8008da0:	11fff4ff 	.word	0x11fff4ff
 8008da4:	40011000 	.word	0x40011000
 8008da8:	58024400 	.word	0x58024400
 8008dac:	40004400 	.word	0x40004400
 8008db0:	40004800 	.word	0x40004800
 8008db4:	40004c00 	.word	0x40004c00
 8008db8:	40005000 	.word	0x40005000
 8008dbc:	2320      	movs	r3, #32
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc2:	e22c      	b.n	800921e <UART_SetConfig+0x7ae>
 8008dc4:	2340      	movs	r3, #64	@ 0x40
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dca:	e228      	b.n	800921e <UART_SetConfig+0x7ae>
 8008dcc:	2380      	movs	r3, #128	@ 0x80
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd2:	e224      	b.n	800921e <UART_SetConfig+0x7ae>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4ab1      	ldr	r2, [pc, #708]	@ (80090a0 <UART_SetConfig+0x630>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d176      	bne.n	8008ecc <UART_SetConfig+0x45c>
 8008dde:	4bb1      	ldr	r3, [pc, #708]	@ (80090a4 <UART_SetConfig+0x634>)
 8008de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008de6:	2b28      	cmp	r3, #40	@ 0x28
 8008de8:	d86c      	bhi.n	8008ec4 <UART_SetConfig+0x454>
 8008dea:	a201      	add	r2, pc, #4	@ (adr r2, 8008df0 <UART_SetConfig+0x380>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e95 	.word	0x08008e95
 8008df4:	08008ec5 	.word	0x08008ec5
 8008df8:	08008ec5 	.word	0x08008ec5
 8008dfc:	08008ec5 	.word	0x08008ec5
 8008e00:	08008ec5 	.word	0x08008ec5
 8008e04:	08008ec5 	.word	0x08008ec5
 8008e08:	08008ec5 	.word	0x08008ec5
 8008e0c:	08008ec5 	.word	0x08008ec5
 8008e10:	08008e9d 	.word	0x08008e9d
 8008e14:	08008ec5 	.word	0x08008ec5
 8008e18:	08008ec5 	.word	0x08008ec5
 8008e1c:	08008ec5 	.word	0x08008ec5
 8008e20:	08008ec5 	.word	0x08008ec5
 8008e24:	08008ec5 	.word	0x08008ec5
 8008e28:	08008ec5 	.word	0x08008ec5
 8008e2c:	08008ec5 	.word	0x08008ec5
 8008e30:	08008ea5 	.word	0x08008ea5
 8008e34:	08008ec5 	.word	0x08008ec5
 8008e38:	08008ec5 	.word	0x08008ec5
 8008e3c:	08008ec5 	.word	0x08008ec5
 8008e40:	08008ec5 	.word	0x08008ec5
 8008e44:	08008ec5 	.word	0x08008ec5
 8008e48:	08008ec5 	.word	0x08008ec5
 8008e4c:	08008ec5 	.word	0x08008ec5
 8008e50:	08008ead 	.word	0x08008ead
 8008e54:	08008ec5 	.word	0x08008ec5
 8008e58:	08008ec5 	.word	0x08008ec5
 8008e5c:	08008ec5 	.word	0x08008ec5
 8008e60:	08008ec5 	.word	0x08008ec5
 8008e64:	08008ec5 	.word	0x08008ec5
 8008e68:	08008ec5 	.word	0x08008ec5
 8008e6c:	08008ec5 	.word	0x08008ec5
 8008e70:	08008eb5 	.word	0x08008eb5
 8008e74:	08008ec5 	.word	0x08008ec5
 8008e78:	08008ec5 	.word	0x08008ec5
 8008e7c:	08008ec5 	.word	0x08008ec5
 8008e80:	08008ec5 	.word	0x08008ec5
 8008e84:	08008ec5 	.word	0x08008ec5
 8008e88:	08008ec5 	.word	0x08008ec5
 8008e8c:	08008ec5 	.word	0x08008ec5
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	2301      	movs	r3, #1
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9a:	e1c0      	b.n	800921e <UART_SetConfig+0x7ae>
 8008e9c:	2304      	movs	r3, #4
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea2:	e1bc      	b.n	800921e <UART_SetConfig+0x7ae>
 8008ea4:	2308      	movs	r3, #8
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eaa:	e1b8      	b.n	800921e <UART_SetConfig+0x7ae>
 8008eac:	2310      	movs	r3, #16
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb2:	e1b4      	b.n	800921e <UART_SetConfig+0x7ae>
 8008eb4:	2320      	movs	r3, #32
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eba:	e1b0      	b.n	800921e <UART_SetConfig+0x7ae>
 8008ebc:	2340      	movs	r3, #64	@ 0x40
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec2:	e1ac      	b.n	800921e <UART_SetConfig+0x7ae>
 8008ec4:	2380      	movs	r3, #128	@ 0x80
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eca:	e1a8      	b.n	800921e <UART_SetConfig+0x7ae>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a75      	ldr	r2, [pc, #468]	@ (80090a8 <UART_SetConfig+0x638>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d130      	bne.n	8008f38 <UART_SetConfig+0x4c8>
 8008ed6:	4b73      	ldr	r3, [pc, #460]	@ (80090a4 <UART_SetConfig+0x634>)
 8008ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	2b05      	cmp	r3, #5
 8008ee0:	d826      	bhi.n	8008f30 <UART_SetConfig+0x4c0>
 8008ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee8 <UART_SetConfig+0x478>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f01 	.word	0x08008f01
 8008eec:	08008f09 	.word	0x08008f09
 8008ef0:	08008f11 	.word	0x08008f11
 8008ef4:	08008f19 	.word	0x08008f19
 8008ef8:	08008f21 	.word	0x08008f21
 8008efc:	08008f29 	.word	0x08008f29
 8008f00:	2300      	movs	r3, #0
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e18a      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f08:	2304      	movs	r3, #4
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e186      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f10:	2308      	movs	r3, #8
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f16:	e182      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f18:	2310      	movs	r3, #16
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1e:	e17e      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f20:	2320      	movs	r3, #32
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f26:	e17a      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f28:	2340      	movs	r3, #64	@ 0x40
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e176      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f30:	2380      	movs	r3, #128	@ 0x80
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f36:	e172      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a5b      	ldr	r2, [pc, #364]	@ (80090ac <UART_SetConfig+0x63c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d130      	bne.n	8008fa4 <UART_SetConfig+0x534>
 8008f42:	4b58      	ldr	r3, [pc, #352]	@ (80090a4 <UART_SetConfig+0x634>)
 8008f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b05      	cmp	r3, #5
 8008f4c:	d826      	bhi.n	8008f9c <UART_SetConfig+0x52c>
 8008f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f54 <UART_SetConfig+0x4e4>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008f6d 	.word	0x08008f6d
 8008f58:	08008f75 	.word	0x08008f75
 8008f5c:	08008f7d 	.word	0x08008f7d
 8008f60:	08008f85 	.word	0x08008f85
 8008f64:	08008f8d 	.word	0x08008f8d
 8008f68:	08008f95 	.word	0x08008f95
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f72:	e154      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f74:	2304      	movs	r3, #4
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7a:	e150      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f7c:	2308      	movs	r3, #8
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f82:	e14c      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f84:	2310      	movs	r3, #16
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8a:	e148      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f8c:	2320      	movs	r3, #32
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f92:	e144      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f94:	2340      	movs	r3, #64	@ 0x40
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e140      	b.n	800921e <UART_SetConfig+0x7ae>
 8008f9c:	2380      	movs	r3, #128	@ 0x80
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa2:	e13c      	b.n	800921e <UART_SetConfig+0x7ae>
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a41      	ldr	r2, [pc, #260]	@ (80090b0 <UART_SetConfig+0x640>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	f040 8082 	bne.w	80090b4 <UART_SetConfig+0x644>
 8008fb0:	4b3c      	ldr	r3, [pc, #240]	@ (80090a4 <UART_SetConfig+0x634>)
 8008fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fb8:	2b28      	cmp	r3, #40	@ 0x28
 8008fba:	d86d      	bhi.n	8009098 <UART_SetConfig+0x628>
 8008fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc4 <UART_SetConfig+0x554>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08009069 	.word	0x08009069
 8008fc8:	08009099 	.word	0x08009099
 8008fcc:	08009099 	.word	0x08009099
 8008fd0:	08009099 	.word	0x08009099
 8008fd4:	08009099 	.word	0x08009099
 8008fd8:	08009099 	.word	0x08009099
 8008fdc:	08009099 	.word	0x08009099
 8008fe0:	08009099 	.word	0x08009099
 8008fe4:	08009071 	.word	0x08009071
 8008fe8:	08009099 	.word	0x08009099
 8008fec:	08009099 	.word	0x08009099
 8008ff0:	08009099 	.word	0x08009099
 8008ff4:	08009099 	.word	0x08009099
 8008ff8:	08009099 	.word	0x08009099
 8008ffc:	08009099 	.word	0x08009099
 8009000:	08009099 	.word	0x08009099
 8009004:	08009079 	.word	0x08009079
 8009008:	08009099 	.word	0x08009099
 800900c:	08009099 	.word	0x08009099
 8009010:	08009099 	.word	0x08009099
 8009014:	08009099 	.word	0x08009099
 8009018:	08009099 	.word	0x08009099
 800901c:	08009099 	.word	0x08009099
 8009020:	08009099 	.word	0x08009099
 8009024:	08009081 	.word	0x08009081
 8009028:	08009099 	.word	0x08009099
 800902c:	08009099 	.word	0x08009099
 8009030:	08009099 	.word	0x08009099
 8009034:	08009099 	.word	0x08009099
 8009038:	08009099 	.word	0x08009099
 800903c:	08009099 	.word	0x08009099
 8009040:	08009099 	.word	0x08009099
 8009044:	08009089 	.word	0x08009089
 8009048:	08009099 	.word	0x08009099
 800904c:	08009099 	.word	0x08009099
 8009050:	08009099 	.word	0x08009099
 8009054:	08009099 	.word	0x08009099
 8009058:	08009099 	.word	0x08009099
 800905c:	08009099 	.word	0x08009099
 8009060:	08009099 	.word	0x08009099
 8009064:	08009091 	.word	0x08009091
 8009068:	2301      	movs	r3, #1
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906e:	e0d6      	b.n	800921e <UART_SetConfig+0x7ae>
 8009070:	2304      	movs	r3, #4
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009076:	e0d2      	b.n	800921e <UART_SetConfig+0x7ae>
 8009078:	2308      	movs	r3, #8
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907e:	e0ce      	b.n	800921e <UART_SetConfig+0x7ae>
 8009080:	2310      	movs	r3, #16
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009086:	e0ca      	b.n	800921e <UART_SetConfig+0x7ae>
 8009088:	2320      	movs	r3, #32
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908e:	e0c6      	b.n	800921e <UART_SetConfig+0x7ae>
 8009090:	2340      	movs	r3, #64	@ 0x40
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009096:	e0c2      	b.n	800921e <UART_SetConfig+0x7ae>
 8009098:	2380      	movs	r3, #128	@ 0x80
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909e:	e0be      	b.n	800921e <UART_SetConfig+0x7ae>
 80090a0:	40011400 	.word	0x40011400
 80090a4:	58024400 	.word	0x58024400
 80090a8:	40007800 	.word	0x40007800
 80090ac:	40007c00 	.word	0x40007c00
 80090b0:	40011800 	.word	0x40011800
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4aad      	ldr	r2, [pc, #692]	@ (8009370 <UART_SetConfig+0x900>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d176      	bne.n	80091ac <UART_SetConfig+0x73c>
 80090be:	4bad      	ldr	r3, [pc, #692]	@ (8009374 <UART_SetConfig+0x904>)
 80090c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090c6:	2b28      	cmp	r3, #40	@ 0x28
 80090c8:	d86c      	bhi.n	80091a4 <UART_SetConfig+0x734>
 80090ca:	a201      	add	r2, pc, #4	@ (adr r2, 80090d0 <UART_SetConfig+0x660>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	08009175 	.word	0x08009175
 80090d4:	080091a5 	.word	0x080091a5
 80090d8:	080091a5 	.word	0x080091a5
 80090dc:	080091a5 	.word	0x080091a5
 80090e0:	080091a5 	.word	0x080091a5
 80090e4:	080091a5 	.word	0x080091a5
 80090e8:	080091a5 	.word	0x080091a5
 80090ec:	080091a5 	.word	0x080091a5
 80090f0:	0800917d 	.word	0x0800917d
 80090f4:	080091a5 	.word	0x080091a5
 80090f8:	080091a5 	.word	0x080091a5
 80090fc:	080091a5 	.word	0x080091a5
 8009100:	080091a5 	.word	0x080091a5
 8009104:	080091a5 	.word	0x080091a5
 8009108:	080091a5 	.word	0x080091a5
 800910c:	080091a5 	.word	0x080091a5
 8009110:	08009185 	.word	0x08009185
 8009114:	080091a5 	.word	0x080091a5
 8009118:	080091a5 	.word	0x080091a5
 800911c:	080091a5 	.word	0x080091a5
 8009120:	080091a5 	.word	0x080091a5
 8009124:	080091a5 	.word	0x080091a5
 8009128:	080091a5 	.word	0x080091a5
 800912c:	080091a5 	.word	0x080091a5
 8009130:	0800918d 	.word	0x0800918d
 8009134:	080091a5 	.word	0x080091a5
 8009138:	080091a5 	.word	0x080091a5
 800913c:	080091a5 	.word	0x080091a5
 8009140:	080091a5 	.word	0x080091a5
 8009144:	080091a5 	.word	0x080091a5
 8009148:	080091a5 	.word	0x080091a5
 800914c:	080091a5 	.word	0x080091a5
 8009150:	08009195 	.word	0x08009195
 8009154:	080091a5 	.word	0x080091a5
 8009158:	080091a5 	.word	0x080091a5
 800915c:	080091a5 	.word	0x080091a5
 8009160:	080091a5 	.word	0x080091a5
 8009164:	080091a5 	.word	0x080091a5
 8009168:	080091a5 	.word	0x080091a5
 800916c:	080091a5 	.word	0x080091a5
 8009170:	0800919d 	.word	0x0800919d
 8009174:	2301      	movs	r3, #1
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917a:	e050      	b.n	800921e <UART_SetConfig+0x7ae>
 800917c:	2304      	movs	r3, #4
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009182:	e04c      	b.n	800921e <UART_SetConfig+0x7ae>
 8009184:	2308      	movs	r3, #8
 8009186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918a:	e048      	b.n	800921e <UART_SetConfig+0x7ae>
 800918c:	2310      	movs	r3, #16
 800918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009192:	e044      	b.n	800921e <UART_SetConfig+0x7ae>
 8009194:	2320      	movs	r3, #32
 8009196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919a:	e040      	b.n	800921e <UART_SetConfig+0x7ae>
 800919c:	2340      	movs	r3, #64	@ 0x40
 800919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a2:	e03c      	b.n	800921e <UART_SetConfig+0x7ae>
 80091a4:	2380      	movs	r3, #128	@ 0x80
 80091a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091aa:	e038      	b.n	800921e <UART_SetConfig+0x7ae>
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a71      	ldr	r2, [pc, #452]	@ (8009378 <UART_SetConfig+0x908>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d130      	bne.n	8009218 <UART_SetConfig+0x7a8>
 80091b6:	4b6f      	ldr	r3, [pc, #444]	@ (8009374 <UART_SetConfig+0x904>)
 80091b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	2b05      	cmp	r3, #5
 80091c0:	d826      	bhi.n	8009210 <UART_SetConfig+0x7a0>
 80091c2:	a201      	add	r2, pc, #4	@ (adr r2, 80091c8 <UART_SetConfig+0x758>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091e1 	.word	0x080091e1
 80091cc:	080091e9 	.word	0x080091e9
 80091d0:	080091f1 	.word	0x080091f1
 80091d4:	080091f9 	.word	0x080091f9
 80091d8:	08009201 	.word	0x08009201
 80091dc:	08009209 	.word	0x08009209
 80091e0:	2302      	movs	r3, #2
 80091e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e6:	e01a      	b.n	800921e <UART_SetConfig+0x7ae>
 80091e8:	2304      	movs	r3, #4
 80091ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ee:	e016      	b.n	800921e <UART_SetConfig+0x7ae>
 80091f0:	2308      	movs	r3, #8
 80091f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f6:	e012      	b.n	800921e <UART_SetConfig+0x7ae>
 80091f8:	2310      	movs	r3, #16
 80091fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fe:	e00e      	b.n	800921e <UART_SetConfig+0x7ae>
 8009200:	2320      	movs	r3, #32
 8009202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009206:	e00a      	b.n	800921e <UART_SetConfig+0x7ae>
 8009208:	2340      	movs	r3, #64	@ 0x40
 800920a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920e:	e006      	b.n	800921e <UART_SetConfig+0x7ae>
 8009210:	2380      	movs	r3, #128	@ 0x80
 8009212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009216:	e002      	b.n	800921e <UART_SetConfig+0x7ae>
 8009218:	2380      	movs	r3, #128	@ 0x80
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a55      	ldr	r2, [pc, #340]	@ (8009378 <UART_SetConfig+0x908>)
 8009224:	4293      	cmp	r3, r2
 8009226:	f040 80f8 	bne.w	800941a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800922a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800922e:	2b20      	cmp	r3, #32
 8009230:	dc46      	bgt.n	80092c0 <UART_SetConfig+0x850>
 8009232:	2b02      	cmp	r3, #2
 8009234:	db75      	blt.n	8009322 <UART_SetConfig+0x8b2>
 8009236:	3b02      	subs	r3, #2
 8009238:	2b1e      	cmp	r3, #30
 800923a:	d872      	bhi.n	8009322 <UART_SetConfig+0x8b2>
 800923c:	a201      	add	r2, pc, #4	@ (adr r2, 8009244 <UART_SetConfig+0x7d4>)
 800923e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009242:	bf00      	nop
 8009244:	080092c7 	.word	0x080092c7
 8009248:	08009323 	.word	0x08009323
 800924c:	080092cf 	.word	0x080092cf
 8009250:	08009323 	.word	0x08009323
 8009254:	08009323 	.word	0x08009323
 8009258:	08009323 	.word	0x08009323
 800925c:	080092df 	.word	0x080092df
 8009260:	08009323 	.word	0x08009323
 8009264:	08009323 	.word	0x08009323
 8009268:	08009323 	.word	0x08009323
 800926c:	08009323 	.word	0x08009323
 8009270:	08009323 	.word	0x08009323
 8009274:	08009323 	.word	0x08009323
 8009278:	08009323 	.word	0x08009323
 800927c:	080092ef 	.word	0x080092ef
 8009280:	08009323 	.word	0x08009323
 8009284:	08009323 	.word	0x08009323
 8009288:	08009323 	.word	0x08009323
 800928c:	08009323 	.word	0x08009323
 8009290:	08009323 	.word	0x08009323
 8009294:	08009323 	.word	0x08009323
 8009298:	08009323 	.word	0x08009323
 800929c:	08009323 	.word	0x08009323
 80092a0:	08009323 	.word	0x08009323
 80092a4:	08009323 	.word	0x08009323
 80092a8:	08009323 	.word	0x08009323
 80092ac:	08009323 	.word	0x08009323
 80092b0:	08009323 	.word	0x08009323
 80092b4:	08009323 	.word	0x08009323
 80092b8:	08009323 	.word	0x08009323
 80092bc:	08009315 	.word	0x08009315
 80092c0:	2b40      	cmp	r3, #64	@ 0x40
 80092c2:	d02a      	beq.n	800931a <UART_SetConfig+0x8aa>
 80092c4:	e02d      	b.n	8009322 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80092c6:	f7fe f957 	bl	8007578 <HAL_RCCEx_GetD3PCLK1Freq>
 80092ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092cc:	e02f      	b.n	800932e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe f966 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092dc:	e027      	b.n	800932e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092de:	f107 0318 	add.w	r3, r7, #24
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe fab2 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ec:	e01f      	b.n	800932e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ee:	4b21      	ldr	r3, [pc, #132]	@ (8009374 <UART_SetConfig+0x904>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0320 	and.w	r3, r3, #32
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d009      	beq.n	800930e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092fa:	4b1e      	ldr	r3, [pc, #120]	@ (8009374 <UART_SetConfig+0x904>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	08db      	lsrs	r3, r3, #3
 8009300:	f003 0303 	and.w	r3, r3, #3
 8009304:	4a1d      	ldr	r2, [pc, #116]	@ (800937c <UART_SetConfig+0x90c>)
 8009306:	fa22 f303 	lsr.w	r3, r2, r3
 800930a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800930c:	e00f      	b.n	800932e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800930e:	4b1b      	ldr	r3, [pc, #108]	@ (800937c <UART_SetConfig+0x90c>)
 8009310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009312:	e00c      	b.n	800932e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009314:	4b1a      	ldr	r3, [pc, #104]	@ (8009380 <UART_SetConfig+0x910>)
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009318:	e009      	b.n	800932e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800931a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800931e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009320:	e005      	b.n	800932e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800932c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800932e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 81ee 	beq.w	8009712 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933a:	4a12      	ldr	r2, [pc, #72]	@ (8009384 <UART_SetConfig+0x914>)
 800933c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009340:	461a      	mov	r2, r3
 8009342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009344:	fbb3 f3f2 	udiv	r3, r3, r2
 8009348:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	4613      	mov	r3, r2
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	4413      	add	r3, r2
 8009354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009356:	429a      	cmp	r2, r3
 8009358:	d305      	bcc.n	8009366 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009362:	429a      	cmp	r2, r3
 8009364:	d910      	bls.n	8009388 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800936c:	e1d1      	b.n	8009712 <UART_SetConfig+0xca2>
 800936e:	bf00      	nop
 8009370:	40011c00 	.word	0x40011c00
 8009374:	58024400 	.word	0x58024400
 8009378:	58000c00 	.word	0x58000c00
 800937c:	03d09000 	.word	0x03d09000
 8009380:	003d0900 	.word	0x003d0900
 8009384:	0800cf80 	.word	0x0800cf80
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800938a:	2200      	movs	r2, #0
 800938c:	60bb      	str	r3, [r7, #8]
 800938e:	60fa      	str	r2, [r7, #12]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009394:	4ac0      	ldr	r2, [pc, #768]	@ (8009698 <UART_SetConfig+0xc28>)
 8009396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800939a:	b29b      	uxth	r3, r3
 800939c:	2200      	movs	r2, #0
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093aa:	f7f6 fff9 	bl	80003a0 <__aeabi_uldivmod>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	4610      	mov	r0, r2
 80093b4:	4619      	mov	r1, r3
 80093b6:	f04f 0200 	mov.w	r2, #0
 80093ba:	f04f 0300 	mov.w	r3, #0
 80093be:	020b      	lsls	r3, r1, #8
 80093c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093c4:	0202      	lsls	r2, r0, #8
 80093c6:	6979      	ldr	r1, [r7, #20]
 80093c8:	6849      	ldr	r1, [r1, #4]
 80093ca:	0849      	lsrs	r1, r1, #1
 80093cc:	2000      	movs	r0, #0
 80093ce:	460c      	mov	r4, r1
 80093d0:	4605      	mov	r5, r0
 80093d2:	eb12 0804 	adds.w	r8, r2, r4
 80093d6:	eb43 0905 	adc.w	r9, r3, r5
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	469a      	mov	sl, r3
 80093e2:	4693      	mov	fp, r2
 80093e4:	4652      	mov	r2, sl
 80093e6:	465b      	mov	r3, fp
 80093e8:	4640      	mov	r0, r8
 80093ea:	4649      	mov	r1, r9
 80093ec:	f7f6 ffd8 	bl	80003a0 <__aeabi_uldivmod>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4613      	mov	r3, r2
 80093f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093fe:	d308      	bcc.n	8009412 <UART_SetConfig+0x9a2>
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009406:	d204      	bcs.n	8009412 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800940e:	60da      	str	r2, [r3, #12]
 8009410:	e17f      	b.n	8009712 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009418:	e17b      	b.n	8009712 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009422:	f040 80bd 	bne.w	80095a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009426:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800942a:	2b20      	cmp	r3, #32
 800942c:	dc48      	bgt.n	80094c0 <UART_SetConfig+0xa50>
 800942e:	2b00      	cmp	r3, #0
 8009430:	db7b      	blt.n	800952a <UART_SetConfig+0xaba>
 8009432:	2b20      	cmp	r3, #32
 8009434:	d879      	bhi.n	800952a <UART_SetConfig+0xaba>
 8009436:	a201      	add	r2, pc, #4	@ (adr r2, 800943c <UART_SetConfig+0x9cc>)
 8009438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943c:	080094c7 	.word	0x080094c7
 8009440:	080094cf 	.word	0x080094cf
 8009444:	0800952b 	.word	0x0800952b
 8009448:	0800952b 	.word	0x0800952b
 800944c:	080094d7 	.word	0x080094d7
 8009450:	0800952b 	.word	0x0800952b
 8009454:	0800952b 	.word	0x0800952b
 8009458:	0800952b 	.word	0x0800952b
 800945c:	080094e7 	.word	0x080094e7
 8009460:	0800952b 	.word	0x0800952b
 8009464:	0800952b 	.word	0x0800952b
 8009468:	0800952b 	.word	0x0800952b
 800946c:	0800952b 	.word	0x0800952b
 8009470:	0800952b 	.word	0x0800952b
 8009474:	0800952b 	.word	0x0800952b
 8009478:	0800952b 	.word	0x0800952b
 800947c:	080094f7 	.word	0x080094f7
 8009480:	0800952b 	.word	0x0800952b
 8009484:	0800952b 	.word	0x0800952b
 8009488:	0800952b 	.word	0x0800952b
 800948c:	0800952b 	.word	0x0800952b
 8009490:	0800952b 	.word	0x0800952b
 8009494:	0800952b 	.word	0x0800952b
 8009498:	0800952b 	.word	0x0800952b
 800949c:	0800952b 	.word	0x0800952b
 80094a0:	0800952b 	.word	0x0800952b
 80094a4:	0800952b 	.word	0x0800952b
 80094a8:	0800952b 	.word	0x0800952b
 80094ac:	0800952b 	.word	0x0800952b
 80094b0:	0800952b 	.word	0x0800952b
 80094b4:	0800952b 	.word	0x0800952b
 80094b8:	0800952b 	.word	0x0800952b
 80094bc:	0800951d 	.word	0x0800951d
 80094c0:	2b40      	cmp	r3, #64	@ 0x40
 80094c2:	d02e      	beq.n	8009522 <UART_SetConfig+0xab2>
 80094c4:	e031      	b.n	800952a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094c6:	f7fc fe6d 	bl	80061a4 <HAL_RCC_GetPCLK1Freq>
 80094ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094cc:	e033      	b.n	8009536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094ce:	f7fc fe7f 	bl	80061d0 <HAL_RCC_GetPCLK2Freq>
 80094d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094d4:	e02f      	b.n	8009536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe f862 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e4:	e027      	b.n	8009536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094e6:	f107 0318 	add.w	r3, r7, #24
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe f9ae 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f4:	e01f      	b.n	8009536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094f6:	4b69      	ldr	r3, [pc, #420]	@ (800969c <UART_SetConfig+0xc2c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009502:	4b66      	ldr	r3, [pc, #408]	@ (800969c <UART_SetConfig+0xc2c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	08db      	lsrs	r3, r3, #3
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	4a64      	ldr	r2, [pc, #400]	@ (80096a0 <UART_SetConfig+0xc30>)
 800950e:	fa22 f303 	lsr.w	r3, r2, r3
 8009512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009514:	e00f      	b.n	8009536 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009516:	4b62      	ldr	r3, [pc, #392]	@ (80096a0 <UART_SetConfig+0xc30>)
 8009518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800951a:	e00c      	b.n	8009536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800951c:	4b61      	ldr	r3, [pc, #388]	@ (80096a4 <UART_SetConfig+0xc34>)
 800951e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009520:	e009      	b.n	8009536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009528:	e005      	b.n	8009536 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009534:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 80ea 	beq.w	8009712 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009542:	4a55      	ldr	r2, [pc, #340]	@ (8009698 <UART_SetConfig+0xc28>)
 8009544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009548:	461a      	mov	r2, r3
 800954a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800954c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009550:	005a      	lsls	r2, r3, #1
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	085b      	lsrs	r3, r3, #1
 8009558:	441a      	add	r2, r3
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009562:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009566:	2b0f      	cmp	r3, #15
 8009568:	d916      	bls.n	8009598 <UART_SetConfig+0xb28>
 800956a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009570:	d212      	bcs.n	8009598 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009574:	b29b      	uxth	r3, r3
 8009576:	f023 030f 	bic.w	r3, r3, #15
 800957a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800957c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	b29b      	uxth	r3, r3
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	b29a      	uxth	r2, r3
 8009588:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800958a:	4313      	orrs	r3, r2
 800958c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009594:	60da      	str	r2, [r3, #12]
 8009596:	e0bc      	b.n	8009712 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800959e:	e0b8      	b.n	8009712 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	dc4b      	bgt.n	8009640 <UART_SetConfig+0xbd0>
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f2c0 8087 	blt.w	80096bc <UART_SetConfig+0xc4c>
 80095ae:	2b20      	cmp	r3, #32
 80095b0:	f200 8084 	bhi.w	80096bc <UART_SetConfig+0xc4c>
 80095b4:	a201      	add	r2, pc, #4	@ (adr r2, 80095bc <UART_SetConfig+0xb4c>)
 80095b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ba:	bf00      	nop
 80095bc:	08009647 	.word	0x08009647
 80095c0:	0800964f 	.word	0x0800964f
 80095c4:	080096bd 	.word	0x080096bd
 80095c8:	080096bd 	.word	0x080096bd
 80095cc:	08009657 	.word	0x08009657
 80095d0:	080096bd 	.word	0x080096bd
 80095d4:	080096bd 	.word	0x080096bd
 80095d8:	080096bd 	.word	0x080096bd
 80095dc:	08009667 	.word	0x08009667
 80095e0:	080096bd 	.word	0x080096bd
 80095e4:	080096bd 	.word	0x080096bd
 80095e8:	080096bd 	.word	0x080096bd
 80095ec:	080096bd 	.word	0x080096bd
 80095f0:	080096bd 	.word	0x080096bd
 80095f4:	080096bd 	.word	0x080096bd
 80095f8:	080096bd 	.word	0x080096bd
 80095fc:	08009677 	.word	0x08009677
 8009600:	080096bd 	.word	0x080096bd
 8009604:	080096bd 	.word	0x080096bd
 8009608:	080096bd 	.word	0x080096bd
 800960c:	080096bd 	.word	0x080096bd
 8009610:	080096bd 	.word	0x080096bd
 8009614:	080096bd 	.word	0x080096bd
 8009618:	080096bd 	.word	0x080096bd
 800961c:	080096bd 	.word	0x080096bd
 8009620:	080096bd 	.word	0x080096bd
 8009624:	080096bd 	.word	0x080096bd
 8009628:	080096bd 	.word	0x080096bd
 800962c:	080096bd 	.word	0x080096bd
 8009630:	080096bd 	.word	0x080096bd
 8009634:	080096bd 	.word	0x080096bd
 8009638:	080096bd 	.word	0x080096bd
 800963c:	080096af 	.word	0x080096af
 8009640:	2b40      	cmp	r3, #64	@ 0x40
 8009642:	d037      	beq.n	80096b4 <UART_SetConfig+0xc44>
 8009644:	e03a      	b.n	80096bc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009646:	f7fc fdad 	bl	80061a4 <HAL_RCC_GetPCLK1Freq>
 800964a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800964c:	e03c      	b.n	80096c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800964e:	f7fc fdbf 	bl	80061d0 <HAL_RCC_GetPCLK2Freq>
 8009652:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009654:	e038      	b.n	80096c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800965a:	4618      	mov	r0, r3
 800965c:	f7fd ffa2 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009664:	e030      	b.n	80096c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009666:	f107 0318 	add.w	r3, r7, #24
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe f8ee 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009674:	e028      	b.n	80096c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009676:	4b09      	ldr	r3, [pc, #36]	@ (800969c <UART_SetConfig+0xc2c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0320 	and.w	r3, r3, #32
 800967e:	2b00      	cmp	r3, #0
 8009680:	d012      	beq.n	80096a8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009682:	4b06      	ldr	r3, [pc, #24]	@ (800969c <UART_SetConfig+0xc2c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	08db      	lsrs	r3, r3, #3
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	4a04      	ldr	r2, [pc, #16]	@ (80096a0 <UART_SetConfig+0xc30>)
 800968e:	fa22 f303 	lsr.w	r3, r2, r3
 8009692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009694:	e018      	b.n	80096c8 <UART_SetConfig+0xc58>
 8009696:	bf00      	nop
 8009698:	0800cf80 	.word	0x0800cf80
 800969c:	58024400 	.word	0x58024400
 80096a0:	03d09000 	.word	0x03d09000
 80096a4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80096a8:	4b24      	ldr	r3, [pc, #144]	@ (800973c <UART_SetConfig+0xccc>)
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ac:	e00c      	b.n	80096c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096ae:	4b24      	ldr	r3, [pc, #144]	@ (8009740 <UART_SetConfig+0xcd0>)
 80096b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b2:	e009      	b.n	80096c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ba:	e005      	b.n	80096c8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80096c6:	bf00      	nop
    }

    if (pclk != 0U)
 80096c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d021      	beq.n	8009712 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009744 <UART_SetConfig+0xcd4>)
 80096d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096d8:	461a      	mov	r2, r3
 80096da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	085b      	lsrs	r3, r3, #1
 80096e6:	441a      	add	r2, r3
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f4:	2b0f      	cmp	r3, #15
 80096f6:	d909      	bls.n	800970c <UART_SetConfig+0xc9c>
 80096f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096fe:	d205      	bcs.n	800970c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009702:	b29a      	uxth	r2, r3
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60da      	str	r2, [r3, #12]
 800970a:	e002      	b.n	8009712 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2201      	movs	r2, #1
 8009716:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2201      	movs	r2, #1
 800971e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	2200      	movs	r2, #0
 8009726:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	2200      	movs	r2, #0
 800972c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800972e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009732:	4618      	mov	r0, r3
 8009734:	3748      	adds	r7, #72	@ 0x48
 8009736:	46bd      	mov	sp, r7
 8009738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800973c:	03d09000 	.word	0x03d09000
 8009740:	003d0900 	.word	0x003d0900
 8009744:	0800cf80 	.word	0x0800cf80

08009748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009754:	f003 0308 	and.w	r3, r3, #8
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00a      	beq.n	8009772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	430a      	orrs	r2, r1
 8009792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00a      	beq.n	80097b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ba:	f003 0304 	and.w	r3, r3, #4
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00a      	beq.n	80097d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	430a      	orrs	r2, r1
 80097d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00a      	beq.n	80097fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00a      	beq.n	800981c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009824:	2b00      	cmp	r3, #0
 8009826:	d01a      	beq.n	800985e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	430a      	orrs	r2, r1
 800983c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009846:	d10a      	bne.n	800985e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	605a      	str	r2, [r3, #4]
  }
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b098      	sub	sp, #96	@ 0x60
 8009890:	af02      	add	r7, sp, #8
 8009892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800989c:	f7f8 f8f6 	bl	8001a8c <HAL_GetTick>
 80098a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0308 	and.w	r3, r3, #8
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d12f      	bne.n	8009910 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098b8:	2200      	movs	r2, #0
 80098ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f88e 	bl	80099e0 <UART_WaitOnFlagUntilTimeout>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d022      	beq.n	8009910 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d2:	e853 3f00 	ldrex	r3, [r3]
 80098d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098de:	653b      	str	r3, [r7, #80]	@ 0x50
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	461a      	mov	r2, r3
 80098e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80098ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098f0:	e841 2300 	strex	r3, r2, [r1]
 80098f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1e6      	bne.n	80098ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2220      	movs	r2, #32
 8009900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	e063      	b.n	80099d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	2b04      	cmp	r3, #4
 800991c:	d149      	bne.n	80099b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800991e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009926:	2200      	movs	r2, #0
 8009928:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f857 	bl	80099e0 <UART_WaitOnFlagUntilTimeout>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d03c      	beq.n	80099b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009940:	e853 3f00 	ldrex	r3, [r3]
 8009944:	623b      	str	r3, [r7, #32]
   return(result);
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800994c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009956:	633b      	str	r3, [r7, #48]	@ 0x30
 8009958:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800995c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e6      	bne.n	8009938 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3308      	adds	r3, #8
 8009970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	e853 3f00 	ldrex	r3, [r3]
 8009978:	60fb      	str	r3, [r7, #12]
   return(result);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f023 0301 	bic.w	r3, r3, #1
 8009980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3308      	adds	r3, #8
 8009988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800998a:	61fa      	str	r2, [r7, #28]
 800998c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998e:	69b9      	ldr	r1, [r7, #24]
 8009990:	69fa      	ldr	r2, [r7, #28]
 8009992:	e841 2300 	strex	r3, r2, [r1]
 8009996:	617b      	str	r3, [r7, #20]
   return(result);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e5      	bne.n	800996a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e012      	b.n	80099d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2220      	movs	r2, #32
 80099b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2220      	movs	r2, #32
 80099be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3758      	adds	r7, #88	@ 0x58
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	603b      	str	r3, [r7, #0]
 80099ec:	4613      	mov	r3, r2
 80099ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099f0:	e04f      	b.n	8009a92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f8:	d04b      	beq.n	8009a92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099fa:	f7f8 f847 	bl	8001a8c <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d302      	bcc.n	8009a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d101      	bne.n	8009a14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a10:	2303      	movs	r3, #3
 8009a12:	e04e      	b.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 0304 	and.w	r3, r3, #4
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d037      	beq.n	8009a92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b80      	cmp	r3, #128	@ 0x80
 8009a26:	d034      	beq.n	8009a92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2b40      	cmp	r3, #64	@ 0x40
 8009a2c:	d031      	beq.n	8009a92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	69db      	ldr	r3, [r3, #28]
 8009a34:	f003 0308 	and.w	r3, r3, #8
 8009a38:	2b08      	cmp	r3, #8
 8009a3a:	d110      	bne.n	8009a5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2208      	movs	r2, #8
 8009a42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 f921 	bl	8009c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e029      	b.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a6c:	d111      	bne.n	8009a92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 f907 	bl	8009c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2220      	movs	r2, #32
 8009a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e00f      	b.n	8009ab2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69da      	ldr	r2, [r3, #28]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	bf0c      	ite	eq
 8009aa2:	2301      	moveq	r3, #1
 8009aa4:	2300      	movne	r3, #0
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d0a0      	beq.n	80099f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b096      	sub	sp, #88	@ 0x58
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	88fa      	ldrh	r2, [r7, #6]
 8009ad4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2222      	movs	r2, #34	@ 0x22
 8009ae4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d02d      	beq.n	8009b4e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af8:	4a40      	ldr	r2, [pc, #256]	@ (8009bfc <UART_Start_Receive_DMA+0x140>)
 8009afa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b02:	4a3f      	ldr	r2, [pc, #252]	@ (8009c00 <UART_Start_Receive_DMA+0x144>)
 8009b04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8009c04 <UART_Start_Receive_DMA+0x148>)
 8009b0e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b16:	2200      	movs	r2, #0
 8009b18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3324      	adds	r3, #36	@ 0x24
 8009b26:	4619      	mov	r1, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	88fb      	ldrh	r3, [r7, #6]
 8009b30:	f7f8 fcf2 	bl	8002518 <HAL_DMA_Start_IT>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d009      	beq.n	8009b4e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2210      	movs	r2, #16
 8009b3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2220      	movs	r2, #32
 8009b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e051      	b.n	8009bf2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d018      	beq.n	8009b88 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b76:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e6      	bne.n	8009b56 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b92:	e853 3f00 	ldrex	r3, [r3]
 8009b96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9a:	f043 0301 	orr.w	r3, r3, #1
 8009b9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ba8:	637a      	str	r2, [r7, #52]	@ 0x34
 8009baa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009bae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bb0:	e841 2300 	strex	r3, r2, [r1]
 8009bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e5      	bne.n	8009b88 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	e853 3f00 	ldrex	r3, [r3]
 8009bca:	613b      	str	r3, [r7, #16]
   return(result);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3308      	adds	r3, #8
 8009bda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009bdc:	623a      	str	r2, [r7, #32]
 8009bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be0:	69f9      	ldr	r1, [r7, #28]
 8009be2:	6a3a      	ldr	r2, [r7, #32]
 8009be4:	e841 2300 	strex	r3, r2, [r1]
 8009be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1e5      	bne.n	8009bbc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3758      	adds	r7, #88	@ 0x58
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	08009d59 	.word	0x08009d59
 8009c00:	08009e81 	.word	0x08009e81
 8009c04:	08009ebf 	.word	0x08009ebf

08009c08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b08f      	sub	sp, #60	@ 0x3c
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c30:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e6      	bne.n	8009c10 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3308      	adds	r3, #8
 8009c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	e853 3f00 	ldrex	r3, [r3]
 8009c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3308      	adds	r3, #8
 8009c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c62:	61ba      	str	r2, [r7, #24]
 8009c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c66:	6979      	ldr	r1, [r7, #20]
 8009c68:	69ba      	ldr	r2, [r7, #24]
 8009c6a:	e841 2300 	strex	r3, r2, [r1]
 8009c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1e5      	bne.n	8009c42 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009c7e:	bf00      	nop
 8009c80:	373c      	adds	r7, #60	@ 0x3c
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
	...

08009c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b095      	sub	sp, #84	@ 0x54
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cba:	e841 2300 	strex	r3, r2, [r1]
 8009cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1e6      	bne.n	8009c94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3308      	adds	r3, #8
 8009ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	e853 3f00 	ldrex	r3, [r3]
 8009cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cd6:	69fa      	ldr	r2, [r7, #28]
 8009cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8009d54 <UART_EndRxTransfer+0xc8>)
 8009cda:	4013      	ands	r3, r2
 8009cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e5      	bne.n	8009cc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d118      	bne.n	8009d34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f023 0310 	bic.w	r3, r3, #16
 8009d16:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d20:	61bb      	str	r3, [r7, #24]
 8009d22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	6979      	ldr	r1, [r7, #20]
 8009d26:	69ba      	ldr	r2, [r7, #24]
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e6      	bne.n	8009d02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009d48:	bf00      	nop
 8009d4a:	3754      	adds	r7, #84	@ 0x54
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	effffffe 	.word	0xeffffffe

08009d58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b09c      	sub	sp, #112	@ 0x70
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d64:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d6e:	d071      	beq.n	8009e54 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d98:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009da4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e6      	bne.n	8009d78 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3308      	adds	r3, #8
 8009db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db4:	e853 3f00 	ldrex	r3, [r3]
 8009db8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dbc:	f023 0301 	bic.w	r3, r3, #1
 8009dc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009dca:	647a      	str	r2, [r7, #68]	@ 0x44
 8009dcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dd2:	e841 2300 	strex	r3, r2, [r1]
 8009dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e5      	bne.n	8009daa <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3308      	adds	r3, #8
 8009de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	e853 3f00 	ldrex	r3, [r3]
 8009dec:	623b      	str	r3, [r7, #32]
   return(result);
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009dfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e06:	e841 2300 	strex	r3, r2, [r1]
 8009e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e5      	bne.n	8009dde <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e14:	2220      	movs	r2, #32
 8009e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d118      	bne.n	8009e54 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	e853 3f00 	ldrex	r3, [r3]
 8009e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f023 0310 	bic.w	r3, r3, #16
 8009e36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e44:	69b9      	ldr	r1, [r7, #24]
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	e841 2300 	strex	r3, r2, [r1]
 8009e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1e6      	bne.n	8009e22 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e56:	2200      	movs	r2, #0
 8009e58:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d107      	bne.n	8009e72 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e6c:	f7f6 ff90 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e70:	e002      	b.n	8009e78 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009e72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e74:	f7fe fdde 	bl	8008a34 <HAL_UART_RxCpltCallback>
}
 8009e78:	bf00      	nop
 8009e7a:	3770      	adds	r7, #112	@ 0x70
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d109      	bne.n	8009eb0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ea2:	085b      	lsrs	r3, r3, #1
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f7f6 ff71 	bl	8000d90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009eae:	e002      	b.n	8009eb6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f7fe fdc9 	bl	8008a48 <HAL_UART_RxHalfCpltCallback>
}
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b086      	sub	sp, #24
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ed2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ee6:	2b80      	cmp	r3, #128	@ 0x80
 8009ee8:	d109      	bne.n	8009efe <UART_DMAError+0x40>
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	2b21      	cmp	r3, #33	@ 0x21
 8009eee:	d106      	bne.n	8009efe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009ef8:	6978      	ldr	r0, [r7, #20]
 8009efa:	f7ff fe85 	bl	8009c08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f08:	2b40      	cmp	r3, #64	@ 0x40
 8009f0a:	d109      	bne.n	8009f20 <UART_DMAError+0x62>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b22      	cmp	r3, #34	@ 0x22
 8009f10:	d106      	bne.n	8009f20 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009f1a:	6978      	ldr	r0, [r7, #20]
 8009f1c:	f7ff feb6 	bl	8009c8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f26:	f043 0210 	orr.w	r2, r3, #16
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f30:	6978      	ldr	r0, [r7, #20]
 8009f32:	f7fe fd93 	bl	8008a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f36:	bf00      	nop
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7fe fd81 	bl	8008a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b088      	sub	sp, #32
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	61bb      	str	r3, [r7, #24]
 8009f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6979      	ldr	r1, [r7, #20]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	613b      	str	r3, [r7, #16]
   return(result);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e6      	bne.n	8009f6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7fe fd38 	bl	8008a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb0:	bf00      	nop
 8009fb2:	3720      	adds	r7, #32
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <HAL_UARTEx_DisableFifoMode+0x16>
 800a006:	2302      	movs	r3, #2
 800a008:	e027      	b.n	800a05a <HAL_UARTEx_DisableFifoMode+0x66>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2224      	movs	r2, #36	@ 0x24
 800a016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f022 0201 	bic.w	r2, r2, #1
 800a030:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a038:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a076:	2b01      	cmp	r3, #1
 800a078:	d101      	bne.n	800a07e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a07a:	2302      	movs	r3, #2
 800a07c:	e02d      	b.n	800a0da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2224      	movs	r2, #36	@ 0x24
 800a08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f022 0201 	bic.w	r2, r2, #1
 800a0a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	683a      	ldr	r2, [r7, #0]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f8a4 	bl	800a208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d101      	bne.n	800a0fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	e02d      	b.n	800a156 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2224      	movs	r2, #36	@ 0x24
 800a106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0201 	bic.w	r2, r2, #1
 800a120:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f866 	bl	800a208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2220      	movs	r2, #32
 800a148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b08c      	sub	sp, #48	@ 0x30
 800a162:	af00      	add	r7, sp, #0
 800a164:	60f8      	str	r0, [r7, #12]
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	4613      	mov	r3, r2
 800a16a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a172:	2b20      	cmp	r3, #32
 800a174:	d142      	bne.n	800a1fc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d002      	beq.n	800a182 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a17c:	88fb      	ldrh	r3, [r7, #6]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e03b      	b.n	800a1fe <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2201      	movs	r2, #1
 800a18a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	461a      	mov	r2, r3
 800a196:	68b9      	ldr	r1, [r7, #8]
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f7ff fc8f 	bl	8009abc <UART_Start_Receive_DMA>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a1a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d124      	bne.n	800a1f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d11d      	bne.n	800a1f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2210      	movs	r2, #16
 800a1ba:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f043 0310 	orr.w	r3, r3, #16
 800a1d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1dc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	6a39      	ldr	r1, [r7, #32]
 800a1e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e6      	bne.n	800a1bc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a1ee:	e002      	b.n	800a1f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a1f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a1fa:	e000      	b.n	800a1fe <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a1fc:	2302      	movs	r3, #2
  }
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3730      	adds	r7, #48	@ 0x30
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a214:	2b00      	cmp	r3, #0
 800a216:	d108      	bne.n	800a22a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a228:	e031      	b.n	800a28e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a22a:	2310      	movs	r3, #16
 800a22c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a22e:	2310      	movs	r3, #16
 800a230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	0e5b      	lsrs	r3, r3, #25
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	f003 0307 	and.w	r3, r3, #7
 800a240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	0f5b      	lsrs	r3, r3, #29
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	f003 0307 	and.w	r3, r3, #7
 800a250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	7b3a      	ldrb	r2, [r7, #12]
 800a256:	4911      	ldr	r1, [pc, #68]	@ (800a29c <UARTEx_SetNbDataToProcess+0x94>)
 800a258:	5c8a      	ldrb	r2, [r1, r2]
 800a25a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a25e:	7b3a      	ldrb	r2, [r7, #12]
 800a260:	490f      	ldr	r1, [pc, #60]	@ (800a2a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a264:	fb93 f3f2 	sdiv	r3, r3, r2
 800a268:	b29a      	uxth	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a270:	7bfb      	ldrb	r3, [r7, #15]
 800a272:	7b7a      	ldrb	r2, [r7, #13]
 800a274:	4909      	ldr	r1, [pc, #36]	@ (800a29c <UARTEx_SetNbDataToProcess+0x94>)
 800a276:	5c8a      	ldrb	r2, [r1, r2]
 800a278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a27c:	7b7a      	ldrb	r2, [r7, #13]
 800a27e:	4908      	ldr	r1, [pc, #32]	@ (800a2a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a282:	fb93 f3f2 	sdiv	r3, r3, r2
 800a286:	b29a      	uxth	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a28e:	bf00      	nop
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	0800cf98 	.word	0x0800cf98
 800a2a0:	0800cfa0 	.word	0x0800cfa0

0800a2a4 <__cvt>:
 800a2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2a6:	ed2d 8b02 	vpush	{d8}
 800a2aa:	eeb0 8b40 	vmov.f64	d8, d0
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	4617      	mov	r7, r2
 800a2b2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a2b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2b6:	ee18 2a90 	vmov	r2, s17
 800a2ba:	f025 0520 	bic.w	r5, r5, #32
 800a2be:	2a00      	cmp	r2, #0
 800a2c0:	bfb6      	itet	lt
 800a2c2:	222d      	movlt	r2, #45	@ 0x2d
 800a2c4:	2200      	movge	r2, #0
 800a2c6:	eeb1 8b40 	vneglt.f64	d8, d0
 800a2ca:	2d46      	cmp	r5, #70	@ 0x46
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	701a      	strb	r2, [r3, #0]
 800a2d0:	d004      	beq.n	800a2dc <__cvt+0x38>
 800a2d2:	2d45      	cmp	r5, #69	@ 0x45
 800a2d4:	d100      	bne.n	800a2d8 <__cvt+0x34>
 800a2d6:	3401      	adds	r4, #1
 800a2d8:	2102      	movs	r1, #2
 800a2da:	e000      	b.n	800a2de <__cvt+0x3a>
 800a2dc:	2103      	movs	r1, #3
 800a2de:	ab03      	add	r3, sp, #12
 800a2e0:	9301      	str	r3, [sp, #4]
 800a2e2:	ab02      	add	r3, sp, #8
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	4633      	mov	r3, r6
 800a2ea:	eeb0 0b48 	vmov.f64	d0, d8
 800a2ee:	f000 ff4f 	bl	800b190 <_dtoa_r>
 800a2f2:	2d47      	cmp	r5, #71	@ 0x47
 800a2f4:	d114      	bne.n	800a320 <__cvt+0x7c>
 800a2f6:	07fb      	lsls	r3, r7, #31
 800a2f8:	d50a      	bpl.n	800a310 <__cvt+0x6c>
 800a2fa:	1902      	adds	r2, r0, r4
 800a2fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a304:	bf08      	it	eq
 800a306:	9203      	streq	r2, [sp, #12]
 800a308:	2130      	movs	r1, #48	@ 0x30
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d319      	bcc.n	800a344 <__cvt+0xa0>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a314:	1a1b      	subs	r3, r3, r0
 800a316:	6013      	str	r3, [r2, #0]
 800a318:	b005      	add	sp, #20
 800a31a:	ecbd 8b02 	vpop	{d8}
 800a31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a320:	2d46      	cmp	r5, #70	@ 0x46
 800a322:	eb00 0204 	add.w	r2, r0, r4
 800a326:	d1e9      	bne.n	800a2fc <__cvt+0x58>
 800a328:	7803      	ldrb	r3, [r0, #0]
 800a32a:	2b30      	cmp	r3, #48	@ 0x30
 800a32c:	d107      	bne.n	800a33e <__cvt+0x9a>
 800a32e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a336:	bf1c      	itt	ne
 800a338:	f1c4 0401 	rsbne	r4, r4, #1
 800a33c:	6034      	strne	r4, [r6, #0]
 800a33e:	6833      	ldr	r3, [r6, #0]
 800a340:	441a      	add	r2, r3
 800a342:	e7db      	b.n	800a2fc <__cvt+0x58>
 800a344:	1c5c      	adds	r4, r3, #1
 800a346:	9403      	str	r4, [sp, #12]
 800a348:	7019      	strb	r1, [r3, #0]
 800a34a:	e7de      	b.n	800a30a <__cvt+0x66>

0800a34c <__exponent>:
 800a34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a34e:	2900      	cmp	r1, #0
 800a350:	bfba      	itte	lt
 800a352:	4249      	neglt	r1, r1
 800a354:	232d      	movlt	r3, #45	@ 0x2d
 800a356:	232b      	movge	r3, #43	@ 0x2b
 800a358:	2909      	cmp	r1, #9
 800a35a:	7002      	strb	r2, [r0, #0]
 800a35c:	7043      	strb	r3, [r0, #1]
 800a35e:	dd29      	ble.n	800a3b4 <__exponent+0x68>
 800a360:	f10d 0307 	add.w	r3, sp, #7
 800a364:	461d      	mov	r5, r3
 800a366:	270a      	movs	r7, #10
 800a368:	461a      	mov	r2, r3
 800a36a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a36e:	fb07 1416 	mls	r4, r7, r6, r1
 800a372:	3430      	adds	r4, #48	@ 0x30
 800a374:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a378:	460c      	mov	r4, r1
 800a37a:	2c63      	cmp	r4, #99	@ 0x63
 800a37c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a380:	4631      	mov	r1, r6
 800a382:	dcf1      	bgt.n	800a368 <__exponent+0x1c>
 800a384:	3130      	adds	r1, #48	@ 0x30
 800a386:	1e94      	subs	r4, r2, #2
 800a388:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a38c:	1c41      	adds	r1, r0, #1
 800a38e:	4623      	mov	r3, r4
 800a390:	42ab      	cmp	r3, r5
 800a392:	d30a      	bcc.n	800a3aa <__exponent+0x5e>
 800a394:	f10d 0309 	add.w	r3, sp, #9
 800a398:	1a9b      	subs	r3, r3, r2
 800a39a:	42ac      	cmp	r4, r5
 800a39c:	bf88      	it	hi
 800a39e:	2300      	movhi	r3, #0
 800a3a0:	3302      	adds	r3, #2
 800a3a2:	4403      	add	r3, r0
 800a3a4:	1a18      	subs	r0, r3, r0
 800a3a6:	b003      	add	sp, #12
 800a3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a3ae:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a3b2:	e7ed      	b.n	800a390 <__exponent+0x44>
 800a3b4:	2330      	movs	r3, #48	@ 0x30
 800a3b6:	3130      	adds	r1, #48	@ 0x30
 800a3b8:	7083      	strb	r3, [r0, #2]
 800a3ba:	70c1      	strb	r1, [r0, #3]
 800a3bc:	1d03      	adds	r3, r0, #4
 800a3be:	e7f1      	b.n	800a3a4 <__exponent+0x58>

0800a3c0 <_printf_float>:
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	b08d      	sub	sp, #52	@ 0x34
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	461f      	mov	r7, r3
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	f000 fdcf 	bl	800af74 <_localeconv_r>
 800a3d6:	f8d0 b000 	ldr.w	fp, [r0]
 800a3da:	4658      	mov	r0, fp
 800a3dc:	f7f5 ffd8 	bl	8000390 <strlen>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a3ec:	6822      	ldr	r2, [r4, #0]
 800a3ee:	9005      	str	r0, [sp, #20]
 800a3f0:	3307      	adds	r3, #7
 800a3f2:	f023 0307 	bic.w	r3, r3, #7
 800a3f6:	f103 0108 	add.w	r1, r3, #8
 800a3fa:	f8c8 1000 	str.w	r1, [r8]
 800a3fe:	ed93 0b00 	vldr	d0, [r3]
 800a402:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a660 <_printf_float+0x2a0>
 800a406:	eeb0 7bc0 	vabs.f64	d7, d0
 800a40a:	eeb4 7b46 	vcmp.f64	d7, d6
 800a40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a412:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a416:	dd24      	ble.n	800a462 <_printf_float+0xa2>
 800a418:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a420:	d502      	bpl.n	800a428 <_printf_float+0x68>
 800a422:	232d      	movs	r3, #45	@ 0x2d
 800a424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a428:	498f      	ldr	r1, [pc, #572]	@ (800a668 <_printf_float+0x2a8>)
 800a42a:	4b90      	ldr	r3, [pc, #576]	@ (800a66c <_printf_float+0x2ac>)
 800a42c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a430:	bf8c      	ite	hi
 800a432:	4688      	movhi	r8, r1
 800a434:	4698      	movls	r8, r3
 800a436:	f022 0204 	bic.w	r2, r2, #4
 800a43a:	2303      	movs	r3, #3
 800a43c:	6123      	str	r3, [r4, #16]
 800a43e:	6022      	str	r2, [r4, #0]
 800a440:	f04f 0a00 	mov.w	sl, #0
 800a444:	9700      	str	r7, [sp, #0]
 800a446:	4633      	mov	r3, r6
 800a448:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a44a:	4621      	mov	r1, r4
 800a44c:	4628      	mov	r0, r5
 800a44e:	f000 f9d1 	bl	800a7f4 <_printf_common>
 800a452:	3001      	adds	r0, #1
 800a454:	f040 8089 	bne.w	800a56a <_printf_float+0x1aa>
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	b00d      	add	sp, #52	@ 0x34
 800a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a462:	eeb4 0b40 	vcmp.f64	d0, d0
 800a466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a46a:	d709      	bvc.n	800a480 <_printf_float+0xc0>
 800a46c:	ee10 3a90 	vmov	r3, s1
 800a470:	2b00      	cmp	r3, #0
 800a472:	bfbc      	itt	lt
 800a474:	232d      	movlt	r3, #45	@ 0x2d
 800a476:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a47a:	497d      	ldr	r1, [pc, #500]	@ (800a670 <_printf_float+0x2b0>)
 800a47c:	4b7d      	ldr	r3, [pc, #500]	@ (800a674 <_printf_float+0x2b4>)
 800a47e:	e7d5      	b.n	800a42c <_printf_float+0x6c>
 800a480:	6863      	ldr	r3, [r4, #4]
 800a482:	1c59      	adds	r1, r3, #1
 800a484:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a488:	d139      	bne.n	800a4fe <_printf_float+0x13e>
 800a48a:	2306      	movs	r3, #6
 800a48c:	6063      	str	r3, [r4, #4]
 800a48e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a492:	2300      	movs	r3, #0
 800a494:	6022      	str	r2, [r4, #0]
 800a496:	9303      	str	r3, [sp, #12]
 800a498:	ab0a      	add	r3, sp, #40	@ 0x28
 800a49a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a49e:	ab09      	add	r3, sp, #36	@ 0x24
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	6861      	ldr	r1, [r4, #4]
 800a4a4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f7ff fefb 	bl	800a2a4 <__cvt>
 800a4ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a4b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	d129      	bne.n	800a50c <_printf_float+0x14c>
 800a4b8:	1cc8      	adds	r0, r1, #3
 800a4ba:	db02      	blt.n	800a4c2 <_printf_float+0x102>
 800a4bc:	6863      	ldr	r3, [r4, #4]
 800a4be:	4299      	cmp	r1, r3
 800a4c0:	dd41      	ble.n	800a546 <_printf_float+0x186>
 800a4c2:	f1a9 0902 	sub.w	r9, r9, #2
 800a4c6:	fa5f f989 	uxtb.w	r9, r9
 800a4ca:	3901      	subs	r1, #1
 800a4cc:	464a      	mov	r2, r9
 800a4ce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a4d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4d4:	f7ff ff3a 	bl	800a34c <__exponent>
 800a4d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4da:	1813      	adds	r3, r2, r0
 800a4dc:	2a01      	cmp	r2, #1
 800a4de:	4682      	mov	sl, r0
 800a4e0:	6123      	str	r3, [r4, #16]
 800a4e2:	dc02      	bgt.n	800a4ea <_printf_float+0x12a>
 800a4e4:	6822      	ldr	r2, [r4, #0]
 800a4e6:	07d2      	lsls	r2, r2, #31
 800a4e8:	d501      	bpl.n	800a4ee <_printf_float+0x12e>
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	6123      	str	r3, [r4, #16]
 800a4ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0a6      	beq.n	800a444 <_printf_float+0x84>
 800a4f6:	232d      	movs	r3, #45	@ 0x2d
 800a4f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4fc:	e7a2      	b.n	800a444 <_printf_float+0x84>
 800a4fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a502:	d1c4      	bne.n	800a48e <_printf_float+0xce>
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1c2      	bne.n	800a48e <_printf_float+0xce>
 800a508:	2301      	movs	r3, #1
 800a50a:	e7bf      	b.n	800a48c <_printf_float+0xcc>
 800a50c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a510:	d9db      	bls.n	800a4ca <_printf_float+0x10a>
 800a512:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a516:	d118      	bne.n	800a54a <_printf_float+0x18a>
 800a518:	2900      	cmp	r1, #0
 800a51a:	6863      	ldr	r3, [r4, #4]
 800a51c:	dd0b      	ble.n	800a536 <_printf_float+0x176>
 800a51e:	6121      	str	r1, [r4, #16]
 800a520:	b913      	cbnz	r3, 800a528 <_printf_float+0x168>
 800a522:	6822      	ldr	r2, [r4, #0]
 800a524:	07d0      	lsls	r0, r2, #31
 800a526:	d502      	bpl.n	800a52e <_printf_float+0x16e>
 800a528:	3301      	adds	r3, #1
 800a52a:	440b      	add	r3, r1
 800a52c:	6123      	str	r3, [r4, #16]
 800a52e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a530:	f04f 0a00 	mov.w	sl, #0
 800a534:	e7db      	b.n	800a4ee <_printf_float+0x12e>
 800a536:	b913      	cbnz	r3, 800a53e <_printf_float+0x17e>
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	07d2      	lsls	r2, r2, #31
 800a53c:	d501      	bpl.n	800a542 <_printf_float+0x182>
 800a53e:	3302      	adds	r3, #2
 800a540:	e7f4      	b.n	800a52c <_printf_float+0x16c>
 800a542:	2301      	movs	r3, #1
 800a544:	e7f2      	b.n	800a52c <_printf_float+0x16c>
 800a546:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a54a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a54c:	4299      	cmp	r1, r3
 800a54e:	db05      	blt.n	800a55c <_printf_float+0x19c>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	6121      	str	r1, [r4, #16]
 800a554:	07d8      	lsls	r0, r3, #31
 800a556:	d5ea      	bpl.n	800a52e <_printf_float+0x16e>
 800a558:	1c4b      	adds	r3, r1, #1
 800a55a:	e7e7      	b.n	800a52c <_printf_float+0x16c>
 800a55c:	2900      	cmp	r1, #0
 800a55e:	bfd4      	ite	le
 800a560:	f1c1 0202 	rsble	r2, r1, #2
 800a564:	2201      	movgt	r2, #1
 800a566:	4413      	add	r3, r2
 800a568:	e7e0      	b.n	800a52c <_printf_float+0x16c>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	055a      	lsls	r2, r3, #21
 800a56e:	d407      	bmi.n	800a580 <_printf_float+0x1c0>
 800a570:	6923      	ldr	r3, [r4, #16]
 800a572:	4642      	mov	r2, r8
 800a574:	4631      	mov	r1, r6
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	d12a      	bne.n	800a5d4 <_printf_float+0x214>
 800a57e:	e76b      	b.n	800a458 <_printf_float+0x98>
 800a580:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a584:	f240 80e0 	bls.w	800a748 <_printf_float+0x388>
 800a588:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a58c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a594:	d133      	bne.n	800a5fe <_printf_float+0x23e>
 800a596:	4a38      	ldr	r2, [pc, #224]	@ (800a678 <_printf_float+0x2b8>)
 800a598:	2301      	movs	r3, #1
 800a59a:	4631      	mov	r1, r6
 800a59c:	4628      	mov	r0, r5
 800a59e:	47b8      	blx	r7
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	f43f af59 	beq.w	800a458 <_printf_float+0x98>
 800a5a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a5aa:	4543      	cmp	r3, r8
 800a5ac:	db02      	blt.n	800a5b4 <_printf_float+0x1f4>
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	07d8      	lsls	r0, r3, #31
 800a5b2:	d50f      	bpl.n	800a5d4 <_printf_float+0x214>
 800a5b4:	9b05      	ldr	r3, [sp, #20]
 800a5b6:	465a      	mov	r2, fp
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	47b8      	blx	r7
 800a5be:	3001      	adds	r0, #1
 800a5c0:	f43f af4a 	beq.w	800a458 <_printf_float+0x98>
 800a5c4:	f04f 0900 	mov.w	r9, #0
 800a5c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a5cc:	f104 0a1a 	add.w	sl, r4, #26
 800a5d0:	45c8      	cmp	r8, r9
 800a5d2:	dc09      	bgt.n	800a5e8 <_printf_float+0x228>
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	079b      	lsls	r3, r3, #30
 800a5d8:	f100 8107 	bmi.w	800a7ea <_printf_float+0x42a>
 800a5dc:	68e0      	ldr	r0, [r4, #12]
 800a5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5e0:	4298      	cmp	r0, r3
 800a5e2:	bfb8      	it	lt
 800a5e4:	4618      	movlt	r0, r3
 800a5e6:	e739      	b.n	800a45c <_printf_float+0x9c>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	4652      	mov	r2, sl
 800a5ec:	4631      	mov	r1, r6
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	47b8      	blx	r7
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	f43f af30 	beq.w	800a458 <_printf_float+0x98>
 800a5f8:	f109 0901 	add.w	r9, r9, #1
 800a5fc:	e7e8      	b.n	800a5d0 <_printf_float+0x210>
 800a5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	dc3b      	bgt.n	800a67c <_printf_float+0x2bc>
 800a604:	4a1c      	ldr	r2, [pc, #112]	@ (800a678 <_printf_float+0x2b8>)
 800a606:	2301      	movs	r3, #1
 800a608:	4631      	mov	r1, r6
 800a60a:	4628      	mov	r0, r5
 800a60c:	47b8      	blx	r7
 800a60e:	3001      	adds	r0, #1
 800a610:	f43f af22 	beq.w	800a458 <_printf_float+0x98>
 800a614:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a618:	ea59 0303 	orrs.w	r3, r9, r3
 800a61c:	d102      	bne.n	800a624 <_printf_float+0x264>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	07d9      	lsls	r1, r3, #31
 800a622:	d5d7      	bpl.n	800a5d4 <_printf_float+0x214>
 800a624:	9b05      	ldr	r3, [sp, #20]
 800a626:	465a      	mov	r2, fp
 800a628:	4631      	mov	r1, r6
 800a62a:	4628      	mov	r0, r5
 800a62c:	47b8      	blx	r7
 800a62e:	3001      	adds	r0, #1
 800a630:	f43f af12 	beq.w	800a458 <_printf_float+0x98>
 800a634:	f04f 0a00 	mov.w	sl, #0
 800a638:	f104 0b1a 	add.w	fp, r4, #26
 800a63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a63e:	425b      	negs	r3, r3
 800a640:	4553      	cmp	r3, sl
 800a642:	dc01      	bgt.n	800a648 <_printf_float+0x288>
 800a644:	464b      	mov	r3, r9
 800a646:	e794      	b.n	800a572 <_printf_float+0x1b2>
 800a648:	2301      	movs	r3, #1
 800a64a:	465a      	mov	r2, fp
 800a64c:	4631      	mov	r1, r6
 800a64e:	4628      	mov	r0, r5
 800a650:	47b8      	blx	r7
 800a652:	3001      	adds	r0, #1
 800a654:	f43f af00 	beq.w	800a458 <_printf_float+0x98>
 800a658:	f10a 0a01 	add.w	sl, sl, #1
 800a65c:	e7ee      	b.n	800a63c <_printf_float+0x27c>
 800a65e:	bf00      	nop
 800a660:	ffffffff 	.word	0xffffffff
 800a664:	7fefffff 	.word	0x7fefffff
 800a668:	0800cfac 	.word	0x0800cfac
 800a66c:	0800cfa8 	.word	0x0800cfa8
 800a670:	0800cfb4 	.word	0x0800cfb4
 800a674:	0800cfb0 	.word	0x0800cfb0
 800a678:	0800cfb8 	.word	0x0800cfb8
 800a67c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a67e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a682:	4553      	cmp	r3, sl
 800a684:	bfa8      	it	ge
 800a686:	4653      	movge	r3, sl
 800a688:	2b00      	cmp	r3, #0
 800a68a:	4699      	mov	r9, r3
 800a68c:	dc37      	bgt.n	800a6fe <_printf_float+0x33e>
 800a68e:	2300      	movs	r3, #0
 800a690:	9307      	str	r3, [sp, #28]
 800a692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a696:	f104 021a 	add.w	r2, r4, #26
 800a69a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a69c:	9907      	ldr	r1, [sp, #28]
 800a69e:	9306      	str	r3, [sp, #24]
 800a6a0:	eba3 0309 	sub.w	r3, r3, r9
 800a6a4:	428b      	cmp	r3, r1
 800a6a6:	dc31      	bgt.n	800a70c <_printf_float+0x34c>
 800a6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6aa:	459a      	cmp	sl, r3
 800a6ac:	dc3b      	bgt.n	800a726 <_printf_float+0x366>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	07da      	lsls	r2, r3, #31
 800a6b2:	d438      	bmi.n	800a726 <_printf_float+0x366>
 800a6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b6:	ebaa 0903 	sub.w	r9, sl, r3
 800a6ba:	9b06      	ldr	r3, [sp, #24]
 800a6bc:	ebaa 0303 	sub.w	r3, sl, r3
 800a6c0:	4599      	cmp	r9, r3
 800a6c2:	bfa8      	it	ge
 800a6c4:	4699      	movge	r9, r3
 800a6c6:	f1b9 0f00 	cmp.w	r9, #0
 800a6ca:	dc34      	bgt.n	800a736 <_printf_float+0x376>
 800a6cc:	f04f 0800 	mov.w	r8, #0
 800a6d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6d4:	f104 0b1a 	add.w	fp, r4, #26
 800a6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6da:	ebaa 0303 	sub.w	r3, sl, r3
 800a6de:	eba3 0309 	sub.w	r3, r3, r9
 800a6e2:	4543      	cmp	r3, r8
 800a6e4:	f77f af76 	ble.w	800a5d4 <_printf_float+0x214>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	465a      	mov	r2, fp
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	47b8      	blx	r7
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	f43f aeb0 	beq.w	800a458 <_printf_float+0x98>
 800a6f8:	f108 0801 	add.w	r8, r8, #1
 800a6fc:	e7ec      	b.n	800a6d8 <_printf_float+0x318>
 800a6fe:	4642      	mov	r2, r8
 800a700:	4631      	mov	r1, r6
 800a702:	4628      	mov	r0, r5
 800a704:	47b8      	blx	r7
 800a706:	3001      	adds	r0, #1
 800a708:	d1c1      	bne.n	800a68e <_printf_float+0x2ce>
 800a70a:	e6a5      	b.n	800a458 <_printf_float+0x98>
 800a70c:	2301      	movs	r3, #1
 800a70e:	4631      	mov	r1, r6
 800a710:	4628      	mov	r0, r5
 800a712:	9206      	str	r2, [sp, #24]
 800a714:	47b8      	blx	r7
 800a716:	3001      	adds	r0, #1
 800a718:	f43f ae9e 	beq.w	800a458 <_printf_float+0x98>
 800a71c:	9b07      	ldr	r3, [sp, #28]
 800a71e:	9a06      	ldr	r2, [sp, #24]
 800a720:	3301      	adds	r3, #1
 800a722:	9307      	str	r3, [sp, #28]
 800a724:	e7b9      	b.n	800a69a <_printf_float+0x2da>
 800a726:	9b05      	ldr	r3, [sp, #20]
 800a728:	465a      	mov	r2, fp
 800a72a:	4631      	mov	r1, r6
 800a72c:	4628      	mov	r0, r5
 800a72e:	47b8      	blx	r7
 800a730:	3001      	adds	r0, #1
 800a732:	d1bf      	bne.n	800a6b4 <_printf_float+0x2f4>
 800a734:	e690      	b.n	800a458 <_printf_float+0x98>
 800a736:	9a06      	ldr	r2, [sp, #24]
 800a738:	464b      	mov	r3, r9
 800a73a:	4442      	add	r2, r8
 800a73c:	4631      	mov	r1, r6
 800a73e:	4628      	mov	r0, r5
 800a740:	47b8      	blx	r7
 800a742:	3001      	adds	r0, #1
 800a744:	d1c2      	bne.n	800a6cc <_printf_float+0x30c>
 800a746:	e687      	b.n	800a458 <_printf_float+0x98>
 800a748:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a74c:	f1b9 0f01 	cmp.w	r9, #1
 800a750:	dc01      	bgt.n	800a756 <_printf_float+0x396>
 800a752:	07db      	lsls	r3, r3, #31
 800a754:	d536      	bpl.n	800a7c4 <_printf_float+0x404>
 800a756:	2301      	movs	r3, #1
 800a758:	4642      	mov	r2, r8
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	f43f ae79 	beq.w	800a458 <_printf_float+0x98>
 800a766:	9b05      	ldr	r3, [sp, #20]
 800a768:	465a      	mov	r2, fp
 800a76a:	4631      	mov	r1, r6
 800a76c:	4628      	mov	r0, r5
 800a76e:	47b8      	blx	r7
 800a770:	3001      	adds	r0, #1
 800a772:	f43f ae71 	beq.w	800a458 <_printf_float+0x98>
 800a776:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a77a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a782:	f109 39ff 	add.w	r9, r9, #4294967295
 800a786:	d018      	beq.n	800a7ba <_printf_float+0x3fa>
 800a788:	464b      	mov	r3, r9
 800a78a:	f108 0201 	add.w	r2, r8, #1
 800a78e:	4631      	mov	r1, r6
 800a790:	4628      	mov	r0, r5
 800a792:	47b8      	blx	r7
 800a794:	3001      	adds	r0, #1
 800a796:	d10c      	bne.n	800a7b2 <_printf_float+0x3f2>
 800a798:	e65e      	b.n	800a458 <_printf_float+0x98>
 800a79a:	2301      	movs	r3, #1
 800a79c:	465a      	mov	r2, fp
 800a79e:	4631      	mov	r1, r6
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	47b8      	blx	r7
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	f43f ae57 	beq.w	800a458 <_printf_float+0x98>
 800a7aa:	f108 0801 	add.w	r8, r8, #1
 800a7ae:	45c8      	cmp	r8, r9
 800a7b0:	dbf3      	blt.n	800a79a <_printf_float+0x3da>
 800a7b2:	4653      	mov	r3, sl
 800a7b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a7b8:	e6dc      	b.n	800a574 <_printf_float+0x1b4>
 800a7ba:	f04f 0800 	mov.w	r8, #0
 800a7be:	f104 0b1a 	add.w	fp, r4, #26
 800a7c2:	e7f4      	b.n	800a7ae <_printf_float+0x3ee>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	4642      	mov	r2, r8
 800a7c8:	e7e1      	b.n	800a78e <_printf_float+0x3ce>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	464a      	mov	r2, r9
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	47b8      	blx	r7
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	f43f ae3f 	beq.w	800a458 <_printf_float+0x98>
 800a7da:	f108 0801 	add.w	r8, r8, #1
 800a7de:	68e3      	ldr	r3, [r4, #12]
 800a7e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7e2:	1a5b      	subs	r3, r3, r1
 800a7e4:	4543      	cmp	r3, r8
 800a7e6:	dcf0      	bgt.n	800a7ca <_printf_float+0x40a>
 800a7e8:	e6f8      	b.n	800a5dc <_printf_float+0x21c>
 800a7ea:	f04f 0800 	mov.w	r8, #0
 800a7ee:	f104 0919 	add.w	r9, r4, #25
 800a7f2:	e7f4      	b.n	800a7de <_printf_float+0x41e>

0800a7f4 <_printf_common>:
 800a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	4616      	mov	r6, r2
 800a7fa:	4698      	mov	r8, r3
 800a7fc:	688a      	ldr	r2, [r1, #8]
 800a7fe:	690b      	ldr	r3, [r1, #16]
 800a800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a804:	4293      	cmp	r3, r2
 800a806:	bfb8      	it	lt
 800a808:	4613      	movlt	r3, r2
 800a80a:	6033      	str	r3, [r6, #0]
 800a80c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a810:	4607      	mov	r7, r0
 800a812:	460c      	mov	r4, r1
 800a814:	b10a      	cbz	r2, 800a81a <_printf_common+0x26>
 800a816:	3301      	adds	r3, #1
 800a818:	6033      	str	r3, [r6, #0]
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	0699      	lsls	r1, r3, #26
 800a81e:	bf42      	ittt	mi
 800a820:	6833      	ldrmi	r3, [r6, #0]
 800a822:	3302      	addmi	r3, #2
 800a824:	6033      	strmi	r3, [r6, #0]
 800a826:	6825      	ldr	r5, [r4, #0]
 800a828:	f015 0506 	ands.w	r5, r5, #6
 800a82c:	d106      	bne.n	800a83c <_printf_common+0x48>
 800a82e:	f104 0a19 	add.w	sl, r4, #25
 800a832:	68e3      	ldr	r3, [r4, #12]
 800a834:	6832      	ldr	r2, [r6, #0]
 800a836:	1a9b      	subs	r3, r3, r2
 800a838:	42ab      	cmp	r3, r5
 800a83a:	dc26      	bgt.n	800a88a <_printf_common+0x96>
 800a83c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a840:	6822      	ldr	r2, [r4, #0]
 800a842:	3b00      	subs	r3, #0
 800a844:	bf18      	it	ne
 800a846:	2301      	movne	r3, #1
 800a848:	0692      	lsls	r2, r2, #26
 800a84a:	d42b      	bmi.n	800a8a4 <_printf_common+0xb0>
 800a84c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a850:	4641      	mov	r1, r8
 800a852:	4638      	mov	r0, r7
 800a854:	47c8      	blx	r9
 800a856:	3001      	adds	r0, #1
 800a858:	d01e      	beq.n	800a898 <_printf_common+0xa4>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	6922      	ldr	r2, [r4, #16]
 800a85e:	f003 0306 	and.w	r3, r3, #6
 800a862:	2b04      	cmp	r3, #4
 800a864:	bf02      	ittt	eq
 800a866:	68e5      	ldreq	r5, [r4, #12]
 800a868:	6833      	ldreq	r3, [r6, #0]
 800a86a:	1aed      	subeq	r5, r5, r3
 800a86c:	68a3      	ldr	r3, [r4, #8]
 800a86e:	bf0c      	ite	eq
 800a870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a874:	2500      	movne	r5, #0
 800a876:	4293      	cmp	r3, r2
 800a878:	bfc4      	itt	gt
 800a87a:	1a9b      	subgt	r3, r3, r2
 800a87c:	18ed      	addgt	r5, r5, r3
 800a87e:	2600      	movs	r6, #0
 800a880:	341a      	adds	r4, #26
 800a882:	42b5      	cmp	r5, r6
 800a884:	d11a      	bne.n	800a8bc <_printf_common+0xc8>
 800a886:	2000      	movs	r0, #0
 800a888:	e008      	b.n	800a89c <_printf_common+0xa8>
 800a88a:	2301      	movs	r3, #1
 800a88c:	4652      	mov	r2, sl
 800a88e:	4641      	mov	r1, r8
 800a890:	4638      	mov	r0, r7
 800a892:	47c8      	blx	r9
 800a894:	3001      	adds	r0, #1
 800a896:	d103      	bne.n	800a8a0 <_printf_common+0xac>
 800a898:	f04f 30ff 	mov.w	r0, #4294967295
 800a89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a0:	3501      	adds	r5, #1
 800a8a2:	e7c6      	b.n	800a832 <_printf_common+0x3e>
 800a8a4:	18e1      	adds	r1, r4, r3
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	2030      	movs	r0, #48	@ 0x30
 800a8aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a8ae:	4422      	add	r2, r4
 800a8b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8b8:	3302      	adds	r3, #2
 800a8ba:	e7c7      	b.n	800a84c <_printf_common+0x58>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4641      	mov	r1, r8
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	47c8      	blx	r9
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d0e6      	beq.n	800a898 <_printf_common+0xa4>
 800a8ca:	3601      	adds	r6, #1
 800a8cc:	e7d9      	b.n	800a882 <_printf_common+0x8e>
	...

0800a8d0 <_printf_i>:
 800a8d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	7e0f      	ldrb	r7, [r1, #24]
 800a8d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8d8:	2f78      	cmp	r7, #120	@ 0x78
 800a8da:	4691      	mov	r9, r2
 800a8dc:	4680      	mov	r8, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	469a      	mov	sl, r3
 800a8e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8e6:	d807      	bhi.n	800a8f8 <_printf_i+0x28>
 800a8e8:	2f62      	cmp	r7, #98	@ 0x62
 800a8ea:	d80a      	bhi.n	800a902 <_printf_i+0x32>
 800a8ec:	2f00      	cmp	r7, #0
 800a8ee:	f000 80d1 	beq.w	800aa94 <_printf_i+0x1c4>
 800a8f2:	2f58      	cmp	r7, #88	@ 0x58
 800a8f4:	f000 80b8 	beq.w	800aa68 <_printf_i+0x198>
 800a8f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a900:	e03a      	b.n	800a978 <_printf_i+0xa8>
 800a902:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a906:	2b15      	cmp	r3, #21
 800a908:	d8f6      	bhi.n	800a8f8 <_printf_i+0x28>
 800a90a:	a101      	add	r1, pc, #4	@ (adr r1, 800a910 <_printf_i+0x40>)
 800a90c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a910:	0800a969 	.word	0x0800a969
 800a914:	0800a97d 	.word	0x0800a97d
 800a918:	0800a8f9 	.word	0x0800a8f9
 800a91c:	0800a8f9 	.word	0x0800a8f9
 800a920:	0800a8f9 	.word	0x0800a8f9
 800a924:	0800a8f9 	.word	0x0800a8f9
 800a928:	0800a97d 	.word	0x0800a97d
 800a92c:	0800a8f9 	.word	0x0800a8f9
 800a930:	0800a8f9 	.word	0x0800a8f9
 800a934:	0800a8f9 	.word	0x0800a8f9
 800a938:	0800a8f9 	.word	0x0800a8f9
 800a93c:	0800aa7b 	.word	0x0800aa7b
 800a940:	0800a9a7 	.word	0x0800a9a7
 800a944:	0800aa35 	.word	0x0800aa35
 800a948:	0800a8f9 	.word	0x0800a8f9
 800a94c:	0800a8f9 	.word	0x0800a8f9
 800a950:	0800aa9d 	.word	0x0800aa9d
 800a954:	0800a8f9 	.word	0x0800a8f9
 800a958:	0800a9a7 	.word	0x0800a9a7
 800a95c:	0800a8f9 	.word	0x0800a8f9
 800a960:	0800a8f9 	.word	0x0800a8f9
 800a964:	0800aa3d 	.word	0x0800aa3d
 800a968:	6833      	ldr	r3, [r6, #0]
 800a96a:	1d1a      	adds	r2, r3, #4
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6032      	str	r2, [r6, #0]
 800a970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a974:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a978:	2301      	movs	r3, #1
 800a97a:	e09c      	b.n	800aab6 <_printf_i+0x1e6>
 800a97c:	6833      	ldr	r3, [r6, #0]
 800a97e:	6820      	ldr	r0, [r4, #0]
 800a980:	1d19      	adds	r1, r3, #4
 800a982:	6031      	str	r1, [r6, #0]
 800a984:	0606      	lsls	r6, r0, #24
 800a986:	d501      	bpl.n	800a98c <_printf_i+0xbc>
 800a988:	681d      	ldr	r5, [r3, #0]
 800a98a:	e003      	b.n	800a994 <_printf_i+0xc4>
 800a98c:	0645      	lsls	r5, r0, #25
 800a98e:	d5fb      	bpl.n	800a988 <_printf_i+0xb8>
 800a990:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a994:	2d00      	cmp	r5, #0
 800a996:	da03      	bge.n	800a9a0 <_printf_i+0xd0>
 800a998:	232d      	movs	r3, #45	@ 0x2d
 800a99a:	426d      	negs	r5, r5
 800a99c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9a0:	4858      	ldr	r0, [pc, #352]	@ (800ab04 <_printf_i+0x234>)
 800a9a2:	230a      	movs	r3, #10
 800a9a4:	e011      	b.n	800a9ca <_printf_i+0xfa>
 800a9a6:	6821      	ldr	r1, [r4, #0]
 800a9a8:	6833      	ldr	r3, [r6, #0]
 800a9aa:	0608      	lsls	r0, r1, #24
 800a9ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9b0:	d402      	bmi.n	800a9b8 <_printf_i+0xe8>
 800a9b2:	0649      	lsls	r1, r1, #25
 800a9b4:	bf48      	it	mi
 800a9b6:	b2ad      	uxthmi	r5, r5
 800a9b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9ba:	4852      	ldr	r0, [pc, #328]	@ (800ab04 <_printf_i+0x234>)
 800a9bc:	6033      	str	r3, [r6, #0]
 800a9be:	bf14      	ite	ne
 800a9c0:	230a      	movne	r3, #10
 800a9c2:	2308      	moveq	r3, #8
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9ca:	6866      	ldr	r6, [r4, #4]
 800a9cc:	60a6      	str	r6, [r4, #8]
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	db05      	blt.n	800a9de <_printf_i+0x10e>
 800a9d2:	6821      	ldr	r1, [r4, #0]
 800a9d4:	432e      	orrs	r6, r5
 800a9d6:	f021 0104 	bic.w	r1, r1, #4
 800a9da:	6021      	str	r1, [r4, #0]
 800a9dc:	d04b      	beq.n	800aa76 <_printf_i+0x1a6>
 800a9de:	4616      	mov	r6, r2
 800a9e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9e4:	fb03 5711 	mls	r7, r3, r1, r5
 800a9e8:	5dc7      	ldrb	r7, [r0, r7]
 800a9ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9ee:	462f      	mov	r7, r5
 800a9f0:	42bb      	cmp	r3, r7
 800a9f2:	460d      	mov	r5, r1
 800a9f4:	d9f4      	bls.n	800a9e0 <_printf_i+0x110>
 800a9f6:	2b08      	cmp	r3, #8
 800a9f8:	d10b      	bne.n	800aa12 <_printf_i+0x142>
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	07df      	lsls	r7, r3, #31
 800a9fe:	d508      	bpl.n	800aa12 <_printf_i+0x142>
 800aa00:	6923      	ldr	r3, [r4, #16]
 800aa02:	6861      	ldr	r1, [r4, #4]
 800aa04:	4299      	cmp	r1, r3
 800aa06:	bfde      	ittt	le
 800aa08:	2330      	movle	r3, #48	@ 0x30
 800aa0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa12:	1b92      	subs	r2, r2, r6
 800aa14:	6122      	str	r2, [r4, #16]
 800aa16:	f8cd a000 	str.w	sl, [sp]
 800aa1a:	464b      	mov	r3, r9
 800aa1c:	aa03      	add	r2, sp, #12
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4640      	mov	r0, r8
 800aa22:	f7ff fee7 	bl	800a7f4 <_printf_common>
 800aa26:	3001      	adds	r0, #1
 800aa28:	d14a      	bne.n	800aac0 <_printf_i+0x1f0>
 800aa2a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2e:	b004      	add	sp, #16
 800aa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	f043 0320 	orr.w	r3, r3, #32
 800aa3a:	6023      	str	r3, [r4, #0]
 800aa3c:	4832      	ldr	r0, [pc, #200]	@ (800ab08 <_printf_i+0x238>)
 800aa3e:	2778      	movs	r7, #120	@ 0x78
 800aa40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	6831      	ldr	r1, [r6, #0]
 800aa48:	061f      	lsls	r7, r3, #24
 800aa4a:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa4e:	d402      	bmi.n	800aa56 <_printf_i+0x186>
 800aa50:	065f      	lsls	r7, r3, #25
 800aa52:	bf48      	it	mi
 800aa54:	b2ad      	uxthmi	r5, r5
 800aa56:	6031      	str	r1, [r6, #0]
 800aa58:	07d9      	lsls	r1, r3, #31
 800aa5a:	bf44      	itt	mi
 800aa5c:	f043 0320 	orrmi.w	r3, r3, #32
 800aa60:	6023      	strmi	r3, [r4, #0]
 800aa62:	b11d      	cbz	r5, 800aa6c <_printf_i+0x19c>
 800aa64:	2310      	movs	r3, #16
 800aa66:	e7ad      	b.n	800a9c4 <_printf_i+0xf4>
 800aa68:	4826      	ldr	r0, [pc, #152]	@ (800ab04 <_printf_i+0x234>)
 800aa6a:	e7e9      	b.n	800aa40 <_printf_i+0x170>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	f023 0320 	bic.w	r3, r3, #32
 800aa72:	6023      	str	r3, [r4, #0]
 800aa74:	e7f6      	b.n	800aa64 <_printf_i+0x194>
 800aa76:	4616      	mov	r6, r2
 800aa78:	e7bd      	b.n	800a9f6 <_printf_i+0x126>
 800aa7a:	6833      	ldr	r3, [r6, #0]
 800aa7c:	6825      	ldr	r5, [r4, #0]
 800aa7e:	6961      	ldr	r1, [r4, #20]
 800aa80:	1d18      	adds	r0, r3, #4
 800aa82:	6030      	str	r0, [r6, #0]
 800aa84:	062e      	lsls	r6, r5, #24
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	d501      	bpl.n	800aa8e <_printf_i+0x1be>
 800aa8a:	6019      	str	r1, [r3, #0]
 800aa8c:	e002      	b.n	800aa94 <_printf_i+0x1c4>
 800aa8e:	0668      	lsls	r0, r5, #25
 800aa90:	d5fb      	bpl.n	800aa8a <_printf_i+0x1ba>
 800aa92:	8019      	strh	r1, [r3, #0]
 800aa94:	2300      	movs	r3, #0
 800aa96:	6123      	str	r3, [r4, #16]
 800aa98:	4616      	mov	r6, r2
 800aa9a:	e7bc      	b.n	800aa16 <_printf_i+0x146>
 800aa9c:	6833      	ldr	r3, [r6, #0]
 800aa9e:	1d1a      	adds	r2, r3, #4
 800aaa0:	6032      	str	r2, [r6, #0]
 800aaa2:	681e      	ldr	r6, [r3, #0]
 800aaa4:	6862      	ldr	r2, [r4, #4]
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7f5 fc21 	bl	80002f0 <memchr>
 800aaae:	b108      	cbz	r0, 800aab4 <_printf_i+0x1e4>
 800aab0:	1b80      	subs	r0, r0, r6
 800aab2:	6060      	str	r0, [r4, #4]
 800aab4:	6863      	ldr	r3, [r4, #4]
 800aab6:	6123      	str	r3, [r4, #16]
 800aab8:	2300      	movs	r3, #0
 800aaba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aabe:	e7aa      	b.n	800aa16 <_printf_i+0x146>
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	4632      	mov	r2, r6
 800aac4:	4649      	mov	r1, r9
 800aac6:	4640      	mov	r0, r8
 800aac8:	47d0      	blx	sl
 800aaca:	3001      	adds	r0, #1
 800aacc:	d0ad      	beq.n	800aa2a <_printf_i+0x15a>
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	079b      	lsls	r3, r3, #30
 800aad2:	d413      	bmi.n	800aafc <_printf_i+0x22c>
 800aad4:	68e0      	ldr	r0, [r4, #12]
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	4298      	cmp	r0, r3
 800aada:	bfb8      	it	lt
 800aadc:	4618      	movlt	r0, r3
 800aade:	e7a6      	b.n	800aa2e <_printf_i+0x15e>
 800aae0:	2301      	movs	r3, #1
 800aae2:	4632      	mov	r2, r6
 800aae4:	4649      	mov	r1, r9
 800aae6:	4640      	mov	r0, r8
 800aae8:	47d0      	blx	sl
 800aaea:	3001      	adds	r0, #1
 800aaec:	d09d      	beq.n	800aa2a <_printf_i+0x15a>
 800aaee:	3501      	adds	r5, #1
 800aaf0:	68e3      	ldr	r3, [r4, #12]
 800aaf2:	9903      	ldr	r1, [sp, #12]
 800aaf4:	1a5b      	subs	r3, r3, r1
 800aaf6:	42ab      	cmp	r3, r5
 800aaf8:	dcf2      	bgt.n	800aae0 <_printf_i+0x210>
 800aafa:	e7eb      	b.n	800aad4 <_printf_i+0x204>
 800aafc:	2500      	movs	r5, #0
 800aafe:	f104 0619 	add.w	r6, r4, #25
 800ab02:	e7f5      	b.n	800aaf0 <_printf_i+0x220>
 800ab04:	0800cfba 	.word	0x0800cfba
 800ab08:	0800cfcb 	.word	0x0800cfcb

0800ab0c <std>:
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	b510      	push	{r4, lr}
 800ab10:	4604      	mov	r4, r0
 800ab12:	e9c0 3300 	strd	r3, r3, [r0]
 800ab16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab1a:	6083      	str	r3, [r0, #8]
 800ab1c:	8181      	strh	r1, [r0, #12]
 800ab1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab20:	81c2      	strh	r2, [r0, #14]
 800ab22:	6183      	str	r3, [r0, #24]
 800ab24:	4619      	mov	r1, r3
 800ab26:	2208      	movs	r2, #8
 800ab28:	305c      	adds	r0, #92	@ 0x5c
 800ab2a:	f000 fa1b 	bl	800af64 <memset>
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab64 <std+0x58>)
 800ab30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab32:	4b0d      	ldr	r3, [pc, #52]	@ (800ab68 <std+0x5c>)
 800ab34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab36:	4b0d      	ldr	r3, [pc, #52]	@ (800ab6c <std+0x60>)
 800ab38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab70 <std+0x64>)
 800ab3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab74 <std+0x68>)
 800ab40:	6224      	str	r4, [r4, #32]
 800ab42:	429c      	cmp	r4, r3
 800ab44:	d006      	beq.n	800ab54 <std+0x48>
 800ab46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab4a:	4294      	cmp	r4, r2
 800ab4c:	d002      	beq.n	800ab54 <std+0x48>
 800ab4e:	33d0      	adds	r3, #208	@ 0xd0
 800ab50:	429c      	cmp	r4, r3
 800ab52:	d105      	bne.n	800ab60 <std+0x54>
 800ab54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab5c:	f000 ba7e 	b.w	800b05c <__retarget_lock_init_recursive>
 800ab60:	bd10      	pop	{r4, pc}
 800ab62:	bf00      	nop
 800ab64:	0800adb5 	.word	0x0800adb5
 800ab68:	0800add7 	.word	0x0800add7
 800ab6c:	0800ae0f 	.word	0x0800ae0f
 800ab70:	0800ae33 	.word	0x0800ae33
 800ab74:	240007f0 	.word	0x240007f0

0800ab78 <stdio_exit_handler>:
 800ab78:	4a02      	ldr	r2, [pc, #8]	@ (800ab84 <stdio_exit_handler+0xc>)
 800ab7a:	4903      	ldr	r1, [pc, #12]	@ (800ab88 <stdio_exit_handler+0x10>)
 800ab7c:	4803      	ldr	r0, [pc, #12]	@ (800ab8c <stdio_exit_handler+0x14>)
 800ab7e:	f000 b869 	b.w	800ac54 <_fwalk_sglue>
 800ab82:	bf00      	nop
 800ab84:	24000010 	.word	0x24000010
 800ab88:	0800cb7d 	.word	0x0800cb7d
 800ab8c:	24000020 	.word	0x24000020

0800ab90 <cleanup_stdio>:
 800ab90:	6841      	ldr	r1, [r0, #4]
 800ab92:	4b0c      	ldr	r3, [pc, #48]	@ (800abc4 <cleanup_stdio+0x34>)
 800ab94:	4299      	cmp	r1, r3
 800ab96:	b510      	push	{r4, lr}
 800ab98:	4604      	mov	r4, r0
 800ab9a:	d001      	beq.n	800aba0 <cleanup_stdio+0x10>
 800ab9c:	f001 ffee 	bl	800cb7c <_fflush_r>
 800aba0:	68a1      	ldr	r1, [r4, #8]
 800aba2:	4b09      	ldr	r3, [pc, #36]	@ (800abc8 <cleanup_stdio+0x38>)
 800aba4:	4299      	cmp	r1, r3
 800aba6:	d002      	beq.n	800abae <cleanup_stdio+0x1e>
 800aba8:	4620      	mov	r0, r4
 800abaa:	f001 ffe7 	bl	800cb7c <_fflush_r>
 800abae:	68e1      	ldr	r1, [r4, #12]
 800abb0:	4b06      	ldr	r3, [pc, #24]	@ (800abcc <cleanup_stdio+0x3c>)
 800abb2:	4299      	cmp	r1, r3
 800abb4:	d004      	beq.n	800abc0 <cleanup_stdio+0x30>
 800abb6:	4620      	mov	r0, r4
 800abb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abbc:	f001 bfde 	b.w	800cb7c <_fflush_r>
 800abc0:	bd10      	pop	{r4, pc}
 800abc2:	bf00      	nop
 800abc4:	240007f0 	.word	0x240007f0
 800abc8:	24000858 	.word	0x24000858
 800abcc:	240008c0 	.word	0x240008c0

0800abd0 <global_stdio_init.part.0>:
 800abd0:	b510      	push	{r4, lr}
 800abd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ac00 <global_stdio_init.part.0+0x30>)
 800abd4:	4c0b      	ldr	r4, [pc, #44]	@ (800ac04 <global_stdio_init.part.0+0x34>)
 800abd6:	4a0c      	ldr	r2, [pc, #48]	@ (800ac08 <global_stdio_init.part.0+0x38>)
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	4620      	mov	r0, r4
 800abdc:	2200      	movs	r2, #0
 800abde:	2104      	movs	r1, #4
 800abe0:	f7ff ff94 	bl	800ab0c <std>
 800abe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abe8:	2201      	movs	r2, #1
 800abea:	2109      	movs	r1, #9
 800abec:	f7ff ff8e 	bl	800ab0c <std>
 800abf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abf4:	2202      	movs	r2, #2
 800abf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abfa:	2112      	movs	r1, #18
 800abfc:	f7ff bf86 	b.w	800ab0c <std>
 800ac00:	24000928 	.word	0x24000928
 800ac04:	240007f0 	.word	0x240007f0
 800ac08:	0800ab79 	.word	0x0800ab79

0800ac0c <__sfp_lock_acquire>:
 800ac0c:	4801      	ldr	r0, [pc, #4]	@ (800ac14 <__sfp_lock_acquire+0x8>)
 800ac0e:	f000 ba26 	b.w	800b05e <__retarget_lock_acquire_recursive>
 800ac12:	bf00      	nop
 800ac14:	24000931 	.word	0x24000931

0800ac18 <__sfp_lock_release>:
 800ac18:	4801      	ldr	r0, [pc, #4]	@ (800ac20 <__sfp_lock_release+0x8>)
 800ac1a:	f000 ba21 	b.w	800b060 <__retarget_lock_release_recursive>
 800ac1e:	bf00      	nop
 800ac20:	24000931 	.word	0x24000931

0800ac24 <__sinit>:
 800ac24:	b510      	push	{r4, lr}
 800ac26:	4604      	mov	r4, r0
 800ac28:	f7ff fff0 	bl	800ac0c <__sfp_lock_acquire>
 800ac2c:	6a23      	ldr	r3, [r4, #32]
 800ac2e:	b11b      	cbz	r3, 800ac38 <__sinit+0x14>
 800ac30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac34:	f7ff bff0 	b.w	800ac18 <__sfp_lock_release>
 800ac38:	4b04      	ldr	r3, [pc, #16]	@ (800ac4c <__sinit+0x28>)
 800ac3a:	6223      	str	r3, [r4, #32]
 800ac3c:	4b04      	ldr	r3, [pc, #16]	@ (800ac50 <__sinit+0x2c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1f5      	bne.n	800ac30 <__sinit+0xc>
 800ac44:	f7ff ffc4 	bl	800abd0 <global_stdio_init.part.0>
 800ac48:	e7f2      	b.n	800ac30 <__sinit+0xc>
 800ac4a:	bf00      	nop
 800ac4c:	0800ab91 	.word	0x0800ab91
 800ac50:	24000928 	.word	0x24000928

0800ac54 <_fwalk_sglue>:
 800ac54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac58:	4607      	mov	r7, r0
 800ac5a:	4688      	mov	r8, r1
 800ac5c:	4614      	mov	r4, r2
 800ac5e:	2600      	movs	r6, #0
 800ac60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac64:	f1b9 0901 	subs.w	r9, r9, #1
 800ac68:	d505      	bpl.n	800ac76 <_fwalk_sglue+0x22>
 800ac6a:	6824      	ldr	r4, [r4, #0]
 800ac6c:	2c00      	cmp	r4, #0
 800ac6e:	d1f7      	bne.n	800ac60 <_fwalk_sglue+0xc>
 800ac70:	4630      	mov	r0, r6
 800ac72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac76:	89ab      	ldrh	r3, [r5, #12]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d907      	bls.n	800ac8c <_fwalk_sglue+0x38>
 800ac7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac80:	3301      	adds	r3, #1
 800ac82:	d003      	beq.n	800ac8c <_fwalk_sglue+0x38>
 800ac84:	4629      	mov	r1, r5
 800ac86:	4638      	mov	r0, r7
 800ac88:	47c0      	blx	r8
 800ac8a:	4306      	orrs	r6, r0
 800ac8c:	3568      	adds	r5, #104	@ 0x68
 800ac8e:	e7e9      	b.n	800ac64 <_fwalk_sglue+0x10>

0800ac90 <iprintf>:
 800ac90:	b40f      	push	{r0, r1, r2, r3}
 800ac92:	b507      	push	{r0, r1, r2, lr}
 800ac94:	4906      	ldr	r1, [pc, #24]	@ (800acb0 <iprintf+0x20>)
 800ac96:	ab04      	add	r3, sp, #16
 800ac98:	6808      	ldr	r0, [r1, #0]
 800ac9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9e:	6881      	ldr	r1, [r0, #8]
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	f001 fdcf 	bl	800c844 <_vfiprintf_r>
 800aca6:	b003      	add	sp, #12
 800aca8:	f85d eb04 	ldr.w	lr, [sp], #4
 800acac:	b004      	add	sp, #16
 800acae:	4770      	bx	lr
 800acb0:	2400001c 	.word	0x2400001c

0800acb4 <_puts_r>:
 800acb4:	6a03      	ldr	r3, [r0, #32]
 800acb6:	b570      	push	{r4, r5, r6, lr}
 800acb8:	6884      	ldr	r4, [r0, #8]
 800acba:	4605      	mov	r5, r0
 800acbc:	460e      	mov	r6, r1
 800acbe:	b90b      	cbnz	r3, 800acc4 <_puts_r+0x10>
 800acc0:	f7ff ffb0 	bl	800ac24 <__sinit>
 800acc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acc6:	07db      	lsls	r3, r3, #31
 800acc8:	d405      	bmi.n	800acd6 <_puts_r+0x22>
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	0598      	lsls	r0, r3, #22
 800acce:	d402      	bmi.n	800acd6 <_puts_r+0x22>
 800acd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acd2:	f000 f9c4 	bl	800b05e <__retarget_lock_acquire_recursive>
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	0719      	lsls	r1, r3, #28
 800acda:	d502      	bpl.n	800ace2 <_puts_r+0x2e>
 800acdc:	6923      	ldr	r3, [r4, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d135      	bne.n	800ad4e <_puts_r+0x9a>
 800ace2:	4621      	mov	r1, r4
 800ace4:	4628      	mov	r0, r5
 800ace6:	f000 f8e7 	bl	800aeb8 <__swsetup_r>
 800acea:	b380      	cbz	r0, 800ad4e <_puts_r+0x9a>
 800acec:	f04f 35ff 	mov.w	r5, #4294967295
 800acf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acf2:	07da      	lsls	r2, r3, #31
 800acf4:	d405      	bmi.n	800ad02 <_puts_r+0x4e>
 800acf6:	89a3      	ldrh	r3, [r4, #12]
 800acf8:	059b      	lsls	r3, r3, #22
 800acfa:	d402      	bmi.n	800ad02 <_puts_r+0x4e>
 800acfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acfe:	f000 f9af 	bl	800b060 <__retarget_lock_release_recursive>
 800ad02:	4628      	mov	r0, r5
 800ad04:	bd70      	pop	{r4, r5, r6, pc}
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	da04      	bge.n	800ad14 <_puts_r+0x60>
 800ad0a:	69a2      	ldr	r2, [r4, #24]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	dc17      	bgt.n	800ad40 <_puts_r+0x8c>
 800ad10:	290a      	cmp	r1, #10
 800ad12:	d015      	beq.n	800ad40 <_puts_r+0x8c>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	1c5a      	adds	r2, r3, #1
 800ad18:	6022      	str	r2, [r4, #0]
 800ad1a:	7019      	strb	r1, [r3, #0]
 800ad1c:	68a3      	ldr	r3, [r4, #8]
 800ad1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ad22:	3b01      	subs	r3, #1
 800ad24:	60a3      	str	r3, [r4, #8]
 800ad26:	2900      	cmp	r1, #0
 800ad28:	d1ed      	bne.n	800ad06 <_puts_r+0x52>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	da11      	bge.n	800ad52 <_puts_r+0x9e>
 800ad2e:	4622      	mov	r2, r4
 800ad30:	210a      	movs	r1, #10
 800ad32:	4628      	mov	r0, r5
 800ad34:	f000 f881 	bl	800ae3a <__swbuf_r>
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d0d7      	beq.n	800acec <_puts_r+0x38>
 800ad3c:	250a      	movs	r5, #10
 800ad3e:	e7d7      	b.n	800acf0 <_puts_r+0x3c>
 800ad40:	4622      	mov	r2, r4
 800ad42:	4628      	mov	r0, r5
 800ad44:	f000 f879 	bl	800ae3a <__swbuf_r>
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d1e7      	bne.n	800ad1c <_puts_r+0x68>
 800ad4c:	e7ce      	b.n	800acec <_puts_r+0x38>
 800ad4e:	3e01      	subs	r6, #1
 800ad50:	e7e4      	b.n	800ad1c <_puts_r+0x68>
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	6022      	str	r2, [r4, #0]
 800ad58:	220a      	movs	r2, #10
 800ad5a:	701a      	strb	r2, [r3, #0]
 800ad5c:	e7ee      	b.n	800ad3c <_puts_r+0x88>
	...

0800ad60 <puts>:
 800ad60:	4b02      	ldr	r3, [pc, #8]	@ (800ad6c <puts+0xc>)
 800ad62:	4601      	mov	r1, r0
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	f7ff bfa5 	b.w	800acb4 <_puts_r>
 800ad6a:	bf00      	nop
 800ad6c:	2400001c 	.word	0x2400001c

0800ad70 <siprintf>:
 800ad70:	b40e      	push	{r1, r2, r3}
 800ad72:	b510      	push	{r4, lr}
 800ad74:	b09d      	sub	sp, #116	@ 0x74
 800ad76:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ad78:	9002      	str	r0, [sp, #8]
 800ad7a:	9006      	str	r0, [sp, #24]
 800ad7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad80:	480a      	ldr	r0, [pc, #40]	@ (800adac <siprintf+0x3c>)
 800ad82:	9107      	str	r1, [sp, #28]
 800ad84:	9104      	str	r1, [sp, #16]
 800ad86:	490a      	ldr	r1, [pc, #40]	@ (800adb0 <siprintf+0x40>)
 800ad88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad8c:	9105      	str	r1, [sp, #20]
 800ad8e:	2400      	movs	r4, #0
 800ad90:	a902      	add	r1, sp, #8
 800ad92:	6800      	ldr	r0, [r0, #0]
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ad98:	f001 fc2e 	bl	800c5f8 <_svfiprintf_r>
 800ad9c:	9b02      	ldr	r3, [sp, #8]
 800ad9e:	701c      	strb	r4, [r3, #0]
 800ada0:	b01d      	add	sp, #116	@ 0x74
 800ada2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ada6:	b003      	add	sp, #12
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	2400001c 	.word	0x2400001c
 800adb0:	ffff0208 	.word	0xffff0208

0800adb4 <__sread>:
 800adb4:	b510      	push	{r4, lr}
 800adb6:	460c      	mov	r4, r1
 800adb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbc:	f000 f900 	bl	800afc0 <_read_r>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	bfab      	itete	ge
 800adc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800adc6:	89a3      	ldrhlt	r3, [r4, #12]
 800adc8:	181b      	addge	r3, r3, r0
 800adca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800adce:	bfac      	ite	ge
 800add0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800add2:	81a3      	strhlt	r3, [r4, #12]
 800add4:	bd10      	pop	{r4, pc}

0800add6 <__swrite>:
 800add6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adda:	461f      	mov	r7, r3
 800addc:	898b      	ldrh	r3, [r1, #12]
 800adde:	05db      	lsls	r3, r3, #23
 800ade0:	4605      	mov	r5, r0
 800ade2:	460c      	mov	r4, r1
 800ade4:	4616      	mov	r6, r2
 800ade6:	d505      	bpl.n	800adf4 <__swrite+0x1e>
 800ade8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adec:	2302      	movs	r3, #2
 800adee:	2200      	movs	r2, #0
 800adf0:	f000 f8d4 	bl	800af9c <_lseek_r>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adfe:	81a3      	strh	r3, [r4, #12]
 800ae00:	4632      	mov	r2, r6
 800ae02:	463b      	mov	r3, r7
 800ae04:	4628      	mov	r0, r5
 800ae06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0a:	f000 b8eb 	b.w	800afe4 <_write_r>

0800ae0e <__sseek>:
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	460c      	mov	r4, r1
 800ae12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae16:	f000 f8c1 	bl	800af9c <_lseek_r>
 800ae1a:	1c43      	adds	r3, r0, #1
 800ae1c:	89a3      	ldrh	r3, [r4, #12]
 800ae1e:	bf15      	itete	ne
 800ae20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae2a:	81a3      	strheq	r3, [r4, #12]
 800ae2c:	bf18      	it	ne
 800ae2e:	81a3      	strhne	r3, [r4, #12]
 800ae30:	bd10      	pop	{r4, pc}

0800ae32 <__sclose>:
 800ae32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae36:	f000 b8a1 	b.w	800af7c <_close_r>

0800ae3a <__swbuf_r>:
 800ae3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3c:	460e      	mov	r6, r1
 800ae3e:	4614      	mov	r4, r2
 800ae40:	4605      	mov	r5, r0
 800ae42:	b118      	cbz	r0, 800ae4c <__swbuf_r+0x12>
 800ae44:	6a03      	ldr	r3, [r0, #32]
 800ae46:	b90b      	cbnz	r3, 800ae4c <__swbuf_r+0x12>
 800ae48:	f7ff feec 	bl	800ac24 <__sinit>
 800ae4c:	69a3      	ldr	r3, [r4, #24]
 800ae4e:	60a3      	str	r3, [r4, #8]
 800ae50:	89a3      	ldrh	r3, [r4, #12]
 800ae52:	071a      	lsls	r2, r3, #28
 800ae54:	d501      	bpl.n	800ae5a <__swbuf_r+0x20>
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	b943      	cbnz	r3, 800ae6c <__swbuf_r+0x32>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 f82b 	bl	800aeb8 <__swsetup_r>
 800ae62:	b118      	cbz	r0, 800ae6c <__swbuf_r+0x32>
 800ae64:	f04f 37ff 	mov.w	r7, #4294967295
 800ae68:	4638      	mov	r0, r7
 800ae6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	6922      	ldr	r2, [r4, #16]
 800ae70:	1a98      	subs	r0, r3, r2
 800ae72:	6963      	ldr	r3, [r4, #20]
 800ae74:	b2f6      	uxtb	r6, r6
 800ae76:	4283      	cmp	r3, r0
 800ae78:	4637      	mov	r7, r6
 800ae7a:	dc05      	bgt.n	800ae88 <__swbuf_r+0x4e>
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f001 fe7c 	bl	800cb7c <_fflush_r>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d1ed      	bne.n	800ae64 <__swbuf_r+0x2a>
 800ae88:	68a3      	ldr	r3, [r4, #8]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	60a3      	str	r3, [r4, #8]
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	6022      	str	r2, [r4, #0]
 800ae94:	701e      	strb	r6, [r3, #0]
 800ae96:	6962      	ldr	r2, [r4, #20]
 800ae98:	1c43      	adds	r3, r0, #1
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d004      	beq.n	800aea8 <__swbuf_r+0x6e>
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	07db      	lsls	r3, r3, #31
 800aea2:	d5e1      	bpl.n	800ae68 <__swbuf_r+0x2e>
 800aea4:	2e0a      	cmp	r6, #10
 800aea6:	d1df      	bne.n	800ae68 <__swbuf_r+0x2e>
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f001 fe66 	bl	800cb7c <_fflush_r>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d0d9      	beq.n	800ae68 <__swbuf_r+0x2e>
 800aeb4:	e7d6      	b.n	800ae64 <__swbuf_r+0x2a>
	...

0800aeb8 <__swsetup_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4b29      	ldr	r3, [pc, #164]	@ (800af60 <__swsetup_r+0xa8>)
 800aebc:	4605      	mov	r5, r0
 800aebe:	6818      	ldr	r0, [r3, #0]
 800aec0:	460c      	mov	r4, r1
 800aec2:	b118      	cbz	r0, 800aecc <__swsetup_r+0x14>
 800aec4:	6a03      	ldr	r3, [r0, #32]
 800aec6:	b90b      	cbnz	r3, 800aecc <__swsetup_r+0x14>
 800aec8:	f7ff feac 	bl	800ac24 <__sinit>
 800aecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aed0:	0719      	lsls	r1, r3, #28
 800aed2:	d422      	bmi.n	800af1a <__swsetup_r+0x62>
 800aed4:	06da      	lsls	r2, r3, #27
 800aed6:	d407      	bmi.n	800aee8 <__swsetup_r+0x30>
 800aed8:	2209      	movs	r2, #9
 800aeda:	602a      	str	r2, [r5, #0]
 800aedc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aee0:	81a3      	strh	r3, [r4, #12]
 800aee2:	f04f 30ff 	mov.w	r0, #4294967295
 800aee6:	e033      	b.n	800af50 <__swsetup_r+0x98>
 800aee8:	0758      	lsls	r0, r3, #29
 800aeea:	d512      	bpl.n	800af12 <__swsetup_r+0x5a>
 800aeec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeee:	b141      	cbz	r1, 800af02 <__swsetup_r+0x4a>
 800aef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aef4:	4299      	cmp	r1, r3
 800aef6:	d002      	beq.n	800aefe <__swsetup_r+0x46>
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 fea7 	bl	800bc4c <_free_r>
 800aefe:	2300      	movs	r3, #0
 800af00:	6363      	str	r3, [r4, #52]	@ 0x34
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af08:	81a3      	strh	r3, [r4, #12]
 800af0a:	2300      	movs	r3, #0
 800af0c:	6063      	str	r3, [r4, #4]
 800af0e:	6923      	ldr	r3, [r4, #16]
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	89a3      	ldrh	r3, [r4, #12]
 800af14:	f043 0308 	orr.w	r3, r3, #8
 800af18:	81a3      	strh	r3, [r4, #12]
 800af1a:	6923      	ldr	r3, [r4, #16]
 800af1c:	b94b      	cbnz	r3, 800af32 <__swsetup_r+0x7a>
 800af1e:	89a3      	ldrh	r3, [r4, #12]
 800af20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af28:	d003      	beq.n	800af32 <__swsetup_r+0x7a>
 800af2a:	4621      	mov	r1, r4
 800af2c:	4628      	mov	r0, r5
 800af2e:	f001 fe73 	bl	800cc18 <__smakebuf_r>
 800af32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af36:	f013 0201 	ands.w	r2, r3, #1
 800af3a:	d00a      	beq.n	800af52 <__swsetup_r+0x9a>
 800af3c:	2200      	movs	r2, #0
 800af3e:	60a2      	str	r2, [r4, #8]
 800af40:	6962      	ldr	r2, [r4, #20]
 800af42:	4252      	negs	r2, r2
 800af44:	61a2      	str	r2, [r4, #24]
 800af46:	6922      	ldr	r2, [r4, #16]
 800af48:	b942      	cbnz	r2, 800af5c <__swsetup_r+0xa4>
 800af4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af4e:	d1c5      	bne.n	800aedc <__swsetup_r+0x24>
 800af50:	bd38      	pop	{r3, r4, r5, pc}
 800af52:	0799      	lsls	r1, r3, #30
 800af54:	bf58      	it	pl
 800af56:	6962      	ldrpl	r2, [r4, #20]
 800af58:	60a2      	str	r2, [r4, #8]
 800af5a:	e7f4      	b.n	800af46 <__swsetup_r+0x8e>
 800af5c:	2000      	movs	r0, #0
 800af5e:	e7f7      	b.n	800af50 <__swsetup_r+0x98>
 800af60:	2400001c 	.word	0x2400001c

0800af64 <memset>:
 800af64:	4402      	add	r2, r0
 800af66:	4603      	mov	r3, r0
 800af68:	4293      	cmp	r3, r2
 800af6a:	d100      	bne.n	800af6e <memset+0xa>
 800af6c:	4770      	bx	lr
 800af6e:	f803 1b01 	strb.w	r1, [r3], #1
 800af72:	e7f9      	b.n	800af68 <memset+0x4>

0800af74 <_localeconv_r>:
 800af74:	4800      	ldr	r0, [pc, #0]	@ (800af78 <_localeconv_r+0x4>)
 800af76:	4770      	bx	lr
 800af78:	2400015c 	.word	0x2400015c

0800af7c <_close_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4d06      	ldr	r5, [pc, #24]	@ (800af98 <_close_r+0x1c>)
 800af80:	2300      	movs	r3, #0
 800af82:	4604      	mov	r4, r0
 800af84:	4608      	mov	r0, r1
 800af86:	602b      	str	r3, [r5, #0]
 800af88:	f7f6 f8f4 	bl	8001174 <_close>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d102      	bne.n	800af96 <_close_r+0x1a>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	b103      	cbz	r3, 800af96 <_close_r+0x1a>
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	2400092c 	.word	0x2400092c

0800af9c <_lseek_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	4d07      	ldr	r5, [pc, #28]	@ (800afbc <_lseek_r+0x20>)
 800afa0:	4604      	mov	r4, r0
 800afa2:	4608      	mov	r0, r1
 800afa4:	4611      	mov	r1, r2
 800afa6:	2200      	movs	r2, #0
 800afa8:	602a      	str	r2, [r5, #0]
 800afaa:	461a      	mov	r2, r3
 800afac:	f7f6 f909 	bl	80011c2 <_lseek>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_lseek_r+0x1e>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_lseek_r+0x1e>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	2400092c 	.word	0x2400092c

0800afc0 <_read_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d07      	ldr	r5, [pc, #28]	@ (800afe0 <_read_r+0x20>)
 800afc4:	4604      	mov	r4, r0
 800afc6:	4608      	mov	r0, r1
 800afc8:	4611      	mov	r1, r2
 800afca:	2200      	movs	r2, #0
 800afcc:	602a      	str	r2, [r5, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	f7f6 f897 	bl	8001102 <_read>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_read_r+0x1e>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	b103      	cbz	r3, 800afde <_read_r+0x1e>
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	2400092c 	.word	0x2400092c

0800afe4 <_write_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d07      	ldr	r5, [pc, #28]	@ (800b004 <_write_r+0x20>)
 800afe8:	4604      	mov	r4, r0
 800afea:	4608      	mov	r0, r1
 800afec:	4611      	mov	r1, r2
 800afee:	2200      	movs	r2, #0
 800aff0:	602a      	str	r2, [r5, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	f7f6 f8a2 	bl	800113c <_write>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d102      	bne.n	800b002 <_write_r+0x1e>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	b103      	cbz	r3, 800b002 <_write_r+0x1e>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	2400092c 	.word	0x2400092c

0800b008 <__errno>:
 800b008:	4b01      	ldr	r3, [pc, #4]	@ (800b010 <__errno+0x8>)
 800b00a:	6818      	ldr	r0, [r3, #0]
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	2400001c 	.word	0x2400001c

0800b014 <__libc_init_array>:
 800b014:	b570      	push	{r4, r5, r6, lr}
 800b016:	4d0d      	ldr	r5, [pc, #52]	@ (800b04c <__libc_init_array+0x38>)
 800b018:	4c0d      	ldr	r4, [pc, #52]	@ (800b050 <__libc_init_array+0x3c>)
 800b01a:	1b64      	subs	r4, r4, r5
 800b01c:	10a4      	asrs	r4, r4, #2
 800b01e:	2600      	movs	r6, #0
 800b020:	42a6      	cmp	r6, r4
 800b022:	d109      	bne.n	800b038 <__libc_init_array+0x24>
 800b024:	4d0b      	ldr	r5, [pc, #44]	@ (800b054 <__libc_init_array+0x40>)
 800b026:	4c0c      	ldr	r4, [pc, #48]	@ (800b058 <__libc_init_array+0x44>)
 800b028:	f001 ff64 	bl	800cef4 <_init>
 800b02c:	1b64      	subs	r4, r4, r5
 800b02e:	10a4      	asrs	r4, r4, #2
 800b030:	2600      	movs	r6, #0
 800b032:	42a6      	cmp	r6, r4
 800b034:	d105      	bne.n	800b042 <__libc_init_array+0x2e>
 800b036:	bd70      	pop	{r4, r5, r6, pc}
 800b038:	f855 3b04 	ldr.w	r3, [r5], #4
 800b03c:	4798      	blx	r3
 800b03e:	3601      	adds	r6, #1
 800b040:	e7ee      	b.n	800b020 <__libc_init_array+0xc>
 800b042:	f855 3b04 	ldr.w	r3, [r5], #4
 800b046:	4798      	blx	r3
 800b048:	3601      	adds	r6, #1
 800b04a:	e7f2      	b.n	800b032 <__libc_init_array+0x1e>
 800b04c:	0800d324 	.word	0x0800d324
 800b050:	0800d324 	.word	0x0800d324
 800b054:	0800d324 	.word	0x0800d324
 800b058:	0800d328 	.word	0x0800d328

0800b05c <__retarget_lock_init_recursive>:
 800b05c:	4770      	bx	lr

0800b05e <__retarget_lock_acquire_recursive>:
 800b05e:	4770      	bx	lr

0800b060 <__retarget_lock_release_recursive>:
 800b060:	4770      	bx	lr

0800b062 <memcpy>:
 800b062:	440a      	add	r2, r1
 800b064:	4291      	cmp	r1, r2
 800b066:	f100 33ff 	add.w	r3, r0, #4294967295
 800b06a:	d100      	bne.n	800b06e <memcpy+0xc>
 800b06c:	4770      	bx	lr
 800b06e:	b510      	push	{r4, lr}
 800b070:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b074:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b078:	4291      	cmp	r1, r2
 800b07a:	d1f9      	bne.n	800b070 <memcpy+0xe>
 800b07c:	bd10      	pop	{r4, pc}

0800b07e <quorem>:
 800b07e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b082:	6903      	ldr	r3, [r0, #16]
 800b084:	690c      	ldr	r4, [r1, #16]
 800b086:	42a3      	cmp	r3, r4
 800b088:	4607      	mov	r7, r0
 800b08a:	db7e      	blt.n	800b18a <quorem+0x10c>
 800b08c:	3c01      	subs	r4, #1
 800b08e:	f101 0814 	add.w	r8, r1, #20
 800b092:	00a3      	lsls	r3, r4, #2
 800b094:	f100 0514 	add.w	r5, r0, #20
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0b4:	d32e      	bcc.n	800b114 <quorem+0x96>
 800b0b6:	f04f 0a00 	mov.w	sl, #0
 800b0ba:	46c4      	mov	ip, r8
 800b0bc:	46ae      	mov	lr, r5
 800b0be:	46d3      	mov	fp, sl
 800b0c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b0c4:	b298      	uxth	r0, r3
 800b0c6:	fb06 a000 	mla	r0, r6, r0, sl
 800b0ca:	0c02      	lsrs	r2, r0, #16
 800b0cc:	0c1b      	lsrs	r3, r3, #16
 800b0ce:	fb06 2303 	mla	r3, r6, r3, r2
 800b0d2:	f8de 2000 	ldr.w	r2, [lr]
 800b0d6:	b280      	uxth	r0, r0
 800b0d8:	b292      	uxth	r2, r2
 800b0da:	1a12      	subs	r2, r2, r0
 800b0dc:	445a      	add	r2, fp
 800b0de:	f8de 0000 	ldr.w	r0, [lr]
 800b0e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b0ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b0f0:	b292      	uxth	r2, r2
 800b0f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b0f6:	45e1      	cmp	r9, ip
 800b0f8:	f84e 2b04 	str.w	r2, [lr], #4
 800b0fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b100:	d2de      	bcs.n	800b0c0 <quorem+0x42>
 800b102:	9b00      	ldr	r3, [sp, #0]
 800b104:	58eb      	ldr	r3, [r5, r3]
 800b106:	b92b      	cbnz	r3, 800b114 <quorem+0x96>
 800b108:	9b01      	ldr	r3, [sp, #4]
 800b10a:	3b04      	subs	r3, #4
 800b10c:	429d      	cmp	r5, r3
 800b10e:	461a      	mov	r2, r3
 800b110:	d32f      	bcc.n	800b172 <quorem+0xf4>
 800b112:	613c      	str	r4, [r7, #16]
 800b114:	4638      	mov	r0, r7
 800b116:	f001 f90b 	bl	800c330 <__mcmp>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	db25      	blt.n	800b16a <quorem+0xec>
 800b11e:	4629      	mov	r1, r5
 800b120:	2000      	movs	r0, #0
 800b122:	f858 2b04 	ldr.w	r2, [r8], #4
 800b126:	f8d1 c000 	ldr.w	ip, [r1]
 800b12a:	fa1f fe82 	uxth.w	lr, r2
 800b12e:	fa1f f38c 	uxth.w	r3, ip
 800b132:	eba3 030e 	sub.w	r3, r3, lr
 800b136:	4403      	add	r3, r0
 800b138:	0c12      	lsrs	r2, r2, #16
 800b13a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b13e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b142:	b29b      	uxth	r3, r3
 800b144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b148:	45c1      	cmp	r9, r8
 800b14a:	f841 3b04 	str.w	r3, [r1], #4
 800b14e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b152:	d2e6      	bcs.n	800b122 <quorem+0xa4>
 800b154:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b15c:	b922      	cbnz	r2, 800b168 <quorem+0xea>
 800b15e:	3b04      	subs	r3, #4
 800b160:	429d      	cmp	r5, r3
 800b162:	461a      	mov	r2, r3
 800b164:	d30b      	bcc.n	800b17e <quorem+0x100>
 800b166:	613c      	str	r4, [r7, #16]
 800b168:	3601      	adds	r6, #1
 800b16a:	4630      	mov	r0, r6
 800b16c:	b003      	add	sp, #12
 800b16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b172:	6812      	ldr	r2, [r2, #0]
 800b174:	3b04      	subs	r3, #4
 800b176:	2a00      	cmp	r2, #0
 800b178:	d1cb      	bne.n	800b112 <quorem+0x94>
 800b17a:	3c01      	subs	r4, #1
 800b17c:	e7c6      	b.n	800b10c <quorem+0x8e>
 800b17e:	6812      	ldr	r2, [r2, #0]
 800b180:	3b04      	subs	r3, #4
 800b182:	2a00      	cmp	r2, #0
 800b184:	d1ef      	bne.n	800b166 <quorem+0xe8>
 800b186:	3c01      	subs	r4, #1
 800b188:	e7ea      	b.n	800b160 <quorem+0xe2>
 800b18a:	2000      	movs	r0, #0
 800b18c:	e7ee      	b.n	800b16c <quorem+0xee>
	...

0800b190 <_dtoa_r>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	ed2d 8b02 	vpush	{d8}
 800b198:	69c7      	ldr	r7, [r0, #28]
 800b19a:	b091      	sub	sp, #68	@ 0x44
 800b19c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b1a0:	ec55 4b10 	vmov	r4, r5, d0
 800b1a4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b1a6:	9107      	str	r1, [sp, #28]
 800b1a8:	4681      	mov	r9, r0
 800b1aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1ac:	930d      	str	r3, [sp, #52]	@ 0x34
 800b1ae:	b97f      	cbnz	r7, 800b1d0 <_dtoa_r+0x40>
 800b1b0:	2010      	movs	r0, #16
 800b1b2:	f000 fd95 	bl	800bce0 <malloc>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	f8c9 001c 	str.w	r0, [r9, #28]
 800b1bc:	b920      	cbnz	r0, 800b1c8 <_dtoa_r+0x38>
 800b1be:	4ba0      	ldr	r3, [pc, #640]	@ (800b440 <_dtoa_r+0x2b0>)
 800b1c0:	21ef      	movs	r1, #239	@ 0xef
 800b1c2:	48a0      	ldr	r0, [pc, #640]	@ (800b444 <_dtoa_r+0x2b4>)
 800b1c4:	f001 fdb0 	bl	800cd28 <__assert_func>
 800b1c8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b1cc:	6007      	str	r7, [r0, #0]
 800b1ce:	60c7      	str	r7, [r0, #12]
 800b1d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b1d4:	6819      	ldr	r1, [r3, #0]
 800b1d6:	b159      	cbz	r1, 800b1f0 <_dtoa_r+0x60>
 800b1d8:	685a      	ldr	r2, [r3, #4]
 800b1da:	604a      	str	r2, [r1, #4]
 800b1dc:	2301      	movs	r3, #1
 800b1de:	4093      	lsls	r3, r2
 800b1e0:	608b      	str	r3, [r1, #8]
 800b1e2:	4648      	mov	r0, r9
 800b1e4:	f000 fe72 	bl	800becc <_Bfree>
 800b1e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	601a      	str	r2, [r3, #0]
 800b1f0:	1e2b      	subs	r3, r5, #0
 800b1f2:	bfbb      	ittet	lt
 800b1f4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b1f8:	9303      	strlt	r3, [sp, #12]
 800b1fa:	2300      	movge	r3, #0
 800b1fc:	2201      	movlt	r2, #1
 800b1fe:	bfac      	ite	ge
 800b200:	6033      	strge	r3, [r6, #0]
 800b202:	6032      	strlt	r2, [r6, #0]
 800b204:	4b90      	ldr	r3, [pc, #576]	@ (800b448 <_dtoa_r+0x2b8>)
 800b206:	9e03      	ldr	r6, [sp, #12]
 800b208:	43b3      	bics	r3, r6
 800b20a:	d110      	bne.n	800b22e <_dtoa_r+0x9e>
 800b20c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b20e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b218:	4323      	orrs	r3, r4
 800b21a:	f000 84e6 	beq.w	800bbea <_dtoa_r+0xa5a>
 800b21e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b220:	4f8a      	ldr	r7, [pc, #552]	@ (800b44c <_dtoa_r+0x2bc>)
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 84e8 	beq.w	800bbf8 <_dtoa_r+0xa68>
 800b228:	1cfb      	adds	r3, r7, #3
 800b22a:	f000 bce3 	b.w	800bbf4 <_dtoa_r+0xa64>
 800b22e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b232:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23a:	d10a      	bne.n	800b252 <_dtoa_r+0xc2>
 800b23c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b23e:	2301      	movs	r3, #1
 800b240:	6013      	str	r3, [r2, #0]
 800b242:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b244:	b113      	cbz	r3, 800b24c <_dtoa_r+0xbc>
 800b246:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b248:	4b81      	ldr	r3, [pc, #516]	@ (800b450 <_dtoa_r+0x2c0>)
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	4f81      	ldr	r7, [pc, #516]	@ (800b454 <_dtoa_r+0x2c4>)
 800b24e:	f000 bcd3 	b.w	800bbf8 <_dtoa_r+0xa68>
 800b252:	aa0e      	add	r2, sp, #56	@ 0x38
 800b254:	a90f      	add	r1, sp, #60	@ 0x3c
 800b256:	4648      	mov	r0, r9
 800b258:	eeb0 0b48 	vmov.f64	d0, d8
 800b25c:	f001 f918 	bl	800c490 <__d2b>
 800b260:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b264:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b266:	9001      	str	r0, [sp, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d045      	beq.n	800b2f8 <_dtoa_r+0x168>
 800b26c:	eeb0 7b48 	vmov.f64	d7, d8
 800b270:	ee18 1a90 	vmov	r1, s17
 800b274:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b278:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b27c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b280:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b284:	2500      	movs	r5, #0
 800b286:	ee07 1a90 	vmov	s15, r1
 800b28a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b28e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b428 <_dtoa_r+0x298>
 800b292:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b296:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b430 <_dtoa_r+0x2a0>
 800b29a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b29e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b438 <_dtoa_r+0x2a8>
 800b2a2:	ee07 3a90 	vmov	s15, r3
 800b2a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b2aa:	eeb0 7b46 	vmov.f64	d7, d6
 800b2ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b2b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b2b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2be:	ee16 8a90 	vmov	r8, s13
 800b2c2:	d508      	bpl.n	800b2d6 <_dtoa_r+0x146>
 800b2c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b2c8:	eeb4 6b47 	vcmp.f64	d6, d7
 800b2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d0:	bf18      	it	ne
 800b2d2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b2d6:	f1b8 0f16 	cmp.w	r8, #22
 800b2da:	d82b      	bhi.n	800b334 <_dtoa_r+0x1a4>
 800b2dc:	495e      	ldr	r1, [pc, #376]	@ (800b458 <_dtoa_r+0x2c8>)
 800b2de:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b2e2:	ed91 7b00 	vldr	d7, [r1]
 800b2e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ee:	d501      	bpl.n	800b2f4 <_dtoa_r+0x164>
 800b2f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	e01e      	b.n	800b336 <_dtoa_r+0x1a6>
 800b2f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b300:	2920      	cmp	r1, #32
 800b302:	bfc1      	itttt	gt
 800b304:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b308:	408e      	lslgt	r6, r1
 800b30a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b30e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b312:	bfd6      	itet	le
 800b314:	f1c1 0120 	rsble	r1, r1, #32
 800b318:	4331      	orrgt	r1, r6
 800b31a:	fa04 f101 	lslle.w	r1, r4, r1
 800b31e:	ee07 1a90 	vmov	s15, r1
 800b322:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b326:	3b01      	subs	r3, #1
 800b328:	ee17 1a90 	vmov	r1, s15
 800b32c:	2501      	movs	r5, #1
 800b32e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b332:	e7a8      	b.n	800b286 <_dtoa_r+0xf6>
 800b334:	2101      	movs	r1, #1
 800b336:	1ad2      	subs	r2, r2, r3
 800b338:	1e53      	subs	r3, r2, #1
 800b33a:	9306      	str	r3, [sp, #24]
 800b33c:	bf45      	ittet	mi
 800b33e:	f1c2 0301 	rsbmi	r3, r2, #1
 800b342:	9304      	strmi	r3, [sp, #16]
 800b344:	2300      	movpl	r3, #0
 800b346:	2300      	movmi	r3, #0
 800b348:	bf4c      	ite	mi
 800b34a:	9306      	strmi	r3, [sp, #24]
 800b34c:	9304      	strpl	r3, [sp, #16]
 800b34e:	f1b8 0f00 	cmp.w	r8, #0
 800b352:	910c      	str	r1, [sp, #48]	@ 0x30
 800b354:	db18      	blt.n	800b388 <_dtoa_r+0x1f8>
 800b356:	9b06      	ldr	r3, [sp, #24]
 800b358:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b35c:	4443      	add	r3, r8
 800b35e:	9306      	str	r3, [sp, #24]
 800b360:	2300      	movs	r3, #0
 800b362:	9a07      	ldr	r2, [sp, #28]
 800b364:	2a09      	cmp	r2, #9
 800b366:	d845      	bhi.n	800b3f4 <_dtoa_r+0x264>
 800b368:	2a05      	cmp	r2, #5
 800b36a:	bfc4      	itt	gt
 800b36c:	3a04      	subgt	r2, #4
 800b36e:	9207      	strgt	r2, [sp, #28]
 800b370:	9a07      	ldr	r2, [sp, #28]
 800b372:	f1a2 0202 	sub.w	r2, r2, #2
 800b376:	bfcc      	ite	gt
 800b378:	2400      	movgt	r4, #0
 800b37a:	2401      	movle	r4, #1
 800b37c:	2a03      	cmp	r2, #3
 800b37e:	d844      	bhi.n	800b40a <_dtoa_r+0x27a>
 800b380:	e8df f002 	tbb	[pc, r2]
 800b384:	0b173634 	.word	0x0b173634
 800b388:	9b04      	ldr	r3, [sp, #16]
 800b38a:	2200      	movs	r2, #0
 800b38c:	eba3 0308 	sub.w	r3, r3, r8
 800b390:	9304      	str	r3, [sp, #16]
 800b392:	920a      	str	r2, [sp, #40]	@ 0x28
 800b394:	f1c8 0300 	rsb	r3, r8, #0
 800b398:	e7e3      	b.n	800b362 <_dtoa_r+0x1d2>
 800b39a:	2201      	movs	r2, #1
 800b39c:	9208      	str	r2, [sp, #32]
 800b39e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3a0:	eb08 0b02 	add.w	fp, r8, r2
 800b3a4:	f10b 0a01 	add.w	sl, fp, #1
 800b3a8:	4652      	mov	r2, sl
 800b3aa:	2a01      	cmp	r2, #1
 800b3ac:	bfb8      	it	lt
 800b3ae:	2201      	movlt	r2, #1
 800b3b0:	e006      	b.n	800b3c0 <_dtoa_r+0x230>
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	9208      	str	r2, [sp, #32]
 800b3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3b8:	2a00      	cmp	r2, #0
 800b3ba:	dd29      	ble.n	800b410 <_dtoa_r+0x280>
 800b3bc:	4693      	mov	fp, r2
 800b3be:	4692      	mov	sl, r2
 800b3c0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	2004      	movs	r0, #4
 800b3c8:	f100 0614 	add.w	r6, r0, #20
 800b3cc:	4296      	cmp	r6, r2
 800b3ce:	d926      	bls.n	800b41e <_dtoa_r+0x28e>
 800b3d0:	6079      	str	r1, [r7, #4]
 800b3d2:	4648      	mov	r0, r9
 800b3d4:	9305      	str	r3, [sp, #20]
 800b3d6:	f000 fd39 	bl	800be4c <_Balloc>
 800b3da:	9b05      	ldr	r3, [sp, #20]
 800b3dc:	4607      	mov	r7, r0
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d13e      	bne.n	800b460 <_dtoa_r+0x2d0>
 800b3e2:	4b1e      	ldr	r3, [pc, #120]	@ (800b45c <_dtoa_r+0x2cc>)
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b3ea:	e6ea      	b.n	800b1c2 <_dtoa_r+0x32>
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	e7e1      	b.n	800b3b4 <_dtoa_r+0x224>
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	e7d3      	b.n	800b39c <_dtoa_r+0x20c>
 800b3f4:	2401      	movs	r4, #1
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b3fc:	f04f 3bff 	mov.w	fp, #4294967295
 800b400:	2100      	movs	r1, #0
 800b402:	46da      	mov	sl, fp
 800b404:	2212      	movs	r2, #18
 800b406:	9109      	str	r1, [sp, #36]	@ 0x24
 800b408:	e7da      	b.n	800b3c0 <_dtoa_r+0x230>
 800b40a:	2201      	movs	r2, #1
 800b40c:	9208      	str	r2, [sp, #32]
 800b40e:	e7f5      	b.n	800b3fc <_dtoa_r+0x26c>
 800b410:	f04f 0b01 	mov.w	fp, #1
 800b414:	46da      	mov	sl, fp
 800b416:	465a      	mov	r2, fp
 800b418:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b41c:	e7d0      	b.n	800b3c0 <_dtoa_r+0x230>
 800b41e:	3101      	adds	r1, #1
 800b420:	0040      	lsls	r0, r0, #1
 800b422:	e7d1      	b.n	800b3c8 <_dtoa_r+0x238>
 800b424:	f3af 8000 	nop.w
 800b428:	636f4361 	.word	0x636f4361
 800b42c:	3fd287a7 	.word	0x3fd287a7
 800b430:	8b60c8b3 	.word	0x8b60c8b3
 800b434:	3fc68a28 	.word	0x3fc68a28
 800b438:	509f79fb 	.word	0x509f79fb
 800b43c:	3fd34413 	.word	0x3fd34413
 800b440:	0800cfe9 	.word	0x0800cfe9
 800b444:	0800d000 	.word	0x0800d000
 800b448:	7ff00000 	.word	0x7ff00000
 800b44c:	0800cfe5 	.word	0x0800cfe5
 800b450:	0800cfb9 	.word	0x0800cfb9
 800b454:	0800cfb8 	.word	0x0800cfb8
 800b458:	0800d150 	.word	0x0800d150
 800b45c:	0800d058 	.word	0x0800d058
 800b460:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b464:	f1ba 0f0e 	cmp.w	sl, #14
 800b468:	6010      	str	r0, [r2, #0]
 800b46a:	d86e      	bhi.n	800b54a <_dtoa_r+0x3ba>
 800b46c:	2c00      	cmp	r4, #0
 800b46e:	d06c      	beq.n	800b54a <_dtoa_r+0x3ba>
 800b470:	f1b8 0f00 	cmp.w	r8, #0
 800b474:	f340 80b4 	ble.w	800b5e0 <_dtoa_r+0x450>
 800b478:	4ac8      	ldr	r2, [pc, #800]	@ (800b79c <_dtoa_r+0x60c>)
 800b47a:	f008 010f 	and.w	r1, r8, #15
 800b47e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b482:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b486:	ed92 7b00 	vldr	d7, [r2]
 800b48a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b48e:	f000 809b 	beq.w	800b5c8 <_dtoa_r+0x438>
 800b492:	4ac3      	ldr	r2, [pc, #780]	@ (800b7a0 <_dtoa_r+0x610>)
 800b494:	ed92 6b08 	vldr	d6, [r2, #32]
 800b498:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b49c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b4a0:	f001 010f 	and.w	r1, r1, #15
 800b4a4:	2203      	movs	r2, #3
 800b4a6:	48be      	ldr	r0, [pc, #760]	@ (800b7a0 <_dtoa_r+0x610>)
 800b4a8:	2900      	cmp	r1, #0
 800b4aa:	f040 808f 	bne.w	800b5cc <_dtoa_r+0x43c>
 800b4ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b4b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b4b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b4ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b4bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4c0:	2900      	cmp	r1, #0
 800b4c2:	f000 80b3 	beq.w	800b62c <_dtoa_r+0x49c>
 800b4c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b4ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d2:	f140 80ab 	bpl.w	800b62c <_dtoa_r+0x49c>
 800b4d6:	f1ba 0f00 	cmp.w	sl, #0
 800b4da:	f000 80a7 	beq.w	800b62c <_dtoa_r+0x49c>
 800b4de:	f1bb 0f00 	cmp.w	fp, #0
 800b4e2:	dd30      	ble.n	800b546 <_dtoa_r+0x3b6>
 800b4e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b4e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b4ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b4f0:	f108 31ff 	add.w	r1, r8, #4294967295
 800b4f4:	9105      	str	r1, [sp, #20]
 800b4f6:	3201      	adds	r2, #1
 800b4f8:	465c      	mov	r4, fp
 800b4fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b4fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b502:	ee07 2a90 	vmov	s15, r2
 800b506:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b50a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b50e:	ee15 2a90 	vmov	r2, s11
 800b512:	ec51 0b15 	vmov	r0, r1, d5
 800b516:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b51a:	2c00      	cmp	r4, #0
 800b51c:	f040 808a 	bne.w	800b634 <_dtoa_r+0x4a4>
 800b520:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b524:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b528:	ec41 0b17 	vmov	d7, r0, r1
 800b52c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b534:	f300 826a 	bgt.w	800ba0c <_dtoa_r+0x87c>
 800b538:	eeb1 7b47 	vneg.f64	d7, d7
 800b53c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b544:	d423      	bmi.n	800b58e <_dtoa_r+0x3fe>
 800b546:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b54a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b54c:	2a00      	cmp	r2, #0
 800b54e:	f2c0 8129 	blt.w	800b7a4 <_dtoa_r+0x614>
 800b552:	f1b8 0f0e 	cmp.w	r8, #14
 800b556:	f300 8125 	bgt.w	800b7a4 <_dtoa_r+0x614>
 800b55a:	4b90      	ldr	r3, [pc, #576]	@ (800b79c <_dtoa_r+0x60c>)
 800b55c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b560:	ed93 6b00 	vldr	d6, [r3]
 800b564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b566:	2b00      	cmp	r3, #0
 800b568:	f280 80c8 	bge.w	800b6fc <_dtoa_r+0x56c>
 800b56c:	f1ba 0f00 	cmp.w	sl, #0
 800b570:	f300 80c4 	bgt.w	800b6fc <_dtoa_r+0x56c>
 800b574:	d10b      	bne.n	800b58e <_dtoa_r+0x3fe>
 800b576:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b57a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b57e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b582:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b58a:	f2c0 823c 	blt.w	800ba06 <_dtoa_r+0x876>
 800b58e:	2400      	movs	r4, #0
 800b590:	4625      	mov	r5, r4
 800b592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b594:	43db      	mvns	r3, r3
 800b596:	9305      	str	r3, [sp, #20]
 800b598:	463e      	mov	r6, r7
 800b59a:	f04f 0800 	mov.w	r8, #0
 800b59e:	4621      	mov	r1, r4
 800b5a0:	4648      	mov	r0, r9
 800b5a2:	f000 fc93 	bl	800becc <_Bfree>
 800b5a6:	2d00      	cmp	r5, #0
 800b5a8:	f000 80a2 	beq.w	800b6f0 <_dtoa_r+0x560>
 800b5ac:	f1b8 0f00 	cmp.w	r8, #0
 800b5b0:	d005      	beq.n	800b5be <_dtoa_r+0x42e>
 800b5b2:	45a8      	cmp	r8, r5
 800b5b4:	d003      	beq.n	800b5be <_dtoa_r+0x42e>
 800b5b6:	4641      	mov	r1, r8
 800b5b8:	4648      	mov	r0, r9
 800b5ba:	f000 fc87 	bl	800becc <_Bfree>
 800b5be:	4629      	mov	r1, r5
 800b5c0:	4648      	mov	r0, r9
 800b5c2:	f000 fc83 	bl	800becc <_Bfree>
 800b5c6:	e093      	b.n	800b6f0 <_dtoa_r+0x560>
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	e76c      	b.n	800b4a6 <_dtoa_r+0x316>
 800b5cc:	07cc      	lsls	r4, r1, #31
 800b5ce:	d504      	bpl.n	800b5da <_dtoa_r+0x44a>
 800b5d0:	ed90 6b00 	vldr	d6, [r0]
 800b5d4:	3201      	adds	r2, #1
 800b5d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5da:	1049      	asrs	r1, r1, #1
 800b5dc:	3008      	adds	r0, #8
 800b5de:	e763      	b.n	800b4a8 <_dtoa_r+0x318>
 800b5e0:	d022      	beq.n	800b628 <_dtoa_r+0x498>
 800b5e2:	f1c8 0100 	rsb	r1, r8, #0
 800b5e6:	4a6d      	ldr	r2, [pc, #436]	@ (800b79c <_dtoa_r+0x60c>)
 800b5e8:	f001 000f 	and.w	r0, r1, #15
 800b5ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b5f0:	ed92 7b00 	vldr	d7, [r2]
 800b5f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b5f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b5fc:	4868      	ldr	r0, [pc, #416]	@ (800b7a0 <_dtoa_r+0x610>)
 800b5fe:	1109      	asrs	r1, r1, #4
 800b600:	2400      	movs	r4, #0
 800b602:	2202      	movs	r2, #2
 800b604:	b929      	cbnz	r1, 800b612 <_dtoa_r+0x482>
 800b606:	2c00      	cmp	r4, #0
 800b608:	f43f af57 	beq.w	800b4ba <_dtoa_r+0x32a>
 800b60c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b610:	e753      	b.n	800b4ba <_dtoa_r+0x32a>
 800b612:	07ce      	lsls	r6, r1, #31
 800b614:	d505      	bpl.n	800b622 <_dtoa_r+0x492>
 800b616:	ed90 6b00 	vldr	d6, [r0]
 800b61a:	3201      	adds	r2, #1
 800b61c:	2401      	movs	r4, #1
 800b61e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b622:	1049      	asrs	r1, r1, #1
 800b624:	3008      	adds	r0, #8
 800b626:	e7ed      	b.n	800b604 <_dtoa_r+0x474>
 800b628:	2202      	movs	r2, #2
 800b62a:	e746      	b.n	800b4ba <_dtoa_r+0x32a>
 800b62c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b630:	4654      	mov	r4, sl
 800b632:	e762      	b.n	800b4fa <_dtoa_r+0x36a>
 800b634:	4a59      	ldr	r2, [pc, #356]	@ (800b79c <_dtoa_r+0x60c>)
 800b636:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b63a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b63e:	9a08      	ldr	r2, [sp, #32]
 800b640:	ec41 0b17 	vmov	d7, r0, r1
 800b644:	443c      	add	r4, r7
 800b646:	b34a      	cbz	r2, 800b69c <_dtoa_r+0x50c>
 800b648:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b64c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b650:	463e      	mov	r6, r7
 800b652:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b656:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b65a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b65e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b662:	ee14 2a90 	vmov	r2, s9
 800b666:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b66a:	3230      	adds	r2, #48	@ 0x30
 800b66c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b670:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b678:	f806 2b01 	strb.w	r2, [r6], #1
 800b67c:	d438      	bmi.n	800b6f0 <_dtoa_r+0x560>
 800b67e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b682:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b68a:	d46e      	bmi.n	800b76a <_dtoa_r+0x5da>
 800b68c:	42a6      	cmp	r6, r4
 800b68e:	f43f af5a 	beq.w	800b546 <_dtoa_r+0x3b6>
 800b692:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b696:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b69a:	e7e0      	b.n	800b65e <_dtoa_r+0x4ce>
 800b69c:	4621      	mov	r1, r4
 800b69e:	463e      	mov	r6, r7
 800b6a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b6a4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b6a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b6ac:	ee14 2a90 	vmov	r2, s9
 800b6b0:	3230      	adds	r2, #48	@ 0x30
 800b6b2:	f806 2b01 	strb.w	r2, [r6], #1
 800b6b6:	42a6      	cmp	r6, r4
 800b6b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b6bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b6c0:	d119      	bne.n	800b6f6 <_dtoa_r+0x566>
 800b6c2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b6c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b6ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d2:	dc4a      	bgt.n	800b76a <_dtoa_r+0x5da>
 800b6d4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b6d8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e0:	f57f af31 	bpl.w	800b546 <_dtoa_r+0x3b6>
 800b6e4:	460e      	mov	r6, r1
 800b6e6:	3901      	subs	r1, #1
 800b6e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b6ec:	2b30      	cmp	r3, #48	@ 0x30
 800b6ee:	d0f9      	beq.n	800b6e4 <_dtoa_r+0x554>
 800b6f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b6f4:	e027      	b.n	800b746 <_dtoa_r+0x5b6>
 800b6f6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b6fa:	e7d5      	b.n	800b6a8 <_dtoa_r+0x518>
 800b6fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b700:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b704:	463e      	mov	r6, r7
 800b706:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b70a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b70e:	ee15 3a10 	vmov	r3, s10
 800b712:	3330      	adds	r3, #48	@ 0x30
 800b714:	f806 3b01 	strb.w	r3, [r6], #1
 800b718:	1bf3      	subs	r3, r6, r7
 800b71a:	459a      	cmp	sl, r3
 800b71c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b720:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b724:	d132      	bne.n	800b78c <_dtoa_r+0x5fc>
 800b726:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b72a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b732:	dc18      	bgt.n	800b766 <_dtoa_r+0x5d6>
 800b734:	eeb4 7b46 	vcmp.f64	d7, d6
 800b738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73c:	d103      	bne.n	800b746 <_dtoa_r+0x5b6>
 800b73e:	ee15 3a10 	vmov	r3, s10
 800b742:	07db      	lsls	r3, r3, #31
 800b744:	d40f      	bmi.n	800b766 <_dtoa_r+0x5d6>
 800b746:	9901      	ldr	r1, [sp, #4]
 800b748:	4648      	mov	r0, r9
 800b74a:	f000 fbbf 	bl	800becc <_Bfree>
 800b74e:	2300      	movs	r3, #0
 800b750:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b752:	7033      	strb	r3, [r6, #0]
 800b754:	f108 0301 	add.w	r3, r8, #1
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f000 824b 	beq.w	800bbf8 <_dtoa_r+0xa68>
 800b762:	601e      	str	r6, [r3, #0]
 800b764:	e248      	b.n	800bbf8 <_dtoa_r+0xa68>
 800b766:	f8cd 8014 	str.w	r8, [sp, #20]
 800b76a:	4633      	mov	r3, r6
 800b76c:	461e      	mov	r6, r3
 800b76e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b772:	2a39      	cmp	r2, #57	@ 0x39
 800b774:	d106      	bne.n	800b784 <_dtoa_r+0x5f4>
 800b776:	429f      	cmp	r7, r3
 800b778:	d1f8      	bne.n	800b76c <_dtoa_r+0x5dc>
 800b77a:	9a05      	ldr	r2, [sp, #20]
 800b77c:	3201      	adds	r2, #1
 800b77e:	9205      	str	r2, [sp, #20]
 800b780:	2230      	movs	r2, #48	@ 0x30
 800b782:	703a      	strb	r2, [r7, #0]
 800b784:	781a      	ldrb	r2, [r3, #0]
 800b786:	3201      	adds	r2, #1
 800b788:	701a      	strb	r2, [r3, #0]
 800b78a:	e7b1      	b.n	800b6f0 <_dtoa_r+0x560>
 800b78c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b790:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b798:	d1b5      	bne.n	800b706 <_dtoa_r+0x576>
 800b79a:	e7d4      	b.n	800b746 <_dtoa_r+0x5b6>
 800b79c:	0800d150 	.word	0x0800d150
 800b7a0:	0800d128 	.word	0x0800d128
 800b7a4:	9908      	ldr	r1, [sp, #32]
 800b7a6:	2900      	cmp	r1, #0
 800b7a8:	f000 80e9 	beq.w	800b97e <_dtoa_r+0x7ee>
 800b7ac:	9907      	ldr	r1, [sp, #28]
 800b7ae:	2901      	cmp	r1, #1
 800b7b0:	f300 80cb 	bgt.w	800b94a <_dtoa_r+0x7ba>
 800b7b4:	2d00      	cmp	r5, #0
 800b7b6:	f000 80c4 	beq.w	800b942 <_dtoa_r+0x7b2>
 800b7ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b7be:	9e04      	ldr	r6, [sp, #16]
 800b7c0:	461c      	mov	r4, r3
 800b7c2:	9305      	str	r3, [sp, #20]
 800b7c4:	9b04      	ldr	r3, [sp, #16]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	9304      	str	r3, [sp, #16]
 800b7ca:	9b06      	ldr	r3, [sp, #24]
 800b7cc:	2101      	movs	r1, #1
 800b7ce:	4413      	add	r3, r2
 800b7d0:	4648      	mov	r0, r9
 800b7d2:	9306      	str	r3, [sp, #24]
 800b7d4:	f000 fc2e 	bl	800c034 <__i2b>
 800b7d8:	9b05      	ldr	r3, [sp, #20]
 800b7da:	4605      	mov	r5, r0
 800b7dc:	b166      	cbz	r6, 800b7f8 <_dtoa_r+0x668>
 800b7de:	9a06      	ldr	r2, [sp, #24]
 800b7e0:	2a00      	cmp	r2, #0
 800b7e2:	dd09      	ble.n	800b7f8 <_dtoa_r+0x668>
 800b7e4:	42b2      	cmp	r2, r6
 800b7e6:	9904      	ldr	r1, [sp, #16]
 800b7e8:	bfa8      	it	ge
 800b7ea:	4632      	movge	r2, r6
 800b7ec:	1a89      	subs	r1, r1, r2
 800b7ee:	9104      	str	r1, [sp, #16]
 800b7f0:	9906      	ldr	r1, [sp, #24]
 800b7f2:	1ab6      	subs	r6, r6, r2
 800b7f4:	1a8a      	subs	r2, r1, r2
 800b7f6:	9206      	str	r2, [sp, #24]
 800b7f8:	b30b      	cbz	r3, 800b83e <_dtoa_r+0x6ae>
 800b7fa:	9a08      	ldr	r2, [sp, #32]
 800b7fc:	2a00      	cmp	r2, #0
 800b7fe:	f000 80c5 	beq.w	800b98c <_dtoa_r+0x7fc>
 800b802:	2c00      	cmp	r4, #0
 800b804:	f000 80bf 	beq.w	800b986 <_dtoa_r+0x7f6>
 800b808:	4629      	mov	r1, r5
 800b80a:	4622      	mov	r2, r4
 800b80c:	4648      	mov	r0, r9
 800b80e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b810:	f000 fcc8 	bl	800c1a4 <__pow5mult>
 800b814:	9a01      	ldr	r2, [sp, #4]
 800b816:	4601      	mov	r1, r0
 800b818:	4605      	mov	r5, r0
 800b81a:	4648      	mov	r0, r9
 800b81c:	f000 fc20 	bl	800c060 <__multiply>
 800b820:	9901      	ldr	r1, [sp, #4]
 800b822:	9005      	str	r0, [sp, #20]
 800b824:	4648      	mov	r0, r9
 800b826:	f000 fb51 	bl	800becc <_Bfree>
 800b82a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b82c:	1b1b      	subs	r3, r3, r4
 800b82e:	f000 80b0 	beq.w	800b992 <_dtoa_r+0x802>
 800b832:	9905      	ldr	r1, [sp, #20]
 800b834:	461a      	mov	r2, r3
 800b836:	4648      	mov	r0, r9
 800b838:	f000 fcb4 	bl	800c1a4 <__pow5mult>
 800b83c:	9001      	str	r0, [sp, #4]
 800b83e:	2101      	movs	r1, #1
 800b840:	4648      	mov	r0, r9
 800b842:	f000 fbf7 	bl	800c034 <__i2b>
 800b846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b848:	4604      	mov	r4, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 81da 	beq.w	800bc04 <_dtoa_r+0xa74>
 800b850:	461a      	mov	r2, r3
 800b852:	4601      	mov	r1, r0
 800b854:	4648      	mov	r0, r9
 800b856:	f000 fca5 	bl	800c1a4 <__pow5mult>
 800b85a:	9b07      	ldr	r3, [sp, #28]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	4604      	mov	r4, r0
 800b860:	f300 80a0 	bgt.w	800b9a4 <_dtoa_r+0x814>
 800b864:	9b02      	ldr	r3, [sp, #8]
 800b866:	2b00      	cmp	r3, #0
 800b868:	f040 8096 	bne.w	800b998 <_dtoa_r+0x808>
 800b86c:	9b03      	ldr	r3, [sp, #12]
 800b86e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b872:	2a00      	cmp	r2, #0
 800b874:	f040 8092 	bne.w	800b99c <_dtoa_r+0x80c>
 800b878:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b87c:	0d12      	lsrs	r2, r2, #20
 800b87e:	0512      	lsls	r2, r2, #20
 800b880:	2a00      	cmp	r2, #0
 800b882:	f000 808d 	beq.w	800b9a0 <_dtoa_r+0x810>
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	3301      	adds	r3, #1
 800b88a:	9304      	str	r3, [sp, #16]
 800b88c:	9b06      	ldr	r3, [sp, #24]
 800b88e:	3301      	adds	r3, #1
 800b890:	9306      	str	r3, [sp, #24]
 800b892:	2301      	movs	r3, #1
 800b894:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b896:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 81b9 	beq.w	800bc10 <_dtoa_r+0xa80>
 800b89e:	6922      	ldr	r2, [r4, #16]
 800b8a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b8a4:	6910      	ldr	r0, [r2, #16]
 800b8a6:	f000 fb79 	bl	800bf9c <__hi0bits>
 800b8aa:	f1c0 0020 	rsb	r0, r0, #32
 800b8ae:	9b06      	ldr	r3, [sp, #24]
 800b8b0:	4418      	add	r0, r3
 800b8b2:	f010 001f 	ands.w	r0, r0, #31
 800b8b6:	f000 8081 	beq.w	800b9bc <_dtoa_r+0x82c>
 800b8ba:	f1c0 0220 	rsb	r2, r0, #32
 800b8be:	2a04      	cmp	r2, #4
 800b8c0:	dd73      	ble.n	800b9aa <_dtoa_r+0x81a>
 800b8c2:	9b04      	ldr	r3, [sp, #16]
 800b8c4:	f1c0 001c 	rsb	r0, r0, #28
 800b8c8:	4403      	add	r3, r0
 800b8ca:	9304      	str	r3, [sp, #16]
 800b8cc:	9b06      	ldr	r3, [sp, #24]
 800b8ce:	4406      	add	r6, r0
 800b8d0:	4403      	add	r3, r0
 800b8d2:	9306      	str	r3, [sp, #24]
 800b8d4:	9b04      	ldr	r3, [sp, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	dd05      	ble.n	800b8e6 <_dtoa_r+0x756>
 800b8da:	9901      	ldr	r1, [sp, #4]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	4648      	mov	r0, r9
 800b8e0:	f000 fcba 	bl	800c258 <__lshift>
 800b8e4:	9001      	str	r0, [sp, #4]
 800b8e6:	9b06      	ldr	r3, [sp, #24]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	dd05      	ble.n	800b8f8 <_dtoa_r+0x768>
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	4648      	mov	r0, r9
 800b8f2:	f000 fcb1 	bl	800c258 <__lshift>
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d060      	beq.n	800b9c0 <_dtoa_r+0x830>
 800b8fe:	9801      	ldr	r0, [sp, #4]
 800b900:	4621      	mov	r1, r4
 800b902:	f000 fd15 	bl	800c330 <__mcmp>
 800b906:	2800      	cmp	r0, #0
 800b908:	da5a      	bge.n	800b9c0 <_dtoa_r+0x830>
 800b90a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b90e:	9305      	str	r3, [sp, #20]
 800b910:	9901      	ldr	r1, [sp, #4]
 800b912:	2300      	movs	r3, #0
 800b914:	220a      	movs	r2, #10
 800b916:	4648      	mov	r0, r9
 800b918:	f000 fafa 	bl	800bf10 <__multadd>
 800b91c:	9b08      	ldr	r3, [sp, #32]
 800b91e:	9001      	str	r0, [sp, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 8177 	beq.w	800bc14 <_dtoa_r+0xa84>
 800b926:	4629      	mov	r1, r5
 800b928:	2300      	movs	r3, #0
 800b92a:	220a      	movs	r2, #10
 800b92c:	4648      	mov	r0, r9
 800b92e:	f000 faef 	bl	800bf10 <__multadd>
 800b932:	f1bb 0f00 	cmp.w	fp, #0
 800b936:	4605      	mov	r5, r0
 800b938:	dc6e      	bgt.n	800ba18 <_dtoa_r+0x888>
 800b93a:	9b07      	ldr	r3, [sp, #28]
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	dc48      	bgt.n	800b9d2 <_dtoa_r+0x842>
 800b940:	e06a      	b.n	800ba18 <_dtoa_r+0x888>
 800b942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b944:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b948:	e739      	b.n	800b7be <_dtoa_r+0x62e>
 800b94a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b94e:	42a3      	cmp	r3, r4
 800b950:	db07      	blt.n	800b962 <_dtoa_r+0x7d2>
 800b952:	f1ba 0f00 	cmp.w	sl, #0
 800b956:	eba3 0404 	sub.w	r4, r3, r4
 800b95a:	db0b      	blt.n	800b974 <_dtoa_r+0x7e4>
 800b95c:	9e04      	ldr	r6, [sp, #16]
 800b95e:	4652      	mov	r2, sl
 800b960:	e72f      	b.n	800b7c2 <_dtoa_r+0x632>
 800b962:	1ae2      	subs	r2, r4, r3
 800b964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b966:	9e04      	ldr	r6, [sp, #16]
 800b968:	4413      	add	r3, r2
 800b96a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b96c:	4652      	mov	r2, sl
 800b96e:	4623      	mov	r3, r4
 800b970:	2400      	movs	r4, #0
 800b972:	e726      	b.n	800b7c2 <_dtoa_r+0x632>
 800b974:	9a04      	ldr	r2, [sp, #16]
 800b976:	eba2 060a 	sub.w	r6, r2, sl
 800b97a:	2200      	movs	r2, #0
 800b97c:	e721      	b.n	800b7c2 <_dtoa_r+0x632>
 800b97e:	9e04      	ldr	r6, [sp, #16]
 800b980:	9d08      	ldr	r5, [sp, #32]
 800b982:	461c      	mov	r4, r3
 800b984:	e72a      	b.n	800b7dc <_dtoa_r+0x64c>
 800b986:	9a01      	ldr	r2, [sp, #4]
 800b988:	9205      	str	r2, [sp, #20]
 800b98a:	e752      	b.n	800b832 <_dtoa_r+0x6a2>
 800b98c:	9901      	ldr	r1, [sp, #4]
 800b98e:	461a      	mov	r2, r3
 800b990:	e751      	b.n	800b836 <_dtoa_r+0x6a6>
 800b992:	9b05      	ldr	r3, [sp, #20]
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	e752      	b.n	800b83e <_dtoa_r+0x6ae>
 800b998:	2300      	movs	r3, #0
 800b99a:	e77b      	b.n	800b894 <_dtoa_r+0x704>
 800b99c:	9b02      	ldr	r3, [sp, #8]
 800b99e:	e779      	b.n	800b894 <_dtoa_r+0x704>
 800b9a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b9a2:	e778      	b.n	800b896 <_dtoa_r+0x706>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9a8:	e779      	b.n	800b89e <_dtoa_r+0x70e>
 800b9aa:	d093      	beq.n	800b8d4 <_dtoa_r+0x744>
 800b9ac:	9b04      	ldr	r3, [sp, #16]
 800b9ae:	321c      	adds	r2, #28
 800b9b0:	4413      	add	r3, r2
 800b9b2:	9304      	str	r3, [sp, #16]
 800b9b4:	9b06      	ldr	r3, [sp, #24]
 800b9b6:	4416      	add	r6, r2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	e78a      	b.n	800b8d2 <_dtoa_r+0x742>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	e7f5      	b.n	800b9ac <_dtoa_r+0x81c>
 800b9c0:	f1ba 0f00 	cmp.w	sl, #0
 800b9c4:	f8cd 8014 	str.w	r8, [sp, #20]
 800b9c8:	46d3      	mov	fp, sl
 800b9ca:	dc21      	bgt.n	800ba10 <_dtoa_r+0x880>
 800b9cc:	9b07      	ldr	r3, [sp, #28]
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	dd1e      	ble.n	800ba10 <_dtoa_r+0x880>
 800b9d2:	f1bb 0f00 	cmp.w	fp, #0
 800b9d6:	f47f addc 	bne.w	800b592 <_dtoa_r+0x402>
 800b9da:	4621      	mov	r1, r4
 800b9dc:	465b      	mov	r3, fp
 800b9de:	2205      	movs	r2, #5
 800b9e0:	4648      	mov	r0, r9
 800b9e2:	f000 fa95 	bl	800bf10 <__multadd>
 800b9e6:	4601      	mov	r1, r0
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	9801      	ldr	r0, [sp, #4]
 800b9ec:	f000 fca0 	bl	800c330 <__mcmp>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	f77f adce 	ble.w	800b592 <_dtoa_r+0x402>
 800b9f6:	463e      	mov	r6, r7
 800b9f8:	2331      	movs	r3, #49	@ 0x31
 800b9fa:	f806 3b01 	strb.w	r3, [r6], #1
 800b9fe:	9b05      	ldr	r3, [sp, #20]
 800ba00:	3301      	adds	r3, #1
 800ba02:	9305      	str	r3, [sp, #20]
 800ba04:	e5c9      	b.n	800b59a <_dtoa_r+0x40a>
 800ba06:	f8cd 8014 	str.w	r8, [sp, #20]
 800ba0a:	4654      	mov	r4, sl
 800ba0c:	4625      	mov	r5, r4
 800ba0e:	e7f2      	b.n	800b9f6 <_dtoa_r+0x866>
 800ba10:	9b08      	ldr	r3, [sp, #32]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 8102 	beq.w	800bc1c <_dtoa_r+0xa8c>
 800ba18:	2e00      	cmp	r6, #0
 800ba1a:	dd05      	ble.n	800ba28 <_dtoa_r+0x898>
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4632      	mov	r2, r6
 800ba20:	4648      	mov	r0, r9
 800ba22:	f000 fc19 	bl	800c258 <__lshift>
 800ba26:	4605      	mov	r5, r0
 800ba28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d058      	beq.n	800bae0 <_dtoa_r+0x950>
 800ba2e:	6869      	ldr	r1, [r5, #4]
 800ba30:	4648      	mov	r0, r9
 800ba32:	f000 fa0b 	bl	800be4c <_Balloc>
 800ba36:	4606      	mov	r6, r0
 800ba38:	b928      	cbnz	r0, 800ba46 <_dtoa_r+0x8b6>
 800ba3a:	4b82      	ldr	r3, [pc, #520]	@ (800bc44 <_dtoa_r+0xab4>)
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba42:	f7ff bbbe 	b.w	800b1c2 <_dtoa_r+0x32>
 800ba46:	692a      	ldr	r2, [r5, #16]
 800ba48:	3202      	adds	r2, #2
 800ba4a:	0092      	lsls	r2, r2, #2
 800ba4c:	f105 010c 	add.w	r1, r5, #12
 800ba50:	300c      	adds	r0, #12
 800ba52:	f7ff fb06 	bl	800b062 <memcpy>
 800ba56:	2201      	movs	r2, #1
 800ba58:	4631      	mov	r1, r6
 800ba5a:	4648      	mov	r0, r9
 800ba5c:	f000 fbfc 	bl	800c258 <__lshift>
 800ba60:	1c7b      	adds	r3, r7, #1
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	eb07 030b 	add.w	r3, r7, fp
 800ba68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba6a:	9b02      	ldr	r3, [sp, #8]
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	46a8      	mov	r8, r5
 800ba72:	9308      	str	r3, [sp, #32]
 800ba74:	4605      	mov	r5, r0
 800ba76:	9b04      	ldr	r3, [sp, #16]
 800ba78:	9801      	ldr	r0, [sp, #4]
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	f103 3bff 	add.w	fp, r3, #4294967295
 800ba80:	f7ff fafd 	bl	800b07e <quorem>
 800ba84:	4641      	mov	r1, r8
 800ba86:	9002      	str	r0, [sp, #8]
 800ba88:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ba8c:	9801      	ldr	r0, [sp, #4]
 800ba8e:	f000 fc4f 	bl	800c330 <__mcmp>
 800ba92:	462a      	mov	r2, r5
 800ba94:	9006      	str	r0, [sp, #24]
 800ba96:	4621      	mov	r1, r4
 800ba98:	4648      	mov	r0, r9
 800ba9a:	f000 fc65 	bl	800c368 <__mdiff>
 800ba9e:	68c2      	ldr	r2, [r0, #12]
 800baa0:	4606      	mov	r6, r0
 800baa2:	b9fa      	cbnz	r2, 800bae4 <_dtoa_r+0x954>
 800baa4:	4601      	mov	r1, r0
 800baa6:	9801      	ldr	r0, [sp, #4]
 800baa8:	f000 fc42 	bl	800c330 <__mcmp>
 800baac:	4602      	mov	r2, r0
 800baae:	4631      	mov	r1, r6
 800bab0:	4648      	mov	r0, r9
 800bab2:	920a      	str	r2, [sp, #40]	@ 0x28
 800bab4:	f000 fa0a 	bl	800becc <_Bfree>
 800bab8:	9b07      	ldr	r3, [sp, #28]
 800baba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800babc:	9e04      	ldr	r6, [sp, #16]
 800babe:	ea42 0103 	orr.w	r1, r2, r3
 800bac2:	9b08      	ldr	r3, [sp, #32]
 800bac4:	4319      	orrs	r1, r3
 800bac6:	d10f      	bne.n	800bae8 <_dtoa_r+0x958>
 800bac8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bacc:	d028      	beq.n	800bb20 <_dtoa_r+0x990>
 800bace:	9b06      	ldr	r3, [sp, #24]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	dd02      	ble.n	800bada <_dtoa_r+0x94a>
 800bad4:	9b02      	ldr	r3, [sp, #8]
 800bad6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bada:	f88b a000 	strb.w	sl, [fp]
 800bade:	e55e      	b.n	800b59e <_dtoa_r+0x40e>
 800bae0:	4628      	mov	r0, r5
 800bae2:	e7bd      	b.n	800ba60 <_dtoa_r+0x8d0>
 800bae4:	2201      	movs	r2, #1
 800bae6:	e7e2      	b.n	800baae <_dtoa_r+0x91e>
 800bae8:	9b06      	ldr	r3, [sp, #24]
 800baea:	2b00      	cmp	r3, #0
 800baec:	db04      	blt.n	800baf8 <_dtoa_r+0x968>
 800baee:	9907      	ldr	r1, [sp, #28]
 800baf0:	430b      	orrs	r3, r1
 800baf2:	9908      	ldr	r1, [sp, #32]
 800baf4:	430b      	orrs	r3, r1
 800baf6:	d120      	bne.n	800bb3a <_dtoa_r+0x9aa>
 800baf8:	2a00      	cmp	r2, #0
 800bafa:	ddee      	ble.n	800bada <_dtoa_r+0x94a>
 800bafc:	9901      	ldr	r1, [sp, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	4648      	mov	r0, r9
 800bb02:	f000 fba9 	bl	800c258 <__lshift>
 800bb06:	4621      	mov	r1, r4
 800bb08:	9001      	str	r0, [sp, #4]
 800bb0a:	f000 fc11 	bl	800c330 <__mcmp>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	dc03      	bgt.n	800bb1a <_dtoa_r+0x98a>
 800bb12:	d1e2      	bne.n	800bada <_dtoa_r+0x94a>
 800bb14:	f01a 0f01 	tst.w	sl, #1
 800bb18:	d0df      	beq.n	800bada <_dtoa_r+0x94a>
 800bb1a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bb1e:	d1d9      	bne.n	800bad4 <_dtoa_r+0x944>
 800bb20:	2339      	movs	r3, #57	@ 0x39
 800bb22:	f88b 3000 	strb.w	r3, [fp]
 800bb26:	4633      	mov	r3, r6
 800bb28:	461e      	mov	r6, r3
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb30:	2a39      	cmp	r2, #57	@ 0x39
 800bb32:	d052      	beq.n	800bbda <_dtoa_r+0xa4a>
 800bb34:	3201      	adds	r2, #1
 800bb36:	701a      	strb	r2, [r3, #0]
 800bb38:	e531      	b.n	800b59e <_dtoa_r+0x40e>
 800bb3a:	2a00      	cmp	r2, #0
 800bb3c:	dd07      	ble.n	800bb4e <_dtoa_r+0x9be>
 800bb3e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bb42:	d0ed      	beq.n	800bb20 <_dtoa_r+0x990>
 800bb44:	f10a 0301 	add.w	r3, sl, #1
 800bb48:	f88b 3000 	strb.w	r3, [fp]
 800bb4c:	e527      	b.n	800b59e <_dtoa_r+0x40e>
 800bb4e:	9b04      	ldr	r3, [sp, #16]
 800bb50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb52:	f803 ac01 	strb.w	sl, [r3, #-1]
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d029      	beq.n	800bbae <_dtoa_r+0xa1e>
 800bb5a:	9901      	ldr	r1, [sp, #4]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	220a      	movs	r2, #10
 800bb60:	4648      	mov	r0, r9
 800bb62:	f000 f9d5 	bl	800bf10 <__multadd>
 800bb66:	45a8      	cmp	r8, r5
 800bb68:	9001      	str	r0, [sp, #4]
 800bb6a:	f04f 0300 	mov.w	r3, #0
 800bb6e:	f04f 020a 	mov.w	r2, #10
 800bb72:	4641      	mov	r1, r8
 800bb74:	4648      	mov	r0, r9
 800bb76:	d107      	bne.n	800bb88 <_dtoa_r+0x9f8>
 800bb78:	f000 f9ca 	bl	800bf10 <__multadd>
 800bb7c:	4680      	mov	r8, r0
 800bb7e:	4605      	mov	r5, r0
 800bb80:	9b04      	ldr	r3, [sp, #16]
 800bb82:	3301      	adds	r3, #1
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	e776      	b.n	800ba76 <_dtoa_r+0x8e6>
 800bb88:	f000 f9c2 	bl	800bf10 <__multadd>
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4680      	mov	r8, r0
 800bb90:	2300      	movs	r3, #0
 800bb92:	220a      	movs	r2, #10
 800bb94:	4648      	mov	r0, r9
 800bb96:	f000 f9bb 	bl	800bf10 <__multadd>
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	e7f0      	b.n	800bb80 <_dtoa_r+0x9f0>
 800bb9e:	f1bb 0f00 	cmp.w	fp, #0
 800bba2:	bfcc      	ite	gt
 800bba4:	465e      	movgt	r6, fp
 800bba6:	2601      	movle	r6, #1
 800bba8:	443e      	add	r6, r7
 800bbaa:	f04f 0800 	mov.w	r8, #0
 800bbae:	9901      	ldr	r1, [sp, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	4648      	mov	r0, r9
 800bbb4:	f000 fb50 	bl	800c258 <__lshift>
 800bbb8:	4621      	mov	r1, r4
 800bbba:	9001      	str	r0, [sp, #4]
 800bbbc:	f000 fbb8 	bl	800c330 <__mcmp>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	dcb0      	bgt.n	800bb26 <_dtoa_r+0x996>
 800bbc4:	d102      	bne.n	800bbcc <_dtoa_r+0xa3c>
 800bbc6:	f01a 0f01 	tst.w	sl, #1
 800bbca:	d1ac      	bne.n	800bb26 <_dtoa_r+0x996>
 800bbcc:	4633      	mov	r3, r6
 800bbce:	461e      	mov	r6, r3
 800bbd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbd4:	2a30      	cmp	r2, #48	@ 0x30
 800bbd6:	d0fa      	beq.n	800bbce <_dtoa_r+0xa3e>
 800bbd8:	e4e1      	b.n	800b59e <_dtoa_r+0x40e>
 800bbda:	429f      	cmp	r7, r3
 800bbdc:	d1a4      	bne.n	800bb28 <_dtoa_r+0x998>
 800bbde:	9b05      	ldr	r3, [sp, #20]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	9305      	str	r3, [sp, #20]
 800bbe4:	2331      	movs	r3, #49	@ 0x31
 800bbe6:	703b      	strb	r3, [r7, #0]
 800bbe8:	e4d9      	b.n	800b59e <_dtoa_r+0x40e>
 800bbea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bbec:	4f16      	ldr	r7, [pc, #88]	@ (800bc48 <_dtoa_r+0xab8>)
 800bbee:	b11b      	cbz	r3, 800bbf8 <_dtoa_r+0xa68>
 800bbf0:	f107 0308 	add.w	r3, r7, #8
 800bbf4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bbf6:	6013      	str	r3, [r2, #0]
 800bbf8:	4638      	mov	r0, r7
 800bbfa:	b011      	add	sp, #68	@ 0x44
 800bbfc:	ecbd 8b02 	vpop	{d8}
 800bc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc04:	9b07      	ldr	r3, [sp, #28]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	f77f ae2c 	ble.w	800b864 <_dtoa_r+0x6d4>
 800bc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc10:	2001      	movs	r0, #1
 800bc12:	e64c      	b.n	800b8ae <_dtoa_r+0x71e>
 800bc14:	f1bb 0f00 	cmp.w	fp, #0
 800bc18:	f77f aed8 	ble.w	800b9cc <_dtoa_r+0x83c>
 800bc1c:	463e      	mov	r6, r7
 800bc1e:	9801      	ldr	r0, [sp, #4]
 800bc20:	4621      	mov	r1, r4
 800bc22:	f7ff fa2c 	bl	800b07e <quorem>
 800bc26:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bc2a:	f806 ab01 	strb.w	sl, [r6], #1
 800bc2e:	1bf2      	subs	r2, r6, r7
 800bc30:	4593      	cmp	fp, r2
 800bc32:	ddb4      	ble.n	800bb9e <_dtoa_r+0xa0e>
 800bc34:	9901      	ldr	r1, [sp, #4]
 800bc36:	2300      	movs	r3, #0
 800bc38:	220a      	movs	r2, #10
 800bc3a:	4648      	mov	r0, r9
 800bc3c:	f000 f968 	bl	800bf10 <__multadd>
 800bc40:	9001      	str	r0, [sp, #4]
 800bc42:	e7ec      	b.n	800bc1e <_dtoa_r+0xa8e>
 800bc44:	0800d058 	.word	0x0800d058
 800bc48:	0800cfdc 	.word	0x0800cfdc

0800bc4c <_free_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4605      	mov	r5, r0
 800bc50:	2900      	cmp	r1, #0
 800bc52:	d041      	beq.n	800bcd8 <_free_r+0x8c>
 800bc54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc58:	1f0c      	subs	r4, r1, #4
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	bfb8      	it	lt
 800bc5e:	18e4      	addlt	r4, r4, r3
 800bc60:	f000 f8e8 	bl	800be34 <__malloc_lock>
 800bc64:	4a1d      	ldr	r2, [pc, #116]	@ (800bcdc <_free_r+0x90>)
 800bc66:	6813      	ldr	r3, [r2, #0]
 800bc68:	b933      	cbnz	r3, 800bc78 <_free_r+0x2c>
 800bc6a:	6063      	str	r3, [r4, #4]
 800bc6c:	6014      	str	r4, [r2, #0]
 800bc6e:	4628      	mov	r0, r5
 800bc70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc74:	f000 b8e4 	b.w	800be40 <__malloc_unlock>
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	d908      	bls.n	800bc8e <_free_r+0x42>
 800bc7c:	6820      	ldr	r0, [r4, #0]
 800bc7e:	1821      	adds	r1, r4, r0
 800bc80:	428b      	cmp	r3, r1
 800bc82:	bf01      	itttt	eq
 800bc84:	6819      	ldreq	r1, [r3, #0]
 800bc86:	685b      	ldreq	r3, [r3, #4]
 800bc88:	1809      	addeq	r1, r1, r0
 800bc8a:	6021      	streq	r1, [r4, #0]
 800bc8c:	e7ed      	b.n	800bc6a <_free_r+0x1e>
 800bc8e:	461a      	mov	r2, r3
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	b10b      	cbz	r3, 800bc98 <_free_r+0x4c>
 800bc94:	42a3      	cmp	r3, r4
 800bc96:	d9fa      	bls.n	800bc8e <_free_r+0x42>
 800bc98:	6811      	ldr	r1, [r2, #0]
 800bc9a:	1850      	adds	r0, r2, r1
 800bc9c:	42a0      	cmp	r0, r4
 800bc9e:	d10b      	bne.n	800bcb8 <_free_r+0x6c>
 800bca0:	6820      	ldr	r0, [r4, #0]
 800bca2:	4401      	add	r1, r0
 800bca4:	1850      	adds	r0, r2, r1
 800bca6:	4283      	cmp	r3, r0
 800bca8:	6011      	str	r1, [r2, #0]
 800bcaa:	d1e0      	bne.n	800bc6e <_free_r+0x22>
 800bcac:	6818      	ldr	r0, [r3, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	6053      	str	r3, [r2, #4]
 800bcb2:	4408      	add	r0, r1
 800bcb4:	6010      	str	r0, [r2, #0]
 800bcb6:	e7da      	b.n	800bc6e <_free_r+0x22>
 800bcb8:	d902      	bls.n	800bcc0 <_free_r+0x74>
 800bcba:	230c      	movs	r3, #12
 800bcbc:	602b      	str	r3, [r5, #0]
 800bcbe:	e7d6      	b.n	800bc6e <_free_r+0x22>
 800bcc0:	6820      	ldr	r0, [r4, #0]
 800bcc2:	1821      	adds	r1, r4, r0
 800bcc4:	428b      	cmp	r3, r1
 800bcc6:	bf04      	itt	eq
 800bcc8:	6819      	ldreq	r1, [r3, #0]
 800bcca:	685b      	ldreq	r3, [r3, #4]
 800bccc:	6063      	str	r3, [r4, #4]
 800bcce:	bf04      	itt	eq
 800bcd0:	1809      	addeq	r1, r1, r0
 800bcd2:	6021      	streq	r1, [r4, #0]
 800bcd4:	6054      	str	r4, [r2, #4]
 800bcd6:	e7ca      	b.n	800bc6e <_free_r+0x22>
 800bcd8:	bd38      	pop	{r3, r4, r5, pc}
 800bcda:	bf00      	nop
 800bcdc:	24000938 	.word	0x24000938

0800bce0 <malloc>:
 800bce0:	4b02      	ldr	r3, [pc, #8]	@ (800bcec <malloc+0xc>)
 800bce2:	4601      	mov	r1, r0
 800bce4:	6818      	ldr	r0, [r3, #0]
 800bce6:	f000 b825 	b.w	800bd34 <_malloc_r>
 800bcea:	bf00      	nop
 800bcec:	2400001c 	.word	0x2400001c

0800bcf0 <sbrk_aligned>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	4e0f      	ldr	r6, [pc, #60]	@ (800bd30 <sbrk_aligned+0x40>)
 800bcf4:	460c      	mov	r4, r1
 800bcf6:	6831      	ldr	r1, [r6, #0]
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	b911      	cbnz	r1, 800bd02 <sbrk_aligned+0x12>
 800bcfc:	f001 f804 	bl	800cd08 <_sbrk_r>
 800bd00:	6030      	str	r0, [r6, #0]
 800bd02:	4621      	mov	r1, r4
 800bd04:	4628      	mov	r0, r5
 800bd06:	f000 ffff 	bl	800cd08 <_sbrk_r>
 800bd0a:	1c43      	adds	r3, r0, #1
 800bd0c:	d103      	bne.n	800bd16 <sbrk_aligned+0x26>
 800bd0e:	f04f 34ff 	mov.w	r4, #4294967295
 800bd12:	4620      	mov	r0, r4
 800bd14:	bd70      	pop	{r4, r5, r6, pc}
 800bd16:	1cc4      	adds	r4, r0, #3
 800bd18:	f024 0403 	bic.w	r4, r4, #3
 800bd1c:	42a0      	cmp	r0, r4
 800bd1e:	d0f8      	beq.n	800bd12 <sbrk_aligned+0x22>
 800bd20:	1a21      	subs	r1, r4, r0
 800bd22:	4628      	mov	r0, r5
 800bd24:	f000 fff0 	bl	800cd08 <_sbrk_r>
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d1f2      	bne.n	800bd12 <sbrk_aligned+0x22>
 800bd2c:	e7ef      	b.n	800bd0e <sbrk_aligned+0x1e>
 800bd2e:	bf00      	nop
 800bd30:	24000934 	.word	0x24000934

0800bd34 <_malloc_r>:
 800bd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd38:	1ccd      	adds	r5, r1, #3
 800bd3a:	f025 0503 	bic.w	r5, r5, #3
 800bd3e:	3508      	adds	r5, #8
 800bd40:	2d0c      	cmp	r5, #12
 800bd42:	bf38      	it	cc
 800bd44:	250c      	movcc	r5, #12
 800bd46:	2d00      	cmp	r5, #0
 800bd48:	4606      	mov	r6, r0
 800bd4a:	db01      	blt.n	800bd50 <_malloc_r+0x1c>
 800bd4c:	42a9      	cmp	r1, r5
 800bd4e:	d904      	bls.n	800bd5a <_malloc_r+0x26>
 800bd50:	230c      	movs	r3, #12
 800bd52:	6033      	str	r3, [r6, #0]
 800bd54:	2000      	movs	r0, #0
 800bd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be30 <_malloc_r+0xfc>
 800bd5e:	f000 f869 	bl	800be34 <__malloc_lock>
 800bd62:	f8d8 3000 	ldr.w	r3, [r8]
 800bd66:	461c      	mov	r4, r3
 800bd68:	bb44      	cbnz	r4, 800bdbc <_malloc_r+0x88>
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f7ff ffbf 	bl	800bcf0 <sbrk_aligned>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	4604      	mov	r4, r0
 800bd76:	d158      	bne.n	800be2a <_malloc_r+0xf6>
 800bd78:	f8d8 4000 	ldr.w	r4, [r8]
 800bd7c:	4627      	mov	r7, r4
 800bd7e:	2f00      	cmp	r7, #0
 800bd80:	d143      	bne.n	800be0a <_malloc_r+0xd6>
 800bd82:	2c00      	cmp	r4, #0
 800bd84:	d04b      	beq.n	800be1e <_malloc_r+0xea>
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	4639      	mov	r1, r7
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	eb04 0903 	add.w	r9, r4, r3
 800bd90:	f000 ffba 	bl	800cd08 <_sbrk_r>
 800bd94:	4581      	cmp	r9, r0
 800bd96:	d142      	bne.n	800be1e <_malloc_r+0xea>
 800bd98:	6821      	ldr	r1, [r4, #0]
 800bd9a:	1a6d      	subs	r5, r5, r1
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7ff ffa6 	bl	800bcf0 <sbrk_aligned>
 800bda4:	3001      	adds	r0, #1
 800bda6:	d03a      	beq.n	800be1e <_malloc_r+0xea>
 800bda8:	6823      	ldr	r3, [r4, #0]
 800bdaa:	442b      	add	r3, r5
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	f8d8 3000 	ldr.w	r3, [r8]
 800bdb2:	685a      	ldr	r2, [r3, #4]
 800bdb4:	bb62      	cbnz	r2, 800be10 <_malloc_r+0xdc>
 800bdb6:	f8c8 7000 	str.w	r7, [r8]
 800bdba:	e00f      	b.n	800bddc <_malloc_r+0xa8>
 800bdbc:	6822      	ldr	r2, [r4, #0]
 800bdbe:	1b52      	subs	r2, r2, r5
 800bdc0:	d420      	bmi.n	800be04 <_malloc_r+0xd0>
 800bdc2:	2a0b      	cmp	r2, #11
 800bdc4:	d917      	bls.n	800bdf6 <_malloc_r+0xc2>
 800bdc6:	1961      	adds	r1, r4, r5
 800bdc8:	42a3      	cmp	r3, r4
 800bdca:	6025      	str	r5, [r4, #0]
 800bdcc:	bf18      	it	ne
 800bdce:	6059      	strne	r1, [r3, #4]
 800bdd0:	6863      	ldr	r3, [r4, #4]
 800bdd2:	bf08      	it	eq
 800bdd4:	f8c8 1000 	streq.w	r1, [r8]
 800bdd8:	5162      	str	r2, [r4, r5]
 800bdda:	604b      	str	r3, [r1, #4]
 800bddc:	4630      	mov	r0, r6
 800bdde:	f000 f82f 	bl	800be40 <__malloc_unlock>
 800bde2:	f104 000b 	add.w	r0, r4, #11
 800bde6:	1d23      	adds	r3, r4, #4
 800bde8:	f020 0007 	bic.w	r0, r0, #7
 800bdec:	1ac2      	subs	r2, r0, r3
 800bdee:	bf1c      	itt	ne
 800bdf0:	1a1b      	subne	r3, r3, r0
 800bdf2:	50a3      	strne	r3, [r4, r2]
 800bdf4:	e7af      	b.n	800bd56 <_malloc_r+0x22>
 800bdf6:	6862      	ldr	r2, [r4, #4]
 800bdf8:	42a3      	cmp	r3, r4
 800bdfa:	bf0c      	ite	eq
 800bdfc:	f8c8 2000 	streq.w	r2, [r8]
 800be00:	605a      	strne	r2, [r3, #4]
 800be02:	e7eb      	b.n	800bddc <_malloc_r+0xa8>
 800be04:	4623      	mov	r3, r4
 800be06:	6864      	ldr	r4, [r4, #4]
 800be08:	e7ae      	b.n	800bd68 <_malloc_r+0x34>
 800be0a:	463c      	mov	r4, r7
 800be0c:	687f      	ldr	r7, [r7, #4]
 800be0e:	e7b6      	b.n	800bd7e <_malloc_r+0x4a>
 800be10:	461a      	mov	r2, r3
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	42a3      	cmp	r3, r4
 800be16:	d1fb      	bne.n	800be10 <_malloc_r+0xdc>
 800be18:	2300      	movs	r3, #0
 800be1a:	6053      	str	r3, [r2, #4]
 800be1c:	e7de      	b.n	800bddc <_malloc_r+0xa8>
 800be1e:	230c      	movs	r3, #12
 800be20:	6033      	str	r3, [r6, #0]
 800be22:	4630      	mov	r0, r6
 800be24:	f000 f80c 	bl	800be40 <__malloc_unlock>
 800be28:	e794      	b.n	800bd54 <_malloc_r+0x20>
 800be2a:	6005      	str	r5, [r0, #0]
 800be2c:	e7d6      	b.n	800bddc <_malloc_r+0xa8>
 800be2e:	bf00      	nop
 800be30:	24000938 	.word	0x24000938

0800be34 <__malloc_lock>:
 800be34:	4801      	ldr	r0, [pc, #4]	@ (800be3c <__malloc_lock+0x8>)
 800be36:	f7ff b912 	b.w	800b05e <__retarget_lock_acquire_recursive>
 800be3a:	bf00      	nop
 800be3c:	24000930 	.word	0x24000930

0800be40 <__malloc_unlock>:
 800be40:	4801      	ldr	r0, [pc, #4]	@ (800be48 <__malloc_unlock+0x8>)
 800be42:	f7ff b90d 	b.w	800b060 <__retarget_lock_release_recursive>
 800be46:	bf00      	nop
 800be48:	24000930 	.word	0x24000930

0800be4c <_Balloc>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	69c6      	ldr	r6, [r0, #28]
 800be50:	4604      	mov	r4, r0
 800be52:	460d      	mov	r5, r1
 800be54:	b976      	cbnz	r6, 800be74 <_Balloc+0x28>
 800be56:	2010      	movs	r0, #16
 800be58:	f7ff ff42 	bl	800bce0 <malloc>
 800be5c:	4602      	mov	r2, r0
 800be5e:	61e0      	str	r0, [r4, #28]
 800be60:	b920      	cbnz	r0, 800be6c <_Balloc+0x20>
 800be62:	4b18      	ldr	r3, [pc, #96]	@ (800bec4 <_Balloc+0x78>)
 800be64:	4818      	ldr	r0, [pc, #96]	@ (800bec8 <_Balloc+0x7c>)
 800be66:	216b      	movs	r1, #107	@ 0x6b
 800be68:	f000 ff5e 	bl	800cd28 <__assert_func>
 800be6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be70:	6006      	str	r6, [r0, #0]
 800be72:	60c6      	str	r6, [r0, #12]
 800be74:	69e6      	ldr	r6, [r4, #28]
 800be76:	68f3      	ldr	r3, [r6, #12]
 800be78:	b183      	cbz	r3, 800be9c <_Balloc+0x50>
 800be7a:	69e3      	ldr	r3, [r4, #28]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be82:	b9b8      	cbnz	r0, 800beb4 <_Balloc+0x68>
 800be84:	2101      	movs	r1, #1
 800be86:	fa01 f605 	lsl.w	r6, r1, r5
 800be8a:	1d72      	adds	r2, r6, #5
 800be8c:	0092      	lsls	r2, r2, #2
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 ff68 	bl	800cd64 <_calloc_r>
 800be94:	b160      	cbz	r0, 800beb0 <_Balloc+0x64>
 800be96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be9a:	e00e      	b.n	800beba <_Balloc+0x6e>
 800be9c:	2221      	movs	r2, #33	@ 0x21
 800be9e:	2104      	movs	r1, #4
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 ff5f 	bl	800cd64 <_calloc_r>
 800bea6:	69e3      	ldr	r3, [r4, #28]
 800bea8:	60f0      	str	r0, [r6, #12]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1e4      	bne.n	800be7a <_Balloc+0x2e>
 800beb0:	2000      	movs	r0, #0
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
 800beb4:	6802      	ldr	r2, [r0, #0]
 800beb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800beba:	2300      	movs	r3, #0
 800bebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bec0:	e7f7      	b.n	800beb2 <_Balloc+0x66>
 800bec2:	bf00      	nop
 800bec4:	0800cfe9 	.word	0x0800cfe9
 800bec8:	0800d069 	.word	0x0800d069

0800becc <_Bfree>:
 800becc:	b570      	push	{r4, r5, r6, lr}
 800bece:	69c6      	ldr	r6, [r0, #28]
 800bed0:	4605      	mov	r5, r0
 800bed2:	460c      	mov	r4, r1
 800bed4:	b976      	cbnz	r6, 800bef4 <_Bfree+0x28>
 800bed6:	2010      	movs	r0, #16
 800bed8:	f7ff ff02 	bl	800bce0 <malloc>
 800bedc:	4602      	mov	r2, r0
 800bede:	61e8      	str	r0, [r5, #28]
 800bee0:	b920      	cbnz	r0, 800beec <_Bfree+0x20>
 800bee2:	4b09      	ldr	r3, [pc, #36]	@ (800bf08 <_Bfree+0x3c>)
 800bee4:	4809      	ldr	r0, [pc, #36]	@ (800bf0c <_Bfree+0x40>)
 800bee6:	218f      	movs	r1, #143	@ 0x8f
 800bee8:	f000 ff1e 	bl	800cd28 <__assert_func>
 800beec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bef0:	6006      	str	r6, [r0, #0]
 800bef2:	60c6      	str	r6, [r0, #12]
 800bef4:	b13c      	cbz	r4, 800bf06 <_Bfree+0x3a>
 800bef6:	69eb      	ldr	r3, [r5, #28]
 800bef8:	6862      	ldr	r2, [r4, #4]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf00:	6021      	str	r1, [r4, #0]
 800bf02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
 800bf08:	0800cfe9 	.word	0x0800cfe9
 800bf0c:	0800d069 	.word	0x0800d069

0800bf10 <__multadd>:
 800bf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf14:	690d      	ldr	r5, [r1, #16]
 800bf16:	4607      	mov	r7, r0
 800bf18:	460c      	mov	r4, r1
 800bf1a:	461e      	mov	r6, r3
 800bf1c:	f101 0c14 	add.w	ip, r1, #20
 800bf20:	2000      	movs	r0, #0
 800bf22:	f8dc 3000 	ldr.w	r3, [ip]
 800bf26:	b299      	uxth	r1, r3
 800bf28:	fb02 6101 	mla	r1, r2, r1, r6
 800bf2c:	0c1e      	lsrs	r6, r3, #16
 800bf2e:	0c0b      	lsrs	r3, r1, #16
 800bf30:	fb02 3306 	mla	r3, r2, r6, r3
 800bf34:	b289      	uxth	r1, r1
 800bf36:	3001      	adds	r0, #1
 800bf38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf3c:	4285      	cmp	r5, r0
 800bf3e:	f84c 1b04 	str.w	r1, [ip], #4
 800bf42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf46:	dcec      	bgt.n	800bf22 <__multadd+0x12>
 800bf48:	b30e      	cbz	r6, 800bf8e <__multadd+0x7e>
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	42ab      	cmp	r3, r5
 800bf4e:	dc19      	bgt.n	800bf84 <__multadd+0x74>
 800bf50:	6861      	ldr	r1, [r4, #4]
 800bf52:	4638      	mov	r0, r7
 800bf54:	3101      	adds	r1, #1
 800bf56:	f7ff ff79 	bl	800be4c <_Balloc>
 800bf5a:	4680      	mov	r8, r0
 800bf5c:	b928      	cbnz	r0, 800bf6a <__multadd+0x5a>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	4b0c      	ldr	r3, [pc, #48]	@ (800bf94 <__multadd+0x84>)
 800bf62:	480d      	ldr	r0, [pc, #52]	@ (800bf98 <__multadd+0x88>)
 800bf64:	21ba      	movs	r1, #186	@ 0xba
 800bf66:	f000 fedf 	bl	800cd28 <__assert_func>
 800bf6a:	6922      	ldr	r2, [r4, #16]
 800bf6c:	3202      	adds	r2, #2
 800bf6e:	f104 010c 	add.w	r1, r4, #12
 800bf72:	0092      	lsls	r2, r2, #2
 800bf74:	300c      	adds	r0, #12
 800bf76:	f7ff f874 	bl	800b062 <memcpy>
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	4638      	mov	r0, r7
 800bf7e:	f7ff ffa5 	bl	800becc <_Bfree>
 800bf82:	4644      	mov	r4, r8
 800bf84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf88:	3501      	adds	r5, #1
 800bf8a:	615e      	str	r6, [r3, #20]
 800bf8c:	6125      	str	r5, [r4, #16]
 800bf8e:	4620      	mov	r0, r4
 800bf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf94:	0800d058 	.word	0x0800d058
 800bf98:	0800d069 	.word	0x0800d069

0800bf9c <__hi0bits>:
 800bf9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	bf36      	itet	cc
 800bfa4:	0403      	lslcc	r3, r0, #16
 800bfa6:	2000      	movcs	r0, #0
 800bfa8:	2010      	movcc	r0, #16
 800bfaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bfae:	bf3c      	itt	cc
 800bfb0:	021b      	lslcc	r3, r3, #8
 800bfb2:	3008      	addcc	r0, #8
 800bfb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfb8:	bf3c      	itt	cc
 800bfba:	011b      	lslcc	r3, r3, #4
 800bfbc:	3004      	addcc	r0, #4
 800bfbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfc2:	bf3c      	itt	cc
 800bfc4:	009b      	lslcc	r3, r3, #2
 800bfc6:	3002      	addcc	r0, #2
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	db05      	blt.n	800bfd8 <__hi0bits+0x3c>
 800bfcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bfd0:	f100 0001 	add.w	r0, r0, #1
 800bfd4:	bf08      	it	eq
 800bfd6:	2020      	moveq	r0, #32
 800bfd8:	4770      	bx	lr

0800bfda <__lo0bits>:
 800bfda:	6803      	ldr	r3, [r0, #0]
 800bfdc:	4602      	mov	r2, r0
 800bfde:	f013 0007 	ands.w	r0, r3, #7
 800bfe2:	d00b      	beq.n	800bffc <__lo0bits+0x22>
 800bfe4:	07d9      	lsls	r1, r3, #31
 800bfe6:	d421      	bmi.n	800c02c <__lo0bits+0x52>
 800bfe8:	0798      	lsls	r0, r3, #30
 800bfea:	bf49      	itett	mi
 800bfec:	085b      	lsrmi	r3, r3, #1
 800bfee:	089b      	lsrpl	r3, r3, #2
 800bff0:	2001      	movmi	r0, #1
 800bff2:	6013      	strmi	r3, [r2, #0]
 800bff4:	bf5c      	itt	pl
 800bff6:	6013      	strpl	r3, [r2, #0]
 800bff8:	2002      	movpl	r0, #2
 800bffa:	4770      	bx	lr
 800bffc:	b299      	uxth	r1, r3
 800bffe:	b909      	cbnz	r1, 800c004 <__lo0bits+0x2a>
 800c000:	0c1b      	lsrs	r3, r3, #16
 800c002:	2010      	movs	r0, #16
 800c004:	b2d9      	uxtb	r1, r3
 800c006:	b909      	cbnz	r1, 800c00c <__lo0bits+0x32>
 800c008:	3008      	adds	r0, #8
 800c00a:	0a1b      	lsrs	r3, r3, #8
 800c00c:	0719      	lsls	r1, r3, #28
 800c00e:	bf04      	itt	eq
 800c010:	091b      	lsreq	r3, r3, #4
 800c012:	3004      	addeq	r0, #4
 800c014:	0799      	lsls	r1, r3, #30
 800c016:	bf04      	itt	eq
 800c018:	089b      	lsreq	r3, r3, #2
 800c01a:	3002      	addeq	r0, #2
 800c01c:	07d9      	lsls	r1, r3, #31
 800c01e:	d403      	bmi.n	800c028 <__lo0bits+0x4e>
 800c020:	085b      	lsrs	r3, r3, #1
 800c022:	f100 0001 	add.w	r0, r0, #1
 800c026:	d003      	beq.n	800c030 <__lo0bits+0x56>
 800c028:	6013      	str	r3, [r2, #0]
 800c02a:	4770      	bx	lr
 800c02c:	2000      	movs	r0, #0
 800c02e:	4770      	bx	lr
 800c030:	2020      	movs	r0, #32
 800c032:	4770      	bx	lr

0800c034 <__i2b>:
 800c034:	b510      	push	{r4, lr}
 800c036:	460c      	mov	r4, r1
 800c038:	2101      	movs	r1, #1
 800c03a:	f7ff ff07 	bl	800be4c <_Balloc>
 800c03e:	4602      	mov	r2, r0
 800c040:	b928      	cbnz	r0, 800c04e <__i2b+0x1a>
 800c042:	4b05      	ldr	r3, [pc, #20]	@ (800c058 <__i2b+0x24>)
 800c044:	4805      	ldr	r0, [pc, #20]	@ (800c05c <__i2b+0x28>)
 800c046:	f240 1145 	movw	r1, #325	@ 0x145
 800c04a:	f000 fe6d 	bl	800cd28 <__assert_func>
 800c04e:	2301      	movs	r3, #1
 800c050:	6144      	str	r4, [r0, #20]
 800c052:	6103      	str	r3, [r0, #16]
 800c054:	bd10      	pop	{r4, pc}
 800c056:	bf00      	nop
 800c058:	0800d058 	.word	0x0800d058
 800c05c:	0800d069 	.word	0x0800d069

0800c060 <__multiply>:
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	4617      	mov	r7, r2
 800c066:	690a      	ldr	r2, [r1, #16]
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	bfa8      	it	ge
 800c06e:	463b      	movge	r3, r7
 800c070:	4689      	mov	r9, r1
 800c072:	bfa4      	itt	ge
 800c074:	460f      	movge	r7, r1
 800c076:	4699      	movge	r9, r3
 800c078:	693d      	ldr	r5, [r7, #16]
 800c07a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	eb05 060a 	add.w	r6, r5, sl
 800c086:	42b3      	cmp	r3, r6
 800c088:	b085      	sub	sp, #20
 800c08a:	bfb8      	it	lt
 800c08c:	3101      	addlt	r1, #1
 800c08e:	f7ff fedd 	bl	800be4c <_Balloc>
 800c092:	b930      	cbnz	r0, 800c0a2 <__multiply+0x42>
 800c094:	4602      	mov	r2, r0
 800c096:	4b41      	ldr	r3, [pc, #260]	@ (800c19c <__multiply+0x13c>)
 800c098:	4841      	ldr	r0, [pc, #260]	@ (800c1a0 <__multiply+0x140>)
 800c09a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c09e:	f000 fe43 	bl	800cd28 <__assert_func>
 800c0a2:	f100 0414 	add.w	r4, r0, #20
 800c0a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c0aa:	4623      	mov	r3, r4
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	4573      	cmp	r3, lr
 800c0b0:	d320      	bcc.n	800c0f4 <__multiply+0x94>
 800c0b2:	f107 0814 	add.w	r8, r7, #20
 800c0b6:	f109 0114 	add.w	r1, r9, #20
 800c0ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c0be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c0c2:	9302      	str	r3, [sp, #8]
 800c0c4:	1beb      	subs	r3, r5, r7
 800c0c6:	3b15      	subs	r3, #21
 800c0c8:	f023 0303 	bic.w	r3, r3, #3
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	3715      	adds	r7, #21
 800c0d0:	42bd      	cmp	r5, r7
 800c0d2:	bf38      	it	cc
 800c0d4:	2304      	movcc	r3, #4
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	9b02      	ldr	r3, [sp, #8]
 800c0da:	9103      	str	r1, [sp, #12]
 800c0dc:	428b      	cmp	r3, r1
 800c0de:	d80c      	bhi.n	800c0fa <__multiply+0x9a>
 800c0e0:	2e00      	cmp	r6, #0
 800c0e2:	dd03      	ble.n	800c0ec <__multiply+0x8c>
 800c0e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d055      	beq.n	800c198 <__multiply+0x138>
 800c0ec:	6106      	str	r6, [r0, #16]
 800c0ee:	b005      	add	sp, #20
 800c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f4:	f843 2b04 	str.w	r2, [r3], #4
 800c0f8:	e7d9      	b.n	800c0ae <__multiply+0x4e>
 800c0fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800c0fe:	f1ba 0f00 	cmp.w	sl, #0
 800c102:	d01f      	beq.n	800c144 <__multiply+0xe4>
 800c104:	46c4      	mov	ip, r8
 800c106:	46a1      	mov	r9, r4
 800c108:	2700      	movs	r7, #0
 800c10a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c10e:	f8d9 3000 	ldr.w	r3, [r9]
 800c112:	fa1f fb82 	uxth.w	fp, r2
 800c116:	b29b      	uxth	r3, r3
 800c118:	fb0a 330b 	mla	r3, sl, fp, r3
 800c11c:	443b      	add	r3, r7
 800c11e:	f8d9 7000 	ldr.w	r7, [r9]
 800c122:	0c12      	lsrs	r2, r2, #16
 800c124:	0c3f      	lsrs	r7, r7, #16
 800c126:	fb0a 7202 	mla	r2, sl, r2, r7
 800c12a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c12e:	b29b      	uxth	r3, r3
 800c130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c134:	4565      	cmp	r5, ip
 800c136:	f849 3b04 	str.w	r3, [r9], #4
 800c13a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c13e:	d8e4      	bhi.n	800c10a <__multiply+0xaa>
 800c140:	9b01      	ldr	r3, [sp, #4]
 800c142:	50e7      	str	r7, [r4, r3]
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c14a:	3104      	adds	r1, #4
 800c14c:	f1b9 0f00 	cmp.w	r9, #0
 800c150:	d020      	beq.n	800c194 <__multiply+0x134>
 800c152:	6823      	ldr	r3, [r4, #0]
 800c154:	4647      	mov	r7, r8
 800c156:	46a4      	mov	ip, r4
 800c158:	f04f 0a00 	mov.w	sl, #0
 800c15c:	f8b7 b000 	ldrh.w	fp, [r7]
 800c160:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c164:	fb09 220b 	mla	r2, r9, fp, r2
 800c168:	4452      	add	r2, sl
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c170:	f84c 3b04 	str.w	r3, [ip], #4
 800c174:	f857 3b04 	ldr.w	r3, [r7], #4
 800c178:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c17c:	f8bc 3000 	ldrh.w	r3, [ip]
 800c180:	fb09 330a 	mla	r3, r9, sl, r3
 800c184:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c188:	42bd      	cmp	r5, r7
 800c18a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c18e:	d8e5      	bhi.n	800c15c <__multiply+0xfc>
 800c190:	9a01      	ldr	r2, [sp, #4]
 800c192:	50a3      	str	r3, [r4, r2]
 800c194:	3404      	adds	r4, #4
 800c196:	e79f      	b.n	800c0d8 <__multiply+0x78>
 800c198:	3e01      	subs	r6, #1
 800c19a:	e7a1      	b.n	800c0e0 <__multiply+0x80>
 800c19c:	0800d058 	.word	0x0800d058
 800c1a0:	0800d069 	.word	0x0800d069

0800c1a4 <__pow5mult>:
 800c1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a8:	4615      	mov	r5, r2
 800c1aa:	f012 0203 	ands.w	r2, r2, #3
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	460e      	mov	r6, r1
 800c1b2:	d007      	beq.n	800c1c4 <__pow5mult+0x20>
 800c1b4:	4c25      	ldr	r4, [pc, #148]	@ (800c24c <__pow5mult+0xa8>)
 800c1b6:	3a01      	subs	r2, #1
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1be:	f7ff fea7 	bl	800bf10 <__multadd>
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	10ad      	asrs	r5, r5, #2
 800c1c6:	d03d      	beq.n	800c244 <__pow5mult+0xa0>
 800c1c8:	69fc      	ldr	r4, [r7, #28]
 800c1ca:	b97c      	cbnz	r4, 800c1ec <__pow5mult+0x48>
 800c1cc:	2010      	movs	r0, #16
 800c1ce:	f7ff fd87 	bl	800bce0 <malloc>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	61f8      	str	r0, [r7, #28]
 800c1d6:	b928      	cbnz	r0, 800c1e4 <__pow5mult+0x40>
 800c1d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c250 <__pow5mult+0xac>)
 800c1da:	481e      	ldr	r0, [pc, #120]	@ (800c254 <__pow5mult+0xb0>)
 800c1dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c1e0:	f000 fda2 	bl	800cd28 <__assert_func>
 800c1e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1e8:	6004      	str	r4, [r0, #0]
 800c1ea:	60c4      	str	r4, [r0, #12]
 800c1ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c1f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1f4:	b94c      	cbnz	r4, 800c20a <__pow5mult+0x66>
 800c1f6:	f240 2171 	movw	r1, #625	@ 0x271
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	f7ff ff1a 	bl	800c034 <__i2b>
 800c200:	2300      	movs	r3, #0
 800c202:	f8c8 0008 	str.w	r0, [r8, #8]
 800c206:	4604      	mov	r4, r0
 800c208:	6003      	str	r3, [r0, #0]
 800c20a:	f04f 0900 	mov.w	r9, #0
 800c20e:	07eb      	lsls	r3, r5, #31
 800c210:	d50a      	bpl.n	800c228 <__pow5mult+0x84>
 800c212:	4631      	mov	r1, r6
 800c214:	4622      	mov	r2, r4
 800c216:	4638      	mov	r0, r7
 800c218:	f7ff ff22 	bl	800c060 <__multiply>
 800c21c:	4631      	mov	r1, r6
 800c21e:	4680      	mov	r8, r0
 800c220:	4638      	mov	r0, r7
 800c222:	f7ff fe53 	bl	800becc <_Bfree>
 800c226:	4646      	mov	r6, r8
 800c228:	106d      	asrs	r5, r5, #1
 800c22a:	d00b      	beq.n	800c244 <__pow5mult+0xa0>
 800c22c:	6820      	ldr	r0, [r4, #0]
 800c22e:	b938      	cbnz	r0, 800c240 <__pow5mult+0x9c>
 800c230:	4622      	mov	r2, r4
 800c232:	4621      	mov	r1, r4
 800c234:	4638      	mov	r0, r7
 800c236:	f7ff ff13 	bl	800c060 <__multiply>
 800c23a:	6020      	str	r0, [r4, #0]
 800c23c:	f8c0 9000 	str.w	r9, [r0]
 800c240:	4604      	mov	r4, r0
 800c242:	e7e4      	b.n	800c20e <__pow5mult+0x6a>
 800c244:	4630      	mov	r0, r6
 800c246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c24a:	bf00      	nop
 800c24c:	0800d11c 	.word	0x0800d11c
 800c250:	0800cfe9 	.word	0x0800cfe9
 800c254:	0800d069 	.word	0x0800d069

0800c258 <__lshift>:
 800c258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c25c:	460c      	mov	r4, r1
 800c25e:	6849      	ldr	r1, [r1, #4]
 800c260:	6923      	ldr	r3, [r4, #16]
 800c262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c266:	68a3      	ldr	r3, [r4, #8]
 800c268:	4607      	mov	r7, r0
 800c26a:	4691      	mov	r9, r2
 800c26c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c270:	f108 0601 	add.w	r6, r8, #1
 800c274:	42b3      	cmp	r3, r6
 800c276:	db0b      	blt.n	800c290 <__lshift+0x38>
 800c278:	4638      	mov	r0, r7
 800c27a:	f7ff fde7 	bl	800be4c <_Balloc>
 800c27e:	4605      	mov	r5, r0
 800c280:	b948      	cbnz	r0, 800c296 <__lshift+0x3e>
 800c282:	4602      	mov	r2, r0
 800c284:	4b28      	ldr	r3, [pc, #160]	@ (800c328 <__lshift+0xd0>)
 800c286:	4829      	ldr	r0, [pc, #164]	@ (800c32c <__lshift+0xd4>)
 800c288:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c28c:	f000 fd4c 	bl	800cd28 <__assert_func>
 800c290:	3101      	adds	r1, #1
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	e7ee      	b.n	800c274 <__lshift+0x1c>
 800c296:	2300      	movs	r3, #0
 800c298:	f100 0114 	add.w	r1, r0, #20
 800c29c:	f100 0210 	add.w	r2, r0, #16
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	4553      	cmp	r3, sl
 800c2a4:	db33      	blt.n	800c30e <__lshift+0xb6>
 800c2a6:	6920      	ldr	r0, [r4, #16]
 800c2a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2ac:	f104 0314 	add.w	r3, r4, #20
 800c2b0:	f019 091f 	ands.w	r9, r9, #31
 800c2b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2bc:	d02b      	beq.n	800c316 <__lshift+0xbe>
 800c2be:	f1c9 0e20 	rsb	lr, r9, #32
 800c2c2:	468a      	mov	sl, r1
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	6818      	ldr	r0, [r3, #0]
 800c2c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c2cc:	4310      	orrs	r0, r2
 800c2ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d6:	459c      	cmp	ip, r3
 800c2d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2dc:	d8f3      	bhi.n	800c2c6 <__lshift+0x6e>
 800c2de:	ebac 0304 	sub.w	r3, ip, r4
 800c2e2:	3b15      	subs	r3, #21
 800c2e4:	f023 0303 	bic.w	r3, r3, #3
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	f104 0015 	add.w	r0, r4, #21
 800c2ee:	4560      	cmp	r0, ip
 800c2f0:	bf88      	it	hi
 800c2f2:	2304      	movhi	r3, #4
 800c2f4:	50ca      	str	r2, [r1, r3]
 800c2f6:	b10a      	cbz	r2, 800c2fc <__lshift+0xa4>
 800c2f8:	f108 0602 	add.w	r6, r8, #2
 800c2fc:	3e01      	subs	r6, #1
 800c2fe:	4638      	mov	r0, r7
 800c300:	612e      	str	r6, [r5, #16]
 800c302:	4621      	mov	r1, r4
 800c304:	f7ff fde2 	bl	800becc <_Bfree>
 800c308:	4628      	mov	r0, r5
 800c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c30e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c312:	3301      	adds	r3, #1
 800c314:	e7c5      	b.n	800c2a2 <__lshift+0x4a>
 800c316:	3904      	subs	r1, #4
 800c318:	f853 2b04 	ldr.w	r2, [r3], #4
 800c31c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c320:	459c      	cmp	ip, r3
 800c322:	d8f9      	bhi.n	800c318 <__lshift+0xc0>
 800c324:	e7ea      	b.n	800c2fc <__lshift+0xa4>
 800c326:	bf00      	nop
 800c328:	0800d058 	.word	0x0800d058
 800c32c:	0800d069 	.word	0x0800d069

0800c330 <__mcmp>:
 800c330:	690a      	ldr	r2, [r1, #16]
 800c332:	4603      	mov	r3, r0
 800c334:	6900      	ldr	r0, [r0, #16]
 800c336:	1a80      	subs	r0, r0, r2
 800c338:	b530      	push	{r4, r5, lr}
 800c33a:	d10e      	bne.n	800c35a <__mcmp+0x2a>
 800c33c:	3314      	adds	r3, #20
 800c33e:	3114      	adds	r1, #20
 800c340:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c344:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c34c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c350:	4295      	cmp	r5, r2
 800c352:	d003      	beq.n	800c35c <__mcmp+0x2c>
 800c354:	d205      	bcs.n	800c362 <__mcmp+0x32>
 800c356:	f04f 30ff 	mov.w	r0, #4294967295
 800c35a:	bd30      	pop	{r4, r5, pc}
 800c35c:	42a3      	cmp	r3, r4
 800c35e:	d3f3      	bcc.n	800c348 <__mcmp+0x18>
 800c360:	e7fb      	b.n	800c35a <__mcmp+0x2a>
 800c362:	2001      	movs	r0, #1
 800c364:	e7f9      	b.n	800c35a <__mcmp+0x2a>
	...

0800c368 <__mdiff>:
 800c368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	4689      	mov	r9, r1
 800c36e:	4606      	mov	r6, r0
 800c370:	4611      	mov	r1, r2
 800c372:	4648      	mov	r0, r9
 800c374:	4614      	mov	r4, r2
 800c376:	f7ff ffdb 	bl	800c330 <__mcmp>
 800c37a:	1e05      	subs	r5, r0, #0
 800c37c:	d112      	bne.n	800c3a4 <__mdiff+0x3c>
 800c37e:	4629      	mov	r1, r5
 800c380:	4630      	mov	r0, r6
 800c382:	f7ff fd63 	bl	800be4c <_Balloc>
 800c386:	4602      	mov	r2, r0
 800c388:	b928      	cbnz	r0, 800c396 <__mdiff+0x2e>
 800c38a:	4b3f      	ldr	r3, [pc, #252]	@ (800c488 <__mdiff+0x120>)
 800c38c:	f240 2137 	movw	r1, #567	@ 0x237
 800c390:	483e      	ldr	r0, [pc, #248]	@ (800c48c <__mdiff+0x124>)
 800c392:	f000 fcc9 	bl	800cd28 <__assert_func>
 800c396:	2301      	movs	r3, #1
 800c398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c39c:	4610      	mov	r0, r2
 800c39e:	b003      	add	sp, #12
 800c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a4:	bfbc      	itt	lt
 800c3a6:	464b      	movlt	r3, r9
 800c3a8:	46a1      	movlt	r9, r4
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c3b0:	bfba      	itte	lt
 800c3b2:	461c      	movlt	r4, r3
 800c3b4:	2501      	movlt	r5, #1
 800c3b6:	2500      	movge	r5, #0
 800c3b8:	f7ff fd48 	bl	800be4c <_Balloc>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	b918      	cbnz	r0, 800c3c8 <__mdiff+0x60>
 800c3c0:	4b31      	ldr	r3, [pc, #196]	@ (800c488 <__mdiff+0x120>)
 800c3c2:	f240 2145 	movw	r1, #581	@ 0x245
 800c3c6:	e7e3      	b.n	800c390 <__mdiff+0x28>
 800c3c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c3cc:	6926      	ldr	r6, [r4, #16]
 800c3ce:	60c5      	str	r5, [r0, #12]
 800c3d0:	f109 0310 	add.w	r3, r9, #16
 800c3d4:	f109 0514 	add.w	r5, r9, #20
 800c3d8:	f104 0e14 	add.w	lr, r4, #20
 800c3dc:	f100 0b14 	add.w	fp, r0, #20
 800c3e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c3e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	46d9      	mov	r9, fp
 800c3ec:	f04f 0c00 	mov.w	ip, #0
 800c3f0:	9b01      	ldr	r3, [sp, #4]
 800c3f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c3f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	fa1f f38a 	uxth.w	r3, sl
 800c400:	4619      	mov	r1, r3
 800c402:	b283      	uxth	r3, r0
 800c404:	1acb      	subs	r3, r1, r3
 800c406:	0c00      	lsrs	r0, r0, #16
 800c408:	4463      	add	r3, ip
 800c40a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c40e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c412:	b29b      	uxth	r3, r3
 800c414:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c418:	4576      	cmp	r6, lr
 800c41a:	f849 3b04 	str.w	r3, [r9], #4
 800c41e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c422:	d8e5      	bhi.n	800c3f0 <__mdiff+0x88>
 800c424:	1b33      	subs	r3, r6, r4
 800c426:	3b15      	subs	r3, #21
 800c428:	f023 0303 	bic.w	r3, r3, #3
 800c42c:	3415      	adds	r4, #21
 800c42e:	3304      	adds	r3, #4
 800c430:	42a6      	cmp	r6, r4
 800c432:	bf38      	it	cc
 800c434:	2304      	movcc	r3, #4
 800c436:	441d      	add	r5, r3
 800c438:	445b      	add	r3, fp
 800c43a:	461e      	mov	r6, r3
 800c43c:	462c      	mov	r4, r5
 800c43e:	4544      	cmp	r4, r8
 800c440:	d30e      	bcc.n	800c460 <__mdiff+0xf8>
 800c442:	f108 0103 	add.w	r1, r8, #3
 800c446:	1b49      	subs	r1, r1, r5
 800c448:	f021 0103 	bic.w	r1, r1, #3
 800c44c:	3d03      	subs	r5, #3
 800c44e:	45a8      	cmp	r8, r5
 800c450:	bf38      	it	cc
 800c452:	2100      	movcc	r1, #0
 800c454:	440b      	add	r3, r1
 800c456:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c45a:	b191      	cbz	r1, 800c482 <__mdiff+0x11a>
 800c45c:	6117      	str	r7, [r2, #16]
 800c45e:	e79d      	b.n	800c39c <__mdiff+0x34>
 800c460:	f854 1b04 	ldr.w	r1, [r4], #4
 800c464:	46e6      	mov	lr, ip
 800c466:	0c08      	lsrs	r0, r1, #16
 800c468:	fa1c fc81 	uxtah	ip, ip, r1
 800c46c:	4471      	add	r1, lr
 800c46e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c472:	b289      	uxth	r1, r1
 800c474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c478:	f846 1b04 	str.w	r1, [r6], #4
 800c47c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c480:	e7dd      	b.n	800c43e <__mdiff+0xd6>
 800c482:	3f01      	subs	r7, #1
 800c484:	e7e7      	b.n	800c456 <__mdiff+0xee>
 800c486:	bf00      	nop
 800c488:	0800d058 	.word	0x0800d058
 800c48c:	0800d069 	.word	0x0800d069

0800c490 <__d2b>:
 800c490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c494:	460f      	mov	r7, r1
 800c496:	2101      	movs	r1, #1
 800c498:	ec59 8b10 	vmov	r8, r9, d0
 800c49c:	4616      	mov	r6, r2
 800c49e:	f7ff fcd5 	bl	800be4c <_Balloc>
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	b930      	cbnz	r0, 800c4b4 <__d2b+0x24>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	4b23      	ldr	r3, [pc, #140]	@ (800c538 <__d2b+0xa8>)
 800c4aa:	4824      	ldr	r0, [pc, #144]	@ (800c53c <__d2b+0xac>)
 800c4ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800c4b0:	f000 fc3a 	bl	800cd28 <__assert_func>
 800c4b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c4b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4bc:	b10d      	cbz	r5, 800c4c2 <__d2b+0x32>
 800c4be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4c2:	9301      	str	r3, [sp, #4]
 800c4c4:	f1b8 0300 	subs.w	r3, r8, #0
 800c4c8:	d023      	beq.n	800c512 <__d2b+0x82>
 800c4ca:	4668      	mov	r0, sp
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	f7ff fd84 	bl	800bfda <__lo0bits>
 800c4d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c4d6:	b1d0      	cbz	r0, 800c50e <__d2b+0x7e>
 800c4d8:	f1c0 0320 	rsb	r3, r0, #32
 800c4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e0:	430b      	orrs	r3, r1
 800c4e2:	40c2      	lsrs	r2, r0
 800c4e4:	6163      	str	r3, [r4, #20]
 800c4e6:	9201      	str	r2, [sp, #4]
 800c4e8:	9b01      	ldr	r3, [sp, #4]
 800c4ea:	61a3      	str	r3, [r4, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	bf0c      	ite	eq
 800c4f0:	2201      	moveq	r2, #1
 800c4f2:	2202      	movne	r2, #2
 800c4f4:	6122      	str	r2, [r4, #16]
 800c4f6:	b1a5      	cbz	r5, 800c522 <__d2b+0x92>
 800c4f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c4fc:	4405      	add	r5, r0
 800c4fe:	603d      	str	r5, [r7, #0]
 800c500:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c504:	6030      	str	r0, [r6, #0]
 800c506:	4620      	mov	r0, r4
 800c508:	b003      	add	sp, #12
 800c50a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c50e:	6161      	str	r1, [r4, #20]
 800c510:	e7ea      	b.n	800c4e8 <__d2b+0x58>
 800c512:	a801      	add	r0, sp, #4
 800c514:	f7ff fd61 	bl	800bfda <__lo0bits>
 800c518:	9b01      	ldr	r3, [sp, #4]
 800c51a:	6163      	str	r3, [r4, #20]
 800c51c:	3020      	adds	r0, #32
 800c51e:	2201      	movs	r2, #1
 800c520:	e7e8      	b.n	800c4f4 <__d2b+0x64>
 800c522:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c526:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c52a:	6038      	str	r0, [r7, #0]
 800c52c:	6918      	ldr	r0, [r3, #16]
 800c52e:	f7ff fd35 	bl	800bf9c <__hi0bits>
 800c532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c536:	e7e5      	b.n	800c504 <__d2b+0x74>
 800c538:	0800d058 	.word	0x0800d058
 800c53c:	0800d069 	.word	0x0800d069

0800c540 <__ssputs_r>:
 800c540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c544:	688e      	ldr	r6, [r1, #8]
 800c546:	461f      	mov	r7, r3
 800c548:	42be      	cmp	r6, r7
 800c54a:	680b      	ldr	r3, [r1, #0]
 800c54c:	4682      	mov	sl, r0
 800c54e:	460c      	mov	r4, r1
 800c550:	4690      	mov	r8, r2
 800c552:	d82d      	bhi.n	800c5b0 <__ssputs_r+0x70>
 800c554:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c558:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c55c:	d026      	beq.n	800c5ac <__ssputs_r+0x6c>
 800c55e:	6965      	ldr	r5, [r4, #20]
 800c560:	6909      	ldr	r1, [r1, #16]
 800c562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c566:	eba3 0901 	sub.w	r9, r3, r1
 800c56a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c56e:	1c7b      	adds	r3, r7, #1
 800c570:	444b      	add	r3, r9
 800c572:	106d      	asrs	r5, r5, #1
 800c574:	429d      	cmp	r5, r3
 800c576:	bf38      	it	cc
 800c578:	461d      	movcc	r5, r3
 800c57a:	0553      	lsls	r3, r2, #21
 800c57c:	d527      	bpl.n	800c5ce <__ssputs_r+0x8e>
 800c57e:	4629      	mov	r1, r5
 800c580:	f7ff fbd8 	bl	800bd34 <_malloc_r>
 800c584:	4606      	mov	r6, r0
 800c586:	b360      	cbz	r0, 800c5e2 <__ssputs_r+0xa2>
 800c588:	6921      	ldr	r1, [r4, #16]
 800c58a:	464a      	mov	r2, r9
 800c58c:	f7fe fd69 	bl	800b062 <memcpy>
 800c590:	89a3      	ldrh	r3, [r4, #12]
 800c592:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c59a:	81a3      	strh	r3, [r4, #12]
 800c59c:	6126      	str	r6, [r4, #16]
 800c59e:	6165      	str	r5, [r4, #20]
 800c5a0:	444e      	add	r6, r9
 800c5a2:	eba5 0509 	sub.w	r5, r5, r9
 800c5a6:	6026      	str	r6, [r4, #0]
 800c5a8:	60a5      	str	r5, [r4, #8]
 800c5aa:	463e      	mov	r6, r7
 800c5ac:	42be      	cmp	r6, r7
 800c5ae:	d900      	bls.n	800c5b2 <__ssputs_r+0x72>
 800c5b0:	463e      	mov	r6, r7
 800c5b2:	6820      	ldr	r0, [r4, #0]
 800c5b4:	4632      	mov	r2, r6
 800c5b6:	4641      	mov	r1, r8
 800c5b8:	f000 fb6a 	bl	800cc90 <memmove>
 800c5bc:	68a3      	ldr	r3, [r4, #8]
 800c5be:	1b9b      	subs	r3, r3, r6
 800c5c0:	60a3      	str	r3, [r4, #8]
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	4433      	add	r3, r6
 800c5c6:	6023      	str	r3, [r4, #0]
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ce:	462a      	mov	r2, r5
 800c5d0:	f000 fbee 	bl	800cdb0 <_realloc_r>
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d1e0      	bne.n	800c59c <__ssputs_r+0x5c>
 800c5da:	6921      	ldr	r1, [r4, #16]
 800c5dc:	4650      	mov	r0, sl
 800c5de:	f7ff fb35 	bl	800bc4c <_free_r>
 800c5e2:	230c      	movs	r3, #12
 800c5e4:	f8ca 3000 	str.w	r3, [sl]
 800c5e8:	89a3      	ldrh	r3, [r4, #12]
 800c5ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5ee:	81a3      	strh	r3, [r4, #12]
 800c5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f4:	e7e9      	b.n	800c5ca <__ssputs_r+0x8a>
	...

0800c5f8 <_svfiprintf_r>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	4698      	mov	r8, r3
 800c5fe:	898b      	ldrh	r3, [r1, #12]
 800c600:	061b      	lsls	r3, r3, #24
 800c602:	b09d      	sub	sp, #116	@ 0x74
 800c604:	4607      	mov	r7, r0
 800c606:	460d      	mov	r5, r1
 800c608:	4614      	mov	r4, r2
 800c60a:	d510      	bpl.n	800c62e <_svfiprintf_r+0x36>
 800c60c:	690b      	ldr	r3, [r1, #16]
 800c60e:	b973      	cbnz	r3, 800c62e <_svfiprintf_r+0x36>
 800c610:	2140      	movs	r1, #64	@ 0x40
 800c612:	f7ff fb8f 	bl	800bd34 <_malloc_r>
 800c616:	6028      	str	r0, [r5, #0]
 800c618:	6128      	str	r0, [r5, #16]
 800c61a:	b930      	cbnz	r0, 800c62a <_svfiprintf_r+0x32>
 800c61c:	230c      	movs	r3, #12
 800c61e:	603b      	str	r3, [r7, #0]
 800c620:	f04f 30ff 	mov.w	r0, #4294967295
 800c624:	b01d      	add	sp, #116	@ 0x74
 800c626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62a:	2340      	movs	r3, #64	@ 0x40
 800c62c:	616b      	str	r3, [r5, #20]
 800c62e:	2300      	movs	r3, #0
 800c630:	9309      	str	r3, [sp, #36]	@ 0x24
 800c632:	2320      	movs	r3, #32
 800c634:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c638:	f8cd 800c 	str.w	r8, [sp, #12]
 800c63c:	2330      	movs	r3, #48	@ 0x30
 800c63e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c7dc <_svfiprintf_r+0x1e4>
 800c642:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c646:	f04f 0901 	mov.w	r9, #1
 800c64a:	4623      	mov	r3, r4
 800c64c:	469a      	mov	sl, r3
 800c64e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c652:	b10a      	cbz	r2, 800c658 <_svfiprintf_r+0x60>
 800c654:	2a25      	cmp	r2, #37	@ 0x25
 800c656:	d1f9      	bne.n	800c64c <_svfiprintf_r+0x54>
 800c658:	ebba 0b04 	subs.w	fp, sl, r4
 800c65c:	d00b      	beq.n	800c676 <_svfiprintf_r+0x7e>
 800c65e:	465b      	mov	r3, fp
 800c660:	4622      	mov	r2, r4
 800c662:	4629      	mov	r1, r5
 800c664:	4638      	mov	r0, r7
 800c666:	f7ff ff6b 	bl	800c540 <__ssputs_r>
 800c66a:	3001      	adds	r0, #1
 800c66c:	f000 80a7 	beq.w	800c7be <_svfiprintf_r+0x1c6>
 800c670:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c672:	445a      	add	r2, fp
 800c674:	9209      	str	r2, [sp, #36]	@ 0x24
 800c676:	f89a 3000 	ldrb.w	r3, [sl]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 809f 	beq.w	800c7be <_svfiprintf_r+0x1c6>
 800c680:	2300      	movs	r3, #0
 800c682:	f04f 32ff 	mov.w	r2, #4294967295
 800c686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c68a:	f10a 0a01 	add.w	sl, sl, #1
 800c68e:	9304      	str	r3, [sp, #16]
 800c690:	9307      	str	r3, [sp, #28]
 800c692:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c696:	931a      	str	r3, [sp, #104]	@ 0x68
 800c698:	4654      	mov	r4, sl
 800c69a:	2205      	movs	r2, #5
 800c69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a0:	484e      	ldr	r0, [pc, #312]	@ (800c7dc <_svfiprintf_r+0x1e4>)
 800c6a2:	f7f3 fe25 	bl	80002f0 <memchr>
 800c6a6:	9a04      	ldr	r2, [sp, #16]
 800c6a8:	b9d8      	cbnz	r0, 800c6e2 <_svfiprintf_r+0xea>
 800c6aa:	06d0      	lsls	r0, r2, #27
 800c6ac:	bf44      	itt	mi
 800c6ae:	2320      	movmi	r3, #32
 800c6b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6b4:	0711      	lsls	r1, r2, #28
 800c6b6:	bf44      	itt	mi
 800c6b8:	232b      	movmi	r3, #43	@ 0x2b
 800c6ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6be:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6c4:	d015      	beq.n	800c6f2 <_svfiprintf_r+0xfa>
 800c6c6:	9a07      	ldr	r2, [sp, #28]
 800c6c8:	4654      	mov	r4, sl
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	f04f 0c0a 	mov.w	ip, #10
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6d6:	3b30      	subs	r3, #48	@ 0x30
 800c6d8:	2b09      	cmp	r3, #9
 800c6da:	d94b      	bls.n	800c774 <_svfiprintf_r+0x17c>
 800c6dc:	b1b0      	cbz	r0, 800c70c <_svfiprintf_r+0x114>
 800c6de:	9207      	str	r2, [sp, #28]
 800c6e0:	e014      	b.n	800c70c <_svfiprintf_r+0x114>
 800c6e2:	eba0 0308 	sub.w	r3, r0, r8
 800c6e6:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	9304      	str	r3, [sp, #16]
 800c6ee:	46a2      	mov	sl, r4
 800c6f0:	e7d2      	b.n	800c698 <_svfiprintf_r+0xa0>
 800c6f2:	9b03      	ldr	r3, [sp, #12]
 800c6f4:	1d19      	adds	r1, r3, #4
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	9103      	str	r1, [sp, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	bfbb      	ittet	lt
 800c6fe:	425b      	neglt	r3, r3
 800c700:	f042 0202 	orrlt.w	r2, r2, #2
 800c704:	9307      	strge	r3, [sp, #28]
 800c706:	9307      	strlt	r3, [sp, #28]
 800c708:	bfb8      	it	lt
 800c70a:	9204      	strlt	r2, [sp, #16]
 800c70c:	7823      	ldrb	r3, [r4, #0]
 800c70e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c710:	d10a      	bne.n	800c728 <_svfiprintf_r+0x130>
 800c712:	7863      	ldrb	r3, [r4, #1]
 800c714:	2b2a      	cmp	r3, #42	@ 0x2a
 800c716:	d132      	bne.n	800c77e <_svfiprintf_r+0x186>
 800c718:	9b03      	ldr	r3, [sp, #12]
 800c71a:	1d1a      	adds	r2, r3, #4
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	9203      	str	r2, [sp, #12]
 800c720:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c724:	3402      	adds	r4, #2
 800c726:	9305      	str	r3, [sp, #20]
 800c728:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c7ec <_svfiprintf_r+0x1f4>
 800c72c:	7821      	ldrb	r1, [r4, #0]
 800c72e:	2203      	movs	r2, #3
 800c730:	4650      	mov	r0, sl
 800c732:	f7f3 fddd 	bl	80002f0 <memchr>
 800c736:	b138      	cbz	r0, 800c748 <_svfiprintf_r+0x150>
 800c738:	9b04      	ldr	r3, [sp, #16]
 800c73a:	eba0 000a 	sub.w	r0, r0, sl
 800c73e:	2240      	movs	r2, #64	@ 0x40
 800c740:	4082      	lsls	r2, r0
 800c742:	4313      	orrs	r3, r2
 800c744:	3401      	adds	r4, #1
 800c746:	9304      	str	r3, [sp, #16]
 800c748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c74c:	4824      	ldr	r0, [pc, #144]	@ (800c7e0 <_svfiprintf_r+0x1e8>)
 800c74e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c752:	2206      	movs	r2, #6
 800c754:	f7f3 fdcc 	bl	80002f0 <memchr>
 800c758:	2800      	cmp	r0, #0
 800c75a:	d036      	beq.n	800c7ca <_svfiprintf_r+0x1d2>
 800c75c:	4b21      	ldr	r3, [pc, #132]	@ (800c7e4 <_svfiprintf_r+0x1ec>)
 800c75e:	bb1b      	cbnz	r3, 800c7a8 <_svfiprintf_r+0x1b0>
 800c760:	9b03      	ldr	r3, [sp, #12]
 800c762:	3307      	adds	r3, #7
 800c764:	f023 0307 	bic.w	r3, r3, #7
 800c768:	3308      	adds	r3, #8
 800c76a:	9303      	str	r3, [sp, #12]
 800c76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c76e:	4433      	add	r3, r6
 800c770:	9309      	str	r3, [sp, #36]	@ 0x24
 800c772:	e76a      	b.n	800c64a <_svfiprintf_r+0x52>
 800c774:	fb0c 3202 	mla	r2, ip, r2, r3
 800c778:	460c      	mov	r4, r1
 800c77a:	2001      	movs	r0, #1
 800c77c:	e7a8      	b.n	800c6d0 <_svfiprintf_r+0xd8>
 800c77e:	2300      	movs	r3, #0
 800c780:	3401      	adds	r4, #1
 800c782:	9305      	str	r3, [sp, #20]
 800c784:	4619      	mov	r1, r3
 800c786:	f04f 0c0a 	mov.w	ip, #10
 800c78a:	4620      	mov	r0, r4
 800c78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c790:	3a30      	subs	r2, #48	@ 0x30
 800c792:	2a09      	cmp	r2, #9
 800c794:	d903      	bls.n	800c79e <_svfiprintf_r+0x1a6>
 800c796:	2b00      	cmp	r3, #0
 800c798:	d0c6      	beq.n	800c728 <_svfiprintf_r+0x130>
 800c79a:	9105      	str	r1, [sp, #20]
 800c79c:	e7c4      	b.n	800c728 <_svfiprintf_r+0x130>
 800c79e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	e7f0      	b.n	800c78a <_svfiprintf_r+0x192>
 800c7a8:	ab03      	add	r3, sp, #12
 800c7aa:	9300      	str	r3, [sp, #0]
 800c7ac:	462a      	mov	r2, r5
 800c7ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c7e8 <_svfiprintf_r+0x1f0>)
 800c7b0:	a904      	add	r1, sp, #16
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	f7fd fe04 	bl	800a3c0 <_printf_float>
 800c7b8:	1c42      	adds	r2, r0, #1
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	d1d6      	bne.n	800c76c <_svfiprintf_r+0x174>
 800c7be:	89ab      	ldrh	r3, [r5, #12]
 800c7c0:	065b      	lsls	r3, r3, #25
 800c7c2:	f53f af2d 	bmi.w	800c620 <_svfiprintf_r+0x28>
 800c7c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7c8:	e72c      	b.n	800c624 <_svfiprintf_r+0x2c>
 800c7ca:	ab03      	add	r3, sp, #12
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	462a      	mov	r2, r5
 800c7d0:	4b05      	ldr	r3, [pc, #20]	@ (800c7e8 <_svfiprintf_r+0x1f0>)
 800c7d2:	a904      	add	r1, sp, #16
 800c7d4:	4638      	mov	r0, r7
 800c7d6:	f7fe f87b 	bl	800a8d0 <_printf_i>
 800c7da:	e7ed      	b.n	800c7b8 <_svfiprintf_r+0x1c0>
 800c7dc:	0800d0c2 	.word	0x0800d0c2
 800c7e0:	0800d0cc 	.word	0x0800d0cc
 800c7e4:	0800a3c1 	.word	0x0800a3c1
 800c7e8:	0800c541 	.word	0x0800c541
 800c7ec:	0800d0c8 	.word	0x0800d0c8

0800c7f0 <__sfputc_r>:
 800c7f0:	6893      	ldr	r3, [r2, #8]
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	b410      	push	{r4}
 800c7f8:	6093      	str	r3, [r2, #8]
 800c7fa:	da08      	bge.n	800c80e <__sfputc_r+0x1e>
 800c7fc:	6994      	ldr	r4, [r2, #24]
 800c7fe:	42a3      	cmp	r3, r4
 800c800:	db01      	blt.n	800c806 <__sfputc_r+0x16>
 800c802:	290a      	cmp	r1, #10
 800c804:	d103      	bne.n	800c80e <__sfputc_r+0x1e>
 800c806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c80a:	f7fe bb16 	b.w	800ae3a <__swbuf_r>
 800c80e:	6813      	ldr	r3, [r2, #0]
 800c810:	1c58      	adds	r0, r3, #1
 800c812:	6010      	str	r0, [r2, #0]
 800c814:	7019      	strb	r1, [r3, #0]
 800c816:	4608      	mov	r0, r1
 800c818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <__sfputs_r>:
 800c81e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c820:	4606      	mov	r6, r0
 800c822:	460f      	mov	r7, r1
 800c824:	4614      	mov	r4, r2
 800c826:	18d5      	adds	r5, r2, r3
 800c828:	42ac      	cmp	r4, r5
 800c82a:	d101      	bne.n	800c830 <__sfputs_r+0x12>
 800c82c:	2000      	movs	r0, #0
 800c82e:	e007      	b.n	800c840 <__sfputs_r+0x22>
 800c830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c834:	463a      	mov	r2, r7
 800c836:	4630      	mov	r0, r6
 800c838:	f7ff ffda 	bl	800c7f0 <__sfputc_r>
 800c83c:	1c43      	adds	r3, r0, #1
 800c83e:	d1f3      	bne.n	800c828 <__sfputs_r+0xa>
 800c840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c844 <_vfiprintf_r>:
 800c844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c848:	460d      	mov	r5, r1
 800c84a:	b09d      	sub	sp, #116	@ 0x74
 800c84c:	4614      	mov	r4, r2
 800c84e:	4698      	mov	r8, r3
 800c850:	4606      	mov	r6, r0
 800c852:	b118      	cbz	r0, 800c85c <_vfiprintf_r+0x18>
 800c854:	6a03      	ldr	r3, [r0, #32]
 800c856:	b90b      	cbnz	r3, 800c85c <_vfiprintf_r+0x18>
 800c858:	f7fe f9e4 	bl	800ac24 <__sinit>
 800c85c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c85e:	07d9      	lsls	r1, r3, #31
 800c860:	d405      	bmi.n	800c86e <_vfiprintf_r+0x2a>
 800c862:	89ab      	ldrh	r3, [r5, #12]
 800c864:	059a      	lsls	r2, r3, #22
 800c866:	d402      	bmi.n	800c86e <_vfiprintf_r+0x2a>
 800c868:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c86a:	f7fe fbf8 	bl	800b05e <__retarget_lock_acquire_recursive>
 800c86e:	89ab      	ldrh	r3, [r5, #12]
 800c870:	071b      	lsls	r3, r3, #28
 800c872:	d501      	bpl.n	800c878 <_vfiprintf_r+0x34>
 800c874:	692b      	ldr	r3, [r5, #16]
 800c876:	b99b      	cbnz	r3, 800c8a0 <_vfiprintf_r+0x5c>
 800c878:	4629      	mov	r1, r5
 800c87a:	4630      	mov	r0, r6
 800c87c:	f7fe fb1c 	bl	800aeb8 <__swsetup_r>
 800c880:	b170      	cbz	r0, 800c8a0 <_vfiprintf_r+0x5c>
 800c882:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c884:	07dc      	lsls	r4, r3, #31
 800c886:	d504      	bpl.n	800c892 <_vfiprintf_r+0x4e>
 800c888:	f04f 30ff 	mov.w	r0, #4294967295
 800c88c:	b01d      	add	sp, #116	@ 0x74
 800c88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c892:	89ab      	ldrh	r3, [r5, #12]
 800c894:	0598      	lsls	r0, r3, #22
 800c896:	d4f7      	bmi.n	800c888 <_vfiprintf_r+0x44>
 800c898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c89a:	f7fe fbe1 	bl	800b060 <__retarget_lock_release_recursive>
 800c89e:	e7f3      	b.n	800c888 <_vfiprintf_r+0x44>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8a4:	2320      	movs	r3, #32
 800c8a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c8aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ae:	2330      	movs	r3, #48	@ 0x30
 800c8b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ca60 <_vfiprintf_r+0x21c>
 800c8b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8b8:	f04f 0901 	mov.w	r9, #1
 800c8bc:	4623      	mov	r3, r4
 800c8be:	469a      	mov	sl, r3
 800c8c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8c4:	b10a      	cbz	r2, 800c8ca <_vfiprintf_r+0x86>
 800c8c6:	2a25      	cmp	r2, #37	@ 0x25
 800c8c8:	d1f9      	bne.n	800c8be <_vfiprintf_r+0x7a>
 800c8ca:	ebba 0b04 	subs.w	fp, sl, r4
 800c8ce:	d00b      	beq.n	800c8e8 <_vfiprintf_r+0xa4>
 800c8d0:	465b      	mov	r3, fp
 800c8d2:	4622      	mov	r2, r4
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f7ff ffa1 	bl	800c81e <__sfputs_r>
 800c8dc:	3001      	adds	r0, #1
 800c8de:	f000 80a7 	beq.w	800ca30 <_vfiprintf_r+0x1ec>
 800c8e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8e4:	445a      	add	r2, fp
 800c8e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 809f 	beq.w	800ca30 <_vfiprintf_r+0x1ec>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8fc:	f10a 0a01 	add.w	sl, sl, #1
 800c900:	9304      	str	r3, [sp, #16]
 800c902:	9307      	str	r3, [sp, #28]
 800c904:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c908:	931a      	str	r3, [sp, #104]	@ 0x68
 800c90a:	4654      	mov	r4, sl
 800c90c:	2205      	movs	r2, #5
 800c90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c912:	4853      	ldr	r0, [pc, #332]	@ (800ca60 <_vfiprintf_r+0x21c>)
 800c914:	f7f3 fcec 	bl	80002f0 <memchr>
 800c918:	9a04      	ldr	r2, [sp, #16]
 800c91a:	b9d8      	cbnz	r0, 800c954 <_vfiprintf_r+0x110>
 800c91c:	06d1      	lsls	r1, r2, #27
 800c91e:	bf44      	itt	mi
 800c920:	2320      	movmi	r3, #32
 800c922:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c926:	0713      	lsls	r3, r2, #28
 800c928:	bf44      	itt	mi
 800c92a:	232b      	movmi	r3, #43	@ 0x2b
 800c92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c930:	f89a 3000 	ldrb.w	r3, [sl]
 800c934:	2b2a      	cmp	r3, #42	@ 0x2a
 800c936:	d015      	beq.n	800c964 <_vfiprintf_r+0x120>
 800c938:	9a07      	ldr	r2, [sp, #28]
 800c93a:	4654      	mov	r4, sl
 800c93c:	2000      	movs	r0, #0
 800c93e:	f04f 0c0a 	mov.w	ip, #10
 800c942:	4621      	mov	r1, r4
 800c944:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c948:	3b30      	subs	r3, #48	@ 0x30
 800c94a:	2b09      	cmp	r3, #9
 800c94c:	d94b      	bls.n	800c9e6 <_vfiprintf_r+0x1a2>
 800c94e:	b1b0      	cbz	r0, 800c97e <_vfiprintf_r+0x13a>
 800c950:	9207      	str	r2, [sp, #28]
 800c952:	e014      	b.n	800c97e <_vfiprintf_r+0x13a>
 800c954:	eba0 0308 	sub.w	r3, r0, r8
 800c958:	fa09 f303 	lsl.w	r3, r9, r3
 800c95c:	4313      	orrs	r3, r2
 800c95e:	9304      	str	r3, [sp, #16]
 800c960:	46a2      	mov	sl, r4
 800c962:	e7d2      	b.n	800c90a <_vfiprintf_r+0xc6>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	1d19      	adds	r1, r3, #4
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	9103      	str	r1, [sp, #12]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	bfbb      	ittet	lt
 800c970:	425b      	neglt	r3, r3
 800c972:	f042 0202 	orrlt.w	r2, r2, #2
 800c976:	9307      	strge	r3, [sp, #28]
 800c978:	9307      	strlt	r3, [sp, #28]
 800c97a:	bfb8      	it	lt
 800c97c:	9204      	strlt	r2, [sp, #16]
 800c97e:	7823      	ldrb	r3, [r4, #0]
 800c980:	2b2e      	cmp	r3, #46	@ 0x2e
 800c982:	d10a      	bne.n	800c99a <_vfiprintf_r+0x156>
 800c984:	7863      	ldrb	r3, [r4, #1]
 800c986:	2b2a      	cmp	r3, #42	@ 0x2a
 800c988:	d132      	bne.n	800c9f0 <_vfiprintf_r+0x1ac>
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	1d1a      	adds	r2, r3, #4
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	9203      	str	r2, [sp, #12]
 800c992:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c996:	3402      	adds	r4, #2
 800c998:	9305      	str	r3, [sp, #20]
 800c99a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ca70 <_vfiprintf_r+0x22c>
 800c99e:	7821      	ldrb	r1, [r4, #0]
 800c9a0:	2203      	movs	r2, #3
 800c9a2:	4650      	mov	r0, sl
 800c9a4:	f7f3 fca4 	bl	80002f0 <memchr>
 800c9a8:	b138      	cbz	r0, 800c9ba <_vfiprintf_r+0x176>
 800c9aa:	9b04      	ldr	r3, [sp, #16]
 800c9ac:	eba0 000a 	sub.w	r0, r0, sl
 800c9b0:	2240      	movs	r2, #64	@ 0x40
 800c9b2:	4082      	lsls	r2, r0
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	3401      	adds	r4, #1
 800c9b8:	9304      	str	r3, [sp, #16]
 800c9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9be:	4829      	ldr	r0, [pc, #164]	@ (800ca64 <_vfiprintf_r+0x220>)
 800c9c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9c4:	2206      	movs	r2, #6
 800c9c6:	f7f3 fc93 	bl	80002f0 <memchr>
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d03f      	beq.n	800ca4e <_vfiprintf_r+0x20a>
 800c9ce:	4b26      	ldr	r3, [pc, #152]	@ (800ca68 <_vfiprintf_r+0x224>)
 800c9d0:	bb1b      	cbnz	r3, 800ca1a <_vfiprintf_r+0x1d6>
 800c9d2:	9b03      	ldr	r3, [sp, #12]
 800c9d4:	3307      	adds	r3, #7
 800c9d6:	f023 0307 	bic.w	r3, r3, #7
 800c9da:	3308      	adds	r3, #8
 800c9dc:	9303      	str	r3, [sp, #12]
 800c9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9e0:	443b      	add	r3, r7
 800c9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9e4:	e76a      	b.n	800c8bc <_vfiprintf_r+0x78>
 800c9e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	2001      	movs	r0, #1
 800c9ee:	e7a8      	b.n	800c942 <_vfiprintf_r+0xfe>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	3401      	adds	r4, #1
 800c9f4:	9305      	str	r3, [sp, #20]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	f04f 0c0a 	mov.w	ip, #10
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca02:	3a30      	subs	r2, #48	@ 0x30
 800ca04:	2a09      	cmp	r2, #9
 800ca06:	d903      	bls.n	800ca10 <_vfiprintf_r+0x1cc>
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d0c6      	beq.n	800c99a <_vfiprintf_r+0x156>
 800ca0c:	9105      	str	r1, [sp, #20]
 800ca0e:	e7c4      	b.n	800c99a <_vfiprintf_r+0x156>
 800ca10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca14:	4604      	mov	r4, r0
 800ca16:	2301      	movs	r3, #1
 800ca18:	e7f0      	b.n	800c9fc <_vfiprintf_r+0x1b8>
 800ca1a:	ab03      	add	r3, sp, #12
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	462a      	mov	r2, r5
 800ca20:	4b12      	ldr	r3, [pc, #72]	@ (800ca6c <_vfiprintf_r+0x228>)
 800ca22:	a904      	add	r1, sp, #16
 800ca24:	4630      	mov	r0, r6
 800ca26:	f7fd fccb 	bl	800a3c0 <_printf_float>
 800ca2a:	4607      	mov	r7, r0
 800ca2c:	1c78      	adds	r0, r7, #1
 800ca2e:	d1d6      	bne.n	800c9de <_vfiprintf_r+0x19a>
 800ca30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca32:	07d9      	lsls	r1, r3, #31
 800ca34:	d405      	bmi.n	800ca42 <_vfiprintf_r+0x1fe>
 800ca36:	89ab      	ldrh	r3, [r5, #12]
 800ca38:	059a      	lsls	r2, r3, #22
 800ca3a:	d402      	bmi.n	800ca42 <_vfiprintf_r+0x1fe>
 800ca3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca3e:	f7fe fb0f 	bl	800b060 <__retarget_lock_release_recursive>
 800ca42:	89ab      	ldrh	r3, [r5, #12]
 800ca44:	065b      	lsls	r3, r3, #25
 800ca46:	f53f af1f 	bmi.w	800c888 <_vfiprintf_r+0x44>
 800ca4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca4c:	e71e      	b.n	800c88c <_vfiprintf_r+0x48>
 800ca4e:	ab03      	add	r3, sp, #12
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	462a      	mov	r2, r5
 800ca54:	4b05      	ldr	r3, [pc, #20]	@ (800ca6c <_vfiprintf_r+0x228>)
 800ca56:	a904      	add	r1, sp, #16
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f7fd ff39 	bl	800a8d0 <_printf_i>
 800ca5e:	e7e4      	b.n	800ca2a <_vfiprintf_r+0x1e6>
 800ca60:	0800d0c2 	.word	0x0800d0c2
 800ca64:	0800d0cc 	.word	0x0800d0cc
 800ca68:	0800a3c1 	.word	0x0800a3c1
 800ca6c:	0800c81f 	.word	0x0800c81f
 800ca70:	0800d0c8 	.word	0x0800d0c8

0800ca74 <__sflush_r>:
 800ca74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7c:	0716      	lsls	r6, r2, #28
 800ca7e:	4605      	mov	r5, r0
 800ca80:	460c      	mov	r4, r1
 800ca82:	d454      	bmi.n	800cb2e <__sflush_r+0xba>
 800ca84:	684b      	ldr	r3, [r1, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	dc02      	bgt.n	800ca90 <__sflush_r+0x1c>
 800ca8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dd48      	ble.n	800cb22 <__sflush_r+0xae>
 800ca90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca92:	2e00      	cmp	r6, #0
 800ca94:	d045      	beq.n	800cb22 <__sflush_r+0xae>
 800ca96:	2300      	movs	r3, #0
 800ca98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca9c:	682f      	ldr	r7, [r5, #0]
 800ca9e:	6a21      	ldr	r1, [r4, #32]
 800caa0:	602b      	str	r3, [r5, #0]
 800caa2:	d030      	beq.n	800cb06 <__sflush_r+0x92>
 800caa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800caa6:	89a3      	ldrh	r3, [r4, #12]
 800caa8:	0759      	lsls	r1, r3, #29
 800caaa:	d505      	bpl.n	800cab8 <__sflush_r+0x44>
 800caac:	6863      	ldr	r3, [r4, #4]
 800caae:	1ad2      	subs	r2, r2, r3
 800cab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cab2:	b10b      	cbz	r3, 800cab8 <__sflush_r+0x44>
 800cab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cab6:	1ad2      	subs	r2, r2, r3
 800cab8:	2300      	movs	r3, #0
 800caba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cabc:	6a21      	ldr	r1, [r4, #32]
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b0      	blx	r6
 800cac2:	1c43      	adds	r3, r0, #1
 800cac4:	89a3      	ldrh	r3, [r4, #12]
 800cac6:	d106      	bne.n	800cad6 <__sflush_r+0x62>
 800cac8:	6829      	ldr	r1, [r5, #0]
 800caca:	291d      	cmp	r1, #29
 800cacc:	d82b      	bhi.n	800cb26 <__sflush_r+0xb2>
 800cace:	4a2a      	ldr	r2, [pc, #168]	@ (800cb78 <__sflush_r+0x104>)
 800cad0:	40ca      	lsrs	r2, r1
 800cad2:	07d6      	lsls	r6, r2, #31
 800cad4:	d527      	bpl.n	800cb26 <__sflush_r+0xb2>
 800cad6:	2200      	movs	r2, #0
 800cad8:	6062      	str	r2, [r4, #4]
 800cada:	04d9      	lsls	r1, r3, #19
 800cadc:	6922      	ldr	r2, [r4, #16]
 800cade:	6022      	str	r2, [r4, #0]
 800cae0:	d504      	bpl.n	800caec <__sflush_r+0x78>
 800cae2:	1c42      	adds	r2, r0, #1
 800cae4:	d101      	bne.n	800caea <__sflush_r+0x76>
 800cae6:	682b      	ldr	r3, [r5, #0]
 800cae8:	b903      	cbnz	r3, 800caec <__sflush_r+0x78>
 800caea:	6560      	str	r0, [r4, #84]	@ 0x54
 800caec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800caee:	602f      	str	r7, [r5, #0]
 800caf0:	b1b9      	cbz	r1, 800cb22 <__sflush_r+0xae>
 800caf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800caf6:	4299      	cmp	r1, r3
 800caf8:	d002      	beq.n	800cb00 <__sflush_r+0x8c>
 800cafa:	4628      	mov	r0, r5
 800cafc:	f7ff f8a6 	bl	800bc4c <_free_r>
 800cb00:	2300      	movs	r3, #0
 800cb02:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb04:	e00d      	b.n	800cb22 <__sflush_r+0xae>
 800cb06:	2301      	movs	r3, #1
 800cb08:	4628      	mov	r0, r5
 800cb0a:	47b0      	blx	r6
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	1c50      	adds	r0, r2, #1
 800cb10:	d1c9      	bne.n	800caa6 <__sflush_r+0x32>
 800cb12:	682b      	ldr	r3, [r5, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d0c6      	beq.n	800caa6 <__sflush_r+0x32>
 800cb18:	2b1d      	cmp	r3, #29
 800cb1a:	d001      	beq.n	800cb20 <__sflush_r+0xac>
 800cb1c:	2b16      	cmp	r3, #22
 800cb1e:	d11e      	bne.n	800cb5e <__sflush_r+0xea>
 800cb20:	602f      	str	r7, [r5, #0]
 800cb22:	2000      	movs	r0, #0
 800cb24:	e022      	b.n	800cb6c <__sflush_r+0xf8>
 800cb26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb2a:	b21b      	sxth	r3, r3
 800cb2c:	e01b      	b.n	800cb66 <__sflush_r+0xf2>
 800cb2e:	690f      	ldr	r7, [r1, #16]
 800cb30:	2f00      	cmp	r7, #0
 800cb32:	d0f6      	beq.n	800cb22 <__sflush_r+0xae>
 800cb34:	0793      	lsls	r3, r2, #30
 800cb36:	680e      	ldr	r6, [r1, #0]
 800cb38:	bf08      	it	eq
 800cb3a:	694b      	ldreq	r3, [r1, #20]
 800cb3c:	600f      	str	r7, [r1, #0]
 800cb3e:	bf18      	it	ne
 800cb40:	2300      	movne	r3, #0
 800cb42:	eba6 0807 	sub.w	r8, r6, r7
 800cb46:	608b      	str	r3, [r1, #8]
 800cb48:	f1b8 0f00 	cmp.w	r8, #0
 800cb4c:	dde9      	ble.n	800cb22 <__sflush_r+0xae>
 800cb4e:	6a21      	ldr	r1, [r4, #32]
 800cb50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb52:	4643      	mov	r3, r8
 800cb54:	463a      	mov	r2, r7
 800cb56:	4628      	mov	r0, r5
 800cb58:	47b0      	blx	r6
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	dc08      	bgt.n	800cb70 <__sflush_r+0xfc>
 800cb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb66:	81a3      	strh	r3, [r4, #12]
 800cb68:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb70:	4407      	add	r7, r0
 800cb72:	eba8 0800 	sub.w	r8, r8, r0
 800cb76:	e7e7      	b.n	800cb48 <__sflush_r+0xd4>
 800cb78:	20400001 	.word	0x20400001

0800cb7c <_fflush_r>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	690b      	ldr	r3, [r1, #16]
 800cb80:	4605      	mov	r5, r0
 800cb82:	460c      	mov	r4, r1
 800cb84:	b913      	cbnz	r3, 800cb8c <_fflush_r+0x10>
 800cb86:	2500      	movs	r5, #0
 800cb88:	4628      	mov	r0, r5
 800cb8a:	bd38      	pop	{r3, r4, r5, pc}
 800cb8c:	b118      	cbz	r0, 800cb96 <_fflush_r+0x1a>
 800cb8e:	6a03      	ldr	r3, [r0, #32]
 800cb90:	b90b      	cbnz	r3, 800cb96 <_fflush_r+0x1a>
 800cb92:	f7fe f847 	bl	800ac24 <__sinit>
 800cb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d0f3      	beq.n	800cb86 <_fflush_r+0xa>
 800cb9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cba0:	07d0      	lsls	r0, r2, #31
 800cba2:	d404      	bmi.n	800cbae <_fflush_r+0x32>
 800cba4:	0599      	lsls	r1, r3, #22
 800cba6:	d402      	bmi.n	800cbae <_fflush_r+0x32>
 800cba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbaa:	f7fe fa58 	bl	800b05e <__retarget_lock_acquire_recursive>
 800cbae:	4628      	mov	r0, r5
 800cbb0:	4621      	mov	r1, r4
 800cbb2:	f7ff ff5f 	bl	800ca74 <__sflush_r>
 800cbb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbb8:	07da      	lsls	r2, r3, #31
 800cbba:	4605      	mov	r5, r0
 800cbbc:	d4e4      	bmi.n	800cb88 <_fflush_r+0xc>
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	059b      	lsls	r3, r3, #22
 800cbc2:	d4e1      	bmi.n	800cb88 <_fflush_r+0xc>
 800cbc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbc6:	f7fe fa4b 	bl	800b060 <__retarget_lock_release_recursive>
 800cbca:	e7dd      	b.n	800cb88 <_fflush_r+0xc>

0800cbcc <__swhatbuf_r>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	460c      	mov	r4, r1
 800cbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	b096      	sub	sp, #88	@ 0x58
 800cbd8:	4615      	mov	r5, r2
 800cbda:	461e      	mov	r6, r3
 800cbdc:	da0d      	bge.n	800cbfa <__swhatbuf_r+0x2e>
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbe4:	f04f 0100 	mov.w	r1, #0
 800cbe8:	bf14      	ite	ne
 800cbea:	2340      	movne	r3, #64	@ 0x40
 800cbec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	6031      	str	r1, [r6, #0]
 800cbf4:	602b      	str	r3, [r5, #0]
 800cbf6:	b016      	add	sp, #88	@ 0x58
 800cbf8:	bd70      	pop	{r4, r5, r6, pc}
 800cbfa:	466a      	mov	r2, sp
 800cbfc:	f000 f862 	bl	800ccc4 <_fstat_r>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	dbec      	blt.n	800cbde <__swhatbuf_r+0x12>
 800cc04:	9901      	ldr	r1, [sp, #4]
 800cc06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc0e:	4259      	negs	r1, r3
 800cc10:	4159      	adcs	r1, r3
 800cc12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc16:	e7eb      	b.n	800cbf0 <__swhatbuf_r+0x24>

0800cc18 <__smakebuf_r>:
 800cc18:	898b      	ldrh	r3, [r1, #12]
 800cc1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc1c:	079d      	lsls	r5, r3, #30
 800cc1e:	4606      	mov	r6, r0
 800cc20:	460c      	mov	r4, r1
 800cc22:	d507      	bpl.n	800cc34 <__smakebuf_r+0x1c>
 800cc24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	6123      	str	r3, [r4, #16]
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	6163      	str	r3, [r4, #20]
 800cc30:	b003      	add	sp, #12
 800cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc34:	ab01      	add	r3, sp, #4
 800cc36:	466a      	mov	r2, sp
 800cc38:	f7ff ffc8 	bl	800cbcc <__swhatbuf_r>
 800cc3c:	9f00      	ldr	r7, [sp, #0]
 800cc3e:	4605      	mov	r5, r0
 800cc40:	4639      	mov	r1, r7
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7ff f876 	bl	800bd34 <_malloc_r>
 800cc48:	b948      	cbnz	r0, 800cc5e <__smakebuf_r+0x46>
 800cc4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc4e:	059a      	lsls	r2, r3, #22
 800cc50:	d4ee      	bmi.n	800cc30 <__smakebuf_r+0x18>
 800cc52:	f023 0303 	bic.w	r3, r3, #3
 800cc56:	f043 0302 	orr.w	r3, r3, #2
 800cc5a:	81a3      	strh	r3, [r4, #12]
 800cc5c:	e7e2      	b.n	800cc24 <__smakebuf_r+0xc>
 800cc5e:	89a3      	ldrh	r3, [r4, #12]
 800cc60:	6020      	str	r0, [r4, #0]
 800cc62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc66:	81a3      	strh	r3, [r4, #12]
 800cc68:	9b01      	ldr	r3, [sp, #4]
 800cc6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc6e:	b15b      	cbz	r3, 800cc88 <__smakebuf_r+0x70>
 800cc70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc74:	4630      	mov	r0, r6
 800cc76:	f000 f837 	bl	800cce8 <_isatty_r>
 800cc7a:	b128      	cbz	r0, 800cc88 <__smakebuf_r+0x70>
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	f023 0303 	bic.w	r3, r3, #3
 800cc82:	f043 0301 	orr.w	r3, r3, #1
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	431d      	orrs	r5, r3
 800cc8c:	81a5      	strh	r5, [r4, #12]
 800cc8e:	e7cf      	b.n	800cc30 <__smakebuf_r+0x18>

0800cc90 <memmove>:
 800cc90:	4288      	cmp	r0, r1
 800cc92:	b510      	push	{r4, lr}
 800cc94:	eb01 0402 	add.w	r4, r1, r2
 800cc98:	d902      	bls.n	800cca0 <memmove+0x10>
 800cc9a:	4284      	cmp	r4, r0
 800cc9c:	4623      	mov	r3, r4
 800cc9e:	d807      	bhi.n	800ccb0 <memmove+0x20>
 800cca0:	1e43      	subs	r3, r0, #1
 800cca2:	42a1      	cmp	r1, r4
 800cca4:	d008      	beq.n	800ccb8 <memmove+0x28>
 800cca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccae:	e7f8      	b.n	800cca2 <memmove+0x12>
 800ccb0:	4402      	add	r2, r0
 800ccb2:	4601      	mov	r1, r0
 800ccb4:	428a      	cmp	r2, r1
 800ccb6:	d100      	bne.n	800ccba <memmove+0x2a>
 800ccb8:	bd10      	pop	{r4, pc}
 800ccba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccc2:	e7f7      	b.n	800ccb4 <memmove+0x24>

0800ccc4 <_fstat_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	4d07      	ldr	r5, [pc, #28]	@ (800cce4 <_fstat_r+0x20>)
 800ccc8:	2300      	movs	r3, #0
 800ccca:	4604      	mov	r4, r0
 800cccc:	4608      	mov	r0, r1
 800ccce:	4611      	mov	r1, r2
 800ccd0:	602b      	str	r3, [r5, #0]
 800ccd2:	f7f4 fa5b 	bl	800118c <_fstat>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	d102      	bne.n	800cce0 <_fstat_r+0x1c>
 800ccda:	682b      	ldr	r3, [r5, #0]
 800ccdc:	b103      	cbz	r3, 800cce0 <_fstat_r+0x1c>
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	bd38      	pop	{r3, r4, r5, pc}
 800cce2:	bf00      	nop
 800cce4:	2400092c 	.word	0x2400092c

0800cce8 <_isatty_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d06      	ldr	r5, [pc, #24]	@ (800cd04 <_isatty_r+0x1c>)
 800ccec:	2300      	movs	r3, #0
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	602b      	str	r3, [r5, #0]
 800ccf4:	f7f4 fa5a 	bl	80011ac <_isatty>
 800ccf8:	1c43      	adds	r3, r0, #1
 800ccfa:	d102      	bne.n	800cd02 <_isatty_r+0x1a>
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	b103      	cbz	r3, 800cd02 <_isatty_r+0x1a>
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	bd38      	pop	{r3, r4, r5, pc}
 800cd04:	2400092c 	.word	0x2400092c

0800cd08 <_sbrk_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d06      	ldr	r5, [pc, #24]	@ (800cd24 <_sbrk_r+0x1c>)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4604      	mov	r4, r0
 800cd10:	4608      	mov	r0, r1
 800cd12:	602b      	str	r3, [r5, #0]
 800cd14:	f7f4 fa62 	bl	80011dc <_sbrk>
 800cd18:	1c43      	adds	r3, r0, #1
 800cd1a:	d102      	bne.n	800cd22 <_sbrk_r+0x1a>
 800cd1c:	682b      	ldr	r3, [r5, #0]
 800cd1e:	b103      	cbz	r3, 800cd22 <_sbrk_r+0x1a>
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	bd38      	pop	{r3, r4, r5, pc}
 800cd24:	2400092c 	.word	0x2400092c

0800cd28 <__assert_func>:
 800cd28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd2a:	4614      	mov	r4, r2
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	4b09      	ldr	r3, [pc, #36]	@ (800cd54 <__assert_func+0x2c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4605      	mov	r5, r0
 800cd34:	68d8      	ldr	r0, [r3, #12]
 800cd36:	b14c      	cbz	r4, 800cd4c <__assert_func+0x24>
 800cd38:	4b07      	ldr	r3, [pc, #28]	@ (800cd58 <__assert_func+0x30>)
 800cd3a:	9100      	str	r1, [sp, #0]
 800cd3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd40:	4906      	ldr	r1, [pc, #24]	@ (800cd5c <__assert_func+0x34>)
 800cd42:	462b      	mov	r3, r5
 800cd44:	f000 f870 	bl	800ce28 <fiprintf>
 800cd48:	f000 f880 	bl	800ce4c <abort>
 800cd4c:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <__assert_func+0x38>)
 800cd4e:	461c      	mov	r4, r3
 800cd50:	e7f3      	b.n	800cd3a <__assert_func+0x12>
 800cd52:	bf00      	nop
 800cd54:	2400001c 	.word	0x2400001c
 800cd58:	0800d0dd 	.word	0x0800d0dd
 800cd5c:	0800d0ea 	.word	0x0800d0ea
 800cd60:	0800d118 	.word	0x0800d118

0800cd64 <_calloc_r>:
 800cd64:	b570      	push	{r4, r5, r6, lr}
 800cd66:	fba1 5402 	umull	r5, r4, r1, r2
 800cd6a:	b934      	cbnz	r4, 800cd7a <_calloc_r+0x16>
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	f7fe ffe1 	bl	800bd34 <_malloc_r>
 800cd72:	4606      	mov	r6, r0
 800cd74:	b928      	cbnz	r0, 800cd82 <_calloc_r+0x1e>
 800cd76:	4630      	mov	r0, r6
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
 800cd7a:	220c      	movs	r2, #12
 800cd7c:	6002      	str	r2, [r0, #0]
 800cd7e:	2600      	movs	r6, #0
 800cd80:	e7f9      	b.n	800cd76 <_calloc_r+0x12>
 800cd82:	462a      	mov	r2, r5
 800cd84:	4621      	mov	r1, r4
 800cd86:	f7fe f8ed 	bl	800af64 <memset>
 800cd8a:	e7f4      	b.n	800cd76 <_calloc_r+0x12>

0800cd8c <__ascii_mbtowc>:
 800cd8c:	b082      	sub	sp, #8
 800cd8e:	b901      	cbnz	r1, 800cd92 <__ascii_mbtowc+0x6>
 800cd90:	a901      	add	r1, sp, #4
 800cd92:	b142      	cbz	r2, 800cda6 <__ascii_mbtowc+0x1a>
 800cd94:	b14b      	cbz	r3, 800cdaa <__ascii_mbtowc+0x1e>
 800cd96:	7813      	ldrb	r3, [r2, #0]
 800cd98:	600b      	str	r3, [r1, #0]
 800cd9a:	7812      	ldrb	r2, [r2, #0]
 800cd9c:	1e10      	subs	r0, r2, #0
 800cd9e:	bf18      	it	ne
 800cda0:	2001      	movne	r0, #1
 800cda2:	b002      	add	sp, #8
 800cda4:	4770      	bx	lr
 800cda6:	4610      	mov	r0, r2
 800cda8:	e7fb      	b.n	800cda2 <__ascii_mbtowc+0x16>
 800cdaa:	f06f 0001 	mvn.w	r0, #1
 800cdae:	e7f8      	b.n	800cda2 <__ascii_mbtowc+0x16>

0800cdb0 <_realloc_r>:
 800cdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb4:	4607      	mov	r7, r0
 800cdb6:	4614      	mov	r4, r2
 800cdb8:	460d      	mov	r5, r1
 800cdba:	b921      	cbnz	r1, 800cdc6 <_realloc_r+0x16>
 800cdbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	f7fe bfb7 	b.w	800bd34 <_malloc_r>
 800cdc6:	b92a      	cbnz	r2, 800cdd4 <_realloc_r+0x24>
 800cdc8:	f7fe ff40 	bl	800bc4c <_free_r>
 800cdcc:	4625      	mov	r5, r4
 800cdce:	4628      	mov	r0, r5
 800cdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd4:	f000 f841 	bl	800ce5a <_malloc_usable_size_r>
 800cdd8:	4284      	cmp	r4, r0
 800cdda:	4606      	mov	r6, r0
 800cddc:	d802      	bhi.n	800cde4 <_realloc_r+0x34>
 800cdde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cde2:	d8f4      	bhi.n	800cdce <_realloc_r+0x1e>
 800cde4:	4621      	mov	r1, r4
 800cde6:	4638      	mov	r0, r7
 800cde8:	f7fe ffa4 	bl	800bd34 <_malloc_r>
 800cdec:	4680      	mov	r8, r0
 800cdee:	b908      	cbnz	r0, 800cdf4 <_realloc_r+0x44>
 800cdf0:	4645      	mov	r5, r8
 800cdf2:	e7ec      	b.n	800cdce <_realloc_r+0x1e>
 800cdf4:	42b4      	cmp	r4, r6
 800cdf6:	4622      	mov	r2, r4
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	bf28      	it	cs
 800cdfc:	4632      	movcs	r2, r6
 800cdfe:	f7fe f930 	bl	800b062 <memcpy>
 800ce02:	4629      	mov	r1, r5
 800ce04:	4638      	mov	r0, r7
 800ce06:	f7fe ff21 	bl	800bc4c <_free_r>
 800ce0a:	e7f1      	b.n	800cdf0 <_realloc_r+0x40>

0800ce0c <__ascii_wctomb>:
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	4608      	mov	r0, r1
 800ce10:	b141      	cbz	r1, 800ce24 <__ascii_wctomb+0x18>
 800ce12:	2aff      	cmp	r2, #255	@ 0xff
 800ce14:	d904      	bls.n	800ce20 <__ascii_wctomb+0x14>
 800ce16:	228a      	movs	r2, #138	@ 0x8a
 800ce18:	601a      	str	r2, [r3, #0]
 800ce1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce1e:	4770      	bx	lr
 800ce20:	700a      	strb	r2, [r1, #0]
 800ce22:	2001      	movs	r0, #1
 800ce24:	4770      	bx	lr
	...

0800ce28 <fiprintf>:
 800ce28:	b40e      	push	{r1, r2, r3}
 800ce2a:	b503      	push	{r0, r1, lr}
 800ce2c:	4601      	mov	r1, r0
 800ce2e:	ab03      	add	r3, sp, #12
 800ce30:	4805      	ldr	r0, [pc, #20]	@ (800ce48 <fiprintf+0x20>)
 800ce32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce36:	6800      	ldr	r0, [r0, #0]
 800ce38:	9301      	str	r3, [sp, #4]
 800ce3a:	f7ff fd03 	bl	800c844 <_vfiprintf_r>
 800ce3e:	b002      	add	sp, #8
 800ce40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce44:	b003      	add	sp, #12
 800ce46:	4770      	bx	lr
 800ce48:	2400001c 	.word	0x2400001c

0800ce4c <abort>:
 800ce4c:	b508      	push	{r3, lr}
 800ce4e:	2006      	movs	r0, #6
 800ce50:	f000 f834 	bl	800cebc <raise>
 800ce54:	2001      	movs	r0, #1
 800ce56:	f7f4 f949 	bl	80010ec <_exit>

0800ce5a <_malloc_usable_size_r>:
 800ce5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce5e:	1f18      	subs	r0, r3, #4
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	bfbc      	itt	lt
 800ce64:	580b      	ldrlt	r3, [r1, r0]
 800ce66:	18c0      	addlt	r0, r0, r3
 800ce68:	4770      	bx	lr

0800ce6a <_raise_r>:
 800ce6a:	291f      	cmp	r1, #31
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4605      	mov	r5, r0
 800ce70:	460c      	mov	r4, r1
 800ce72:	d904      	bls.n	800ce7e <_raise_r+0x14>
 800ce74:	2316      	movs	r3, #22
 800ce76:	6003      	str	r3, [r0, #0]
 800ce78:	f04f 30ff 	mov.w	r0, #4294967295
 800ce7c:	bd38      	pop	{r3, r4, r5, pc}
 800ce7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce80:	b112      	cbz	r2, 800ce88 <_raise_r+0x1e>
 800ce82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce86:	b94b      	cbnz	r3, 800ce9c <_raise_r+0x32>
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f000 f831 	bl	800cef0 <_getpid_r>
 800ce8e:	4622      	mov	r2, r4
 800ce90:	4601      	mov	r1, r0
 800ce92:	4628      	mov	r0, r5
 800ce94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce98:	f000 b818 	b.w	800cecc <_kill_r>
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d00a      	beq.n	800ceb6 <_raise_r+0x4c>
 800cea0:	1c59      	adds	r1, r3, #1
 800cea2:	d103      	bne.n	800ceac <_raise_r+0x42>
 800cea4:	2316      	movs	r3, #22
 800cea6:	6003      	str	r3, [r0, #0]
 800cea8:	2001      	movs	r0, #1
 800ceaa:	e7e7      	b.n	800ce7c <_raise_r+0x12>
 800ceac:	2100      	movs	r1, #0
 800ceae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	4798      	blx	r3
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	e7e0      	b.n	800ce7c <_raise_r+0x12>
	...

0800cebc <raise>:
 800cebc:	4b02      	ldr	r3, [pc, #8]	@ (800cec8 <raise+0xc>)
 800cebe:	4601      	mov	r1, r0
 800cec0:	6818      	ldr	r0, [r3, #0]
 800cec2:	f7ff bfd2 	b.w	800ce6a <_raise_r>
 800cec6:	bf00      	nop
 800cec8:	2400001c 	.word	0x2400001c

0800cecc <_kill_r>:
 800cecc:	b538      	push	{r3, r4, r5, lr}
 800cece:	4d07      	ldr	r5, [pc, #28]	@ (800ceec <_kill_r+0x20>)
 800ced0:	2300      	movs	r3, #0
 800ced2:	4604      	mov	r4, r0
 800ced4:	4608      	mov	r0, r1
 800ced6:	4611      	mov	r1, r2
 800ced8:	602b      	str	r3, [r5, #0]
 800ceda:	f7f4 f8f7 	bl	80010cc <_kill>
 800cede:	1c43      	adds	r3, r0, #1
 800cee0:	d102      	bne.n	800cee8 <_kill_r+0x1c>
 800cee2:	682b      	ldr	r3, [r5, #0]
 800cee4:	b103      	cbz	r3, 800cee8 <_kill_r+0x1c>
 800cee6:	6023      	str	r3, [r4, #0]
 800cee8:	bd38      	pop	{r3, r4, r5, pc}
 800ceea:	bf00      	nop
 800ceec:	2400092c 	.word	0x2400092c

0800cef0 <_getpid_r>:
 800cef0:	f7f4 b8e4 	b.w	80010bc <_getpid>

0800cef4 <_init>:
 800cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef6:	bf00      	nop
 800cef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cefa:	bc08      	pop	{r3}
 800cefc:	469e      	mov	lr, r3
 800cefe:	4770      	bx	lr

0800cf00 <_fini>:
 800cf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf02:	bf00      	nop
 800cf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf06:	bc08      	pop	{r3}
 800cf08:	469e      	mov	lr, r3
 800cf0a:	4770      	bx	lr
