
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e910  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002641c  0800ebc0  0800ebc0  0000fbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08034fdc  08034fdc  00035fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08034fe4  08034fe4  00035fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08034fe8  08034fe8  00035fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000268  24000000  08034fec  00036000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001858  24000268  08035254  00036268  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001ac0  08035254  00036ac0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00036268  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f43c  00000000  00000000  00036296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004073  00000000  00000000  000556d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001420  00000000  00000000  00059748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f66  00000000  00000000  0005ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033a42  00000000  00000000  0005bace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f738  00000000  00000000  0008f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e2f3  00000000  00000000  000aec48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ecf3b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006188  00000000  00000000  001ecf80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  001f3108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000268 	.word	0x24000268
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800eba8 	.word	0x0800eba8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400026c 	.word	0x2400026c
 80002ec:	0800eba8 	.word	0x0800eba8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200b      	movs	r0, #11
 80006f6:	f001 fcbe 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 fcd5 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	200c      	movs	r0, #12
 8000706:	f001 fcb6 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800070a:	200c      	movs	r0, #12
 800070c:	f001 fccd 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	200d      	movs	r0, #13
 8000716:	f001 fcae 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800071a:	200d      	movs	r0, #13
 800071c:	f001 fcc5 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200e      	movs	r0, #14
 8000726:	f001 fca6 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800072a:	200e      	movs	r0, #14
 800072c:	f001 fcbd 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2010      	movs	r0, #16
 8000736:	f001 fc9e 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800073a:	2010      	movs	r0, #16
 800073c:	f001 fcb5 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b8f      	ldr	r3, [pc, #572]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000764:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000768:	4a8d      	ldr	r2, [pc, #564]	@ (80009a0 <MX_GPIO_Init+0x254>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000772:	4b8b      	ldr	r3, [pc, #556]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000774:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000780:	4b87      	ldr	r3, [pc, #540]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000786:	4a86      	ldr	r2, [pc, #536]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000790:	4b83      	ldr	r3, [pc, #524]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b80      	ldr	r3, [pc, #512]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a4:	4a7e      	ldr	r2, [pc, #504]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ae:	4b7c      	ldr	r3, [pc, #496]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b78      	ldr	r3, [pc, #480]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c2:	4a77      	ldr	r2, [pc, #476]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007cc:	4b74      	ldr	r3, [pc, #464]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	4b71      	ldr	r3, [pc, #452]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e0:	4a6f      	ldr	r2, [pc, #444]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ea:	4b6d      	ldr	r3, [pc, #436]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b69      	ldr	r3, [pc, #420]	@ (80009a0 <MX_GPIO_Init+0x254>)
 80007fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007fe:	4a68      	ldr	r2, [pc, #416]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000808:	4b65      	ldr	r3, [pc, #404]	@ (80009a0 <MX_GPIO_Init+0x254>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b62      	ldr	r3, [pc, #392]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081c:	4a60      	ldr	r2, [pc, #384]	@ (80009a0 <MX_GPIO_Init+0x254>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000822:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000826:	4b5e      	ldr	r3, [pc, #376]	@ (80009a0 <MX_GPIO_Init+0x254>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_AD0_GPIO_Port, MPU6500_AD0_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	485a      	ldr	r0, [pc, #360]	@ (80009a4 <MX_GPIO_Init+0x258>)
 800083a:	f004 fd63 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000844:	4858      	ldr	r0, [pc, #352]	@ (80009a8 <MX_GPIO_Init+0x25c>)
 8000846:	f004 fd5d 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000850:	4856      	ldr	r0, [pc, #344]	@ (80009ac <MX_GPIO_Init+0x260>)
 8000852:	f004 fd57 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085c:	4854      	ldr	r0, [pc, #336]	@ (80009b0 <MX_GPIO_Init+0x264>)
 800085e:	f004 fd51 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000868:	4851      	ldr	r0, [pc, #324]	@ (80009b0 <MX_GPIO_Init+0x264>)
 800086a:	f004 fd4b 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000874:	484f      	ldr	r0, [pc, #316]	@ (80009b4 <MX_GPIO_Init+0x268>)
 8000876:	f004 fd45 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_BLK_GPIO_Port, ST7789_BLK_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	484a      	ldr	r0, [pc, #296]	@ (80009a8 <MX_GPIO_Init+0x25c>)
 8000880:	f004 fd40 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	4848      	ldr	r0, [pc, #288]	@ (80009ac <MX_GPIO_Init+0x260>)
 800088a:	f004 fd3b 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : InputButton_Pin */
  GPIO_InitStruct.Pin = InputButton_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000894:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(InputButton_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4844      	ldr	r0, [pc, #272]	@ (80009b8 <MX_GPIO_Init+0x26c>)
 80008a6:	f004 fb7d 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_AD0_Pin */
  GPIO_InitStruct.Pin = MPU6500_AD0_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MPU6500_AD0_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4838      	ldr	r0, [pc, #224]	@ (80009a4 <MX_GPIO_Init+0x258>)
 80008c2:	f004 fb6f 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin ST7789_BLK_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ST7789_BLK_Pin;
 80008c6:	f244 0311 	movw	r3, #16401	@ 0x4011
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4832      	ldr	r0, [pc, #200]	@ (80009a8 <MX_GPIO_Init+0x25c>)
 80008e0:	f004 fb60 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX30102_INT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin;
 80008e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MAX30102_INT_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	482c      	ldr	r0, [pc, #176]	@ (80009ac <MX_GPIO_Init+0x260>)
 80008fc:	f004 fb52 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|LD2_Pin;
 8000900:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4824      	ldr	r0, [pc, #144]	@ (80009ac <MX_GPIO_Init+0x260>)
 800091a:	f004 fb43 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 800091e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092c:	2302      	movs	r3, #2
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481e      	ldr	r0, [pc, #120]	@ (80009b0 <MX_GPIO_Init+0x264>)
 8000938:	f004 fb34 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 800093c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4816      	ldr	r0, [pc, #88]	@ (80009b0 <MX_GPIO_Init+0x264>)
 8000956:	f004 fb25 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 800095a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <MX_GPIO_Init+0x268>)
 8000974:	f004 fb16 	bl	8004fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2017      	movs	r0, #23
 800097e:	f001 fb7a 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000982:	2017      	movs	r0, #23
 8000984:	f001 fb91 	bl	80020aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2028      	movs	r0, #40	@ 0x28
 800098e:	f001 fb72 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000992:	2028      	movs	r0, #40	@ 0x28
 8000994:	f001 fb89 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 8000998:	bf00      	nop
 800099a:	3730      	adds	r7, #48	@ 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	58024400 	.word	0x58024400
 80009a4:	58020000 	.word	0x58020000
 80009a8:	58020400 	.word	0x58020400
 80009ac:	58021000 	.word	0x58021000
 80009b0:	58020c00 	.word	0x58020c00
 80009b4:	58021800 	.word	0x58021800
 80009b8:	58020800 	.word	0x58020800

080009bc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a34 <MX_I2C1_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a38 <MX_I2C1_Init+0x7c>)
 80009ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d2:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009f6:	480e      	ldr	r0, [pc, #56]	@ (8000a30 <MX_I2C1_Init+0x74>)
 80009f8:	f004 fcb8 	bl	800536c <HAL_I2C_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a02:	f000 fb9b 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <MX_I2C1_Init+0x74>)
 8000a0a:	f004 fd4b 	bl	80054a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a14:	f000 fb92 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_I2C1_Init+0x74>)
 8000a1c:	f004 fd8d 	bl	800553a <HAL_I2CEx_ConfigDigitalFilter>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 fb89 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	24000284 	.word	0x24000284
 8000a34:	40005400 	.word	0x40005400
 8000a38:	20b0ccff 	.word	0x20b0ccff

08000a3c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab4 <MX_I2C2_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a48:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab8 <MX_I2C2_Init+0x7c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a52:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a76:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a78:	f004 fc78 	bl	800536c <HAL_I2C_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a82:	f000 fb5b 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a8a:	f004 fd0b 	bl	80054a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 fb52 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_I2C2_Init+0x74>)
 8000a9c:	f004 fd4d 	bl	800553a <HAL_I2CEx_ConfigDigitalFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 fb49 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	240002d8 	.word	0x240002d8
 8000ab4:	40005800 	.word	0x40005800
 8000ab8:	20b0ccff 	.word	0x20b0ccff

08000abc <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <MX_I2C4_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <MX_I2C4_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000af6:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000af8:	f004 fc38 	bl	800536c <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b02:	f000 fb1b 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000b0a:	f004 fccb 	bl	80054a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 fb12 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_I2C4_Init+0x74>)
 8000b1c:	f004 fd0d 	bl	800553a <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 fb09 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2400032c 	.word	0x2400032c
 8000b34:	58001c00 	.word	0x58001c00
 8000b38:	20b0ccff 	.word	0x20b0ccff

08000b3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0be      	sub	sp, #248	@ 0xf8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 0320 	add.w	r3, r7, #32
 8000b58:	22c0      	movs	r2, #192	@ 0xc0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f00c f87c 	bl	800cc5a <memset>
  if(i2cHandle->Instance==I2C1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a73      	ldr	r2, [pc, #460]	@ (8000d34 <HAL_I2C_MspInit+0x1f8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d146      	bne.n	8000bfa <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b6c:	f04f 0208 	mov.w	r2, #8
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	4618      	mov	r0, r3
 8000b84:	f005 fd3e 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b8e:	f000 fad5 	bl	800113c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b69      	ldr	r3, [pc, #420]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b98:	4a67      	ldr	r2, [pc, #412]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ba2:	4b65      	ldr	r3, [pc, #404]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 8000bb0:	23c0      	movs	r3, #192	@ 0xc0
 8000bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4859      	ldr	r0, [pc, #356]	@ (8000d3c <HAL_I2C_MspInit+0x200>)
 8000bd6:	f004 f9e5 	bl	8004fa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bda:	4b57      	ldr	r3, [pc, #348]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000bdc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000be0:	4a55      	ldr	r2, [pc, #340]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000be2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000be6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000bea:	4b53      	ldr	r3, [pc, #332]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000bec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000bf8:	e098      	b.n	8000d2c <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C2)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a50      	ldr	r2, [pc, #320]	@ (8000d40 <HAL_I2C_MspInit+0x204>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d147      	bne.n	8000c94 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c04:	f04f 0208 	mov.w	r2, #8
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f005 fcf2 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000c26:	f000 fa89 	bl	800113c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b43      	ldr	r3, [pc, #268]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c30:	4a41      	ldr	r2, [pc, #260]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c48:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c62:	2304      	movs	r3, #4
 8000c64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4833      	ldr	r0, [pc, #204]	@ (8000d3c <HAL_I2C_MspInit+0x200>)
 8000c70:	f004 f998 	bl	8004fa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c74:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c76:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c80:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000c84:	4b2c      	ldr	r3, [pc, #176]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000c86:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
}
 8000c92:	e04b      	b.n	8000d2c <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C4)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a2a      	ldr	r2, [pc, #168]	@ (8000d44 <HAL_I2C_MspInit+0x208>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d146      	bne.n	8000d2c <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c9e:	f04f 0210 	mov.w	r2, #16
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 fca5 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000cc0:	f000 fa3c 	bl	800113c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000cc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cca:	4a1b      	ldr	r2, [pc, #108]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cd4:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000cd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8000ce2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cea:	2312      	movs	r3, #18
 8000cec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d02:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d06:	4619      	mov	r1, r3
 8000d08:	480f      	ldr	r0, [pc, #60]	@ (8000d48 <HAL_I2C_MspInit+0x20c>)
 8000d0a:	f004 f94b 	bl	8004fa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000d10:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d14:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_I2C_MspInit+0x1fc>)
 8000d20:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
}
 8000d2c:	bf00      	nop
 8000d2e:	37f8      	adds	r7, #248	@ 0xf8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40005400 	.word	0x40005400
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	40005800 	.word	0x40005800
 8000d44:	58001c00 	.word	0x58001c00
 8000d48:	58020c00 	.word	0x58020c00

08000d4c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000d54:	1d39      	adds	r1, r7, #4
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <__io_putchar+0x20>)
 8000d5e:	f008 fa36 	bl	80091ce <HAL_UART_Transmit>
	return chr;
 8000d62:	687b      	ldr	r3, [r7, #4]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	240007b8 	.word	0x240007b8

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000d74:	f000 f9b6 	bl	80010e4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d78:	f000 ffec 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7c:	f000 f84a 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f7ff fce4 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d84:	f7ff fca2 	bl	80006cc <MX_DMA_Init>
  MX_UART4_Init();
 8000d88:	f000 fcf0 	bl	800176c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000d8c:	f000 fd86 	bl	800189c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000d90:	f7ff fe54 	bl	8000a3c <MX_I2C2_Init>
  MX_UART5_Init();
 8000d94:	f000 fd36 	bl	8001804 <MX_UART5_Init>
  MX_SPI1_Init();
 8000d98:	f000 f9d6 	bl	8001148 <MX_SPI1_Init>
  MX_I2C4_Init();
 8000d9c:	f7ff fe8e 	bl	8000abc <MX_I2C4_Init>
  MX_I2C1_Init();
 8000da0:	f7ff fe0c 	bl	80009bc <MX_I2C1_Init>
    printf("mpu6500: WHO_AM_I = 0x%02X\r\n", id);

#endif

#ifdef SCREEN_TEST
	SmartWatchScreen_State = SCREEN_ENVIRONMENTAL;
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <main+0x9c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
	Display_Init(SmartWatchScreen_State);
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <main+0x9c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f00a fb6a 	bl	800b488 <Display_Init>

//	    for (int i = 0; i < 100; ++i) {
//	    	SmartWatchData_handle.pressure = 100.0f + 10.0f * (i % 5); // 100, 110, 120, 130, 140, repeat
//	    	HAL_Delay(80);
//	    }
		SmartWatchData_handle.pressure += 1;
 8000db4:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <main+0xa0>)
 8000db6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dc2:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <main+0xa0>)
 8000dc4:	edc3 7a01 	vstr	s15, [r3, #4]
		SmartWatchData_handle.heart_rate += 1;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <main+0xa0>)
 8000dca:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	@ 0x104
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <main+0xa0>)
 8000dd8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
		SmartWatchData_handle.spo2 += 1;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <main+0xa0>)
 8000dde:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 8000de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000de6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <main+0xa0>)
 8000dec:	edc3 7a42 	vstr	s15, [r3, #264]	@ 0x108
		SmartWatchScreen_State = SCREEN_HEART_RATE;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <main+0x9c>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	701a      	strb	r2, [r3, #0]
	    Display_Update(SmartWatchScreen_State, &SmartWatchData_handle);
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <main+0x9c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4905      	ldr	r1, [pc, #20]	@ (8000e10 <main+0xa0>)
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f00a fd65 	bl	800b8cc <Display_Update>
	    HAL_Delay(20);
 8000e02:	2014      	movs	r0, #20
 8000e04:	f001 f838 	bl	8001e78 <HAL_Delay>
		SmartWatchData_handle.pressure += 1;
 8000e08:	bf00      	nop
 8000e0a:	e7d3      	b.n	8000db4 <main+0x44>
 8000e0c:	24000481 	.word	0x24000481
 8000e10:	24000b38 	.word	0x24000b38

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b09c      	sub	sp, #112	@ 0x70
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1e:	224c      	movs	r2, #76	@ 0x4c
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00b ff19 	bl	800cc5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f00b ff13 	bl	800cc5a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <SystemClock_Config+0xe0>)
 8000e36:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e3e:	2004      	movs	r0, #4
 8000e40:	f004 fbc8 	bl	80055d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e44:	2300      	movs	r3, #0
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef8 <SystemClock_Config+0xe4>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ef8 <SystemClock_Config+0xe4>)
 8000e4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b28      	ldr	r3, [pc, #160]	@ (8000ef8 <SystemClock_Config+0xe4>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e60:	bf00      	nop
 8000e62:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <SystemClock_Config+0xe4>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e6e:	d1f8      	bne.n	8000e62 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e70:	2301      	movs	r3, #1
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000e86:	2346      	movs	r3, #70	@ 0x46
 8000e88:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e96:	230c      	movs	r3, #12
 8000e98:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 fbee 	bl	8005688 <HAL_RCC_OscConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000eb2:	f000 f943 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb6:	233f      	movs	r3, #63	@ 0x3f
 8000eb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ec6:	2340      	movs	r3, #64	@ 0x40
 8000ec8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eca:	2340      	movs	r3, #64	@ 0x40
 8000ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ed4:	2340      	movs	r3, #64	@ 0x40
 8000ed6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2106      	movs	r1, #6
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 f805 	bl	8005eec <HAL_RCC_ClockConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ee8:	f000 f928 	bl	800113c <Error_Handler>
  }
}
 8000eec:	bf00      	nop
 8000eee:	3770      	adds	r7, #112	@ 0x70
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	58024800 	.word	0x58024800

08000efc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a56      	ldr	r2, [pc, #344]	@ (8001068 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	f040 80a5 	bne.w	800105e <HAL_UARTEx_RxEventCallback+0x162>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	461a      	mov	r2, r3
 8000f18:	4954      	ldr	r1, [pc, #336]	@ (800106c <HAL_UARTEx_RxEventCallback+0x170>)
 8000f1a:	4855      	ldr	r0, [pc, #340]	@ (8001070 <HAL_UARTEx_RxEventCallback+0x174>)
 8000f1c:	f00b ff2d 	bl	800cd7a <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	4a53      	ldr	r2, [pc, #332]	@ (8001070 <HAL_UARTEx_RxEventCallback+0x174>)
 8000f24:	2100      	movs	r1, #0
 8000f26:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8000f28:	4b52      	ldr	r3, [pc, #328]	@ (8001074 <HAL_UARTEx_RxEventCallback+0x178>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f008 f9dc 	bl	80092ec <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8000f34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f38:	2100      	movs	r1, #0
 8000f3a:	484c      	ldr	r0, [pc, #304]	@ (800106c <HAL_UARTEx_RxEventCallback+0x170>)
 8000f3c:	f00b fe8d 	bl	800cc5a <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000f40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f44:	4949      	ldr	r1, [pc, #292]	@ (800106c <HAL_UARTEx_RxEventCallback+0x170>)
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f00a f9fb 	bl	800b342 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a48      	ldr	r2, [pc, #288]	@ (8001078 <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d068      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a46      	ldr	r2, [pc, #280]	@ (800107c <HAL_UARTEx_RxEventCallback+0x180>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d061      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a43      	ldr	r2, [pc, #268]	@ (8001080 <HAL_UARTEx_RxEventCallback+0x184>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d05a      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a41      	ldr	r2, [pc, #260]	@ (8001084 <HAL_UARTEx_RxEventCallback+0x188>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d053      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a3e      	ldr	r2, [pc, #248]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x18c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d04c      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a3c      	ldr	r2, [pc, #240]	@ (800108c <HAL_UARTEx_RxEventCallback+0x190>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d045      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a39      	ldr	r2, [pc, #228]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x194>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d03e      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a37      	ldr	r2, [pc, #220]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x198>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d037      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a34      	ldr	r2, [pc, #208]	@ (8001098 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d030      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a32      	ldr	r2, [pc, #200]	@ (800109c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d029      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80010a0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d022      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a2d      	ldr	r2, [pc, #180]	@ (80010a4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d01b      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80010a8 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d014      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a28      	ldr	r2, [pc, #160]	@ (80010ac <HAL_UARTEx_RxEventCallback+0x1b0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d00d      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a25      	ldr	r2, [pc, #148]	@ (80010b0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d006      	beq.n	800102c <HAL_UARTEx_RxEventCallback+0x130>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a23      	ldr	r2, [pc, #140]	@ (80010b4 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d10c      	bne.n	8001046 <HAL_UARTEx_RxEventCallback+0x14a>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0208 	bic.w	r2, r2, #8
 8001042:	601a      	str	r2, [r3, #0]
    }
}
 8001044:	e00b      	b.n	800105e <HAL_UARTEx_RxEventCallback+0x162>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0204 	bic.w	r2, r2, #4
 800105c:	601a      	str	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40004c00 	.word	0x40004c00
 800106c:	24000a30 	.word	0x24000a30
 8001070:	24000380 	.word	0x24000380
 8001074:	24000480 	.word	0x24000480
 8001078:	40020010 	.word	0x40020010
 800107c:	40020028 	.word	0x40020028
 8001080:	40020040 	.word	0x40020040
 8001084:	40020058 	.word	0x40020058
 8001088:	40020070 	.word	0x40020070
 800108c:	40020088 	.word	0x40020088
 8001090:	400200a0 	.word	0x400200a0
 8001094:	400200b8 	.word	0x400200b8
 8001098:	40020410 	.word	0x40020410
 800109c:	40020428 	.word	0x40020428
 80010a0:	40020440 	.word	0x40020440
 80010a4:	40020458 	.word	0x40020458
 80010a8:	40020470 	.word	0x40020470
 80010ac:	40020488 	.word	0x40020488
 80010b0:	400204a0 	.word	0x400204a0
 80010b4:	400204b8 	.word	0x400204b8

080010b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == InputButton_Pin)
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010c8:	d006      	beq.n	80010d8 <HAL_GPIO_EXTI_Callback+0x20>
    {

    }
    else if (GPIO_Pin == MAX30102_INT_Pin)
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010d0:	d102      	bne.n	80010d8 <HAL_GPIO_EXTI_Callback+0x20>
    {
    	max30102_on_interrupt(&max30102);
 80010d2:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <HAL_GPIO_EXTI_Callback+0x28>)
 80010d4:	f00a fc58 	bl	800b988 <max30102_on_interrupt>
    }
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24000484 	.word	0x24000484

080010e4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010f6:	f000 fff3 	bl	80020e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010fa:	2301      	movs	r3, #1
 80010fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010fe:	2300      	movs	r3, #0
 8001100:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001106:	231f      	movs	r3, #31
 8001108:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800110a:	2387      	movs	r3, #135	@ 0x87
 800110c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800110e:	2300      	movs	r3, #0
 8001110:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001112:	2300      	movs	r3, #0
 8001114:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001116:	2301      	movs	r3, #1
 8001118:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800111a:	2301      	movs	r3, #1
 800111c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001126:	463b      	mov	r3, r7
 8001128:	4618      	mov	r0, r3
 800112a:	f001 f811 	bl	8002150 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800112e:	2004      	movs	r0, #4
 8001130:	f000 ffee 	bl	8002110 <HAL_MPU_Enable>

}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <Error_Handler+0x8>

08001148 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800114c:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <MX_SPI1_Init+0xac>)
 800114e:	4a2a      	ldr	r2, [pc, #168]	@ (80011f8 <MX_SPI1_Init+0xb0>)
 8001150:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001152:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <MX_SPI1_Init+0xac>)
 8001154:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001158:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800115a:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <MX_SPI1_Init+0xac>)
 800115c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001160:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001162:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <MX_SPI1_Init+0xac>)
 8001164:	2207      	movs	r2, #7
 8001166:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001168:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <MX_SPI1_Init+0xac>)
 800116a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800116e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001170:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <MX_SPI1_Init+0xac>)
 8001172:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001176:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001178:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_SPI1_Init+0xac>)
 800117a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800117e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_SPI1_Init+0xac>)
 8001182:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001186:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <MX_SPI1_Init+0xac>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800118e:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <MX_SPI1_Init+0xac>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001194:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <MX_SPI1_Init+0xac>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <MX_SPI1_Init+0xac>)
 800119c:	2200      	movs	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011bc:	2200      	movs	r2, #0
 80011be:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011da:	2200      	movs	r2, #0
 80011dc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <MX_SPI1_Init+0xac>)
 80011e0:	f006 fff0 	bl	80081c4 <HAL_SPI_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 80011ea:	f7ff ffa7 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2400058c 	.word	0x2400058c
 80011f8:	40013000 	.word	0x40013000

080011fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	22c0      	movs	r2, #192	@ 0xc0
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00b fd1c 	bl	800cc5a <memset>
  if(spiHandle->Instance==SPI1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a40      	ldr	r2, [pc, #256]	@ (8001328 <HAL_SPI_MspInit+0x12c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d179      	bne.n	8001320 <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800122c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001238:	2300      	movs	r3, #0
 800123a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4618      	mov	r0, r3
 8001242:	f005 f9df 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800124c:	f7ff ff76 	bl	800113c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001250:	4b36      	ldr	r3, [pc, #216]	@ (800132c <HAL_SPI_MspInit+0x130>)
 8001252:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001256:	4a35      	ldr	r2, [pc, #212]	@ (800132c <HAL_SPI_MspInit+0x130>)
 8001258:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800125c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001260:	4b32      	ldr	r3, [pc, #200]	@ (800132c <HAL_SPI_MspInit+0x130>)
 8001262:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001266:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <HAL_SPI_MspInit+0x130>)
 8001270:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001274:	4a2d      	ldr	r2, [pc, #180]	@ (800132c <HAL_SPI_MspInit+0x130>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800127e:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <HAL_SPI_MspInit+0x130>)
 8001280:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800128c:	23a0      	movs	r3, #160	@ 0xa0
 800128e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012a4:	2305      	movs	r3, #5
 80012a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012ae:	4619      	mov	r1, r3
 80012b0:	481f      	ldr	r0, [pc, #124]	@ (8001330 <HAL_SPI_MspInit+0x134>)
 80012b2:	f003 fe77 	bl	8004fa4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001338 <HAL_SPI_MspInit+0x13c>)
 80012ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012be:	2226      	movs	r2, #38	@ 0x26
 80012c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012c4:	2240      	movs	r2, #64	@ 0x40
 80012c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012f4:	480f      	ldr	r0, [pc, #60]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 80012f6:	f000 ff6b 	bl	80021d0 <HAL_DMA_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001300:	f7ff ff1c 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a0b      	ldr	r2, [pc, #44]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 8001308:	679a      	str	r2, [r3, #120]	@ 0x78
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <HAL_SPI_MspInit+0x138>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2023      	movs	r0, #35	@ 0x23
 8001316:	f000 feae 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800131a:	2023      	movs	r0, #35	@ 0x23
 800131c:	f000 fec5 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001320:	bf00      	nop
 8001322:	37e8      	adds	r7, #232	@ 0xe8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40013000 	.word	0x40013000
 800132c:	58024400 	.word	0x58024400
 8001330:	58020000 	.word	0x58020000
 8001334:	24000614 	.word	0x24000614
 8001338:	40020088 	.word	0x40020088

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_MspInit+0x30>)
 8001344:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001348:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_MspInit+0x30>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_MspInit+0x30>)
 8001354:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	58024400 	.word	0x58024400

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f000 fd37 	bl	8001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <DMA1_Stream0_IRQHandler+0x10>)
 80013d6:	f002 fa57 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2400093c 	.word	0x2400093c

080013e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <DMA1_Stream1_IRQHandler+0x10>)
 80013ea:	f002 fa4d 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	240009b4 	.word	0x240009b4

080013f8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <DMA1_Stream2_IRQHandler+0x10>)
 80013fe:	f002 fa43 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2400084c 	.word	0x2400084c

0800140c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <DMA1_Stream3_IRQHandler+0x10>)
 8001412:	f002 fa39 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	240008c4 	.word	0x240008c4

08001420 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <DMA1_Stream5_IRQHandler+0x10>)
 8001426:	f002 fa2f 	bl	8003888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	24000614 	.word	0x24000614

08001434 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 8001438:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800143c:	f003 ff7b 	bl	8005336 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001448:	4802      	ldr	r0, [pc, #8]	@ (8001454 <SPI1_IRQHandler+0x10>)
 800144a:	f007 fb0f 	bl	8008a6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2400058c 	.word	0x2400058c

08001458 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(InputButton_Pin);
 800145c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001460:	f003 ff69 	bl	8005336 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <UART4_IRQHandler+0x10>)
 800146e:	f007 fff3 	bl	8009458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24000690 	.word	0x24000690

0800147c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <UART5_IRQHandler+0x10>)
 8001482:	f007 ffe9 	bl	8009458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	24000724 	.word	0x24000724

08001490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_kill>:

int _kill(int pid, int sig)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014aa:	f00b fc39 	bl	800cd20 <__errno>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2216      	movs	r2, #22
 80014b2:	601a      	str	r2, [r3, #0]
  return -1;
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_exit>:

void _exit (int status)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d2:	bf00      	nop
 80014d4:	e7fd      	b.n	80014d2 <_exit+0x12>

080014d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e00a      	b.n	80014fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e8:	f3af 8000 	nop.w
 80014ec:	4601      	mov	r1, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	b2ca      	uxtb	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbf0      	blt.n	80014e8 <_read+0x12>
  }

  return len;
 8001506:	687b      	ldr	r3, [r7, #4]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e009      	b.n	8001536 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fc0e 	bl	8000d4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	dbf1      	blt.n	8001522 <_write+0x12>
  }
  return len;
 800153e:	687b      	ldr	r3, [r7, #4]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_close>:

int _close(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001570:	605a      	str	r2, [r3, #4]
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_isatty>:

int _isatty(int file)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d207      	bcs.n	80015f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e0:	f00b fb9e 	bl	800cd20 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e009      	b.n	8001604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	24100000 	.word	0x24100000
 8001610:	00000400 	.word	0x00000400
 8001614:	2400068c 	.word	0x2400068c
 8001618:	24001ac0 	.word	0x24001ac0

0800161c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001620:	4b3e      	ldr	r3, [pc, #248]	@ (800171c <SystemInit+0x100>)
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001626:	4a3d      	ldr	r2, [pc, #244]	@ (800171c <SystemInit+0x100>)
 8001628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800162c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001630:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <SystemInit+0x104>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 030f 	and.w	r3, r3, #15
 8001638:	2b02      	cmp	r3, #2
 800163a:	d807      	bhi.n	800164c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800163c:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <SystemInit+0x104>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 030f 	bic.w	r3, r3, #15
 8001644:	4a36      	ldr	r2, [pc, #216]	@ (8001720 <SystemInit+0x104>)
 8001646:	f043 0303 	orr.w	r3, r3, #3
 800164a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800164c:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <SystemInit+0x108>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a34      	ldr	r2, [pc, #208]	@ (8001724 <SystemInit+0x108>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001658:	4b32      	ldr	r3, [pc, #200]	@ (8001724 <SystemInit+0x108>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <SystemInit+0x108>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4930      	ldr	r1, [pc, #192]	@ (8001724 <SystemInit+0x108>)
 8001664:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <SystemInit+0x10c>)
 8001666:	4013      	ands	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800166a:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <SystemInit+0x104>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001676:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <SystemInit+0x104>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 030f 	bic.w	r3, r3, #15
 800167e:	4a28      	ldr	r2, [pc, #160]	@ (8001720 <SystemInit+0x104>)
 8001680:	f043 0303 	orr.w	r3, r3, #3
 8001684:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001686:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <SystemInit+0x108>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800168c:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <SystemInit+0x108>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001692:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <SystemInit+0x108>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <SystemInit+0x108>)
 800169a:	4a24      	ldr	r2, [pc, #144]	@ (800172c <SystemInit+0x110>)
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <SystemInit+0x108>)
 80016a0:	4a23      	ldr	r2, [pc, #140]	@ (8001730 <SystemInit+0x114>)
 80016a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <SystemInit+0x108>)
 80016a6:	4a23      	ldr	r2, [pc, #140]	@ (8001734 <SystemInit+0x118>)
 80016a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <SystemInit+0x108>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <SystemInit+0x108>)
 80016b2:	4a20      	ldr	r2, [pc, #128]	@ (8001734 <SystemInit+0x118>)
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <SystemInit+0x108>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <SystemInit+0x108>)
 80016be:	4a1d      	ldr	r2, [pc, #116]	@ (8001734 <SystemInit+0x118>)
 80016c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016c2:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <SystemInit+0x108>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <SystemInit+0x108>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <SystemInit+0x108>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <SystemInit+0x108>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <SystemInit+0x108>)
 80016dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80016e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d113      	bne.n	8001710 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <SystemInit+0x108>)
 80016ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80016ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <SystemInit+0x108>)
 80016f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016f4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <SystemInit+0x11c>)
 80016fa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016fe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <SystemInit+0x108>)
 8001702:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001706:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <SystemInit+0x108>)
 8001708:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800170c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00
 8001720:	52002000 	.word	0x52002000
 8001724:	58024400 	.word	0x58024400
 8001728:	eaf6ed7f 	.word	0xeaf6ed7f
 800172c:	02020200 	.word	0x02020200
 8001730:	01ff0000 	.word	0x01ff0000
 8001734:	01010280 	.word	0x01010280
 8001738:	52004000 	.word	0x52004000

0800173c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <ExitRun0Mode+0x2c>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <ExitRun0Mode+0x2c>)
 8001746:	f023 0302 	bic.w	r3, r3, #2
 800174a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800174c:	bf00      	nop
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <ExitRun0Mode+0x2c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f9      	beq.n	800174e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	58024800 	.word	0x58024800

0800176c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001770:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <MX_UART4_Init+0x90>)
 8001772:	4a23      	ldr	r2, [pc, #140]	@ (8001800 <MX_UART4_Init+0x94>)
 8001774:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001776:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <MX_UART4_Init+0x90>)
 8001778:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800177c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <MX_UART4_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <MX_UART4_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800178a:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_UART4_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_UART4_Init+0x90>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <MX_UART4_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_UART4_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_UART4_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_UART4_Init+0x90>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ae:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <MX_UART4_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017b4:	4811      	ldr	r0, [pc, #68]	@ (80017fc <MX_UART4_Init+0x90>)
 80017b6:	f007 fcba 	bl	800912e <HAL_UART_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80017c0:	f7ff fcbc 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c4:	2100      	movs	r1, #0
 80017c6:	480d      	ldr	r0, [pc, #52]	@ (80017fc <MX_UART4_Init+0x90>)
 80017c8:	f009 fd3f 	bl	800b24a <HAL_UARTEx_SetTxFifoThreshold>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80017d2:	f7ff fcb3 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d6:	2100      	movs	r1, #0
 80017d8:	4808      	ldr	r0, [pc, #32]	@ (80017fc <MX_UART4_Init+0x90>)
 80017da:	f009 fd74 	bl	800b2c6 <HAL_UARTEx_SetRxFifoThreshold>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80017e4:	f7ff fcaa 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	@ (80017fc <MX_UART4_Init+0x90>)
 80017ea:	f009 fcf5 	bl	800b1d8 <HAL_UARTEx_DisableFifoMode>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80017f4:	f7ff fca2 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	24000690 	.word	0x24000690
 8001800:	40004c00 	.word	0x40004c00

08001804 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001808:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <MX_UART5_Init+0x90>)
 800180a:	4a23      	ldr	r2, [pc, #140]	@ (8001898 <MX_UART5_Init+0x94>)
 800180c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <MX_UART5_Init+0x90>)
 8001810:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001814:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <MX_UART5_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <MX_UART5_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <MX_UART5_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <MX_UART5_Init+0x90>)
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <MX_UART5_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <MX_UART5_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <MX_UART5_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MX_UART5_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <MX_UART5_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800184c:	4811      	ldr	r0, [pc, #68]	@ (8001894 <MX_UART5_Init+0x90>)
 800184e:	f007 fc6e 	bl	800912e <HAL_UART_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001858:	f7ff fc70 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800185c:	2100      	movs	r1, #0
 800185e:	480d      	ldr	r0, [pc, #52]	@ (8001894 <MX_UART5_Init+0x90>)
 8001860:	f009 fcf3 	bl	800b24a <HAL_UARTEx_SetTxFifoThreshold>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800186a:	f7ff fc67 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800186e:	2100      	movs	r1, #0
 8001870:	4808      	ldr	r0, [pc, #32]	@ (8001894 <MX_UART5_Init+0x90>)
 8001872:	f009 fd28 	bl	800b2c6 <HAL_UARTEx_SetRxFifoThreshold>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800187c:	f7ff fc5e 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	@ (8001894 <MX_UART5_Init+0x90>)
 8001882:	f009 fca9 	bl	800b1d8 <HAL_UARTEx_DisableFifoMode>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800188c:	f7ff fc56 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	24000724 	.word	0x24000724
 8001898:	40005000 	.word	0x40005000

0800189c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a0:	4b22      	ldr	r3, [pc, #136]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018a2:	4a23      	ldr	r2, [pc, #140]	@ (8001930 <MX_USART3_UART_Init+0x94>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c6:	4b19      	ldr	r3, [pc, #100]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	4b17      	ldr	r3, [pc, #92]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d2:	4b16      	ldr	r3, [pc, #88]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018de:	4b13      	ldr	r3, [pc, #76]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018e4:	4811      	ldr	r0, [pc, #68]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018e6:	f007 fc22 	bl	800912e <HAL_UART_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018f0:	f7ff fc24 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f4:	2100      	movs	r1, #0
 80018f6:	480d      	ldr	r0, [pc, #52]	@ (800192c <MX_USART3_UART_Init+0x90>)
 80018f8:	f009 fca7 	bl	800b24a <HAL_UARTEx_SetTxFifoThreshold>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001902:	f7ff fc1b 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001906:	2100      	movs	r1, #0
 8001908:	4808      	ldr	r0, [pc, #32]	@ (800192c <MX_USART3_UART_Init+0x90>)
 800190a:	f009 fcdc 	bl	800b2c6 <HAL_UARTEx_SetRxFifoThreshold>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001914:	f7ff fc12 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <MX_USART3_UART_Init+0x90>)
 800191a:	f009 fc5d 	bl	800b1d8 <HAL_UARTEx_DisableFifoMode>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001924:	f7ff fc0a 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	240007b8 	.word	0x240007b8
 8001930:	40004800 	.word	0x40004800

08001934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0be      	sub	sp, #248	@ 0xf8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	22c0      	movs	r2, #192	@ 0xc0
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f00b f980 	bl	800cc5a <memset>
  if(uartHandle->Instance==UART4)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4ab0      	ldr	r2, [pc, #704]	@ (8001c20 <HAL_UART_MspInit+0x2ec>)
 8001960:	4293      	cmp	r3, r2
 8001962:	f040 80ac 	bne.w	8001abe <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001966:	f04f 0202 	mov.w	r2, #2
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	4618      	mov	r0, r3
 800197e:	f004 fe41 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001988:	f7ff fbd8 	bl	800113c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800198c:	4ba5      	ldr	r3, [pc, #660]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 800198e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001992:	4aa4      	ldr	r2, [pc, #656]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 8001994:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001998:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800199c:	4ba1      	ldr	r3, [pc, #644]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 800199e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80019a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	4b9e      	ldr	r3, [pc, #632]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 80019ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019b0:	4a9c      	ldr	r2, [pc, #624]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019ba:	4b9a      	ldr	r3, [pc, #616]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 80019bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019e2:	2308      	movs	r3, #8
 80019e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019ec:	4619      	mov	r1, r3
 80019ee:	488e      	ldr	r0, [pc, #568]	@ (8001c28 <HAL_UART_MspInit+0x2f4>)
 80019f0:	f003 fad8 	bl	8004fa4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80019f4:	4b8d      	ldr	r3, [pc, #564]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 80019f6:	4a8e      	ldr	r2, [pc, #568]	@ (8001c30 <HAL_UART_MspInit+0x2fc>)
 80019f8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80019fa:	4b8c      	ldr	r3, [pc, #560]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 80019fc:	223f      	movs	r2, #63	@ 0x3f
 80019fe:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a00:	4b8a      	ldr	r3, [pc, #552]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a06:	4b89      	ldr	r3, [pc, #548]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a0c:	4b87      	ldr	r3, [pc, #540]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a12:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a14:	4b85      	ldr	r3, [pc, #532]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a1a:	4b84      	ldr	r3, [pc, #528]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001a20:	4b82      	ldr	r3, [pc, #520]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a26:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a28:	4b80      	ldr	r3, [pc, #512]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001a34:	487d      	ldr	r0, [pc, #500]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a36:	f000 fbcb 	bl	80021d0 <HAL_DMA_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001a40:	f7ff fb7c 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a79      	ldr	r2, [pc, #484]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001a4c:	4a77      	ldr	r2, [pc, #476]	@ (8001c2c <HAL_UART_MspInit+0x2f8>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 8001a52:	4b78      	ldr	r3, [pc, #480]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a54:	4a78      	ldr	r2, [pc, #480]	@ (8001c38 <HAL_UART_MspInit+0x304>)
 8001a56:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001a58:	4b76      	ldr	r3, [pc, #472]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a5a:	2240      	movs	r2, #64	@ 0x40
 8001a5c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a5e:	4b75      	ldr	r3, [pc, #468]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a60:	2240      	movs	r2, #64	@ 0x40
 8001a62:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a64:	4b73      	ldr	r3, [pc, #460]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a6a:	4b72      	ldr	r3, [pc, #456]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a70:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a72:	4b70      	ldr	r3, [pc, #448]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a78:	4b6e      	ldr	r3, [pc, #440]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a84:	4b6b      	ldr	r3, [pc, #428]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001a90:	4868      	ldr	r0, [pc, #416]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001a92:	f000 fb9d 	bl	80021d0 <HAL_DMA_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8001a9c:	f7ff fb4e 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a64      	ldr	r2, [pc, #400]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001aa4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001aa6:	4a63      	ldr	r2, [pc, #396]	@ (8001c34 <HAL_UART_MspInit+0x300>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2034      	movs	r0, #52	@ 0x34
 8001ab2:	f000 fae0 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ab6:	2034      	movs	r0, #52	@ 0x34
 8001ab8:	f000 faf7 	bl	80020aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001abc:	e114      	b.n	8001ce8 <HAL_UART_MspInit+0x3b4>
  else if(uartHandle->Instance==UART5)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c3c <HAL_UART_MspInit+0x308>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	f040 80c3 	bne.w	8001c50 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001aca:	f04f 0202 	mov.w	r2, #2
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 fd8f 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001aec:	f7ff fb26 	bl	800113c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001af0:	4b4c      	ldr	r3, [pc, #304]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 8001af2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001af6:	4a4b      	ldr	r2, [pc, #300]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 8001af8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001afc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001b00:	4b48      	ldr	r3, [pc, #288]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 8001b02:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b45      	ldr	r3, [pc, #276]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 8001b10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b14:	4a43      	ldr	r2, [pc, #268]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b1e:	4b41      	ldr	r3, [pc, #260]	@ (8001c24 <HAL_UART_MspInit+0x2f0>)
 8001b20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b2c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001b46:	230e      	movs	r3, #14
 8001b48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4835      	ldr	r0, [pc, #212]	@ (8001c28 <HAL_UART_MspInit+0x2f4>)
 8001b54:	f003 fa26 	bl	8004fa4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c44 <HAL_UART_MspInit+0x310>)
 8001b5c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001b5e:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b60:	2241      	movs	r2, #65	@ 0x41
 8001b62:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b64:	4b36      	ldr	r3, [pc, #216]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6a:	4b35      	ldr	r3, [pc, #212]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b70:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b76:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b78:	4b31      	ldr	r3, [pc, #196]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b7e:	4b30      	ldr	r3, [pc, #192]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001b84:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b90:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001b96:	482a      	ldr	r0, [pc, #168]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001b98:	f000 fb1a 	bl	80021d0 <HAL_DMA_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001ba2:	f7ff facb 	bl	800113c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a25      	ldr	r2, [pc, #148]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001baa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001bae:	4a24      	ldr	r2, [pc, #144]	@ (8001c40 <HAL_UART_MspInit+0x30c>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8001bb4:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001bb6:	4a25      	ldr	r2, [pc, #148]	@ (8001c4c <HAL_UART_MspInit+0x318>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8001bba:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001bbc:	2242      	movs	r2, #66	@ 0x42
 8001bbe:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bc0:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001bc2:	2240      	movs	r2, #64	@ 0x40
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001bce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bd2:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bda:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001be0:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001be6:	4b18      	ldr	r3, [pc, #96]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001bf2:	4815      	ldr	r0, [pc, #84]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001bf4:	f000 faec 	bl	80021d0 <HAL_DMA_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8001bfe:	f7ff fa9d 	bl	800113c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a10      	ldr	r2, [pc, #64]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001c06:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c08:	4a0f      	ldr	r2, [pc, #60]	@ (8001c48 <HAL_UART_MspInit+0x314>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	2035      	movs	r0, #53	@ 0x35
 8001c14:	f000 fa2f 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001c18:	2035      	movs	r0, #53	@ 0x35
 8001c1a:	f000 fa46 	bl	80020aa <HAL_NVIC_EnableIRQ>
}
 8001c1e:	e063      	b.n	8001ce8 <HAL_UART_MspInit+0x3b4>
 8001c20:	40004c00 	.word	0x40004c00
 8001c24:	58024400 	.word	0x58024400
 8001c28:	58020400 	.word	0x58020400
 8001c2c:	2400084c 	.word	0x2400084c
 8001c30:	40020040 	.word	0x40020040
 8001c34:	240008c4 	.word	0x240008c4
 8001c38:	40020058 	.word	0x40020058
 8001c3c:	40005000 	.word	0x40005000
 8001c40:	2400093c 	.word	0x2400093c
 8001c44:	40020010 	.word	0x40020010
 8001c48:	240009b4 	.word	0x240009b4
 8001c4c:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <HAL_UART_MspInit+0x3bc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d146      	bne.n	8001ce8 <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c5a:	f04f 0202 	mov.w	r2, #2
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 fcc7 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8001c7c:	f7ff fa5e 	bl	800113c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c80:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <HAL_UART_MspInit+0x3c0>)
 8001c82:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c86:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf4 <HAL_UART_MspInit+0x3c0>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c8c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001c90:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_UART_MspInit+0x3c0>)
 8001c92:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_UART_MspInit+0x3c0>)
 8001ca0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ca4:	4a13      	ldr	r2, [pc, #76]	@ (8001cf4 <HAL_UART_MspInit+0x3c0>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_UART_MspInit+0x3c0>)
 8001cb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001cbc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cdc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <HAL_UART_MspInit+0x3c4>)
 8001ce4:	f003 f95e 	bl	8004fa4 <HAL_GPIO_Init>
}
 8001ce8:	bf00      	nop
 8001cea:	37f8      	adds	r7, #248	@ 0xf8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40004800 	.word	0x40004800
 8001cf4:	58024400 	.word	0x58024400
 8001cf8:	58020c00 	.word	0x58020c00

08001cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cfc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001d38 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001d00:	f7ff fd1c 	bl	800173c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d04:	f7ff fc8a 	bl	800161c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d08:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d0a:	490d      	ldr	r1, [pc, #52]	@ (8001d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d20:	4c0a      	ldr	r4, [pc, #40]	@ (8001d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f00a fffd 	bl	800cd2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d32:	f7ff f81d 	bl	8000d70 <main>
  bx  lr
 8001d36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d38:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001d3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d40:	24000268 	.word	0x24000268
  ldr r2, =_sidata
 8001d44:	08034fec 	.word	0x08034fec
  ldr r2, =_sbss
 8001d48:	24000268 	.word	0x24000268
  ldr r4, =_ebss
 8001d4c:	24001ac0 	.word	0x24001ac0

08001d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	f000 f980 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001d60:	f004 fa7a 	bl	8006258 <HAL_RCC_GetSysClockFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_Init+0x68>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	0a1b      	lsrs	r3, r3, #8
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	4913      	ldr	r1, [pc, #76]	@ (8001dc0 <HAL_Init+0x6c>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <HAL_Init+0x68>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc0 <HAL_Init+0x6c>)
 8001d88:	5cd3      	ldrb	r3, [r2, r3]
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc4 <HAL_Init+0x70>)
 8001d96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d98:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc8 <HAL_Init+0x74>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f000 f814 	bl	8001dcc <HAL_InitTick>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e002      	b.n	8001db4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dae:	f7ff fac5 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	58024400 	.word	0x58024400
 8001dc0:	0800ecb8 	.word	0x0800ecb8
 8001dc4:	24000004 	.word	0x24000004
 8001dc8:	24000000 	.word	0x24000000

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001dd4:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_InitTick+0x60>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e021      	b.n	8001e24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001de0:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <HAL_InitTick+0x64>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_InitTick+0x60>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f965 	bl	80020c6 <HAL_SYSTICK_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00e      	b.n	8001e24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d80a      	bhi.n	8001e22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f000 f92f 	bl	8002076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e18:	4a06      	ldr	r2, [pc, #24]	@ (8001e34 <HAL_InitTick+0x68>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2400000c 	.word	0x2400000c
 8001e30:	24000000 	.word	0x24000000
 8001e34:	24000008 	.word	0x24000008

08001e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_IncTick+0x20>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_IncTick+0x24>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <HAL_IncTick+0x24>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2400000c 	.word	0x2400000c
 8001e5c:	24000a2c 	.word	0x24000a2c

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	@ (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	24000a2c 	.word	0x24000a2c

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff ffee 	bl	8001e60 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d005      	beq.n	8001e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_Delay+0x44>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9e:	bf00      	nop
 8001ea0:	f7ff ffde 	bl	8001e60 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d8f7      	bhi.n	8001ea0 <HAL_Delay+0x28>
  {
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2400000c 	.word	0x2400000c

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x40>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x40>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00
 8001f04:	05fa0000 	.word	0x05fa0000

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	@ (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	@ (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	@ (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	@ 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f7ff ff8e 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	@ (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff29 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff40 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff90 	bl	8001fb4 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5f 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff33 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa4 	bl	800201c <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020e4:	f3bf 8f5f 	dmb	sy
}
 80020e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <HAL_MPU_Disable+0x28>)
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	4a06      	ldr	r2, [pc, #24]	@ (8002108 <HAL_MPU_Disable+0x28>)
 80020f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020f6:	4b05      	ldr	r3, [pc, #20]	@ (800210c <HAL_MPU_Disable+0x2c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	605a      	str	r2, [r3, #4]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00
 800210c:	e000ed90 	.word	0xe000ed90

08002110 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002118:	4a0b      	ldr	r2, [pc, #44]	@ (8002148 <HAL_MPU_Enable+0x38>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002122:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <HAL_MPU_Enable+0x3c>)
 8002124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002126:	4a09      	ldr	r2, [pc, #36]	@ (800214c <HAL_MPU_Enable+0x3c>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800212e:	f3bf 8f4f 	dsb	sy
}
 8002132:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002134:	f3bf 8f6f 	isb	sy
}
 8002138:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed90 	.word	0xe000ed90
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	785a      	ldrb	r2, [r3, #1]
 800215c:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <HAL_MPU_ConfigRegion+0x7c>)
 800215e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002160:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_MPU_ConfigRegion+0x7c>)
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <HAL_MPU_ConfigRegion+0x7c>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800216c:	4a17      	ldr	r2, [pc, #92]	@ (80021cc <HAL_MPU_ConfigRegion+0x7c>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7b1b      	ldrb	r3, [r3, #12]
 8002178:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7adb      	ldrb	r3, [r3, #11]
 800217e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002180:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7a9b      	ldrb	r3, [r3, #10]
 8002186:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002188:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7b5b      	ldrb	r3, [r3, #13]
 800218e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002190:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	7b9b      	ldrb	r3, [r3, #14]
 8002196:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002198:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7bdb      	ldrb	r3, [r3, #15]
 800219e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7a5b      	ldrb	r3, [r3, #9]
 80021a6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7a1b      	ldrb	r3, [r3, #8]
 80021ae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021b0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	7812      	ldrb	r2, [r2, #0]
 80021b6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021b8:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021ba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021bc:	6113      	str	r3, [r2, #16]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed90 	.word	0xe000ed90

080021d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff fe42 	bl	8001e60 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e37d      	b.n	80028e4 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a66      	ldr	r2, [pc, #408]	@ (8002388 <HAL_DMA_Init+0x1b8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d04a      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a65      	ldr	r2, [pc, #404]	@ (800238c <HAL_DMA_Init+0x1bc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d045      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a63      	ldr	r2, [pc, #396]	@ (8002390 <HAL_DMA_Init+0x1c0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d040      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a62      	ldr	r2, [pc, #392]	@ (8002394 <HAL_DMA_Init+0x1c4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d03b      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a60      	ldr	r2, [pc, #384]	@ (8002398 <HAL_DMA_Init+0x1c8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d036      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a5f      	ldr	r2, [pc, #380]	@ (800239c <HAL_DMA_Init+0x1cc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d031      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a5d      	ldr	r2, [pc, #372]	@ (80023a0 <HAL_DMA_Init+0x1d0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d02c      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a5c      	ldr	r2, [pc, #368]	@ (80023a4 <HAL_DMA_Init+0x1d4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d027      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a5a      	ldr	r2, [pc, #360]	@ (80023a8 <HAL_DMA_Init+0x1d8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d022      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a59      	ldr	r2, [pc, #356]	@ (80023ac <HAL_DMA_Init+0x1dc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d01d      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a57      	ldr	r2, [pc, #348]	@ (80023b0 <HAL_DMA_Init+0x1e0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d018      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a56      	ldr	r2, [pc, #344]	@ (80023b4 <HAL_DMA_Init+0x1e4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d013      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a54      	ldr	r2, [pc, #336]	@ (80023b8 <HAL_DMA_Init+0x1e8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00e      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a53      	ldr	r2, [pc, #332]	@ (80023bc <HAL_DMA_Init+0x1ec>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d009      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a51      	ldr	r2, [pc, #324]	@ (80023c0 <HAL_DMA_Init+0x1f0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d004      	beq.n	8002288 <HAL_DMA_Init+0xb8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a50      	ldr	r2, [pc, #320]	@ (80023c4 <HAL_DMA_Init+0x1f4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_DMA_Init+0xbc>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_DMA_Init+0xbe>
 800228c:	2300      	movs	r3, #0
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 813c 	beq.w	800250c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a37      	ldr	r2, [pc, #220]	@ (8002388 <HAL_DMA_Init+0x1b8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d04a      	beq.n	8002344 <HAL_DMA_Init+0x174>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a36      	ldr	r2, [pc, #216]	@ (800238c <HAL_DMA_Init+0x1bc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d045      	beq.n	8002344 <HAL_DMA_Init+0x174>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a34      	ldr	r2, [pc, #208]	@ (8002390 <HAL_DMA_Init+0x1c0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d040      	beq.n	8002344 <HAL_DMA_Init+0x174>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a33      	ldr	r2, [pc, #204]	@ (8002394 <HAL_DMA_Init+0x1c4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d03b      	beq.n	8002344 <HAL_DMA_Init+0x174>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a31      	ldr	r2, [pc, #196]	@ (8002398 <HAL_DMA_Init+0x1c8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d036      	beq.n	8002344 <HAL_DMA_Init+0x174>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a30      	ldr	r2, [pc, #192]	@ (800239c <HAL_DMA_Init+0x1cc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d031      	beq.n	8002344 <HAL_DMA_Init+0x174>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2e      	ldr	r2, [pc, #184]	@ (80023a0 <HAL_DMA_Init+0x1d0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02c      	beq.n	8002344 <HAL_DMA_Init+0x174>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2d      	ldr	r2, [pc, #180]	@ (80023a4 <HAL_DMA_Init+0x1d4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d027      	beq.n	8002344 <HAL_DMA_Init+0x174>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a2b      	ldr	r2, [pc, #172]	@ (80023a8 <HAL_DMA_Init+0x1d8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d022      	beq.n	8002344 <HAL_DMA_Init+0x174>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2a      	ldr	r2, [pc, #168]	@ (80023ac <HAL_DMA_Init+0x1dc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d01d      	beq.n	8002344 <HAL_DMA_Init+0x174>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a28      	ldr	r2, [pc, #160]	@ (80023b0 <HAL_DMA_Init+0x1e0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d018      	beq.n	8002344 <HAL_DMA_Init+0x174>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a27      	ldr	r2, [pc, #156]	@ (80023b4 <HAL_DMA_Init+0x1e4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <HAL_DMA_Init+0x174>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a25      	ldr	r2, [pc, #148]	@ (80023b8 <HAL_DMA_Init+0x1e8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00e      	beq.n	8002344 <HAL_DMA_Init+0x174>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a24      	ldr	r2, [pc, #144]	@ (80023bc <HAL_DMA_Init+0x1ec>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_DMA_Init+0x174>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a22      	ldr	r2, [pc, #136]	@ (80023c0 <HAL_DMA_Init+0x1f0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Init+0x174>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a21      	ldr	r2, [pc, #132]	@ (80023c4 <HAL_DMA_Init+0x1f4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d108      	bne.n	8002356 <HAL_DMA_Init+0x186>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e007      	b.n	8002366 <HAL_DMA_Init+0x196>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002366:	e02f      	b.n	80023c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002368:	f7ff fd7a 	bl	8001e60 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b05      	cmp	r3, #5
 8002374:	d928      	bls.n	80023c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2203      	movs	r2, #3
 8002380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e2ad      	b.n	80028e4 <HAL_DMA_Init+0x714>
 8002388:	40020010 	.word	0x40020010
 800238c:	40020028 	.word	0x40020028
 8002390:	40020040 	.word	0x40020040
 8002394:	40020058 	.word	0x40020058
 8002398:	40020070 	.word	0x40020070
 800239c:	40020088 	.word	0x40020088
 80023a0:	400200a0 	.word	0x400200a0
 80023a4:	400200b8 	.word	0x400200b8
 80023a8:	40020410 	.word	0x40020410
 80023ac:	40020428 	.word	0x40020428
 80023b0:	40020440 	.word	0x40020440
 80023b4:	40020458 	.word	0x40020458
 80023b8:	40020470 	.word	0x40020470
 80023bc:	40020488 	.word	0x40020488
 80023c0:	400204a0 	.word	0x400204a0
 80023c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1c8      	bne.n	8002368 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4b73      	ldr	r3, [pc, #460]	@ (80025b0 <HAL_DMA_Init+0x3e0>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002406:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	2b04      	cmp	r3, #4
 800241a:	d107      	bne.n	800242c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	4313      	orrs	r3, r2
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b28      	cmp	r3, #40	@ 0x28
 8002432:	d903      	bls.n	800243c <HAL_DMA_Init+0x26c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b2e      	cmp	r3, #46	@ 0x2e
 800243a:	d91f      	bls.n	800247c <HAL_DMA_Init+0x2ac>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b3e      	cmp	r3, #62	@ 0x3e
 8002442:	d903      	bls.n	800244c <HAL_DMA_Init+0x27c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b42      	cmp	r3, #66	@ 0x42
 800244a:	d917      	bls.n	800247c <HAL_DMA_Init+0x2ac>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b46      	cmp	r3, #70	@ 0x46
 8002452:	d903      	bls.n	800245c <HAL_DMA_Init+0x28c>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b48      	cmp	r3, #72	@ 0x48
 800245a:	d90f      	bls.n	800247c <HAL_DMA_Init+0x2ac>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b4e      	cmp	r3, #78	@ 0x4e
 8002462:	d903      	bls.n	800246c <HAL_DMA_Init+0x29c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b52      	cmp	r3, #82	@ 0x52
 800246a:	d907      	bls.n	800247c <HAL_DMA_Init+0x2ac>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b73      	cmp	r3, #115	@ 0x73
 8002472:	d905      	bls.n	8002480 <HAL_DMA_Init+0x2b0>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b77      	cmp	r3, #119	@ 0x77
 800247a:	d801      	bhi.n	8002480 <HAL_DMA_Init+0x2b0>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <HAL_DMA_Init+0x2b2>
 8002480:	2300      	movs	r3, #0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800248c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f023 0307 	bic.w	r3, r3, #7
 80024a4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d117      	bne.n	80024e8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00e      	beq.n	80024e8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f002 fbe0 	bl	8004c90 <DMA_CheckFifoParam>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2240      	movs	r2, #64	@ 0x40
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e1fd      	b.n	80028e4 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f002 fb1b 	bl	8004b2c <DMA_CalcBaseAndBitshift>
 80024f6:	4603      	mov	r3, r0
 80024f8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	223f      	movs	r2, #63	@ 0x3f
 8002504:	409a      	lsls	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	e0fd      	b.n	8002708 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a28      	ldr	r2, [pc, #160]	@ (80025b4 <HAL_DMA_Init+0x3e4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d04a      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a27      	ldr	r2, [pc, #156]	@ (80025b8 <HAL_DMA_Init+0x3e8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d045      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a25      	ldr	r2, [pc, #148]	@ (80025bc <HAL_DMA_Init+0x3ec>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d040      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <HAL_DMA_Init+0x3f0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d03b      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a22      	ldr	r2, [pc, #136]	@ (80025c4 <HAL_DMA_Init+0x3f4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d036      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a21      	ldr	r2, [pc, #132]	@ (80025c8 <HAL_DMA_Init+0x3f8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d031      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1f      	ldr	r2, [pc, #124]	@ (80025cc <HAL_DMA_Init+0x3fc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d02c      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1e      	ldr	r2, [pc, #120]	@ (80025d0 <HAL_DMA_Init+0x400>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d027      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1c      	ldr	r2, [pc, #112]	@ (80025d4 <HAL_DMA_Init+0x404>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d022      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1b      	ldr	r2, [pc, #108]	@ (80025d8 <HAL_DMA_Init+0x408>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d01d      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	@ (80025dc <HAL_DMA_Init+0x40c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d018      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a18      	ldr	r2, [pc, #96]	@ (80025e0 <HAL_DMA_Init+0x410>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a16      	ldr	r2, [pc, #88]	@ (80025e4 <HAL_DMA_Init+0x414>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00e      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a15      	ldr	r2, [pc, #84]	@ (80025e8 <HAL_DMA_Init+0x418>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d009      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a13      	ldr	r2, [pc, #76]	@ (80025ec <HAL_DMA_Init+0x41c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_Init+0x3dc>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a12      	ldr	r2, [pc, #72]	@ (80025f0 <HAL_DMA_Init+0x420>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d123      	bne.n	80025f4 <HAL_DMA_Init+0x424>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e022      	b.n	80025f6 <HAL_DMA_Init+0x426>
 80025b0:	fe10803f 	.word	0xfe10803f
 80025b4:	48022c08 	.word	0x48022c08
 80025b8:	48022c1c 	.word	0x48022c1c
 80025bc:	48022c30 	.word	0x48022c30
 80025c0:	48022c44 	.word	0x48022c44
 80025c4:	48022c58 	.word	0x48022c58
 80025c8:	48022c6c 	.word	0x48022c6c
 80025cc:	48022c80 	.word	0x48022c80
 80025d0:	48022c94 	.word	0x48022c94
 80025d4:	58025408 	.word	0x58025408
 80025d8:	5802541c 	.word	0x5802541c
 80025dc:	58025430 	.word	0x58025430
 80025e0:	58025444 	.word	0x58025444
 80025e4:	58025458 	.word	0x58025458
 80025e8:	5802546c 	.word	0x5802546c
 80025ec:	58025480 	.word	0x58025480
 80025f0:	58025494 	.word	0x58025494
 80025f4:	2300      	movs	r3, #0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d07d      	beq.n	80026f6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a7f      	ldr	r2, [pc, #508]	@ (80027fc <HAL_DMA_Init+0x62c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d021      	beq.n	8002648 <HAL_DMA_Init+0x478>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a7d      	ldr	r2, [pc, #500]	@ (8002800 <HAL_DMA_Init+0x630>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01c      	beq.n	8002648 <HAL_DMA_Init+0x478>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a7c      	ldr	r2, [pc, #496]	@ (8002804 <HAL_DMA_Init+0x634>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d017      	beq.n	8002648 <HAL_DMA_Init+0x478>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a7a      	ldr	r2, [pc, #488]	@ (8002808 <HAL_DMA_Init+0x638>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d012      	beq.n	8002648 <HAL_DMA_Init+0x478>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a79      	ldr	r2, [pc, #484]	@ (800280c <HAL_DMA_Init+0x63c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00d      	beq.n	8002648 <HAL_DMA_Init+0x478>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a77      	ldr	r2, [pc, #476]	@ (8002810 <HAL_DMA_Init+0x640>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d008      	beq.n	8002648 <HAL_DMA_Init+0x478>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a76      	ldr	r2, [pc, #472]	@ (8002814 <HAL_DMA_Init+0x644>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d003      	beq.n	8002648 <HAL_DMA_Init+0x478>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a74      	ldr	r2, [pc, #464]	@ (8002818 <HAL_DMA_Init+0x648>)
 8002646:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	4b6e      	ldr	r3, [pc, #440]	@ (800281c <HAL_DMA_Init+0x64c>)
 8002664:	4013      	ands	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b40      	cmp	r3, #64	@ 0x40
 800266e:	d008      	beq.n	8002682 <HAL_DMA_Init+0x4b2>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b80      	cmp	r3, #128	@ 0x80
 8002676:	d102      	bne.n	800267e <HAL_DMA_Init+0x4ae>
 8002678:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800267c:	e002      	b.n	8002684 <HAL_DMA_Init+0x4b4>
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_DMA_Init+0x4b4>
 8002682:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68d2      	ldr	r2, [r2, #12]
 8002688:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800268a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002692:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800269a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026a2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026aa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026b2:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	4b55      	ldr	r3, [pc, #340]	@ (8002820 <HAL_DMA_Init+0x650>)
 80026ca:	4413      	add	r3, r2
 80026cc:	4a55      	ldr	r2, [pc, #340]	@ (8002824 <HAL_DMA_Init+0x654>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	009a      	lsls	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f002 fa26 	bl	8004b2c <DMA_CalcBaseAndBitshift>
 80026e0:	4603      	mov	r3, r0
 80026e2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2201      	movs	r2, #1
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	e008      	b.n	8002708 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2240      	movs	r2, #64	@ 0x40
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2203      	movs	r2, #3
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0ed      	b.n	80028e4 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a46      	ldr	r2, [pc, #280]	@ (8002828 <HAL_DMA_Init+0x658>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d072      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a45      	ldr	r2, [pc, #276]	@ (800282c <HAL_DMA_Init+0x65c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d06d      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a43      	ldr	r2, [pc, #268]	@ (8002830 <HAL_DMA_Init+0x660>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d068      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a42      	ldr	r2, [pc, #264]	@ (8002834 <HAL_DMA_Init+0x664>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d063      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a40      	ldr	r2, [pc, #256]	@ (8002838 <HAL_DMA_Init+0x668>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d05e      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a3f      	ldr	r2, [pc, #252]	@ (800283c <HAL_DMA_Init+0x66c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d059      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3d      	ldr	r2, [pc, #244]	@ (8002840 <HAL_DMA_Init+0x670>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d054      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a3c      	ldr	r2, [pc, #240]	@ (8002844 <HAL_DMA_Init+0x674>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d04f      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3a      	ldr	r2, [pc, #232]	@ (8002848 <HAL_DMA_Init+0x678>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04a      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a39      	ldr	r2, [pc, #228]	@ (800284c <HAL_DMA_Init+0x67c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d045      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a37      	ldr	r2, [pc, #220]	@ (8002850 <HAL_DMA_Init+0x680>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d040      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a36      	ldr	r2, [pc, #216]	@ (8002854 <HAL_DMA_Init+0x684>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d03b      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a34      	ldr	r2, [pc, #208]	@ (8002858 <HAL_DMA_Init+0x688>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d036      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a33      	ldr	r2, [pc, #204]	@ (800285c <HAL_DMA_Init+0x68c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d031      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a31      	ldr	r2, [pc, #196]	@ (8002860 <HAL_DMA_Init+0x690>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02c      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a30      	ldr	r2, [pc, #192]	@ (8002864 <HAL_DMA_Init+0x694>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d027      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a13      	ldr	r2, [pc, #76]	@ (80027fc <HAL_DMA_Init+0x62c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d022      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <HAL_DMA_Init+0x630>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d01d      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a10      	ldr	r2, [pc, #64]	@ (8002804 <HAL_DMA_Init+0x634>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d018      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002808 <HAL_DMA_Init+0x638>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0d      	ldr	r2, [pc, #52]	@ (800280c <HAL_DMA_Init+0x63c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a0c      	ldr	r2, [pc, #48]	@ (8002810 <HAL_DMA_Init+0x640>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <HAL_DMA_Init+0x644>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_DMA_Init+0x628>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a09      	ldr	r2, [pc, #36]	@ (8002818 <HAL_DMA_Init+0x648>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d137      	bne.n	8002868 <HAL_DMA_Init+0x698>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e036      	b.n	800286a <HAL_DMA_Init+0x69a>
 80027fc:	58025408 	.word	0x58025408
 8002800:	5802541c 	.word	0x5802541c
 8002804:	58025430 	.word	0x58025430
 8002808:	58025444 	.word	0x58025444
 800280c:	58025458 	.word	0x58025458
 8002810:	5802546c 	.word	0x5802546c
 8002814:	58025480 	.word	0x58025480
 8002818:	58025494 	.word	0x58025494
 800281c:	fffe000f 	.word	0xfffe000f
 8002820:	a7fdabf8 	.word	0xa7fdabf8
 8002824:	cccccccd 	.word	0xcccccccd
 8002828:	40020010 	.word	0x40020010
 800282c:	40020028 	.word	0x40020028
 8002830:	40020040 	.word	0x40020040
 8002834:	40020058 	.word	0x40020058
 8002838:	40020070 	.word	0x40020070
 800283c:	40020088 	.word	0x40020088
 8002840:	400200a0 	.word	0x400200a0
 8002844:	400200b8 	.word	0x400200b8
 8002848:	40020410 	.word	0x40020410
 800284c:	40020428 	.word	0x40020428
 8002850:	40020440 	.word	0x40020440
 8002854:	40020458 	.word	0x40020458
 8002858:	40020470 	.word	0x40020470
 800285c:	40020488 	.word	0x40020488
 8002860:	400204a0 	.word	0x400204a0
 8002864:	400204b8 	.word	0x400204b8
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d032      	beq.n	80028d4 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f002 fa8a 	bl	8004d88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b80      	cmp	r3, #128	@ 0x80
 800287a:	d102      	bne.n	8002882 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002896:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d010      	beq.n	80028c2 <HAL_DMA_Init+0x6f2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d80c      	bhi.n	80028c2 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f002 fb07 	bl	8004ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	e008      	b.n	80028d4 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e226      	b.n	8002d56 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_DMA_Start_IT+0x2a>
 8002912:	2302      	movs	r3, #2
 8002914:	e21f      	b.n	8002d56 <HAL_DMA_Start_IT+0x46a>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b01      	cmp	r3, #1
 8002928:	f040 820a 	bne.w	8002d40 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a68      	ldr	r2, [pc, #416]	@ (8002ae0 <HAL_DMA_Start_IT+0x1f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d04a      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a66      	ldr	r2, [pc, #408]	@ (8002ae4 <HAL_DMA_Start_IT+0x1f8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d045      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a65      	ldr	r2, [pc, #404]	@ (8002ae8 <HAL_DMA_Start_IT+0x1fc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d040      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a63      	ldr	r2, [pc, #396]	@ (8002aec <HAL_DMA_Start_IT+0x200>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d03b      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a62      	ldr	r2, [pc, #392]	@ (8002af0 <HAL_DMA_Start_IT+0x204>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d036      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a60      	ldr	r2, [pc, #384]	@ (8002af4 <HAL_DMA_Start_IT+0x208>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d031      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5f      	ldr	r2, [pc, #380]	@ (8002af8 <HAL_DMA_Start_IT+0x20c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d02c      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5d      	ldr	r2, [pc, #372]	@ (8002afc <HAL_DMA_Start_IT+0x210>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d027      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b00 <HAL_DMA_Start_IT+0x214>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5a      	ldr	r2, [pc, #360]	@ (8002b04 <HAL_DMA_Start_IT+0x218>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01d      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a59      	ldr	r2, [pc, #356]	@ (8002b08 <HAL_DMA_Start_IT+0x21c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a57      	ldr	r2, [pc, #348]	@ (8002b0c <HAL_DMA_Start_IT+0x220>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a56      	ldr	r2, [pc, #344]	@ (8002b10 <HAL_DMA_Start_IT+0x224>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a54      	ldr	r2, [pc, #336]	@ (8002b14 <HAL_DMA_Start_IT+0x228>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a53      	ldr	r2, [pc, #332]	@ (8002b18 <HAL_DMA_Start_IT+0x22c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_DMA_Start_IT+0xee>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a51      	ldr	r2, [pc, #324]	@ (8002b1c <HAL_DMA_Start_IT+0x230>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <HAL_DMA_Start_IT+0x100>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e007      	b.n	80029fc <HAL_DMA_Start_IT+0x110>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f001 feae 	bl	8004764 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a34      	ldr	r2, [pc, #208]	@ (8002ae0 <HAL_DMA_Start_IT+0x1f4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d04a      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a33      	ldr	r2, [pc, #204]	@ (8002ae4 <HAL_DMA_Start_IT+0x1f8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d045      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a31      	ldr	r2, [pc, #196]	@ (8002ae8 <HAL_DMA_Start_IT+0x1fc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d040      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a30      	ldr	r2, [pc, #192]	@ (8002aec <HAL_DMA_Start_IT+0x200>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d03b      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2e      	ldr	r2, [pc, #184]	@ (8002af0 <HAL_DMA_Start_IT+0x204>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d036      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002af4 <HAL_DMA_Start_IT+0x208>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d031      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2b      	ldr	r2, [pc, #172]	@ (8002af8 <HAL_DMA_Start_IT+0x20c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02c      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2a      	ldr	r2, [pc, #168]	@ (8002afc <HAL_DMA_Start_IT+0x210>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d027      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a28      	ldr	r2, [pc, #160]	@ (8002b00 <HAL_DMA_Start_IT+0x214>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a27      	ldr	r2, [pc, #156]	@ (8002b04 <HAL_DMA_Start_IT+0x218>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a25      	ldr	r2, [pc, #148]	@ (8002b08 <HAL_DMA_Start_IT+0x21c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a24      	ldr	r2, [pc, #144]	@ (8002b0c <HAL_DMA_Start_IT+0x220>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a22      	ldr	r2, [pc, #136]	@ (8002b10 <HAL_DMA_Start_IT+0x224>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a21      	ldr	r2, [pc, #132]	@ (8002b14 <HAL_DMA_Start_IT+0x228>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1f      	ldr	r2, [pc, #124]	@ (8002b18 <HAL_DMA_Start_IT+0x22c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x1bc>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b1c <HAL_DMA_Start_IT+0x230>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_DMA_Start_IT+0x1c0>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_DMA_Start_IT+0x1c2>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d036      	beq.n	8002b20 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 021e 	bic.w	r2, r3, #30
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0216 	orr.w	r2, r2, #22
 8002ac4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d03e      	beq.n	8002b4c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0208 	orr.w	r2, r2, #8
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e035      	b.n	8002b4c <HAL_DMA_Start_IT+0x260>
 8002ae0:	40020010 	.word	0x40020010
 8002ae4:	40020028 	.word	0x40020028
 8002ae8:	40020040 	.word	0x40020040
 8002aec:	40020058 	.word	0x40020058
 8002af0:	40020070 	.word	0x40020070
 8002af4:	40020088 	.word	0x40020088
 8002af8:	400200a0 	.word	0x400200a0
 8002afc:	400200b8 	.word	0x400200b8
 8002b00:	40020410 	.word	0x40020410
 8002b04:	40020428 	.word	0x40020428
 8002b08:	40020440 	.word	0x40020440
 8002b0c:	40020458 	.word	0x40020458
 8002b10:	40020470 	.word	0x40020470
 8002b14:	40020488 	.word	0x40020488
 8002b18:	400204a0 	.word	0x400204a0
 8002b1c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 020e 	bic.w	r2, r3, #14
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 020a 	orr.w	r2, r2, #10
 8002b32:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0204 	orr.w	r2, r2, #4
 8002b4a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a83      	ldr	r2, [pc, #524]	@ (8002d60 <HAL_DMA_Start_IT+0x474>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d072      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a82      	ldr	r2, [pc, #520]	@ (8002d64 <HAL_DMA_Start_IT+0x478>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d06d      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a80      	ldr	r2, [pc, #512]	@ (8002d68 <HAL_DMA_Start_IT+0x47c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d068      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7f      	ldr	r2, [pc, #508]	@ (8002d6c <HAL_DMA_Start_IT+0x480>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d063      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a7d      	ldr	r2, [pc, #500]	@ (8002d70 <HAL_DMA_Start_IT+0x484>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d05e      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7c      	ldr	r2, [pc, #496]	@ (8002d74 <HAL_DMA_Start_IT+0x488>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d059      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a7a      	ldr	r2, [pc, #488]	@ (8002d78 <HAL_DMA_Start_IT+0x48c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d054      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a79      	ldr	r2, [pc, #484]	@ (8002d7c <HAL_DMA_Start_IT+0x490>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d04f      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a77      	ldr	r2, [pc, #476]	@ (8002d80 <HAL_DMA_Start_IT+0x494>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d04a      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a76      	ldr	r2, [pc, #472]	@ (8002d84 <HAL_DMA_Start_IT+0x498>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d045      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a74      	ldr	r2, [pc, #464]	@ (8002d88 <HAL_DMA_Start_IT+0x49c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d040      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a73      	ldr	r2, [pc, #460]	@ (8002d8c <HAL_DMA_Start_IT+0x4a0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d03b      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a71      	ldr	r2, [pc, #452]	@ (8002d90 <HAL_DMA_Start_IT+0x4a4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d036      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a70      	ldr	r2, [pc, #448]	@ (8002d94 <HAL_DMA_Start_IT+0x4a8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d031      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6e      	ldr	r2, [pc, #440]	@ (8002d98 <HAL_DMA_Start_IT+0x4ac>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d02c      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6d      	ldr	r2, [pc, #436]	@ (8002d9c <HAL_DMA_Start_IT+0x4b0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d027      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a6b      	ldr	r2, [pc, #428]	@ (8002da0 <HAL_DMA_Start_IT+0x4b4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d022      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a6a      	ldr	r2, [pc, #424]	@ (8002da4 <HAL_DMA_Start_IT+0x4b8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d01d      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a68      	ldr	r2, [pc, #416]	@ (8002da8 <HAL_DMA_Start_IT+0x4bc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d018      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a67      	ldr	r2, [pc, #412]	@ (8002dac <HAL_DMA_Start_IT+0x4c0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a65      	ldr	r2, [pc, #404]	@ (8002db0 <HAL_DMA_Start_IT+0x4c4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00e      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a64      	ldr	r2, [pc, #400]	@ (8002db4 <HAL_DMA_Start_IT+0x4c8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d009      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a62      	ldr	r2, [pc, #392]	@ (8002db8 <HAL_DMA_Start_IT+0x4cc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_DMA_Start_IT+0x350>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a61      	ldr	r2, [pc, #388]	@ (8002dbc <HAL_DMA_Start_IT+0x4d0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_DMA_Start_IT+0x354>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_DMA_Start_IT+0x356>
 8002c40:	2300      	movs	r3, #0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01a      	beq.n	8002c7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a37      	ldr	r2, [pc, #220]	@ (8002d60 <HAL_DMA_Start_IT+0x474>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d04a      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a36      	ldr	r2, [pc, #216]	@ (8002d64 <HAL_DMA_Start_IT+0x478>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d045      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a34      	ldr	r2, [pc, #208]	@ (8002d68 <HAL_DMA_Start_IT+0x47c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d040      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a33      	ldr	r2, [pc, #204]	@ (8002d6c <HAL_DMA_Start_IT+0x480>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d03b      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a31      	ldr	r2, [pc, #196]	@ (8002d70 <HAL_DMA_Start_IT+0x484>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d036      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a30      	ldr	r2, [pc, #192]	@ (8002d74 <HAL_DMA_Start_IT+0x488>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d031      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8002d78 <HAL_DMA_Start_IT+0x48c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02c      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d7c <HAL_DMA_Start_IT+0x490>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d027      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d80 <HAL_DMA_Start_IT+0x494>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d022      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2a      	ldr	r2, [pc, #168]	@ (8002d84 <HAL_DMA_Start_IT+0x498>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d01d      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a28      	ldr	r2, [pc, #160]	@ (8002d88 <HAL_DMA_Start_IT+0x49c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d018      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a27      	ldr	r2, [pc, #156]	@ (8002d8c <HAL_DMA_Start_IT+0x4a0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a25      	ldr	r2, [pc, #148]	@ (8002d90 <HAL_DMA_Start_IT+0x4a4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a24      	ldr	r2, [pc, #144]	@ (8002d94 <HAL_DMA_Start_IT+0x4a8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a22      	ldr	r2, [pc, #136]	@ (8002d98 <HAL_DMA_Start_IT+0x4ac>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_DMA_Start_IT+0x430>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a21      	ldr	r2, [pc, #132]	@ (8002d9c <HAL_DMA_Start_IT+0x4b0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d108      	bne.n	8002d2e <HAL_DMA_Start_IT+0x442>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e012      	b.n	8002d54 <HAL_DMA_Start_IT+0x468>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e009      	b.n	8002d54 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40020010 	.word	0x40020010
 8002d64:	40020028 	.word	0x40020028
 8002d68:	40020040 	.word	0x40020040
 8002d6c:	40020058 	.word	0x40020058
 8002d70:	40020070 	.word	0x40020070
 8002d74:	40020088 	.word	0x40020088
 8002d78:	400200a0 	.word	0x400200a0
 8002d7c:	400200b8 	.word	0x400200b8
 8002d80:	40020410 	.word	0x40020410
 8002d84:	40020428 	.word	0x40020428
 8002d88:	40020440 	.word	0x40020440
 8002d8c:	40020458 	.word	0x40020458
 8002d90:	40020470 	.word	0x40020470
 8002d94:	40020488 	.word	0x40020488
 8002d98:	400204a0 	.word	0x400204a0
 8002d9c:	400204b8 	.word	0x400204b8
 8002da0:	58025408 	.word	0x58025408
 8002da4:	5802541c 	.word	0x5802541c
 8002da8:	58025430 	.word	0x58025430
 8002dac:	58025444 	.word	0x58025444
 8002db0:	58025458 	.word	0x58025458
 8002db4:	5802546c 	.word	0x5802546c
 8002db8:	58025480 	.word	0x58025480
 8002dbc:	58025494 	.word	0x58025494

08002dc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff f84a 	bl	8001e60 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e2dc      	b.n	8003392 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d008      	beq.n	8002df6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2280      	movs	r2, #128	@ 0x80
 8002de8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e2cd      	b.n	8003392 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a76      	ldr	r2, [pc, #472]	@ (8002fd4 <HAL_DMA_Abort+0x214>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d04a      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a74      	ldr	r2, [pc, #464]	@ (8002fd8 <HAL_DMA_Abort+0x218>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d045      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a73      	ldr	r2, [pc, #460]	@ (8002fdc <HAL_DMA_Abort+0x21c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d040      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a71      	ldr	r2, [pc, #452]	@ (8002fe0 <HAL_DMA_Abort+0x220>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d03b      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a70      	ldr	r2, [pc, #448]	@ (8002fe4 <HAL_DMA_Abort+0x224>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d036      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002fe8 <HAL_DMA_Abort+0x228>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d031      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a6d      	ldr	r2, [pc, #436]	@ (8002fec <HAL_DMA_Abort+0x22c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d02c      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6b      	ldr	r2, [pc, #428]	@ (8002ff0 <HAL_DMA_Abort+0x230>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d027      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff4 <HAL_DMA_Abort+0x234>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d022      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a68      	ldr	r2, [pc, #416]	@ (8002ff8 <HAL_DMA_Abort+0x238>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01d      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a67      	ldr	r2, [pc, #412]	@ (8002ffc <HAL_DMA_Abort+0x23c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d018      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a65      	ldr	r2, [pc, #404]	@ (8003000 <HAL_DMA_Abort+0x240>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a64      	ldr	r2, [pc, #400]	@ (8003004 <HAL_DMA_Abort+0x244>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a62      	ldr	r2, [pc, #392]	@ (8003008 <HAL_DMA_Abort+0x248>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a61      	ldr	r2, [pc, #388]	@ (800300c <HAL_DMA_Abort+0x24c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_DMA_Abort+0xd6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a5f      	ldr	r2, [pc, #380]	@ (8003010 <HAL_DMA_Abort+0x250>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_DMA_Abort+0xda>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_DMA_Abort+0xdc>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 021e 	bic.w	r2, r2, #30
 8002eae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ebe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	e00a      	b.n	8002ede <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 020e 	bic.w	r2, r2, #14
 8002ed6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd4 <HAL_DMA_Abort+0x214>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d072      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3a      	ldr	r2, [pc, #232]	@ (8002fd8 <HAL_DMA_Abort+0x218>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d06d      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a39      	ldr	r2, [pc, #228]	@ (8002fdc <HAL_DMA_Abort+0x21c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d068      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a37      	ldr	r2, [pc, #220]	@ (8002fe0 <HAL_DMA_Abort+0x220>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d063      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a36      	ldr	r2, [pc, #216]	@ (8002fe4 <HAL_DMA_Abort+0x224>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d05e      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a34      	ldr	r2, [pc, #208]	@ (8002fe8 <HAL_DMA_Abort+0x228>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d059      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a33      	ldr	r2, [pc, #204]	@ (8002fec <HAL_DMA_Abort+0x22c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d054      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a31      	ldr	r2, [pc, #196]	@ (8002ff0 <HAL_DMA_Abort+0x230>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d04f      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a30      	ldr	r2, [pc, #192]	@ (8002ff4 <HAL_DMA_Abort+0x234>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d04a      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff8 <HAL_DMA_Abort+0x238>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d045      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2d      	ldr	r2, [pc, #180]	@ (8002ffc <HAL_DMA_Abort+0x23c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d040      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2b      	ldr	r2, [pc, #172]	@ (8003000 <HAL_DMA_Abort+0x240>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d03b      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003004 <HAL_DMA_Abort+0x244>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d036      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a28      	ldr	r2, [pc, #160]	@ (8003008 <HAL_DMA_Abort+0x248>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d031      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a27      	ldr	r2, [pc, #156]	@ (800300c <HAL_DMA_Abort+0x24c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d02c      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a25      	ldr	r2, [pc, #148]	@ (8003010 <HAL_DMA_Abort+0x250>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d027      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a24      	ldr	r2, [pc, #144]	@ (8003014 <HAL_DMA_Abort+0x254>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a22      	ldr	r2, [pc, #136]	@ (8003018 <HAL_DMA_Abort+0x258>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a21      	ldr	r2, [pc, #132]	@ (800301c <HAL_DMA_Abort+0x25c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8003020 <HAL_DMA_Abort+0x260>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1e      	ldr	r2, [pc, #120]	@ (8003024 <HAL_DMA_Abort+0x264>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003028 <HAL_DMA_Abort+0x268>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800302c <HAL_DMA_Abort+0x26c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_Abort+0x20e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	@ (8003030 <HAL_DMA_Abort+0x270>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d132      	bne.n	8003034 <HAL_DMA_Abort+0x274>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e031      	b.n	8003036 <HAL_DMA_Abort+0x276>
 8002fd2:	bf00      	nop
 8002fd4:	40020010 	.word	0x40020010
 8002fd8:	40020028 	.word	0x40020028
 8002fdc:	40020040 	.word	0x40020040
 8002fe0:	40020058 	.word	0x40020058
 8002fe4:	40020070 	.word	0x40020070
 8002fe8:	40020088 	.word	0x40020088
 8002fec:	400200a0 	.word	0x400200a0
 8002ff0:	400200b8 	.word	0x400200b8
 8002ff4:	40020410 	.word	0x40020410
 8002ff8:	40020428 	.word	0x40020428
 8002ffc:	40020440 	.word	0x40020440
 8003000:	40020458 	.word	0x40020458
 8003004:	40020470 	.word	0x40020470
 8003008:	40020488 	.word	0x40020488
 800300c:	400204a0 	.word	0x400204a0
 8003010:	400204b8 	.word	0x400204b8
 8003014:	58025408 	.word	0x58025408
 8003018:	5802541c 	.word	0x5802541c
 800301c:	58025430 	.word	0x58025430
 8003020:	58025444 	.word	0x58025444
 8003024:	58025458 	.word	0x58025458
 8003028:	5802546c 	.word	0x5802546c
 800302c:	58025480 	.word	0x58025480
 8003030:	58025494 	.word	0x58025494
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003044:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003048:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6d      	ldr	r2, [pc, #436]	@ (8003204 <HAL_DMA_Abort+0x444>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d04a      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a6b      	ldr	r2, [pc, #428]	@ (8003208 <HAL_DMA_Abort+0x448>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d045      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a6a      	ldr	r2, [pc, #424]	@ (800320c <HAL_DMA_Abort+0x44c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d040      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a68      	ldr	r2, [pc, #416]	@ (8003210 <HAL_DMA_Abort+0x450>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d03b      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a67      	ldr	r2, [pc, #412]	@ (8003214 <HAL_DMA_Abort+0x454>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d036      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a65      	ldr	r2, [pc, #404]	@ (8003218 <HAL_DMA_Abort+0x458>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d031      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a64      	ldr	r2, [pc, #400]	@ (800321c <HAL_DMA_Abort+0x45c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d02c      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a62      	ldr	r2, [pc, #392]	@ (8003220 <HAL_DMA_Abort+0x460>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d027      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a61      	ldr	r2, [pc, #388]	@ (8003224 <HAL_DMA_Abort+0x464>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a5f      	ldr	r2, [pc, #380]	@ (8003228 <HAL_DMA_Abort+0x468>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01d      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a5e      	ldr	r2, [pc, #376]	@ (800322c <HAL_DMA_Abort+0x46c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d018      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003230 <HAL_DMA_Abort+0x470>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003234 <HAL_DMA_Abort+0x474>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a59      	ldr	r2, [pc, #356]	@ (8003238 <HAL_DMA_Abort+0x478>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a58      	ldr	r2, [pc, #352]	@ (800323c <HAL_DMA_Abort+0x47c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_DMA_Abort+0x32a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a56      	ldr	r2, [pc, #344]	@ (8003240 <HAL_DMA_Abort+0x480>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d108      	bne.n	80030fc <HAL_DMA_Abort+0x33c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	e007      	b.n	800310c <HAL_DMA_Abort+0x34c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800310c:	e013      	b.n	8003136 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800310e:	f7fe fea7 	bl	8001e60 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b05      	cmp	r3, #5
 800311a:	d90c      	bls.n	8003136 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2203      	movs	r2, #3
 8003126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e12d      	b.n	8003392 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e5      	bne.n	800310e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2f      	ldr	r2, [pc, #188]	@ (8003204 <HAL_DMA_Abort+0x444>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d04a      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2d      	ldr	r2, [pc, #180]	@ (8003208 <HAL_DMA_Abort+0x448>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d045      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2c      	ldr	r2, [pc, #176]	@ (800320c <HAL_DMA_Abort+0x44c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d040      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2a      	ldr	r2, [pc, #168]	@ (8003210 <HAL_DMA_Abort+0x450>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d03b      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a29      	ldr	r2, [pc, #164]	@ (8003214 <HAL_DMA_Abort+0x454>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d036      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a27      	ldr	r2, [pc, #156]	@ (8003218 <HAL_DMA_Abort+0x458>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d031      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a26      	ldr	r2, [pc, #152]	@ (800321c <HAL_DMA_Abort+0x45c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d02c      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a24      	ldr	r2, [pc, #144]	@ (8003220 <HAL_DMA_Abort+0x460>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d027      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a23      	ldr	r2, [pc, #140]	@ (8003224 <HAL_DMA_Abort+0x464>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a21      	ldr	r2, [pc, #132]	@ (8003228 <HAL_DMA_Abort+0x468>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01d      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a20      	ldr	r2, [pc, #128]	@ (800322c <HAL_DMA_Abort+0x46c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d018      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003230 <HAL_DMA_Abort+0x470>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <HAL_DMA_Abort+0x474>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00e      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003238 <HAL_DMA_Abort+0x478>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1a      	ldr	r2, [pc, #104]	@ (800323c <HAL_DMA_Abort+0x47c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_DMA_Abort+0x422>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a18      	ldr	r2, [pc, #96]	@ (8003240 <HAL_DMA_Abort+0x480>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_DMA_Abort+0x426>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_DMA_Abort+0x428>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d02b      	beq.n	8003244 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	223f      	movs	r2, #63	@ 0x3f
 80031fc:	409a      	lsls	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	e02a      	b.n	800325a <HAL_DMA_Abort+0x49a>
 8003204:	40020010 	.word	0x40020010
 8003208:	40020028 	.word	0x40020028
 800320c:	40020040 	.word	0x40020040
 8003210:	40020058 	.word	0x40020058
 8003214:	40020070 	.word	0x40020070
 8003218:	40020088 	.word	0x40020088
 800321c:	400200a0 	.word	0x400200a0
 8003220:	400200b8 	.word	0x400200b8
 8003224:	40020410 	.word	0x40020410
 8003228:	40020428 	.word	0x40020428
 800322c:	40020440 	.word	0x40020440
 8003230:	40020458 	.word	0x40020458
 8003234:	40020470 	.word	0x40020470
 8003238:	40020488 	.word	0x40020488
 800323c:	400204a0 	.word	0x400204a0
 8003240:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003248:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2201      	movs	r2, #1
 8003254:	409a      	lsls	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a4f      	ldr	r2, [pc, #316]	@ (800339c <HAL_DMA_Abort+0x5dc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d072      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a4d      	ldr	r2, [pc, #308]	@ (80033a0 <HAL_DMA_Abort+0x5e0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d06d      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a4c      	ldr	r2, [pc, #304]	@ (80033a4 <HAL_DMA_Abort+0x5e4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d068      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a4a      	ldr	r2, [pc, #296]	@ (80033a8 <HAL_DMA_Abort+0x5e8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d063      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a49      	ldr	r2, [pc, #292]	@ (80033ac <HAL_DMA_Abort+0x5ec>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d05e      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a47      	ldr	r2, [pc, #284]	@ (80033b0 <HAL_DMA_Abort+0x5f0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d059      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a46      	ldr	r2, [pc, #280]	@ (80033b4 <HAL_DMA_Abort+0x5f4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d054      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a44      	ldr	r2, [pc, #272]	@ (80033b8 <HAL_DMA_Abort+0x5f8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d04f      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a43      	ldr	r2, [pc, #268]	@ (80033bc <HAL_DMA_Abort+0x5fc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d04a      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a41      	ldr	r2, [pc, #260]	@ (80033c0 <HAL_DMA_Abort+0x600>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d045      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a40      	ldr	r2, [pc, #256]	@ (80033c4 <HAL_DMA_Abort+0x604>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d040      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3e      	ldr	r2, [pc, #248]	@ (80033c8 <HAL_DMA_Abort+0x608>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d03b      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3d      	ldr	r2, [pc, #244]	@ (80033cc <HAL_DMA_Abort+0x60c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d036      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a3b      	ldr	r2, [pc, #236]	@ (80033d0 <HAL_DMA_Abort+0x610>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d031      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a3a      	ldr	r2, [pc, #232]	@ (80033d4 <HAL_DMA_Abort+0x614>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d02c      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a38      	ldr	r2, [pc, #224]	@ (80033d8 <HAL_DMA_Abort+0x618>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d027      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a37      	ldr	r2, [pc, #220]	@ (80033dc <HAL_DMA_Abort+0x61c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d022      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a35      	ldr	r2, [pc, #212]	@ (80033e0 <HAL_DMA_Abort+0x620>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01d      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a34      	ldr	r2, [pc, #208]	@ (80033e4 <HAL_DMA_Abort+0x624>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d018      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a32      	ldr	r2, [pc, #200]	@ (80033e8 <HAL_DMA_Abort+0x628>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a31      	ldr	r2, [pc, #196]	@ (80033ec <HAL_DMA_Abort+0x62c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00e      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2f      	ldr	r2, [pc, #188]	@ (80033f0 <HAL_DMA_Abort+0x630>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d009      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a2e      	ldr	r2, [pc, #184]	@ (80033f4 <HAL_DMA_Abort+0x634>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d004      	beq.n	800334a <HAL_DMA_Abort+0x58a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2c      	ldr	r2, [pc, #176]	@ (80033f8 <HAL_DMA_Abort+0x638>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_DMA_Abort+0x58e>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_DMA_Abort+0x590>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d015      	beq.n	8003380 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800335c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003370:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003374:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800337e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40020010 	.word	0x40020010
 80033a0:	40020028 	.word	0x40020028
 80033a4:	40020040 	.word	0x40020040
 80033a8:	40020058 	.word	0x40020058
 80033ac:	40020070 	.word	0x40020070
 80033b0:	40020088 	.word	0x40020088
 80033b4:	400200a0 	.word	0x400200a0
 80033b8:	400200b8 	.word	0x400200b8
 80033bc:	40020410 	.word	0x40020410
 80033c0:	40020428 	.word	0x40020428
 80033c4:	40020440 	.word	0x40020440
 80033c8:	40020458 	.word	0x40020458
 80033cc:	40020470 	.word	0x40020470
 80033d0:	40020488 	.word	0x40020488
 80033d4:	400204a0 	.word	0x400204a0
 80033d8:	400204b8 	.word	0x400204b8
 80033dc:	58025408 	.word	0x58025408
 80033e0:	5802541c 	.word	0x5802541c
 80033e4:	58025430 	.word	0x58025430
 80033e8:	58025444 	.word	0x58025444
 80033ec:	58025458 	.word	0x58025458
 80033f0:	5802546c 	.word	0x5802546c
 80033f4:	58025480 	.word	0x58025480
 80033f8:	58025494 	.word	0x58025494

080033fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e237      	b.n	800387e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d004      	beq.n	8003424 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2280      	movs	r2, #128	@ 0x80
 800341e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e22c      	b.n	800387e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5c      	ldr	r2, [pc, #368]	@ (800359c <HAL_DMA_Abort_IT+0x1a0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d04a      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a5b      	ldr	r2, [pc, #364]	@ (80035a0 <HAL_DMA_Abort_IT+0x1a4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d045      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a59      	ldr	r2, [pc, #356]	@ (80035a4 <HAL_DMA_Abort_IT+0x1a8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d040      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a58      	ldr	r2, [pc, #352]	@ (80035a8 <HAL_DMA_Abort_IT+0x1ac>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d03b      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a56      	ldr	r2, [pc, #344]	@ (80035ac <HAL_DMA_Abort_IT+0x1b0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d036      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a55      	ldr	r2, [pc, #340]	@ (80035b0 <HAL_DMA_Abort_IT+0x1b4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d031      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a53      	ldr	r2, [pc, #332]	@ (80035b4 <HAL_DMA_Abort_IT+0x1b8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d02c      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a52      	ldr	r2, [pc, #328]	@ (80035b8 <HAL_DMA_Abort_IT+0x1bc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d027      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a50      	ldr	r2, [pc, #320]	@ (80035bc <HAL_DMA_Abort_IT+0x1c0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d022      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a4f      	ldr	r2, [pc, #316]	@ (80035c0 <HAL_DMA_Abort_IT+0x1c4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d01d      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a4d      	ldr	r2, [pc, #308]	@ (80035c4 <HAL_DMA_Abort_IT+0x1c8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d018      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a4c      	ldr	r2, [pc, #304]	@ (80035c8 <HAL_DMA_Abort_IT+0x1cc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d013      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a4a      	ldr	r2, [pc, #296]	@ (80035cc <HAL_DMA_Abort_IT+0x1d0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00e      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a49      	ldr	r2, [pc, #292]	@ (80035d0 <HAL_DMA_Abort_IT+0x1d4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a47      	ldr	r2, [pc, #284]	@ (80035d4 <HAL_DMA_Abort_IT+0x1d8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_DMA_Abort_IT+0xc8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a46      	ldr	r2, [pc, #280]	@ (80035d8 <HAL_DMA_Abort_IT+0x1dc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_DMA_Abort_IT+0xcc>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_DMA_Abort_IT+0xce>
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8086 	beq.w	80035dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2204      	movs	r2, #4
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2f      	ldr	r2, [pc, #188]	@ (800359c <HAL_DMA_Abort_IT+0x1a0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d04a      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2e      	ldr	r2, [pc, #184]	@ (80035a0 <HAL_DMA_Abort_IT+0x1a4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d045      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2c      	ldr	r2, [pc, #176]	@ (80035a4 <HAL_DMA_Abort_IT+0x1a8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d040      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a2b      	ldr	r2, [pc, #172]	@ (80035a8 <HAL_DMA_Abort_IT+0x1ac>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d03b      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a29      	ldr	r2, [pc, #164]	@ (80035ac <HAL_DMA_Abort_IT+0x1b0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d036      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a28      	ldr	r2, [pc, #160]	@ (80035b0 <HAL_DMA_Abort_IT+0x1b4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d031      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a26      	ldr	r2, [pc, #152]	@ (80035b4 <HAL_DMA_Abort_IT+0x1b8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d02c      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a25      	ldr	r2, [pc, #148]	@ (80035b8 <HAL_DMA_Abort_IT+0x1bc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d027      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a23      	ldr	r2, [pc, #140]	@ (80035bc <HAL_DMA_Abort_IT+0x1c0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d022      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a22      	ldr	r2, [pc, #136]	@ (80035c0 <HAL_DMA_Abort_IT+0x1c4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d01d      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a20      	ldr	r2, [pc, #128]	@ (80035c4 <HAL_DMA_Abort_IT+0x1c8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d018      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1f      	ldr	r2, [pc, #124]	@ (80035c8 <HAL_DMA_Abort_IT+0x1cc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d013      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1d      	ldr	r2, [pc, #116]	@ (80035cc <HAL_DMA_Abort_IT+0x1d0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00e      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <HAL_DMA_Abort_IT+0x1d4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d009      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1a      	ldr	r2, [pc, #104]	@ (80035d4 <HAL_DMA_Abort_IT+0x1d8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_DMA_Abort_IT+0x17c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <HAL_DMA_Abort_IT+0x1dc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d108      	bne.n	800358a <HAL_DMA_Abort_IT+0x18e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e178      	b.n	800387c <HAL_DMA_Abort_IT+0x480>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e16f      	b.n	800387c <HAL_DMA_Abort_IT+0x480>
 800359c:	40020010 	.word	0x40020010
 80035a0:	40020028 	.word	0x40020028
 80035a4:	40020040 	.word	0x40020040
 80035a8:	40020058 	.word	0x40020058
 80035ac:	40020070 	.word	0x40020070
 80035b0:	40020088 	.word	0x40020088
 80035b4:	400200a0 	.word	0x400200a0
 80035b8:	400200b8 	.word	0x400200b8
 80035bc:	40020410 	.word	0x40020410
 80035c0:	40020428 	.word	0x40020428
 80035c4:	40020440 	.word	0x40020440
 80035c8:	40020458 	.word	0x40020458
 80035cc:	40020470 	.word	0x40020470
 80035d0:	40020488 	.word	0x40020488
 80035d4:	400204a0 	.word	0x400204a0
 80035d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 020e 	bic.w	r2, r2, #14
 80035ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6c      	ldr	r2, [pc, #432]	@ (80037a4 <HAL_DMA_Abort_IT+0x3a8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d04a      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a6b      	ldr	r2, [pc, #428]	@ (80037a8 <HAL_DMA_Abort_IT+0x3ac>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d045      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a69      	ldr	r2, [pc, #420]	@ (80037ac <HAL_DMA_Abort_IT+0x3b0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d040      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a68      	ldr	r2, [pc, #416]	@ (80037b0 <HAL_DMA_Abort_IT+0x3b4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d03b      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a66      	ldr	r2, [pc, #408]	@ (80037b4 <HAL_DMA_Abort_IT+0x3b8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d036      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a65      	ldr	r2, [pc, #404]	@ (80037b8 <HAL_DMA_Abort_IT+0x3bc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d031      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a63      	ldr	r2, [pc, #396]	@ (80037bc <HAL_DMA_Abort_IT+0x3c0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d02c      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a62      	ldr	r2, [pc, #392]	@ (80037c0 <HAL_DMA_Abort_IT+0x3c4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d027      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a60      	ldr	r2, [pc, #384]	@ (80037c4 <HAL_DMA_Abort_IT+0x3c8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5f      	ldr	r2, [pc, #380]	@ (80037c8 <HAL_DMA_Abort_IT+0x3cc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d01d      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a5d      	ldr	r2, [pc, #372]	@ (80037cc <HAL_DMA_Abort_IT+0x3d0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a5c      	ldr	r2, [pc, #368]	@ (80037d0 <HAL_DMA_Abort_IT+0x3d4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a5a      	ldr	r2, [pc, #360]	@ (80037d4 <HAL_DMA_Abort_IT+0x3d8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a59      	ldr	r2, [pc, #356]	@ (80037d8 <HAL_DMA_Abort_IT+0x3dc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a57      	ldr	r2, [pc, #348]	@ (80037dc <HAL_DMA_Abort_IT+0x3e0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_DMA_Abort_IT+0x290>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <HAL_DMA_Abort_IT+0x3e4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d108      	bne.n	800369e <HAL_DMA_Abort_IT+0x2a2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e007      	b.n	80036ae <HAL_DMA_Abort_IT+0x2b2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a3c      	ldr	r2, [pc, #240]	@ (80037a4 <HAL_DMA_Abort_IT+0x3a8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d072      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3a      	ldr	r2, [pc, #232]	@ (80037a8 <HAL_DMA_Abort_IT+0x3ac>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d06d      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a39      	ldr	r2, [pc, #228]	@ (80037ac <HAL_DMA_Abort_IT+0x3b0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d068      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a37      	ldr	r2, [pc, #220]	@ (80037b0 <HAL_DMA_Abort_IT+0x3b4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d063      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a36      	ldr	r2, [pc, #216]	@ (80037b4 <HAL_DMA_Abort_IT+0x3b8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d05e      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a34      	ldr	r2, [pc, #208]	@ (80037b8 <HAL_DMA_Abort_IT+0x3bc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d059      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a33      	ldr	r2, [pc, #204]	@ (80037bc <HAL_DMA_Abort_IT+0x3c0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d054      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a31      	ldr	r2, [pc, #196]	@ (80037c0 <HAL_DMA_Abort_IT+0x3c4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d04f      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a30      	ldr	r2, [pc, #192]	@ (80037c4 <HAL_DMA_Abort_IT+0x3c8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d04a      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2e      	ldr	r2, [pc, #184]	@ (80037c8 <HAL_DMA_Abort_IT+0x3cc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d045      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2d      	ldr	r2, [pc, #180]	@ (80037cc <HAL_DMA_Abort_IT+0x3d0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d040      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a2b      	ldr	r2, [pc, #172]	@ (80037d0 <HAL_DMA_Abort_IT+0x3d4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d03b      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2a      	ldr	r2, [pc, #168]	@ (80037d4 <HAL_DMA_Abort_IT+0x3d8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d036      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a28      	ldr	r2, [pc, #160]	@ (80037d8 <HAL_DMA_Abort_IT+0x3dc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d031      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a27      	ldr	r2, [pc, #156]	@ (80037dc <HAL_DMA_Abort_IT+0x3e0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d02c      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a25      	ldr	r2, [pc, #148]	@ (80037e0 <HAL_DMA_Abort_IT+0x3e4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d027      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a24      	ldr	r2, [pc, #144]	@ (80037e4 <HAL_DMA_Abort_IT+0x3e8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d022      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a22      	ldr	r2, [pc, #136]	@ (80037e8 <HAL_DMA_Abort_IT+0x3ec>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01d      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a21      	ldr	r2, [pc, #132]	@ (80037ec <HAL_DMA_Abort_IT+0x3f0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d018      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1f      	ldr	r2, [pc, #124]	@ (80037f0 <HAL_DMA_Abort_IT+0x3f4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1e      	ldr	r2, [pc, #120]	@ (80037f4 <HAL_DMA_Abort_IT+0x3f8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1c      	ldr	r2, [pc, #112]	@ (80037f8 <HAL_DMA_Abort_IT+0x3fc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d009      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1b      	ldr	r2, [pc, #108]	@ (80037fc <HAL_DMA_Abort_IT+0x400>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_DMA_Abort_IT+0x3a2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a19      	ldr	r2, [pc, #100]	@ (8003800 <HAL_DMA_Abort_IT+0x404>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d132      	bne.n	8003804 <HAL_DMA_Abort_IT+0x408>
 800379e:	2301      	movs	r3, #1
 80037a0:	e031      	b.n	8003806 <HAL_DMA_Abort_IT+0x40a>
 80037a2:	bf00      	nop
 80037a4:	40020010 	.word	0x40020010
 80037a8:	40020028 	.word	0x40020028
 80037ac:	40020040 	.word	0x40020040
 80037b0:	40020058 	.word	0x40020058
 80037b4:	40020070 	.word	0x40020070
 80037b8:	40020088 	.word	0x40020088
 80037bc:	400200a0 	.word	0x400200a0
 80037c0:	400200b8 	.word	0x400200b8
 80037c4:	40020410 	.word	0x40020410
 80037c8:	40020428 	.word	0x40020428
 80037cc:	40020440 	.word	0x40020440
 80037d0:	40020458 	.word	0x40020458
 80037d4:	40020470 	.word	0x40020470
 80037d8:	40020488 	.word	0x40020488
 80037dc:	400204a0 	.word	0x400204a0
 80037e0:	400204b8 	.word	0x400204b8
 80037e4:	58025408 	.word	0x58025408
 80037e8:	5802541c 	.word	0x5802541c
 80037ec:	58025430 	.word	0x58025430
 80037f0:	58025444 	.word	0x58025444
 80037f4:	58025458 	.word	0x58025458
 80037f8:	5802546c 	.word	0x5802546c
 80037fc:	58025480 	.word	0x58025480
 8003800:	58025494 	.word	0x58025494
 8003804:	2300      	movs	r3, #0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d028      	beq.n	800385c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003818:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003838:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00c      	beq.n	800385c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800384c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003850:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800385a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop

08003888 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	@ 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003894:	4b67      	ldr	r3, [pc, #412]	@ (8003a34 <HAL_DMA_IRQHandler+0x1ac>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a67      	ldr	r2, [pc, #412]	@ (8003a38 <HAL_DMA_IRQHandler+0x1b0>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0a9b      	lsrs	r3, r3, #10
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a5f      	ldr	r2, [pc, #380]	@ (8003a3c <HAL_DMA_IRQHandler+0x1b4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d04a      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a40 <HAL_DMA_IRQHandler+0x1b8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d045      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003a44 <HAL_DMA_IRQHandler+0x1bc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d040      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003a48 <HAL_DMA_IRQHandler+0x1c0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d03b      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a59      	ldr	r2, [pc, #356]	@ (8003a4c <HAL_DMA_IRQHandler+0x1c4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d036      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a57      	ldr	r2, [pc, #348]	@ (8003a50 <HAL_DMA_IRQHandler+0x1c8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d031      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a56      	ldr	r2, [pc, #344]	@ (8003a54 <HAL_DMA_IRQHandler+0x1cc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d02c      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a54      	ldr	r2, [pc, #336]	@ (8003a58 <HAL_DMA_IRQHandler+0x1d0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d027      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a53      	ldr	r2, [pc, #332]	@ (8003a5c <HAL_DMA_IRQHandler+0x1d4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d022      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a51      	ldr	r2, [pc, #324]	@ (8003a60 <HAL_DMA_IRQHandler+0x1d8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01d      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a50      	ldr	r2, [pc, #320]	@ (8003a64 <HAL_DMA_IRQHandler+0x1dc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d018      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a4e      	ldr	r2, [pc, #312]	@ (8003a68 <HAL_DMA_IRQHandler+0x1e0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a4d      	ldr	r2, [pc, #308]	@ (8003a6c <HAL_DMA_IRQHandler+0x1e4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a4b      	ldr	r2, [pc, #300]	@ (8003a70 <HAL_DMA_IRQHandler+0x1e8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a4a      	ldr	r2, [pc, #296]	@ (8003a74 <HAL_DMA_IRQHandler+0x1ec>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d004      	beq.n	800395a <HAL_DMA_IRQHandler+0xd2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a48      	ldr	r2, [pc, #288]	@ (8003a78 <HAL_DMA_IRQHandler+0x1f0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_DMA_IRQHandler+0xd6>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_DMA_IRQHandler+0xd8>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 842b 	beq.w	80041bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2208      	movs	r2, #8
 8003970:	409a      	lsls	r2, r3
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80a2 	beq.w	8003ac0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2e      	ldr	r2, [pc, #184]	@ (8003a3c <HAL_DMA_IRQHandler+0x1b4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d04a      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2d      	ldr	r2, [pc, #180]	@ (8003a40 <HAL_DMA_IRQHandler+0x1b8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d045      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2b      	ldr	r2, [pc, #172]	@ (8003a44 <HAL_DMA_IRQHandler+0x1bc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d040      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a48 <HAL_DMA_IRQHandler+0x1c0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d03b      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a28      	ldr	r2, [pc, #160]	@ (8003a4c <HAL_DMA_IRQHandler+0x1c4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d036      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a27      	ldr	r2, [pc, #156]	@ (8003a50 <HAL_DMA_IRQHandler+0x1c8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d031      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a25      	ldr	r2, [pc, #148]	@ (8003a54 <HAL_DMA_IRQHandler+0x1cc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02c      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a24      	ldr	r2, [pc, #144]	@ (8003a58 <HAL_DMA_IRQHandler+0x1d0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d027      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a22      	ldr	r2, [pc, #136]	@ (8003a5c <HAL_DMA_IRQHandler+0x1d4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a21      	ldr	r2, [pc, #132]	@ (8003a60 <HAL_DMA_IRQHandler+0x1d8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <HAL_DMA_IRQHandler+0x1dc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <HAL_DMA_IRQHandler+0x1e0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a6c <HAL_DMA_IRQHandler+0x1e4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	@ (8003a70 <HAL_DMA_IRQHandler+0x1e8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <HAL_DMA_IRQHandler+0x1ec>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x194>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a18      	ldr	r2, [pc, #96]	@ (8003a78 <HAL_DMA_IRQHandler+0x1f0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d12f      	bne.n	8003a7c <HAL_DMA_IRQHandler+0x1f4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bf14      	ite	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	2300      	moveq	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	e02e      	b.n	8003a90 <HAL_DMA_IRQHandler+0x208>
 8003a32:	bf00      	nop
 8003a34:	24000000 	.word	0x24000000
 8003a38:	1b4e81b5 	.word	0x1b4e81b5
 8003a3c:	40020010 	.word	0x40020010
 8003a40:	40020028 	.word	0x40020028
 8003a44:	40020040 	.word	0x40020040
 8003a48:	40020058 	.word	0x40020058
 8003a4c:	40020070 	.word	0x40020070
 8003a50:	40020088 	.word	0x40020088
 8003a54:	400200a0 	.word	0x400200a0
 8003a58:	400200b8 	.word	0x400200b8
 8003a5c:	40020410 	.word	0x40020410
 8003a60:	40020428 	.word	0x40020428
 8003a64:	40020440 	.word	0x40020440
 8003a68:	40020458 	.word	0x40020458
 8003a6c:	40020470 	.word	0x40020470
 8003a70:	40020488 	.word	0x40020488
 8003a74:	400204a0 	.word	0x400204a0
 8003a78:	400204b8 	.word	0x400204b8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf14      	ite	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	2300      	moveq	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d015      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0204 	bic.w	r2, r2, #4
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2208      	movs	r2, #8
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d06e      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a69      	ldr	r2, [pc, #420]	@ (8003c80 <HAL_DMA_IRQHandler+0x3f8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d04a      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a67      	ldr	r2, [pc, #412]	@ (8003c84 <HAL_DMA_IRQHandler+0x3fc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d045      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a66      	ldr	r2, [pc, #408]	@ (8003c88 <HAL_DMA_IRQHandler+0x400>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d040      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a64      	ldr	r2, [pc, #400]	@ (8003c8c <HAL_DMA_IRQHandler+0x404>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d03b      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a63      	ldr	r2, [pc, #396]	@ (8003c90 <HAL_DMA_IRQHandler+0x408>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d036      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a61      	ldr	r2, [pc, #388]	@ (8003c94 <HAL_DMA_IRQHandler+0x40c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d031      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a60      	ldr	r2, [pc, #384]	@ (8003c98 <HAL_DMA_IRQHandler+0x410>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d02c      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5e      	ldr	r2, [pc, #376]	@ (8003c9c <HAL_DMA_IRQHandler+0x414>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d027      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a5d      	ldr	r2, [pc, #372]	@ (8003ca0 <HAL_DMA_IRQHandler+0x418>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d022      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a5b      	ldr	r2, [pc, #364]	@ (8003ca4 <HAL_DMA_IRQHandler+0x41c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01d      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ca8 <HAL_DMA_IRQHandler+0x420>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d018      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a58      	ldr	r2, [pc, #352]	@ (8003cac <HAL_DMA_IRQHandler+0x424>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a57      	ldr	r2, [pc, #348]	@ (8003cb0 <HAL_DMA_IRQHandler+0x428>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a55      	ldr	r2, [pc, #340]	@ (8003cb4 <HAL_DMA_IRQHandler+0x42c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a54      	ldr	r2, [pc, #336]	@ (8003cb8 <HAL_DMA_IRQHandler+0x430>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x2ee>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a52      	ldr	r2, [pc, #328]	@ (8003cbc <HAL_DMA_IRQHandler+0x434>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10a      	bne.n	8003b8c <HAL_DMA_IRQHandler+0x304>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf14      	ite	ne
 8003b84:	2301      	movne	r3, #1
 8003b86:	2300      	moveq	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e003      	b.n	8003b94 <HAL_DMA_IRQHandler+0x30c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bac:	f043 0202 	orr.w	r2, r3, #2
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 808f 	beq.w	8003ce8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2c      	ldr	r2, [pc, #176]	@ (8003c80 <HAL_DMA_IRQHandler+0x3f8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d04a      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c84 <HAL_DMA_IRQHandler+0x3fc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d045      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a29      	ldr	r2, [pc, #164]	@ (8003c88 <HAL_DMA_IRQHandler+0x400>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d040      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a27      	ldr	r2, [pc, #156]	@ (8003c8c <HAL_DMA_IRQHandler+0x404>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d03b      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a26      	ldr	r2, [pc, #152]	@ (8003c90 <HAL_DMA_IRQHandler+0x408>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d036      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a24      	ldr	r2, [pc, #144]	@ (8003c94 <HAL_DMA_IRQHandler+0x40c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d031      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a23      	ldr	r2, [pc, #140]	@ (8003c98 <HAL_DMA_IRQHandler+0x410>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d02c      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a21      	ldr	r2, [pc, #132]	@ (8003c9c <HAL_DMA_IRQHandler+0x414>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d027      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ca0 <HAL_DMA_IRQHandler+0x418>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d022      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca4 <HAL_DMA_IRQHandler+0x41c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01d      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca8 <HAL_DMA_IRQHandler+0x420>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cac <HAL_DMA_IRQHandler+0x424>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb0 <HAL_DMA_IRQHandler+0x428>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a18      	ldr	r2, [pc, #96]	@ (8003cb4 <HAL_DMA_IRQHandler+0x42c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d009      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a17      	ldr	r2, [pc, #92]	@ (8003cb8 <HAL_DMA_IRQHandler+0x430>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x3e2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a15      	ldr	r2, [pc, #84]	@ (8003cbc <HAL_DMA_IRQHandler+0x434>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d12a      	bne.n	8003cc0 <HAL_DMA_IRQHandler+0x438>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e023      	b.n	8003cc8 <HAL_DMA_IRQHandler+0x440>
 8003c80:	40020010 	.word	0x40020010
 8003c84:	40020028 	.word	0x40020028
 8003c88:	40020040 	.word	0x40020040
 8003c8c:	40020058 	.word	0x40020058
 8003c90:	40020070 	.word	0x40020070
 8003c94:	40020088 	.word	0x40020088
 8003c98:	400200a0 	.word	0x400200a0
 8003c9c:	400200b8 	.word	0x400200b8
 8003ca0:	40020410 	.word	0x40020410
 8003ca4:	40020428 	.word	0x40020428
 8003ca8:	40020440 	.word	0x40020440
 8003cac:	40020458 	.word	0x40020458
 8003cb0:	40020470 	.word	0x40020470
 8003cb4:	40020488 	.word	0x40020488
 8003cb8:	400204a0 	.word	0x400204a0
 8003cbc:	400204b8 	.word	0x400204b8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80a6 	beq.w	8003e4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a85      	ldr	r2, [pc, #532]	@ (8003f18 <HAL_DMA_IRQHandler+0x690>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d04a      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a83      	ldr	r2, [pc, #524]	@ (8003f1c <HAL_DMA_IRQHandler+0x694>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d045      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a82      	ldr	r2, [pc, #520]	@ (8003f20 <HAL_DMA_IRQHandler+0x698>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d040      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a80      	ldr	r2, [pc, #512]	@ (8003f24 <HAL_DMA_IRQHandler+0x69c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d03b      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a7f      	ldr	r2, [pc, #508]	@ (8003f28 <HAL_DMA_IRQHandler+0x6a0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d036      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7d      	ldr	r2, [pc, #500]	@ (8003f2c <HAL_DMA_IRQHandler+0x6a4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d031      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f30 <HAL_DMA_IRQHandler+0x6a8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d02c      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a7a      	ldr	r2, [pc, #488]	@ (8003f34 <HAL_DMA_IRQHandler+0x6ac>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d027      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a79      	ldr	r2, [pc, #484]	@ (8003f38 <HAL_DMA_IRQHandler+0x6b0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d022      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a77      	ldr	r2, [pc, #476]	@ (8003f3c <HAL_DMA_IRQHandler+0x6b4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01d      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a76      	ldr	r2, [pc, #472]	@ (8003f40 <HAL_DMA_IRQHandler+0x6b8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d018      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a74      	ldr	r2, [pc, #464]	@ (8003f44 <HAL_DMA_IRQHandler+0x6bc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a73      	ldr	r2, [pc, #460]	@ (8003f48 <HAL_DMA_IRQHandler+0x6c0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a71      	ldr	r2, [pc, #452]	@ (8003f4c <HAL_DMA_IRQHandler+0x6c4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d009      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a70      	ldr	r2, [pc, #448]	@ (8003f50 <HAL_DMA_IRQHandler+0x6c8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x516>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a6e      	ldr	r2, [pc, #440]	@ (8003f54 <HAL_DMA_IRQHandler+0x6cc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10a      	bne.n	8003db4 <HAL_DMA_IRQHandler+0x52c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf14      	ite	ne
 8003dac:	2301      	movne	r3, #1
 8003dae:	2300      	moveq	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	e009      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x540>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bf14      	ite	ne
 8003dc2:	2301      	movne	r3, #1
 8003dc4:	2300      	moveq	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d03e      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d108      	bne.n	8003e0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d024      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
 8003e08:	e01f      	b.n	8003e4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01b      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	4798      	blx	r3
 8003e1a:	e016      	b.n	8003e4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d107      	bne.n	8003e3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0208 	bic.w	r2, r2, #8
 8003e38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2220      	movs	r2, #32
 8003e54:	409a      	lsls	r2, r3
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8110 	beq.w	8004080 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2c      	ldr	r2, [pc, #176]	@ (8003f18 <HAL_DMA_IRQHandler+0x690>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d04a      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f1c <HAL_DMA_IRQHandler+0x694>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d045      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a29      	ldr	r2, [pc, #164]	@ (8003f20 <HAL_DMA_IRQHandler+0x698>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d040      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a28      	ldr	r2, [pc, #160]	@ (8003f24 <HAL_DMA_IRQHandler+0x69c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d03b      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a26      	ldr	r2, [pc, #152]	@ (8003f28 <HAL_DMA_IRQHandler+0x6a0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d036      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a25      	ldr	r2, [pc, #148]	@ (8003f2c <HAL_DMA_IRQHandler+0x6a4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d031      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	@ (8003f30 <HAL_DMA_IRQHandler+0x6a8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d02c      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a22      	ldr	r2, [pc, #136]	@ (8003f34 <HAL_DMA_IRQHandler+0x6ac>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d027      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a20      	ldr	r2, [pc, #128]	@ (8003f38 <HAL_DMA_IRQHandler+0x6b0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d022      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8003f3c <HAL_DMA_IRQHandler+0x6b4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d01d      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f40 <HAL_DMA_IRQHandler+0x6b8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d018      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f44 <HAL_DMA_IRQHandler+0x6bc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1a      	ldr	r2, [pc, #104]	@ (8003f48 <HAL_DMA_IRQHandler+0x6c0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00e      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a19      	ldr	r2, [pc, #100]	@ (8003f4c <HAL_DMA_IRQHandler+0x6c4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d009      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a17      	ldr	r2, [pc, #92]	@ (8003f50 <HAL_DMA_IRQHandler+0x6c8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x678>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a16      	ldr	r2, [pc, #88]	@ (8003f54 <HAL_DMA_IRQHandler+0x6cc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d12b      	bne.n	8003f58 <HAL_DMA_IRQHandler+0x6d0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	e02a      	b.n	8003f6c <HAL_DMA_IRQHandler+0x6e4>
 8003f16:	bf00      	nop
 8003f18:	40020010 	.word	0x40020010
 8003f1c:	40020028 	.word	0x40020028
 8003f20:	40020040 	.word	0x40020040
 8003f24:	40020058 	.word	0x40020058
 8003f28:	40020070 	.word	0x40020070
 8003f2c:	40020088 	.word	0x40020088
 8003f30:	400200a0 	.word	0x400200a0
 8003f34:	400200b8 	.word	0x400200b8
 8003f38:	40020410 	.word	0x40020410
 8003f3c:	40020428 	.word	0x40020428
 8003f40:	40020440 	.word	0x40020440
 8003f44:	40020458 	.word	0x40020458
 8003f48:	40020470 	.word	0x40020470
 8003f4c:	40020488 	.word	0x40020488
 8003f50:	400204a0 	.word	0x400204a0
 8003f54:	400204b8 	.word	0x400204b8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8087 	beq.w	8004080 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d139      	bne.n	8004002 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0216 	bic.w	r2, r2, #22
 8003f9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <HAL_DMA_IRQHandler+0x736>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0208 	bic.w	r2, r2, #8
 8003fcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	223f      	movs	r2, #63	@ 0x3f
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8382 	beq.w	80046fc <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
          }
          return;
 8004000:	e37c      	b.n	80046fc <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d018      	beq.n	8004042 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d108      	bne.n	8004030 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	2b00      	cmp	r3, #0
 8004024:	d02c      	beq.n	8004080 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
 800402e:	e027      	b.n	8004080 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d023      	beq.n	8004080 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
 8004040:	e01e      	b.n	8004080 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10f      	bne.n	8004070 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0210 	bic.w	r2, r2, #16
 800405e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 833e 	beq.w	8004706 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8088 	beq.w	80041a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2204      	movs	r2, #4
 800409c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a89      	ldr	r2, [pc, #548]	@ (80042cc <HAL_DMA_IRQHandler+0xa44>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d04a      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a88      	ldr	r2, [pc, #544]	@ (80042d0 <HAL_DMA_IRQHandler+0xa48>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d045      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a86      	ldr	r2, [pc, #536]	@ (80042d4 <HAL_DMA_IRQHandler+0xa4c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d040      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a85      	ldr	r2, [pc, #532]	@ (80042d8 <HAL_DMA_IRQHandler+0xa50>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d03b      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a83      	ldr	r2, [pc, #524]	@ (80042dc <HAL_DMA_IRQHandler+0xa54>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d036      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a82      	ldr	r2, [pc, #520]	@ (80042e0 <HAL_DMA_IRQHandler+0xa58>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d031      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a80      	ldr	r2, [pc, #512]	@ (80042e4 <HAL_DMA_IRQHandler+0xa5c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d02c      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7f      	ldr	r2, [pc, #508]	@ (80042e8 <HAL_DMA_IRQHandler+0xa60>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d027      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7d      	ldr	r2, [pc, #500]	@ (80042ec <HAL_DMA_IRQHandler+0xa64>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d022      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7c      	ldr	r2, [pc, #496]	@ (80042f0 <HAL_DMA_IRQHandler+0xa68>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d01d      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a7a      	ldr	r2, [pc, #488]	@ (80042f4 <HAL_DMA_IRQHandler+0xa6c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a79      	ldr	r2, [pc, #484]	@ (80042f8 <HAL_DMA_IRQHandler+0xa70>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a77      	ldr	r2, [pc, #476]	@ (80042fc <HAL_DMA_IRQHandler+0xa74>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a76      	ldr	r2, [pc, #472]	@ (8004300 <HAL_DMA_IRQHandler+0xa78>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a74      	ldr	r2, [pc, #464]	@ (8004304 <HAL_DMA_IRQHandler+0xa7c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_DMA_IRQHandler+0x8b8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a73      	ldr	r2, [pc, #460]	@ (8004308 <HAL_DMA_IRQHandler+0xa80>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d108      	bne.n	8004152 <HAL_DMA_IRQHandler+0x8ca>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e007      	b.n	8004162 <HAL_DMA_IRQHandler+0x8da>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3301      	adds	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416a:	429a      	cmp	r2, r3
 800416c:	d307      	bcc.n	800417e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f2      	bne.n	8004162 <HAL_DMA_IRQHandler+0x8da>
 800417c:	e000      	b.n	8004180 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800417e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2203      	movs	r2, #3
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004196:	e003      	b.n	80041a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 82aa 	beq.w	8004706 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
 80041ba:	e2a4      	b.n	8004706 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a52      	ldr	r2, [pc, #328]	@ (800430c <HAL_DMA_IRQHandler+0xa84>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d04a      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a51      	ldr	r2, [pc, #324]	@ (8004310 <HAL_DMA_IRQHandler+0xa88>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d045      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004314 <HAL_DMA_IRQHandler+0xa8c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d040      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a4e      	ldr	r2, [pc, #312]	@ (8004318 <HAL_DMA_IRQHandler+0xa90>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d03b      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a4c      	ldr	r2, [pc, #304]	@ (800431c <HAL_DMA_IRQHandler+0xa94>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d036      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004320 <HAL_DMA_IRQHandler+0xa98>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d031      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a49      	ldr	r2, [pc, #292]	@ (8004324 <HAL_DMA_IRQHandler+0xa9c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d02c      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a48      	ldr	r2, [pc, #288]	@ (8004328 <HAL_DMA_IRQHandler+0xaa0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d027      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a46      	ldr	r2, [pc, #280]	@ (800432c <HAL_DMA_IRQHandler+0xaa4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d022      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a45      	ldr	r2, [pc, #276]	@ (8004330 <HAL_DMA_IRQHandler+0xaa8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d01d      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a43      	ldr	r2, [pc, #268]	@ (8004334 <HAL_DMA_IRQHandler+0xaac>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d018      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a42      	ldr	r2, [pc, #264]	@ (8004338 <HAL_DMA_IRQHandler+0xab0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d013      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a40      	ldr	r2, [pc, #256]	@ (800433c <HAL_DMA_IRQHandler+0xab4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00e      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a3f      	ldr	r2, [pc, #252]	@ (8004340 <HAL_DMA_IRQHandler+0xab8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d009      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a3d      	ldr	r2, [pc, #244]	@ (8004344 <HAL_DMA_IRQHandler+0xabc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d004      	beq.n	800425c <HAL_DMA_IRQHandler+0x9d4>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a3c      	ldr	r2, [pc, #240]	@ (8004348 <HAL_DMA_IRQHandler+0xac0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_DMA_IRQHandler+0x9d8>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_DMA_IRQHandler+0x9da>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 824f 	beq.w	8004706 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	2204      	movs	r2, #4
 800427a:	409a      	lsls	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80dd 	beq.w	8004440 <HAL_DMA_IRQHandler+0xbb8>
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80d7 	beq.w	8004440 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	2204      	movs	r2, #4
 800429c:	409a      	lsls	r2, r3
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d059      	beq.n	8004360 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d14a      	bne.n	800434c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8220 	beq.w	8004700 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042c8:	e21a      	b.n	8004700 <HAL_DMA_IRQHandler+0xe78>
 80042ca:	bf00      	nop
 80042cc:	40020010 	.word	0x40020010
 80042d0:	40020028 	.word	0x40020028
 80042d4:	40020040 	.word	0x40020040
 80042d8:	40020058 	.word	0x40020058
 80042dc:	40020070 	.word	0x40020070
 80042e0:	40020088 	.word	0x40020088
 80042e4:	400200a0 	.word	0x400200a0
 80042e8:	400200b8 	.word	0x400200b8
 80042ec:	40020410 	.word	0x40020410
 80042f0:	40020428 	.word	0x40020428
 80042f4:	40020440 	.word	0x40020440
 80042f8:	40020458 	.word	0x40020458
 80042fc:	40020470 	.word	0x40020470
 8004300:	40020488 	.word	0x40020488
 8004304:	400204a0 	.word	0x400204a0
 8004308:	400204b8 	.word	0x400204b8
 800430c:	48022c08 	.word	0x48022c08
 8004310:	48022c1c 	.word	0x48022c1c
 8004314:	48022c30 	.word	0x48022c30
 8004318:	48022c44 	.word	0x48022c44
 800431c:	48022c58 	.word	0x48022c58
 8004320:	48022c6c 	.word	0x48022c6c
 8004324:	48022c80 	.word	0x48022c80
 8004328:	48022c94 	.word	0x48022c94
 800432c:	58025408 	.word	0x58025408
 8004330:	5802541c 	.word	0x5802541c
 8004334:	58025430 	.word	0x58025430
 8004338:	58025444 	.word	0x58025444
 800433c:	58025458 	.word	0x58025458
 8004340:	5802546c 	.word	0x5802546c
 8004344:	58025480 	.word	0x58025480
 8004348:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 81d5 	beq.w	8004700 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800435e:	e1cf      	b.n	8004700 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d160      	bne.n	800442c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a7f      	ldr	r2, [pc, #508]	@ (800456c <HAL_DMA_IRQHandler+0xce4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d04a      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a7d      	ldr	r2, [pc, #500]	@ (8004570 <HAL_DMA_IRQHandler+0xce8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d045      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a7c      	ldr	r2, [pc, #496]	@ (8004574 <HAL_DMA_IRQHandler+0xcec>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d040      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a7a      	ldr	r2, [pc, #488]	@ (8004578 <HAL_DMA_IRQHandler+0xcf0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d03b      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a79      	ldr	r2, [pc, #484]	@ (800457c <HAL_DMA_IRQHandler+0xcf4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d036      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a77      	ldr	r2, [pc, #476]	@ (8004580 <HAL_DMA_IRQHandler+0xcf8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d031      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a76      	ldr	r2, [pc, #472]	@ (8004584 <HAL_DMA_IRQHandler+0xcfc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d02c      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a74      	ldr	r2, [pc, #464]	@ (8004588 <HAL_DMA_IRQHandler+0xd00>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d027      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a73      	ldr	r2, [pc, #460]	@ (800458c <HAL_DMA_IRQHandler+0xd04>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d022      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a71      	ldr	r2, [pc, #452]	@ (8004590 <HAL_DMA_IRQHandler+0xd08>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01d      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a70      	ldr	r2, [pc, #448]	@ (8004594 <HAL_DMA_IRQHandler+0xd0c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d018      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004598 <HAL_DMA_IRQHandler+0xd10>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6d      	ldr	r2, [pc, #436]	@ (800459c <HAL_DMA_IRQHandler+0xd14>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00e      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a6b      	ldr	r2, [pc, #428]	@ (80045a0 <HAL_DMA_IRQHandler+0xd18>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a6a      	ldr	r2, [pc, #424]	@ (80045a4 <HAL_DMA_IRQHandler+0xd1c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_DMA_IRQHandler+0xb82>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a68      	ldr	r2, [pc, #416]	@ (80045a8 <HAL_DMA_IRQHandler+0xd20>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d108      	bne.n	800441c <HAL_DMA_IRQHandler+0xb94>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0208 	bic.w	r2, r2, #8
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e007      	b.n	800442c <HAL_DMA_IRQHandler+0xba4>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0204 	bic.w	r2, r2, #4
 800442a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8165 	beq.w	8004700 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800443e:	e15f      	b.n	8004700 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	2202      	movs	r2, #2
 800444a:	409a      	lsls	r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80c5 	beq.w	80045e0 <HAL_DMA_IRQHandler+0xd58>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80bf 	beq.w	80045e0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2202      	movs	r2, #2
 800446c:	409a      	lsls	r2, r3
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d018      	beq.n	80044ae <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 813a 	beq.w	8004704 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004498:	e134      	b.n	8004704 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8130 	beq.w	8004704 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ac:	e12a      	b.n	8004704 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f040 8089 	bne.w	80045cc <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a2b      	ldr	r2, [pc, #172]	@ (800456c <HAL_DMA_IRQHandler+0xce4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d04a      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a29      	ldr	r2, [pc, #164]	@ (8004570 <HAL_DMA_IRQHandler+0xce8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d045      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a28      	ldr	r2, [pc, #160]	@ (8004574 <HAL_DMA_IRQHandler+0xcec>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d040      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a26      	ldr	r2, [pc, #152]	@ (8004578 <HAL_DMA_IRQHandler+0xcf0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d03b      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a25      	ldr	r2, [pc, #148]	@ (800457c <HAL_DMA_IRQHandler+0xcf4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d036      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a23      	ldr	r2, [pc, #140]	@ (8004580 <HAL_DMA_IRQHandler+0xcf8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d031      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a22      	ldr	r2, [pc, #136]	@ (8004584 <HAL_DMA_IRQHandler+0xcfc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d02c      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a20      	ldr	r2, [pc, #128]	@ (8004588 <HAL_DMA_IRQHandler+0xd00>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d027      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1f      	ldr	r2, [pc, #124]	@ (800458c <HAL_DMA_IRQHandler+0xd04>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d022      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1d      	ldr	r2, [pc, #116]	@ (8004590 <HAL_DMA_IRQHandler+0xd08>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01d      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1c      	ldr	r2, [pc, #112]	@ (8004594 <HAL_DMA_IRQHandler+0xd0c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d018      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1a      	ldr	r2, [pc, #104]	@ (8004598 <HAL_DMA_IRQHandler+0xd10>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a19      	ldr	r2, [pc, #100]	@ (800459c <HAL_DMA_IRQHandler+0xd14>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a17      	ldr	r2, [pc, #92]	@ (80045a0 <HAL_DMA_IRQHandler+0xd18>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a16      	ldr	r2, [pc, #88]	@ (80045a4 <HAL_DMA_IRQHandler+0xd1c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_DMA_IRQHandler+0xcd2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a14      	ldr	r2, [pc, #80]	@ (80045a8 <HAL_DMA_IRQHandler+0xd20>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d128      	bne.n	80045ac <HAL_DMA_IRQHandler+0xd24>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0214 	bic.w	r2, r2, #20
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e027      	b.n	80045bc <HAL_DMA_IRQHandler+0xd34>
 800456c:	40020010 	.word	0x40020010
 8004570:	40020028 	.word	0x40020028
 8004574:	40020040 	.word	0x40020040
 8004578:	40020058 	.word	0x40020058
 800457c:	40020070 	.word	0x40020070
 8004580:	40020088 	.word	0x40020088
 8004584:	400200a0 	.word	0x400200a0
 8004588:	400200b8 	.word	0x400200b8
 800458c:	40020410 	.word	0x40020410
 8004590:	40020428 	.word	0x40020428
 8004594:	40020440 	.word	0x40020440
 8004598:	40020458 	.word	0x40020458
 800459c:	40020470 	.word	0x40020470
 80045a0:	40020488 	.word	0x40020488
 80045a4:	400204a0 	.word	0x400204a0
 80045a8:	400204b8 	.word	0x400204b8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 020a 	bic.w	r2, r2, #10
 80045ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8097 	beq.w	8004704 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045de:	e091      	b.n	8004704 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	2208      	movs	r2, #8
 80045ea:	409a      	lsls	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8088 	beq.w	8004706 <HAL_DMA_IRQHandler+0xe7e>
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8082 	beq.w	8004706 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a41      	ldr	r2, [pc, #260]	@ (800470c <HAL_DMA_IRQHandler+0xe84>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d04a      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a3f      	ldr	r2, [pc, #252]	@ (8004710 <HAL_DMA_IRQHandler+0xe88>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d045      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a3e      	ldr	r2, [pc, #248]	@ (8004714 <HAL_DMA_IRQHandler+0xe8c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d040      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a3c      	ldr	r2, [pc, #240]	@ (8004718 <HAL_DMA_IRQHandler+0xe90>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d03b      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a3b      	ldr	r2, [pc, #236]	@ (800471c <HAL_DMA_IRQHandler+0xe94>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d036      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a39      	ldr	r2, [pc, #228]	@ (8004720 <HAL_DMA_IRQHandler+0xe98>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d031      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a38      	ldr	r2, [pc, #224]	@ (8004724 <HAL_DMA_IRQHandler+0xe9c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d02c      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a36      	ldr	r2, [pc, #216]	@ (8004728 <HAL_DMA_IRQHandler+0xea0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d027      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a35      	ldr	r2, [pc, #212]	@ (800472c <HAL_DMA_IRQHandler+0xea4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d022      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a33      	ldr	r2, [pc, #204]	@ (8004730 <HAL_DMA_IRQHandler+0xea8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01d      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a32      	ldr	r2, [pc, #200]	@ (8004734 <HAL_DMA_IRQHandler+0xeac>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d018      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a30      	ldr	r2, [pc, #192]	@ (8004738 <HAL_DMA_IRQHandler+0xeb0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a2f      	ldr	r2, [pc, #188]	@ (800473c <HAL_DMA_IRQHandler+0xeb4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00e      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2d      	ldr	r2, [pc, #180]	@ (8004740 <HAL_DMA_IRQHandler+0xeb8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2c      	ldr	r2, [pc, #176]	@ (8004744 <HAL_DMA_IRQHandler+0xebc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xe1a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2a      	ldr	r2, [pc, #168]	@ (8004748 <HAL_DMA_IRQHandler+0xec0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d108      	bne.n	80046b4 <HAL_DMA_IRQHandler+0xe2c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 021c 	bic.w	r2, r2, #28
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e007      	b.n	80046c4 <HAL_DMA_IRQHandler+0xe3c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 020e 	bic.w	r2, r2, #14
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	2201      	movs	r2, #1
 80046ce:	409a      	lsls	r2, r3
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	4798      	blx	r3
 80046fa:	e004      	b.n	8004706 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80046fc:	bf00      	nop
 80046fe:	e002      	b.n	8004706 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004700:	bf00      	nop
 8004702:	e000      	b.n	8004706 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004704:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004706:	3728      	adds	r7, #40	@ 0x28
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40020010 	.word	0x40020010
 8004710:	40020028 	.word	0x40020028
 8004714:	40020040 	.word	0x40020040
 8004718:	40020058 	.word	0x40020058
 800471c:	40020070 	.word	0x40020070
 8004720:	40020088 	.word	0x40020088
 8004724:	400200a0 	.word	0x400200a0
 8004728:	400200b8 	.word	0x400200b8
 800472c:	40020410 	.word	0x40020410
 8004730:	40020428 	.word	0x40020428
 8004734:	40020440 	.word	0x40020440
 8004738:	40020458 	.word	0x40020458
 800473c:	40020470 	.word	0x40020470
 8004740:	40020488 	.word	0x40020488
 8004744:	400204a0 	.word	0x400204a0
 8004748:	400204b8 	.word	0x400204b8

0800474c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004776:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7f      	ldr	r2, [pc, #508]	@ (8004980 <DMA_SetConfig+0x21c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d072      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a7d      	ldr	r2, [pc, #500]	@ (8004984 <DMA_SetConfig+0x220>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d06d      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a7c      	ldr	r2, [pc, #496]	@ (8004988 <DMA_SetConfig+0x224>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d068      	beq.n	800486e <DMA_SetConfig+0x10a>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a7a      	ldr	r2, [pc, #488]	@ (800498c <DMA_SetConfig+0x228>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d063      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a79      	ldr	r2, [pc, #484]	@ (8004990 <DMA_SetConfig+0x22c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d05e      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a77      	ldr	r2, [pc, #476]	@ (8004994 <DMA_SetConfig+0x230>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d059      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a76      	ldr	r2, [pc, #472]	@ (8004998 <DMA_SetConfig+0x234>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d054      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a74      	ldr	r2, [pc, #464]	@ (800499c <DMA_SetConfig+0x238>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d04f      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a73      	ldr	r2, [pc, #460]	@ (80049a0 <DMA_SetConfig+0x23c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d04a      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a71      	ldr	r2, [pc, #452]	@ (80049a4 <DMA_SetConfig+0x240>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d045      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a70      	ldr	r2, [pc, #448]	@ (80049a8 <DMA_SetConfig+0x244>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d040      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a6e      	ldr	r2, [pc, #440]	@ (80049ac <DMA_SetConfig+0x248>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d03b      	beq.n	800486e <DMA_SetConfig+0x10a>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a6d      	ldr	r2, [pc, #436]	@ (80049b0 <DMA_SetConfig+0x24c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d036      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a6b      	ldr	r2, [pc, #428]	@ (80049b4 <DMA_SetConfig+0x250>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d031      	beq.n	800486e <DMA_SetConfig+0x10a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6a      	ldr	r2, [pc, #424]	@ (80049b8 <DMA_SetConfig+0x254>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02c      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a68      	ldr	r2, [pc, #416]	@ (80049bc <DMA_SetConfig+0x258>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d027      	beq.n	800486e <DMA_SetConfig+0x10a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a67      	ldr	r2, [pc, #412]	@ (80049c0 <DMA_SetConfig+0x25c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a65      	ldr	r2, [pc, #404]	@ (80049c4 <DMA_SetConfig+0x260>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a64      	ldr	r2, [pc, #400]	@ (80049c8 <DMA_SetConfig+0x264>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <DMA_SetConfig+0x10a>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a62      	ldr	r2, [pc, #392]	@ (80049cc <DMA_SetConfig+0x268>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a61      	ldr	r2, [pc, #388]	@ (80049d0 <DMA_SetConfig+0x26c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5f      	ldr	r2, [pc, #380]	@ (80049d4 <DMA_SetConfig+0x270>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <DMA_SetConfig+0x10a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a5e      	ldr	r2, [pc, #376]	@ (80049d8 <DMA_SetConfig+0x274>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <DMA_SetConfig+0x10a>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5c      	ldr	r2, [pc, #368]	@ (80049dc <DMA_SetConfig+0x278>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <DMA_SetConfig+0x10e>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <DMA_SetConfig+0x110>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004880:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004892:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a39      	ldr	r2, [pc, #228]	@ (8004980 <DMA_SetConfig+0x21c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d04a      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a38      	ldr	r2, [pc, #224]	@ (8004984 <DMA_SetConfig+0x220>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d045      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a36      	ldr	r2, [pc, #216]	@ (8004988 <DMA_SetConfig+0x224>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d040      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a35      	ldr	r2, [pc, #212]	@ (800498c <DMA_SetConfig+0x228>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d03b      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a33      	ldr	r2, [pc, #204]	@ (8004990 <DMA_SetConfig+0x22c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d036      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a32      	ldr	r2, [pc, #200]	@ (8004994 <DMA_SetConfig+0x230>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d031      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a30      	ldr	r2, [pc, #192]	@ (8004998 <DMA_SetConfig+0x234>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02c      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2f      	ldr	r2, [pc, #188]	@ (800499c <DMA_SetConfig+0x238>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d027      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a2d      	ldr	r2, [pc, #180]	@ (80049a0 <DMA_SetConfig+0x23c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a2c      	ldr	r2, [pc, #176]	@ (80049a4 <DMA_SetConfig+0x240>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a2a      	ldr	r2, [pc, #168]	@ (80049a8 <DMA_SetConfig+0x244>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a29      	ldr	r2, [pc, #164]	@ (80049ac <DMA_SetConfig+0x248>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a27      	ldr	r2, [pc, #156]	@ (80049b0 <DMA_SetConfig+0x24c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a26      	ldr	r2, [pc, #152]	@ (80049b4 <DMA_SetConfig+0x250>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a24      	ldr	r2, [pc, #144]	@ (80049b8 <DMA_SetConfig+0x254>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <DMA_SetConfig+0x1d0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a23      	ldr	r2, [pc, #140]	@ (80049bc <DMA_SetConfig+0x258>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <DMA_SetConfig+0x1d4>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <DMA_SetConfig+0x1d6>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d059      	beq.n	80049f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	223f      	movs	r2, #63	@ 0x3f
 8004948:	409a      	lsls	r2, r3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800495c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b40      	cmp	r3, #64	@ 0x40
 800496c:	d138      	bne.n	80049e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800497e:	e0ae      	b.n	8004ade <DMA_SetConfig+0x37a>
 8004980:	40020010 	.word	0x40020010
 8004984:	40020028 	.word	0x40020028
 8004988:	40020040 	.word	0x40020040
 800498c:	40020058 	.word	0x40020058
 8004990:	40020070 	.word	0x40020070
 8004994:	40020088 	.word	0x40020088
 8004998:	400200a0 	.word	0x400200a0
 800499c:	400200b8 	.word	0x400200b8
 80049a0:	40020410 	.word	0x40020410
 80049a4:	40020428 	.word	0x40020428
 80049a8:	40020440 	.word	0x40020440
 80049ac:	40020458 	.word	0x40020458
 80049b0:	40020470 	.word	0x40020470
 80049b4:	40020488 	.word	0x40020488
 80049b8:	400204a0 	.word	0x400204a0
 80049bc:	400204b8 	.word	0x400204b8
 80049c0:	58025408 	.word	0x58025408
 80049c4:	5802541c 	.word	0x5802541c
 80049c8:	58025430 	.word	0x58025430
 80049cc:	58025444 	.word	0x58025444
 80049d0:	58025458 	.word	0x58025458
 80049d4:	5802546c 	.word	0x5802546c
 80049d8:	58025480 	.word	0x58025480
 80049dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	60da      	str	r2, [r3, #12]
}
 80049f0:	e075      	b.n	8004ade <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a3d      	ldr	r2, [pc, #244]	@ (8004aec <DMA_SetConfig+0x388>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d04a      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3b      	ldr	r2, [pc, #236]	@ (8004af0 <DMA_SetConfig+0x38c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d045      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a3a      	ldr	r2, [pc, #232]	@ (8004af4 <DMA_SetConfig+0x390>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d040      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a38      	ldr	r2, [pc, #224]	@ (8004af8 <DMA_SetConfig+0x394>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d03b      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a37      	ldr	r2, [pc, #220]	@ (8004afc <DMA_SetConfig+0x398>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d036      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a35      	ldr	r2, [pc, #212]	@ (8004b00 <DMA_SetConfig+0x39c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d031      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a34      	ldr	r2, [pc, #208]	@ (8004b04 <DMA_SetConfig+0x3a0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d02c      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a32      	ldr	r2, [pc, #200]	@ (8004b08 <DMA_SetConfig+0x3a4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d027      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a31      	ldr	r2, [pc, #196]	@ (8004b0c <DMA_SetConfig+0x3a8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d022      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2f      	ldr	r2, [pc, #188]	@ (8004b10 <DMA_SetConfig+0x3ac>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01d      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b14 <DMA_SetConfig+0x3b0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d018      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2c      	ldr	r2, [pc, #176]	@ (8004b18 <DMA_SetConfig+0x3b4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b1c <DMA_SetConfig+0x3b8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a29      	ldr	r2, [pc, #164]	@ (8004b20 <DMA_SetConfig+0x3bc>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a28      	ldr	r2, [pc, #160]	@ (8004b24 <DMA_SetConfig+0x3c0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <DMA_SetConfig+0x32e>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a26      	ldr	r2, [pc, #152]	@ (8004b28 <DMA_SetConfig+0x3c4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <DMA_SetConfig+0x332>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <DMA_SetConfig+0x334>
 8004a96:	2300      	movs	r3, #0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b40      	cmp	r3, #64	@ 0x40
 8004aba:	d108      	bne.n	8004ace <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	60da      	str	r2, [r3, #12]
}
 8004acc:	e007      	b.n	8004ade <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	60da      	str	r2, [r3, #12]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	48022c08 	.word	0x48022c08
 8004af0:	48022c1c 	.word	0x48022c1c
 8004af4:	48022c30 	.word	0x48022c30
 8004af8:	48022c44 	.word	0x48022c44
 8004afc:	48022c58 	.word	0x48022c58
 8004b00:	48022c6c 	.word	0x48022c6c
 8004b04:	48022c80 	.word	0x48022c80
 8004b08:	48022c94 	.word	0x48022c94
 8004b0c:	58025408 	.word	0x58025408
 8004b10:	5802541c 	.word	0x5802541c
 8004b14:	58025430 	.word	0x58025430
 8004b18:	58025444 	.word	0x58025444
 8004b1c:	58025458 	.word	0x58025458
 8004b20:	5802546c 	.word	0x5802546c
 8004b24:	58025480 	.word	0x58025480
 8004b28:	58025494 	.word	0x58025494

08004b2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a42      	ldr	r2, [pc, #264]	@ (8004c44 <DMA_CalcBaseAndBitshift+0x118>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d04a      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a41      	ldr	r2, [pc, #260]	@ (8004c48 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d045      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c4c <DMA_CalcBaseAndBitshift+0x120>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d040      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a3e      	ldr	r2, [pc, #248]	@ (8004c50 <DMA_CalcBaseAndBitshift+0x124>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d03b      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a3c      	ldr	r2, [pc, #240]	@ (8004c54 <DMA_CalcBaseAndBitshift+0x128>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d036      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3b      	ldr	r2, [pc, #236]	@ (8004c58 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d031      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a39      	ldr	r2, [pc, #228]	@ (8004c5c <DMA_CalcBaseAndBitshift+0x130>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d02c      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a38      	ldr	r2, [pc, #224]	@ (8004c60 <DMA_CalcBaseAndBitshift+0x134>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d027      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a36      	ldr	r2, [pc, #216]	@ (8004c64 <DMA_CalcBaseAndBitshift+0x138>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d022      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a35      	ldr	r2, [pc, #212]	@ (8004c68 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d01d      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a33      	ldr	r2, [pc, #204]	@ (8004c6c <DMA_CalcBaseAndBitshift+0x140>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d018      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a32      	ldr	r2, [pc, #200]	@ (8004c70 <DMA_CalcBaseAndBitshift+0x144>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d013      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a30      	ldr	r2, [pc, #192]	@ (8004c74 <DMA_CalcBaseAndBitshift+0x148>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00e      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a2f      	ldr	r2, [pc, #188]	@ (8004c78 <DMA_CalcBaseAndBitshift+0x14c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d009      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8004c7c <DMA_CalcBaseAndBitshift+0x150>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d004      	beq.n	8004bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2c      	ldr	r2, [pc, #176]	@ (8004c80 <DMA_CalcBaseAndBitshift+0x154>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d101      	bne.n	8004bd8 <DMA_CalcBaseAndBitshift+0xac>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <DMA_CalcBaseAndBitshift+0xae>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d024      	beq.n	8004c28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3b10      	subs	r3, #16
 8004be6:	4a27      	ldr	r2, [pc, #156]	@ (8004c84 <DMA_CalcBaseAndBitshift+0x158>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	4a24      	ldr	r2, [pc, #144]	@ (8004c88 <DMA_CalcBaseAndBitshift+0x15c>)
 8004bf8:	5cd3      	ldrb	r3, [r2, r3]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d908      	bls.n	8004c18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004c8c <DMA_CalcBaseAndBitshift+0x160>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	1d1a      	adds	r2, r3, #4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c16:	e00d      	b.n	8004c34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c8c <DMA_CalcBaseAndBitshift+0x160>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c26:	e005      	b.n	8004c34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	40020010 	.word	0x40020010
 8004c48:	40020028 	.word	0x40020028
 8004c4c:	40020040 	.word	0x40020040
 8004c50:	40020058 	.word	0x40020058
 8004c54:	40020070 	.word	0x40020070
 8004c58:	40020088 	.word	0x40020088
 8004c5c:	400200a0 	.word	0x400200a0
 8004c60:	400200b8 	.word	0x400200b8
 8004c64:	40020410 	.word	0x40020410
 8004c68:	40020428 	.word	0x40020428
 8004c6c:	40020440 	.word	0x40020440
 8004c70:	40020458 	.word	0x40020458
 8004c74:	40020470 	.word	0x40020470
 8004c78:	40020488 	.word	0x40020488
 8004c7c:	400204a0 	.word	0x400204a0
 8004c80:	400204b8 	.word	0x400204b8
 8004c84:	aaaaaaab 	.word	0xaaaaaaab
 8004c88:	0800ecc8 	.word	0x0800ecc8
 8004c8c:	fffffc00 	.word	0xfffffc00

08004c90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d120      	bne.n	8004ce6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d858      	bhi.n	8004d5e <DMA_CheckFifoParam+0xce>
 8004cac:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <DMA_CheckFifoParam+0x24>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cc5 	.word	0x08004cc5
 8004cb8:	08004cd7 	.word	0x08004cd7
 8004cbc:	08004cc5 	.word	0x08004cc5
 8004cc0:	08004d5f 	.word	0x08004d5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d048      	beq.n	8004d62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cd4:	e045      	b.n	8004d62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cde:	d142      	bne.n	8004d66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ce4:	e03f      	b.n	8004d66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cee:	d123      	bne.n	8004d38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d838      	bhi.n	8004d6a <DMA_CheckFifoParam+0xda>
 8004cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8004d00 <DMA_CheckFifoParam+0x70>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d17 	.word	0x08004d17
 8004d08:	08004d11 	.word	0x08004d11
 8004d0c:	08004d29 	.word	0x08004d29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
        break;
 8004d14:	e030      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d025      	beq.n	8004d6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d26:	e022      	b.n	8004d6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d30:	d11f      	bne.n	8004d72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d36:	e01c      	b.n	8004d72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d902      	bls.n	8004d46 <DMA_CheckFifoParam+0xb6>
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d003      	beq.n	8004d4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d44:	e018      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
        break;
 8004d4a:	e015      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00e      	beq.n	8004d76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8004d5c:	e00b      	b.n	8004d76 <DMA_CheckFifoParam+0xe6>
        break;
 8004d5e:	bf00      	nop
 8004d60:	e00a      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
        break;
 8004d62:	bf00      	nop
 8004d64:	e008      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
        break;
 8004d66:	bf00      	nop
 8004d68:	e006      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
        break;
 8004d6a:	bf00      	nop
 8004d6c:	e004      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
        break;
 8004d6e:	bf00      	nop
 8004d70:	e002      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
        break;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
    break;
 8004d76:	bf00      	nop
    }
  }

  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop

08004d88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a38      	ldr	r2, [pc, #224]	@ (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d022      	beq.n	8004de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a36      	ldr	r2, [pc, #216]	@ (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01d      	beq.n	8004de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a35      	ldr	r2, [pc, #212]	@ (8004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d018      	beq.n	8004de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a33      	ldr	r2, [pc, #204]	@ (8004e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a32      	ldr	r2, [pc, #200]	@ (8004e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00e      	beq.n	8004de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a30      	ldr	r2, [pc, #192]	@ (8004e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d009      	beq.n	8004de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8004e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d004      	beq.n	8004de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d101      	bne.n	8004dea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004dea:	2300      	movs	r3, #0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01a      	beq.n	8004e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	3b08      	subs	r3, #8
 8004df8:	4a28      	ldr	r2, [pc, #160]	@ (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	091b      	lsrs	r3, r3, #4
 8004e00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4b26      	ldr	r3, [pc, #152]	@ (8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a24      	ldr	r2, [pc, #144]	@ (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e14:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e24:	e024      	b.n	8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	3b10      	subs	r3, #16
 8004e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e30:	fba2 2303 	umull	r2, r3, r2, r3
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004eac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d806      	bhi.n	8004e4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d902      	bls.n	8004e4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4b18      	ldr	r3, [pc, #96]	@ (8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	461a      	mov	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a16      	ldr	r2, [pc, #88]	@ (8004eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e60:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	2201      	movs	r2, #1
 8004e6a:	409a      	lsls	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	58025408 	.word	0x58025408
 8004e80:	5802541c 	.word	0x5802541c
 8004e84:	58025430 	.word	0x58025430
 8004e88:	58025444 	.word	0x58025444
 8004e8c:	58025458 	.word	0x58025458
 8004e90:	5802546c 	.word	0x5802546c
 8004e94:	58025480 	.word	0x58025480
 8004e98:	58025494 	.word	0x58025494
 8004e9c:	cccccccd 	.word	0xcccccccd
 8004ea0:	16009600 	.word	0x16009600
 8004ea4:	58025880 	.word	0x58025880
 8004ea8:	aaaaaaab 	.word	0xaaaaaaab
 8004eac:	400204b8 	.word	0x400204b8
 8004eb0:	4002040f 	.word	0x4002040f
 8004eb4:	10008200 	.word	0x10008200
 8004eb8:	40020880 	.word	0x40020880

08004ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d04a      	beq.n	8004f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d847      	bhi.n	8004f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a25      	ldr	r2, [pc, #148]	@ (8004f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d022      	beq.n	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a24      	ldr	r2, [pc, #144]	@ (8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d01d      	beq.n	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a22      	ldr	r2, [pc, #136]	@ (8004f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d018      	beq.n	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a21      	ldr	r2, [pc, #132]	@ (8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1f      	ldr	r2, [pc, #124]	@ (8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00e      	beq.n	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d009      	beq.n	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1c      	ldr	r2, [pc, #112]	@ (8004f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1b      	ldr	r2, [pc, #108]	@ (8004f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d101      	bne.n	8004f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4b17      	ldr	r3, [pc, #92]	@ (8004f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a15      	ldr	r2, [pc, #84]	@ (8004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f44:	671a      	str	r2, [r3, #112]	@ 0x70
 8004f46:	e009      	b.n	8004f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4b14      	ldr	r3, [pc, #80]	@ (8004f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	461a      	mov	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a11      	ldr	r2, [pc, #68]	@ (8004fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f5a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	2201      	movs	r2, #1
 8004f62:	409a      	lsls	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	58025408 	.word	0x58025408
 8004f78:	5802541c 	.word	0x5802541c
 8004f7c:	58025430 	.word	0x58025430
 8004f80:	58025444 	.word	0x58025444
 8004f84:	58025458 	.word	0x58025458
 8004f88:	5802546c 	.word	0x5802546c
 8004f8c:	58025480 	.word	0x58025480
 8004f90:	58025494 	.word	0x58025494
 8004f94:	1600963f 	.word	0x1600963f
 8004f98:	58025940 	.word	0x58025940
 8004f9c:	1000823f 	.word	0x1000823f
 8004fa0:	40020940 	.word	0x40020940

08004fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	@ 0x24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004fb2:	4b89      	ldr	r3, [pc, #548]	@ (80051d8 <HAL_GPIO_Init+0x234>)
 8004fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fb6:	e194      	b.n	80052e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 8186 	beq.w	80052dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d005      	beq.n	8004fe8 <HAL_GPIO_Init+0x44>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d130      	bne.n	800504a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4313      	orrs	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800501e:	2201      	movs	r2, #1
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	43db      	mvns	r3, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4013      	ands	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	f003 0201 	and.w	r2, r3, #1
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b03      	cmp	r3, #3
 8005054:	d017      	beq.n	8005086 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	2203      	movs	r2, #3
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4013      	ands	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4313      	orrs	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d123      	bne.n	80050da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	08da      	lsrs	r2, r3, #3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3208      	adds	r2, #8
 800509a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	220f      	movs	r2, #15
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43db      	mvns	r3, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4013      	ands	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	08da      	lsrs	r2, r3, #3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3208      	adds	r2, #8
 80050d4:	69b9      	ldr	r1, [r7, #24]
 80050d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	2203      	movs	r2, #3
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f003 0203 	and.w	r2, r3, #3
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4313      	orrs	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80e0 	beq.w	80052dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800511c:	4b2f      	ldr	r3, [pc, #188]	@ (80051dc <HAL_GPIO_Init+0x238>)
 800511e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005122:	4a2e      	ldr	r2, [pc, #184]	@ (80051dc <HAL_GPIO_Init+0x238>)
 8005124:	f043 0302 	orr.w	r3, r3, #2
 8005128:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800512c:	4b2b      	ldr	r3, [pc, #172]	@ (80051dc <HAL_GPIO_Init+0x238>)
 800512e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800513a:	4a29      	ldr	r2, [pc, #164]	@ (80051e0 <HAL_GPIO_Init+0x23c>)
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	089b      	lsrs	r3, r3, #2
 8005140:	3302      	adds	r3, #2
 8005142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	220f      	movs	r2, #15
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4013      	ands	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a20      	ldr	r2, [pc, #128]	@ (80051e4 <HAL_GPIO_Init+0x240>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d052      	beq.n	800520c <HAL_GPIO_Init+0x268>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a1f      	ldr	r2, [pc, #124]	@ (80051e8 <HAL_GPIO_Init+0x244>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d031      	beq.n	80051d2 <HAL_GPIO_Init+0x22e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1e      	ldr	r2, [pc, #120]	@ (80051ec <HAL_GPIO_Init+0x248>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d02b      	beq.n	80051ce <HAL_GPIO_Init+0x22a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1d      	ldr	r2, [pc, #116]	@ (80051f0 <HAL_GPIO_Init+0x24c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d025      	beq.n	80051ca <HAL_GPIO_Init+0x226>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a1c      	ldr	r2, [pc, #112]	@ (80051f4 <HAL_GPIO_Init+0x250>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01f      	beq.n	80051c6 <HAL_GPIO_Init+0x222>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a1b      	ldr	r2, [pc, #108]	@ (80051f8 <HAL_GPIO_Init+0x254>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d019      	beq.n	80051c2 <HAL_GPIO_Init+0x21e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1a      	ldr	r2, [pc, #104]	@ (80051fc <HAL_GPIO_Init+0x258>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <HAL_GPIO_Init+0x21a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a19      	ldr	r2, [pc, #100]	@ (8005200 <HAL_GPIO_Init+0x25c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00d      	beq.n	80051ba <HAL_GPIO_Init+0x216>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <HAL_GPIO_Init+0x260>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <HAL_GPIO_Init+0x212>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a17      	ldr	r2, [pc, #92]	@ (8005208 <HAL_GPIO_Init+0x264>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d101      	bne.n	80051b2 <HAL_GPIO_Init+0x20e>
 80051ae:	2309      	movs	r3, #9
 80051b0:	e02d      	b.n	800520e <HAL_GPIO_Init+0x26a>
 80051b2:	230a      	movs	r3, #10
 80051b4:	e02b      	b.n	800520e <HAL_GPIO_Init+0x26a>
 80051b6:	2308      	movs	r3, #8
 80051b8:	e029      	b.n	800520e <HAL_GPIO_Init+0x26a>
 80051ba:	2307      	movs	r3, #7
 80051bc:	e027      	b.n	800520e <HAL_GPIO_Init+0x26a>
 80051be:	2306      	movs	r3, #6
 80051c0:	e025      	b.n	800520e <HAL_GPIO_Init+0x26a>
 80051c2:	2305      	movs	r3, #5
 80051c4:	e023      	b.n	800520e <HAL_GPIO_Init+0x26a>
 80051c6:	2304      	movs	r3, #4
 80051c8:	e021      	b.n	800520e <HAL_GPIO_Init+0x26a>
 80051ca:	2303      	movs	r3, #3
 80051cc:	e01f      	b.n	800520e <HAL_GPIO_Init+0x26a>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e01d      	b.n	800520e <HAL_GPIO_Init+0x26a>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e01b      	b.n	800520e <HAL_GPIO_Init+0x26a>
 80051d6:	bf00      	nop
 80051d8:	58000080 	.word	0x58000080
 80051dc:	58024400 	.word	0x58024400
 80051e0:	58000400 	.word	0x58000400
 80051e4:	58020000 	.word	0x58020000
 80051e8:	58020400 	.word	0x58020400
 80051ec:	58020800 	.word	0x58020800
 80051f0:	58020c00 	.word	0x58020c00
 80051f4:	58021000 	.word	0x58021000
 80051f8:	58021400 	.word	0x58021400
 80051fc:	58021800 	.word	0x58021800
 8005200:	58021c00 	.word	0x58021c00
 8005204:	58022000 	.word	0x58022000
 8005208:	58022400 	.word	0x58022400
 800520c:	2300      	movs	r3, #0
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	f002 0203 	and.w	r2, r2, #3
 8005214:	0092      	lsls	r2, r2, #2
 8005216:	4093      	lsls	r3, r2
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800521e:	4938      	ldr	r1, [pc, #224]	@ (8005300 <HAL_GPIO_Init+0x35c>)
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	089b      	lsrs	r3, r3, #2
 8005224:	3302      	adds	r3, #2
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	43db      	mvns	r3, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4013      	ands	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005252:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800525a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	43db      	mvns	r3, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4013      	ands	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4013      	ands	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	3301      	adds	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f47f ae63 	bne.w	8004fb8 <HAL_GPIO_Init+0x14>
  }
}
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	3724      	adds	r7, #36	@ 0x24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	58000400 	.word	0x58000400

08005304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	807b      	strh	r3, [r7, #2]
 8005310:	4613      	mov	r3, r2
 8005312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005314:	787b      	ldrb	r3, [r7, #1]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800531a:	887a      	ldrh	r2, [r7, #2]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005320:	e003      	b.n	800532a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005322:	887b      	ldrh	r3, [r7, #2]
 8005324:	041a      	lsls	r2, r3, #16
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	619a      	str	r2, [r3, #24]
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	4603      	mov	r3, r0
 800533e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005344:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005350:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005354:	88fb      	ldrh	r3, [r7, #6]
 8005356:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	4618      	mov	r0, r3
 800535e:	f7fb feab 	bl	80010b8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e08b      	b.n	8005496 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fb fbd2 	bl	8000b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2224      	movs	r2, #36	@ 0x24
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d107      	bne.n	80053e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053e2:	609a      	str	r2, [r3, #8]
 80053e4:	e006      	b.n	80053f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80053f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d108      	bne.n	800540e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800540a:	605a      	str	r2, [r3, #4]
 800540c:	e007      	b.n	800541e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800541c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6859      	ldr	r1, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4b1d      	ldr	r3, [pc, #116]	@ (80054a0 <HAL_I2C_Init+0x134>)
 800542a:	430b      	orrs	r3, r1
 800542c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800543c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69d9      	ldr	r1, [r3, #28]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1a      	ldr	r2, [r3, #32]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	02008000 	.word	0x02008000

080054a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d138      	bne.n	800552c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e032      	b.n	800552e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2224      	movs	r2, #36	@ 0x24
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6819      	ldr	r1, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	e000      	b.n	800552e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800552c:	2302      	movs	r3, #2
  }
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b20      	cmp	r3, #32
 800554e:	d139      	bne.n	80055c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800555a:	2302      	movs	r3, #2
 800555c:	e033      	b.n	80055c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2224      	movs	r2, #36	@ 0x24
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800558c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e000      	b.n	80055c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80055dc:	4b29      	ldr	r3, [pc, #164]	@ (8005684 <HAL_PWREx_ConfigSupply+0xb0>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	2b06      	cmp	r3, #6
 80055e6:	d00a      	beq.n	80055fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055e8:	4b26      	ldr	r3, [pc, #152]	@ (8005684 <HAL_PWREx_ConfigSupply+0xb0>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d001      	beq.n	80055fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e040      	b.n	800567c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e03e      	b.n	800567c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055fe:	4b21      	ldr	r3, [pc, #132]	@ (8005684 <HAL_PWREx_ConfigSupply+0xb0>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005606:	491f      	ldr	r1, [pc, #124]	@ (8005684 <HAL_PWREx_ConfigSupply+0xb0>)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4313      	orrs	r3, r2
 800560c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800560e:	f7fc fc27 	bl	8001e60 <HAL_GetTick>
 8005612:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005614:	e009      	b.n	800562a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005616:	f7fc fc23 	bl	8001e60 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005624:	d901      	bls.n	800562a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e028      	b.n	800567c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800562a:	4b16      	ldr	r3, [pc, #88]	@ (8005684 <HAL_PWREx_ConfigSupply+0xb0>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005636:	d1ee      	bne.n	8005616 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b1e      	cmp	r3, #30
 800563c:	d008      	beq.n	8005650 <HAL_PWREx_ConfigSupply+0x7c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b2e      	cmp	r3, #46	@ 0x2e
 8005642:	d005      	beq.n	8005650 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b1d      	cmp	r3, #29
 8005648:	d002      	beq.n	8005650 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b2d      	cmp	r3, #45	@ 0x2d
 800564e:	d114      	bne.n	800567a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005650:	f7fc fc06 	bl	8001e60 <HAL_GetTick>
 8005654:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005656:	e009      	b.n	800566c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005658:	f7fc fc02 	bl	8001e60 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005666:	d901      	bls.n	800566c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e007      	b.n	800567c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800566c:	4b05      	ldr	r3, [pc, #20]	@ (8005684 <HAL_PWREx_ConfigSupply+0xb0>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005678:	d1ee      	bne.n	8005658 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	58024800 	.word	0x58024800

08005688 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	@ 0x30
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	f000 bc1f 	b.w	8005eda <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 80b3 	beq.w	8005810 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056aa:	4b95      	ldr	r3, [pc, #596]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056b4:	4b92      	ldr	r3, [pc, #584]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80056ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d007      	beq.n	80056d0 <HAL_RCC_OscConfig+0x48>
 80056c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c2:	2b18      	cmp	r3, #24
 80056c4:	d112      	bne.n	80056ec <HAL_RCC_OscConfig+0x64>
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d10d      	bne.n	80056ec <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d0:	4b8b      	ldr	r3, [pc, #556]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8098 	beq.w	800580e <HAL_RCC_OscConfig+0x186>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 8093 	bne.w	800580e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e3f6      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f4:	d106      	bne.n	8005704 <HAL_RCC_OscConfig+0x7c>
 80056f6:	4b82      	ldr	r3, [pc, #520]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a81      	ldr	r2, [pc, #516]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e058      	b.n	80057b6 <HAL_RCC_OscConfig+0x12e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d112      	bne.n	8005732 <HAL_RCC_OscConfig+0xaa>
 800570c:	4b7c      	ldr	r3, [pc, #496]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a7b      	ldr	r2, [pc, #492]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	4b79      	ldr	r3, [pc, #484]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a78      	ldr	r2, [pc, #480]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800571e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	4b76      	ldr	r3, [pc, #472]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a75      	ldr	r2, [pc, #468]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800572a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	e041      	b.n	80057b6 <HAL_RCC_OscConfig+0x12e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800573a:	d112      	bne.n	8005762 <HAL_RCC_OscConfig+0xda>
 800573c:	4b70      	ldr	r3, [pc, #448]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a6f      	ldr	r2, [pc, #444]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005742:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	4b6d      	ldr	r3, [pc, #436]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a6c      	ldr	r2, [pc, #432]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800574e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	4b6a      	ldr	r3, [pc, #424]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a69      	ldr	r2, [pc, #420]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800575a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	e029      	b.n	80057b6 <HAL_RCC_OscConfig+0x12e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800576a:	d112      	bne.n	8005792 <HAL_RCC_OscConfig+0x10a>
 800576c:	4b64      	ldr	r3, [pc, #400]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a63      	ldr	r2, [pc, #396]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005772:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	4b61      	ldr	r3, [pc, #388]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a60      	ldr	r2, [pc, #384]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800577e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	4b5e      	ldr	r3, [pc, #376]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a5d      	ldr	r2, [pc, #372]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800578a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e011      	b.n	80057b6 <HAL_RCC_OscConfig+0x12e>
 8005792:	4b5b      	ldr	r3, [pc, #364]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a5a      	ldr	r2, [pc, #360]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	4b58      	ldr	r3, [pc, #352]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a57      	ldr	r2, [pc, #348]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80057a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	4b55      	ldr	r3, [pc, #340]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a54      	ldr	r2, [pc, #336]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80057b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80057b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d013      	beq.n	80057e6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057be:	f7fc fb4f 	bl	8001e60 <HAL_GetTick>
 80057c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c6:	f7fc fb4b 	bl	8001e60 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b64      	cmp	r3, #100	@ 0x64
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e380      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057d8:	4b49      	ldr	r3, [pc, #292]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f0      	beq.n	80057c6 <HAL_RCC_OscConfig+0x13e>
 80057e4:	e014      	b.n	8005810 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e6:	f7fc fb3b 	bl	8001e60 <HAL_GetTick>
 80057ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ee:	f7fc fb37 	bl	8001e60 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b64      	cmp	r3, #100	@ 0x64
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e36c      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005800:	4b3f      	ldr	r3, [pc, #252]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f0      	bne.n	80057ee <HAL_RCC_OscConfig+0x166>
 800580c:	e000      	b.n	8005810 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800580e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 808c 	beq.w	8005936 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800581e:	4b38      	ldr	r3, [pc, #224]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005826:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005828:	4b35      	ldr	r3, [pc, #212]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_RCC_OscConfig+0x1bc>
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	2b18      	cmp	r3, #24
 8005838:	d137      	bne.n	80058aa <HAL_RCC_OscConfig+0x222>
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d132      	bne.n	80058aa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005844:	4b2e      	ldr	r3, [pc, #184]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_RCC_OscConfig+0x1d4>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e33e      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800585c:	4b28      	ldr	r3, [pc, #160]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f023 0219 	bic.w	r2, r3, #25
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4925      	ldr	r1, [pc, #148]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800586a:	4313      	orrs	r3, r2
 800586c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7fc faf7 	bl	8001e60 <HAL_GetTick>
 8005872:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005876:	f7fc faf3 	bl	8001e60 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e328      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005888:	4b1d      	ldr	r3, [pc, #116]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0f0      	beq.n	8005876 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005894:	4b1a      	ldr	r3, [pc, #104]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	4917      	ldr	r1, [pc, #92]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a8:	e045      	b.n	8005936 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d028      	beq.n	8005904 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058b2:	4b13      	ldr	r3, [pc, #76]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 0219 	bic.w	r2, r3, #25
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	4910      	ldr	r1, [pc, #64]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fc facc 	bl	8001e60 <HAL_GetTick>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058cc:	f7fc fac8 	bl	8001e60 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e2fd      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058de:	4b08      	ldr	r3, [pc, #32]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ea:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	061b      	lsls	r3, r3, #24
 80058f8:	4901      	ldr	r1, [pc, #4]	@ (8005900 <HAL_RCC_OscConfig+0x278>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	604b      	str	r3, [r1, #4]
 80058fe:	e01a      	b.n	8005936 <HAL_RCC_OscConfig+0x2ae>
 8005900:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005904:	4b97      	ldr	r3, [pc, #604]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a96      	ldr	r2, [pc, #600]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fc faa6 	bl	8001e60 <HAL_GetTick>
 8005914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005918:	f7fc faa2 	bl	8001e60 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e2d7      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800592a:	4b8e      	ldr	r3, [pc, #568]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f0      	bne.n	8005918 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b00      	cmp	r3, #0
 8005940:	d06a      	beq.n	8005a18 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005942:	4b88      	ldr	r3, [pc, #544]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800594a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800594c:	4b85      	ldr	r3, [pc, #532]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b08      	cmp	r3, #8
 8005956:	d007      	beq.n	8005968 <HAL_RCC_OscConfig+0x2e0>
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b18      	cmp	r3, #24
 800595c:	d11b      	bne.n	8005996 <HAL_RCC_OscConfig+0x30e>
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	2b01      	cmp	r3, #1
 8005966:	d116      	bne.n	8005996 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005968:	4b7e      	ldr	r3, [pc, #504]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_RCC_OscConfig+0x2f8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	2b80      	cmp	r3, #128	@ 0x80
 800597a:	d001      	beq.n	8005980 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e2ac      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005980:	4b78      	ldr	r3, [pc, #480]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	4975      	ldr	r1, [pc, #468]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005990:	4313      	orrs	r3, r2
 8005992:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005994:	e040      	b.n	8005a18 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d023      	beq.n	80059e6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800599e:	4b71      	ldr	r3, [pc, #452]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a70      	ldr	r2, [pc, #448]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 80059a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059aa:	f7fc fa59 	bl	8001e60 <HAL_GetTick>
 80059ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80059b2:	f7fc fa55 	bl	8001e60 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e28a      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059c4:	4b67      	ldr	r3, [pc, #412]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0f0      	beq.n	80059b2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059d0:	4b64      	ldr	r3, [pc, #400]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	061b      	lsls	r3, r3, #24
 80059de:	4961      	ldr	r1, [pc, #388]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60cb      	str	r3, [r1, #12]
 80059e4:	e018      	b.n	8005a18 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a5e      	ldr	r2, [pc, #376]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 80059ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f2:	f7fc fa35 	bl	8001e60 <HAL_GetTick>
 80059f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80059fa:	f7fc fa31 	bl	8001e60 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e266      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a0c:	4b55      	ldr	r3, [pc, #340]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f0      	bne.n	80059fa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d036      	beq.n	8005a92 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d019      	beq.n	8005a60 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a30:	4a4c      	ldr	r2, [pc, #304]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005a32:	f043 0301 	orr.w	r3, r3, #1
 8005a36:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a38:	f7fc fa12 	bl	8001e60 <HAL_GetTick>
 8005a3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a40:	f7fc fa0e 	bl	8001e60 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e243      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a52:	4b44      	ldr	r3, [pc, #272]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0f0      	beq.n	8005a40 <HAL_RCC_OscConfig+0x3b8>
 8005a5e:	e018      	b.n	8005a92 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a60:	4b40      	ldr	r3, [pc, #256]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a64:	4a3f      	ldr	r2, [pc, #252]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005a66:	f023 0301 	bic.w	r3, r3, #1
 8005a6a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fc f9f8 	bl	8001e60 <HAL_GetTick>
 8005a70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a74:	f7fc f9f4 	bl	8001e60 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e229      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a86:	4b37      	ldr	r3, [pc, #220]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d036      	beq.n	8005b0c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d019      	beq.n	8005ada <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2e      	ldr	r2, [pc, #184]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005aac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ab0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ab2:	f7fc f9d5 	bl	8001e60 <HAL_GetTick>
 8005ab6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ab8:	e008      	b.n	8005acc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aba:	f7fc f9d1 	bl	8001e60 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e206      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005acc:	4b25      	ldr	r3, [pc, #148]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCC_OscConfig+0x432>
 8005ad8:	e018      	b.n	8005b0c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ada:	4b22      	ldr	r3, [pc, #136]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a21      	ldr	r2, [pc, #132]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005ae0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ae4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ae6:	f7fc f9bb 	bl	8001e60 <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aee:	f7fc f9b7 	bl	8001e60 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e1ec      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b00:	4b18      	ldr	r3, [pc, #96]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f0      	bne.n	8005aee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80af 	beq.w	8005c78 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b1a:	4b13      	ldr	r3, [pc, #76]	@ (8005b68 <HAL_RCC_OscConfig+0x4e0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a12      	ldr	r2, [pc, #72]	@ (8005b68 <HAL_RCC_OscConfig+0x4e0>)
 8005b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b26:	f7fc f99b 	bl	8001e60 <HAL_GetTick>
 8005b2a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b2e:	f7fc f997 	bl	8001e60 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b64      	cmp	r3, #100	@ 0x64
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e1cc      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b40:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <HAL_RCC_OscConfig+0x4e0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d10b      	bne.n	8005b6c <HAL_RCC_OscConfig+0x4e4>
 8005b54:	4b03      	ldr	r3, [pc, #12]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b58:	4a02      	ldr	r2, [pc, #8]	@ (8005b64 <HAL_RCC_OscConfig+0x4dc>)
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b60:	e05b      	b.n	8005c1a <HAL_RCC_OscConfig+0x592>
 8005b62:	bf00      	nop
 8005b64:	58024400 	.word	0x58024400
 8005b68:	58024800 	.word	0x58024800
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d112      	bne.n	8005b9a <HAL_RCC_OscConfig+0x512>
 8005b74:	4b9d      	ldr	r3, [pc, #628]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b78:	4a9c      	ldr	r2, [pc, #624]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005b7a:	f023 0301 	bic.w	r3, r3, #1
 8005b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b80:	4b9a      	ldr	r3, [pc, #616]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b84:	4a99      	ldr	r2, [pc, #612]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b8c:	4b97      	ldr	r3, [pc, #604]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b90:	4a96      	ldr	r2, [pc, #600]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005b92:	f023 0304 	bic.w	r3, r3, #4
 8005b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b98:	e03f      	b.n	8005c1a <HAL_RCC_OscConfig+0x592>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	d112      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x540>
 8005ba2:	4b92      	ldr	r3, [pc, #584]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba6:	4a91      	ldr	r2, [pc, #580]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005ba8:	f043 0304 	orr.w	r3, r3, #4
 8005bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bae:	4b8f      	ldr	r3, [pc, #572]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb2:	4a8e      	ldr	r2, [pc, #568]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bba:	4b8c      	ldr	r3, [pc, #560]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bbe:	4a8b      	ldr	r2, [pc, #556]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bc6:	e028      	b.n	8005c1a <HAL_RCC_OscConfig+0x592>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b85      	cmp	r3, #133	@ 0x85
 8005bce:	d112      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x56e>
 8005bd0:	4b86      	ldr	r3, [pc, #536]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd4:	4a85      	ldr	r2, [pc, #532]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bd6:	f043 0304 	orr.w	r3, r3, #4
 8005bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bdc:	4b83      	ldr	r3, [pc, #524]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be0:	4a82      	ldr	r2, [pc, #520]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be8:	4b80      	ldr	r3, [pc, #512]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bec:	4a7f      	ldr	r2, [pc, #508]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bf4:	e011      	b.n	8005c1a <HAL_RCC_OscConfig+0x592>
 8005bf6:	4b7d      	ldr	r3, [pc, #500]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfa:	4a7c      	ldr	r2, [pc, #496]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c02:	4b7a      	ldr	r3, [pc, #488]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c06:	4a79      	ldr	r2, [pc, #484]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005c08:	f023 0304 	bic.w	r3, r3, #4
 8005c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c0e:	4b77      	ldr	r3, [pc, #476]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c12:	4a76      	ldr	r2, [pc, #472]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c18:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d015      	beq.n	8005c4e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c22:	f7fc f91d 	bl	8001e60 <HAL_GetTick>
 8005c26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c28:	e00a      	b.n	8005c40 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2a:	f7fc f919 	bl	8001e60 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e14c      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c40:	4b6a      	ldr	r3, [pc, #424]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0ee      	beq.n	8005c2a <HAL_RCC_OscConfig+0x5a2>
 8005c4c:	e014      	b.n	8005c78 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4e:	f7fc f907 	bl	8001e60 <HAL_GetTick>
 8005c52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c54:	e00a      	b.n	8005c6c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c56:	f7fc f903 	bl	8001e60 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e136      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1ee      	bne.n	8005c56 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 812b 	beq.w	8005ed8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c82:	4b5a      	ldr	r3, [pc, #360]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c8a:	2b18      	cmp	r3, #24
 8005c8c:	f000 80bb 	beq.w	8005e06 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	f040 8095 	bne.w	8005dc4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9a:	4b54      	ldr	r3, [pc, #336]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a53      	ldr	r2, [pc, #332]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005ca0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca6:	f7fc f8db 	bl	8001e60 <HAL_GetTick>
 8005caa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cae:	f7fc f8d7 	bl	8001e60 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e10c      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f0      	bne.n	8005cae <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ccc:	4b47      	ldr	r3, [pc, #284]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005cce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cd0:	4b47      	ldr	r3, [pc, #284]	@ (8005df0 <HAL_RCC_OscConfig+0x768>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cdc:	0112      	lsls	r2, r2, #4
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	4942      	ldr	r1, [pc, #264]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cea:	3b01      	subs	r3, #1
 8005cec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	025b      	lsls	r3, r3, #9
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	3b01      	subs	r3, #1
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	061b      	lsls	r3, r3, #24
 8005d12:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d16:	4935      	ldr	r1, [pc, #212]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005d1c:	4b33      	ldr	r3, [pc, #204]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	4a32      	ldr	r2, [pc, #200]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d28:	4b30      	ldr	r3, [pc, #192]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d2c:	4b31      	ldr	r3, [pc, #196]	@ (8005df4 <HAL_RCC_OscConfig+0x76c>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d34:	00d2      	lsls	r2, r2, #3
 8005d36:	492d      	ldr	r1, [pc, #180]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d40:	f023 020c 	bic.w	r2, r3, #12
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d48:	4928      	ldr	r1, [pc, #160]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d4e:	4b27      	ldr	r3, [pc, #156]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	f023 0202 	bic.w	r2, r3, #2
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5a:	4924      	ldr	r1, [pc, #144]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d60:	4b22      	ldr	r3, [pc, #136]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	4a21      	ldr	r2, [pc, #132]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d70:	4a1e      	ldr	r2, [pc, #120]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d78:	4b1c      	ldr	r3, [pc, #112]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005d84:	4b19      	ldr	r3, [pc, #100]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	4a18      	ldr	r2, [pc, #96]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d90:	4b16      	ldr	r3, [pc, #88]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a15      	ldr	r2, [pc, #84]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9c:	f7fc f860 	bl	8001e60 <HAL_GetTick>
 8005da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da4:	f7fc f85c 	bl	8001e60 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e091      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005db6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0x71c>
 8005dc2:	e089      	b.n	8005ed8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc4:	4b09      	ldr	r3, [pc, #36]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a08      	ldr	r2, [pc, #32]	@ (8005dec <HAL_RCC_OscConfig+0x764>)
 8005dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd0:	f7fc f846 	bl	8001e60 <HAL_GetTick>
 8005dd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dd6:	e00f      	b.n	8005df8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd8:	f7fc f842 	bl	8001e60 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d908      	bls.n	8005df8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e077      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
 8005dea:	bf00      	nop
 8005dec:	58024400 	.word	0x58024400
 8005df0:	fffffc0c 	.word	0xfffffc0c
 8005df4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005df8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ee4 <HAL_RCC_OscConfig+0x85c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e9      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x750>
 8005e04:	e068      	b.n	8005ed8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005e06:	4b37      	ldr	r3, [pc, #220]	@ (8005ee4 <HAL_RCC_OscConfig+0x85c>)
 8005e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e0c:	4b35      	ldr	r3, [pc, #212]	@ (8005ee4 <HAL_RCC_OscConfig+0x85c>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e10:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d031      	beq.n	8005e7e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f003 0203 	and.w	r2, r3, #3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d12a      	bne.n	8005e7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	091b      	lsrs	r3, r3, #4
 8005e2c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d122      	bne.n	8005e7e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e42:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d11a      	bne.n	8005e7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	0a5b      	lsrs	r3, r3, #9
 8005e4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e54:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d111      	bne.n	8005e7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d108      	bne.n	8005e7e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	0e1b      	lsrs	r3, r3, #24
 8005e70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d001      	beq.n	8005e82 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e02b      	b.n	8005eda <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005e82:	4b18      	ldr	r3, [pc, #96]	@ (8005ee4 <HAL_RCC_OscConfig+0x85c>)
 8005e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e86:	08db      	lsrs	r3, r3, #3
 8005e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e8c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d01f      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e98:	4b12      	ldr	r3, [pc, #72]	@ (8005ee4 <HAL_RCC_OscConfig+0x85c>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	4a11      	ldr	r2, [pc, #68]	@ (8005ee4 <HAL_RCC_OscConfig+0x85c>)
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ea4:	f7fb ffdc 	bl	8001e60 <HAL_GetTick>
 8005ea8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005eaa:	bf00      	nop
 8005eac:	f7fb ffd8 	bl	8001e60 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d0f9      	beq.n	8005eac <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <HAL_RCC_OscConfig+0x85c>)
 8005eba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <HAL_RCC_OscConfig+0x860>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ec4:	00d2      	lsls	r2, r2, #3
 8005ec6:	4907      	ldr	r1, [pc, #28]	@ (8005ee4 <HAL_RCC_OscConfig+0x85c>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005ecc:	4b05      	ldr	r3, [pc, #20]	@ (8005ee4 <HAL_RCC_OscConfig+0x85c>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed0:	4a04      	ldr	r2, [pc, #16]	@ (8005ee4 <HAL_RCC_OscConfig+0x85c>)
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3730      	adds	r7, #48	@ 0x30
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	ffff0007 	.word	0xffff0007

08005eec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e19c      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f00:	4b8a      	ldr	r3, [pc, #552]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d910      	bls.n	8005f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0e:	4b87      	ldr	r3, [pc, #540]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f023 020f 	bic.w	r2, r3, #15
 8005f16:	4985      	ldr	r1, [pc, #532]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f1e:	4b83      	ldr	r3, [pc, #524]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e184      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d010      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	4b7b      	ldr	r3, [pc, #492]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d908      	bls.n	8005f5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f4c:	4b78      	ldr	r3, [pc, #480]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	4975      	ldr	r1, [pc, #468]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d010      	beq.n	8005f8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	4b70      	ldr	r3, [pc, #448]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d908      	bls.n	8005f8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	496a      	ldr	r1, [pc, #424]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d010      	beq.n	8005fba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	4b64      	ldr	r3, [pc, #400]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d908      	bls.n	8005fba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005fa8:	4b61      	ldr	r3, [pc, #388]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	495e      	ldr	r1, [pc, #376]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d010      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69da      	ldr	r2, [r3, #28]
 8005fca:	4b59      	ldr	r3, [pc, #356]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d908      	bls.n	8005fe8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fd6:	4b56      	ldr	r3, [pc, #344]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	4953      	ldr	r1, [pc, #332]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d010      	beq.n	8006016 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	429a      	cmp	r2, r3
 8006002:	d908      	bls.n	8006016 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006004:	4b4a      	ldr	r3, [pc, #296]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f023 020f 	bic.w	r2, r3, #15
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4947      	ldr	r1, [pc, #284]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8006012:	4313      	orrs	r3, r2
 8006014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d055      	beq.n	80060ce <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006022:	4b43      	ldr	r3, [pc, #268]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	4940      	ldr	r1, [pc, #256]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8006030:	4313      	orrs	r3, r2
 8006032:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d107      	bne.n	800604c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800603c:	4b3c      	ldr	r3, [pc, #240]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d121      	bne.n	800608c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0f6      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d107      	bne.n	8006064 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006054:	4b36      	ldr	r3, [pc, #216]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d115      	bne.n	800608c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e0ea      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d107      	bne.n	800607c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800606c:	4b30      	ldr	r3, [pc, #192]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d109      	bne.n	800608c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0de      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800607c:	4b2c      	ldr	r3, [pc, #176]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e0d6      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800608c:	4b28      	ldr	r3, [pc, #160]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f023 0207 	bic.w	r2, r3, #7
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	4925      	ldr	r1, [pc, #148]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 800609a:	4313      	orrs	r3, r2
 800609c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609e:	f7fb fedf 	bl	8001e60 <HAL_GetTick>
 80060a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a4:	e00a      	b.n	80060bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a6:	f7fb fedb 	bl	8001e60 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e0be      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d1eb      	bne.n	80060a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d010      	beq.n	80060fc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	4b14      	ldr	r3, [pc, #80]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d208      	bcs.n	80060fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ea:	4b11      	ldr	r3, [pc, #68]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f023 020f 	bic.w	r2, r3, #15
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	490e      	ldr	r1, [pc, #56]	@ (8006130 <HAL_RCC_ClockConfig+0x244>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060fc:	4b0b      	ldr	r3, [pc, #44]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d214      	bcs.n	8006134 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610a:	4b08      	ldr	r3, [pc, #32]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f023 020f 	bic.w	r2, r3, #15
 8006112:	4906      	ldr	r1, [pc, #24]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	4313      	orrs	r3, r2
 8006118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800611a:	4b04      	ldr	r3, [pc, #16]	@ (800612c <HAL_RCC_ClockConfig+0x240>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d005      	beq.n	8006134 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e086      	b.n	800623a <HAL_RCC_ClockConfig+0x34e>
 800612c:	52002000 	.word	0x52002000
 8006130:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d010      	beq.n	8006162 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	4b3f      	ldr	r3, [pc, #252]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800614c:	429a      	cmp	r2, r3
 800614e:	d208      	bcs.n	8006162 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006150:	4b3c      	ldr	r3, [pc, #240]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	4939      	ldr	r1, [pc, #228]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 800615e:	4313      	orrs	r3, r2
 8006160:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d010      	beq.n	8006190 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	4b34      	ldr	r3, [pc, #208]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800617a:	429a      	cmp	r2, r3
 800617c:	d208      	bcs.n	8006190 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800617e:	4b31      	ldr	r3, [pc, #196]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	492e      	ldr	r1, [pc, #184]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 800618c:	4313      	orrs	r3, r2
 800618e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b00      	cmp	r3, #0
 800619a:	d010      	beq.n	80061be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	4b28      	ldr	r3, [pc, #160]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d208      	bcs.n	80061be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061ac:	4b25      	ldr	r3, [pc, #148]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	4922      	ldr	r1, [pc, #136]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d010      	beq.n	80061ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d208      	bcs.n	80061ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80061da:	4b1a      	ldr	r3, [pc, #104]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	4917      	ldr	r1, [pc, #92]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80061ec:	f000 f834 	bl	8006258 <HAL_RCC_GetSysClockFreq>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4b14      	ldr	r3, [pc, #80]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	4912      	ldr	r1, [pc, #72]	@ (8006248 <HAL_RCC_ClockConfig+0x35c>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
 8006208:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800620a:	4b0e      	ldr	r3, [pc, #56]	@ (8006244 <HAL_RCC_ClockConfig+0x358>)
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	4a0d      	ldr	r2, [pc, #52]	@ (8006248 <HAL_RCC_ClockConfig+0x35c>)
 8006214:	5cd3      	ldrb	r3, [r2, r3]
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	fa22 f303 	lsr.w	r3, r2, r3
 8006220:	4a0a      	ldr	r2, [pc, #40]	@ (800624c <HAL_RCC_ClockConfig+0x360>)
 8006222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006224:	4a0a      	ldr	r2, [pc, #40]	@ (8006250 <HAL_RCC_ClockConfig+0x364>)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800622a:	4b0a      	ldr	r3, [pc, #40]	@ (8006254 <HAL_RCC_ClockConfig+0x368>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7fb fdcc 	bl	8001dcc <HAL_InitTick>
 8006234:	4603      	mov	r3, r0
 8006236:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	58024400 	.word	0x58024400
 8006248:	0800ecb8 	.word	0x0800ecb8
 800624c:	24000004 	.word	0x24000004
 8006250:	24000000 	.word	0x24000000
 8006254:	24000008 	.word	0x24000008

08006258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006258:	b480      	push	{r7}
 800625a:	b089      	sub	sp, #36	@ 0x24
 800625c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800625e:	4bb3      	ldr	r3, [pc, #716]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006266:	2b18      	cmp	r3, #24
 8006268:	f200 8155 	bhi.w	8006516 <HAL_RCC_GetSysClockFreq+0x2be>
 800626c:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <HAL_RCC_GetSysClockFreq+0x1c>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	080062d9 	.word	0x080062d9
 8006278:	08006517 	.word	0x08006517
 800627c:	08006517 	.word	0x08006517
 8006280:	08006517 	.word	0x08006517
 8006284:	08006517 	.word	0x08006517
 8006288:	08006517 	.word	0x08006517
 800628c:	08006517 	.word	0x08006517
 8006290:	08006517 	.word	0x08006517
 8006294:	080062ff 	.word	0x080062ff
 8006298:	08006517 	.word	0x08006517
 800629c:	08006517 	.word	0x08006517
 80062a0:	08006517 	.word	0x08006517
 80062a4:	08006517 	.word	0x08006517
 80062a8:	08006517 	.word	0x08006517
 80062ac:	08006517 	.word	0x08006517
 80062b0:	08006517 	.word	0x08006517
 80062b4:	08006305 	.word	0x08006305
 80062b8:	08006517 	.word	0x08006517
 80062bc:	08006517 	.word	0x08006517
 80062c0:	08006517 	.word	0x08006517
 80062c4:	08006517 	.word	0x08006517
 80062c8:	08006517 	.word	0x08006517
 80062cc:	08006517 	.word	0x08006517
 80062d0:	08006517 	.word	0x08006517
 80062d4:	0800630b 	.word	0x0800630b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d8:	4b94      	ldr	r3, [pc, #592]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d009      	beq.n	80062f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062e4:	4b91      	ldr	r3, [pc, #580]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	08db      	lsrs	r3, r3, #3
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	4a90      	ldr	r2, [pc, #576]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062f0:	fa22 f303 	lsr.w	r3, r2, r3
 80062f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80062f6:	e111      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062f8:	4b8d      	ldr	r3, [pc, #564]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062fa:	61bb      	str	r3, [r7, #24]
      break;
 80062fc:	e10e      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80062fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006300:	61bb      	str	r3, [r7, #24]
      break;
 8006302:	e10b      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006304:	4b8c      	ldr	r3, [pc, #560]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006306:	61bb      	str	r3, [r7, #24]
      break;
 8006308:	e108      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800630a:	4b88      	ldr	r3, [pc, #544]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006314:	4b85      	ldr	r3, [pc, #532]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800631e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006320:	4b82      	ldr	r3, [pc, #520]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800632a:	4b80      	ldr	r3, [pc, #512]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800632c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632e:	08db      	lsrs	r3, r3, #3
 8006330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80e1 	beq.w	8006510 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b02      	cmp	r3, #2
 8006352:	f000 8083 	beq.w	800645c <HAL_RCC_GetSysClockFreq+0x204>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b02      	cmp	r3, #2
 800635a:	f200 80a1 	bhi.w	80064a0 <HAL_RCC_GetSysClockFreq+0x248>
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_RCC_GetSysClockFreq+0x114>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d056      	beq.n	8006418 <HAL_RCC_GetSysClockFreq+0x1c0>
 800636a:	e099      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800636c:	4b6f      	ldr	r3, [pc, #444]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d02d      	beq.n	80063d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006378:	4b6c      	ldr	r3, [pc, #432]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	08db      	lsrs	r3, r3, #3
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	4a6b      	ldr	r2, [pc, #428]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
 8006388:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	ee07 3a90 	vmov	s15, r3
 8006390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a2:	4b62      	ldr	r3, [pc, #392]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800653c <HAL_RCC_GetSysClockFreq+0x2e4>
 80063ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80063d2:	e087      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006540 <HAL_RCC_GetSysClockFreq+0x2e8>
 80063e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e6:	4b51      	ldr	r3, [pc, #324]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800653c <HAL_RCC_GetSysClockFreq+0x2e4>
 80063fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800640a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006416:	e065      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006422:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006544 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642a:	4b40      	ldr	r3, [pc, #256]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643a:	ed97 6a02 	vldr	s12, [r7, #8]
 800643e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800653c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800644e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800645a:	e043      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006466:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006548 <HAL_RCC_GetSysClockFreq+0x2f0>
 800646a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646e:	4b2f      	ldr	r3, [pc, #188]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006482:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800653c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800649e:	e021      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006544 <HAL_RCC_GetSysClockFreq+0x2ec>
 80064ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b2:	4b1e      	ldr	r3, [pc, #120]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800653c <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80064e4:	4b11      	ldr	r3, [pc, #68]	@ (800652c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e8:	0a5b      	lsrs	r3, r3, #9
 80064ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ee:	3301      	adds	r3, #1
 80064f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006508:	ee17 3a90 	vmov	r3, s15
 800650c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800650e:	e005      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	61bb      	str	r3, [r7, #24]
      break;
 8006514:	e002      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006516:	4b07      	ldr	r3, [pc, #28]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006518:	61bb      	str	r3, [r7, #24]
      break;
 800651a:	bf00      	nop
  }

  return sysclockfreq;
 800651c:	69bb      	ldr	r3, [r7, #24]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3724      	adds	r7, #36	@ 0x24
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	58024400 	.word	0x58024400
 8006530:	03d09000 	.word	0x03d09000
 8006534:	003d0900 	.word	0x003d0900
 8006538:	007a1200 	.word	0x007a1200
 800653c:	46000000 	.word	0x46000000
 8006540:	4c742400 	.word	0x4c742400
 8006544:	4a742400 	.word	0x4a742400
 8006548:	4af42400 	.word	0x4af42400

0800654c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006552:	f7ff fe81 	bl	8006258 <HAL_RCC_GetSysClockFreq>
 8006556:	4602      	mov	r2, r0
 8006558:	4b10      	ldr	r3, [pc, #64]	@ (800659c <HAL_RCC_GetHCLKFreq+0x50>)
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	0a1b      	lsrs	r3, r3, #8
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	490f      	ldr	r1, [pc, #60]	@ (80065a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006564:	5ccb      	ldrb	r3, [r1, r3]
 8006566:	f003 031f 	and.w	r3, r3, #31
 800656a:	fa22 f303 	lsr.w	r3, r2, r3
 800656e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006570:	4b0a      	ldr	r3, [pc, #40]	@ (800659c <HAL_RCC_GetHCLKFreq+0x50>)
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	4a09      	ldr	r2, [pc, #36]	@ (80065a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800657a:	5cd3      	ldrb	r3, [r2, r3]
 800657c:	f003 031f 	and.w	r3, r3, #31
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	4a07      	ldr	r2, [pc, #28]	@ (80065a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006588:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800658a:	4a07      	ldr	r2, [pc, #28]	@ (80065a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006590:	4b04      	ldr	r3, [pc, #16]	@ (80065a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006592:	681b      	ldr	r3, [r3, #0]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	58024400 	.word	0x58024400
 80065a0:	0800ecb8 	.word	0x0800ecb8
 80065a4:	24000004 	.word	0x24000004
 80065a8:	24000000 	.word	0x24000000

080065ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80065b0:	f7ff ffcc 	bl	800654c <HAL_RCC_GetHCLKFreq>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b06      	ldr	r3, [pc, #24]	@ (80065d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	4904      	ldr	r1, [pc, #16]	@ (80065d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	58024400 	.word	0x58024400
 80065d4:	0800ecb8 	.word	0x0800ecb8

080065d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80065dc:	f7ff ffb6 	bl	800654c <HAL_RCC_GetHCLKFreq>
 80065e0:	4602      	mov	r2, r0
 80065e2:	4b06      	ldr	r3, [pc, #24]	@ (80065fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	4904      	ldr	r1, [pc, #16]	@ (8006600 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065ee:	5ccb      	ldrb	r3, [r1, r3]
 80065f0:	f003 031f 	and.w	r3, r3, #31
 80065f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	58024400 	.word	0x58024400
 8006600:	0800ecb8 	.word	0x0800ecb8

08006604 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006608:	b0c8      	sub	sp, #288	@ 0x120
 800660a:	af00      	add	r7, sp, #0
 800660c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006610:	2300      	movs	r3, #0
 8006612:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006616:	2300      	movs	r3, #0
 8006618:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800661c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006628:	2500      	movs	r5, #0
 800662a:	ea54 0305 	orrs.w	r3, r4, r5
 800662e:	d049      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006636:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800663a:	d02f      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800663c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006640:	d828      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006642:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006646:	d01a      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006648:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800664c:	d822      	bhi.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006656:	d007      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006658:	e01c      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800665a:	4ba7      	ldr	r3, [pc, #668]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800665c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665e:	4aa6      	ldr	r2, [pc, #664]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006664:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006666:	e01a      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800666c:	3308      	adds	r3, #8
 800666e:	2102      	movs	r1, #2
 8006670:	4618      	mov	r0, r3
 8006672:	f001 fc43 	bl	8007efc <RCCEx_PLL2_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800667c:	e00f      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800667e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006682:	3328      	adds	r3, #40	@ 0x28
 8006684:	2102      	movs	r1, #2
 8006686:	4618      	mov	r0, r3
 8006688:	f001 fcea 	bl	8008060 <RCCEx_PLL3_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006692:	e004      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800669a:	e000      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800669c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800669e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80066a6:	4b94      	ldr	r3, [pc, #592]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80066ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066b4:	4a90      	ldr	r2, [pc, #576]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066b6:	430b      	orrs	r3, r1
 80066b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80066ba:	e003      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80066d0:	f04f 0900 	mov.w	r9, #0
 80066d4:	ea58 0309 	orrs.w	r3, r8, r9
 80066d8:	d047      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80066da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d82a      	bhi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80066e4:	a201      	add	r2, pc, #4	@ (adr r2, 80066ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006701 	.word	0x08006701
 80066f0:	0800670f 	.word	0x0800670f
 80066f4:	08006725 	.word	0x08006725
 80066f8:	08006743 	.word	0x08006743
 80066fc:	08006743 	.word	0x08006743
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006700:	4b7d      	ldr	r3, [pc, #500]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006704:	4a7c      	ldr	r2, [pc, #496]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800670a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800670c:	e01a      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800670e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006712:	3308      	adds	r3, #8
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f001 fbf0 	bl	8007efc <RCCEx_PLL2_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006722:	e00f      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006728:	3328      	adds	r3, #40	@ 0x28
 800672a:	2100      	movs	r1, #0
 800672c:	4618      	mov	r0, r3
 800672e:	f001 fc97 	bl	8008060 <RCCEx_PLL3_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006738:	e004      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006740:	e000      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006744:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800674c:	4b6a      	ldr	r3, [pc, #424]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800674e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006750:	f023 0107 	bic.w	r1, r3, #7
 8006754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675a:	4a67      	ldr	r2, [pc, #412]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800675c:	430b      	orrs	r3, r1
 800675e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006760:	e003      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006762:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006766:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800676a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006776:	f04f 0b00 	mov.w	fp, #0
 800677a:	ea5a 030b 	orrs.w	r3, sl, fp
 800677e:	d054      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006786:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800678a:	d036      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800678c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006790:	d82f      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006796:	d032      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800679c:	d829      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800679e:	2bc0      	cmp	r3, #192	@ 0xc0
 80067a0:	d02f      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80067a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80067a4:	d825      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80067a6:	2b80      	cmp	r3, #128	@ 0x80
 80067a8:	d018      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80067aa:	2b80      	cmp	r3, #128	@ 0x80
 80067ac:	d821      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80067b2:	2b40      	cmp	r3, #64	@ 0x40
 80067b4:	d007      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80067b6:	e01c      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b8:	4b4f      	ldr	r3, [pc, #316]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067bc:	4a4e      	ldr	r2, [pc, #312]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80067c4:	e01e      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ca:	3308      	adds	r3, #8
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 fb94 	bl	8007efc <RCCEx_PLL2_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80067da:	e013      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e0:	3328      	adds	r3, #40	@ 0x28
 80067e2:	2100      	movs	r1, #0
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 fc3b 	bl	8008060 <RCCEx_PLL3_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80067f0:	e008      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067f8:	e004      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80067fa:	bf00      	nop
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006804:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800680c:	4b3a      	ldr	r3, [pc, #232]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800680e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006810:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800681a:	4a37      	ldr	r2, [pc, #220]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800681c:	430b      	orrs	r3, r1
 800681e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006820:	e003      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006822:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006826:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800682a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006836:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800683a:	2300      	movs	r3, #0
 800683c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006840:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006844:	460b      	mov	r3, r1
 8006846:	4313      	orrs	r3, r2
 8006848:	d05c      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800684a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800684e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006850:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006854:	d03b      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006856:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800685a:	d834      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800685c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006860:	d037      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006866:	d82e      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006868:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800686c:	d033      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800686e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006872:	d828      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006878:	d01a      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800687e:	d822      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006888:	d007      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800688a:	e01c      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688c:	4b1a      	ldr	r3, [pc, #104]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800688e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006890:	4a19      	ldr	r2, [pc, #100]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006898:	e01e      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800689a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800689e:	3308      	adds	r3, #8
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 fb2a 	bl	8007efc <RCCEx_PLL2_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80068ae:	e013      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068b4:	3328      	adds	r3, #40	@ 0x28
 80068b6:	2100      	movs	r1, #0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 fbd1 	bl	8008060 <RCCEx_PLL3_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80068c4:	e008      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068cc:	e004      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80068ce:	bf00      	nop
 80068d0:	e002      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80068d2:	bf00      	nop
 80068d4:	e000      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80068d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10d      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80068e0:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80068e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ee:	4a02      	ldr	r2, [pc, #8]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068f0:	430b      	orrs	r3, r1
 80068f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80068f4:	e006      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80068f6:	bf00      	nop
 80068f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006900:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006910:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006914:	2300      	movs	r3, #0
 8006916:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800691a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800691e:	460b      	mov	r3, r1
 8006920:	4313      	orrs	r3, r2
 8006922:	d03a      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800692a:	2b30      	cmp	r3, #48	@ 0x30
 800692c:	d01f      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800692e:	2b30      	cmp	r3, #48	@ 0x30
 8006930:	d819      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006932:	2b20      	cmp	r3, #32
 8006934:	d00c      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006936:	2b20      	cmp	r3, #32
 8006938:	d815      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d019      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800693e:	2b10      	cmp	r3, #16
 8006940:	d111      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006942:	4bae      	ldr	r3, [pc, #696]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006946:	4aad      	ldr	r2, [pc, #692]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800694c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800694e:	e011      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006954:	3308      	adds	r3, #8
 8006956:	2102      	movs	r1, #2
 8006958:	4618      	mov	r0, r3
 800695a:	f001 facf 	bl	8007efc <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006964:	e006      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800696c:	e002      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800696e:	bf00      	nop
 8006970:	e000      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006974:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800697c:	4b9f      	ldr	r3, [pc, #636]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800697e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006980:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800698a:	4a9c      	ldr	r2, [pc, #624]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800698c:	430b      	orrs	r3, r1
 800698e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006990:	e003      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006992:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006996:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800699a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80069a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80069aa:	2300      	movs	r3, #0
 80069ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80069b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4313      	orrs	r3, r2
 80069b8:	d051      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80069ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069c4:	d035      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80069c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ca:	d82e      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80069cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069d0:	d031      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80069d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069d6:	d828      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80069d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069dc:	d01a      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80069de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069e2:	d822      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80069e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ec:	d007      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80069ee:	e01c      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f0:	4b82      	ldr	r3, [pc, #520]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f4:	4a81      	ldr	r2, [pc, #516]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069fc:	e01c      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a02:	3308      	adds	r3, #8
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 fa78 	bl	8007efc <RCCEx_PLL2_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a12:	e011      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a18:	3328      	adds	r3, #40	@ 0x28
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f001 fb1f 	bl	8008060 <RCCEx_PLL3_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a28:	e006      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a30:	e002      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006a32:	bf00      	nop
 8006a34:	e000      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a40:	4b6e      	ldr	r3, [pc, #440]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a44:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a4e:	4a6b      	ldr	r2, [pc, #428]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a50:	430b      	orrs	r3, r1
 8006a52:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a54:	e003      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a5a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	d053      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a88:	d033      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006a8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a8e:	d82c      	bhi.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a94:	d02f      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006a96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a9a:	d826      	bhi.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006aa0:	d02b      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006aa2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006aa6:	d820      	bhi.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aac:	d012      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ab2:	d81a      	bhi.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d022      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006abc:	d115      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 fa18 	bl	8007efc <RCCEx_PLL2_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ad2:	e015      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ad8:	3328      	adds	r3, #40	@ 0x28
 8006ada:	2101      	movs	r1, #1
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 fabf 	bl	8008060 <RCCEx_PLL3_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ae8:	e00a      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006af0:	e006      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006af2:	bf00      	nop
 8006af4:	e004      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006af6:	bf00      	nop
 8006af8:	e002      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006afa:	bf00      	nop
 8006afc:	e000      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b08:	4b3c      	ldr	r3, [pc, #240]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b16:	4a39      	ldr	r2, [pc, #228]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b1c:	e003      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006b32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b36:	2300      	movs	r3, #0
 8006b38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b3c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4313      	orrs	r3, r2
 8006b44:	d060      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b4e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006b52:	d039      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006b54:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006b58:	d832      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b5e:	d035      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b64:	d82c      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b6a:	d031      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b70:	d826      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b76:	d02d      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006b78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b7c:	d820      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b82:	d012      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b88:	d81a      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d024      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b92:	d115      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b98:	3308      	adds	r3, #8
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f001 f9ad 	bl	8007efc <RCCEx_PLL2_Config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ba8:	e017      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bae:	3328      	adds	r3, #40	@ 0x28
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f001 fa54 	bl	8008060 <RCCEx_PLL3_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006bbe:	e00c      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006bc6:	e008      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bc8:	bf00      	nop
 8006bca:	e006      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bcc:	bf00      	nop
 8006bce:	e004      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bd0:	bf00      	nop
 8006bd2:	e002      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bd4:	bf00      	nop
 8006bd6:	e000      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10e      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006be2:	4b06      	ldr	r3, [pc, #24]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006bf2:	4a02      	ldr	r2, [pc, #8]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bf8:	e006      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006bfa:	bf00      	nop
 8006bfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006c14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c22:	460b      	mov	r3, r1
 8006c24:	4313      	orrs	r3, r2
 8006c26:	d037      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c32:	d00e      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c38:	d816      	bhi.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d018      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006c3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c42:	d111      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c44:	4bc4      	ldr	r3, [pc, #784]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c48:	4ac3      	ldr	r2, [pc, #780]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c50:	e00f      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c56:	3308      	adds	r3, #8
 8006c58:	2101      	movs	r1, #1
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 f94e 	bl	8007efc <RCCEx_PLL2_Config>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c66:	e004      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c6e:	e000      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10a      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c7a:	4bb7      	ldr	r3, [pc, #732]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c7e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c88:	4ab3      	ldr	r2, [pc, #716]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c8a:	430b      	orrs	r3, r1
 8006c8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c8e:	e003      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006cae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	d039      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d81c      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006d05 	.word	0x08006d05
 8006ccc:	08006cd9 	.word	0x08006cd9
 8006cd0:	08006ce7 	.word	0x08006ce7
 8006cd4:	08006d05 	.word	0x08006d05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cd8:	4b9f      	ldr	r3, [pc, #636]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	4a9e      	ldr	r2, [pc, #632]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ce4:	e00f      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cea:	3308      	adds	r3, #8
 8006cec:	2102      	movs	r1, #2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 f904 	bl	8007efc <RCCEx_PLL2_Config>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cfa:	e004      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d02:	e000      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006d0e:	4b92      	ldr	r3, [pc, #584]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d12:	f023 0103 	bic.w	r1, r3, #3
 8006d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d1c:	4a8e      	ldr	r2, [pc, #568]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d22:	e003      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006d38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006d46:	460b      	mov	r3, r1
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f000 8099 	beq.w	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d4e:	4b83      	ldr	r3, [pc, #524]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a82      	ldr	r2, [pc, #520]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d5a:	f7fb f881 	bl	8001e60 <HAL_GetTick>
 8006d5e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d62:	e00b      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d64:	f7fb f87c 	bl	8001e60 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b64      	cmp	r3, #100	@ 0x64
 8006d72:	d903      	bls.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d7a:	e005      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d7c:	4b77      	ldr	r3, [pc, #476]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0ed      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006d88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d173      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d90:	4b71      	ldr	r3, [pc, #452]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d9c:	4053      	eors	r3, r2
 8006d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d015      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006da6:	4b6c      	ldr	r3, [pc, #432]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006db2:	4b69      	ldr	r3, [pc, #420]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db6:	4a68      	ldr	r2, [pc, #416]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dbc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dbe:	4b66      	ldr	r3, [pc, #408]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc2:	4a65      	ldr	r2, [pc, #404]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dc8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006dca:	4a63      	ldr	r2, [pc, #396]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dde:	d118      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de0:	f7fb f83e 	bl	8001e60 <HAL_GetTick>
 8006de4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006de8:	e00d      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dea:	f7fb f839 	bl	8001e60 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006df4:	1ad2      	subs	r2, r2, r3
 8006df6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d903      	bls.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006e04:	e005      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e06:	4b54      	ldr	r3, [pc, #336]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0eb      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006e12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d129      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e2a:	d10e      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e3c:	091a      	lsrs	r2, r3, #4
 8006e3e:	4b48      	ldr	r3, [pc, #288]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	4a45      	ldr	r2, [pc, #276]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e44:	430b      	orrs	r3, r1
 8006e46:	6113      	str	r3, [r2, #16]
 8006e48:	e005      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006e4a:	4b43      	ldr	r3, [pc, #268]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	4a42      	ldr	r2, [pc, #264]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e54:	6113      	str	r3, [r2, #16]
 8006e56:	4b40      	ldr	r3, [pc, #256]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e58:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e66:	4a3c      	ldr	r2, [pc, #240]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e6c:	e008      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e72:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006e76:	e003      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f002 0301 	and.w	r3, r2, #1
 8006e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e90:	2300      	movs	r3, #0
 8006e92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e96:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f000 8090 	beq.w	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eaa:	2b28      	cmp	r3, #40	@ 0x28
 8006eac:	d870      	bhi.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006eae:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006f99 	.word	0x08006f99
 8006eb8:	08006f91 	.word	0x08006f91
 8006ebc:	08006f91 	.word	0x08006f91
 8006ec0:	08006f91 	.word	0x08006f91
 8006ec4:	08006f91 	.word	0x08006f91
 8006ec8:	08006f91 	.word	0x08006f91
 8006ecc:	08006f91 	.word	0x08006f91
 8006ed0:	08006f91 	.word	0x08006f91
 8006ed4:	08006f65 	.word	0x08006f65
 8006ed8:	08006f91 	.word	0x08006f91
 8006edc:	08006f91 	.word	0x08006f91
 8006ee0:	08006f91 	.word	0x08006f91
 8006ee4:	08006f91 	.word	0x08006f91
 8006ee8:	08006f91 	.word	0x08006f91
 8006eec:	08006f91 	.word	0x08006f91
 8006ef0:	08006f91 	.word	0x08006f91
 8006ef4:	08006f7b 	.word	0x08006f7b
 8006ef8:	08006f91 	.word	0x08006f91
 8006efc:	08006f91 	.word	0x08006f91
 8006f00:	08006f91 	.word	0x08006f91
 8006f04:	08006f91 	.word	0x08006f91
 8006f08:	08006f91 	.word	0x08006f91
 8006f0c:	08006f91 	.word	0x08006f91
 8006f10:	08006f91 	.word	0x08006f91
 8006f14:	08006f99 	.word	0x08006f99
 8006f18:	08006f91 	.word	0x08006f91
 8006f1c:	08006f91 	.word	0x08006f91
 8006f20:	08006f91 	.word	0x08006f91
 8006f24:	08006f91 	.word	0x08006f91
 8006f28:	08006f91 	.word	0x08006f91
 8006f2c:	08006f91 	.word	0x08006f91
 8006f30:	08006f91 	.word	0x08006f91
 8006f34:	08006f99 	.word	0x08006f99
 8006f38:	08006f91 	.word	0x08006f91
 8006f3c:	08006f91 	.word	0x08006f91
 8006f40:	08006f91 	.word	0x08006f91
 8006f44:	08006f91 	.word	0x08006f91
 8006f48:	08006f91 	.word	0x08006f91
 8006f4c:	08006f91 	.word	0x08006f91
 8006f50:	08006f91 	.word	0x08006f91
 8006f54:	08006f99 	.word	0x08006f99
 8006f58:	58024400 	.word	0x58024400
 8006f5c:	58024800 	.word	0x58024800
 8006f60:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f68:	3308      	adds	r3, #8
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 ffc5 	bl	8007efc <RCCEx_PLL2_Config>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f78:	e00f      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f7e:	3328      	adds	r3, #40	@ 0x28
 8006f80:	2101      	movs	r1, #1
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 f86c 	bl	8008060 <RCCEx_PLL3_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f8e:	e004      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f96:	e000      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006fa2:	4bc0      	ldr	r3, [pc, #768]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fb2:	4abc      	ldr	r2, [pc, #752]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fb8:	e003      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f002 0302 	and.w	r3, r2, #2
 8006fce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006fd8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	d043      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fea:	2b05      	cmp	r3, #5
 8006fec:	d824      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006fee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007041 	.word	0x08007041
 8006ff8:	0800700d 	.word	0x0800700d
 8006ffc:	08007023 	.word	0x08007023
 8007000:	08007041 	.word	0x08007041
 8007004:	08007041 	.word	0x08007041
 8007008:	08007041 	.word	0x08007041
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800700c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007010:	3308      	adds	r3, #8
 8007012:	2101      	movs	r1, #1
 8007014:	4618      	mov	r0, r3
 8007016:	f000 ff71 	bl	8007efc <RCCEx_PLL2_Config>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007020:	e00f      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007026:	3328      	adds	r3, #40	@ 0x28
 8007028:	2101      	movs	r1, #1
 800702a:	4618      	mov	r0, r3
 800702c:	f001 f818 	bl	8008060 <RCCEx_PLL3_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007036:	e004      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800703e:	e000      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007042:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10b      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800704a:	4b96      	ldr	r3, [pc, #600]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800704c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800704e:	f023 0107 	bic.w	r1, r3, #7
 8007052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800705a:	4a92      	ldr	r2, [pc, #584]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800705c:	430b      	orrs	r3, r1
 800705e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007060:	e003      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007062:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007066:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800706a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007072:	f002 0304 	and.w	r3, r2, #4
 8007076:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800707a:	2300      	movs	r3, #0
 800707c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007080:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007084:	460b      	mov	r3, r1
 8007086:	4313      	orrs	r3, r2
 8007088:	d043      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800708a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800708e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007092:	2b05      	cmp	r3, #5
 8007094:	d824      	bhi.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007096:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070e9 	.word	0x080070e9
 80070a0:	080070b5 	.word	0x080070b5
 80070a4:	080070cb 	.word	0x080070cb
 80070a8:	080070e9 	.word	0x080070e9
 80070ac:	080070e9 	.word	0x080070e9
 80070b0:	080070e9 	.word	0x080070e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070b8:	3308      	adds	r3, #8
 80070ba:	2101      	movs	r1, #1
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 ff1d 	bl	8007efc <RCCEx_PLL2_Config>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070c8:	e00f      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ce:	3328      	adds	r3, #40	@ 0x28
 80070d0:	2101      	movs	r1, #1
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 ffc4 	bl	8008060 <RCCEx_PLL3_Config>
 80070d8:	4603      	mov	r3, r0
 80070da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070de:	e004      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80070e6:	e000      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80070e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10b      	bne.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070f2:	4b6c      	ldr	r3, [pc, #432]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f6:	f023 0107 	bic.w	r1, r3, #7
 80070fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007102:	4a68      	ldr	r2, [pc, #416]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007104:	430b      	orrs	r3, r1
 8007106:	6593      	str	r3, [r2, #88]	@ 0x58
 8007108:	e003      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800710e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f002 0320 	and.w	r3, r2, #32
 800711e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007122:	2300      	movs	r3, #0
 8007124:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007128:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800712c:	460b      	mov	r3, r1
 800712e:	4313      	orrs	r3, r2
 8007130:	d055      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007136:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800713a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800713e:	d033      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007140:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007144:	d82c      	bhi.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714a:	d02f      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007150:	d826      	bhi.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007152:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007156:	d02b      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007158:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800715c:	d820      	bhi.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800715e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007162:	d012      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007164:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007168:	d81a      	bhi.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d022      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800716e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007172:	d115      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007178:	3308      	adds	r3, #8
 800717a:	2100      	movs	r1, #0
 800717c:	4618      	mov	r0, r3
 800717e:	f000 febd 	bl	8007efc <RCCEx_PLL2_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007188:	e015      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800718a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800718e:	3328      	adds	r3, #40	@ 0x28
 8007190:	2102      	movs	r1, #2
 8007192:	4618      	mov	r0, r3
 8007194:	f000 ff64 	bl	8008060 <RCCEx_PLL3_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800719e:	e00a      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071a6:	e006      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80071a8:	bf00      	nop
 80071aa:	e004      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80071ac:	bf00      	nop
 80071ae:	e002      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80071b0:	bf00      	nop
 80071b2:	e000      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80071b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071be:	4b39      	ldr	r3, [pc, #228]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80071c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80071c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071ce:	4a35      	ldr	r2, [pc, #212]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80071d4:	e003      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80071ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071ee:	2300      	movs	r3, #0
 80071f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80071f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4313      	orrs	r3, r2
 80071fc:	d058      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80071fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007202:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007206:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800720a:	d033      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800720c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007210:	d82c      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007216:	d02f      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800721c:	d826      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800721e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007222:	d02b      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007224:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007228:	d820      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800722a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800722e:	d012      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007234:	d81a      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d022      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800723a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800723e:	d115      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007244:	3308      	adds	r3, #8
 8007246:	2100      	movs	r1, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fe57 	bl	8007efc <RCCEx_PLL2_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007254:	e015      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800725a:	3328      	adds	r3, #40	@ 0x28
 800725c:	2102      	movs	r1, #2
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fefe 	bl	8008060 <RCCEx_PLL3_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800726a:	e00a      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007272:	e006      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007274:	bf00      	nop
 8007276:	e004      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007278:	bf00      	nop
 800727a:	e002      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800727c:	bf00      	nop
 800727e:	e000      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007282:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10e      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800728a:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800728c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800728e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007296:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800729a:	4a02      	ldr	r2, [pc, #8]	@ (80072a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800729c:	430b      	orrs	r3, r1
 800729e:	6593      	str	r3, [r2, #88]	@ 0x58
 80072a0:	e006      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80072a2:	bf00      	nop
 80072a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80072b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80072bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072c0:	2300      	movs	r3, #0
 80072c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80072ca:	460b      	mov	r3, r1
 80072cc:	4313      	orrs	r3, r2
 80072ce:	d055      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80072d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80072d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80072dc:	d033      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80072de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80072e2:	d82c      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80072e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072e8:	d02f      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80072ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ee:	d826      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80072f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80072f4:	d02b      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80072f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80072fa:	d820      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80072fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007300:	d012      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007302:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007306:	d81a      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d022      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800730c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007310:	d115      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007316:	3308      	adds	r3, #8
 8007318:	2100      	movs	r1, #0
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fdee 	bl	8007efc <RCCEx_PLL2_Config>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007326:	e015      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800732c:	3328      	adds	r3, #40	@ 0x28
 800732e:	2102      	movs	r1, #2
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fe95 	bl	8008060 <RCCEx_PLL3_Config>
 8007336:	4603      	mov	r3, r0
 8007338:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800733c:	e00a      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007344:	e006      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007346:	bf00      	nop
 8007348:	e004      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800734a:	bf00      	nop
 800734c:	e002      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800734e:	bf00      	nop
 8007350:	e000      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007354:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10b      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800735c:	4ba1      	ldr	r3, [pc, #644]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800735e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007360:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007368:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800736c:	4a9d      	ldr	r2, [pc, #628]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800736e:	430b      	orrs	r3, r1
 8007370:	6593      	str	r3, [r2, #88]	@ 0x58
 8007372:	e003      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007374:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007378:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800737c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	f002 0308 	and.w	r3, r2, #8
 8007388:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800738c:	2300      	movs	r3, #0
 800738e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007392:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007396:	460b      	mov	r3, r1
 8007398:	4313      	orrs	r3, r2
 800739a:	d01e      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800739c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a8:	d10c      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ae:	3328      	adds	r3, #40	@ 0x28
 80073b0:	2102      	movs	r1, #2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fe54 	bl	8008060 <RCCEx_PLL3_Config>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80073c4:	4b87      	ldr	r3, [pc, #540]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073d4:	4a83      	ldr	r2, [pc, #524]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073d6:	430b      	orrs	r3, r1
 80073d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	f002 0310 	and.w	r3, r2, #16
 80073e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80073ea:	2300      	movs	r3, #0
 80073ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80073f4:	460b      	mov	r3, r1
 80073f6:	4313      	orrs	r3, r2
 80073f8:	d01e      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80073fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007406:	d10c      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800740c:	3328      	adds	r3, #40	@ 0x28
 800740e:	2102      	movs	r1, #2
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fe25 	bl	8008060 <RCCEx_PLL3_Config>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007422:	4b70      	ldr	r3, [pc, #448]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007426:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800742a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800742e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007432:	4a6c      	ldr	r2, [pc, #432]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007434:	430b      	orrs	r3, r1
 8007436:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007444:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007448:	2300      	movs	r3, #0
 800744a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800744e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007452:	460b      	mov	r3, r1
 8007454:	4313      	orrs	r3, r2
 8007456:	d03e      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800745c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007464:	d022      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800746a:	d81b      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007474:	d00b      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007476:	e015      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800747c:	3308      	adds	r3, #8
 800747e:	2100      	movs	r1, #0
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fd3b 	bl	8007efc <RCCEx_PLL2_Config>
 8007486:	4603      	mov	r3, r0
 8007488:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800748c:	e00f      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800748e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007492:	3328      	adds	r3, #40	@ 0x28
 8007494:	2102      	movs	r1, #2
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fde2 	bl	8008060 <RCCEx_PLL3_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80074a2:	e004      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80074aa:	e000      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80074ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10b      	bne.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074b6:	4b4b      	ldr	r3, [pc, #300]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80074be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80074c6:	4a47      	ldr	r2, [pc, #284]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074c8:	430b      	orrs	r3, r1
 80074ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80074cc:	e003      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80074e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074e4:	2300      	movs	r3, #0
 80074e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80074ec:	460b      	mov	r3, r1
 80074ee:	4313      	orrs	r3, r2
 80074f0:	d03b      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80074f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074fe:	d01f      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007500:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007504:	d818      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800750a:	d003      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800750c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007510:	d007      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007512:	e011      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007514:	4b33      	ldr	r3, [pc, #204]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007518:	4a32      	ldr	r2, [pc, #200]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800751a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800751e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007520:	e00f      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007526:	3328      	adds	r3, #40	@ 0x28
 8007528:	2101      	movs	r1, #1
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fd98 	bl	8008060 <RCCEx_PLL3_Config>
 8007530:	4603      	mov	r3, r0
 8007532:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007536:	e004      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800753e:	e000      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007542:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10b      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800754a:	4b26      	ldr	r3, [pc, #152]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800754c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800754e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755a:	4a22      	ldr	r2, [pc, #136]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800755c:	430b      	orrs	r3, r1
 800755e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007560:	e003      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007562:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007566:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800756a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007576:	673b      	str	r3, [r7, #112]	@ 0x70
 8007578:	2300      	movs	r3, #0
 800757a:	677b      	str	r3, [r7, #116]	@ 0x74
 800757c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007580:	460b      	mov	r3, r1
 8007582:	4313      	orrs	r3, r2
 8007584:	d034      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800758a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007594:	d007      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007596:	e011      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007598:	4b12      	ldr	r3, [pc, #72]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	4a11      	ldr	r2, [pc, #68]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800759e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80075a4:	e00e      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075aa:	3308      	adds	r3, #8
 80075ac:	2102      	movs	r1, #2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 fca4 	bl	8007efc <RCCEx_PLL2_Config>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80075ba:	e003      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80075c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10d      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80075cc:	4b05      	ldr	r3, [pc, #20]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80075ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075da:	4a02      	ldr	r2, [pc, #8]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80075dc:	430b      	orrs	r3, r1
 80075de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075e0:	e006      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80075e2:	bf00      	nop
 80075e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80075fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075fe:	2300      	movs	r3, #0
 8007600:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007602:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007606:	460b      	mov	r3, r1
 8007608:	4313      	orrs	r3, r2
 800760a:	d00c      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800760c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007610:	3328      	adds	r3, #40	@ 0x28
 8007612:	2102      	movs	r1, #2
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fd23 	bl	8008060 <RCCEx_PLL3_Config>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007632:	663b      	str	r3, [r7, #96]	@ 0x60
 8007634:	2300      	movs	r3, #0
 8007636:	667b      	str	r3, [r7, #100]	@ 0x64
 8007638:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800763c:	460b      	mov	r3, r1
 800763e:	4313      	orrs	r3, r2
 8007640:	d038      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800764a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800764e:	d018      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007650:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007654:	d811      	bhi.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800765a:	d014      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800765c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007660:	d80b      	bhi.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d011      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800766a:	d106      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800766c:	4bc3      	ldr	r3, [pc, #780]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800766e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007670:	4ac2      	ldr	r2, [pc, #776]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007678:	e008      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007680:	e004      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007682:	bf00      	nop
 8007684:	e002      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007686:	bf00      	nop
 8007688:	e000      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800768a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800768c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10b      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007694:	4bb9      	ldr	r3, [pc, #740]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007698:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800769c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a4:	4ab5      	ldr	r2, [pc, #724]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076a6:	430b      	orrs	r3, r1
 80076a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80076aa:	e003      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80076c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076c2:	2300      	movs	r3, #0
 80076c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80076ca:	460b      	mov	r3, r1
 80076cc:	4313      	orrs	r3, r2
 80076ce:	d009      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076d0:	4baa      	ldr	r3, [pc, #680]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80076d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076de:	4aa7      	ldr	r2, [pc, #668]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076e0:	430b      	orrs	r3, r1
 80076e2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80076f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80076f2:	2300      	movs	r3, #0
 80076f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80076f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80076fa:	460b      	mov	r3, r1
 80076fc:	4313      	orrs	r3, r2
 80076fe:	d009      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007700:	4b9e      	ldr	r3, [pc, #632]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007704:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800770c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770e:	4a9b      	ldr	r2, [pc, #620]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007710:	430b      	orrs	r3, r1
 8007712:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007722:	2300      	movs	r3, #0
 8007724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007726:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	d009      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007730:	4b92      	ldr	r3, [pc, #584]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007734:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8007738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800773c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800773e:	4a8f      	ldr	r2, [pc, #572]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007740:	430b      	orrs	r3, r1
 8007742:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007750:	643b      	str	r3, [r7, #64]	@ 0x40
 8007752:	2300      	movs	r3, #0
 8007754:	647b      	str	r3, [r7, #68]	@ 0x44
 8007756:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800775a:	460b      	mov	r3, r1
 800775c:	4313      	orrs	r3, r2
 800775e:	d00e      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007760:	4b86      	ldr	r3, [pc, #536]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	4a85      	ldr	r2, [pc, #532]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007766:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800776a:	6113      	str	r3, [r2, #16]
 800776c:	4b83      	ldr	r3, [pc, #524]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800776e:	6919      	ldr	r1, [r3, #16]
 8007770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007774:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007778:	4a80      	ldr	r2, [pc, #512]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800777a:	430b      	orrs	r3, r1
 800777c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800777e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007786:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800778a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800778c:	2300      	movs	r3, #0
 800778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007790:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007794:	460b      	mov	r3, r1
 8007796:	4313      	orrs	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800779a:	4b78      	ldr	r3, [pc, #480]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800779c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80077a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a8:	4a74      	ldr	r2, [pc, #464]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80077aa:	430b      	orrs	r3, r1
 80077ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80077ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80077bc:	2300      	movs	r3, #0
 80077be:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80077c4:	460b      	mov	r3, r1
 80077c6:	4313      	orrs	r3, r2
 80077c8:	d00a      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077ca:	4b6c      	ldr	r3, [pc, #432]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80077cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80077d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077da:	4a68      	ldr	r2, [pc, #416]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80077dc:	430b      	orrs	r3, r1
 80077de:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80077e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	2100      	movs	r1, #0
 80077ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80077f6:	460b      	mov	r3, r1
 80077f8:	4313      	orrs	r3, r2
 80077fa:	d011      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007800:	3308      	adds	r3, #8
 8007802:	2100      	movs	r1, #0
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fb79 	bl	8007efc <RCCEx_PLL2_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007810:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800781c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	2100      	movs	r1, #0
 800782a:	6239      	str	r1, [r7, #32]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
 8007832:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007836:	460b      	mov	r3, r1
 8007838:	4313      	orrs	r3, r2
 800783a:	d011      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800783c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007840:	3308      	adds	r3, #8
 8007842:	2101      	movs	r1, #1
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fb59 	bl	8007efc <RCCEx_PLL2_Config>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007850:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800785c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	2100      	movs	r1, #0
 800786a:	61b9      	str	r1, [r7, #24]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	61fb      	str	r3, [r7, #28]
 8007872:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007876:	460b      	mov	r3, r1
 8007878:	4313      	orrs	r3, r2
 800787a:	d011      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800787c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007880:	3308      	adds	r3, #8
 8007882:	2102      	movs	r1, #2
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fb39 	bl	8007efc <RCCEx_PLL2_Config>
 800788a:	4603      	mov	r3, r0
 800788c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007890:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007898:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800789c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80078a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	2100      	movs	r1, #0
 80078aa:	6139      	str	r1, [r7, #16]
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	617b      	str	r3, [r7, #20]
 80078b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80078b6:	460b      	mov	r3, r1
 80078b8:	4313      	orrs	r3, r2
 80078ba:	d011      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078c0:	3328      	adds	r3, #40	@ 0x28
 80078c2:	2100      	movs	r1, #0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fbcb 	bl	8008060 <RCCEx_PLL3_Config>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80078d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80078e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	2100      	movs	r1, #0
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80078f6:	460b      	mov	r3, r1
 80078f8:	4313      	orrs	r3, r2
 80078fa:	d011      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007900:	3328      	adds	r3, #40	@ 0x28
 8007902:	2101      	movs	r1, #1
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fbab 	bl	8008060 <RCCEx_PLL3_Config>
 800790a:	4603      	mov	r3, r0
 800790c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007910:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007918:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800791c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	2100      	movs	r1, #0
 800792a:	6039      	str	r1, [r7, #0]
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	607b      	str	r3, [r7, #4]
 8007932:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007936:	460b      	mov	r3, r1
 8007938:	4313      	orrs	r3, r2
 800793a:	d011      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800793c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007940:	3328      	adds	r3, #40	@ 0x28
 8007942:	2102      	movs	r1, #2
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fb8b 	bl	8008060 <RCCEx_PLL3_Config>
 800794a:	4603      	mov	r3, r0
 800794c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007950:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800795c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007960:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	e000      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
}
 800796e:	4618      	mov	r0, r3
 8007970:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007974:	46bd      	mov	sp, r7
 8007976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800797a:	bf00      	nop
 800797c:	58024400 	.word	0x58024400

08007980 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007984:	f7fe fde2 	bl	800654c <HAL_RCC_GetHCLKFreq>
 8007988:	4602      	mov	r2, r0
 800798a:	4b06      	ldr	r3, [pc, #24]	@ (80079a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	091b      	lsrs	r3, r3, #4
 8007990:	f003 0307 	and.w	r3, r3, #7
 8007994:	4904      	ldr	r1, [pc, #16]	@ (80079a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007996:	5ccb      	ldrb	r3, [r1, r3]
 8007998:	f003 031f 	and.w	r3, r3, #31
 800799c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	58024400 	.word	0x58024400
 80079a8:	0800ecb8 	.word	0x0800ecb8

080079ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b089      	sub	sp, #36	@ 0x24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079b4:	4ba1      	ldr	r3, [pc, #644]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80079be:	4b9f      	ldr	r3, [pc, #636]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c2:	0b1b      	lsrs	r3, r3, #12
 80079c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80079ca:	4b9c      	ldr	r3, [pc, #624]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ce:	091b      	lsrs	r3, r3, #4
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80079d6:	4b99      	ldr	r3, [pc, #612]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079da:	08db      	lsrs	r3, r3, #3
 80079dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	fb02 f303 	mul.w	r3, r2, r3
 80079e6:	ee07 3a90 	vmov	s15, r3
 80079ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8111 	beq.w	8007c1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	f000 8083 	beq.w	8007b08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	f200 80a1 	bhi.w	8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d056      	beq.n	8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007a16:	e099      	b.n	8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a18:	4b88      	ldr	r3, [pc, #544]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d02d      	beq.n	8007a80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a24:	4b85      	ldr	r3, [pc, #532]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	08db      	lsrs	r3, r3, #3
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	4a84      	ldr	r2, [pc, #528]	@ (8007c40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a30:	fa22 f303 	lsr.w	r3, r2, r3
 8007a34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	ee07 3a90 	vmov	s15, r3
 8007a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a4e:	4b7b      	ldr	r3, [pc, #492]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a7e:	e087      	b.n	8007b90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a92:	4b6a      	ldr	r3, [pc, #424]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ac2:	e065      	b.n	8007b90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ace:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad6:	4b59      	ldr	r3, [pc, #356]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b06:	e043      	b.n	8007b90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1a:	4b48      	ldr	r3, [pc, #288]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b4a:	e021      	b.n	8007b90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5e:	4b37      	ldr	r3, [pc, #220]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b66:	ee07 3a90 	vmov	s15, r3
 8007b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b90:	4b2a      	ldr	r3, [pc, #168]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b94:	0a5b      	lsrs	r3, r3, #9
 8007b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bb6:	ee17 2a90 	vmov	r2, s15
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc2:	0c1b      	lsrs	r3, r3, #16
 8007bc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bc8:	ee07 3a90 	vmov	s15, r3
 8007bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be4:	ee17 2a90 	vmov	r2, s15
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007bec:	4b13      	ldr	r3, [pc, #76]	@ (8007c3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf0:	0e1b      	lsrs	r3, r3, #24
 8007bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c12:	ee17 2a90 	vmov	r2, s15
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c1a:	e008      	b.n	8007c2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	609a      	str	r2, [r3, #8]
}
 8007c2e:	bf00      	nop
 8007c30:	3724      	adds	r7, #36	@ 0x24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	58024400 	.word	0x58024400
 8007c40:	03d09000 	.word	0x03d09000
 8007c44:	46000000 	.word	0x46000000
 8007c48:	4c742400 	.word	0x4c742400
 8007c4c:	4a742400 	.word	0x4a742400
 8007c50:	4af42400 	.word	0x4af42400

08007c54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b089      	sub	sp, #36	@ 0x24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c5c:	4ba1      	ldr	r3, [pc, #644]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c66:	4b9f      	ldr	r3, [pc, #636]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6a:	0d1b      	lsrs	r3, r3, #20
 8007c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c72:	4b9c      	ldr	r3, [pc, #624]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c76:	0a1b      	lsrs	r3, r3, #8
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c7e:	4b99      	ldr	r3, [pc, #612]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	fb02 f303 	mul.w	r3, r2, r3
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 8111 	beq.w	8007ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	f000 8083 	beq.w	8007db0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	f200 80a1 	bhi.w	8007df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d056      	beq.n	8007d6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007cbe:	e099      	b.n	8007df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cc0:	4b88      	ldr	r3, [pc, #544]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02d      	beq.n	8007d28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ccc:	4b85      	ldr	r3, [pc, #532]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	08db      	lsrs	r3, r3, #3
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	4a84      	ldr	r2, [pc, #528]	@ (8007ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	ee07 3a90 	vmov	s15, r3
 8007ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d26:	e087      	b.n	8007e38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d6a:	e065      	b.n	8007e38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7e:	4b59      	ldr	r3, [pc, #356]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d86:	ee07 3a90 	vmov	s15, r3
 8007d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dae:	e043      	b.n	8007e38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc2:	4b48      	ldr	r3, [pc, #288]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007df2:	e021      	b.n	8007e38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e06:	4b37      	ldr	r3, [pc, #220]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007e38:	4b2a      	ldr	r3, [pc, #168]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3c:	0a5b      	lsrs	r3, r3, #9
 8007e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e42:	ee07 3a90 	vmov	s15, r3
 8007e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e5e:	ee17 2a90 	vmov	r2, s15
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e66:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6a:	0c1b      	lsrs	r3, r3, #16
 8007e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e70:	ee07 3a90 	vmov	s15, r3
 8007e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e8c:	ee17 2a90 	vmov	r2, s15
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e94:	4b13      	ldr	r3, [pc, #76]	@ (8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e98:	0e1b      	lsrs	r3, r3, #24
 8007e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eba:	ee17 2a90 	vmov	r2, s15
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	609a      	str	r2, [r3, #8]
}
 8007ed6:	bf00      	nop
 8007ed8:	3724      	adds	r7, #36	@ 0x24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	58024400 	.word	0x58024400
 8007ee8:	03d09000 	.word	0x03d09000
 8007eec:	46000000 	.word	0x46000000
 8007ef0:	4c742400 	.word	0x4c742400
 8007ef4:	4a742400 	.word	0x4a742400
 8007ef8:	4af42400 	.word	0x4af42400

08007efc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f0a:	4b53      	ldr	r3, [pc, #332]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d101      	bne.n	8007f1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e099      	b.n	800804e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f1a:	4b4f      	ldr	r3, [pc, #316]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a4e      	ldr	r2, [pc, #312]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007f20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f26:	f7f9 ff9b 	bl	8001e60 <HAL_GetTick>
 8007f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f2c:	e008      	b.n	8007f40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f2e:	f7f9 ff97 	bl	8001e60 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d901      	bls.n	8007f40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e086      	b.n	800804e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f40:	4b45      	ldr	r3, [pc, #276]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1f0      	bne.n	8007f2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f4c:	4b42      	ldr	r3, [pc, #264]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	031b      	lsls	r3, r3, #12
 8007f5a:	493f      	ldr	r1, [pc, #252]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	025b      	lsls	r3, r3, #9
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	041b      	lsls	r3, r3, #16
 8007f7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	061b      	lsls	r3, r3, #24
 8007f8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f90:	4931      	ldr	r1, [pc, #196]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f96:	4b30      	ldr	r3, [pc, #192]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	492d      	ldr	r1, [pc, #180]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fac:	f023 0220 	bic.w	r2, r3, #32
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	4928      	ldr	r1, [pc, #160]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007fba:	4b27      	ldr	r3, [pc, #156]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fbe:	4a26      	ldr	r2, [pc, #152]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007fc0:	f023 0310 	bic.w	r3, r3, #16
 8007fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fc6:	4b24      	ldr	r3, [pc, #144]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007fc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fca:	4b24      	ldr	r3, [pc, #144]	@ (800805c <RCCEx_PLL2_Config+0x160>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	69d2      	ldr	r2, [r2, #28]
 8007fd2:	00d2      	lsls	r2, r2, #3
 8007fd4:	4920      	ldr	r1, [pc, #128]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007fda:	4b1f      	ldr	r3, [pc, #124]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fde:	4a1e      	ldr	r2, [pc, #120]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007fe0:	f043 0310 	orr.w	r3, r3, #16
 8007fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007fec:	4b1a      	ldr	r3, [pc, #104]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	4a19      	ldr	r2, [pc, #100]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8007ff2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ff8:	e00f      	b.n	800801a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d106      	bne.n	800800e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008000:	4b15      	ldr	r3, [pc, #84]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8008002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008004:	4a14      	ldr	r2, [pc, #80]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8008006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800800a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800800c:	e005      	b.n	800801a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800800e:	4b12      	ldr	r3, [pc, #72]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8008010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008012:	4a11      	ldr	r2, [pc, #68]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8008014:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008018:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800801a:	4b0f      	ldr	r3, [pc, #60]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a0e      	ldr	r2, [pc, #56]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8008020:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008026:	f7f9 ff1b 	bl	8001e60 <HAL_GetTick>
 800802a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800802c:	e008      	b.n	8008040 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800802e:	f7f9 ff17 	bl	8001e60 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d901      	bls.n	8008040 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e006      	b.n	800804e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008040:	4b05      	ldr	r3, [pc, #20]	@ (8008058 <RCCEx_PLL2_Config+0x15c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0f0      	beq.n	800802e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800804c:	7bfb      	ldrb	r3, [r7, #15]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	58024400 	.word	0x58024400
 800805c:	ffff0007 	.word	0xffff0007

08008060 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800806e:	4b53      	ldr	r3, [pc, #332]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b03      	cmp	r3, #3
 8008078:	d101      	bne.n	800807e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e099      	b.n	80081b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800807e:	4b4f      	ldr	r3, [pc, #316]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a4e      	ldr	r2, [pc, #312]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800808a:	f7f9 fee9 	bl	8001e60 <HAL_GetTick>
 800808e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008090:	e008      	b.n	80080a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008092:	f7f9 fee5 	bl	8001e60 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e086      	b.n	80081b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080a4:	4b45      	ldr	r3, [pc, #276]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f0      	bne.n	8008092 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80080b0:	4b42      	ldr	r3, [pc, #264]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 80080b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	051b      	lsls	r3, r3, #20
 80080be:	493f      	ldr	r1, [pc, #252]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	025b      	lsls	r3, r3, #9
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	3b01      	subs	r3, #1
 80080e0:	041b      	lsls	r3, r3, #16
 80080e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	061b      	lsls	r3, r3, #24
 80080f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080f4:	4931      	ldr	r1, [pc, #196]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80080fa:	4b30      	ldr	r3, [pc, #192]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 80080fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	492d      	ldr	r1, [pc, #180]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008108:	4313      	orrs	r3, r2
 800810a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800810c:	4b2b      	ldr	r3, [pc, #172]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	4928      	ldr	r1, [pc, #160]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 800811a:	4313      	orrs	r3, r2
 800811c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800811e:	4b27      	ldr	r3, [pc, #156]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	4a26      	ldr	r2, [pc, #152]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008128:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800812a:	4b24      	ldr	r3, [pc, #144]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 800812c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800812e:	4b24      	ldr	r3, [pc, #144]	@ (80081c0 <RCCEx_PLL3_Config+0x160>)
 8008130:	4013      	ands	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	69d2      	ldr	r2, [r2, #28]
 8008136:	00d2      	lsls	r2, r2, #3
 8008138:	4920      	ldr	r1, [pc, #128]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 800813a:	4313      	orrs	r3, r2
 800813c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800813e:	4b1f      	ldr	r3, [pc, #124]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	4a1e      	ldr	r2, [pc, #120]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d106      	bne.n	800815e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008150:	4b1a      	ldr	r3, [pc, #104]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	4a19      	ldr	r2, [pc, #100]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008156:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800815a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800815c:	e00f      	b.n	800817e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d106      	bne.n	8008172 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008164:	4b15      	ldr	r3, [pc, #84]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008168:	4a14      	ldr	r2, [pc, #80]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 800816a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800816e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008170:	e005      	b.n	800817e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008172:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008176:	4a11      	ldr	r2, [pc, #68]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008178:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800817c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800817e:	4b0f      	ldr	r3, [pc, #60]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a0e      	ldr	r2, [pc, #56]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 8008184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800818a:	f7f9 fe69 	bl	8001e60 <HAL_GetTick>
 800818e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008190:	e008      	b.n	80081a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008192:	f7f9 fe65 	bl	8001e60 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e006      	b.n	80081b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081a4:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <RCCEx_PLL3_Config+0x15c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0f0      	beq.n	8008192 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
 80081c0:	ffff0007 	.word	0xffff0007

080081c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e10f      	b.n	80083f6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a87      	ldr	r2, [pc, #540]	@ (8008400 <HAL_SPI_Init+0x23c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d00f      	beq.n	8008206 <HAL_SPI_Init+0x42>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a86      	ldr	r2, [pc, #536]	@ (8008404 <HAL_SPI_Init+0x240>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00a      	beq.n	8008206 <HAL_SPI_Init+0x42>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a84      	ldr	r2, [pc, #528]	@ (8008408 <HAL_SPI_Init+0x244>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d005      	beq.n	8008206 <HAL_SPI_Init+0x42>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	2b0f      	cmp	r3, #15
 8008200:	d901      	bls.n	8008206 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e0f7      	b.n	80083f6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 ff76 	bl	80090f8 <SPI_GetPacketSize>
 800820c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a7b      	ldr	r2, [pc, #492]	@ (8008400 <HAL_SPI_Init+0x23c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00c      	beq.n	8008232 <HAL_SPI_Init+0x6e>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a79      	ldr	r2, [pc, #484]	@ (8008404 <HAL_SPI_Init+0x240>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d007      	beq.n	8008232 <HAL_SPI_Init+0x6e>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a78      	ldr	r2, [pc, #480]	@ (8008408 <HAL_SPI_Init+0x244>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d002      	beq.n	8008232 <HAL_SPI_Init+0x6e>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b08      	cmp	r3, #8
 8008230:	d811      	bhi.n	8008256 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008236:	4a72      	ldr	r2, [pc, #456]	@ (8008400 <HAL_SPI_Init+0x23c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d009      	beq.n	8008250 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a70      	ldr	r2, [pc, #448]	@ (8008404 <HAL_SPI_Init+0x240>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d004      	beq.n	8008250 <HAL_SPI_Init+0x8c>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a6f      	ldr	r2, [pc, #444]	@ (8008408 <HAL_SPI_Init+0x244>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d104      	bne.n	800825a <HAL_SPI_Init+0x96>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b10      	cmp	r3, #16
 8008254:	d901      	bls.n	800825a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e0cd      	b.n	80083f6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7f8 ffc4 	bl	80011fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0201 	bic.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008296:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80082a0:	d119      	bne.n	80082d6 <HAL_SPI_Init+0x112>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082aa:	d103      	bne.n	80082b4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d008      	beq.n	80082c6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10c      	bne.n	80082d6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80082c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082c4:	d107      	bne.n	80082d6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80082d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00f      	beq.n	8008302 <HAL_SPI_Init+0x13e>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	2b06      	cmp	r3, #6
 80082e8:	d90b      	bls.n	8008302 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	e007      	b.n	8008312 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008310:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	69da      	ldr	r2, [r3, #28]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831a:	431a      	orrs	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	431a      	orrs	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008324:	ea42 0103 	orr.w	r1, r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008372:	ea42 0103 	orr.w	r1, r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d113      	bne.n	80083b2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800839c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80083b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f022 0201 	bic.w	r2, r2, #1
 80083c0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40013000 	.word	0x40013000
 8008404:	40003800 	.word	0x40003800
 8008408:	40003c00 	.word	0x40003c00

0800840c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af02      	add	r7, sp, #8
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	4613      	mov	r3, r2
 800841a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3320      	adds	r3, #32
 8008422:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008424:	f7f9 fd1c 	bl	8001e60 <HAL_GetTick>
 8008428:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b01      	cmp	r3, #1
 8008434:	d001      	beq.n	800843a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008436:	2302      	movs	r3, #2
 8008438:	e1d1      	b.n	80087de <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <HAL_SPI_Transmit+0x3a>
 8008440:	88fb      	ldrh	r3, [r7, #6]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e1c9      	b.n	80087de <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008450:	2b01      	cmp	r3, #1
 8008452:	d101      	bne.n	8008458 <HAL_SPI_Transmit+0x4c>
 8008454:	2302      	movs	r3, #2
 8008456:	e1c2      	b.n	80087de <HAL_SPI_Transmit+0x3d2>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2203      	movs	r2, #3
 8008464:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	88fa      	ldrh	r2, [r7, #6]
 800847a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80084b0:	d108      	bne.n	80084c4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	e009      	b.n	80084d8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80084d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	4b96      	ldr	r3, [pc, #600]	@ (8008738 <HAL_SPI_Transmit+0x32c>)
 80084e0:	4013      	ands	r3, r2
 80084e2:	88f9      	ldrh	r1, [r7, #6]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	6812      	ldr	r2, [r2, #0]
 80084e8:	430b      	orrs	r3, r1
 80084ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0201 	orr.w	r2, r2, #1
 80084fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008504:	d107      	bne.n	8008516 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	2b0f      	cmp	r3, #15
 800851c:	d947      	bls.n	80085ae <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800851e:	e03f      	b.n	80085a0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b02      	cmp	r3, #2
 800852c:	d114      	bne.n	8008558 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6812      	ldr	r2, [r2, #0]
 8008538:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800853e:	1d1a      	adds	r2, r3, #4
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800854a:	b29b      	uxth	r3, r3
 800854c:	3b01      	subs	r3, #1
 800854e:	b29a      	uxth	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008556:	e023      	b.n	80085a0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008558:	f7f9 fc82 	bl	8001e60 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d803      	bhi.n	8008570 <HAL_SPI_Transmit+0x164>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856e:	d102      	bne.n	8008576 <HAL_SPI_Transmit+0x16a>
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d114      	bne.n	80085a0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 fcf0 	bl	8008f5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008582:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e11e      	b.n	80087de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1b9      	bne.n	8008520 <HAL_SPI_Transmit+0x114>
 80085ac:	e0f1      	b.n	8008792 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	2b07      	cmp	r3, #7
 80085b4:	f240 80e6 	bls.w	8008784 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80085b8:	e05d      	b.n	8008676 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d132      	bne.n	800862e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d918      	bls.n	8008606 <HAL_SPI_Transmit+0x1fa>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d014      	beq.n	8008606 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6812      	ldr	r2, [r2, #0]
 80085e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085ec:	1d1a      	adds	r2, r3, #4
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	3b02      	subs	r3, #2
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008604:	e037      	b.n	8008676 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800860a:	881a      	ldrh	r2, [r3, #0]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008614:	1c9a      	adds	r2, r3, #2
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008620:	b29b      	uxth	r3, r3
 8008622:	3b01      	subs	r3, #1
 8008624:	b29a      	uxth	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800862c:	e023      	b.n	8008676 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800862e:	f7f9 fc17 	bl	8001e60 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d803      	bhi.n	8008646 <HAL_SPI_Transmit+0x23a>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008644:	d102      	bne.n	800864c <HAL_SPI_Transmit+0x240>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d114      	bne.n	8008676 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 fc85 	bl	8008f5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008658:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e0b3      	b.n	80087de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800867c:	b29b      	uxth	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d19b      	bne.n	80085ba <HAL_SPI_Transmit+0x1ae>
 8008682:	e086      	b.n	8008792 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b02      	cmp	r3, #2
 8008690:	d154      	bne.n	800873c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008698:	b29b      	uxth	r3, r3
 800869a:	2b03      	cmp	r3, #3
 800869c:	d918      	bls.n	80086d0 <HAL_SPI_Transmit+0x2c4>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a2:	2b40      	cmp	r3, #64	@ 0x40
 80086a4:	d914      	bls.n	80086d0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6812      	ldr	r2, [r2, #0]
 80086b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086b6:	1d1a      	adds	r2, r3, #4
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	3b04      	subs	r3, #4
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80086ce:	e059      	b.n	8008784 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d917      	bls.n	800870c <HAL_SPI_Transmit+0x300>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d013      	beq.n	800870c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086e8:	881a      	ldrh	r2, [r3, #0]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086f2:	1c9a      	adds	r2, r3, #2
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b02      	subs	r3, #2
 8008702:	b29a      	uxth	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800870a:	e03b      	b.n	8008784 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3320      	adds	r3, #32
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800872a:	b29b      	uxth	r3, r3
 800872c:	3b01      	subs	r3, #1
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008736:	e025      	b.n	8008784 <HAL_SPI_Transmit+0x378>
 8008738:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800873c:	f7f9 fb90 	bl	8001e60 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	429a      	cmp	r2, r3
 800874a:	d803      	bhi.n	8008754 <HAL_SPI_Transmit+0x348>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008752:	d102      	bne.n	800875a <HAL_SPI_Transmit+0x34e>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d114      	bne.n	8008784 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 fbfe 	bl	8008f5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008766:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e02c      	b.n	80087de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800878a:	b29b      	uxth	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	f47f af79 	bne.w	8008684 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2200      	movs	r2, #0
 800879a:	2108      	movs	r1, #8
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 fc7d 	bl	800909c <SPI_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d007      	beq.n	80087b8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087ae:	f043 0220 	orr.w	r2, r3, #32
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 fbcf 	bl	8008f5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80087dc:	2300      	movs	r3, #0
  }
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop

080087e8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	4613      	mov	r3, r2
 80087f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d001      	beq.n	8008806 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008802:	2302      	movs	r3, #2
 8008804:	e126      	b.n	8008a54 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <HAL_SPI_Transmit_DMA+0x2a>
 800880c:	88fb      	ldrh	r3, [r7, #6]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e11e      	b.n	8008a54 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800881c:	2b01      	cmp	r3, #1
 800881e:	d101      	bne.n	8008824 <HAL_SPI_Transmit_DMA+0x3c>
 8008820:	2302      	movs	r3, #2
 8008822:	e117      	b.n	8008a54 <HAL_SPI_Transmit_DMA+0x26c>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2203      	movs	r2, #3
 8008830:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	88fa      	ldrh	r2, [r7, #6]
 8008846:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	88fa      	ldrh	r2, [r7, #6]
 800884e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800887c:	d108      	bne.n	8008890 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	e009      	b.n	80088a4 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80088a2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	2b0f      	cmp	r3, #15
 80088aa:	d905      	bls.n	80088b8 <HAL_SPI_Transmit_DMA+0xd0>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088b6:	d10f      	bne.n	80088d8 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80088bc:	2b07      	cmp	r3, #7
 80088be:	d911      	bls.n	80088e4 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ca:	d00b      	beq.n	80088e4 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088d0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80088d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088d6:	d005      	beq.n	80088e4 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e0b7      	b.n	8008a54 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	2b07      	cmp	r3, #7
 80088ea:	d820      	bhi.n	800892e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088f6:	d109      	bne.n	800890c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088fe:	b29b      	uxth	r3, r3
 8008900:	3301      	adds	r3, #1
 8008902:	105b      	asrs	r3, r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008916:	d11e      	bne.n	8008956 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800891e:	b29b      	uxth	r3, r3
 8008920:	3303      	adds	r3, #3
 8008922:	109b      	asrs	r3, r3, #2
 8008924:	b29a      	uxth	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800892c:	e013      	b.n	8008956 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	2b0f      	cmp	r3, #15
 8008934:	d80f      	bhi.n	8008956 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008940:	d109      	bne.n	8008956 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008948:	b29b      	uxth	r3, r3
 800894a:	3301      	adds	r3, #1
 800894c:	105b      	asrs	r3, r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800895a:	4a40      	ldr	r2, [pc, #256]	@ (8008a5c <HAL_SPI_Transmit_DMA+0x274>)
 800895c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008962:	4a3f      	ldr	r2, [pc, #252]	@ (8008a60 <HAL_SPI_Transmit_DMA+0x278>)
 8008964:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800896a:	4a3e      	ldr	r2, [pc, #248]	@ (8008a64 <HAL_SPI_Transmit_DMA+0x27c>)
 800896c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008972:	2200      	movs	r2, #0
 8008974:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008984:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800898e:	4619      	mov	r1, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3320      	adds	r3, #32
 8008996:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800899e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80089a0:	f7f9 ffa4 	bl	80028ec <HAL_DMA_Start_IT>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d011      	beq.n	80089ce <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089b0:	f043 0210 	orr.w	r2, r3, #16
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e042      	b.n	8008a54 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d8:	d108      	bne.n	80089ec <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6859      	ldr	r1, [r3, #4]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	4b20      	ldr	r3, [pc, #128]	@ (8008a68 <HAL_SPI_Transmit_DMA+0x280>)
 80089e6:	400b      	ands	r3, r1
 80089e8:	6053      	str	r3, [r2, #4]
 80089ea:	e009      	b.n	8008a00 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a68 <HAL_SPI_Transmit_DMA+0x280>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	88f9      	ldrh	r1, [r7, #6]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	6812      	ldr	r2, [r2, #0]
 80089fc:	430b      	orrs	r3, r1
 80089fe:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a0e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	691a      	ldr	r2, [r3, #16]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8008a1e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0201 	orr.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a38:	d107      	bne.n	8008a4a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a48:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	08008ec7 	.word	0x08008ec7
 8008a60:	08008e81 	.word	0x08008e81
 8008a64:	08008ee3 	.word	0x08008ee3
 8008a68:	ffff0000 	.word	0xffff0000

08008a6c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08a      	sub	sp, #40	@ 0x28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008a84:	6a3a      	ldr	r2, [r7, #32]
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008a94:	2300      	movs	r3, #0
 8008a96:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a9e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3330      	adds	r3, #48	@ 0x30
 8008aa6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d010      	beq.n	8008ad4 <HAL_SPI_IRQHandler+0x68>
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	f003 0308 	and.w	r3, r3, #8
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00b      	beq.n	8008ad4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699a      	ldr	r2, [r3, #24]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008aca:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f9cd 	bl	8008e6c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008ad2:	e192      	b.n	8008dfa <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d113      	bne.n	8008b06 <HAL_SPI_IRQHandler+0x9a>
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10e      	bne.n	8008b06 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
    handled = 1UL;
 8008b02:	2301      	movs	r3, #1
 8008b04:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10f      	bne.n	8008b30 <HAL_SPI_IRQHandler+0xc4>
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	4798      	blx	r3
    handled = 1UL;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10f      	bne.n	8008b5a <HAL_SPI_IRQHandler+0xee>
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d105      	bne.n	8008b5a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3
    handled = 1UL;
 8008b56:	2301      	movs	r3, #1
 8008b58:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f040 8147 	bne.w	8008df0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	f003 0308 	and.w	r3, r3, #8
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 808b 	beq.w	8008c84 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	699a      	ldr	r2, [r3, #24]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f042 0208 	orr.w	r2, r2, #8
 8008b7c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	699a      	ldr	r2, [r3, #24]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 0210 	orr.w	r2, r2, #16
 8008b8c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b9c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	691a      	ldr	r2, [r3, #16]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0208 	bic.w	r2, r2, #8
 8008bac:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d13d      	bne.n	8008c38 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008bbc:	e036      	b.n	8008c2c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	2b0f      	cmp	r3, #15
 8008bc4:	d90b      	bls.n	8008bde <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008bd0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd6:	1d1a      	adds	r2, r3, #4
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	665a      	str	r2, [r3, #100]	@ 0x64
 8008bdc:	e01d      	b.n	8008c1a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	2b07      	cmp	r3, #7
 8008be4:	d90b      	bls.n	8008bfe <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	8812      	ldrh	r2, [r2, #0]
 8008bee:	b292      	uxth	r2, r2
 8008bf0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bf6:	1c9a      	adds	r2, r3, #2
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	665a      	str	r2, [r3, #100]	@ 0x64
 8008bfc:	e00d      	b.n	8008c1a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c0a:	7812      	ldrb	r2, [r2, #0]
 8008c0c:	b2d2      	uxtb	r2, r2
 8008c0e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1c2      	bne.n	8008bbe <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f98f 	bl	8008f5c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f901 	bl	8008e58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008c56:	e0d0      	b.n	8008dfa <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008c58:	7cfb      	ldrb	r3, [r7, #19]
 8008c5a:	2b05      	cmp	r3, #5
 8008c5c:	d103      	bne.n	8008c66 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f8e6 	bl	8008e30 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008c64:	e0c6      	b.n	8008df4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008c66:	7cfb      	ldrb	r3, [r7, #19]
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d103      	bne.n	8008c74 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f8d5 	bl	8008e1c <HAL_SPI_RxCpltCallback>
    return;
 8008c72:	e0bf      	b.n	8008df4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008c74:	7cfb      	ldrb	r3, [r7, #19]
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	f040 80bc 	bne.w	8008df4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f8c3 	bl	8008e08 <HAL_SPI_TxCpltCallback>
    return;
 8008c82:	e0b7      	b.n	8008df4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 80b5 	beq.w	8008dfa <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00f      	beq.n	8008cba <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ca0:	f043 0204 	orr.w	r2, r3, #4
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	699a      	ldr	r2, [r3, #24]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cb8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00f      	beq.n	8008ce4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cca:	f043 0201 	orr.w	r2, r3, #1
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	699a      	ldr	r2, [r3, #24]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ce2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00f      	beq.n	8008d0e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cf4:	f043 0208 	orr.w	r2, r3, #8
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	699a      	ldr	r2, [r3, #24]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d0c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00f      	beq.n	8008d38 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	699a      	ldr	r2, [r3, #24]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f042 0220 	orr.w	r2, r2, #32
 8008d36:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d05a      	beq.n	8008df8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f022 0201 	bic.w	r2, r2, #1
 8008d50:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6919      	ldr	r1, [r3, #16]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	4b28      	ldr	r3, [pc, #160]	@ (8008e00 <HAL_SPI_IRQHandler+0x394>)
 8008d5e:	400b      	ands	r3, r1
 8008d60:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008d68:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008d6c:	d138      	bne.n	8008de0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008d7c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d013      	beq.n	8008dae <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008e04 <HAL_SPI_IRQHandler+0x398>)
 8008d8c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fa fb32 	bl	80033fc <HAL_DMA_Abort_IT>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d007      	beq.n	8008dae <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008da4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d020      	beq.n	8008df8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008dba:	4a12      	ldr	r2, [pc, #72]	@ (8008e04 <HAL_SPI_IRQHandler+0x398>)
 8008dbc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fa fb1a 	bl	80033fc <HAL_DMA_Abort_IT>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d014      	beq.n	8008df8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dd4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008dde:	e00b      	b.n	8008df8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f835 	bl	8008e58 <HAL_SPI_ErrorCallback>
    return;
 8008dee:	e003      	b.n	8008df8 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008df0:	bf00      	nop
 8008df2:	e002      	b.n	8008dfa <HAL_SPI_IRQHandler+0x38e>
    return;
 8008df4:	bf00      	nop
 8008df6:	e000      	b.n	8008dfa <HAL_SPI_IRQHandler+0x38e>
    return;
 8008df8:	bf00      	nop
  }
}
 8008dfa:	3728      	adds	r7, #40	@ 0x28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	fffffc94 	.word	0xfffffc94
 8008e04:	08008f29 	.word	0x08008f29

08008e08 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b07      	cmp	r3, #7
 8008e98:	d011      	beq.n	8008ebe <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ea4:	d103      	bne.n	8008eae <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f7ff ffae 	bl	8008e08 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008eac:	e007      	b.n	8008ebe <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	691a      	ldr	r2, [r3, #16]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f042 0208 	orr.w	r2, r2, #8
 8008ebc:	611a      	str	r2, [r3, #16]
}
 8008ebe:	bf00      	nop
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff ffb5 	bl	8008e44 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eee:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7fb fc2b 	bl	800474c <HAL_DMA_GetError>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d011      	beq.n	8008f20 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 f82d 	bl	8008f5c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f08:	f043 0210 	orr.w	r2, r3, #16
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7ff ff9c 	bl	8008e58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008f20:	bf00      	nop
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f34:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff ff82 	bl	8008e58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	699a      	ldr	r2, [r3, #24]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0208 	orr.w	r2, r2, #8
 8008f7a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f042 0210 	orr.w	r2, r2, #16
 8008f8a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f022 0201 	bic.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6919      	ldr	r1, [r3, #16]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8009098 <SPI_CloseTransfer+0x13c>)
 8008fa8:	400b      	ands	r3, r1
 8008faa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689a      	ldr	r2, [r3, #8]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008fba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	d014      	beq.n	8008ff2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00f      	beq.n	8008ff2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	699a      	ldr	r2, [r3, #24]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f042 0220 	orr.w	r2, r2, #32
 8008ff0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d014      	beq.n	8009028 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00f      	beq.n	8009028 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800900e:	f043 0204 	orr.w	r2, r3, #4
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	699a      	ldr	r2, [r3, #24]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009026:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00f      	beq.n	8009052 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009038:	f043 0201 	orr.w	r2, r3, #1
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	699a      	ldr	r2, [r3, #24]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009050:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00f      	beq.n	800907c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009062:	f043 0208 	orr.w	r2, r3, #8
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800907a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800908c:	bf00      	nop
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	fffffc90 	.word	0xfffffc90

0800909c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	4613      	mov	r3, r2
 80090aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090ac:	e010      	b.n	80090d0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090ae:	f7f8 fed7 	bl	8001e60 <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d803      	bhi.n	80090c6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c4:	d102      	bne.n	80090cc <SPI_WaitOnFlagUntilTimeout+0x30>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e00f      	b.n	80090f0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695a      	ldr	r2, [r3, #20]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	4013      	ands	r3, r2
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	429a      	cmp	r2, r3
 80090de:	bf0c      	ite	eq
 80090e0:	2301      	moveq	r3, #1
 80090e2:	2300      	movne	r3, #0
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	461a      	mov	r2, r3
 80090e8:	79fb      	ldrb	r3, [r7, #7]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d0df      	beq.n	80090ae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009104:	095b      	lsrs	r3, r3, #5
 8009106:	3301      	adds	r3, #1
 8009108:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	3301      	adds	r3, #1
 8009110:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	3307      	adds	r3, #7
 8009116:	08db      	lsrs	r3, r3, #3
 8009118:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e042      	b.n	80091c6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009146:	2b00      	cmp	r3, #0
 8009148:	d106      	bne.n	8009158 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7f8 fbee 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2224      	movs	r2, #36	@ 0x24
 800915c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0201 	bic.w	r2, r2, #1
 800916e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 fbd7 	bl	800a92c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fd68 	bl	8009c54 <UART_SetConfig>
 8009184:	4603      	mov	r3, r0
 8009186:	2b01      	cmp	r3, #1
 8009188:	d101      	bne.n	800918e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e01b      	b.n	80091c6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800919c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f042 0201 	orr.w	r2, r2, #1
 80091bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 fc56 	bl	800aa70 <UART_CheckIdleState>
 80091c4:	4603      	mov	r3, r0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b08a      	sub	sp, #40	@ 0x28
 80091d2:	af02      	add	r7, sp, #8
 80091d4:	60f8      	str	r0, [r7, #12]
 80091d6:	60b9      	str	r1, [r7, #8]
 80091d8:	603b      	str	r3, [r7, #0]
 80091da:	4613      	mov	r3, r2
 80091dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	d17b      	bne.n	80092e0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <HAL_UART_Transmit+0x26>
 80091ee:	88fb      	ldrh	r3, [r7, #6]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e074      	b.n	80092e2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2221      	movs	r2, #33	@ 0x21
 8009204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009208:	f7f8 fe2a 	bl	8001e60 <HAL_GetTick>
 800920c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	88fa      	ldrh	r2, [r7, #6]
 8009212:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	88fa      	ldrh	r2, [r7, #6]
 800921a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009226:	d108      	bne.n	800923a <HAL_UART_Transmit+0x6c>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d104      	bne.n	800923a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009230:	2300      	movs	r3, #0
 8009232:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	61bb      	str	r3, [r7, #24]
 8009238:	e003      	b.n	8009242 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800923e:	2300      	movs	r3, #0
 8009240:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009242:	e030      	b.n	80092a6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	2200      	movs	r2, #0
 800924c:	2180      	movs	r1, #128	@ 0x80
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f001 fcb8 	bl	800abc4 <UART_WaitOnFlagUntilTimeout>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2220      	movs	r2, #32
 800925e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e03d      	b.n	80092e2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10b      	bne.n	8009284 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	461a      	mov	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800927a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	3302      	adds	r3, #2
 8009280:	61bb      	str	r3, [r7, #24]
 8009282:	e007      	b.n	8009294 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	3301      	adds	r3, #1
 8009292:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800929a:	b29b      	uxth	r3, r3
 800929c:	3b01      	subs	r3, #1
 800929e:	b29a      	uxth	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1c8      	bne.n	8009244 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2200      	movs	r2, #0
 80092ba:	2140      	movs	r1, #64	@ 0x40
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f001 fc81 	bl	800abc4 <UART_WaitOnFlagUntilTimeout>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e006      	b.n	80092e2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	e000      	b.n	80092e2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80092e0:	2302      	movs	r3, #2
  }
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3720      	adds	r7, #32
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b09a      	sub	sp, #104	@ 0x68
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009308:	667b      	str	r3, [r7, #100]	@ 0x64
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009312:	657b      	str	r3, [r7, #84]	@ 0x54
 8009314:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009318:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e6      	bne.n	80092f4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3308      	adds	r3, #8
 800932c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009338:	4b46      	ldr	r3, [pc, #280]	@ (8009454 <HAL_UART_AbortReceive+0x168>)
 800933a:	4013      	ands	r3, r2
 800933c:	663b      	str	r3, [r7, #96]	@ 0x60
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3308      	adds	r3, #8
 8009344:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009346:	643a      	str	r2, [r7, #64]	@ 0x40
 8009348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800934c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e5      	bne.n	8009326 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800935e:	2b01      	cmp	r3, #1
 8009360:	d118      	bne.n	8009394 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	f023 0310 	bic.w	r3, r3, #16
 8009376:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009382:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e6      	bne.n	8009362 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800939e:	2b40      	cmp	r3, #64	@ 0x40
 80093a0:	d13b      	bne.n	800941a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093c2:	61ba      	str	r2, [r7, #24]
 80093c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6979      	ldr	r1, [r7, #20]
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	613b      	str	r3, [r7, #16]
   return(result);
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e5      	bne.n	80093a2 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01c      	beq.n	800941a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093e6:	2200      	movs	r2, #0
 80093e8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7f9 fce5 	bl	8002dc0 <HAL_DMA_Abort>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00e      	beq.n	800941a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009402:	4618      	mov	r0, r3
 8009404:	f7fb f9a2 	bl	800474c <HAL_DMA_GetError>
 8009408:	4603      	mov	r3, r0
 800940a:	2b20      	cmp	r3, #32
 800940c:	d105      	bne.n	800941a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2210      	movs	r2, #16
 8009412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e017      	b.n	800944a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	220f      	movs	r2, #15
 8009428:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	699a      	ldr	r2, [r3, #24]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f042 0208 	orr.w	r2, r2, #8
 8009438:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3768      	adds	r7, #104	@ 0x68
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	effffffe 	.word	0xeffffffe

08009458 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b0ba      	sub	sp, #232	@ 0xe8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800947e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009482:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009486:	4013      	ands	r3, r2
 8009488:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800948c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d11b      	bne.n	80094cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009498:	f003 0320 	and.w	r3, r3, #32
 800949c:	2b00      	cmp	r3, #0
 800949e:	d015      	beq.n	80094cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094a4:	f003 0320 	and.w	r3, r3, #32
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d105      	bne.n	80094b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d009      	beq.n	80094cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 8393 	beq.w	8009be8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	4798      	blx	r3
      }
      return;
 80094ca:	e38d      	b.n	8009be8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 8123 	beq.w	800971c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80094d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80094da:	4b8d      	ldr	r3, [pc, #564]	@ (8009710 <HAL_UART_IRQHandler+0x2b8>)
 80094dc:	4013      	ands	r3, r2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d106      	bne.n	80094f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80094e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80094e6:	4b8b      	ldr	r3, [pc, #556]	@ (8009714 <HAL_UART_IRQHandler+0x2bc>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 8116 	beq.w	800971c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d011      	beq.n	8009520 <HAL_UART_IRQHandler+0xc8>
 80094fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2201      	movs	r2, #1
 800950e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009516:	f043 0201 	orr.w	r2, r3, #1
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	2b00      	cmp	r3, #0
 800952a:	d011      	beq.n	8009550 <HAL_UART_IRQHandler+0xf8>
 800952c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00b      	beq.n	8009550 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2202      	movs	r2, #2
 800953e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009546:	f043 0204 	orr.w	r2, r3, #4
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b00      	cmp	r3, #0
 800955a:	d011      	beq.n	8009580 <HAL_UART_IRQHandler+0x128>
 800955c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00b      	beq.n	8009580 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2204      	movs	r2, #4
 800956e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009576:	f043 0202 	orr.w	r2, r3, #2
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009584:	f003 0308 	and.w	r3, r3, #8
 8009588:	2b00      	cmp	r3, #0
 800958a:	d017      	beq.n	80095bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800958c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009590:	f003 0320 	and.w	r3, r3, #32
 8009594:	2b00      	cmp	r3, #0
 8009596:	d105      	bne.n	80095a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009598:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800959c:	4b5c      	ldr	r3, [pc, #368]	@ (8009710 <HAL_UART_IRQHandler+0x2b8>)
 800959e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00b      	beq.n	80095bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2208      	movs	r2, #8
 80095aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095b2:	f043 0208 	orr.w	r2, r3, #8
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d012      	beq.n	80095ee <HAL_UART_IRQHandler+0x196>
 80095c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00c      	beq.n	80095ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e4:	f043 0220 	orr.w	r2, r3, #32
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 82f9 	beq.w	8009bec <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80095fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	2b00      	cmp	r3, #0
 8009604:	d013      	beq.n	800962e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800960a:	f003 0320 	and.w	r3, r3, #32
 800960e:	2b00      	cmp	r3, #0
 8009610:	d105      	bne.n	800961e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d007      	beq.n	800962e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009634:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009642:	2b40      	cmp	r3, #64	@ 0x40
 8009644:	d005      	beq.n	8009652 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800964a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800964e:	2b00      	cmp	r3, #0
 8009650:	d054      	beq.n	80096fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 fc0c 	bl	800ae70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009662:	2b40      	cmp	r3, #64	@ 0x40
 8009664:	d146      	bne.n	80096f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3308      	adds	r3, #8
 800966c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800967c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	3308      	adds	r3, #8
 800968e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009692:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800969e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80096aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1d9      	bne.n	8009666 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d017      	beq.n	80096ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096c2:	4a15      	ldr	r2, [pc, #84]	@ (8009718 <HAL_UART_IRQHandler+0x2c0>)
 80096c4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7f9 fe95 	bl	80033fc <HAL_DMA_Abort_IT>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d019      	beq.n	800970c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80096e6:	4610      	mov	r0, r2
 80096e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ea:	e00f      	b.n	800970c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 faa7 	bl	8009c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f2:	e00b      	b.n	800970c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 faa3 	bl	8009c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096fa:	e007      	b.n	800970c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fa9f 	bl	8009c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800970a:	e26f      	b.n	8009bec <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800970c:	bf00      	nop
    return;
 800970e:	e26d      	b.n	8009bec <HAL_UART_IRQHandler+0x794>
 8009710:	10000001 	.word	0x10000001
 8009714:	04000120 	.word	0x04000120
 8009718:	0800b123 	.word	0x0800b123

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009720:	2b01      	cmp	r3, #1
 8009722:	f040 8203 	bne.w	8009b2c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800972a:	f003 0310 	and.w	r3, r3, #16
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 81fc 	beq.w	8009b2c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009738:	f003 0310 	and.w	r3, r3, #16
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 81f5 	beq.w	8009b2c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2210      	movs	r2, #16
 8009748:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009754:	2b40      	cmp	r3, #64	@ 0x40
 8009756:	f040 816d 	bne.w	8009a34 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4aa4      	ldr	r2, [pc, #656]	@ (80099f4 <HAL_UART_IRQHandler+0x59c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d068      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4aa1      	ldr	r2, [pc, #644]	@ (80099f8 <HAL_UART_IRQHandler+0x5a0>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d061      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a9f      	ldr	r2, [pc, #636]	@ (80099fc <HAL_UART_IRQHandler+0x5a4>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d05a      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a9c      	ldr	r2, [pc, #624]	@ (8009a00 <HAL_UART_IRQHandler+0x5a8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d053      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a9a      	ldr	r2, [pc, #616]	@ (8009a04 <HAL_UART_IRQHandler+0x5ac>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d04c      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a97      	ldr	r2, [pc, #604]	@ (8009a08 <HAL_UART_IRQHandler+0x5b0>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d045      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a95      	ldr	r2, [pc, #596]	@ (8009a0c <HAL_UART_IRQHandler+0x5b4>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d03e      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a92      	ldr	r2, [pc, #584]	@ (8009a10 <HAL_UART_IRQHandler+0x5b8>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d037      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a90      	ldr	r2, [pc, #576]	@ (8009a14 <HAL_UART_IRQHandler+0x5bc>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d030      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a8d      	ldr	r2, [pc, #564]	@ (8009a18 <HAL_UART_IRQHandler+0x5c0>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d029      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a8b      	ldr	r2, [pc, #556]	@ (8009a1c <HAL_UART_IRQHandler+0x5c4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d022      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a88      	ldr	r2, [pc, #544]	@ (8009a20 <HAL_UART_IRQHandler+0x5c8>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d01b      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a86      	ldr	r2, [pc, #536]	@ (8009a24 <HAL_UART_IRQHandler+0x5cc>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d014      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a83      	ldr	r2, [pc, #524]	@ (8009a28 <HAL_UART_IRQHandler+0x5d0>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d00d      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a81      	ldr	r2, [pc, #516]	@ (8009a2c <HAL_UART_IRQHandler+0x5d4>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d006      	beq.n	800983a <HAL_UART_IRQHandler+0x3e2>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a7e      	ldr	r2, [pc, #504]	@ (8009a30 <HAL_UART_IRQHandler+0x5d8>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d106      	bne.n	8009848 <HAL_UART_IRQHandler+0x3f0>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	b29b      	uxth	r3, r3
 8009846:	e005      	b.n	8009854 <HAL_UART_IRQHandler+0x3fc>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	b29b      	uxth	r3, r3
 8009854:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009858:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 80ad 	beq.w	80099bc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009868:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800986c:	429a      	cmp	r2, r3
 800986e:	f080 80a5 	bcs.w	80099bc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009878:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009888:	f000 8087 	beq.w	800999a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009894:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009898:	e853 3f00 	ldrex	r3, [r3]
 800989c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80098a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	461a      	mov	r2, r3
 80098b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80098c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098c6:	e841 2300 	strex	r3, r2, [r1]
 80098ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80098ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1da      	bne.n	800988c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3308      	adds	r3, #8
 80098dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098e0:	e853 3f00 	ldrex	r3, [r3]
 80098e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098e8:	f023 0301 	bic.w	r3, r3, #1
 80098ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3308      	adds	r3, #8
 80098f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80098fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80098fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009900:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009902:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009906:	e841 2300 	strex	r3, r2, [r1]
 800990a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800990c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1e1      	bne.n	80098d6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3308      	adds	r3, #8
 8009918:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800991c:	e853 3f00 	ldrex	r3, [r3]
 8009920:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3308      	adds	r3, #8
 8009932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009936:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009938:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800993c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1e3      	bne.n	8009912 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2220      	movs	r2, #32
 800994e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009968:	f023 0310 	bic.w	r3, r3, #16
 800996c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	461a      	mov	r2, r3
 8009976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800997a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800997c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009980:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e4      	bne.n	8009958 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009994:	4618      	mov	r0, r3
 8009996:	f7f9 fa13 	bl	8002dc0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2202      	movs	r2, #2
 800999e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7f7 faa1 	bl	8000efc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80099ba:	e119      	b.n	8009bf0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099c6:	429a      	cmp	r2, r3
 80099c8:	f040 8112 	bne.w	8009bf0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099d2:	69db      	ldr	r3, [r3, #28]
 80099d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099d8:	f040 810a 	bne.w	8009bf0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7f7 fa86 	bl	8000efc <HAL_UARTEx_RxEventCallback>
      return;
 80099f0:	e0fe      	b.n	8009bf0 <HAL_UART_IRQHandler+0x798>
 80099f2:	bf00      	nop
 80099f4:	40020010 	.word	0x40020010
 80099f8:	40020028 	.word	0x40020028
 80099fc:	40020040 	.word	0x40020040
 8009a00:	40020058 	.word	0x40020058
 8009a04:	40020070 	.word	0x40020070
 8009a08:	40020088 	.word	0x40020088
 8009a0c:	400200a0 	.word	0x400200a0
 8009a10:	400200b8 	.word	0x400200b8
 8009a14:	40020410 	.word	0x40020410
 8009a18:	40020428 	.word	0x40020428
 8009a1c:	40020440 	.word	0x40020440
 8009a20:	40020458 	.word	0x40020458
 8009a24:	40020470 	.word	0x40020470
 8009a28:	40020488 	.word	0x40020488
 8009a2c:	400204a0 	.word	0x400204a0
 8009a30:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 80cf 	beq.w	8009bf4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 80ca 	beq.w	8009bf4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a84:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a8a:	e841 2300 	strex	r3, r2, [r1]
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1e4      	bne.n	8009a60 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa0:	e853 3f00 	ldrex	r3, [r3]
 8009aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8009aa6:	6a3a      	ldr	r2, [r7, #32]
 8009aa8:	4b55      	ldr	r3, [pc, #340]	@ (8009c00 <HAL_UART_IRQHandler+0x7a8>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009aba:	633a      	str	r2, [r7, #48]	@ 0x30
 8009abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e3      	bne.n	8009a96 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	e853 3f00 	ldrex	r3, [r3]
 8009aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f023 0310 	bic.w	r3, r3, #16
 8009af6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b04:	61fb      	str	r3, [r7, #28]
 8009b06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b08:	69b9      	ldr	r1, [r7, #24]
 8009b0a:	69fa      	ldr	r2, [r7, #28]
 8009b0c:	e841 2300 	strex	r3, r2, [r1]
 8009b10:	617b      	str	r3, [r7, #20]
   return(result);
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e4      	bne.n	8009ae2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7f7 f9e9 	bl	8000efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b2a:	e063      	b.n	8009bf4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00e      	beq.n	8009b56 <HAL_UART_IRQHandler+0x6fe>
 8009b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d008      	beq.n	8009b56 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009b4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 fb24 	bl	800b19c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b54:	e051      	b.n	8009bfa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d014      	beq.n	8009b8c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d105      	bne.n	8009b7a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d008      	beq.n	8009b8c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d03a      	beq.n	8009bf8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	4798      	blx	r3
    }
    return;
 8009b8a:	e035      	b.n	8009bf8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d009      	beq.n	8009bac <HAL_UART_IRQHandler+0x754>
 8009b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f001 face 	bl	800b146 <UART_EndTransmit_IT>
    return;
 8009baa:	e026      	b.n	8009bfa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d009      	beq.n	8009bcc <HAL_UART_IRQHandler+0x774>
 8009bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bbc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d003      	beq.n	8009bcc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 fafd 	bl	800b1c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bca:	e016      	b.n	8009bfa <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d010      	beq.n	8009bfa <HAL_UART_IRQHandler+0x7a2>
 8009bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	da0c      	bge.n	8009bfa <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f001 fae5 	bl	800b1b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009be6:	e008      	b.n	8009bfa <HAL_UART_IRQHandler+0x7a2>
      return;
 8009be8:	bf00      	nop
 8009bea:	e006      	b.n	8009bfa <HAL_UART_IRQHandler+0x7a2>
    return;
 8009bec:	bf00      	nop
 8009bee:	e004      	b.n	8009bfa <HAL_UART_IRQHandler+0x7a2>
      return;
 8009bf0:	bf00      	nop
 8009bf2:	e002      	b.n	8009bfa <HAL_UART_IRQHandler+0x7a2>
      return;
 8009bf4:	bf00      	nop
 8009bf6:	e000      	b.n	8009bfa <HAL_UART_IRQHandler+0x7a2>
    return;
 8009bf8:	bf00      	nop
  }
}
 8009bfa:	37e8      	adds	r7, #232	@ 0xe8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	effffffe 	.word	0xeffffffe

08009c04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c58:	b092      	sub	sp, #72	@ 0x48
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	431a      	orrs	r2, r3
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	431a      	orrs	r2, r3
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	4bbe      	ldr	r3, [pc, #760]	@ (8009f7c <UART_SetConfig+0x328>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	6812      	ldr	r2, [r2, #0]
 8009c8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c8c:	430b      	orrs	r3, r1
 8009c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4ab3      	ldr	r2, [pc, #716]	@ (8009f80 <UART_SetConfig+0x32c>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d004      	beq.n	8009cc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	4baf      	ldr	r3, [pc, #700]	@ (8009f84 <UART_SetConfig+0x330>)
 8009cc8:	4013      	ands	r3, r2
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	6812      	ldr	r2, [r2, #0]
 8009cce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cda:	f023 010f 	bic.w	r1, r3, #15
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4aa6      	ldr	r2, [pc, #664]	@ (8009f88 <UART_SetConfig+0x334>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d177      	bne.n	8009de4 <UART_SetConfig+0x190>
 8009cf4:	4ba5      	ldr	r3, [pc, #660]	@ (8009f8c <UART_SetConfig+0x338>)
 8009cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cfc:	2b28      	cmp	r3, #40	@ 0x28
 8009cfe:	d86d      	bhi.n	8009ddc <UART_SetConfig+0x188>
 8009d00:	a201      	add	r2, pc, #4	@ (adr r2, 8009d08 <UART_SetConfig+0xb4>)
 8009d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d06:	bf00      	nop
 8009d08:	08009dad 	.word	0x08009dad
 8009d0c:	08009ddd 	.word	0x08009ddd
 8009d10:	08009ddd 	.word	0x08009ddd
 8009d14:	08009ddd 	.word	0x08009ddd
 8009d18:	08009ddd 	.word	0x08009ddd
 8009d1c:	08009ddd 	.word	0x08009ddd
 8009d20:	08009ddd 	.word	0x08009ddd
 8009d24:	08009ddd 	.word	0x08009ddd
 8009d28:	08009db5 	.word	0x08009db5
 8009d2c:	08009ddd 	.word	0x08009ddd
 8009d30:	08009ddd 	.word	0x08009ddd
 8009d34:	08009ddd 	.word	0x08009ddd
 8009d38:	08009ddd 	.word	0x08009ddd
 8009d3c:	08009ddd 	.word	0x08009ddd
 8009d40:	08009ddd 	.word	0x08009ddd
 8009d44:	08009ddd 	.word	0x08009ddd
 8009d48:	08009dbd 	.word	0x08009dbd
 8009d4c:	08009ddd 	.word	0x08009ddd
 8009d50:	08009ddd 	.word	0x08009ddd
 8009d54:	08009ddd 	.word	0x08009ddd
 8009d58:	08009ddd 	.word	0x08009ddd
 8009d5c:	08009ddd 	.word	0x08009ddd
 8009d60:	08009ddd 	.word	0x08009ddd
 8009d64:	08009ddd 	.word	0x08009ddd
 8009d68:	08009dc5 	.word	0x08009dc5
 8009d6c:	08009ddd 	.word	0x08009ddd
 8009d70:	08009ddd 	.word	0x08009ddd
 8009d74:	08009ddd 	.word	0x08009ddd
 8009d78:	08009ddd 	.word	0x08009ddd
 8009d7c:	08009ddd 	.word	0x08009ddd
 8009d80:	08009ddd 	.word	0x08009ddd
 8009d84:	08009ddd 	.word	0x08009ddd
 8009d88:	08009dcd 	.word	0x08009dcd
 8009d8c:	08009ddd 	.word	0x08009ddd
 8009d90:	08009ddd 	.word	0x08009ddd
 8009d94:	08009ddd 	.word	0x08009ddd
 8009d98:	08009ddd 	.word	0x08009ddd
 8009d9c:	08009ddd 	.word	0x08009ddd
 8009da0:	08009ddd 	.word	0x08009ddd
 8009da4:	08009ddd 	.word	0x08009ddd
 8009da8:	08009dd5 	.word	0x08009dd5
 8009dac:	2301      	movs	r3, #1
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db2:	e326      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009db4:	2304      	movs	r3, #4
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dba:	e322      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009dbc:	2308      	movs	r3, #8
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc2:	e31e      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e31a      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009dcc:	2320      	movs	r3, #32
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e316      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009dd4:	2340      	movs	r3, #64	@ 0x40
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e312      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009ddc:	2380      	movs	r3, #128	@ 0x80
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e30e      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a69      	ldr	r2, [pc, #420]	@ (8009f90 <UART_SetConfig+0x33c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d130      	bne.n	8009e50 <UART_SetConfig+0x1fc>
 8009dee:	4b67      	ldr	r3, [pc, #412]	@ (8009f8c <UART_SetConfig+0x338>)
 8009df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df2:	f003 0307 	and.w	r3, r3, #7
 8009df6:	2b05      	cmp	r3, #5
 8009df8:	d826      	bhi.n	8009e48 <UART_SetConfig+0x1f4>
 8009dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8009e00 <UART_SetConfig+0x1ac>)
 8009dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e00:	08009e19 	.word	0x08009e19
 8009e04:	08009e21 	.word	0x08009e21
 8009e08:	08009e29 	.word	0x08009e29
 8009e0c:	08009e31 	.word	0x08009e31
 8009e10:	08009e39 	.word	0x08009e39
 8009e14:	08009e41 	.word	0x08009e41
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e2f0      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009e20:	2304      	movs	r3, #4
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e2ec      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009e28:	2308      	movs	r3, #8
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e2e8      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009e30:	2310      	movs	r3, #16
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e2e4      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009e38:	2320      	movs	r3, #32
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e2e0      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009e40:	2340      	movs	r3, #64	@ 0x40
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e2dc      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009e48:	2380      	movs	r3, #128	@ 0x80
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e2d8      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a4f      	ldr	r2, [pc, #316]	@ (8009f94 <UART_SetConfig+0x340>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d130      	bne.n	8009ebc <UART_SetConfig+0x268>
 8009e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8009f8c <UART_SetConfig+0x338>)
 8009e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e5e:	f003 0307 	and.w	r3, r3, #7
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	d826      	bhi.n	8009eb4 <UART_SetConfig+0x260>
 8009e66:	a201      	add	r2, pc, #4	@ (adr r2, 8009e6c <UART_SetConfig+0x218>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009e85 	.word	0x08009e85
 8009e70:	08009e8d 	.word	0x08009e8d
 8009e74:	08009e95 	.word	0x08009e95
 8009e78:	08009e9d 	.word	0x08009e9d
 8009e7c:	08009ea5 	.word	0x08009ea5
 8009e80:	08009ead 	.word	0x08009ead
 8009e84:	2300      	movs	r3, #0
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8a:	e2ba      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009e8c:	2304      	movs	r3, #4
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e92:	e2b6      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009e94:	2308      	movs	r3, #8
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e9a:	e2b2      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009e9c:	2310      	movs	r3, #16
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ea2:	e2ae      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009ea4:	2320      	movs	r3, #32
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eaa:	e2aa      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009eac:	2340      	movs	r3, #64	@ 0x40
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eb2:	e2a6      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009eb4:	2380      	movs	r3, #128	@ 0x80
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eba:	e2a2      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a35      	ldr	r2, [pc, #212]	@ (8009f98 <UART_SetConfig+0x344>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d130      	bne.n	8009f28 <UART_SetConfig+0x2d4>
 8009ec6:	4b31      	ldr	r3, [pc, #196]	@ (8009f8c <UART_SetConfig+0x338>)
 8009ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	2b05      	cmp	r3, #5
 8009ed0:	d826      	bhi.n	8009f20 <UART_SetConfig+0x2cc>
 8009ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed8 <UART_SetConfig+0x284>)
 8009ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed8:	08009ef1 	.word	0x08009ef1
 8009edc:	08009ef9 	.word	0x08009ef9
 8009ee0:	08009f01 	.word	0x08009f01
 8009ee4:	08009f09 	.word	0x08009f09
 8009ee8:	08009f11 	.word	0x08009f11
 8009eec:	08009f19 	.word	0x08009f19
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef6:	e284      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009ef8:	2304      	movs	r3, #4
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efe:	e280      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009f00:	2308      	movs	r3, #8
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f06:	e27c      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009f08:	2310      	movs	r3, #16
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0e:	e278      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009f10:	2320      	movs	r3, #32
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f16:	e274      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009f18:	2340      	movs	r3, #64	@ 0x40
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e270      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009f20:	2380      	movs	r3, #128	@ 0x80
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e26c      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8009f9c <UART_SetConfig+0x348>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d142      	bne.n	8009fb8 <UART_SetConfig+0x364>
 8009f32:	4b16      	ldr	r3, [pc, #88]	@ (8009f8c <UART_SetConfig+0x338>)
 8009f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	2b05      	cmp	r3, #5
 8009f3c:	d838      	bhi.n	8009fb0 <UART_SetConfig+0x35c>
 8009f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f44 <UART_SetConfig+0x2f0>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f5d 	.word	0x08009f5d
 8009f48:	08009f65 	.word	0x08009f65
 8009f4c:	08009f6d 	.word	0x08009f6d
 8009f50:	08009f75 	.word	0x08009f75
 8009f54:	08009fa1 	.word	0x08009fa1
 8009f58:	08009fa9 	.word	0x08009fa9
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f62:	e24e      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009f64:	2304      	movs	r3, #4
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6a:	e24a      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009f6c:	2308      	movs	r3, #8
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f72:	e246      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009f74:	2310      	movs	r3, #16
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7a:	e242      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009f7c:	cfff69f3 	.word	0xcfff69f3
 8009f80:	58000c00 	.word	0x58000c00
 8009f84:	11fff4ff 	.word	0x11fff4ff
 8009f88:	40011000 	.word	0x40011000
 8009f8c:	58024400 	.word	0x58024400
 8009f90:	40004400 	.word	0x40004400
 8009f94:	40004800 	.word	0x40004800
 8009f98:	40004c00 	.word	0x40004c00
 8009f9c:	40005000 	.word	0x40005000
 8009fa0:	2320      	movs	r3, #32
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa6:	e22c      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009fa8:	2340      	movs	r3, #64	@ 0x40
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fae:	e228      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009fb0:	2380      	movs	r3, #128	@ 0x80
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb6:	e224      	b.n	800a402 <UART_SetConfig+0x7ae>
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4ab1      	ldr	r2, [pc, #708]	@ (800a284 <UART_SetConfig+0x630>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d176      	bne.n	800a0b0 <UART_SetConfig+0x45c>
 8009fc2:	4bb1      	ldr	r3, [pc, #708]	@ (800a288 <UART_SetConfig+0x634>)
 8009fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fca:	2b28      	cmp	r3, #40	@ 0x28
 8009fcc:	d86c      	bhi.n	800a0a8 <UART_SetConfig+0x454>
 8009fce:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd4 <UART_SetConfig+0x380>)
 8009fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd4:	0800a079 	.word	0x0800a079
 8009fd8:	0800a0a9 	.word	0x0800a0a9
 8009fdc:	0800a0a9 	.word	0x0800a0a9
 8009fe0:	0800a0a9 	.word	0x0800a0a9
 8009fe4:	0800a0a9 	.word	0x0800a0a9
 8009fe8:	0800a0a9 	.word	0x0800a0a9
 8009fec:	0800a0a9 	.word	0x0800a0a9
 8009ff0:	0800a0a9 	.word	0x0800a0a9
 8009ff4:	0800a081 	.word	0x0800a081
 8009ff8:	0800a0a9 	.word	0x0800a0a9
 8009ffc:	0800a0a9 	.word	0x0800a0a9
 800a000:	0800a0a9 	.word	0x0800a0a9
 800a004:	0800a0a9 	.word	0x0800a0a9
 800a008:	0800a0a9 	.word	0x0800a0a9
 800a00c:	0800a0a9 	.word	0x0800a0a9
 800a010:	0800a0a9 	.word	0x0800a0a9
 800a014:	0800a089 	.word	0x0800a089
 800a018:	0800a0a9 	.word	0x0800a0a9
 800a01c:	0800a0a9 	.word	0x0800a0a9
 800a020:	0800a0a9 	.word	0x0800a0a9
 800a024:	0800a0a9 	.word	0x0800a0a9
 800a028:	0800a0a9 	.word	0x0800a0a9
 800a02c:	0800a0a9 	.word	0x0800a0a9
 800a030:	0800a0a9 	.word	0x0800a0a9
 800a034:	0800a091 	.word	0x0800a091
 800a038:	0800a0a9 	.word	0x0800a0a9
 800a03c:	0800a0a9 	.word	0x0800a0a9
 800a040:	0800a0a9 	.word	0x0800a0a9
 800a044:	0800a0a9 	.word	0x0800a0a9
 800a048:	0800a0a9 	.word	0x0800a0a9
 800a04c:	0800a0a9 	.word	0x0800a0a9
 800a050:	0800a0a9 	.word	0x0800a0a9
 800a054:	0800a099 	.word	0x0800a099
 800a058:	0800a0a9 	.word	0x0800a0a9
 800a05c:	0800a0a9 	.word	0x0800a0a9
 800a060:	0800a0a9 	.word	0x0800a0a9
 800a064:	0800a0a9 	.word	0x0800a0a9
 800a068:	0800a0a9 	.word	0x0800a0a9
 800a06c:	0800a0a9 	.word	0x0800a0a9
 800a070:	0800a0a9 	.word	0x0800a0a9
 800a074:	0800a0a1 	.word	0x0800a0a1
 800a078:	2301      	movs	r3, #1
 800a07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07e:	e1c0      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a080:	2304      	movs	r3, #4
 800a082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a086:	e1bc      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a088:	2308      	movs	r3, #8
 800a08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a08e:	e1b8      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a090:	2310      	movs	r3, #16
 800a092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a096:	e1b4      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a098:	2320      	movs	r3, #32
 800a09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09e:	e1b0      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a0a0:	2340      	movs	r3, #64	@ 0x40
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a6:	e1ac      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a0a8:	2380      	movs	r3, #128	@ 0x80
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e1a8      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a75      	ldr	r2, [pc, #468]	@ (800a28c <UART_SetConfig+0x638>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d130      	bne.n	800a11c <UART_SetConfig+0x4c8>
 800a0ba:	4b73      	ldr	r3, [pc, #460]	@ (800a288 <UART_SetConfig+0x634>)
 800a0bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0be:	f003 0307 	and.w	r3, r3, #7
 800a0c2:	2b05      	cmp	r3, #5
 800a0c4:	d826      	bhi.n	800a114 <UART_SetConfig+0x4c0>
 800a0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0cc <UART_SetConfig+0x478>)
 800a0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0cc:	0800a0e5 	.word	0x0800a0e5
 800a0d0:	0800a0ed 	.word	0x0800a0ed
 800a0d4:	0800a0f5 	.word	0x0800a0f5
 800a0d8:	0800a0fd 	.word	0x0800a0fd
 800a0dc:	0800a105 	.word	0x0800a105
 800a0e0:	0800a10d 	.word	0x0800a10d
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ea:	e18a      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a0ec:	2304      	movs	r3, #4
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f2:	e186      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a0f4:	2308      	movs	r3, #8
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fa:	e182      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a0fc:	2310      	movs	r3, #16
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a102:	e17e      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a104:	2320      	movs	r3, #32
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e17a      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a10c:	2340      	movs	r3, #64	@ 0x40
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e176      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a114:	2380      	movs	r3, #128	@ 0x80
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e172      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a5b      	ldr	r2, [pc, #364]	@ (800a290 <UART_SetConfig+0x63c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d130      	bne.n	800a188 <UART_SetConfig+0x534>
 800a126:	4b58      	ldr	r3, [pc, #352]	@ (800a288 <UART_SetConfig+0x634>)
 800a128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a12a:	f003 0307 	and.w	r3, r3, #7
 800a12e:	2b05      	cmp	r3, #5
 800a130:	d826      	bhi.n	800a180 <UART_SetConfig+0x52c>
 800a132:	a201      	add	r2, pc, #4	@ (adr r2, 800a138 <UART_SetConfig+0x4e4>)
 800a134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a138:	0800a151 	.word	0x0800a151
 800a13c:	0800a159 	.word	0x0800a159
 800a140:	0800a161 	.word	0x0800a161
 800a144:	0800a169 	.word	0x0800a169
 800a148:	0800a171 	.word	0x0800a171
 800a14c:	0800a179 	.word	0x0800a179
 800a150:	2300      	movs	r3, #0
 800a152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a156:	e154      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a158:	2304      	movs	r3, #4
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15e:	e150      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a160:	2308      	movs	r3, #8
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a166:	e14c      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a168:	2310      	movs	r3, #16
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16e:	e148      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a170:	2320      	movs	r3, #32
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a176:	e144      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a178:	2340      	movs	r3, #64	@ 0x40
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17e:	e140      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a180:	2380      	movs	r3, #128	@ 0x80
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a186:	e13c      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a41      	ldr	r2, [pc, #260]	@ (800a294 <UART_SetConfig+0x640>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	f040 8082 	bne.w	800a298 <UART_SetConfig+0x644>
 800a194:	4b3c      	ldr	r3, [pc, #240]	@ (800a288 <UART_SetConfig+0x634>)
 800a196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a198:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a19c:	2b28      	cmp	r3, #40	@ 0x28
 800a19e:	d86d      	bhi.n	800a27c <UART_SetConfig+0x628>
 800a1a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a8 <UART_SetConfig+0x554>)
 800a1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a6:	bf00      	nop
 800a1a8:	0800a24d 	.word	0x0800a24d
 800a1ac:	0800a27d 	.word	0x0800a27d
 800a1b0:	0800a27d 	.word	0x0800a27d
 800a1b4:	0800a27d 	.word	0x0800a27d
 800a1b8:	0800a27d 	.word	0x0800a27d
 800a1bc:	0800a27d 	.word	0x0800a27d
 800a1c0:	0800a27d 	.word	0x0800a27d
 800a1c4:	0800a27d 	.word	0x0800a27d
 800a1c8:	0800a255 	.word	0x0800a255
 800a1cc:	0800a27d 	.word	0x0800a27d
 800a1d0:	0800a27d 	.word	0x0800a27d
 800a1d4:	0800a27d 	.word	0x0800a27d
 800a1d8:	0800a27d 	.word	0x0800a27d
 800a1dc:	0800a27d 	.word	0x0800a27d
 800a1e0:	0800a27d 	.word	0x0800a27d
 800a1e4:	0800a27d 	.word	0x0800a27d
 800a1e8:	0800a25d 	.word	0x0800a25d
 800a1ec:	0800a27d 	.word	0x0800a27d
 800a1f0:	0800a27d 	.word	0x0800a27d
 800a1f4:	0800a27d 	.word	0x0800a27d
 800a1f8:	0800a27d 	.word	0x0800a27d
 800a1fc:	0800a27d 	.word	0x0800a27d
 800a200:	0800a27d 	.word	0x0800a27d
 800a204:	0800a27d 	.word	0x0800a27d
 800a208:	0800a265 	.word	0x0800a265
 800a20c:	0800a27d 	.word	0x0800a27d
 800a210:	0800a27d 	.word	0x0800a27d
 800a214:	0800a27d 	.word	0x0800a27d
 800a218:	0800a27d 	.word	0x0800a27d
 800a21c:	0800a27d 	.word	0x0800a27d
 800a220:	0800a27d 	.word	0x0800a27d
 800a224:	0800a27d 	.word	0x0800a27d
 800a228:	0800a26d 	.word	0x0800a26d
 800a22c:	0800a27d 	.word	0x0800a27d
 800a230:	0800a27d 	.word	0x0800a27d
 800a234:	0800a27d 	.word	0x0800a27d
 800a238:	0800a27d 	.word	0x0800a27d
 800a23c:	0800a27d 	.word	0x0800a27d
 800a240:	0800a27d 	.word	0x0800a27d
 800a244:	0800a27d 	.word	0x0800a27d
 800a248:	0800a275 	.word	0x0800a275
 800a24c:	2301      	movs	r3, #1
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a252:	e0d6      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a254:	2304      	movs	r3, #4
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25a:	e0d2      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a25c:	2308      	movs	r3, #8
 800a25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a262:	e0ce      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a264:	2310      	movs	r3, #16
 800a266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26a:	e0ca      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a26c:	2320      	movs	r3, #32
 800a26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a272:	e0c6      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a274:	2340      	movs	r3, #64	@ 0x40
 800a276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27a:	e0c2      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a27c:	2380      	movs	r3, #128	@ 0x80
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a282:	e0be      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a284:	40011400 	.word	0x40011400
 800a288:	58024400 	.word	0x58024400
 800a28c:	40007800 	.word	0x40007800
 800a290:	40007c00 	.word	0x40007c00
 800a294:	40011800 	.word	0x40011800
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4aad      	ldr	r2, [pc, #692]	@ (800a554 <UART_SetConfig+0x900>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d176      	bne.n	800a390 <UART_SetConfig+0x73c>
 800a2a2:	4bad      	ldr	r3, [pc, #692]	@ (800a558 <UART_SetConfig+0x904>)
 800a2a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2aa:	2b28      	cmp	r3, #40	@ 0x28
 800a2ac:	d86c      	bhi.n	800a388 <UART_SetConfig+0x734>
 800a2ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b4 <UART_SetConfig+0x660>)
 800a2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b4:	0800a359 	.word	0x0800a359
 800a2b8:	0800a389 	.word	0x0800a389
 800a2bc:	0800a389 	.word	0x0800a389
 800a2c0:	0800a389 	.word	0x0800a389
 800a2c4:	0800a389 	.word	0x0800a389
 800a2c8:	0800a389 	.word	0x0800a389
 800a2cc:	0800a389 	.word	0x0800a389
 800a2d0:	0800a389 	.word	0x0800a389
 800a2d4:	0800a361 	.word	0x0800a361
 800a2d8:	0800a389 	.word	0x0800a389
 800a2dc:	0800a389 	.word	0x0800a389
 800a2e0:	0800a389 	.word	0x0800a389
 800a2e4:	0800a389 	.word	0x0800a389
 800a2e8:	0800a389 	.word	0x0800a389
 800a2ec:	0800a389 	.word	0x0800a389
 800a2f0:	0800a389 	.word	0x0800a389
 800a2f4:	0800a369 	.word	0x0800a369
 800a2f8:	0800a389 	.word	0x0800a389
 800a2fc:	0800a389 	.word	0x0800a389
 800a300:	0800a389 	.word	0x0800a389
 800a304:	0800a389 	.word	0x0800a389
 800a308:	0800a389 	.word	0x0800a389
 800a30c:	0800a389 	.word	0x0800a389
 800a310:	0800a389 	.word	0x0800a389
 800a314:	0800a371 	.word	0x0800a371
 800a318:	0800a389 	.word	0x0800a389
 800a31c:	0800a389 	.word	0x0800a389
 800a320:	0800a389 	.word	0x0800a389
 800a324:	0800a389 	.word	0x0800a389
 800a328:	0800a389 	.word	0x0800a389
 800a32c:	0800a389 	.word	0x0800a389
 800a330:	0800a389 	.word	0x0800a389
 800a334:	0800a379 	.word	0x0800a379
 800a338:	0800a389 	.word	0x0800a389
 800a33c:	0800a389 	.word	0x0800a389
 800a340:	0800a389 	.word	0x0800a389
 800a344:	0800a389 	.word	0x0800a389
 800a348:	0800a389 	.word	0x0800a389
 800a34c:	0800a389 	.word	0x0800a389
 800a350:	0800a389 	.word	0x0800a389
 800a354:	0800a381 	.word	0x0800a381
 800a358:	2301      	movs	r3, #1
 800a35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35e:	e050      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a360:	2304      	movs	r3, #4
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a366:	e04c      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a368:	2308      	movs	r3, #8
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36e:	e048      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a370:	2310      	movs	r3, #16
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a376:	e044      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a378:	2320      	movs	r3, #32
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37e:	e040      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a380:	2340      	movs	r3, #64	@ 0x40
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a386:	e03c      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a388:	2380      	movs	r3, #128	@ 0x80
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38e:	e038      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a71      	ldr	r2, [pc, #452]	@ (800a55c <UART_SetConfig+0x908>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d130      	bne.n	800a3fc <UART_SetConfig+0x7a8>
 800a39a:	4b6f      	ldr	r3, [pc, #444]	@ (800a558 <UART_SetConfig+0x904>)
 800a39c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a39e:	f003 0307 	and.w	r3, r3, #7
 800a3a2:	2b05      	cmp	r3, #5
 800a3a4:	d826      	bhi.n	800a3f4 <UART_SetConfig+0x7a0>
 800a3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3ac <UART_SetConfig+0x758>)
 800a3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ac:	0800a3c5 	.word	0x0800a3c5
 800a3b0:	0800a3cd 	.word	0x0800a3cd
 800a3b4:	0800a3d5 	.word	0x0800a3d5
 800a3b8:	0800a3dd 	.word	0x0800a3dd
 800a3bc:	0800a3e5 	.word	0x0800a3e5
 800a3c0:	0800a3ed 	.word	0x0800a3ed
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ca:	e01a      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a3cc:	2304      	movs	r3, #4
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d2:	e016      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a3d4:	2308      	movs	r3, #8
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3da:	e012      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a3dc:	2310      	movs	r3, #16
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e2:	e00e      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ea:	e00a      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a3ec:	2340      	movs	r3, #64	@ 0x40
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f2:	e006      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a3f4:	2380      	movs	r3, #128	@ 0x80
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fa:	e002      	b.n	800a402 <UART_SetConfig+0x7ae>
 800a3fc:	2380      	movs	r3, #128	@ 0x80
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a55      	ldr	r2, [pc, #340]	@ (800a55c <UART_SetConfig+0x908>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	f040 80f8 	bne.w	800a5fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a40e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a412:	2b20      	cmp	r3, #32
 800a414:	dc46      	bgt.n	800a4a4 <UART_SetConfig+0x850>
 800a416:	2b02      	cmp	r3, #2
 800a418:	db75      	blt.n	800a506 <UART_SetConfig+0x8b2>
 800a41a:	3b02      	subs	r3, #2
 800a41c:	2b1e      	cmp	r3, #30
 800a41e:	d872      	bhi.n	800a506 <UART_SetConfig+0x8b2>
 800a420:	a201      	add	r2, pc, #4	@ (adr r2, 800a428 <UART_SetConfig+0x7d4>)
 800a422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a426:	bf00      	nop
 800a428:	0800a4ab 	.word	0x0800a4ab
 800a42c:	0800a507 	.word	0x0800a507
 800a430:	0800a4b3 	.word	0x0800a4b3
 800a434:	0800a507 	.word	0x0800a507
 800a438:	0800a507 	.word	0x0800a507
 800a43c:	0800a507 	.word	0x0800a507
 800a440:	0800a4c3 	.word	0x0800a4c3
 800a444:	0800a507 	.word	0x0800a507
 800a448:	0800a507 	.word	0x0800a507
 800a44c:	0800a507 	.word	0x0800a507
 800a450:	0800a507 	.word	0x0800a507
 800a454:	0800a507 	.word	0x0800a507
 800a458:	0800a507 	.word	0x0800a507
 800a45c:	0800a507 	.word	0x0800a507
 800a460:	0800a4d3 	.word	0x0800a4d3
 800a464:	0800a507 	.word	0x0800a507
 800a468:	0800a507 	.word	0x0800a507
 800a46c:	0800a507 	.word	0x0800a507
 800a470:	0800a507 	.word	0x0800a507
 800a474:	0800a507 	.word	0x0800a507
 800a478:	0800a507 	.word	0x0800a507
 800a47c:	0800a507 	.word	0x0800a507
 800a480:	0800a507 	.word	0x0800a507
 800a484:	0800a507 	.word	0x0800a507
 800a488:	0800a507 	.word	0x0800a507
 800a48c:	0800a507 	.word	0x0800a507
 800a490:	0800a507 	.word	0x0800a507
 800a494:	0800a507 	.word	0x0800a507
 800a498:	0800a507 	.word	0x0800a507
 800a49c:	0800a507 	.word	0x0800a507
 800a4a0:	0800a4f9 	.word	0x0800a4f9
 800a4a4:	2b40      	cmp	r3, #64	@ 0x40
 800a4a6:	d02a      	beq.n	800a4fe <UART_SetConfig+0x8aa>
 800a4a8:	e02d      	b.n	800a506 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4aa:	f7fd fa69 	bl	8007980 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4b0:	e02f      	b.n	800a512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fd fa78 	bl	80079ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c0:	e027      	b.n	800a512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c2:	f107 0318 	add.w	r3, r7, #24
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fd fbc4 	bl	8007c54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d0:	e01f      	b.n	800a512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4d2:	4b21      	ldr	r3, [pc, #132]	@ (800a558 <UART_SetConfig+0x904>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0320 	and.w	r3, r3, #32
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d009      	beq.n	800a4f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4de:	4b1e      	ldr	r3, [pc, #120]	@ (800a558 <UART_SetConfig+0x904>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	08db      	lsrs	r3, r3, #3
 800a4e4:	f003 0303 	and.w	r3, r3, #3
 800a4e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a560 <UART_SetConfig+0x90c>)
 800a4ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4f0:	e00f      	b.n	800a512 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a560 <UART_SetConfig+0x90c>)
 800a4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f6:	e00c      	b.n	800a512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a564 <UART_SetConfig+0x910>)
 800a4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4fc:	e009      	b.n	800a512 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a504:	e005      	b.n	800a512 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a506:	2300      	movs	r3, #0
 800a508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 81ee 	beq.w	800a8f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51e:	4a12      	ldr	r2, [pc, #72]	@ (800a568 <UART_SetConfig+0x914>)
 800a520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a524:	461a      	mov	r2, r3
 800a526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a528:	fbb3 f3f2 	udiv	r3, r3, r2
 800a52c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	4613      	mov	r3, r2
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	4413      	add	r3, r2
 800a538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d305      	bcc.n	800a54a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a546:	429a      	cmp	r2, r3
 800a548:	d910      	bls.n	800a56c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a550:	e1d1      	b.n	800a8f6 <UART_SetConfig+0xca2>
 800a552:	bf00      	nop
 800a554:	40011c00 	.word	0x40011c00
 800a558:	58024400 	.word	0x58024400
 800a55c:	58000c00 	.word	0x58000c00
 800a560:	03d09000 	.word	0x03d09000
 800a564:	003d0900 	.word	0x003d0900
 800a568:	0800ecd0 	.word	0x0800ecd0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a56c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a56e:	2200      	movs	r2, #0
 800a570:	60bb      	str	r3, [r7, #8]
 800a572:	60fa      	str	r2, [r7, #12]
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a578:	4ac0      	ldr	r2, [pc, #768]	@ (800a87c <UART_SetConfig+0xc28>)
 800a57a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a57e:	b29b      	uxth	r3, r3
 800a580:	2200      	movs	r2, #0
 800a582:	603b      	str	r3, [r7, #0]
 800a584:	607a      	str	r2, [r7, #4]
 800a586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a58a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a58e:	f7f5 ff07 	bl	80003a0 <__aeabi_uldivmod>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	4610      	mov	r0, r2
 800a598:	4619      	mov	r1, r3
 800a59a:	f04f 0200 	mov.w	r2, #0
 800a59e:	f04f 0300 	mov.w	r3, #0
 800a5a2:	020b      	lsls	r3, r1, #8
 800a5a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5a8:	0202      	lsls	r2, r0, #8
 800a5aa:	6979      	ldr	r1, [r7, #20]
 800a5ac:	6849      	ldr	r1, [r1, #4]
 800a5ae:	0849      	lsrs	r1, r1, #1
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	eb12 0804 	adds.w	r8, r2, r4
 800a5ba:	eb43 0905 	adc.w	r9, r3, r5
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	469a      	mov	sl, r3
 800a5c6:	4693      	mov	fp, r2
 800a5c8:	4652      	mov	r2, sl
 800a5ca:	465b      	mov	r3, fp
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	f7f5 fee6 	bl	80003a0 <__aeabi_uldivmod>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4613      	mov	r3, r2
 800a5da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5e2:	d308      	bcc.n	800a5f6 <UART_SetConfig+0x9a2>
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5ea:	d204      	bcs.n	800a5f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5f2:	60da      	str	r2, [r3, #12]
 800a5f4:	e17f      	b.n	800a8f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a5fc:	e17b      	b.n	800a8f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a606:	f040 80bd 	bne.w	800a784 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a60a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a60e:	2b20      	cmp	r3, #32
 800a610:	dc48      	bgt.n	800a6a4 <UART_SetConfig+0xa50>
 800a612:	2b00      	cmp	r3, #0
 800a614:	db7b      	blt.n	800a70e <UART_SetConfig+0xaba>
 800a616:	2b20      	cmp	r3, #32
 800a618:	d879      	bhi.n	800a70e <UART_SetConfig+0xaba>
 800a61a:	a201      	add	r2, pc, #4	@ (adr r2, 800a620 <UART_SetConfig+0x9cc>)
 800a61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a620:	0800a6ab 	.word	0x0800a6ab
 800a624:	0800a6b3 	.word	0x0800a6b3
 800a628:	0800a70f 	.word	0x0800a70f
 800a62c:	0800a70f 	.word	0x0800a70f
 800a630:	0800a6bb 	.word	0x0800a6bb
 800a634:	0800a70f 	.word	0x0800a70f
 800a638:	0800a70f 	.word	0x0800a70f
 800a63c:	0800a70f 	.word	0x0800a70f
 800a640:	0800a6cb 	.word	0x0800a6cb
 800a644:	0800a70f 	.word	0x0800a70f
 800a648:	0800a70f 	.word	0x0800a70f
 800a64c:	0800a70f 	.word	0x0800a70f
 800a650:	0800a70f 	.word	0x0800a70f
 800a654:	0800a70f 	.word	0x0800a70f
 800a658:	0800a70f 	.word	0x0800a70f
 800a65c:	0800a70f 	.word	0x0800a70f
 800a660:	0800a6db 	.word	0x0800a6db
 800a664:	0800a70f 	.word	0x0800a70f
 800a668:	0800a70f 	.word	0x0800a70f
 800a66c:	0800a70f 	.word	0x0800a70f
 800a670:	0800a70f 	.word	0x0800a70f
 800a674:	0800a70f 	.word	0x0800a70f
 800a678:	0800a70f 	.word	0x0800a70f
 800a67c:	0800a70f 	.word	0x0800a70f
 800a680:	0800a70f 	.word	0x0800a70f
 800a684:	0800a70f 	.word	0x0800a70f
 800a688:	0800a70f 	.word	0x0800a70f
 800a68c:	0800a70f 	.word	0x0800a70f
 800a690:	0800a70f 	.word	0x0800a70f
 800a694:	0800a70f 	.word	0x0800a70f
 800a698:	0800a70f 	.word	0x0800a70f
 800a69c:	0800a70f 	.word	0x0800a70f
 800a6a0:	0800a701 	.word	0x0800a701
 800a6a4:	2b40      	cmp	r3, #64	@ 0x40
 800a6a6:	d02e      	beq.n	800a706 <UART_SetConfig+0xab2>
 800a6a8:	e031      	b.n	800a70e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6aa:	f7fb ff7f 	bl	80065ac <HAL_RCC_GetPCLK1Freq>
 800a6ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6b0:	e033      	b.n	800a71a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6b2:	f7fb ff91 	bl	80065d8 <HAL_RCC_GetPCLK2Freq>
 800a6b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6b8:	e02f      	b.n	800a71a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fd f974 	bl	80079ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6c8:	e027      	b.n	800a71a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ca:	f107 0318 	add.w	r3, r7, #24
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fd fac0 	bl	8007c54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d8:	e01f      	b.n	800a71a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6da:	4b69      	ldr	r3, [pc, #420]	@ (800a880 <UART_SetConfig+0xc2c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0320 	and.w	r3, r3, #32
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d009      	beq.n	800a6fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6e6:	4b66      	ldr	r3, [pc, #408]	@ (800a880 <UART_SetConfig+0xc2c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	08db      	lsrs	r3, r3, #3
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	4a64      	ldr	r2, [pc, #400]	@ (800a884 <UART_SetConfig+0xc30>)
 800a6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6f8:	e00f      	b.n	800a71a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a6fa:	4b62      	ldr	r3, [pc, #392]	@ (800a884 <UART_SetConfig+0xc30>)
 800a6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6fe:	e00c      	b.n	800a71a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a700:	4b61      	ldr	r3, [pc, #388]	@ (800a888 <UART_SetConfig+0xc34>)
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a704:	e009      	b.n	800a71a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a70c:	e005      	b.n	800a71a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 80ea 	beq.w	800a8f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a726:	4a55      	ldr	r2, [pc, #340]	@ (800a87c <UART_SetConfig+0xc28>)
 800a728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a72c:	461a      	mov	r2, r3
 800a72e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a730:	fbb3 f3f2 	udiv	r3, r3, r2
 800a734:	005a      	lsls	r2, r3, #1
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	085b      	lsrs	r3, r3, #1
 800a73c:	441a      	add	r2, r3
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	fbb2 f3f3 	udiv	r3, r2, r3
 800a746:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	2b0f      	cmp	r3, #15
 800a74c:	d916      	bls.n	800a77c <UART_SetConfig+0xb28>
 800a74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a754:	d212      	bcs.n	800a77c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a758:	b29b      	uxth	r3, r3
 800a75a:	f023 030f 	bic.w	r3, r3, #15
 800a75e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a762:	085b      	lsrs	r3, r3, #1
 800a764:	b29b      	uxth	r3, r3
 800a766:	f003 0307 	and.w	r3, r3, #7
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a76e:	4313      	orrs	r3, r2
 800a770:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a778:	60da      	str	r2, [r3, #12]
 800a77a:	e0bc      	b.n	800a8f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a782:	e0b8      	b.n	800a8f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a784:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a788:	2b20      	cmp	r3, #32
 800a78a:	dc4b      	bgt.n	800a824 <UART_SetConfig+0xbd0>
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f2c0 8087 	blt.w	800a8a0 <UART_SetConfig+0xc4c>
 800a792:	2b20      	cmp	r3, #32
 800a794:	f200 8084 	bhi.w	800a8a0 <UART_SetConfig+0xc4c>
 800a798:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a0 <UART_SetConfig+0xb4c>)
 800a79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79e:	bf00      	nop
 800a7a0:	0800a82b 	.word	0x0800a82b
 800a7a4:	0800a833 	.word	0x0800a833
 800a7a8:	0800a8a1 	.word	0x0800a8a1
 800a7ac:	0800a8a1 	.word	0x0800a8a1
 800a7b0:	0800a83b 	.word	0x0800a83b
 800a7b4:	0800a8a1 	.word	0x0800a8a1
 800a7b8:	0800a8a1 	.word	0x0800a8a1
 800a7bc:	0800a8a1 	.word	0x0800a8a1
 800a7c0:	0800a84b 	.word	0x0800a84b
 800a7c4:	0800a8a1 	.word	0x0800a8a1
 800a7c8:	0800a8a1 	.word	0x0800a8a1
 800a7cc:	0800a8a1 	.word	0x0800a8a1
 800a7d0:	0800a8a1 	.word	0x0800a8a1
 800a7d4:	0800a8a1 	.word	0x0800a8a1
 800a7d8:	0800a8a1 	.word	0x0800a8a1
 800a7dc:	0800a8a1 	.word	0x0800a8a1
 800a7e0:	0800a85b 	.word	0x0800a85b
 800a7e4:	0800a8a1 	.word	0x0800a8a1
 800a7e8:	0800a8a1 	.word	0x0800a8a1
 800a7ec:	0800a8a1 	.word	0x0800a8a1
 800a7f0:	0800a8a1 	.word	0x0800a8a1
 800a7f4:	0800a8a1 	.word	0x0800a8a1
 800a7f8:	0800a8a1 	.word	0x0800a8a1
 800a7fc:	0800a8a1 	.word	0x0800a8a1
 800a800:	0800a8a1 	.word	0x0800a8a1
 800a804:	0800a8a1 	.word	0x0800a8a1
 800a808:	0800a8a1 	.word	0x0800a8a1
 800a80c:	0800a8a1 	.word	0x0800a8a1
 800a810:	0800a8a1 	.word	0x0800a8a1
 800a814:	0800a8a1 	.word	0x0800a8a1
 800a818:	0800a8a1 	.word	0x0800a8a1
 800a81c:	0800a8a1 	.word	0x0800a8a1
 800a820:	0800a893 	.word	0x0800a893
 800a824:	2b40      	cmp	r3, #64	@ 0x40
 800a826:	d037      	beq.n	800a898 <UART_SetConfig+0xc44>
 800a828:	e03a      	b.n	800a8a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a82a:	f7fb febf 	bl	80065ac <HAL_RCC_GetPCLK1Freq>
 800a82e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a830:	e03c      	b.n	800a8ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a832:	f7fb fed1 	bl	80065d8 <HAL_RCC_GetPCLK2Freq>
 800a836:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a838:	e038      	b.n	800a8ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a83a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fd f8b4 	bl	80079ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a848:	e030      	b.n	800a8ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a84a:	f107 0318 	add.w	r3, r7, #24
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fd fa00 	bl	8007c54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a858:	e028      	b.n	800a8ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a85a:	4b09      	ldr	r3, [pc, #36]	@ (800a880 <UART_SetConfig+0xc2c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 0320 	and.w	r3, r3, #32
 800a862:	2b00      	cmp	r3, #0
 800a864:	d012      	beq.n	800a88c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a866:	4b06      	ldr	r3, [pc, #24]	@ (800a880 <UART_SetConfig+0xc2c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	08db      	lsrs	r3, r3, #3
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	4a04      	ldr	r2, [pc, #16]	@ (800a884 <UART_SetConfig+0xc30>)
 800a872:	fa22 f303 	lsr.w	r3, r2, r3
 800a876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a878:	e018      	b.n	800a8ac <UART_SetConfig+0xc58>
 800a87a:	bf00      	nop
 800a87c:	0800ecd0 	.word	0x0800ecd0
 800a880:	58024400 	.word	0x58024400
 800a884:	03d09000 	.word	0x03d09000
 800a888:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a88c:	4b24      	ldr	r3, [pc, #144]	@ (800a920 <UART_SetConfig+0xccc>)
 800a88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a890:	e00c      	b.n	800a8ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a892:	4b24      	ldr	r3, [pc, #144]	@ (800a924 <UART_SetConfig+0xcd0>)
 800a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a896:	e009      	b.n	800a8ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89e:	e005      	b.n	800a8ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8aa:	bf00      	nop
    }

    if (pclk != 0U)
 800a8ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d021      	beq.n	800a8f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a928 <UART_SetConfig+0xcd4>)
 800a8b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	085b      	lsrs	r3, r3, #1
 800a8ca:	441a      	add	r2, r3
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d8:	2b0f      	cmp	r3, #15
 800a8da:	d909      	bls.n	800a8f0 <UART_SetConfig+0xc9c>
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8e2:	d205      	bcs.n	800a8f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	60da      	str	r2, [r3, #12]
 800a8ee:	e002      	b.n	800a8f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2201      	movs	r2, #1
 800a902:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	2200      	movs	r2, #0
 800a90a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2200      	movs	r2, #0
 800a910:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a912:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a916:	4618      	mov	r0, r3
 800a918:	3748      	adds	r7, #72	@ 0x48
 800a91a:	46bd      	mov	sp, r7
 800a91c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a920:	03d09000 	.word	0x03d09000
 800a924:	003d0900 	.word	0x003d0900
 800a928:	0800ecd0 	.word	0x0800ecd0

0800a92c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a938:	f003 0308 	and.w	r3, r3, #8
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00a      	beq.n	800a956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	430a      	orrs	r2, r1
 800a954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00a      	beq.n	800a978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	430a      	orrs	r2, r1
 800a976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97c:	f003 0302 	and.w	r3, r3, #2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00a      	beq.n	800a99a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	430a      	orrs	r2, r1
 800a998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a99e:	f003 0304 	and.w	r3, r3, #4
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	430a      	orrs	r2, r1
 800a9ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00a      	beq.n	800a9de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9e2:	f003 0320 	and.w	r3, r3, #32
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01a      	beq.n	800aa42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa2a:	d10a      	bne.n	800aa42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00a      	beq.n	800aa64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	430a      	orrs	r2, r1
 800aa62:	605a      	str	r2, [r3, #4]
  }
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b098      	sub	sp, #96	@ 0x60
 800aa74:	af02      	add	r7, sp, #8
 800aa76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa80:	f7f7 f9ee 	bl	8001e60 <HAL_GetTick>
 800aa84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0308 	and.w	r3, r3, #8
 800aa90:	2b08      	cmp	r3, #8
 800aa92:	d12f      	bne.n	800aaf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f88e 	bl	800abc4 <UART_WaitOnFlagUntilTimeout>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d022      	beq.n	800aaf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab6:	e853 3f00 	ldrex	r3, [r3]
 800aaba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aabc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aabe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aac2:	653b      	str	r3, [r7, #80]	@ 0x50
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	461a      	mov	r2, r3
 800aaca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aacc:	647b      	str	r3, [r7, #68]	@ 0x44
 800aace:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aad4:	e841 2300 	strex	r3, r2, [r1]
 800aad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1e6      	bne.n	800aaae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2220      	movs	r2, #32
 800aae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e063      	b.n	800abbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 0304 	and.w	r3, r3, #4
 800aafe:	2b04      	cmp	r3, #4
 800ab00:	d149      	bne.n	800ab96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f857 	bl	800abc4 <UART_WaitOnFlagUntilTimeout>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d03c      	beq.n	800ab96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	623b      	str	r3, [r7, #32]
   return(result);
 800ab2a:	6a3b      	ldr	r3, [r7, #32]
 800ab2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	461a      	mov	r2, r3
 800ab38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab3a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab42:	e841 2300 	strex	r3, r2, [r1]
 800ab46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1e6      	bne.n	800ab1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3308      	adds	r3, #8
 800ab54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f023 0301 	bic.w	r3, r3, #1
 800ab64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab6e:	61fa      	str	r2, [r7, #28]
 800ab70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab72:	69b9      	ldr	r1, [r7, #24]
 800ab74:	69fa      	ldr	r2, [r7, #28]
 800ab76:	e841 2300 	strex	r3, r2, [r1]
 800ab7a:	617b      	str	r3, [r7, #20]
   return(result);
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1e5      	bne.n	800ab4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2220      	movs	r2, #32
 800ab86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e012      	b.n	800abbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2220      	movs	r2, #32
 800ab9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2220      	movs	r2, #32
 800aba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3758      	adds	r7, #88	@ 0x58
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	4613      	mov	r3, r2
 800abd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abd4:	e04f      	b.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abdc:	d04b      	beq.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abde:	f7f7 f93f 	bl	8001e60 <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	429a      	cmp	r2, r3
 800abec:	d302      	bcc.n	800abf4 <UART_WaitOnFlagUntilTimeout+0x30>
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800abf4:	2303      	movs	r3, #3
 800abf6:	e04e      	b.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 0304 	and.w	r3, r3, #4
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d037      	beq.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2b80      	cmp	r3, #128	@ 0x80
 800ac0a:	d034      	beq.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b40      	cmp	r3, #64	@ 0x40
 800ac10:	d031      	beq.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	69db      	ldr	r3, [r3, #28]
 800ac18:	f003 0308 	and.w	r3, r3, #8
 800ac1c:	2b08      	cmp	r3, #8
 800ac1e:	d110      	bne.n	800ac42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2208      	movs	r2, #8
 800ac26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 f921 	bl	800ae70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2208      	movs	r2, #8
 800ac32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e029      	b.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac50:	d111      	bne.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 f907 	bl	800ae70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2220      	movs	r2, #32
 800ac66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e00f      	b.n	800ac96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	69da      	ldr	r2, [r3, #28]
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	4013      	ands	r3, r2
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	bf0c      	ite	eq
 800ac86:	2301      	moveq	r3, #1
 800ac88:	2300      	movne	r3, #0
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d0a0      	beq.n	800abd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b096      	sub	sp, #88	@ 0x58
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	4613      	mov	r3, r2
 800acac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	88fa      	ldrh	r2, [r7, #6]
 800acb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2222      	movs	r2, #34	@ 0x22
 800acc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d02d      	beq.n	800ad32 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acdc:	4a40      	ldr	r2, [pc, #256]	@ (800ade0 <UART_Start_Receive_DMA+0x140>)
 800acde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ace6:	4a3f      	ldr	r2, [pc, #252]	@ (800ade4 <UART_Start_Receive_DMA+0x144>)
 800ace8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acf0:	4a3d      	ldr	r2, [pc, #244]	@ (800ade8 <UART_Start_Receive_DMA+0x148>)
 800acf2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acfa:	2200      	movs	r2, #0
 800acfc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3324      	adds	r3, #36	@ 0x24
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad10:	461a      	mov	r2, r3
 800ad12:	88fb      	ldrh	r3, [r7, #6]
 800ad14:	f7f7 fdea 	bl	80028ec <HAL_DMA_Start_IT>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d009      	beq.n	800ad32 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2210      	movs	r2, #16
 800ad22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e051      	b.n	800add6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d018      	beq.n	800ad6c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad42:	e853 3f00 	ldrex	r3, [r3]
 800ad46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad4e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	461a      	mov	r2, r3
 800ad56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad5a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ad5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad60:	e841 2300 	strex	r3, r2, [r1]
 800ad64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ad66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1e6      	bne.n	800ad3a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3308      	adds	r3, #8
 800ad72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7e:	f043 0301 	orr.w	r3, r3, #1
 800ad82:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3308      	adds	r3, #8
 800ad8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad8c:	637a      	str	r2, [r7, #52]	@ 0x34
 800ad8e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ad92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad94:	e841 2300 	strex	r3, r2, [r1]
 800ad98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ad9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e5      	bne.n	800ad6c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3308      	adds	r3, #8
 800ada6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	e853 3f00 	ldrex	r3, [r3]
 800adae:	613b      	str	r3, [r7, #16]
   return(result);
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3308      	adds	r3, #8
 800adbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800adc0:	623a      	str	r2, [r7, #32]
 800adc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc4:	69f9      	ldr	r1, [r7, #28]
 800adc6:	6a3a      	ldr	r2, [r7, #32]
 800adc8:	e841 2300 	strex	r3, r2, [r1]
 800adcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1e5      	bne.n	800ada0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3758      	adds	r7, #88	@ 0x58
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	0800af3d 	.word	0x0800af3d
 800ade4:	0800b065 	.word	0x0800b065
 800ade8:	0800b0a3 	.word	0x0800b0a3

0800adec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800adec:	b480      	push	{r7}
 800adee:	b08f      	sub	sp, #60	@ 0x3c
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae08:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae14:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e6      	bne.n	800adf4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3308      	adds	r3, #8
 800ae2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	e853 3f00 	ldrex	r3, [r3]
 800ae34:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ae3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3308      	adds	r3, #8
 800ae44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae46:	61ba      	str	r2, [r7, #24]
 800ae48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4a:	6979      	ldr	r1, [r7, #20]
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	e841 2300 	strex	r3, r2, [r1]
 800ae52:	613b      	str	r3, [r7, #16]
   return(result);
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1e5      	bne.n	800ae26 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2220      	movs	r2, #32
 800ae5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ae62:	bf00      	nop
 800ae64:	373c      	adds	r7, #60	@ 0x3c
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
	...

0800ae70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b095      	sub	sp, #84	@ 0x54
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	461a      	mov	r2, r3
 800ae94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae96:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae9e:	e841 2300 	strex	r3, r2, [r1]
 800aea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1e6      	bne.n	800ae78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	3308      	adds	r3, #8
 800aeb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	e853 3f00 	ldrex	r3, [r3]
 800aeb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800aeba:	69fa      	ldr	r2, [r7, #28]
 800aebc:	4b1e      	ldr	r3, [pc, #120]	@ (800af38 <UART_EndRxTransfer+0xc8>)
 800aebe:	4013      	ands	r3, r2
 800aec0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3308      	adds	r3, #8
 800aec8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aeca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aece:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aed2:	e841 2300 	strex	r3, r2, [r1]
 800aed6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1e5      	bne.n	800aeaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d118      	bne.n	800af18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	e853 3f00 	ldrex	r3, [r3]
 800aef2:	60bb      	str	r3, [r7, #8]
   return(result);
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	f023 0310 	bic.w	r3, r3, #16
 800aefa:	647b      	str	r3, [r7, #68]	@ 0x44
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	461a      	mov	r2, r3
 800af02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af04:	61bb      	str	r3, [r7, #24]
 800af06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af08:	6979      	ldr	r1, [r7, #20]
 800af0a:	69ba      	ldr	r2, [r7, #24]
 800af0c:	e841 2300 	strex	r3, r2, [r1]
 800af10:	613b      	str	r3, [r7, #16]
   return(result);
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1e6      	bne.n	800aee6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2220      	movs	r2, #32
 800af1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af2c:	bf00      	nop
 800af2e:	3754      	adds	r7, #84	@ 0x54
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	effffffe 	.word	0xeffffffe

0800af3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b09c      	sub	sp, #112	@ 0x70
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af48:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af52:	d071      	beq.n	800b038 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800af54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af56:	2200      	movs	r2, #0
 800af58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af64:	e853 3f00 	ldrex	r3, [r3]
 800af68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af70:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af82:	e841 2300 	strex	r3, r2, [r1]
 800af86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1e6      	bne.n	800af5c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3308      	adds	r3, #8
 800af94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af98:	e853 3f00 	ldrex	r3, [r3]
 800af9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa0:	f023 0301 	bic.w	r3, r3, #1
 800afa4:	667b      	str	r3, [r7, #100]	@ 0x64
 800afa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3308      	adds	r3, #8
 800afac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800afae:	647a      	str	r2, [r7, #68]	@ 0x44
 800afb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afb6:	e841 2300 	strex	r3, r2, [r1]
 800afba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d1e5      	bne.n	800af8e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3308      	adds	r3, #8
 800afc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afcc:	e853 3f00 	ldrex	r3, [r3]
 800afd0:	623b      	str	r3, [r7, #32]
   return(result);
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afd8:	663b      	str	r3, [r7, #96]	@ 0x60
 800afda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	3308      	adds	r3, #8
 800afe0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afe2:	633a      	str	r2, [r7, #48]	@ 0x30
 800afe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afea:	e841 2300 	strex	r3, r2, [r1]
 800afee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1e5      	bne.n	800afc2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aff8:	2220      	movs	r2, #32
 800affa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800affe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b002:	2b01      	cmp	r3, #1
 800b004:	d118      	bne.n	800b038 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	e853 3f00 	ldrex	r3, [r3]
 800b012:	60fb      	str	r3, [r7, #12]
   return(result);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f023 0310 	bic.w	r3, r3, #16
 800b01a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b01c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	461a      	mov	r2, r3
 800b022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b024:	61fb      	str	r3, [r7, #28]
 800b026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b028:	69b9      	ldr	r1, [r7, #24]
 800b02a:	69fa      	ldr	r2, [r7, #28]
 800b02c:	e841 2300 	strex	r3, r2, [r1]
 800b030:	617b      	str	r3, [r7, #20]
   return(result);
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1e6      	bne.n	800b006 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b03a:	2200      	movs	r2, #0
 800b03c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b03e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b042:	2b01      	cmp	r3, #1
 800b044:	d107      	bne.n	800b056 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b04c:	4619      	mov	r1, r3
 800b04e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b050:	f7f5 ff54 	bl	8000efc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b054:	e002      	b.n	800b05c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b056:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b058:	f7fe fdde 	bl	8009c18 <HAL_UART_RxCpltCallback>
}
 800b05c:	bf00      	nop
 800b05e:	3770      	adds	r7, #112	@ 0x70
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b070:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2201      	movs	r2, #1
 800b076:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d109      	bne.n	800b094 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b086:	085b      	lsrs	r3, r3, #1
 800b088:	b29b      	uxth	r3, r3
 800b08a:	4619      	mov	r1, r3
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f7f5 ff35 	bl	8000efc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b092:	e002      	b.n	800b09a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f7fe fdc9 	bl	8009c2c <HAL_UART_RxHalfCpltCallback>
}
 800b09a:	bf00      	nop
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b086      	sub	sp, #24
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0ca:	2b80      	cmp	r3, #128	@ 0x80
 800b0cc:	d109      	bne.n	800b0e2 <UART_DMAError+0x40>
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	2b21      	cmp	r3, #33	@ 0x21
 800b0d2:	d106      	bne.n	800b0e2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b0dc:	6978      	ldr	r0, [r7, #20]
 800b0de:	f7ff fe85 	bl	800adec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0ec:	2b40      	cmp	r3, #64	@ 0x40
 800b0ee:	d109      	bne.n	800b104 <UART_DMAError+0x62>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b22      	cmp	r3, #34	@ 0x22
 800b0f4:	d106      	bne.n	800b104 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b0fe:	6978      	ldr	r0, [r7, #20]
 800b100:	f7ff feb6 	bl	800ae70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b10a:	f043 0210 	orr.w	r2, r3, #16
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b114:	6978      	ldr	r0, [r7, #20]
 800b116:	f7fe fd93 	bl	8009c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b11a:	bf00      	nop
 800b11c:	3718      	adds	r7, #24
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b12e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2200      	movs	r2, #0
 800b134:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f7fe fd81 	bl	8009c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b13e:	bf00      	nop
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b088      	sub	sp, #32
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	e853 3f00 	ldrex	r3, [r3]
 800b15a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b162:	61fb      	str	r3, [r7, #28]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	461a      	mov	r2, r3
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	61bb      	str	r3, [r7, #24]
 800b16e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b170:	6979      	ldr	r1, [r7, #20]
 800b172:	69ba      	ldr	r2, [r7, #24]
 800b174:	e841 2300 	strex	r3, r2, [r1]
 800b178:	613b      	str	r3, [r7, #16]
   return(result);
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e6      	bne.n	800b14e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2220      	movs	r2, #32
 800b184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7fe fd38 	bl	8009c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b194:	bf00      	nop
 800b196:	3720      	adds	r7, #32
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d101      	bne.n	800b1ee <HAL_UARTEx_DisableFifoMode+0x16>
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	e027      	b.n	800b23e <HAL_UARTEx_DisableFifoMode+0x66>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2224      	movs	r2, #36	@ 0x24
 800b1fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f022 0201 	bic.w	r2, r2, #1
 800b214:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b21c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2220      	movs	r2, #32
 800b230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3714      	adds	r7, #20
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b084      	sub	sp, #16
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d101      	bne.n	800b262 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b25e:	2302      	movs	r3, #2
 800b260:	e02d      	b.n	800b2be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2224      	movs	r2, #36	@ 0x24
 800b26e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f022 0201 	bic.w	r2, r2, #1
 800b288:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	430a      	orrs	r2, r1
 800b29c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f8a4 	bl	800b3ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2220      	movs	r2, #32
 800b2b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d101      	bne.n	800b2de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2da:	2302      	movs	r3, #2
 800b2dc:	e02d      	b.n	800b33a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2224      	movs	r2, #36	@ 0x24
 800b2ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f022 0201 	bic.w	r2, r2, #1
 800b304:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	430a      	orrs	r2, r1
 800b318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f866 	bl	800b3ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b08c      	sub	sp, #48	@ 0x30
 800b346:	af00      	add	r7, sp, #0
 800b348:	60f8      	str	r0, [r7, #12]
 800b34a:	60b9      	str	r1, [r7, #8]
 800b34c:	4613      	mov	r3, r2
 800b34e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b356:	2b20      	cmp	r3, #32
 800b358:	d142      	bne.n	800b3e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b360:	88fb      	ldrh	r3, [r7, #6]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e03b      	b.n	800b3e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2201      	movs	r2, #1
 800b36e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b376:	88fb      	ldrh	r3, [r7, #6]
 800b378:	461a      	mov	r2, r3
 800b37a:	68b9      	ldr	r1, [r7, #8]
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f7ff fc8f 	bl	800aca0 <UART_Start_Receive_DMA>
 800b382:	4603      	mov	r3, r0
 800b384:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d124      	bne.n	800b3da <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b394:	2b01      	cmp	r3, #1
 800b396:	d11d      	bne.n	800b3d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2210      	movs	r2, #16
 800b39e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	e853 3f00 	ldrex	r3, [r3]
 800b3ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	f043 0310 	orr.w	r3, r3, #16
 800b3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3be:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3c0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c2:	6a39      	ldr	r1, [r7, #32]
 800b3c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3c6:	e841 2300 	strex	r3, r2, [r1]
 800b3ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1e6      	bne.n	800b3a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b3d2:	e002      	b.n	800b3da <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b3da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3de:	e000      	b.n	800b3e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b3e0:	2302      	movs	r3, #2
  }
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3730      	adds	r7, #48	@ 0x30
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d108      	bne.n	800b40e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b40c:	e031      	b.n	800b472 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b40e:	2310      	movs	r3, #16
 800b410:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b412:	2310      	movs	r3, #16
 800b414:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	0e5b      	lsrs	r3, r3, #25
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	f003 0307 	and.w	r3, r3, #7
 800b424:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	0f5b      	lsrs	r3, r3, #29
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	f003 0307 	and.w	r3, r3, #7
 800b434:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b436:	7bbb      	ldrb	r3, [r7, #14]
 800b438:	7b3a      	ldrb	r2, [r7, #12]
 800b43a:	4911      	ldr	r1, [pc, #68]	@ (800b480 <UARTEx_SetNbDataToProcess+0x94>)
 800b43c:	5c8a      	ldrb	r2, [r1, r2]
 800b43e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b442:	7b3a      	ldrb	r2, [r7, #12]
 800b444:	490f      	ldr	r1, [pc, #60]	@ (800b484 <UARTEx_SetNbDataToProcess+0x98>)
 800b446:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b448:	fb93 f3f2 	sdiv	r3, r3, r2
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b454:	7bfb      	ldrb	r3, [r7, #15]
 800b456:	7b7a      	ldrb	r2, [r7, #13]
 800b458:	4909      	ldr	r1, [pc, #36]	@ (800b480 <UARTEx_SetNbDataToProcess+0x94>)
 800b45a:	5c8a      	ldrb	r2, [r1, r2]
 800b45c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b460:	7b7a      	ldrb	r2, [r7, #13]
 800b462:	4908      	ldr	r1, [pc, #32]	@ (800b484 <UARTEx_SetNbDataToProcess+0x98>)
 800b464:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b466:	fb93 f3f2 	sdiv	r3, r3, r2
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b472:	bf00      	nop
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	0800ece8 	.word	0x0800ece8
 800b484:	0800ecf0 	.word	0x0800ecf0

0800b488 <Display_Init>:
static uint8_t  s_animation_current_frame = 0;
static uint32_t s_animation_last_update_tick = 0;
#define ANIMATION_FRAME_DELAY_MS 80 // Adjust for desired speed (milliseconds)

void Display_Init(UI_Screen_State_t screenState)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	71fb      	strb	r3, [r7, #7]
	ST7789_Init();
 800b492:	f000 fbb5 	bl	800bc00 <ST7789_Init>
	previous_screenState = screenState;
 800b496:	4a05      	ldr	r2, [pc, #20]	@ (800b4ac <Display_Init+0x24>)
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	7013      	strb	r3, [r2, #0]
	current_screenState = screenState;
 800b49c:	4a04      	ldr	r2, [pc, #16]	@ (800b4b0 <Display_Init+0x28>)
 800b49e:	79fb      	ldrb	r3, [r7, #7]
 800b4a0:	7013      	strb	r3, [r2, #0]
}
 800b4a2:	bf00      	nop
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	24000b30 	.word	0x24000b30
 800b4b0:	24000b31 	.word	0x24000b31

0800b4b4 <split_color_array>:

//this shit is need to have the output image with the right color
void split_color_array(const uint16_t *input, uint8_t *output, size_t length)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
	for (size_t i = 0; i < length; ++i)
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	617b      	str	r3, [r7, #20]
 800b4c4:	e01b      	b.n	800b4fe <split_color_array+0x4a>
	{
		output[2 * i] = COLOR_HIGH_BYTE(input[i]);  // High byte first
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	0a1b      	lsrs	r3, r3, #8
 800b4d2:	b299      	uxth	r1, r3
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	4413      	add	r3, r2
 800b4dc:	b2ca      	uxtb	r2, r1
 800b4de:	701a      	strb	r2, [r3, #0]
		output[2 * i + 1] = COLOR_LOW_BYTE(input[i]);   // Then low byte
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	005b      	lsls	r3, r3, #1
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	8819      	ldrh	r1, [r3, #0]
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	005b      	lsls	r3, r3, #1
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	b2ca      	uxtb	r2, r1
 800b4f6:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; ++i)
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	617b      	str	r3, [r7, #20]
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	429a      	cmp	r2, r3
 800b504:	d3df      	bcc.n	800b4c6 <split_color_array+0x12>
	}
}
 800b506:	bf00      	nop
 800b508:	bf00      	nop
 800b50a:	371c      	adds	r7, #28
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <Display_Image>:

void Display_Image(uint16_t x_center, uint16_t y_center,uint16_t x_width, uint16_t y_width,const uint16_t *img,size_t pixel_count)
{
 800b514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b518:	b089      	sub	sp, #36	@ 0x24
 800b51a:	af02      	add	r7, sp, #8
 800b51c:	4606      	mov	r6, r0
 800b51e:	4608      	mov	r0, r1
 800b520:	4611      	mov	r1, r2
 800b522:	461a      	mov	r2, r3
 800b524:	4633      	mov	r3, r6
 800b526:	80fb      	strh	r3, [r7, #6]
 800b528:	4603      	mov	r3, r0
 800b52a:	80bb      	strh	r3, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	807b      	strh	r3, [r7, #2]
 800b530:	4613      	mov	r3, r2
 800b532:	803b      	strh	r3, [r7, #0]
 800b534:	466b      	mov	r3, sp
 800b536:	461e      	mov	r6, r3
	// We use the fixed size from the image data now
	uint16_t img_x = x_center - (x_width / 2);
 800b538:	887b      	ldrh	r3, [r7, #2]
 800b53a:	085b      	lsrs	r3, r3, #1
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	88fa      	ldrh	r2, [r7, #6]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	82fb      	strh	r3, [r7, #22]
	uint16_t img_y = y_center - (y_width / 2);
 800b544:	883b      	ldrh	r3, [r7, #0]
 800b546:	085b      	lsrs	r3, r3, #1
 800b548:	b29b      	uxth	r3, r3
 800b54a:	88ba      	ldrh	r2, [r7, #4]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	82bb      	strh	r3, [r7, #20]

	uint8_t result[pixel_count * 2];
 800b550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b552:	0059      	lsls	r1, r3, #1
 800b554:	460b      	mov	r3, r1
 800b556:	3b01      	subs	r3, #1
 800b558:	613b      	str	r3, [r7, #16]
 800b55a:	2300      	movs	r3, #0
 800b55c:	4688      	mov	r8, r1
 800b55e:	4699      	mov	r9, r3
 800b560:	f04f 0200 	mov.w	r2, #0
 800b564:	f04f 0300 	mov.w	r3, #0
 800b568:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b56c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b570:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b574:	2300      	movs	r3, #0
 800b576:	460c      	mov	r4, r1
 800b578:	461d      	mov	r5, r3
 800b57a:	f04f 0200 	mov.w	r2, #0
 800b57e:	f04f 0300 	mov.w	r3, #0
 800b582:	00eb      	lsls	r3, r5, #3
 800b584:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b588:	00e2      	lsls	r2, r4, #3
 800b58a:	1dcb      	adds	r3, r1, #7
 800b58c:	08db      	lsrs	r3, r3, #3
 800b58e:	00db      	lsls	r3, r3, #3
 800b590:	ebad 0d03 	sub.w	sp, sp, r3
 800b594:	ab02      	add	r3, sp, #8
 800b596:	3300      	adds	r3, #0
 800b598:	60fb      	str	r3, [r7, #12]

	//lenght of the array
	split_color_array(img, result,
 800b59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59c:	085b      	lsrs	r3, r3, #1
 800b59e:	461a      	mov	r2, r3
 800b5a0:	68f9      	ldr	r1, [r7, #12]
 800b5a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b5a4:	f7ff ff86 	bl	800b4b4 <split_color_array>
			pixel_count/ sizeof(uint16_t));

	ST7789_DrawImage(img_x, img_y, x_width, y_width, result);
 800b5a8:	883c      	ldrh	r4, [r7, #0]
 800b5aa:	887a      	ldrh	r2, [r7, #2]
 800b5ac:	8ab9      	ldrh	r1, [r7, #20]
 800b5ae:	8af8      	ldrh	r0, [r7, #22]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	4623      	mov	r3, r4
 800b5b6:	f000 fc03 	bl	800bdc0 <ST7789_DrawImage>
 800b5ba:	46b5      	mov	sp, r6
}
 800b5bc:	bf00      	nop
 800b5be:	371c      	adds	r7, #28
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800b5c8 <Display_HeartRate>:
{
	Display_Image(x_center,y_center,thermometer_icon_width,thermometer_icon_height,thermometer_icon_data,sizeof(thermometer_icon_data) );
}

void Display_HeartRate(uint16_t x_center, uint16_t y_center,const SmartWatchData_t* pData)
{
 800b5c8:	b5b0      	push	{r4, r5, r7, lr}
 800b5ca:	b098      	sub	sp, #96	@ 0x60
 800b5cc:	af04      	add	r7, sp, #16
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	603a      	str	r2, [r7, #0]
 800b5d2:	80fb      	strh	r3, [r7, #6]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	80bb      	strh	r3, [r7, #4]
	uint8_t hr = SmartWatchData_handle.heart_rate;
 800b5d8:	4b2c      	ldr	r3, [pc, #176]	@ (800b68c <Display_HeartRate+0xc4>)
 800b5da:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	@ 0x104
 800b5de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint16_t spo2 = SmartWatchData_handle.spo2;
 800b5e2:	4b2a      	ldr	r3, [pc, #168]	@ (800b68c <Display_HeartRate+0xc4>)
 800b5e4:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 800b5e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ec:	ee17 3a90 	vmov	r3, s15
 800b5f0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

	char hr_buf[32];
	char spo2_buf[32];

	snprintf(hr_buf, sizeof(hr_buf), " HeartRate : %u", (unsigned) hr);
 800b5f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b5f8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800b5fc:	4a24      	ldr	r2, [pc, #144]	@ (800b690 <Display_HeartRate+0xc8>)
 800b5fe:	2120      	movs	r1, #32
 800b600:	f001 fab2 	bl	800cb68 <sniprintf>
	snprintf(spo2_buf, sizeof(spo2_buf), " SPO2 : %u", (unsigned) spo2);
 800b604:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b608:	f107 0008 	add.w	r0, r7, #8
 800b60c:	4a21      	ldr	r2, [pc, #132]	@ (800b694 <Display_HeartRate+0xcc>)
 800b60e:	2120      	movs	r1, #32
 800b610:	f001 faaa 	bl	800cb68 <sniprintf>

	//space between lines of text
	int text_y_offset = 30;
 800b614:	231e      	movs	r3, #30
 800b616:	64bb      	str	r3, [r7, #72]	@ 0x48

	ST7789_WriteString(x_center, y_center , hr_buf, Font_11x18, RED, BLACK);
 800b618:	4b1f      	ldr	r3, [pc, #124]	@ (800b698 <Display_HeartRate+0xd0>)
 800b61a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b61e:	88b9      	ldrh	r1, [r7, #4]
 800b620:	88f8      	ldrh	r0, [r7, #6]
 800b622:	2200      	movs	r2, #0
 800b624:	9202      	str	r2, [sp, #8]
 800b626:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b62a:	9201      	str	r2, [sp, #4]
 800b62c:	685a      	ldr	r2, [r3, #4]
 800b62e:	9200      	str	r2, [sp, #0]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4622      	mov	r2, r4
 800b634:	f000 fc96 	bl	800bf64 <ST7789_WriteString>
	ST7789_WriteString(x_center, y_center + text_y_offset, spo2_buf, Font_11x18, RED, BLACK);
 800b638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	88bb      	ldrh	r3, [r7, #4]
 800b63e:	4413      	add	r3, r2
 800b640:	b299      	uxth	r1, r3
 800b642:	4b15      	ldr	r3, [pc, #84]	@ (800b698 <Display_HeartRate+0xd0>)
 800b644:	f107 0408 	add.w	r4, r7, #8
 800b648:	88f8      	ldrh	r0, [r7, #6]
 800b64a:	2200      	movs	r2, #0
 800b64c:	9202      	str	r2, [sp, #8]
 800b64e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b652:	9201      	str	r2, [sp, #4]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	9200      	str	r2, [sp, #0]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4622      	mov	r2, r4
 800b65c:	f000 fc82 	bl	800bf64 <ST7789_WriteString>


	Display_RenderAnimation(gif_center_x,gif_center_y,heart_animation_width,heart_animation_height,heart_gif_array,heart_gif_array_LEN,heart_gif_frame_pixel_count);
 800b660:	20a0      	movs	r0, #160	@ 0xa0
 800b662:	211e      	movs	r1, #30
 800b664:	2430      	movs	r4, #48	@ 0x30
 800b666:	2530      	movs	r5, #48	@ 0x30
 800b668:	4b0c      	ldr	r3, [pc, #48]	@ (800b69c <Display_HeartRate+0xd4>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	4a0c      	ldr	r2, [pc, #48]	@ (800b6a0 <Display_HeartRate+0xd8>)
 800b670:	6812      	ldr	r2, [r2, #0]
 800b672:	9202      	str	r2, [sp, #8]
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	4b0b      	ldr	r3, [pc, #44]	@ (800b6a4 <Display_HeartRate+0xdc>)
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	462b      	mov	r3, r5
 800b67c:	4622      	mov	r2, r4
 800b67e:	f000 f8b3 	bl	800b7e8 <Display_RenderAnimation>
}
 800b682:	bf00      	nop
 800b684:	3750      	adds	r7, #80	@ 0x50
 800b686:	46bd      	mov	sp, r7
 800b688:	bdb0      	pop	{r4, r5, r7, pc}
 800b68a:	bf00      	nop
 800b68c:	24000b38 	.word	0x24000b38
 800b690:	0800ebc0 	.word	0x0800ebc0
 800b694:	0800ebd0 	.word	0x0800ebd0
 800b698:	24000094 	.word	0x24000094
 800b69c:	08034c5c 	.word	0x08034c5c
 800b6a0:	08034c60 	.word	0x08034c60
 800b6a4:	2400005c 	.word	0x2400005c

0800b6a8 <Display_EnvironnementData>:

void Display_EnvironnementData(uint16_t x, uint16_t y,const SmartWatchData_t* pData)
{
 800b6a8:	b5b0      	push	{r4, r5, r7, lr}
 800b6aa:	b0a2      	sub	sp, #136	@ 0x88
 800b6ac:	af04      	add	r7, sp, #16
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	603a      	str	r2, [r7, #0]
 800b6b2:	80fb      	strh	r3, [r7, #6]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	80bb      	strh	r3, [r7, #4]


	//uint8_t hr = SmartWatchData_handle.heart_rate;
	uint16_t temp = pData->temperature;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	edd3 7a00 	vldr	s15, [r3]
 800b6be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6c2:	ee17 3a90 	vmov	r3, s15
 800b6c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint16_t pressure = pData->pressure;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	edd3 7a01 	vldr	s15, [r3, #4]
 800b6d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6d4:	ee17 3a90 	vmov	r3, s15
 800b6d8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	uint16_t humidity = pData->humidity;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	edd3 7a02 	vldr	s15, [r3, #8]
 800b6e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e6:	ee17 3a90 	vmov	r3, s15
 800b6ea:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72


	temp = 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	//pressure = 0;
	humidity = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

	char buf_temp[32];
	char buf_pressure[32];
	char buf_humidity[32];

	snprintf(buf_temp, sizeof(buf_temp), " Temperature : %d", temp);
 800b6fa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800b6fe:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800b702:	4a32      	ldr	r2, [pc, #200]	@ (800b7cc <Display_EnvironnementData+0x124>)
 800b704:	2120      	movs	r1, #32
 800b706:	f001 fa2f 	bl	800cb68 <sniprintf>
	snprintf(buf_pressure, sizeof(buf_pressure), " Pressure : %d", pressure);
 800b70a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800b70e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800b712:	4a2f      	ldr	r2, [pc, #188]	@ (800b7d0 <Display_EnvironnementData+0x128>)
 800b714:	2120      	movs	r1, #32
 800b716:	f001 fa27 	bl	800cb68 <sniprintf>
	snprintf(buf_humidity, sizeof(buf_humidity), " Humidity : %d", humidity);
 800b71a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800b71e:	f107 000c 	add.w	r0, r7, #12
 800b722:	4a2c      	ldr	r2, [pc, #176]	@ (800b7d4 <Display_EnvironnementData+0x12c>)
 800b724:	2120      	movs	r1, #32
 800b726:	f001 fa1f 	bl	800cb68 <sniprintf>

	//space between lines of text
	int text_y_offset = 30;
 800b72a:	231e      	movs	r3, #30
 800b72c:	66fb      	str	r3, [r7, #108]	@ 0x6c

	// no border checking so be careful when calling this
	ST7789_WriteString(x , y , buf_temp, Font_11x18, GREEN, BLACK);
 800b72e:	4b2a      	ldr	r3, [pc, #168]	@ (800b7d8 <Display_EnvironnementData+0x130>)
 800b730:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800b734:	88b9      	ldrh	r1, [r7, #4]
 800b736:	88f8      	ldrh	r0, [r7, #6]
 800b738:	2200      	movs	r2, #0
 800b73a:	9202      	str	r2, [sp, #8]
 800b73c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b740:	9201      	str	r2, [sp, #4]
 800b742:	685a      	ldr	r2, [r3, #4]
 800b744:	9200      	str	r2, [sp, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4622      	mov	r2, r4
 800b74a:	f000 fc0b 	bl	800bf64 <ST7789_WriteString>
	ST7789_WriteString(x , y + text_y_offset , buf_pressure, Font_11x18, GREEN, BLACK);
 800b74e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b750:	b29a      	uxth	r2, r3
 800b752:	88bb      	ldrh	r3, [r7, #4]
 800b754:	4413      	add	r3, r2
 800b756:	b299      	uxth	r1, r3
 800b758:	4b1f      	ldr	r3, [pc, #124]	@ (800b7d8 <Display_EnvironnementData+0x130>)
 800b75a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800b75e:	88f8      	ldrh	r0, [r7, #6]
 800b760:	2200      	movs	r2, #0
 800b762:	9202      	str	r2, [sp, #8]
 800b764:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b768:	9201      	str	r2, [sp, #4]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	9200      	str	r2, [sp, #0]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4622      	mov	r2, r4
 800b772:	f000 fbf7 	bl	800bf64 <ST7789_WriteString>
	ST7789_WriteString(x , y + 2 * text_y_offset , buf_humidity, Font_11x18, GREEN, BLACK);
 800b776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b778:	b29b      	uxth	r3, r3
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	88bb      	ldrh	r3, [r7, #4]
 800b780:	4413      	add	r3, r2
 800b782:	b299      	uxth	r1, r3
 800b784:	4b14      	ldr	r3, [pc, #80]	@ (800b7d8 <Display_EnvironnementData+0x130>)
 800b786:	f107 040c 	add.w	r4, r7, #12
 800b78a:	88f8      	ldrh	r0, [r7, #6]
 800b78c:	2200      	movs	r2, #0
 800b78e:	9202      	str	r2, [sp, #8]
 800b790:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b794:	9201      	str	r2, [sp, #4]
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	9200      	str	r2, [sp, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4622      	mov	r2, r4
 800b79e:	f000 fbe1 	bl	800bf64 <ST7789_WriteString>

//	Display_DrawThermo(x,y);
	Display_RenderAnimation(gif_center_x,gif_center_y,weather_animation_width,weather_animation_height,weather_gif_array,weather_gif_array_LEN,weather_gif_frame_pixel_count);
 800b7a2:	20a0      	movs	r0, #160	@ 0xa0
 800b7a4:	211e      	movs	r1, #30
 800b7a6:	2430      	movs	r4, #48	@ 0x30
 800b7a8:	2530      	movs	r5, #48	@ 0x30
 800b7aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b7dc <Display_EnvironnementData+0x134>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	4a0b      	ldr	r2, [pc, #44]	@ (800b7e0 <Display_EnvironnementData+0x138>)
 800b7b2:	6812      	ldr	r2, [r2, #0]
 800b7b4:	9202      	str	r2, [sp, #8]
 800b7b6:	9301      	str	r3, [sp, #4]
 800b7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e4 <Display_EnvironnementData+0x13c>)
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	462b      	mov	r3, r5
 800b7be:	4622      	mov	r2, r4
 800b7c0:	f000 f812 	bl	800b7e8 <Display_RenderAnimation>

}
 800b7c4:	bf00      	nop
 800b7c6:	3778      	adds	r7, #120	@ 0x78
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bdb0      	pop	{r4, r5, r7, pc}
 800b7cc:	0800ebdc 	.word	0x0800ebdc
 800b7d0:	0800ebf0 	.word	0x0800ebf0
 800b7d4:	0800ec00 	.word	0x0800ec00
 800b7d8:	24000094 	.word	0x24000094
 800b7dc:	08025054 	.word	0x08025054
 800b7e0:	08025058 	.word	0x08025058
 800b7e4:	24000010 	.word	0x24000010

0800b7e8 <Display_RenderAnimation>:

// --- Animation Function ---
// This function should be called repeatedly (e.g., from the main loop or Display_Update)
// when the animation needs to be displayed.
void Display_RenderAnimation(uint16_t x_center, uint16_t y_center,uint16_t x_width, uint16_t y_width,const uint16_t **frame_array,uint8_t animation_frame_array_len,size_t pixel_count)
{
 800b7e8:	b590      	push	{r4, r7, lr}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af02      	add	r7, sp, #8
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	4608      	mov	r0, r1
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	4623      	mov	r3, r4
 800b7f8:	80fb      	strh	r3, [r7, #6]
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	80bb      	strh	r3, [r7, #4]
 800b7fe:	460b      	mov	r3, r1
 800b800:	807b      	strh	r3, [r7, #2]
 800b802:	4613      	mov	r3, r2
 800b804:	803b      	strh	r3, [r7, #0]
    uint32_t current_tick = HAL_GetTick();
 800b806:	f7f6 fb2b 	bl	8001e60 <HAL_GetTick>
 800b80a:	60f8      	str	r0, [r7, #12]

    // Check if it's time to update the frame
    if (current_tick - s_animation_last_update_tick >= ANIMATION_FRAME_DELAY_MS) {
 800b80c:	4b16      	ldr	r3, [pc, #88]	@ (800b868 <Display_RenderAnimation+0x80>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	2b4f      	cmp	r3, #79	@ 0x4f
 800b816:	d923      	bls.n	800b860 <Display_RenderAnimation+0x78>
        s_animation_last_update_tick = current_tick;
 800b818:	4a13      	ldr	r2, [pc, #76]	@ (800b868 <Display_RenderAnimation+0x80>)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6013      	str	r3, [r2, #0]

        // Get the pointer to the current frame data
        const uint16_t* frame_data = frame_array[s_animation_current_frame];
 800b81e:	4b13      	ldr	r3, [pc, #76]	@ (800b86c <Display_RenderAnimation+0x84>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	6a3a      	ldr	r2, [r7, #32]
 800b826:	4413      	add	r3, r2
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	60bb      	str	r3, [r7, #8]
    	Display_Image(x_center,y_center,x_width,y_width,frame_data,pixel_count );
 800b82c:	883c      	ldrh	r4, [r7, #0]
 800b82e:	887a      	ldrh	r2, [r7, #2]
 800b830:	88b9      	ldrh	r1, [r7, #4]
 800b832:	88f8      	ldrh	r0, [r7, #6]
 800b834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b836:	9301      	str	r3, [sp, #4]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	4623      	mov	r3, r4
 800b83e:	f7ff fe69 	bl	800b514 <Display_Image>

        // Advance to the next frame
        s_animation_current_frame++;
 800b842:	4b0a      	ldr	r3, [pc, #40]	@ (800b86c <Display_RenderAnimation+0x84>)
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	3301      	adds	r3, #1
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	4b08      	ldr	r3, [pc, #32]	@ (800b86c <Display_RenderAnimation+0x84>)
 800b84c:	701a      	strb	r2, [r3, #0]
        if (s_animation_current_frame >= animation_frame_array_len) {
 800b84e:	4b07      	ldr	r3, [pc, #28]	@ (800b86c <Display_RenderAnimation+0x84>)
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800b856:	429a      	cmp	r2, r3
 800b858:	d802      	bhi.n	800b860 <Display_RenderAnimation+0x78>
            s_animation_current_frame = 0; // Loop back to the beginning
 800b85a:	4b04      	ldr	r3, [pc, #16]	@ (800b86c <Display_RenderAnimation+0x84>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	701a      	strb	r2, [r3, #0]
        }
    }
    // If not enough time has passed, do nothing, the previous frame remains displayed.
}
 800b860:	bf00      	nop
 800b862:	3714      	adds	r7, #20
 800b864:	46bd      	mov	sp, r7
 800b866:	bd90      	pop	{r4, r7, pc}
 800b868:	24000b34 	.word	0x24000b34
 800b86c:	24000b32 	.word	0x24000b32

0800b870 <Display_RenderClock>:


void Display_RenderClock(const SmartWatchData_t* pData)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]

}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <Display_RenderEnvironmental>:

void Display_RenderEnvironmental(const SmartWatchData_t* pData)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
	Display_EnvironnementData(40,60,pData);
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	213c      	movs	r1, #60	@ 0x3c
 800b890:	2028      	movs	r0, #40	@ 0x28
 800b892:	f7ff ff09 	bl	800b6a8 <Display_EnvironnementData>
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <Display_RenderHeartRate>:


void Display_RenderHeartRate(const SmartWatchData_t* pData)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
	Display_HeartRate(40, 60, pData);
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	213c      	movs	r1, #60	@ 0x3c
 800b8aa:	2028      	movs	r0, #40	@ 0x28
 800b8ac:	f7ff fe8c 	bl	800b5c8 <Display_HeartRate>

}
 800b8b0:	bf00      	nop
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <Display_RenderGPS>:

void Display_RenderGPS(const SmartWatchData_t* pData)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]

}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <Display_Update>:


// --- Update the main Display_Update function ---
void Display_Update(UI_Screen_State_t screen, const SmartWatchData_t* pData) {
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af04      	add	r7, sp, #16
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	6039      	str	r1, [r7, #0]
 800b8d6:	71fb      	strb	r3, [r7, #7]

	previous_screenState = current_screenState;
 800b8d8:	4b25      	ldr	r3, [pc, #148]	@ (800b970 <Display_Update+0xa4>)
 800b8da:	781a      	ldrb	r2, [r3, #0]
 800b8dc:	4b25      	ldr	r3, [pc, #148]	@ (800b974 <Display_Update+0xa8>)
 800b8de:	701a      	strb	r2, [r3, #0]
	current_screenState = screen;
 800b8e0:	4a23      	ldr	r2, [pc, #140]	@ (800b970 <Display_Update+0xa4>)
 800b8e2:	79fb      	ldrb	r3, [r7, #7]
 800b8e4:	7013      	strb	r3, [r2, #0]
    // OPTIONAL: Clear screen only when changing screen state, not every frame of animation.
    if (current_screenState != previous_screenState) {
 800b8e6:	4b22      	ldr	r3, [pc, #136]	@ (800b970 <Display_Update+0xa4>)
 800b8e8:	781a      	ldrb	r2, [r3, #0]
 800b8ea:	4b22      	ldr	r3, [pc, #136]	@ (800b974 <Display_Update+0xa8>)
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d00a      	beq.n	800b908 <Display_Update+0x3c>
        ST7789_Fill_Color(BLACK); // Clear only when screen changes
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	f000 fa2e 	bl	800bd54 <ST7789_Fill_Color>
        s_animation_current_frame = 0; // Reset animation frame when switching to it
 800b8f8:	4b1f      	ldr	r3, [pc, #124]	@ (800b978 <Display_Update+0xac>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	701a      	strb	r2, [r3, #0]
        s_animation_last_update_tick = HAL_GetTick(); // Reset timer to draw first frame immediately
 800b8fe:	f7f6 faaf 	bl	8001e60 <HAL_GetTick>
 800b902:	4603      	mov	r3, r0
 800b904:	4a1d      	ldr	r2, [pc, #116]	@ (800b97c <Display_Update+0xb0>)
 800b906:	6013      	str	r3, [r2, #0]
    }

    switch (screen) {
 800b908:	79fb      	ldrb	r3, [r7, #7]
 800b90a:	2b04      	cmp	r3, #4
 800b90c:	d81c      	bhi.n	800b948 <Display_Update+0x7c>
 800b90e:	a201      	add	r2, pc, #4	@ (adr r2, 800b914 <Display_Update+0x48>)
 800b910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b914:	0800b929 	.word	0x0800b929
 800b918:	0800b931 	.word	0x0800b931
 800b91c:	0800b949 	.word	0x0800b949
 800b920:	0800b939 	.word	0x0800b939
 800b924:	0800b941 	.word	0x0800b941
        case SCREEN_CLOCK:
            Display_RenderClock(pData);
 800b928:	6838      	ldr	r0, [r7, #0]
 800b92a:	f7ff ffa1 	bl	800b870 <Display_RenderClock>
            break;
 800b92e:	e01a      	b.n	800b966 <Display_Update+0x9a>
        case SCREEN_ENVIRONMENTAL:
            Display_RenderEnvironmental(pData);
 800b930:	6838      	ldr	r0, [r7, #0]
 800b932:	f7ff ffa7 	bl	800b884 <Display_RenderEnvironmental>
            break;
 800b936:	e016      	b.n	800b966 <Display_Update+0x9a>
        case SCREEN_HEART_RATE: // Example: Show static heart + text here
             Display_RenderHeartRate(pData); // Assuming this renders text + static heart
 800b938:	6838      	ldr	r0, [r7, #0]
 800b93a:	f7ff ffb0 	bl	800b89e <Display_RenderHeartRate>
             break;
 800b93e:	e012      	b.n	800b966 <Display_Update+0x9a>
        case SCREEN_GPS_STATUS:
            Display_RenderGPS(pData);
 800b940:	6838      	ldr	r0, [r7, #0]
 800b942:	f7ff ffb9 	bl	800b8b8 <Display_RenderGPS>
            break;
 800b946:	e00e      	b.n	800b966 <Display_Update+0x9a>

        // ... other cases ...
        default:
            ST7789_WriteString(30, 20, "Unknown Screen", Font_11x18, RED, BLACK);
 800b948:	4b0d      	ldr	r3, [pc, #52]	@ (800b980 <Display_Update+0xb4>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	9202      	str	r2, [sp, #8]
 800b94e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b952:	9201      	str	r2, [sp, #4]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	9200      	str	r2, [sp, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a0a      	ldr	r2, [pc, #40]	@ (800b984 <Display_Update+0xb8>)
 800b95c:	2114      	movs	r1, #20
 800b95e:	201e      	movs	r0, #30
 800b960:	f000 fb00 	bl	800bf64 <ST7789_WriteString>
            break;
 800b964:	bf00      	nop
    }
}
 800b966:	bf00      	nop
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	24000b31 	.word	0x24000b31
 800b974:	24000b30 	.word	0x24000b30
 800b978:	24000b32 	.word	0x24000b32
 800b97c:	24000b34 	.word	0x24000b34
 800b980:	24000094 	.word	0x24000094
 800b984:	0800ec10 	.word	0x0800ec10

0800b988 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800b998:	bf00      	nop
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b9b4:	480c      	ldr	r0, [pc, #48]	@ (800b9e8 <ST7789_WriteCommand+0x44>)
 800b9b6:	f7f9 fca5 	bl	8005304 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b9c0:	480a      	ldr	r0, [pc, #40]	@ (800b9ec <ST7789_WriteCommand+0x48>)
 800b9c2:	f7f9 fc9f 	bl	8005304 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800b9c6:	1df9      	adds	r1, r7, #7
 800b9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	4808      	ldr	r0, [pc, #32]	@ (800b9f0 <ST7789_WriteCommand+0x4c>)
 800b9d0:	f7fc fd1c 	bl	800840c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b9da:	4803      	ldr	r0, [pc, #12]	@ (800b9e8 <ST7789_WriteCommand+0x44>)
 800b9dc:	f7f9 fc92 	bl	8005304 <HAL_GPIO_WritePin>
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	58021800 	.word	0x58021800
 800b9ec:	58020c00 	.word	0x58020c00
 800b9f0:	2400058c 	.word	0x2400058c

0800b9f4 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ba04:	4820      	ldr	r0, [pc, #128]	@ (800ba88 <ST7789_WriteData+0x94>)
 800ba06:	f7f9 fc7d 	bl	8005304 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ba10:	481e      	ldr	r0, [pc, #120]	@ (800ba8c <ST7789_WriteData+0x98>)
 800ba12:	f7f9 fc77 	bl	8005304 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800ba16:	e02a      	b.n	800ba6e <ST7789_WriteData+0x7a>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	bf28      	it	cs
 800ba22:	4613      	movcs	r3, r2
 800ba24:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 800ba26:	4b1a      	ldr	r3, [pc, #104]	@ (800ba90 <ST7789_WriteData+0x9c>)
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d30e      	bcc.n	800ba50 <ST7789_WriteData+0x5c>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 800ba32:	89fb      	ldrh	r3, [r7, #14]
 800ba34:	461a      	mov	r2, r3
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	4816      	ldr	r0, [pc, #88]	@ (800ba94 <ST7789_WriteData+0xa0>)
 800ba3a:	f7fc fed5 	bl	80087e8 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 800ba3e:	bf00      	nop
 800ba40:	4b14      	ldr	r3, [pc, #80]	@ (800ba94 <ST7789_WriteData+0xa0>)
 800ba42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d1f8      	bne.n	800ba40 <ST7789_WriteData+0x4c>
 800ba4e:	e006      	b.n	800ba5e <ST7789_WriteData+0x6a>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800ba50:	89fa      	ldrh	r2, [r7, #14]
 800ba52:	f04f 33ff 	mov.w	r3, #4294967295
 800ba56:	6879      	ldr	r1, [r7, #4]
 800ba58:	480e      	ldr	r0, [pc, #56]	@ (800ba94 <ST7789_WriteData+0xa0>)
 800ba5a:	f7fc fcd7 	bl	800840c <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 800ba5e:	89fb      	ldrh	r3, [r7, #14]
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	4413      	add	r3, r2
 800ba64:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800ba66:	89fb      	ldrh	r3, [r7, #14]
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1d1      	bne.n	800ba18 <ST7789_WriteData+0x24>
	}

	ST7789_UnSelect();
 800ba74:	2201      	movs	r2, #1
 800ba76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ba7a:	4803      	ldr	r0, [pc, #12]	@ (800ba88 <ST7789_WriteData+0x94>)
 800ba7c:	f7f9 fc42 	bl	8005304 <HAL_GPIO_WritePin>
}
 800ba80:	bf00      	nop
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	58021800 	.word	0x58021800
 800ba8c:	58020c00 	.word	0x58020c00
 800ba90:	2400009c 	.word	0x2400009c
 800ba94:	2400058c 	.word	0x2400058c

0800ba98 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800baa2:	2200      	movs	r2, #0
 800baa4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800baa8:	480c      	ldr	r0, [pc, #48]	@ (800badc <ST7789_WriteSmallData+0x44>)
 800baaa:	f7f9 fc2b 	bl	8005304 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800baae:	2201      	movs	r2, #1
 800bab0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800bab4:	480a      	ldr	r0, [pc, #40]	@ (800bae0 <ST7789_WriteSmallData+0x48>)
 800bab6:	f7f9 fc25 	bl	8005304 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800baba:	1df9      	adds	r1, r7, #7
 800babc:	f04f 33ff 	mov.w	r3, #4294967295
 800bac0:	2201      	movs	r2, #1
 800bac2:	4808      	ldr	r0, [pc, #32]	@ (800bae4 <ST7789_WriteSmallData+0x4c>)
 800bac4:	f7fc fca2 	bl	800840c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800bac8:	2201      	movs	r2, #1
 800baca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bace:	4803      	ldr	r0, [pc, #12]	@ (800badc <ST7789_WriteSmallData+0x44>)
 800bad0:	f7f9 fc18 	bl	8005304 <HAL_GPIO_WritePin>
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	58021800 	.word	0x58021800
 800bae0:	58020c00 	.word	0x58020c00
 800bae4:	2400058c 	.word	0x2400058c

0800bae8 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800baf2:	2036      	movs	r0, #54	@ 0x36
 800baf4:	f7ff ff56 	bl	800b9a4 <ST7789_WriteCommand>
	switch (m) {
 800baf8:	79fb      	ldrb	r3, [r7, #7]
 800bafa:	2b03      	cmp	r3, #3
 800bafc:	d81a      	bhi.n	800bb34 <ST7789_SetRotation+0x4c>
 800bafe:	a201      	add	r2, pc, #4	@ (adr r2, 800bb04 <ST7789_SetRotation+0x1c>)
 800bb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb04:	0800bb15 	.word	0x0800bb15
 800bb08:	0800bb1d 	.word	0x0800bb1d
 800bb0c:	0800bb25 	.word	0x0800bb25
 800bb10:	0800bb2d 	.word	0x0800bb2d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 800bb14:	20c0      	movs	r0, #192	@ 0xc0
 800bb16:	f7ff ffbf 	bl	800ba98 <ST7789_WriteSmallData>
		break;
 800bb1a:	e00c      	b.n	800bb36 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800bb1c:	20a0      	movs	r0, #160	@ 0xa0
 800bb1e:	f7ff ffbb 	bl	800ba98 <ST7789_WriteSmallData>
		break;
 800bb22:	e008      	b.n	800bb36 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 800bb24:	2000      	movs	r0, #0
 800bb26:	f7ff ffb7 	bl	800ba98 <ST7789_WriteSmallData>
		break;
 800bb2a:	e004      	b.n	800bb36 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800bb2c:	2060      	movs	r0, #96	@ 0x60
 800bb2e:	f7ff ffb3 	bl	800ba98 <ST7789_WriteSmallData>
		break;
 800bb32:	e000      	b.n	800bb36 <ST7789_SetRotation+0x4e>
	default:
		break;
 800bb34:	bf00      	nop
	}
}
 800bb36:	bf00      	nop
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop

0800bb40 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800bb40:	b590      	push	{r4, r7, lr}
 800bb42:	b087      	sub	sp, #28
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4604      	mov	r4, r0
 800bb48:	4608      	mov	r0, r1
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	4623      	mov	r3, r4
 800bb50:	80fb      	strh	r3, [r7, #6]
 800bb52:	4603      	mov	r3, r0
 800bb54:	80bb      	strh	r3, [r7, #4]
 800bb56:	460b      	mov	r3, r1
 800bb58:	807b      	strh	r3, [r7, #2]
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bb64:	4825      	ldr	r0, [pc, #148]	@ (800bbfc <ST7789_SetAddressWindow+0xbc>)
 800bb66:	f7f9 fbcd 	bl	8005304 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800bb6a:	88fb      	ldrh	r3, [r7, #6]
 800bb6c:	82fb      	strh	r3, [r7, #22]
 800bb6e:	887b      	ldrh	r3, [r7, #2]
 800bb70:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800bb72:	88bb      	ldrh	r3, [r7, #4]
 800bb74:	3323      	adds	r3, #35	@ 0x23
 800bb76:	827b      	strh	r3, [r7, #18]
 800bb78:	883b      	ldrh	r3, [r7, #0]
 800bb7a:	3323      	adds	r3, #35	@ 0x23
 800bb7c:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800bb7e:	202a      	movs	r0, #42	@ 0x2a
 800bb80:	f7ff ff10 	bl	800b9a4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800bb84:	8afb      	ldrh	r3, [r7, #22]
 800bb86:	0a1b      	lsrs	r3, r3, #8
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	733b      	strb	r3, [r7, #12]
 800bb8e:	8afb      	ldrh	r3, [r7, #22]
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	737b      	strb	r3, [r7, #13]
 800bb94:	8abb      	ldrh	r3, [r7, #20]
 800bb96:	0a1b      	lsrs	r3, r3, #8
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	73bb      	strb	r3, [r7, #14]
 800bb9e:	8abb      	ldrh	r3, [r7, #20]
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800bba4:	f107 030c 	add.w	r3, r7, #12
 800bba8:	2104      	movs	r1, #4
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff ff22 	bl	800b9f4 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800bbb0:	202b      	movs	r0, #43	@ 0x2b
 800bbb2:	f7ff fef7 	bl	800b9a4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800bbb6:	8a7b      	ldrh	r3, [r7, #18]
 800bbb8:	0a1b      	lsrs	r3, r3, #8
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	723b      	strb	r3, [r7, #8]
 800bbc0:	8a7b      	ldrh	r3, [r7, #18]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	727b      	strb	r3, [r7, #9]
 800bbc6:	8a3b      	ldrh	r3, [r7, #16]
 800bbc8:	0a1b      	lsrs	r3, r3, #8
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	72bb      	strb	r3, [r7, #10]
 800bbd0:	8a3b      	ldrh	r3, [r7, #16]
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800bbd6:	f107 0308 	add.w	r3, r7, #8
 800bbda:	2104      	movs	r1, #4
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7ff ff09 	bl	800b9f4 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800bbe2:	202c      	movs	r0, #44	@ 0x2c
 800bbe4:	f7ff fede 	bl	800b9a4 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bbee:	4803      	ldr	r0, [pc, #12]	@ (800bbfc <ST7789_SetAddressWindow+0xbc>)
 800bbf0:	f7f9 fb88 	bl	8005304 <HAL_GPIO_WritePin>
}
 800bbf4:	bf00      	nop
 800bbf6:	371c      	adds	r7, #28
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd90      	pop	{r4, r7, pc}
 800bbfc:	58021800 	.word	0x58021800

0800bc00 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 800bc00:	b590      	push	{r4, r7, lr}
 800bc02:	b08b      	sub	sp, #44	@ 0x2c
 800bc04:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800bc06:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	484c      	ldr	r0, [pc, #304]	@ (800bd40 <ST7789_Init+0x140>)
 800bc0e:	f001 f824 	bl	800cc5a <memset>
	#endif
	HAL_Delay(10);
 800bc12:	200a      	movs	r0, #10
 800bc14:	f7f6 f930 	bl	8001e78 <HAL_Delay>
    ST7789_RST_Clr();
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bc1e:	4849      	ldr	r0, [pc, #292]	@ (800bd44 <ST7789_Init+0x144>)
 800bc20:	f7f9 fb70 	bl	8005304 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800bc24:	2014      	movs	r0, #20
 800bc26:	f7f6 f927 	bl	8001e78 <HAL_Delay>
    ST7789_RST_Set();
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bc30:	4844      	ldr	r0, [pc, #272]	@ (800bd44 <ST7789_Init+0x144>)
 800bc32:	f7f9 fb67 	bl	8005304 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800bc36:	2014      	movs	r0, #20
 800bc38:	f7f6 f91e 	bl	8001e78 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800bc3c:	203a      	movs	r0, #58	@ 0x3a
 800bc3e:	f7ff feb1 	bl	800b9a4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800bc42:	2055      	movs	r0, #85	@ 0x55
 800bc44:	f7ff ff28 	bl	800ba98 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800bc48:	20b2      	movs	r0, #178	@ 0xb2
 800bc4a:	f7ff feab 	bl	800b9a4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800bc4e:	4a3e      	ldr	r2, [pc, #248]	@ (800bd48 <ST7789_Init+0x148>)
 800bc50:	f107 0320 	add.w	r3, r7, #32
 800bc54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc58:	6018      	str	r0, [r3, #0]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800bc5e:	f107 0320 	add.w	r3, r7, #32
 800bc62:	2105      	movs	r1, #5
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7ff fec5 	bl	800b9f4 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800bc6a:	2003      	movs	r0, #3
 800bc6c:	f7ff ff3c 	bl	800bae8 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 800bc70:	20b7      	movs	r0, #183	@ 0xb7
 800bc72:	f7ff fe97 	bl	800b9a4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800bc76:	2035      	movs	r0, #53	@ 0x35
 800bc78:	f7ff ff0e 	bl	800ba98 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800bc7c:	20bb      	movs	r0, #187	@ 0xbb
 800bc7e:	f7ff fe91 	bl	800b9a4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800bc82:	2019      	movs	r0, #25
 800bc84:	f7ff ff08 	bl	800ba98 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800bc88:	20c0      	movs	r0, #192	@ 0xc0
 800bc8a:	f7ff fe8b 	bl	800b9a4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800bc8e:	202c      	movs	r0, #44	@ 0x2c
 800bc90:	f7ff ff02 	bl	800ba98 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 800bc94:	20c2      	movs	r0, #194	@ 0xc2
 800bc96:	f7ff fe85 	bl	800b9a4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	f7ff fefc 	bl	800ba98 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 800bca0:	20c3      	movs	r0, #195	@ 0xc3
 800bca2:	f7ff fe7f 	bl	800b9a4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800bca6:	2012      	movs	r0, #18
 800bca8:	f7ff fef6 	bl	800ba98 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 800bcac:	20c4      	movs	r0, #196	@ 0xc4
 800bcae:	f7ff fe79 	bl	800b9a4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800bcb2:	2020      	movs	r0, #32
 800bcb4:	f7ff fef0 	bl	800ba98 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800bcb8:	20c6      	movs	r0, #198	@ 0xc6
 800bcba:	f7ff fe73 	bl	800b9a4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800bcbe:	200f      	movs	r0, #15
 800bcc0:	f7ff feea 	bl	800ba98 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 800bcc4:	20d0      	movs	r0, #208	@ 0xd0
 800bcc6:	f7ff fe6d 	bl	800b9a4 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800bcca:	20a4      	movs	r0, #164	@ 0xa4
 800bccc:	f7ff fee4 	bl	800ba98 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 800bcd0:	20a1      	movs	r0, #161	@ 0xa1
 800bcd2:	f7ff fee1 	bl	800ba98 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800bcd6:	20e0      	movs	r0, #224	@ 0xe0
 800bcd8:	f7ff fe64 	bl	800b9a4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 800bcdc:	4b1b      	ldr	r3, [pc, #108]	@ (800bd4c <ST7789_Init+0x14c>)
 800bcde:	f107 0410 	add.w	r4, r7, #16
 800bce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bce4:	c407      	stmia	r4!, {r0, r1, r2}
 800bce6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800bce8:	f107 0310 	add.w	r3, r7, #16
 800bcec:	210e      	movs	r1, #14
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff fe80 	bl	800b9f4 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800bcf4:	20e1      	movs	r0, #225	@ 0xe1
 800bcf6:	f7ff fe55 	bl	800b9a4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800bcfa:	4b15      	ldr	r3, [pc, #84]	@ (800bd50 <ST7789_Init+0x150>)
 800bcfc:	463c      	mov	r4, r7
 800bcfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd00:	c407      	stmia	r4!, {r0, r1, r2}
 800bd02:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800bd04:	463b      	mov	r3, r7
 800bd06:	210e      	movs	r1, #14
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff fe73 	bl	800b9f4 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800bd0e:	2021      	movs	r0, #33	@ 0x21
 800bd10:	f7ff fe48 	bl	800b9a4 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 800bd14:	2011      	movs	r0, #17
 800bd16:	f7ff fe45 	bl	800b9a4 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800bd1a:	2013      	movs	r0, #19
 800bd1c:	f7ff fe42 	bl	800b9a4 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 800bd20:	2029      	movs	r0, #41	@ 0x29
 800bd22:	f7ff fe3f 	bl	800b9a4 <ST7789_WriteCommand>

	HAL_Delay(50);
 800bd26:	2032      	movs	r0, #50	@ 0x32
 800bd28:	f7f6 f8a6 	bl	8001e78 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	f000 f811 	bl	800bd54 <ST7789_Fill_Color>
	HAL_Delay(75);
 800bd32:	204b      	movs	r0, #75	@ 0x4b
 800bd34:	f7f6 f8a0 	bl	8001e78 <HAL_Delay>

}
 800bd38:	bf00      	nop
 800bd3a:	372c      	adds	r7, #44	@ 0x2c
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd90      	pop	{r4, r7, pc}
 800bd40:	24000cf4 	.word	0x24000cf4
 800bd44:	58020c00 	.word	0x58020c00
 800bd48:	0800ec20 	.word	0x0800ec20
 800bd4c:	0800ec28 	.word	0x0800ec28
 800bd50:	0800ec38 	.word	0x0800ec38

0800bd54 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800bd5e:	23a9      	movs	r3, #169	@ 0xa9
 800bd60:	f240 123f 	movw	r2, #319	@ 0x13f
 800bd64:	2100      	movs	r1, #0
 800bd66:	2000      	movs	r0, #0
 800bd68:	f7ff feea 	bl	800bb40 <ST7789_SetAddressWindow>
	ST7789_Select();
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd72:	4811      	ldr	r0, [pc, #68]	@ (800bdb8 <ST7789_Fill_Color+0x64>)
 800bd74:	f7f9 fac6 	bl	8005304 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	81fb      	strh	r3, [r7, #14]
 800bd7c:	e00e      	b.n	800bd9c <ST7789_Fill_Color+0x48>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 800bd7e:	88fb      	ldrh	r3, [r7, #6]
 800bd80:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800bd84:	4619      	mov	r1, r3
 800bd86:	480d      	ldr	r0, [pc, #52]	@ (800bdbc <ST7789_Fill_Color+0x68>)
 800bd88:	f000 ff67 	bl	800cc5a <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800bd8c:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 800bd90:	480a      	ldr	r0, [pc, #40]	@ (800bdbc <ST7789_Fill_Color+0x68>)
 800bd92:	f7ff fe2f 	bl	800b9f4 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800bd96:	89fb      	ldrh	r3, [r7, #14]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	81fb      	strh	r3, [r7, #14]
 800bd9c:	89fb      	ldrh	r3, [r7, #14]
 800bd9e:	2b21      	cmp	r3, #33	@ 0x21
 800bda0:	d9ed      	bls.n	800bd7e <ST7789_Fill_Color+0x2a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 800bda2:	2201      	movs	r2, #1
 800bda4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bda8:	4803      	ldr	r0, [pc, #12]	@ (800bdb8 <ST7789_Fill_Color+0x64>)
 800bdaa:	f7f9 faab 	bl	8005304 <HAL_GPIO_WritePin>
}
 800bdae:	bf00      	nop
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	58021800 	.word	0x58021800
 800bdbc:	24000cf4 	.word	0x24000cf4

0800bdc0 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 800bdc0:	b590      	push	{r4, r7, lr}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	4608      	mov	r0, r1
 800bdca:	4611      	mov	r1, r2
 800bdcc:	461a      	mov	r2, r3
 800bdce:	4623      	mov	r3, r4
 800bdd0:	80fb      	strh	r3, [r7, #6]
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	80bb      	strh	r3, [r7, #4]
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	807b      	strh	r3, [r7, #2]
 800bdda:	4613      	mov	r3, r2
 800bddc:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 800bdde:	88fb      	ldrh	r3, [r7, #6]
 800bde0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800bde4:	d234      	bcs.n	800be50 <ST7789_DrawImage+0x90>
 800bde6:	88bb      	ldrh	r3, [r7, #4]
 800bde8:	2ba9      	cmp	r3, #169	@ 0xa9
 800bdea:	d831      	bhi.n	800be50 <ST7789_DrawImage+0x90>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 800bdec:	88fa      	ldrh	r2, [r7, #6]
 800bdee:	887b      	ldrh	r3, [r7, #2]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800bdf6:	dc2d      	bgt.n	800be54 <ST7789_DrawImage+0x94>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 800bdf8:	88ba      	ldrh	r2, [r7, #4]
 800bdfa:	883b      	ldrh	r3, [r7, #0]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	2baa      	cmp	r3, #170	@ 0xaa
 800be00:	dc2a      	bgt.n	800be58 <ST7789_DrawImage+0x98>
		return;

	ST7789_Select();
 800be02:	2200      	movs	r2, #0
 800be04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800be08:	4815      	ldr	r0, [pc, #84]	@ (800be60 <ST7789_DrawImage+0xa0>)
 800be0a:	f7f9 fa7b 	bl	8005304 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800be0e:	88fa      	ldrh	r2, [r7, #6]
 800be10:	887b      	ldrh	r3, [r7, #2]
 800be12:	4413      	add	r3, r2
 800be14:	b29b      	uxth	r3, r3
 800be16:	3b01      	subs	r3, #1
 800be18:	b29c      	uxth	r4, r3
 800be1a:	88ba      	ldrh	r2, [r7, #4]
 800be1c:	883b      	ldrh	r3, [r7, #0]
 800be1e:	4413      	add	r3, r2
 800be20:	b29b      	uxth	r3, r3
 800be22:	3b01      	subs	r3, #1
 800be24:	b29b      	uxth	r3, r3
 800be26:	88b9      	ldrh	r1, [r7, #4]
 800be28:	88f8      	ldrh	r0, [r7, #6]
 800be2a:	4622      	mov	r2, r4
 800be2c:	f7ff fe88 	bl	800bb40 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 800be30:	887b      	ldrh	r3, [r7, #2]
 800be32:	883a      	ldrh	r2, [r7, #0]
 800be34:	fb02 f303 	mul.w	r3, r2, r3
 800be38:	005b      	lsls	r3, r3, #1
 800be3a:	4619      	mov	r1, r3
 800be3c:	69b8      	ldr	r0, [r7, #24]
 800be3e:	f7ff fdd9 	bl	800b9f4 <ST7789_WriteData>
	ST7789_UnSelect();
 800be42:	2201      	movs	r2, #1
 800be44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800be48:	4805      	ldr	r0, [pc, #20]	@ (800be60 <ST7789_DrawImage+0xa0>)
 800be4a:	f7f9 fa5b 	bl	8005304 <HAL_GPIO_WritePin>
 800be4e:	e004      	b.n	800be5a <ST7789_DrawImage+0x9a>
		return;
 800be50:	bf00      	nop
 800be52:	e002      	b.n	800be5a <ST7789_DrawImage+0x9a>
		return;
 800be54:	bf00      	nop
 800be56:	e000      	b.n	800be5a <ST7789_DrawImage+0x9a>
		return;
 800be58:	bf00      	nop
}
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd90      	pop	{r4, r7, pc}
 800be60:	58021800 	.word	0x58021800

0800be64 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800be64:	b082      	sub	sp, #8
 800be66:	b580      	push	{r7, lr}
 800be68:	b088      	sub	sp, #32
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be6e:	4603      	mov	r3, r0
 800be70:	80fb      	strh	r3, [r7, #6]
 800be72:	460b      	mov	r3, r1
 800be74:	80bb      	strh	r3, [r7, #4]
 800be76:	4613      	mov	r3, r2
 800be78:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800be7a:	2200      	movs	r2, #0
 800be7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800be80:	4837      	ldr	r0, [pc, #220]	@ (800bf60 <ST7789_WriteChar+0xfc>)
 800be82:	f7f9 fa3f 	bl	8005304 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800be86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800be8a:	461a      	mov	r2, r3
 800be8c:	88fb      	ldrh	r3, [r7, #6]
 800be8e:	4413      	add	r3, r2
 800be90:	b29b      	uxth	r3, r3
 800be92:	3b01      	subs	r3, #1
 800be94:	b29a      	uxth	r2, r3
 800be96:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800be9a:	4619      	mov	r1, r3
 800be9c:	88bb      	ldrh	r3, [r7, #4]
 800be9e:	440b      	add	r3, r1
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	3b01      	subs	r3, #1
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	88b9      	ldrh	r1, [r7, #4]
 800bea8:	88f8      	ldrh	r0, [r7, #6]
 800beaa:	f7ff fe49 	bl	800bb40 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800beae:	2300      	movs	r3, #0
 800beb0:	61fb      	str	r3, [r7, #28]
 800beb2:	e041      	b.n	800bf38 <ST7789_WriteChar+0xd4>
		b = font.data[(ch - 32) * font.height + i];
 800beb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beb6:	78fb      	ldrb	r3, [r7, #3]
 800beb8:	3b20      	subs	r3, #32
 800beba:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800bebe:	fb01 f303 	mul.w	r3, r1, r3
 800bec2:	4619      	mov	r1, r3
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	440b      	add	r3, r1
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	4413      	add	r3, r2
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800bed0:	2300      	movs	r3, #0
 800bed2:	61bb      	str	r3, [r7, #24]
 800bed4:	e027      	b.n	800bf26 <ST7789_WriteChar+0xc2>
			if ((b << j) & 0x8000) {
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	fa02 f303 	lsl.w	r3, r2, r3
 800bede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00e      	beq.n	800bf04 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 800bee6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bee8:	0a1b      	lsrs	r3, r3, #8
 800beea:	b29b      	uxth	r3, r3
 800beec:	b2db      	uxtb	r3, r3
 800beee:	743b      	strb	r3, [r7, #16]
 800bef0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 800bef6:	f107 0310 	add.w	r3, r7, #16
 800befa:	2102      	movs	r1, #2
 800befc:	4618      	mov	r0, r3
 800befe:	f7ff fd79 	bl	800b9f4 <ST7789_WriteData>
 800bf02:	e00d      	b.n	800bf20 <ST7789_WriteChar+0xbc>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 800bf04:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800bf06:	0a1b      	lsrs	r3, r3, #8
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	733b      	strb	r3, [r7, #12]
 800bf0e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 800bf14:	f107 030c 	add.w	r3, r7, #12
 800bf18:	2102      	movs	r1, #2
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff fd6a 	bl	800b9f4 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	3301      	adds	r3, #1
 800bf24:	61bb      	str	r3, [r7, #24]
 800bf26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d3d1      	bcc.n	800bed6 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	3301      	adds	r3, #1
 800bf36:	61fb      	str	r3, [r7, #28]
 800bf38:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d3b7      	bcc.n	800beb4 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 800bf44:	2201      	movs	r2, #1
 800bf46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bf4a:	4805      	ldr	r0, [pc, #20]	@ (800bf60 <ST7789_WriteChar+0xfc>)
 800bf4c:	f7f9 f9da 	bl	8005304 <HAL_GPIO_WritePin>
}
 800bf50:	bf00      	nop
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf5a:	b002      	add	sp, #8
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	58021800 	.word	0x58021800

0800bf64 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800bf64:	b082      	sub	sp, #8
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b086      	sub	sp, #24
 800bf6a:	af04      	add	r7, sp, #16
 800bf6c:	603a      	str	r2, [r7, #0]
 800bf6e:	617b      	str	r3, [r7, #20]
 800bf70:	4603      	mov	r3, r0
 800bf72:	80fb      	strh	r3, [r7, #6]
 800bf74:	460b      	mov	r3, r1
 800bf76:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bf7e:	4823      	ldr	r0, [pc, #140]	@ (800c00c <ST7789_WriteString+0xa8>)
 800bf80:	f7f9 f9c0 	bl	8005304 <HAL_GPIO_WritePin>
	while (*str) {
 800bf84:	e02e      	b.n	800bfe4 <ST7789_WriteString+0x80>
		if (x + font.width >= ST7789_WIDTH) {
 800bf86:	88fb      	ldrh	r3, [r7, #6]
 800bf88:	7d3a      	ldrb	r2, [r7, #20]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800bf90:	db13      	blt.n	800bfba <ST7789_WriteString+0x56>
			x = 0;
 800bf92:	2300      	movs	r3, #0
 800bf94:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800bf96:	7d7b      	ldrb	r3, [r7, #21]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	88bb      	ldrh	r3, [r7, #4]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 800bfa0:	88bb      	ldrh	r3, [r7, #4]
 800bfa2:	7d7a      	ldrb	r2, [r7, #21]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	2ba9      	cmp	r3, #169	@ 0xa9
 800bfa8:	dc21      	bgt.n	800bfee <ST7789_WriteString+0x8a>
				break;
			}

			if (*str == ' ') {
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b20      	cmp	r3, #32
 800bfb0:	d103      	bne.n	800bfba <ST7789_WriteString+0x56>
				// skip spaces in the beginning of the new line
				str++;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	603b      	str	r3, [r7, #0]
				continue;
 800bfb8:	e014      	b.n	800bfe4 <ST7789_WriteString+0x80>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	781a      	ldrb	r2, [r3, #0]
 800bfbe:	88b9      	ldrh	r1, [r7, #4]
 800bfc0:	88f8      	ldrh	r0, [r7, #6]
 800bfc2:	8c3b      	ldrh	r3, [r7, #32]
 800bfc4:	9302      	str	r3, [sp, #8]
 800bfc6:	8bbb      	ldrh	r3, [r7, #28]
 800bfc8:	9301      	str	r3, [sp, #4]
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f7ff ff48 	bl	800be64 <ST7789_WriteChar>
		x += font.width;
 800bfd4:	7d3b      	ldrb	r3, [r7, #20]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	88fb      	ldrh	r3, [r7, #6]
 800bfda:	4413      	add	r3, r2
 800bfdc:	80fb      	strh	r3, [r7, #6]
		str++;
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	603b      	str	r3, [r7, #0]
	while (*str) {
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1cc      	bne.n	800bf86 <ST7789_WriteString+0x22>
 800bfec:	e000      	b.n	800bff0 <ST7789_WriteString+0x8c>
				break;
 800bfee:	bf00      	nop
	}
	ST7789_UnSelect();
 800bff0:	2201      	movs	r2, #1
 800bff2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bff6:	4805      	ldr	r0, [pc, #20]	@ (800c00c <ST7789_WriteString+0xa8>)
 800bff8:	f7f9 f984 	bl	8005304 <HAL_GPIO_WritePin>
}
 800bffc:	bf00      	nop
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c006:	b002      	add	sp, #8
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	58021800 	.word	0x58021800

0800c010 <malloc>:
 800c010:	4b02      	ldr	r3, [pc, #8]	@ (800c01c <malloc+0xc>)
 800c012:	4601      	mov	r1, r0
 800c014:	6818      	ldr	r0, [r3, #0]
 800c016:	f000 b825 	b.w	800c064 <_malloc_r>
 800c01a:	bf00      	nop
 800c01c:	240000ac 	.word	0x240000ac

0800c020 <sbrk_aligned>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	4e0f      	ldr	r6, [pc, #60]	@ (800c060 <sbrk_aligned+0x40>)
 800c024:	460c      	mov	r4, r1
 800c026:	6831      	ldr	r1, [r6, #0]
 800c028:	4605      	mov	r5, r0
 800c02a:	b911      	cbnz	r1, 800c032 <sbrk_aligned+0x12>
 800c02c:	f000 fe56 	bl	800ccdc <_sbrk_r>
 800c030:	6030      	str	r0, [r6, #0]
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f000 fe51 	bl	800ccdc <_sbrk_r>
 800c03a:	1c43      	adds	r3, r0, #1
 800c03c:	d103      	bne.n	800c046 <sbrk_aligned+0x26>
 800c03e:	f04f 34ff 	mov.w	r4, #4294967295
 800c042:	4620      	mov	r0, r4
 800c044:	bd70      	pop	{r4, r5, r6, pc}
 800c046:	1cc4      	adds	r4, r0, #3
 800c048:	f024 0403 	bic.w	r4, r4, #3
 800c04c:	42a0      	cmp	r0, r4
 800c04e:	d0f8      	beq.n	800c042 <sbrk_aligned+0x22>
 800c050:	1a21      	subs	r1, r4, r0
 800c052:	4628      	mov	r0, r5
 800c054:	f000 fe42 	bl	800ccdc <_sbrk_r>
 800c058:	3001      	adds	r0, #1
 800c05a:	d1f2      	bne.n	800c042 <sbrk_aligned+0x22>
 800c05c:	e7ef      	b.n	800c03e <sbrk_aligned+0x1e>
 800c05e:	bf00      	nop
 800c060:	24001974 	.word	0x24001974

0800c064 <_malloc_r>:
 800c064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c068:	1ccd      	adds	r5, r1, #3
 800c06a:	f025 0503 	bic.w	r5, r5, #3
 800c06e:	3508      	adds	r5, #8
 800c070:	2d0c      	cmp	r5, #12
 800c072:	bf38      	it	cc
 800c074:	250c      	movcc	r5, #12
 800c076:	2d00      	cmp	r5, #0
 800c078:	4606      	mov	r6, r0
 800c07a:	db01      	blt.n	800c080 <_malloc_r+0x1c>
 800c07c:	42a9      	cmp	r1, r5
 800c07e:	d904      	bls.n	800c08a <_malloc_r+0x26>
 800c080:	230c      	movs	r3, #12
 800c082:	6033      	str	r3, [r6, #0]
 800c084:	2000      	movs	r0, #0
 800c086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c08a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c160 <_malloc_r+0xfc>
 800c08e:	f000 f869 	bl	800c164 <__malloc_lock>
 800c092:	f8d8 3000 	ldr.w	r3, [r8]
 800c096:	461c      	mov	r4, r3
 800c098:	bb44      	cbnz	r4, 800c0ec <_malloc_r+0x88>
 800c09a:	4629      	mov	r1, r5
 800c09c:	4630      	mov	r0, r6
 800c09e:	f7ff ffbf 	bl	800c020 <sbrk_aligned>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	d158      	bne.n	800c15a <_malloc_r+0xf6>
 800c0a8:	f8d8 4000 	ldr.w	r4, [r8]
 800c0ac:	4627      	mov	r7, r4
 800c0ae:	2f00      	cmp	r7, #0
 800c0b0:	d143      	bne.n	800c13a <_malloc_r+0xd6>
 800c0b2:	2c00      	cmp	r4, #0
 800c0b4:	d04b      	beq.n	800c14e <_malloc_r+0xea>
 800c0b6:	6823      	ldr	r3, [r4, #0]
 800c0b8:	4639      	mov	r1, r7
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	eb04 0903 	add.w	r9, r4, r3
 800c0c0:	f000 fe0c 	bl	800ccdc <_sbrk_r>
 800c0c4:	4581      	cmp	r9, r0
 800c0c6:	d142      	bne.n	800c14e <_malloc_r+0xea>
 800c0c8:	6821      	ldr	r1, [r4, #0]
 800c0ca:	1a6d      	subs	r5, r5, r1
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f7ff ffa6 	bl	800c020 <sbrk_aligned>
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d03a      	beq.n	800c14e <_malloc_r+0xea>
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	442b      	add	r3, r5
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	f8d8 3000 	ldr.w	r3, [r8]
 800c0e2:	685a      	ldr	r2, [r3, #4]
 800c0e4:	bb62      	cbnz	r2, 800c140 <_malloc_r+0xdc>
 800c0e6:	f8c8 7000 	str.w	r7, [r8]
 800c0ea:	e00f      	b.n	800c10c <_malloc_r+0xa8>
 800c0ec:	6822      	ldr	r2, [r4, #0]
 800c0ee:	1b52      	subs	r2, r2, r5
 800c0f0:	d420      	bmi.n	800c134 <_malloc_r+0xd0>
 800c0f2:	2a0b      	cmp	r2, #11
 800c0f4:	d917      	bls.n	800c126 <_malloc_r+0xc2>
 800c0f6:	1961      	adds	r1, r4, r5
 800c0f8:	42a3      	cmp	r3, r4
 800c0fa:	6025      	str	r5, [r4, #0]
 800c0fc:	bf18      	it	ne
 800c0fe:	6059      	strne	r1, [r3, #4]
 800c100:	6863      	ldr	r3, [r4, #4]
 800c102:	bf08      	it	eq
 800c104:	f8c8 1000 	streq.w	r1, [r8]
 800c108:	5162      	str	r2, [r4, r5]
 800c10a:	604b      	str	r3, [r1, #4]
 800c10c:	4630      	mov	r0, r6
 800c10e:	f000 f82f 	bl	800c170 <__malloc_unlock>
 800c112:	f104 000b 	add.w	r0, r4, #11
 800c116:	1d23      	adds	r3, r4, #4
 800c118:	f020 0007 	bic.w	r0, r0, #7
 800c11c:	1ac2      	subs	r2, r0, r3
 800c11e:	bf1c      	itt	ne
 800c120:	1a1b      	subne	r3, r3, r0
 800c122:	50a3      	strne	r3, [r4, r2]
 800c124:	e7af      	b.n	800c086 <_malloc_r+0x22>
 800c126:	6862      	ldr	r2, [r4, #4]
 800c128:	42a3      	cmp	r3, r4
 800c12a:	bf0c      	ite	eq
 800c12c:	f8c8 2000 	streq.w	r2, [r8]
 800c130:	605a      	strne	r2, [r3, #4]
 800c132:	e7eb      	b.n	800c10c <_malloc_r+0xa8>
 800c134:	4623      	mov	r3, r4
 800c136:	6864      	ldr	r4, [r4, #4]
 800c138:	e7ae      	b.n	800c098 <_malloc_r+0x34>
 800c13a:	463c      	mov	r4, r7
 800c13c:	687f      	ldr	r7, [r7, #4]
 800c13e:	e7b6      	b.n	800c0ae <_malloc_r+0x4a>
 800c140:	461a      	mov	r2, r3
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	42a3      	cmp	r3, r4
 800c146:	d1fb      	bne.n	800c140 <_malloc_r+0xdc>
 800c148:	2300      	movs	r3, #0
 800c14a:	6053      	str	r3, [r2, #4]
 800c14c:	e7de      	b.n	800c10c <_malloc_r+0xa8>
 800c14e:	230c      	movs	r3, #12
 800c150:	6033      	str	r3, [r6, #0]
 800c152:	4630      	mov	r0, r6
 800c154:	f000 f80c 	bl	800c170 <__malloc_unlock>
 800c158:	e794      	b.n	800c084 <_malloc_r+0x20>
 800c15a:	6005      	str	r5, [r0, #0]
 800c15c:	e7d6      	b.n	800c10c <_malloc_r+0xa8>
 800c15e:	bf00      	nop
 800c160:	24001978 	.word	0x24001978

0800c164 <__malloc_lock>:
 800c164:	4801      	ldr	r0, [pc, #4]	@ (800c16c <__malloc_lock+0x8>)
 800c166:	f000 be06 	b.w	800cd76 <__retarget_lock_acquire_recursive>
 800c16a:	bf00      	nop
 800c16c:	24001abc 	.word	0x24001abc

0800c170 <__malloc_unlock>:
 800c170:	4801      	ldr	r0, [pc, #4]	@ (800c178 <__malloc_unlock+0x8>)
 800c172:	f000 be01 	b.w	800cd78 <__retarget_lock_release_recursive>
 800c176:	bf00      	nop
 800c178:	24001abc 	.word	0x24001abc

0800c17c <__cvt>:
 800c17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c17e:	ed2d 8b02 	vpush	{d8}
 800c182:	eeb0 8b40 	vmov.f64	d8, d0
 800c186:	b085      	sub	sp, #20
 800c188:	4617      	mov	r7, r2
 800c18a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c18c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c18e:	ee18 2a90 	vmov	r2, s17
 800c192:	f025 0520 	bic.w	r5, r5, #32
 800c196:	2a00      	cmp	r2, #0
 800c198:	bfb6      	itet	lt
 800c19a:	222d      	movlt	r2, #45	@ 0x2d
 800c19c:	2200      	movge	r2, #0
 800c19e:	eeb1 8b40 	vneglt.f64	d8, d0
 800c1a2:	2d46      	cmp	r5, #70	@ 0x46
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	701a      	strb	r2, [r3, #0]
 800c1a8:	d004      	beq.n	800c1b4 <__cvt+0x38>
 800c1aa:	2d45      	cmp	r5, #69	@ 0x45
 800c1ac:	d100      	bne.n	800c1b0 <__cvt+0x34>
 800c1ae:	3401      	adds	r4, #1
 800c1b0:	2102      	movs	r1, #2
 800c1b2:	e000      	b.n	800c1b6 <__cvt+0x3a>
 800c1b4:	2103      	movs	r1, #3
 800c1b6:	ab03      	add	r3, sp, #12
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	ab02      	add	r3, sp, #8
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	4622      	mov	r2, r4
 800c1c0:	4633      	mov	r3, r6
 800c1c2:	eeb0 0b48 	vmov.f64	d0, d8
 800c1c6:	f000 fe6f 	bl	800cea8 <_dtoa_r>
 800c1ca:	2d47      	cmp	r5, #71	@ 0x47
 800c1cc:	d114      	bne.n	800c1f8 <__cvt+0x7c>
 800c1ce:	07fb      	lsls	r3, r7, #31
 800c1d0:	d50a      	bpl.n	800c1e8 <__cvt+0x6c>
 800c1d2:	1902      	adds	r2, r0, r4
 800c1d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1dc:	bf08      	it	eq
 800c1de:	9203      	streq	r2, [sp, #12]
 800c1e0:	2130      	movs	r1, #48	@ 0x30
 800c1e2:	9b03      	ldr	r3, [sp, #12]
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d319      	bcc.n	800c21c <__cvt+0xa0>
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1ec:	1a1b      	subs	r3, r3, r0
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	b005      	add	sp, #20
 800c1f2:	ecbd 8b02 	vpop	{d8}
 800c1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1f8:	2d46      	cmp	r5, #70	@ 0x46
 800c1fa:	eb00 0204 	add.w	r2, r0, r4
 800c1fe:	d1e9      	bne.n	800c1d4 <__cvt+0x58>
 800c200:	7803      	ldrb	r3, [r0, #0]
 800c202:	2b30      	cmp	r3, #48	@ 0x30
 800c204:	d107      	bne.n	800c216 <__cvt+0x9a>
 800c206:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20e:	bf1c      	itt	ne
 800c210:	f1c4 0401 	rsbne	r4, r4, #1
 800c214:	6034      	strne	r4, [r6, #0]
 800c216:	6833      	ldr	r3, [r6, #0]
 800c218:	441a      	add	r2, r3
 800c21a:	e7db      	b.n	800c1d4 <__cvt+0x58>
 800c21c:	1c5c      	adds	r4, r3, #1
 800c21e:	9403      	str	r4, [sp, #12]
 800c220:	7019      	strb	r1, [r3, #0]
 800c222:	e7de      	b.n	800c1e2 <__cvt+0x66>

0800c224 <__exponent>:
 800c224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c226:	2900      	cmp	r1, #0
 800c228:	bfba      	itte	lt
 800c22a:	4249      	neglt	r1, r1
 800c22c:	232d      	movlt	r3, #45	@ 0x2d
 800c22e:	232b      	movge	r3, #43	@ 0x2b
 800c230:	2909      	cmp	r1, #9
 800c232:	7002      	strb	r2, [r0, #0]
 800c234:	7043      	strb	r3, [r0, #1]
 800c236:	dd29      	ble.n	800c28c <__exponent+0x68>
 800c238:	f10d 0307 	add.w	r3, sp, #7
 800c23c:	461d      	mov	r5, r3
 800c23e:	270a      	movs	r7, #10
 800c240:	461a      	mov	r2, r3
 800c242:	fbb1 f6f7 	udiv	r6, r1, r7
 800c246:	fb07 1416 	mls	r4, r7, r6, r1
 800c24a:	3430      	adds	r4, #48	@ 0x30
 800c24c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c250:	460c      	mov	r4, r1
 800c252:	2c63      	cmp	r4, #99	@ 0x63
 800c254:	f103 33ff 	add.w	r3, r3, #4294967295
 800c258:	4631      	mov	r1, r6
 800c25a:	dcf1      	bgt.n	800c240 <__exponent+0x1c>
 800c25c:	3130      	adds	r1, #48	@ 0x30
 800c25e:	1e94      	subs	r4, r2, #2
 800c260:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c264:	1c41      	adds	r1, r0, #1
 800c266:	4623      	mov	r3, r4
 800c268:	42ab      	cmp	r3, r5
 800c26a:	d30a      	bcc.n	800c282 <__exponent+0x5e>
 800c26c:	f10d 0309 	add.w	r3, sp, #9
 800c270:	1a9b      	subs	r3, r3, r2
 800c272:	42ac      	cmp	r4, r5
 800c274:	bf88      	it	hi
 800c276:	2300      	movhi	r3, #0
 800c278:	3302      	adds	r3, #2
 800c27a:	4403      	add	r3, r0
 800c27c:	1a18      	subs	r0, r3, r0
 800c27e:	b003      	add	sp, #12
 800c280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c282:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c286:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c28a:	e7ed      	b.n	800c268 <__exponent+0x44>
 800c28c:	2330      	movs	r3, #48	@ 0x30
 800c28e:	3130      	adds	r1, #48	@ 0x30
 800c290:	7083      	strb	r3, [r0, #2]
 800c292:	70c1      	strb	r1, [r0, #3]
 800c294:	1d03      	adds	r3, r0, #4
 800c296:	e7f1      	b.n	800c27c <__exponent+0x58>

0800c298 <_printf_float>:
 800c298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29c:	b08d      	sub	sp, #52	@ 0x34
 800c29e:	460c      	mov	r4, r1
 800c2a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c2a4:	4616      	mov	r6, r2
 800c2a6:	461f      	mov	r7, r3
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	f000 fcdf 	bl	800cc6c <_localeconv_r>
 800c2ae:	f8d0 b000 	ldr.w	fp, [r0]
 800c2b2:	4658      	mov	r0, fp
 800c2b4:	f7f4 f86c 	bl	8000390 <strlen>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c2c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c2c4:	6822      	ldr	r2, [r4, #0]
 800c2c6:	9005      	str	r0, [sp, #20]
 800c2c8:	3307      	adds	r3, #7
 800c2ca:	f023 0307 	bic.w	r3, r3, #7
 800c2ce:	f103 0108 	add.w	r1, r3, #8
 800c2d2:	f8c8 1000 	str.w	r1, [r8]
 800c2d6:	ed93 0b00 	vldr	d0, [r3]
 800c2da:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c538 <_printf_float+0x2a0>
 800c2de:	eeb0 7bc0 	vabs.f64	d7, d0
 800c2e2:	eeb4 7b46 	vcmp.f64	d7, d6
 800c2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c2ee:	dd24      	ble.n	800c33a <_printf_float+0xa2>
 800c2f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f8:	d502      	bpl.n	800c300 <_printf_float+0x68>
 800c2fa:	232d      	movs	r3, #45	@ 0x2d
 800c2fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c300:	498f      	ldr	r1, [pc, #572]	@ (800c540 <_printf_float+0x2a8>)
 800c302:	4b90      	ldr	r3, [pc, #576]	@ (800c544 <_printf_float+0x2ac>)
 800c304:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c308:	bf8c      	ite	hi
 800c30a:	4688      	movhi	r8, r1
 800c30c:	4698      	movls	r8, r3
 800c30e:	f022 0204 	bic.w	r2, r2, #4
 800c312:	2303      	movs	r3, #3
 800c314:	6123      	str	r3, [r4, #16]
 800c316:	6022      	str	r2, [r4, #0]
 800c318:	f04f 0a00 	mov.w	sl, #0
 800c31c:	9700      	str	r7, [sp, #0]
 800c31e:	4633      	mov	r3, r6
 800c320:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c322:	4621      	mov	r1, r4
 800c324:	4628      	mov	r0, r5
 800c326:	f000 f9d1 	bl	800c6cc <_printf_common>
 800c32a:	3001      	adds	r0, #1
 800c32c:	f040 8089 	bne.w	800c442 <_printf_float+0x1aa>
 800c330:	f04f 30ff 	mov.w	r0, #4294967295
 800c334:	b00d      	add	sp, #52	@ 0x34
 800c336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c342:	d709      	bvc.n	800c358 <_printf_float+0xc0>
 800c344:	ee10 3a90 	vmov	r3, s1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bfbc      	itt	lt
 800c34c:	232d      	movlt	r3, #45	@ 0x2d
 800c34e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c352:	497d      	ldr	r1, [pc, #500]	@ (800c548 <_printf_float+0x2b0>)
 800c354:	4b7d      	ldr	r3, [pc, #500]	@ (800c54c <_printf_float+0x2b4>)
 800c356:	e7d5      	b.n	800c304 <_printf_float+0x6c>
 800c358:	6863      	ldr	r3, [r4, #4]
 800c35a:	1c59      	adds	r1, r3, #1
 800c35c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c360:	d139      	bne.n	800c3d6 <_printf_float+0x13e>
 800c362:	2306      	movs	r3, #6
 800c364:	6063      	str	r3, [r4, #4]
 800c366:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c36a:	2300      	movs	r3, #0
 800c36c:	6022      	str	r2, [r4, #0]
 800c36e:	9303      	str	r3, [sp, #12]
 800c370:	ab0a      	add	r3, sp, #40	@ 0x28
 800c372:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c376:	ab09      	add	r3, sp, #36	@ 0x24
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	6861      	ldr	r1, [r4, #4]
 800c37c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c380:	4628      	mov	r0, r5
 800c382:	f7ff fefb 	bl	800c17c <__cvt>
 800c386:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c38a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c38c:	4680      	mov	r8, r0
 800c38e:	d129      	bne.n	800c3e4 <_printf_float+0x14c>
 800c390:	1cc8      	adds	r0, r1, #3
 800c392:	db02      	blt.n	800c39a <_printf_float+0x102>
 800c394:	6863      	ldr	r3, [r4, #4]
 800c396:	4299      	cmp	r1, r3
 800c398:	dd41      	ble.n	800c41e <_printf_float+0x186>
 800c39a:	f1a9 0902 	sub.w	r9, r9, #2
 800c39e:	fa5f f989 	uxtb.w	r9, r9
 800c3a2:	3901      	subs	r1, #1
 800c3a4:	464a      	mov	r2, r9
 800c3a6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c3aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3ac:	f7ff ff3a 	bl	800c224 <__exponent>
 800c3b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3b2:	1813      	adds	r3, r2, r0
 800c3b4:	2a01      	cmp	r2, #1
 800c3b6:	4682      	mov	sl, r0
 800c3b8:	6123      	str	r3, [r4, #16]
 800c3ba:	dc02      	bgt.n	800c3c2 <_printf_float+0x12a>
 800c3bc:	6822      	ldr	r2, [r4, #0]
 800c3be:	07d2      	lsls	r2, r2, #31
 800c3c0:	d501      	bpl.n	800c3c6 <_printf_float+0x12e>
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	6123      	str	r3, [r4, #16]
 800c3c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d0a6      	beq.n	800c31c <_printf_float+0x84>
 800c3ce:	232d      	movs	r3, #45	@ 0x2d
 800c3d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3d4:	e7a2      	b.n	800c31c <_printf_float+0x84>
 800c3d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c3da:	d1c4      	bne.n	800c366 <_printf_float+0xce>
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1c2      	bne.n	800c366 <_printf_float+0xce>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e7bf      	b.n	800c364 <_printf_float+0xcc>
 800c3e4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c3e8:	d9db      	bls.n	800c3a2 <_printf_float+0x10a>
 800c3ea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c3ee:	d118      	bne.n	800c422 <_printf_float+0x18a>
 800c3f0:	2900      	cmp	r1, #0
 800c3f2:	6863      	ldr	r3, [r4, #4]
 800c3f4:	dd0b      	ble.n	800c40e <_printf_float+0x176>
 800c3f6:	6121      	str	r1, [r4, #16]
 800c3f8:	b913      	cbnz	r3, 800c400 <_printf_float+0x168>
 800c3fa:	6822      	ldr	r2, [r4, #0]
 800c3fc:	07d0      	lsls	r0, r2, #31
 800c3fe:	d502      	bpl.n	800c406 <_printf_float+0x16e>
 800c400:	3301      	adds	r3, #1
 800c402:	440b      	add	r3, r1
 800c404:	6123      	str	r3, [r4, #16]
 800c406:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c408:	f04f 0a00 	mov.w	sl, #0
 800c40c:	e7db      	b.n	800c3c6 <_printf_float+0x12e>
 800c40e:	b913      	cbnz	r3, 800c416 <_printf_float+0x17e>
 800c410:	6822      	ldr	r2, [r4, #0]
 800c412:	07d2      	lsls	r2, r2, #31
 800c414:	d501      	bpl.n	800c41a <_printf_float+0x182>
 800c416:	3302      	adds	r3, #2
 800c418:	e7f4      	b.n	800c404 <_printf_float+0x16c>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e7f2      	b.n	800c404 <_printf_float+0x16c>
 800c41e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c424:	4299      	cmp	r1, r3
 800c426:	db05      	blt.n	800c434 <_printf_float+0x19c>
 800c428:	6823      	ldr	r3, [r4, #0]
 800c42a:	6121      	str	r1, [r4, #16]
 800c42c:	07d8      	lsls	r0, r3, #31
 800c42e:	d5ea      	bpl.n	800c406 <_printf_float+0x16e>
 800c430:	1c4b      	adds	r3, r1, #1
 800c432:	e7e7      	b.n	800c404 <_printf_float+0x16c>
 800c434:	2900      	cmp	r1, #0
 800c436:	bfd4      	ite	le
 800c438:	f1c1 0202 	rsble	r2, r1, #2
 800c43c:	2201      	movgt	r2, #1
 800c43e:	4413      	add	r3, r2
 800c440:	e7e0      	b.n	800c404 <_printf_float+0x16c>
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	055a      	lsls	r2, r3, #21
 800c446:	d407      	bmi.n	800c458 <_printf_float+0x1c0>
 800c448:	6923      	ldr	r3, [r4, #16]
 800c44a:	4642      	mov	r2, r8
 800c44c:	4631      	mov	r1, r6
 800c44e:	4628      	mov	r0, r5
 800c450:	47b8      	blx	r7
 800c452:	3001      	adds	r0, #1
 800c454:	d12a      	bne.n	800c4ac <_printf_float+0x214>
 800c456:	e76b      	b.n	800c330 <_printf_float+0x98>
 800c458:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c45c:	f240 80e0 	bls.w	800c620 <_printf_float+0x388>
 800c460:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c464:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c46c:	d133      	bne.n	800c4d6 <_printf_float+0x23e>
 800c46e:	4a38      	ldr	r2, [pc, #224]	@ (800c550 <_printf_float+0x2b8>)
 800c470:	2301      	movs	r3, #1
 800c472:	4631      	mov	r1, r6
 800c474:	4628      	mov	r0, r5
 800c476:	47b8      	blx	r7
 800c478:	3001      	adds	r0, #1
 800c47a:	f43f af59 	beq.w	800c330 <_printf_float+0x98>
 800c47e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c482:	4543      	cmp	r3, r8
 800c484:	db02      	blt.n	800c48c <_printf_float+0x1f4>
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	07d8      	lsls	r0, r3, #31
 800c48a:	d50f      	bpl.n	800c4ac <_printf_float+0x214>
 800c48c:	9b05      	ldr	r3, [sp, #20]
 800c48e:	465a      	mov	r2, fp
 800c490:	4631      	mov	r1, r6
 800c492:	4628      	mov	r0, r5
 800c494:	47b8      	blx	r7
 800c496:	3001      	adds	r0, #1
 800c498:	f43f af4a 	beq.w	800c330 <_printf_float+0x98>
 800c49c:	f04f 0900 	mov.w	r9, #0
 800c4a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4a4:	f104 0a1a 	add.w	sl, r4, #26
 800c4a8:	45c8      	cmp	r8, r9
 800c4aa:	dc09      	bgt.n	800c4c0 <_printf_float+0x228>
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	079b      	lsls	r3, r3, #30
 800c4b0:	f100 8107 	bmi.w	800c6c2 <_printf_float+0x42a>
 800c4b4:	68e0      	ldr	r0, [r4, #12]
 800c4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4b8:	4298      	cmp	r0, r3
 800c4ba:	bfb8      	it	lt
 800c4bc:	4618      	movlt	r0, r3
 800c4be:	e739      	b.n	800c334 <_printf_float+0x9c>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	4652      	mov	r2, sl
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	47b8      	blx	r7
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	f43f af30 	beq.w	800c330 <_printf_float+0x98>
 800c4d0:	f109 0901 	add.w	r9, r9, #1
 800c4d4:	e7e8      	b.n	800c4a8 <_printf_float+0x210>
 800c4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	dc3b      	bgt.n	800c554 <_printf_float+0x2bc>
 800c4dc:	4a1c      	ldr	r2, [pc, #112]	@ (800c550 <_printf_float+0x2b8>)
 800c4de:	2301      	movs	r3, #1
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	47b8      	blx	r7
 800c4e6:	3001      	adds	r0, #1
 800c4e8:	f43f af22 	beq.w	800c330 <_printf_float+0x98>
 800c4ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c4f0:	ea59 0303 	orrs.w	r3, r9, r3
 800c4f4:	d102      	bne.n	800c4fc <_printf_float+0x264>
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	07d9      	lsls	r1, r3, #31
 800c4fa:	d5d7      	bpl.n	800c4ac <_printf_float+0x214>
 800c4fc:	9b05      	ldr	r3, [sp, #20]
 800c4fe:	465a      	mov	r2, fp
 800c500:	4631      	mov	r1, r6
 800c502:	4628      	mov	r0, r5
 800c504:	47b8      	blx	r7
 800c506:	3001      	adds	r0, #1
 800c508:	f43f af12 	beq.w	800c330 <_printf_float+0x98>
 800c50c:	f04f 0a00 	mov.w	sl, #0
 800c510:	f104 0b1a 	add.w	fp, r4, #26
 800c514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c516:	425b      	negs	r3, r3
 800c518:	4553      	cmp	r3, sl
 800c51a:	dc01      	bgt.n	800c520 <_printf_float+0x288>
 800c51c:	464b      	mov	r3, r9
 800c51e:	e794      	b.n	800c44a <_printf_float+0x1b2>
 800c520:	2301      	movs	r3, #1
 800c522:	465a      	mov	r2, fp
 800c524:	4631      	mov	r1, r6
 800c526:	4628      	mov	r0, r5
 800c528:	47b8      	blx	r7
 800c52a:	3001      	adds	r0, #1
 800c52c:	f43f af00 	beq.w	800c330 <_printf_float+0x98>
 800c530:	f10a 0a01 	add.w	sl, sl, #1
 800c534:	e7ee      	b.n	800c514 <_printf_float+0x27c>
 800c536:	bf00      	nop
 800c538:	ffffffff 	.word	0xffffffff
 800c53c:	7fefffff 	.word	0x7fefffff
 800c540:	08034c68 	.word	0x08034c68
 800c544:	08034c64 	.word	0x08034c64
 800c548:	08034c70 	.word	0x08034c70
 800c54c:	08034c6c 	.word	0x08034c6c
 800c550:	08034c74 	.word	0x08034c74
 800c554:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c556:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c55a:	4553      	cmp	r3, sl
 800c55c:	bfa8      	it	ge
 800c55e:	4653      	movge	r3, sl
 800c560:	2b00      	cmp	r3, #0
 800c562:	4699      	mov	r9, r3
 800c564:	dc37      	bgt.n	800c5d6 <_printf_float+0x33e>
 800c566:	2300      	movs	r3, #0
 800c568:	9307      	str	r3, [sp, #28]
 800c56a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c56e:	f104 021a 	add.w	r2, r4, #26
 800c572:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c574:	9907      	ldr	r1, [sp, #28]
 800c576:	9306      	str	r3, [sp, #24]
 800c578:	eba3 0309 	sub.w	r3, r3, r9
 800c57c:	428b      	cmp	r3, r1
 800c57e:	dc31      	bgt.n	800c5e4 <_printf_float+0x34c>
 800c580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c582:	459a      	cmp	sl, r3
 800c584:	dc3b      	bgt.n	800c5fe <_printf_float+0x366>
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	07da      	lsls	r2, r3, #31
 800c58a:	d438      	bmi.n	800c5fe <_printf_float+0x366>
 800c58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c58e:	ebaa 0903 	sub.w	r9, sl, r3
 800c592:	9b06      	ldr	r3, [sp, #24]
 800c594:	ebaa 0303 	sub.w	r3, sl, r3
 800c598:	4599      	cmp	r9, r3
 800c59a:	bfa8      	it	ge
 800c59c:	4699      	movge	r9, r3
 800c59e:	f1b9 0f00 	cmp.w	r9, #0
 800c5a2:	dc34      	bgt.n	800c60e <_printf_float+0x376>
 800c5a4:	f04f 0800 	mov.w	r8, #0
 800c5a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5ac:	f104 0b1a 	add.w	fp, r4, #26
 800c5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b2:	ebaa 0303 	sub.w	r3, sl, r3
 800c5b6:	eba3 0309 	sub.w	r3, r3, r9
 800c5ba:	4543      	cmp	r3, r8
 800c5bc:	f77f af76 	ble.w	800c4ac <_printf_float+0x214>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	465a      	mov	r2, fp
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	47b8      	blx	r7
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	f43f aeb0 	beq.w	800c330 <_printf_float+0x98>
 800c5d0:	f108 0801 	add.w	r8, r8, #1
 800c5d4:	e7ec      	b.n	800c5b0 <_printf_float+0x318>
 800c5d6:	4642      	mov	r2, r8
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4628      	mov	r0, r5
 800c5dc:	47b8      	blx	r7
 800c5de:	3001      	adds	r0, #1
 800c5e0:	d1c1      	bne.n	800c566 <_printf_float+0x2ce>
 800c5e2:	e6a5      	b.n	800c330 <_printf_float+0x98>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	9206      	str	r2, [sp, #24]
 800c5ec:	47b8      	blx	r7
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	f43f ae9e 	beq.w	800c330 <_printf_float+0x98>
 800c5f4:	9b07      	ldr	r3, [sp, #28]
 800c5f6:	9a06      	ldr	r2, [sp, #24]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	9307      	str	r3, [sp, #28]
 800c5fc:	e7b9      	b.n	800c572 <_printf_float+0x2da>
 800c5fe:	9b05      	ldr	r3, [sp, #20]
 800c600:	465a      	mov	r2, fp
 800c602:	4631      	mov	r1, r6
 800c604:	4628      	mov	r0, r5
 800c606:	47b8      	blx	r7
 800c608:	3001      	adds	r0, #1
 800c60a:	d1bf      	bne.n	800c58c <_printf_float+0x2f4>
 800c60c:	e690      	b.n	800c330 <_printf_float+0x98>
 800c60e:	9a06      	ldr	r2, [sp, #24]
 800c610:	464b      	mov	r3, r9
 800c612:	4442      	add	r2, r8
 800c614:	4631      	mov	r1, r6
 800c616:	4628      	mov	r0, r5
 800c618:	47b8      	blx	r7
 800c61a:	3001      	adds	r0, #1
 800c61c:	d1c2      	bne.n	800c5a4 <_printf_float+0x30c>
 800c61e:	e687      	b.n	800c330 <_printf_float+0x98>
 800c620:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c624:	f1b9 0f01 	cmp.w	r9, #1
 800c628:	dc01      	bgt.n	800c62e <_printf_float+0x396>
 800c62a:	07db      	lsls	r3, r3, #31
 800c62c:	d536      	bpl.n	800c69c <_printf_float+0x404>
 800c62e:	2301      	movs	r3, #1
 800c630:	4642      	mov	r2, r8
 800c632:	4631      	mov	r1, r6
 800c634:	4628      	mov	r0, r5
 800c636:	47b8      	blx	r7
 800c638:	3001      	adds	r0, #1
 800c63a:	f43f ae79 	beq.w	800c330 <_printf_float+0x98>
 800c63e:	9b05      	ldr	r3, [sp, #20]
 800c640:	465a      	mov	r2, fp
 800c642:	4631      	mov	r1, r6
 800c644:	4628      	mov	r0, r5
 800c646:	47b8      	blx	r7
 800c648:	3001      	adds	r0, #1
 800c64a:	f43f ae71 	beq.w	800c330 <_printf_float+0x98>
 800c64e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c652:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c65a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c65e:	d018      	beq.n	800c692 <_printf_float+0x3fa>
 800c660:	464b      	mov	r3, r9
 800c662:	f108 0201 	add.w	r2, r8, #1
 800c666:	4631      	mov	r1, r6
 800c668:	4628      	mov	r0, r5
 800c66a:	47b8      	blx	r7
 800c66c:	3001      	adds	r0, #1
 800c66e:	d10c      	bne.n	800c68a <_printf_float+0x3f2>
 800c670:	e65e      	b.n	800c330 <_printf_float+0x98>
 800c672:	2301      	movs	r3, #1
 800c674:	465a      	mov	r2, fp
 800c676:	4631      	mov	r1, r6
 800c678:	4628      	mov	r0, r5
 800c67a:	47b8      	blx	r7
 800c67c:	3001      	adds	r0, #1
 800c67e:	f43f ae57 	beq.w	800c330 <_printf_float+0x98>
 800c682:	f108 0801 	add.w	r8, r8, #1
 800c686:	45c8      	cmp	r8, r9
 800c688:	dbf3      	blt.n	800c672 <_printf_float+0x3da>
 800c68a:	4653      	mov	r3, sl
 800c68c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c690:	e6dc      	b.n	800c44c <_printf_float+0x1b4>
 800c692:	f04f 0800 	mov.w	r8, #0
 800c696:	f104 0b1a 	add.w	fp, r4, #26
 800c69a:	e7f4      	b.n	800c686 <_printf_float+0x3ee>
 800c69c:	2301      	movs	r3, #1
 800c69e:	4642      	mov	r2, r8
 800c6a0:	e7e1      	b.n	800c666 <_printf_float+0x3ce>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	464a      	mov	r2, r9
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	47b8      	blx	r7
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	f43f ae3f 	beq.w	800c330 <_printf_float+0x98>
 800c6b2:	f108 0801 	add.w	r8, r8, #1
 800c6b6:	68e3      	ldr	r3, [r4, #12]
 800c6b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6ba:	1a5b      	subs	r3, r3, r1
 800c6bc:	4543      	cmp	r3, r8
 800c6be:	dcf0      	bgt.n	800c6a2 <_printf_float+0x40a>
 800c6c0:	e6f8      	b.n	800c4b4 <_printf_float+0x21c>
 800c6c2:	f04f 0800 	mov.w	r8, #0
 800c6c6:	f104 0919 	add.w	r9, r4, #25
 800c6ca:	e7f4      	b.n	800c6b6 <_printf_float+0x41e>

0800c6cc <_printf_common>:
 800c6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d0:	4616      	mov	r6, r2
 800c6d2:	4698      	mov	r8, r3
 800c6d4:	688a      	ldr	r2, [r1, #8]
 800c6d6:	690b      	ldr	r3, [r1, #16]
 800c6d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	bfb8      	it	lt
 800c6e0:	4613      	movlt	r3, r2
 800c6e2:	6033      	str	r3, [r6, #0]
 800c6e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c6e8:	4607      	mov	r7, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	b10a      	cbz	r2, 800c6f2 <_printf_common+0x26>
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	6033      	str	r3, [r6, #0]
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	0699      	lsls	r1, r3, #26
 800c6f6:	bf42      	ittt	mi
 800c6f8:	6833      	ldrmi	r3, [r6, #0]
 800c6fa:	3302      	addmi	r3, #2
 800c6fc:	6033      	strmi	r3, [r6, #0]
 800c6fe:	6825      	ldr	r5, [r4, #0]
 800c700:	f015 0506 	ands.w	r5, r5, #6
 800c704:	d106      	bne.n	800c714 <_printf_common+0x48>
 800c706:	f104 0a19 	add.w	sl, r4, #25
 800c70a:	68e3      	ldr	r3, [r4, #12]
 800c70c:	6832      	ldr	r2, [r6, #0]
 800c70e:	1a9b      	subs	r3, r3, r2
 800c710:	42ab      	cmp	r3, r5
 800c712:	dc26      	bgt.n	800c762 <_printf_common+0x96>
 800c714:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c718:	6822      	ldr	r2, [r4, #0]
 800c71a:	3b00      	subs	r3, #0
 800c71c:	bf18      	it	ne
 800c71e:	2301      	movne	r3, #1
 800c720:	0692      	lsls	r2, r2, #26
 800c722:	d42b      	bmi.n	800c77c <_printf_common+0xb0>
 800c724:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c728:	4641      	mov	r1, r8
 800c72a:	4638      	mov	r0, r7
 800c72c:	47c8      	blx	r9
 800c72e:	3001      	adds	r0, #1
 800c730:	d01e      	beq.n	800c770 <_printf_common+0xa4>
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	6922      	ldr	r2, [r4, #16]
 800c736:	f003 0306 	and.w	r3, r3, #6
 800c73a:	2b04      	cmp	r3, #4
 800c73c:	bf02      	ittt	eq
 800c73e:	68e5      	ldreq	r5, [r4, #12]
 800c740:	6833      	ldreq	r3, [r6, #0]
 800c742:	1aed      	subeq	r5, r5, r3
 800c744:	68a3      	ldr	r3, [r4, #8]
 800c746:	bf0c      	ite	eq
 800c748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c74c:	2500      	movne	r5, #0
 800c74e:	4293      	cmp	r3, r2
 800c750:	bfc4      	itt	gt
 800c752:	1a9b      	subgt	r3, r3, r2
 800c754:	18ed      	addgt	r5, r5, r3
 800c756:	2600      	movs	r6, #0
 800c758:	341a      	adds	r4, #26
 800c75a:	42b5      	cmp	r5, r6
 800c75c:	d11a      	bne.n	800c794 <_printf_common+0xc8>
 800c75e:	2000      	movs	r0, #0
 800c760:	e008      	b.n	800c774 <_printf_common+0xa8>
 800c762:	2301      	movs	r3, #1
 800c764:	4652      	mov	r2, sl
 800c766:	4641      	mov	r1, r8
 800c768:	4638      	mov	r0, r7
 800c76a:	47c8      	blx	r9
 800c76c:	3001      	adds	r0, #1
 800c76e:	d103      	bne.n	800c778 <_printf_common+0xac>
 800c770:	f04f 30ff 	mov.w	r0, #4294967295
 800c774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c778:	3501      	adds	r5, #1
 800c77a:	e7c6      	b.n	800c70a <_printf_common+0x3e>
 800c77c:	18e1      	adds	r1, r4, r3
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	2030      	movs	r0, #48	@ 0x30
 800c782:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c786:	4422      	add	r2, r4
 800c788:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c78c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c790:	3302      	adds	r3, #2
 800c792:	e7c7      	b.n	800c724 <_printf_common+0x58>
 800c794:	2301      	movs	r3, #1
 800c796:	4622      	mov	r2, r4
 800c798:	4641      	mov	r1, r8
 800c79a:	4638      	mov	r0, r7
 800c79c:	47c8      	blx	r9
 800c79e:	3001      	adds	r0, #1
 800c7a0:	d0e6      	beq.n	800c770 <_printf_common+0xa4>
 800c7a2:	3601      	adds	r6, #1
 800c7a4:	e7d9      	b.n	800c75a <_printf_common+0x8e>
	...

0800c7a8 <_printf_i>:
 800c7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ac:	7e0f      	ldrb	r7, [r1, #24]
 800c7ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7b0:	2f78      	cmp	r7, #120	@ 0x78
 800c7b2:	4691      	mov	r9, r2
 800c7b4:	4680      	mov	r8, r0
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	469a      	mov	sl, r3
 800c7ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7be:	d807      	bhi.n	800c7d0 <_printf_i+0x28>
 800c7c0:	2f62      	cmp	r7, #98	@ 0x62
 800c7c2:	d80a      	bhi.n	800c7da <_printf_i+0x32>
 800c7c4:	2f00      	cmp	r7, #0
 800c7c6:	f000 80d1 	beq.w	800c96c <_printf_i+0x1c4>
 800c7ca:	2f58      	cmp	r7, #88	@ 0x58
 800c7cc:	f000 80b8 	beq.w	800c940 <_printf_i+0x198>
 800c7d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c7d8:	e03a      	b.n	800c850 <_printf_i+0xa8>
 800c7da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c7de:	2b15      	cmp	r3, #21
 800c7e0:	d8f6      	bhi.n	800c7d0 <_printf_i+0x28>
 800c7e2:	a101      	add	r1, pc, #4	@ (adr r1, 800c7e8 <_printf_i+0x40>)
 800c7e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7e8:	0800c841 	.word	0x0800c841
 800c7ec:	0800c855 	.word	0x0800c855
 800c7f0:	0800c7d1 	.word	0x0800c7d1
 800c7f4:	0800c7d1 	.word	0x0800c7d1
 800c7f8:	0800c7d1 	.word	0x0800c7d1
 800c7fc:	0800c7d1 	.word	0x0800c7d1
 800c800:	0800c855 	.word	0x0800c855
 800c804:	0800c7d1 	.word	0x0800c7d1
 800c808:	0800c7d1 	.word	0x0800c7d1
 800c80c:	0800c7d1 	.word	0x0800c7d1
 800c810:	0800c7d1 	.word	0x0800c7d1
 800c814:	0800c953 	.word	0x0800c953
 800c818:	0800c87f 	.word	0x0800c87f
 800c81c:	0800c90d 	.word	0x0800c90d
 800c820:	0800c7d1 	.word	0x0800c7d1
 800c824:	0800c7d1 	.word	0x0800c7d1
 800c828:	0800c975 	.word	0x0800c975
 800c82c:	0800c7d1 	.word	0x0800c7d1
 800c830:	0800c87f 	.word	0x0800c87f
 800c834:	0800c7d1 	.word	0x0800c7d1
 800c838:	0800c7d1 	.word	0x0800c7d1
 800c83c:	0800c915 	.word	0x0800c915
 800c840:	6833      	ldr	r3, [r6, #0]
 800c842:	1d1a      	adds	r2, r3, #4
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	6032      	str	r2, [r6, #0]
 800c848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c84c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c850:	2301      	movs	r3, #1
 800c852:	e09c      	b.n	800c98e <_printf_i+0x1e6>
 800c854:	6833      	ldr	r3, [r6, #0]
 800c856:	6820      	ldr	r0, [r4, #0]
 800c858:	1d19      	adds	r1, r3, #4
 800c85a:	6031      	str	r1, [r6, #0]
 800c85c:	0606      	lsls	r6, r0, #24
 800c85e:	d501      	bpl.n	800c864 <_printf_i+0xbc>
 800c860:	681d      	ldr	r5, [r3, #0]
 800c862:	e003      	b.n	800c86c <_printf_i+0xc4>
 800c864:	0645      	lsls	r5, r0, #25
 800c866:	d5fb      	bpl.n	800c860 <_printf_i+0xb8>
 800c868:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c86c:	2d00      	cmp	r5, #0
 800c86e:	da03      	bge.n	800c878 <_printf_i+0xd0>
 800c870:	232d      	movs	r3, #45	@ 0x2d
 800c872:	426d      	negs	r5, r5
 800c874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c878:	4858      	ldr	r0, [pc, #352]	@ (800c9dc <_printf_i+0x234>)
 800c87a:	230a      	movs	r3, #10
 800c87c:	e011      	b.n	800c8a2 <_printf_i+0xfa>
 800c87e:	6821      	ldr	r1, [r4, #0]
 800c880:	6833      	ldr	r3, [r6, #0]
 800c882:	0608      	lsls	r0, r1, #24
 800c884:	f853 5b04 	ldr.w	r5, [r3], #4
 800c888:	d402      	bmi.n	800c890 <_printf_i+0xe8>
 800c88a:	0649      	lsls	r1, r1, #25
 800c88c:	bf48      	it	mi
 800c88e:	b2ad      	uxthmi	r5, r5
 800c890:	2f6f      	cmp	r7, #111	@ 0x6f
 800c892:	4852      	ldr	r0, [pc, #328]	@ (800c9dc <_printf_i+0x234>)
 800c894:	6033      	str	r3, [r6, #0]
 800c896:	bf14      	ite	ne
 800c898:	230a      	movne	r3, #10
 800c89a:	2308      	moveq	r3, #8
 800c89c:	2100      	movs	r1, #0
 800c89e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8a2:	6866      	ldr	r6, [r4, #4]
 800c8a4:	60a6      	str	r6, [r4, #8]
 800c8a6:	2e00      	cmp	r6, #0
 800c8a8:	db05      	blt.n	800c8b6 <_printf_i+0x10e>
 800c8aa:	6821      	ldr	r1, [r4, #0]
 800c8ac:	432e      	orrs	r6, r5
 800c8ae:	f021 0104 	bic.w	r1, r1, #4
 800c8b2:	6021      	str	r1, [r4, #0]
 800c8b4:	d04b      	beq.n	800c94e <_printf_i+0x1a6>
 800c8b6:	4616      	mov	r6, r2
 800c8b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8bc:	fb03 5711 	mls	r7, r3, r1, r5
 800c8c0:	5dc7      	ldrb	r7, [r0, r7]
 800c8c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8c6:	462f      	mov	r7, r5
 800c8c8:	42bb      	cmp	r3, r7
 800c8ca:	460d      	mov	r5, r1
 800c8cc:	d9f4      	bls.n	800c8b8 <_printf_i+0x110>
 800c8ce:	2b08      	cmp	r3, #8
 800c8d0:	d10b      	bne.n	800c8ea <_printf_i+0x142>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	07df      	lsls	r7, r3, #31
 800c8d6:	d508      	bpl.n	800c8ea <_printf_i+0x142>
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	6861      	ldr	r1, [r4, #4]
 800c8dc:	4299      	cmp	r1, r3
 800c8de:	bfde      	ittt	le
 800c8e0:	2330      	movle	r3, #48	@ 0x30
 800c8e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c8ea:	1b92      	subs	r2, r2, r6
 800c8ec:	6122      	str	r2, [r4, #16]
 800c8ee:	f8cd a000 	str.w	sl, [sp]
 800c8f2:	464b      	mov	r3, r9
 800c8f4:	aa03      	add	r2, sp, #12
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	f7ff fee7 	bl	800c6cc <_printf_common>
 800c8fe:	3001      	adds	r0, #1
 800c900:	d14a      	bne.n	800c998 <_printf_i+0x1f0>
 800c902:	f04f 30ff 	mov.w	r0, #4294967295
 800c906:	b004      	add	sp, #16
 800c908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c90c:	6823      	ldr	r3, [r4, #0]
 800c90e:	f043 0320 	orr.w	r3, r3, #32
 800c912:	6023      	str	r3, [r4, #0]
 800c914:	4832      	ldr	r0, [pc, #200]	@ (800c9e0 <_printf_i+0x238>)
 800c916:	2778      	movs	r7, #120	@ 0x78
 800c918:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	6831      	ldr	r1, [r6, #0]
 800c920:	061f      	lsls	r7, r3, #24
 800c922:	f851 5b04 	ldr.w	r5, [r1], #4
 800c926:	d402      	bmi.n	800c92e <_printf_i+0x186>
 800c928:	065f      	lsls	r7, r3, #25
 800c92a:	bf48      	it	mi
 800c92c:	b2ad      	uxthmi	r5, r5
 800c92e:	6031      	str	r1, [r6, #0]
 800c930:	07d9      	lsls	r1, r3, #31
 800c932:	bf44      	itt	mi
 800c934:	f043 0320 	orrmi.w	r3, r3, #32
 800c938:	6023      	strmi	r3, [r4, #0]
 800c93a:	b11d      	cbz	r5, 800c944 <_printf_i+0x19c>
 800c93c:	2310      	movs	r3, #16
 800c93e:	e7ad      	b.n	800c89c <_printf_i+0xf4>
 800c940:	4826      	ldr	r0, [pc, #152]	@ (800c9dc <_printf_i+0x234>)
 800c942:	e7e9      	b.n	800c918 <_printf_i+0x170>
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	f023 0320 	bic.w	r3, r3, #32
 800c94a:	6023      	str	r3, [r4, #0]
 800c94c:	e7f6      	b.n	800c93c <_printf_i+0x194>
 800c94e:	4616      	mov	r6, r2
 800c950:	e7bd      	b.n	800c8ce <_printf_i+0x126>
 800c952:	6833      	ldr	r3, [r6, #0]
 800c954:	6825      	ldr	r5, [r4, #0]
 800c956:	6961      	ldr	r1, [r4, #20]
 800c958:	1d18      	adds	r0, r3, #4
 800c95a:	6030      	str	r0, [r6, #0]
 800c95c:	062e      	lsls	r6, r5, #24
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	d501      	bpl.n	800c966 <_printf_i+0x1be>
 800c962:	6019      	str	r1, [r3, #0]
 800c964:	e002      	b.n	800c96c <_printf_i+0x1c4>
 800c966:	0668      	lsls	r0, r5, #25
 800c968:	d5fb      	bpl.n	800c962 <_printf_i+0x1ba>
 800c96a:	8019      	strh	r1, [r3, #0]
 800c96c:	2300      	movs	r3, #0
 800c96e:	6123      	str	r3, [r4, #16]
 800c970:	4616      	mov	r6, r2
 800c972:	e7bc      	b.n	800c8ee <_printf_i+0x146>
 800c974:	6833      	ldr	r3, [r6, #0]
 800c976:	1d1a      	adds	r2, r3, #4
 800c978:	6032      	str	r2, [r6, #0]
 800c97a:	681e      	ldr	r6, [r3, #0]
 800c97c:	6862      	ldr	r2, [r4, #4]
 800c97e:	2100      	movs	r1, #0
 800c980:	4630      	mov	r0, r6
 800c982:	f7f3 fcb5 	bl	80002f0 <memchr>
 800c986:	b108      	cbz	r0, 800c98c <_printf_i+0x1e4>
 800c988:	1b80      	subs	r0, r0, r6
 800c98a:	6060      	str	r0, [r4, #4]
 800c98c:	6863      	ldr	r3, [r4, #4]
 800c98e:	6123      	str	r3, [r4, #16]
 800c990:	2300      	movs	r3, #0
 800c992:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c996:	e7aa      	b.n	800c8ee <_printf_i+0x146>
 800c998:	6923      	ldr	r3, [r4, #16]
 800c99a:	4632      	mov	r2, r6
 800c99c:	4649      	mov	r1, r9
 800c99e:	4640      	mov	r0, r8
 800c9a0:	47d0      	blx	sl
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	d0ad      	beq.n	800c902 <_printf_i+0x15a>
 800c9a6:	6823      	ldr	r3, [r4, #0]
 800c9a8:	079b      	lsls	r3, r3, #30
 800c9aa:	d413      	bmi.n	800c9d4 <_printf_i+0x22c>
 800c9ac:	68e0      	ldr	r0, [r4, #12]
 800c9ae:	9b03      	ldr	r3, [sp, #12]
 800c9b0:	4298      	cmp	r0, r3
 800c9b2:	bfb8      	it	lt
 800c9b4:	4618      	movlt	r0, r3
 800c9b6:	e7a6      	b.n	800c906 <_printf_i+0x15e>
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	4632      	mov	r2, r6
 800c9bc:	4649      	mov	r1, r9
 800c9be:	4640      	mov	r0, r8
 800c9c0:	47d0      	blx	sl
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	d09d      	beq.n	800c902 <_printf_i+0x15a>
 800c9c6:	3501      	adds	r5, #1
 800c9c8:	68e3      	ldr	r3, [r4, #12]
 800c9ca:	9903      	ldr	r1, [sp, #12]
 800c9cc:	1a5b      	subs	r3, r3, r1
 800c9ce:	42ab      	cmp	r3, r5
 800c9d0:	dcf2      	bgt.n	800c9b8 <_printf_i+0x210>
 800c9d2:	e7eb      	b.n	800c9ac <_printf_i+0x204>
 800c9d4:	2500      	movs	r5, #0
 800c9d6:	f104 0619 	add.w	r6, r4, #25
 800c9da:	e7f5      	b.n	800c9c8 <_printf_i+0x220>
 800c9dc:	08034c76 	.word	0x08034c76
 800c9e0:	08034c87 	.word	0x08034c87

0800c9e4 <std>:
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	b510      	push	{r4, lr}
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	e9c0 3300 	strd	r3, r3, [r0]
 800c9ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9f2:	6083      	str	r3, [r0, #8]
 800c9f4:	8181      	strh	r1, [r0, #12]
 800c9f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c9f8:	81c2      	strh	r2, [r0, #14]
 800c9fa:	6183      	str	r3, [r0, #24]
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	2208      	movs	r2, #8
 800ca00:	305c      	adds	r0, #92	@ 0x5c
 800ca02:	f000 f92a 	bl	800cc5a <memset>
 800ca06:	4b0d      	ldr	r3, [pc, #52]	@ (800ca3c <std+0x58>)
 800ca08:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca40 <std+0x5c>)
 800ca0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca44 <std+0x60>)
 800ca10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca12:	4b0d      	ldr	r3, [pc, #52]	@ (800ca48 <std+0x64>)
 800ca14:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca16:	4b0d      	ldr	r3, [pc, #52]	@ (800ca4c <std+0x68>)
 800ca18:	6224      	str	r4, [r4, #32]
 800ca1a:	429c      	cmp	r4, r3
 800ca1c:	d006      	beq.n	800ca2c <std+0x48>
 800ca1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca22:	4294      	cmp	r4, r2
 800ca24:	d002      	beq.n	800ca2c <std+0x48>
 800ca26:	33d0      	adds	r3, #208	@ 0xd0
 800ca28:	429c      	cmp	r4, r3
 800ca2a:	d105      	bne.n	800ca38 <std+0x54>
 800ca2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca34:	f000 b99e 	b.w	800cd74 <__retarget_lock_init_recursive>
 800ca38:	bd10      	pop	{r4, pc}
 800ca3a:	bf00      	nop
 800ca3c:	0800cbd5 	.word	0x0800cbd5
 800ca40:	0800cbf7 	.word	0x0800cbf7
 800ca44:	0800cc2f 	.word	0x0800cc2f
 800ca48:	0800cc53 	.word	0x0800cc53
 800ca4c:	2400197c 	.word	0x2400197c

0800ca50 <stdio_exit_handler>:
 800ca50:	4a02      	ldr	r2, [pc, #8]	@ (800ca5c <stdio_exit_handler+0xc>)
 800ca52:	4903      	ldr	r1, [pc, #12]	@ (800ca60 <stdio_exit_handler+0x10>)
 800ca54:	4803      	ldr	r0, [pc, #12]	@ (800ca64 <stdio_exit_handler+0x14>)
 800ca56:	f000 b869 	b.w	800cb2c <_fwalk_sglue>
 800ca5a:	bf00      	nop
 800ca5c:	240000a0 	.word	0x240000a0
 800ca60:	0800e729 	.word	0x0800e729
 800ca64:	240000b0 	.word	0x240000b0

0800ca68 <cleanup_stdio>:
 800ca68:	6841      	ldr	r1, [r0, #4]
 800ca6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ca9c <cleanup_stdio+0x34>)
 800ca6c:	4299      	cmp	r1, r3
 800ca6e:	b510      	push	{r4, lr}
 800ca70:	4604      	mov	r4, r0
 800ca72:	d001      	beq.n	800ca78 <cleanup_stdio+0x10>
 800ca74:	f001 fe58 	bl	800e728 <_fflush_r>
 800ca78:	68a1      	ldr	r1, [r4, #8]
 800ca7a:	4b09      	ldr	r3, [pc, #36]	@ (800caa0 <cleanup_stdio+0x38>)
 800ca7c:	4299      	cmp	r1, r3
 800ca7e:	d002      	beq.n	800ca86 <cleanup_stdio+0x1e>
 800ca80:	4620      	mov	r0, r4
 800ca82:	f001 fe51 	bl	800e728 <_fflush_r>
 800ca86:	68e1      	ldr	r1, [r4, #12]
 800ca88:	4b06      	ldr	r3, [pc, #24]	@ (800caa4 <cleanup_stdio+0x3c>)
 800ca8a:	4299      	cmp	r1, r3
 800ca8c:	d004      	beq.n	800ca98 <cleanup_stdio+0x30>
 800ca8e:	4620      	mov	r0, r4
 800ca90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca94:	f001 be48 	b.w	800e728 <_fflush_r>
 800ca98:	bd10      	pop	{r4, pc}
 800ca9a:	bf00      	nop
 800ca9c:	2400197c 	.word	0x2400197c
 800caa0:	240019e4 	.word	0x240019e4
 800caa4:	24001a4c 	.word	0x24001a4c

0800caa8 <global_stdio_init.part.0>:
 800caa8:	b510      	push	{r4, lr}
 800caaa:	4b0b      	ldr	r3, [pc, #44]	@ (800cad8 <global_stdio_init.part.0+0x30>)
 800caac:	4c0b      	ldr	r4, [pc, #44]	@ (800cadc <global_stdio_init.part.0+0x34>)
 800caae:	4a0c      	ldr	r2, [pc, #48]	@ (800cae0 <global_stdio_init.part.0+0x38>)
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	4620      	mov	r0, r4
 800cab4:	2200      	movs	r2, #0
 800cab6:	2104      	movs	r1, #4
 800cab8:	f7ff ff94 	bl	800c9e4 <std>
 800cabc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cac0:	2201      	movs	r2, #1
 800cac2:	2109      	movs	r1, #9
 800cac4:	f7ff ff8e 	bl	800c9e4 <std>
 800cac8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cacc:	2202      	movs	r2, #2
 800cace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cad2:	2112      	movs	r1, #18
 800cad4:	f7ff bf86 	b.w	800c9e4 <std>
 800cad8:	24001ab4 	.word	0x24001ab4
 800cadc:	2400197c 	.word	0x2400197c
 800cae0:	0800ca51 	.word	0x0800ca51

0800cae4 <__sfp_lock_acquire>:
 800cae4:	4801      	ldr	r0, [pc, #4]	@ (800caec <__sfp_lock_acquire+0x8>)
 800cae6:	f000 b946 	b.w	800cd76 <__retarget_lock_acquire_recursive>
 800caea:	bf00      	nop
 800caec:	24001abd 	.word	0x24001abd

0800caf0 <__sfp_lock_release>:
 800caf0:	4801      	ldr	r0, [pc, #4]	@ (800caf8 <__sfp_lock_release+0x8>)
 800caf2:	f000 b941 	b.w	800cd78 <__retarget_lock_release_recursive>
 800caf6:	bf00      	nop
 800caf8:	24001abd 	.word	0x24001abd

0800cafc <__sinit>:
 800cafc:	b510      	push	{r4, lr}
 800cafe:	4604      	mov	r4, r0
 800cb00:	f7ff fff0 	bl	800cae4 <__sfp_lock_acquire>
 800cb04:	6a23      	ldr	r3, [r4, #32]
 800cb06:	b11b      	cbz	r3, 800cb10 <__sinit+0x14>
 800cb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb0c:	f7ff bff0 	b.w	800caf0 <__sfp_lock_release>
 800cb10:	4b04      	ldr	r3, [pc, #16]	@ (800cb24 <__sinit+0x28>)
 800cb12:	6223      	str	r3, [r4, #32]
 800cb14:	4b04      	ldr	r3, [pc, #16]	@ (800cb28 <__sinit+0x2c>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1f5      	bne.n	800cb08 <__sinit+0xc>
 800cb1c:	f7ff ffc4 	bl	800caa8 <global_stdio_init.part.0>
 800cb20:	e7f2      	b.n	800cb08 <__sinit+0xc>
 800cb22:	bf00      	nop
 800cb24:	0800ca69 	.word	0x0800ca69
 800cb28:	24001ab4 	.word	0x24001ab4

0800cb2c <_fwalk_sglue>:
 800cb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb30:	4607      	mov	r7, r0
 800cb32:	4688      	mov	r8, r1
 800cb34:	4614      	mov	r4, r2
 800cb36:	2600      	movs	r6, #0
 800cb38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb3c:	f1b9 0901 	subs.w	r9, r9, #1
 800cb40:	d505      	bpl.n	800cb4e <_fwalk_sglue+0x22>
 800cb42:	6824      	ldr	r4, [r4, #0]
 800cb44:	2c00      	cmp	r4, #0
 800cb46:	d1f7      	bne.n	800cb38 <_fwalk_sglue+0xc>
 800cb48:	4630      	mov	r0, r6
 800cb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb4e:	89ab      	ldrh	r3, [r5, #12]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d907      	bls.n	800cb64 <_fwalk_sglue+0x38>
 800cb54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	d003      	beq.n	800cb64 <_fwalk_sglue+0x38>
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	4638      	mov	r0, r7
 800cb60:	47c0      	blx	r8
 800cb62:	4306      	orrs	r6, r0
 800cb64:	3568      	adds	r5, #104	@ 0x68
 800cb66:	e7e9      	b.n	800cb3c <_fwalk_sglue+0x10>

0800cb68 <sniprintf>:
 800cb68:	b40c      	push	{r2, r3}
 800cb6a:	b530      	push	{r4, r5, lr}
 800cb6c:	4b18      	ldr	r3, [pc, #96]	@ (800cbd0 <sniprintf+0x68>)
 800cb6e:	1e0c      	subs	r4, r1, #0
 800cb70:	681d      	ldr	r5, [r3, #0]
 800cb72:	b09d      	sub	sp, #116	@ 0x74
 800cb74:	da08      	bge.n	800cb88 <sniprintf+0x20>
 800cb76:	238b      	movs	r3, #139	@ 0x8b
 800cb78:	602b      	str	r3, [r5, #0]
 800cb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb7e:	b01d      	add	sp, #116	@ 0x74
 800cb80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb84:	b002      	add	sp, #8
 800cb86:	4770      	bx	lr
 800cb88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cb8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb90:	f04f 0300 	mov.w	r3, #0
 800cb94:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cb96:	bf14      	ite	ne
 800cb98:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb9c:	4623      	moveq	r3, r4
 800cb9e:	9304      	str	r3, [sp, #16]
 800cba0:	9307      	str	r3, [sp, #28]
 800cba2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cba6:	9002      	str	r0, [sp, #8]
 800cba8:	9006      	str	r0, [sp, #24]
 800cbaa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cbae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cbb0:	ab21      	add	r3, sp, #132	@ 0x84
 800cbb2:	a902      	add	r1, sp, #8
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	9301      	str	r3, [sp, #4]
 800cbb8:	f001 faf4 	bl	800e1a4 <_svfiprintf_r>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	bfbc      	itt	lt
 800cbc0:	238b      	movlt	r3, #139	@ 0x8b
 800cbc2:	602b      	strlt	r3, [r5, #0]
 800cbc4:	2c00      	cmp	r4, #0
 800cbc6:	d0da      	beq.n	800cb7e <sniprintf+0x16>
 800cbc8:	9b02      	ldr	r3, [sp, #8]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	701a      	strb	r2, [r3, #0]
 800cbce:	e7d6      	b.n	800cb7e <sniprintf+0x16>
 800cbd0:	240000ac 	.word	0x240000ac

0800cbd4 <__sread>:
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbdc:	f000 f86c 	bl	800ccb8 <_read_r>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	bfab      	itete	ge
 800cbe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbe6:	89a3      	ldrhlt	r3, [r4, #12]
 800cbe8:	181b      	addge	r3, r3, r0
 800cbea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbee:	bfac      	ite	ge
 800cbf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbf2:	81a3      	strhlt	r3, [r4, #12]
 800cbf4:	bd10      	pop	{r4, pc}

0800cbf6 <__swrite>:
 800cbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfa:	461f      	mov	r7, r3
 800cbfc:	898b      	ldrh	r3, [r1, #12]
 800cbfe:	05db      	lsls	r3, r3, #23
 800cc00:	4605      	mov	r5, r0
 800cc02:	460c      	mov	r4, r1
 800cc04:	4616      	mov	r6, r2
 800cc06:	d505      	bpl.n	800cc14 <__swrite+0x1e>
 800cc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f000 f840 	bl	800cc94 <_lseek_r>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	4632      	mov	r2, r6
 800cc22:	463b      	mov	r3, r7
 800cc24:	4628      	mov	r0, r5
 800cc26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2a:	f000 b867 	b.w	800ccfc <_write_r>

0800cc2e <__sseek>:
 800cc2e:	b510      	push	{r4, lr}
 800cc30:	460c      	mov	r4, r1
 800cc32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc36:	f000 f82d 	bl	800cc94 <_lseek_r>
 800cc3a:	1c43      	adds	r3, r0, #1
 800cc3c:	89a3      	ldrh	r3, [r4, #12]
 800cc3e:	bf15      	itete	ne
 800cc40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc4a:	81a3      	strheq	r3, [r4, #12]
 800cc4c:	bf18      	it	ne
 800cc4e:	81a3      	strhne	r3, [r4, #12]
 800cc50:	bd10      	pop	{r4, pc}

0800cc52 <__sclose>:
 800cc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc56:	f000 b80d 	b.w	800cc74 <_close_r>

0800cc5a <memset>:
 800cc5a:	4402      	add	r2, r0
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d100      	bne.n	800cc64 <memset+0xa>
 800cc62:	4770      	bx	lr
 800cc64:	f803 1b01 	strb.w	r1, [r3], #1
 800cc68:	e7f9      	b.n	800cc5e <memset+0x4>
	...

0800cc6c <_localeconv_r>:
 800cc6c:	4800      	ldr	r0, [pc, #0]	@ (800cc70 <_localeconv_r+0x4>)
 800cc6e:	4770      	bx	lr
 800cc70:	240001ec 	.word	0x240001ec

0800cc74 <_close_r>:
 800cc74:	b538      	push	{r3, r4, r5, lr}
 800cc76:	4d06      	ldr	r5, [pc, #24]	@ (800cc90 <_close_r+0x1c>)
 800cc78:	2300      	movs	r3, #0
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	4608      	mov	r0, r1
 800cc7e:	602b      	str	r3, [r5, #0]
 800cc80:	f7f4 fc62 	bl	8001548 <_close>
 800cc84:	1c43      	adds	r3, r0, #1
 800cc86:	d102      	bne.n	800cc8e <_close_r+0x1a>
 800cc88:	682b      	ldr	r3, [r5, #0]
 800cc8a:	b103      	cbz	r3, 800cc8e <_close_r+0x1a>
 800cc8c:	6023      	str	r3, [r4, #0]
 800cc8e:	bd38      	pop	{r3, r4, r5, pc}
 800cc90:	24001ab8 	.word	0x24001ab8

0800cc94 <_lseek_r>:
 800cc94:	b538      	push	{r3, r4, r5, lr}
 800cc96:	4d07      	ldr	r5, [pc, #28]	@ (800ccb4 <_lseek_r+0x20>)
 800cc98:	4604      	mov	r4, r0
 800cc9a:	4608      	mov	r0, r1
 800cc9c:	4611      	mov	r1, r2
 800cc9e:	2200      	movs	r2, #0
 800cca0:	602a      	str	r2, [r5, #0]
 800cca2:	461a      	mov	r2, r3
 800cca4:	f7f4 fc77 	bl	8001596 <_lseek>
 800cca8:	1c43      	adds	r3, r0, #1
 800ccaa:	d102      	bne.n	800ccb2 <_lseek_r+0x1e>
 800ccac:	682b      	ldr	r3, [r5, #0]
 800ccae:	b103      	cbz	r3, 800ccb2 <_lseek_r+0x1e>
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	bd38      	pop	{r3, r4, r5, pc}
 800ccb4:	24001ab8 	.word	0x24001ab8

0800ccb8 <_read_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4d07      	ldr	r5, [pc, #28]	@ (800ccd8 <_read_r+0x20>)
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	4608      	mov	r0, r1
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	602a      	str	r2, [r5, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	f7f4 fc05 	bl	80014d6 <_read>
 800cccc:	1c43      	adds	r3, r0, #1
 800ccce:	d102      	bne.n	800ccd6 <_read_r+0x1e>
 800ccd0:	682b      	ldr	r3, [r5, #0]
 800ccd2:	b103      	cbz	r3, 800ccd6 <_read_r+0x1e>
 800ccd4:	6023      	str	r3, [r4, #0]
 800ccd6:	bd38      	pop	{r3, r4, r5, pc}
 800ccd8:	24001ab8 	.word	0x24001ab8

0800ccdc <_sbrk_r>:
 800ccdc:	b538      	push	{r3, r4, r5, lr}
 800ccde:	4d06      	ldr	r5, [pc, #24]	@ (800ccf8 <_sbrk_r+0x1c>)
 800cce0:	2300      	movs	r3, #0
 800cce2:	4604      	mov	r4, r0
 800cce4:	4608      	mov	r0, r1
 800cce6:	602b      	str	r3, [r5, #0]
 800cce8:	f7f4 fc62 	bl	80015b0 <_sbrk>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d102      	bne.n	800ccf6 <_sbrk_r+0x1a>
 800ccf0:	682b      	ldr	r3, [r5, #0]
 800ccf2:	b103      	cbz	r3, 800ccf6 <_sbrk_r+0x1a>
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	24001ab8 	.word	0x24001ab8

0800ccfc <_write_r>:
 800ccfc:	b538      	push	{r3, r4, r5, lr}
 800ccfe:	4d07      	ldr	r5, [pc, #28]	@ (800cd1c <_write_r+0x20>)
 800cd00:	4604      	mov	r4, r0
 800cd02:	4608      	mov	r0, r1
 800cd04:	4611      	mov	r1, r2
 800cd06:	2200      	movs	r2, #0
 800cd08:	602a      	str	r2, [r5, #0]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	f7f4 fc00 	bl	8001510 <_write>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d102      	bne.n	800cd1a <_write_r+0x1e>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	b103      	cbz	r3, 800cd1a <_write_r+0x1e>
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	24001ab8 	.word	0x24001ab8

0800cd20 <__errno>:
 800cd20:	4b01      	ldr	r3, [pc, #4]	@ (800cd28 <__errno+0x8>)
 800cd22:	6818      	ldr	r0, [r3, #0]
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	240000ac 	.word	0x240000ac

0800cd2c <__libc_init_array>:
 800cd2c:	b570      	push	{r4, r5, r6, lr}
 800cd2e:	4d0d      	ldr	r5, [pc, #52]	@ (800cd64 <__libc_init_array+0x38>)
 800cd30:	4c0d      	ldr	r4, [pc, #52]	@ (800cd68 <__libc_init_array+0x3c>)
 800cd32:	1b64      	subs	r4, r4, r5
 800cd34:	10a4      	asrs	r4, r4, #2
 800cd36:	2600      	movs	r6, #0
 800cd38:	42a6      	cmp	r6, r4
 800cd3a:	d109      	bne.n	800cd50 <__libc_init_array+0x24>
 800cd3c:	4d0b      	ldr	r5, [pc, #44]	@ (800cd6c <__libc_init_array+0x40>)
 800cd3e:	4c0c      	ldr	r4, [pc, #48]	@ (800cd70 <__libc_init_array+0x44>)
 800cd40:	f001 ff32 	bl	800eba8 <_init>
 800cd44:	1b64      	subs	r4, r4, r5
 800cd46:	10a4      	asrs	r4, r4, #2
 800cd48:	2600      	movs	r6, #0
 800cd4a:	42a6      	cmp	r6, r4
 800cd4c:	d105      	bne.n	800cd5a <__libc_init_array+0x2e>
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}
 800cd50:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd54:	4798      	blx	r3
 800cd56:	3601      	adds	r6, #1
 800cd58:	e7ee      	b.n	800cd38 <__libc_init_array+0xc>
 800cd5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd5e:	4798      	blx	r3
 800cd60:	3601      	adds	r6, #1
 800cd62:	e7f2      	b.n	800cd4a <__libc_init_array+0x1e>
 800cd64:	08034fe4 	.word	0x08034fe4
 800cd68:	08034fe4 	.word	0x08034fe4
 800cd6c:	08034fe4 	.word	0x08034fe4
 800cd70:	08034fe8 	.word	0x08034fe8

0800cd74 <__retarget_lock_init_recursive>:
 800cd74:	4770      	bx	lr

0800cd76 <__retarget_lock_acquire_recursive>:
 800cd76:	4770      	bx	lr

0800cd78 <__retarget_lock_release_recursive>:
 800cd78:	4770      	bx	lr

0800cd7a <memcpy>:
 800cd7a:	440a      	add	r2, r1
 800cd7c:	4291      	cmp	r1, r2
 800cd7e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd82:	d100      	bne.n	800cd86 <memcpy+0xc>
 800cd84:	4770      	bx	lr
 800cd86:	b510      	push	{r4, lr}
 800cd88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd90:	4291      	cmp	r1, r2
 800cd92:	d1f9      	bne.n	800cd88 <memcpy+0xe>
 800cd94:	bd10      	pop	{r4, pc}

0800cd96 <quorem>:
 800cd96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9a:	6903      	ldr	r3, [r0, #16]
 800cd9c:	690c      	ldr	r4, [r1, #16]
 800cd9e:	42a3      	cmp	r3, r4
 800cda0:	4607      	mov	r7, r0
 800cda2:	db7e      	blt.n	800cea2 <quorem+0x10c>
 800cda4:	3c01      	subs	r4, #1
 800cda6:	f101 0814 	add.w	r8, r1, #20
 800cdaa:	00a3      	lsls	r3, r4, #2
 800cdac:	f100 0514 	add.w	r5, r0, #20
 800cdb0:	9300      	str	r3, [sp, #0]
 800cdb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdb6:	9301      	str	r3, [sp, #4]
 800cdb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cdbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cdc8:	fbb2 f6f3 	udiv	r6, r2, r3
 800cdcc:	d32e      	bcc.n	800ce2c <quorem+0x96>
 800cdce:	f04f 0a00 	mov.w	sl, #0
 800cdd2:	46c4      	mov	ip, r8
 800cdd4:	46ae      	mov	lr, r5
 800cdd6:	46d3      	mov	fp, sl
 800cdd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cddc:	b298      	uxth	r0, r3
 800cdde:	fb06 a000 	mla	r0, r6, r0, sl
 800cde2:	0c02      	lsrs	r2, r0, #16
 800cde4:	0c1b      	lsrs	r3, r3, #16
 800cde6:	fb06 2303 	mla	r3, r6, r3, r2
 800cdea:	f8de 2000 	ldr.w	r2, [lr]
 800cdee:	b280      	uxth	r0, r0
 800cdf0:	b292      	uxth	r2, r2
 800cdf2:	1a12      	subs	r2, r2, r0
 800cdf4:	445a      	add	r2, fp
 800cdf6:	f8de 0000 	ldr.w	r0, [lr]
 800cdfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ce04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ce08:	b292      	uxth	r2, r2
 800ce0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ce0e:	45e1      	cmp	r9, ip
 800ce10:	f84e 2b04 	str.w	r2, [lr], #4
 800ce14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ce18:	d2de      	bcs.n	800cdd8 <quorem+0x42>
 800ce1a:	9b00      	ldr	r3, [sp, #0]
 800ce1c:	58eb      	ldr	r3, [r5, r3]
 800ce1e:	b92b      	cbnz	r3, 800ce2c <quorem+0x96>
 800ce20:	9b01      	ldr	r3, [sp, #4]
 800ce22:	3b04      	subs	r3, #4
 800ce24:	429d      	cmp	r5, r3
 800ce26:	461a      	mov	r2, r3
 800ce28:	d32f      	bcc.n	800ce8a <quorem+0xf4>
 800ce2a:	613c      	str	r4, [r7, #16]
 800ce2c:	4638      	mov	r0, r7
 800ce2e:	f001 f855 	bl	800dedc <__mcmp>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	db25      	blt.n	800ce82 <quorem+0xec>
 800ce36:	4629      	mov	r1, r5
 800ce38:	2000      	movs	r0, #0
 800ce3a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce3e:	f8d1 c000 	ldr.w	ip, [r1]
 800ce42:	fa1f fe82 	uxth.w	lr, r2
 800ce46:	fa1f f38c 	uxth.w	r3, ip
 800ce4a:	eba3 030e 	sub.w	r3, r3, lr
 800ce4e:	4403      	add	r3, r0
 800ce50:	0c12      	lsrs	r2, r2, #16
 800ce52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ce56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce60:	45c1      	cmp	r9, r8
 800ce62:	f841 3b04 	str.w	r3, [r1], #4
 800ce66:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ce6a:	d2e6      	bcs.n	800ce3a <quorem+0xa4>
 800ce6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce74:	b922      	cbnz	r2, 800ce80 <quorem+0xea>
 800ce76:	3b04      	subs	r3, #4
 800ce78:	429d      	cmp	r5, r3
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	d30b      	bcc.n	800ce96 <quorem+0x100>
 800ce7e:	613c      	str	r4, [r7, #16]
 800ce80:	3601      	adds	r6, #1
 800ce82:	4630      	mov	r0, r6
 800ce84:	b003      	add	sp, #12
 800ce86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8a:	6812      	ldr	r2, [r2, #0]
 800ce8c:	3b04      	subs	r3, #4
 800ce8e:	2a00      	cmp	r2, #0
 800ce90:	d1cb      	bne.n	800ce2a <quorem+0x94>
 800ce92:	3c01      	subs	r4, #1
 800ce94:	e7c6      	b.n	800ce24 <quorem+0x8e>
 800ce96:	6812      	ldr	r2, [r2, #0]
 800ce98:	3b04      	subs	r3, #4
 800ce9a:	2a00      	cmp	r2, #0
 800ce9c:	d1ef      	bne.n	800ce7e <quorem+0xe8>
 800ce9e:	3c01      	subs	r4, #1
 800cea0:	e7ea      	b.n	800ce78 <quorem+0xe2>
 800cea2:	2000      	movs	r0, #0
 800cea4:	e7ee      	b.n	800ce84 <quorem+0xee>
	...

0800cea8 <_dtoa_r>:
 800cea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceac:	ed2d 8b02 	vpush	{d8}
 800ceb0:	69c7      	ldr	r7, [r0, #28]
 800ceb2:	b091      	sub	sp, #68	@ 0x44
 800ceb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ceb8:	ec55 4b10 	vmov	r4, r5, d0
 800cebc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800cebe:	9107      	str	r1, [sp, #28]
 800cec0:	4681      	mov	r9, r0
 800cec2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cec4:	930d      	str	r3, [sp, #52]	@ 0x34
 800cec6:	b97f      	cbnz	r7, 800cee8 <_dtoa_r+0x40>
 800cec8:	2010      	movs	r0, #16
 800ceca:	f7ff f8a1 	bl	800c010 <malloc>
 800cece:	4602      	mov	r2, r0
 800ced0:	f8c9 001c 	str.w	r0, [r9, #28]
 800ced4:	b920      	cbnz	r0, 800cee0 <_dtoa_r+0x38>
 800ced6:	4ba0      	ldr	r3, [pc, #640]	@ (800d158 <_dtoa_r+0x2b0>)
 800ced8:	21ef      	movs	r1, #239	@ 0xef
 800ceda:	48a0      	ldr	r0, [pc, #640]	@ (800d15c <_dtoa_r+0x2b4>)
 800cedc:	f001 fcfa 	bl	800e8d4 <__assert_func>
 800cee0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cee4:	6007      	str	r7, [r0, #0]
 800cee6:	60c7      	str	r7, [r0, #12]
 800cee8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ceec:	6819      	ldr	r1, [r3, #0]
 800ceee:	b159      	cbz	r1, 800cf08 <_dtoa_r+0x60>
 800cef0:	685a      	ldr	r2, [r3, #4]
 800cef2:	604a      	str	r2, [r1, #4]
 800cef4:	2301      	movs	r3, #1
 800cef6:	4093      	lsls	r3, r2
 800cef8:	608b      	str	r3, [r1, #8]
 800cefa:	4648      	mov	r0, r9
 800cefc:	f000 fdbc 	bl	800da78 <_Bfree>
 800cf00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cf04:	2200      	movs	r2, #0
 800cf06:	601a      	str	r2, [r3, #0]
 800cf08:	1e2b      	subs	r3, r5, #0
 800cf0a:	bfbb      	ittet	lt
 800cf0c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cf10:	9303      	strlt	r3, [sp, #12]
 800cf12:	2300      	movge	r3, #0
 800cf14:	2201      	movlt	r2, #1
 800cf16:	bfac      	ite	ge
 800cf18:	6033      	strge	r3, [r6, #0]
 800cf1a:	6032      	strlt	r2, [r6, #0]
 800cf1c:	4b90      	ldr	r3, [pc, #576]	@ (800d160 <_dtoa_r+0x2b8>)
 800cf1e:	9e03      	ldr	r6, [sp, #12]
 800cf20:	43b3      	bics	r3, r6
 800cf22:	d110      	bne.n	800cf46 <_dtoa_r+0x9e>
 800cf24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf26:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cf2a:	6013      	str	r3, [r2, #0]
 800cf2c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cf30:	4323      	orrs	r3, r4
 800cf32:	f000 84e6 	beq.w	800d902 <_dtoa_r+0xa5a>
 800cf36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf38:	4f8a      	ldr	r7, [pc, #552]	@ (800d164 <_dtoa_r+0x2bc>)
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f000 84e8 	beq.w	800d910 <_dtoa_r+0xa68>
 800cf40:	1cfb      	adds	r3, r7, #3
 800cf42:	f000 bce3 	b.w	800d90c <_dtoa_r+0xa64>
 800cf46:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cf4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf52:	d10a      	bne.n	800cf6a <_dtoa_r+0xc2>
 800cf54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf56:	2301      	movs	r3, #1
 800cf58:	6013      	str	r3, [r2, #0]
 800cf5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf5c:	b113      	cbz	r3, 800cf64 <_dtoa_r+0xbc>
 800cf5e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cf60:	4b81      	ldr	r3, [pc, #516]	@ (800d168 <_dtoa_r+0x2c0>)
 800cf62:	6013      	str	r3, [r2, #0]
 800cf64:	4f81      	ldr	r7, [pc, #516]	@ (800d16c <_dtoa_r+0x2c4>)
 800cf66:	f000 bcd3 	b.w	800d910 <_dtoa_r+0xa68>
 800cf6a:	aa0e      	add	r2, sp, #56	@ 0x38
 800cf6c:	a90f      	add	r1, sp, #60	@ 0x3c
 800cf6e:	4648      	mov	r0, r9
 800cf70:	eeb0 0b48 	vmov.f64	d0, d8
 800cf74:	f001 f862 	bl	800e03c <__d2b>
 800cf78:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cf7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf7e:	9001      	str	r0, [sp, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d045      	beq.n	800d010 <_dtoa_r+0x168>
 800cf84:	eeb0 7b48 	vmov.f64	d7, d8
 800cf88:	ee18 1a90 	vmov	r1, s17
 800cf8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cf90:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cf94:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cf98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cf9c:	2500      	movs	r5, #0
 800cf9e:	ee07 1a90 	vmov	s15, r1
 800cfa2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cfa6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d140 <_dtoa_r+0x298>
 800cfaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cfae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d148 <_dtoa_r+0x2a0>
 800cfb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cfb6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d150 <_dtoa_r+0x2a8>
 800cfba:	ee07 3a90 	vmov	s15, r3
 800cfbe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cfc2:	eeb0 7b46 	vmov.f64	d7, d6
 800cfc6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cfca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cfce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd6:	ee16 8a90 	vmov	r8, s13
 800cfda:	d508      	bpl.n	800cfee <_dtoa_r+0x146>
 800cfdc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cfe0:	eeb4 6b47 	vcmp.f64	d6, d7
 800cfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe8:	bf18      	it	ne
 800cfea:	f108 38ff 	addne.w	r8, r8, #4294967295
 800cfee:	f1b8 0f16 	cmp.w	r8, #22
 800cff2:	d82b      	bhi.n	800d04c <_dtoa_r+0x1a4>
 800cff4:	495e      	ldr	r1, [pc, #376]	@ (800d170 <_dtoa_r+0x2c8>)
 800cff6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800cffa:	ed91 7b00 	vldr	d7, [r1]
 800cffe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d006:	d501      	bpl.n	800d00c <_dtoa_r+0x164>
 800d008:	f108 38ff 	add.w	r8, r8, #4294967295
 800d00c:	2100      	movs	r1, #0
 800d00e:	e01e      	b.n	800d04e <_dtoa_r+0x1a6>
 800d010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d012:	4413      	add	r3, r2
 800d014:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d018:	2920      	cmp	r1, #32
 800d01a:	bfc1      	itttt	gt
 800d01c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d020:	408e      	lslgt	r6, r1
 800d022:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d026:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d02a:	bfd6      	itet	le
 800d02c:	f1c1 0120 	rsble	r1, r1, #32
 800d030:	4331      	orrgt	r1, r6
 800d032:	fa04 f101 	lslle.w	r1, r4, r1
 800d036:	ee07 1a90 	vmov	s15, r1
 800d03a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d03e:	3b01      	subs	r3, #1
 800d040:	ee17 1a90 	vmov	r1, s15
 800d044:	2501      	movs	r5, #1
 800d046:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d04a:	e7a8      	b.n	800cf9e <_dtoa_r+0xf6>
 800d04c:	2101      	movs	r1, #1
 800d04e:	1ad2      	subs	r2, r2, r3
 800d050:	1e53      	subs	r3, r2, #1
 800d052:	9306      	str	r3, [sp, #24]
 800d054:	bf45      	ittet	mi
 800d056:	f1c2 0301 	rsbmi	r3, r2, #1
 800d05a:	9304      	strmi	r3, [sp, #16]
 800d05c:	2300      	movpl	r3, #0
 800d05e:	2300      	movmi	r3, #0
 800d060:	bf4c      	ite	mi
 800d062:	9306      	strmi	r3, [sp, #24]
 800d064:	9304      	strpl	r3, [sp, #16]
 800d066:	f1b8 0f00 	cmp.w	r8, #0
 800d06a:	910c      	str	r1, [sp, #48]	@ 0x30
 800d06c:	db18      	blt.n	800d0a0 <_dtoa_r+0x1f8>
 800d06e:	9b06      	ldr	r3, [sp, #24]
 800d070:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d074:	4443      	add	r3, r8
 800d076:	9306      	str	r3, [sp, #24]
 800d078:	2300      	movs	r3, #0
 800d07a:	9a07      	ldr	r2, [sp, #28]
 800d07c:	2a09      	cmp	r2, #9
 800d07e:	d845      	bhi.n	800d10c <_dtoa_r+0x264>
 800d080:	2a05      	cmp	r2, #5
 800d082:	bfc4      	itt	gt
 800d084:	3a04      	subgt	r2, #4
 800d086:	9207      	strgt	r2, [sp, #28]
 800d088:	9a07      	ldr	r2, [sp, #28]
 800d08a:	f1a2 0202 	sub.w	r2, r2, #2
 800d08e:	bfcc      	ite	gt
 800d090:	2400      	movgt	r4, #0
 800d092:	2401      	movle	r4, #1
 800d094:	2a03      	cmp	r2, #3
 800d096:	d844      	bhi.n	800d122 <_dtoa_r+0x27a>
 800d098:	e8df f002 	tbb	[pc, r2]
 800d09c:	0b173634 	.word	0x0b173634
 800d0a0:	9b04      	ldr	r3, [sp, #16]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	eba3 0308 	sub.w	r3, r3, r8
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	920a      	str	r2, [sp, #40]	@ 0x28
 800d0ac:	f1c8 0300 	rsb	r3, r8, #0
 800d0b0:	e7e3      	b.n	800d07a <_dtoa_r+0x1d2>
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	9208      	str	r2, [sp, #32]
 800d0b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0b8:	eb08 0b02 	add.w	fp, r8, r2
 800d0bc:	f10b 0a01 	add.w	sl, fp, #1
 800d0c0:	4652      	mov	r2, sl
 800d0c2:	2a01      	cmp	r2, #1
 800d0c4:	bfb8      	it	lt
 800d0c6:	2201      	movlt	r2, #1
 800d0c8:	e006      	b.n	800d0d8 <_dtoa_r+0x230>
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	9208      	str	r2, [sp, #32]
 800d0ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0d0:	2a00      	cmp	r2, #0
 800d0d2:	dd29      	ble.n	800d128 <_dtoa_r+0x280>
 800d0d4:	4693      	mov	fp, r2
 800d0d6:	4692      	mov	sl, r2
 800d0d8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d0dc:	2100      	movs	r1, #0
 800d0de:	2004      	movs	r0, #4
 800d0e0:	f100 0614 	add.w	r6, r0, #20
 800d0e4:	4296      	cmp	r6, r2
 800d0e6:	d926      	bls.n	800d136 <_dtoa_r+0x28e>
 800d0e8:	6079      	str	r1, [r7, #4]
 800d0ea:	4648      	mov	r0, r9
 800d0ec:	9305      	str	r3, [sp, #20]
 800d0ee:	f000 fc83 	bl	800d9f8 <_Balloc>
 800d0f2:	9b05      	ldr	r3, [sp, #20]
 800d0f4:	4607      	mov	r7, r0
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d13e      	bne.n	800d178 <_dtoa_r+0x2d0>
 800d0fa:	4b1e      	ldr	r3, [pc, #120]	@ (800d174 <_dtoa_r+0x2cc>)
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800d102:	e6ea      	b.n	800ceda <_dtoa_r+0x32>
 800d104:	2200      	movs	r2, #0
 800d106:	e7e1      	b.n	800d0cc <_dtoa_r+0x224>
 800d108:	2200      	movs	r2, #0
 800d10a:	e7d3      	b.n	800d0b4 <_dtoa_r+0x20c>
 800d10c:	2401      	movs	r4, #1
 800d10e:	2200      	movs	r2, #0
 800d110:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d114:	f04f 3bff 	mov.w	fp, #4294967295
 800d118:	2100      	movs	r1, #0
 800d11a:	46da      	mov	sl, fp
 800d11c:	2212      	movs	r2, #18
 800d11e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d120:	e7da      	b.n	800d0d8 <_dtoa_r+0x230>
 800d122:	2201      	movs	r2, #1
 800d124:	9208      	str	r2, [sp, #32]
 800d126:	e7f5      	b.n	800d114 <_dtoa_r+0x26c>
 800d128:	f04f 0b01 	mov.w	fp, #1
 800d12c:	46da      	mov	sl, fp
 800d12e:	465a      	mov	r2, fp
 800d130:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d134:	e7d0      	b.n	800d0d8 <_dtoa_r+0x230>
 800d136:	3101      	adds	r1, #1
 800d138:	0040      	lsls	r0, r0, #1
 800d13a:	e7d1      	b.n	800d0e0 <_dtoa_r+0x238>
 800d13c:	f3af 8000 	nop.w
 800d140:	636f4361 	.word	0x636f4361
 800d144:	3fd287a7 	.word	0x3fd287a7
 800d148:	8b60c8b3 	.word	0x8b60c8b3
 800d14c:	3fc68a28 	.word	0x3fc68a28
 800d150:	509f79fb 	.word	0x509f79fb
 800d154:	3fd34413 	.word	0x3fd34413
 800d158:	08034ca5 	.word	0x08034ca5
 800d15c:	08034cbc 	.word	0x08034cbc
 800d160:	7ff00000 	.word	0x7ff00000
 800d164:	08034ca1 	.word	0x08034ca1
 800d168:	08034c75 	.word	0x08034c75
 800d16c:	08034c74 	.word	0x08034c74
 800d170:	08034e10 	.word	0x08034e10
 800d174:	08034d14 	.word	0x08034d14
 800d178:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d17c:	f1ba 0f0e 	cmp.w	sl, #14
 800d180:	6010      	str	r0, [r2, #0]
 800d182:	d86e      	bhi.n	800d262 <_dtoa_r+0x3ba>
 800d184:	2c00      	cmp	r4, #0
 800d186:	d06c      	beq.n	800d262 <_dtoa_r+0x3ba>
 800d188:	f1b8 0f00 	cmp.w	r8, #0
 800d18c:	f340 80b4 	ble.w	800d2f8 <_dtoa_r+0x450>
 800d190:	4ac8      	ldr	r2, [pc, #800]	@ (800d4b4 <_dtoa_r+0x60c>)
 800d192:	f008 010f 	and.w	r1, r8, #15
 800d196:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d19a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d19e:	ed92 7b00 	vldr	d7, [r2]
 800d1a2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d1a6:	f000 809b 	beq.w	800d2e0 <_dtoa_r+0x438>
 800d1aa:	4ac3      	ldr	r2, [pc, #780]	@ (800d4b8 <_dtoa_r+0x610>)
 800d1ac:	ed92 6b08 	vldr	d6, [r2, #32]
 800d1b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d1b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d1b8:	f001 010f 	and.w	r1, r1, #15
 800d1bc:	2203      	movs	r2, #3
 800d1be:	48be      	ldr	r0, [pc, #760]	@ (800d4b8 <_dtoa_r+0x610>)
 800d1c0:	2900      	cmp	r1, #0
 800d1c2:	f040 808f 	bne.w	800d2e4 <_dtoa_r+0x43c>
 800d1c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d1ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d1ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d1d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1d8:	2900      	cmp	r1, #0
 800d1da:	f000 80b3 	beq.w	800d344 <_dtoa_r+0x49c>
 800d1de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d1e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ea:	f140 80ab 	bpl.w	800d344 <_dtoa_r+0x49c>
 800d1ee:	f1ba 0f00 	cmp.w	sl, #0
 800d1f2:	f000 80a7 	beq.w	800d344 <_dtoa_r+0x49c>
 800d1f6:	f1bb 0f00 	cmp.w	fp, #0
 800d1fa:	dd30      	ble.n	800d25e <_dtoa_r+0x3b6>
 800d1fc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d200:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d204:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d208:	f108 31ff 	add.w	r1, r8, #4294967295
 800d20c:	9105      	str	r1, [sp, #20]
 800d20e:	3201      	adds	r2, #1
 800d210:	465c      	mov	r4, fp
 800d212:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d216:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d21a:	ee07 2a90 	vmov	s15, r2
 800d21e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d222:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d226:	ee15 2a90 	vmov	r2, s11
 800d22a:	ec51 0b15 	vmov	r0, r1, d5
 800d22e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d232:	2c00      	cmp	r4, #0
 800d234:	f040 808a 	bne.w	800d34c <_dtoa_r+0x4a4>
 800d238:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d23c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d240:	ec41 0b17 	vmov	d7, r0, r1
 800d244:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d24c:	f300 826a 	bgt.w	800d724 <_dtoa_r+0x87c>
 800d250:	eeb1 7b47 	vneg.f64	d7, d7
 800d254:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d25c:	d423      	bmi.n	800d2a6 <_dtoa_r+0x3fe>
 800d25e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d262:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d264:	2a00      	cmp	r2, #0
 800d266:	f2c0 8129 	blt.w	800d4bc <_dtoa_r+0x614>
 800d26a:	f1b8 0f0e 	cmp.w	r8, #14
 800d26e:	f300 8125 	bgt.w	800d4bc <_dtoa_r+0x614>
 800d272:	4b90      	ldr	r3, [pc, #576]	@ (800d4b4 <_dtoa_r+0x60c>)
 800d274:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d278:	ed93 6b00 	vldr	d6, [r3]
 800d27c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f280 80c8 	bge.w	800d414 <_dtoa_r+0x56c>
 800d284:	f1ba 0f00 	cmp.w	sl, #0
 800d288:	f300 80c4 	bgt.w	800d414 <_dtoa_r+0x56c>
 800d28c:	d10b      	bne.n	800d2a6 <_dtoa_r+0x3fe>
 800d28e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d292:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d296:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d29a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a2:	f2c0 823c 	blt.w	800d71e <_dtoa_r+0x876>
 800d2a6:	2400      	movs	r4, #0
 800d2a8:	4625      	mov	r5, r4
 800d2aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ac:	43db      	mvns	r3, r3
 800d2ae:	9305      	str	r3, [sp, #20]
 800d2b0:	463e      	mov	r6, r7
 800d2b2:	f04f 0800 	mov.w	r8, #0
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	4648      	mov	r0, r9
 800d2ba:	f000 fbdd 	bl	800da78 <_Bfree>
 800d2be:	2d00      	cmp	r5, #0
 800d2c0:	f000 80a2 	beq.w	800d408 <_dtoa_r+0x560>
 800d2c4:	f1b8 0f00 	cmp.w	r8, #0
 800d2c8:	d005      	beq.n	800d2d6 <_dtoa_r+0x42e>
 800d2ca:	45a8      	cmp	r8, r5
 800d2cc:	d003      	beq.n	800d2d6 <_dtoa_r+0x42e>
 800d2ce:	4641      	mov	r1, r8
 800d2d0:	4648      	mov	r0, r9
 800d2d2:	f000 fbd1 	bl	800da78 <_Bfree>
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	4648      	mov	r0, r9
 800d2da:	f000 fbcd 	bl	800da78 <_Bfree>
 800d2de:	e093      	b.n	800d408 <_dtoa_r+0x560>
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	e76c      	b.n	800d1be <_dtoa_r+0x316>
 800d2e4:	07cc      	lsls	r4, r1, #31
 800d2e6:	d504      	bpl.n	800d2f2 <_dtoa_r+0x44a>
 800d2e8:	ed90 6b00 	vldr	d6, [r0]
 800d2ec:	3201      	adds	r2, #1
 800d2ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2f2:	1049      	asrs	r1, r1, #1
 800d2f4:	3008      	adds	r0, #8
 800d2f6:	e763      	b.n	800d1c0 <_dtoa_r+0x318>
 800d2f8:	d022      	beq.n	800d340 <_dtoa_r+0x498>
 800d2fa:	f1c8 0100 	rsb	r1, r8, #0
 800d2fe:	4a6d      	ldr	r2, [pc, #436]	@ (800d4b4 <_dtoa_r+0x60c>)
 800d300:	f001 000f 	and.w	r0, r1, #15
 800d304:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d308:	ed92 7b00 	vldr	d7, [r2]
 800d30c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d310:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d314:	4868      	ldr	r0, [pc, #416]	@ (800d4b8 <_dtoa_r+0x610>)
 800d316:	1109      	asrs	r1, r1, #4
 800d318:	2400      	movs	r4, #0
 800d31a:	2202      	movs	r2, #2
 800d31c:	b929      	cbnz	r1, 800d32a <_dtoa_r+0x482>
 800d31e:	2c00      	cmp	r4, #0
 800d320:	f43f af57 	beq.w	800d1d2 <_dtoa_r+0x32a>
 800d324:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d328:	e753      	b.n	800d1d2 <_dtoa_r+0x32a>
 800d32a:	07ce      	lsls	r6, r1, #31
 800d32c:	d505      	bpl.n	800d33a <_dtoa_r+0x492>
 800d32e:	ed90 6b00 	vldr	d6, [r0]
 800d332:	3201      	adds	r2, #1
 800d334:	2401      	movs	r4, #1
 800d336:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d33a:	1049      	asrs	r1, r1, #1
 800d33c:	3008      	adds	r0, #8
 800d33e:	e7ed      	b.n	800d31c <_dtoa_r+0x474>
 800d340:	2202      	movs	r2, #2
 800d342:	e746      	b.n	800d1d2 <_dtoa_r+0x32a>
 800d344:	f8cd 8014 	str.w	r8, [sp, #20]
 800d348:	4654      	mov	r4, sl
 800d34a:	e762      	b.n	800d212 <_dtoa_r+0x36a>
 800d34c:	4a59      	ldr	r2, [pc, #356]	@ (800d4b4 <_dtoa_r+0x60c>)
 800d34e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d352:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d356:	9a08      	ldr	r2, [sp, #32]
 800d358:	ec41 0b17 	vmov	d7, r0, r1
 800d35c:	443c      	add	r4, r7
 800d35e:	b34a      	cbz	r2, 800d3b4 <_dtoa_r+0x50c>
 800d360:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d364:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d368:	463e      	mov	r6, r7
 800d36a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d36e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d372:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d376:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d37a:	ee14 2a90 	vmov	r2, s9
 800d37e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d382:	3230      	adds	r2, #48	@ 0x30
 800d384:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d388:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d390:	f806 2b01 	strb.w	r2, [r6], #1
 800d394:	d438      	bmi.n	800d408 <_dtoa_r+0x560>
 800d396:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d39a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a2:	d46e      	bmi.n	800d482 <_dtoa_r+0x5da>
 800d3a4:	42a6      	cmp	r6, r4
 800d3a6:	f43f af5a 	beq.w	800d25e <_dtoa_r+0x3b6>
 800d3aa:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d3ae:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d3b2:	e7e0      	b.n	800d376 <_dtoa_r+0x4ce>
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	463e      	mov	r6, r7
 800d3b8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d3bc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d3c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d3c4:	ee14 2a90 	vmov	r2, s9
 800d3c8:	3230      	adds	r2, #48	@ 0x30
 800d3ca:	f806 2b01 	strb.w	r2, [r6], #1
 800d3ce:	42a6      	cmp	r6, r4
 800d3d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d3d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d3d8:	d119      	bne.n	800d40e <_dtoa_r+0x566>
 800d3da:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d3de:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d3e2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ea:	dc4a      	bgt.n	800d482 <_dtoa_r+0x5da>
 800d3ec:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d3f0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f8:	f57f af31 	bpl.w	800d25e <_dtoa_r+0x3b6>
 800d3fc:	460e      	mov	r6, r1
 800d3fe:	3901      	subs	r1, #1
 800d400:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d404:	2b30      	cmp	r3, #48	@ 0x30
 800d406:	d0f9      	beq.n	800d3fc <_dtoa_r+0x554>
 800d408:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d40c:	e027      	b.n	800d45e <_dtoa_r+0x5b6>
 800d40e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d412:	e7d5      	b.n	800d3c0 <_dtoa_r+0x518>
 800d414:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d418:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d41c:	463e      	mov	r6, r7
 800d41e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d422:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d426:	ee15 3a10 	vmov	r3, s10
 800d42a:	3330      	adds	r3, #48	@ 0x30
 800d42c:	f806 3b01 	strb.w	r3, [r6], #1
 800d430:	1bf3      	subs	r3, r6, r7
 800d432:	459a      	cmp	sl, r3
 800d434:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d438:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d43c:	d132      	bne.n	800d4a4 <_dtoa_r+0x5fc>
 800d43e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d442:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d44a:	dc18      	bgt.n	800d47e <_dtoa_r+0x5d6>
 800d44c:	eeb4 7b46 	vcmp.f64	d7, d6
 800d450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d454:	d103      	bne.n	800d45e <_dtoa_r+0x5b6>
 800d456:	ee15 3a10 	vmov	r3, s10
 800d45a:	07db      	lsls	r3, r3, #31
 800d45c:	d40f      	bmi.n	800d47e <_dtoa_r+0x5d6>
 800d45e:	9901      	ldr	r1, [sp, #4]
 800d460:	4648      	mov	r0, r9
 800d462:	f000 fb09 	bl	800da78 <_Bfree>
 800d466:	2300      	movs	r3, #0
 800d468:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d46a:	7033      	strb	r3, [r6, #0]
 800d46c:	f108 0301 	add.w	r3, r8, #1
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d474:	2b00      	cmp	r3, #0
 800d476:	f000 824b 	beq.w	800d910 <_dtoa_r+0xa68>
 800d47a:	601e      	str	r6, [r3, #0]
 800d47c:	e248      	b.n	800d910 <_dtoa_r+0xa68>
 800d47e:	f8cd 8014 	str.w	r8, [sp, #20]
 800d482:	4633      	mov	r3, r6
 800d484:	461e      	mov	r6, r3
 800d486:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d48a:	2a39      	cmp	r2, #57	@ 0x39
 800d48c:	d106      	bne.n	800d49c <_dtoa_r+0x5f4>
 800d48e:	429f      	cmp	r7, r3
 800d490:	d1f8      	bne.n	800d484 <_dtoa_r+0x5dc>
 800d492:	9a05      	ldr	r2, [sp, #20]
 800d494:	3201      	adds	r2, #1
 800d496:	9205      	str	r2, [sp, #20]
 800d498:	2230      	movs	r2, #48	@ 0x30
 800d49a:	703a      	strb	r2, [r7, #0]
 800d49c:	781a      	ldrb	r2, [r3, #0]
 800d49e:	3201      	adds	r2, #1
 800d4a0:	701a      	strb	r2, [r3, #0]
 800d4a2:	e7b1      	b.n	800d408 <_dtoa_r+0x560>
 800d4a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d4a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b0:	d1b5      	bne.n	800d41e <_dtoa_r+0x576>
 800d4b2:	e7d4      	b.n	800d45e <_dtoa_r+0x5b6>
 800d4b4:	08034e10 	.word	0x08034e10
 800d4b8:	08034de8 	.word	0x08034de8
 800d4bc:	9908      	ldr	r1, [sp, #32]
 800d4be:	2900      	cmp	r1, #0
 800d4c0:	f000 80e9 	beq.w	800d696 <_dtoa_r+0x7ee>
 800d4c4:	9907      	ldr	r1, [sp, #28]
 800d4c6:	2901      	cmp	r1, #1
 800d4c8:	f300 80cb 	bgt.w	800d662 <_dtoa_r+0x7ba>
 800d4cc:	2d00      	cmp	r5, #0
 800d4ce:	f000 80c4 	beq.w	800d65a <_dtoa_r+0x7b2>
 800d4d2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d4d6:	9e04      	ldr	r6, [sp, #16]
 800d4d8:	461c      	mov	r4, r3
 800d4da:	9305      	str	r3, [sp, #20]
 800d4dc:	9b04      	ldr	r3, [sp, #16]
 800d4de:	4413      	add	r3, r2
 800d4e0:	9304      	str	r3, [sp, #16]
 800d4e2:	9b06      	ldr	r3, [sp, #24]
 800d4e4:	2101      	movs	r1, #1
 800d4e6:	4413      	add	r3, r2
 800d4e8:	4648      	mov	r0, r9
 800d4ea:	9306      	str	r3, [sp, #24]
 800d4ec:	f000 fb78 	bl	800dbe0 <__i2b>
 800d4f0:	9b05      	ldr	r3, [sp, #20]
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	b166      	cbz	r6, 800d510 <_dtoa_r+0x668>
 800d4f6:	9a06      	ldr	r2, [sp, #24]
 800d4f8:	2a00      	cmp	r2, #0
 800d4fa:	dd09      	ble.n	800d510 <_dtoa_r+0x668>
 800d4fc:	42b2      	cmp	r2, r6
 800d4fe:	9904      	ldr	r1, [sp, #16]
 800d500:	bfa8      	it	ge
 800d502:	4632      	movge	r2, r6
 800d504:	1a89      	subs	r1, r1, r2
 800d506:	9104      	str	r1, [sp, #16]
 800d508:	9906      	ldr	r1, [sp, #24]
 800d50a:	1ab6      	subs	r6, r6, r2
 800d50c:	1a8a      	subs	r2, r1, r2
 800d50e:	9206      	str	r2, [sp, #24]
 800d510:	b30b      	cbz	r3, 800d556 <_dtoa_r+0x6ae>
 800d512:	9a08      	ldr	r2, [sp, #32]
 800d514:	2a00      	cmp	r2, #0
 800d516:	f000 80c5 	beq.w	800d6a4 <_dtoa_r+0x7fc>
 800d51a:	2c00      	cmp	r4, #0
 800d51c:	f000 80bf 	beq.w	800d69e <_dtoa_r+0x7f6>
 800d520:	4629      	mov	r1, r5
 800d522:	4622      	mov	r2, r4
 800d524:	4648      	mov	r0, r9
 800d526:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d528:	f000 fc12 	bl	800dd50 <__pow5mult>
 800d52c:	9a01      	ldr	r2, [sp, #4]
 800d52e:	4601      	mov	r1, r0
 800d530:	4605      	mov	r5, r0
 800d532:	4648      	mov	r0, r9
 800d534:	f000 fb6a 	bl	800dc0c <__multiply>
 800d538:	9901      	ldr	r1, [sp, #4]
 800d53a:	9005      	str	r0, [sp, #20]
 800d53c:	4648      	mov	r0, r9
 800d53e:	f000 fa9b 	bl	800da78 <_Bfree>
 800d542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d544:	1b1b      	subs	r3, r3, r4
 800d546:	f000 80b0 	beq.w	800d6aa <_dtoa_r+0x802>
 800d54a:	9905      	ldr	r1, [sp, #20]
 800d54c:	461a      	mov	r2, r3
 800d54e:	4648      	mov	r0, r9
 800d550:	f000 fbfe 	bl	800dd50 <__pow5mult>
 800d554:	9001      	str	r0, [sp, #4]
 800d556:	2101      	movs	r1, #1
 800d558:	4648      	mov	r0, r9
 800d55a:	f000 fb41 	bl	800dbe0 <__i2b>
 800d55e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d560:	4604      	mov	r4, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	f000 81da 	beq.w	800d91c <_dtoa_r+0xa74>
 800d568:	461a      	mov	r2, r3
 800d56a:	4601      	mov	r1, r0
 800d56c:	4648      	mov	r0, r9
 800d56e:	f000 fbef 	bl	800dd50 <__pow5mult>
 800d572:	9b07      	ldr	r3, [sp, #28]
 800d574:	2b01      	cmp	r3, #1
 800d576:	4604      	mov	r4, r0
 800d578:	f300 80a0 	bgt.w	800d6bc <_dtoa_r+0x814>
 800d57c:	9b02      	ldr	r3, [sp, #8]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f040 8096 	bne.w	800d6b0 <_dtoa_r+0x808>
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d58a:	2a00      	cmp	r2, #0
 800d58c:	f040 8092 	bne.w	800d6b4 <_dtoa_r+0x80c>
 800d590:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d594:	0d12      	lsrs	r2, r2, #20
 800d596:	0512      	lsls	r2, r2, #20
 800d598:	2a00      	cmp	r2, #0
 800d59a:	f000 808d 	beq.w	800d6b8 <_dtoa_r+0x810>
 800d59e:	9b04      	ldr	r3, [sp, #16]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	9304      	str	r3, [sp, #16]
 800d5a4:	9b06      	ldr	r3, [sp, #24]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	9306      	str	r3, [sp, #24]
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f000 81b9 	beq.w	800d928 <_dtoa_r+0xa80>
 800d5b6:	6922      	ldr	r2, [r4, #16]
 800d5b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d5bc:	6910      	ldr	r0, [r2, #16]
 800d5be:	f000 fac3 	bl	800db48 <__hi0bits>
 800d5c2:	f1c0 0020 	rsb	r0, r0, #32
 800d5c6:	9b06      	ldr	r3, [sp, #24]
 800d5c8:	4418      	add	r0, r3
 800d5ca:	f010 001f 	ands.w	r0, r0, #31
 800d5ce:	f000 8081 	beq.w	800d6d4 <_dtoa_r+0x82c>
 800d5d2:	f1c0 0220 	rsb	r2, r0, #32
 800d5d6:	2a04      	cmp	r2, #4
 800d5d8:	dd73      	ble.n	800d6c2 <_dtoa_r+0x81a>
 800d5da:	9b04      	ldr	r3, [sp, #16]
 800d5dc:	f1c0 001c 	rsb	r0, r0, #28
 800d5e0:	4403      	add	r3, r0
 800d5e2:	9304      	str	r3, [sp, #16]
 800d5e4:	9b06      	ldr	r3, [sp, #24]
 800d5e6:	4406      	add	r6, r0
 800d5e8:	4403      	add	r3, r0
 800d5ea:	9306      	str	r3, [sp, #24]
 800d5ec:	9b04      	ldr	r3, [sp, #16]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	dd05      	ble.n	800d5fe <_dtoa_r+0x756>
 800d5f2:	9901      	ldr	r1, [sp, #4]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	4648      	mov	r0, r9
 800d5f8:	f000 fc04 	bl	800de04 <__lshift>
 800d5fc:	9001      	str	r0, [sp, #4]
 800d5fe:	9b06      	ldr	r3, [sp, #24]
 800d600:	2b00      	cmp	r3, #0
 800d602:	dd05      	ble.n	800d610 <_dtoa_r+0x768>
 800d604:	4621      	mov	r1, r4
 800d606:	461a      	mov	r2, r3
 800d608:	4648      	mov	r0, r9
 800d60a:	f000 fbfb 	bl	800de04 <__lshift>
 800d60e:	4604      	mov	r4, r0
 800d610:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d612:	2b00      	cmp	r3, #0
 800d614:	d060      	beq.n	800d6d8 <_dtoa_r+0x830>
 800d616:	9801      	ldr	r0, [sp, #4]
 800d618:	4621      	mov	r1, r4
 800d61a:	f000 fc5f 	bl	800dedc <__mcmp>
 800d61e:	2800      	cmp	r0, #0
 800d620:	da5a      	bge.n	800d6d8 <_dtoa_r+0x830>
 800d622:	f108 33ff 	add.w	r3, r8, #4294967295
 800d626:	9305      	str	r3, [sp, #20]
 800d628:	9901      	ldr	r1, [sp, #4]
 800d62a:	2300      	movs	r3, #0
 800d62c:	220a      	movs	r2, #10
 800d62e:	4648      	mov	r0, r9
 800d630:	f000 fa44 	bl	800dabc <__multadd>
 800d634:	9b08      	ldr	r3, [sp, #32]
 800d636:	9001      	str	r0, [sp, #4]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f000 8177 	beq.w	800d92c <_dtoa_r+0xa84>
 800d63e:	4629      	mov	r1, r5
 800d640:	2300      	movs	r3, #0
 800d642:	220a      	movs	r2, #10
 800d644:	4648      	mov	r0, r9
 800d646:	f000 fa39 	bl	800dabc <__multadd>
 800d64a:	f1bb 0f00 	cmp.w	fp, #0
 800d64e:	4605      	mov	r5, r0
 800d650:	dc6e      	bgt.n	800d730 <_dtoa_r+0x888>
 800d652:	9b07      	ldr	r3, [sp, #28]
 800d654:	2b02      	cmp	r3, #2
 800d656:	dc48      	bgt.n	800d6ea <_dtoa_r+0x842>
 800d658:	e06a      	b.n	800d730 <_dtoa_r+0x888>
 800d65a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d65c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d660:	e739      	b.n	800d4d6 <_dtoa_r+0x62e>
 800d662:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d666:	42a3      	cmp	r3, r4
 800d668:	db07      	blt.n	800d67a <_dtoa_r+0x7d2>
 800d66a:	f1ba 0f00 	cmp.w	sl, #0
 800d66e:	eba3 0404 	sub.w	r4, r3, r4
 800d672:	db0b      	blt.n	800d68c <_dtoa_r+0x7e4>
 800d674:	9e04      	ldr	r6, [sp, #16]
 800d676:	4652      	mov	r2, sl
 800d678:	e72f      	b.n	800d4da <_dtoa_r+0x632>
 800d67a:	1ae2      	subs	r2, r4, r3
 800d67c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d67e:	9e04      	ldr	r6, [sp, #16]
 800d680:	4413      	add	r3, r2
 800d682:	930a      	str	r3, [sp, #40]	@ 0x28
 800d684:	4652      	mov	r2, sl
 800d686:	4623      	mov	r3, r4
 800d688:	2400      	movs	r4, #0
 800d68a:	e726      	b.n	800d4da <_dtoa_r+0x632>
 800d68c:	9a04      	ldr	r2, [sp, #16]
 800d68e:	eba2 060a 	sub.w	r6, r2, sl
 800d692:	2200      	movs	r2, #0
 800d694:	e721      	b.n	800d4da <_dtoa_r+0x632>
 800d696:	9e04      	ldr	r6, [sp, #16]
 800d698:	9d08      	ldr	r5, [sp, #32]
 800d69a:	461c      	mov	r4, r3
 800d69c:	e72a      	b.n	800d4f4 <_dtoa_r+0x64c>
 800d69e:	9a01      	ldr	r2, [sp, #4]
 800d6a0:	9205      	str	r2, [sp, #20]
 800d6a2:	e752      	b.n	800d54a <_dtoa_r+0x6a2>
 800d6a4:	9901      	ldr	r1, [sp, #4]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	e751      	b.n	800d54e <_dtoa_r+0x6a6>
 800d6aa:	9b05      	ldr	r3, [sp, #20]
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	e752      	b.n	800d556 <_dtoa_r+0x6ae>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	e77b      	b.n	800d5ac <_dtoa_r+0x704>
 800d6b4:	9b02      	ldr	r3, [sp, #8]
 800d6b6:	e779      	b.n	800d5ac <_dtoa_r+0x704>
 800d6b8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d6ba:	e778      	b.n	800d5ae <_dtoa_r+0x706>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6c0:	e779      	b.n	800d5b6 <_dtoa_r+0x70e>
 800d6c2:	d093      	beq.n	800d5ec <_dtoa_r+0x744>
 800d6c4:	9b04      	ldr	r3, [sp, #16]
 800d6c6:	321c      	adds	r2, #28
 800d6c8:	4413      	add	r3, r2
 800d6ca:	9304      	str	r3, [sp, #16]
 800d6cc:	9b06      	ldr	r3, [sp, #24]
 800d6ce:	4416      	add	r6, r2
 800d6d0:	4413      	add	r3, r2
 800d6d2:	e78a      	b.n	800d5ea <_dtoa_r+0x742>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	e7f5      	b.n	800d6c4 <_dtoa_r+0x81c>
 800d6d8:	f1ba 0f00 	cmp.w	sl, #0
 800d6dc:	f8cd 8014 	str.w	r8, [sp, #20]
 800d6e0:	46d3      	mov	fp, sl
 800d6e2:	dc21      	bgt.n	800d728 <_dtoa_r+0x880>
 800d6e4:	9b07      	ldr	r3, [sp, #28]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	dd1e      	ble.n	800d728 <_dtoa_r+0x880>
 800d6ea:	f1bb 0f00 	cmp.w	fp, #0
 800d6ee:	f47f addc 	bne.w	800d2aa <_dtoa_r+0x402>
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	465b      	mov	r3, fp
 800d6f6:	2205      	movs	r2, #5
 800d6f8:	4648      	mov	r0, r9
 800d6fa:	f000 f9df 	bl	800dabc <__multadd>
 800d6fe:	4601      	mov	r1, r0
 800d700:	4604      	mov	r4, r0
 800d702:	9801      	ldr	r0, [sp, #4]
 800d704:	f000 fbea 	bl	800dedc <__mcmp>
 800d708:	2800      	cmp	r0, #0
 800d70a:	f77f adce 	ble.w	800d2aa <_dtoa_r+0x402>
 800d70e:	463e      	mov	r6, r7
 800d710:	2331      	movs	r3, #49	@ 0x31
 800d712:	f806 3b01 	strb.w	r3, [r6], #1
 800d716:	9b05      	ldr	r3, [sp, #20]
 800d718:	3301      	adds	r3, #1
 800d71a:	9305      	str	r3, [sp, #20]
 800d71c:	e5c9      	b.n	800d2b2 <_dtoa_r+0x40a>
 800d71e:	f8cd 8014 	str.w	r8, [sp, #20]
 800d722:	4654      	mov	r4, sl
 800d724:	4625      	mov	r5, r4
 800d726:	e7f2      	b.n	800d70e <_dtoa_r+0x866>
 800d728:	9b08      	ldr	r3, [sp, #32]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	f000 8102 	beq.w	800d934 <_dtoa_r+0xa8c>
 800d730:	2e00      	cmp	r6, #0
 800d732:	dd05      	ble.n	800d740 <_dtoa_r+0x898>
 800d734:	4629      	mov	r1, r5
 800d736:	4632      	mov	r2, r6
 800d738:	4648      	mov	r0, r9
 800d73a:	f000 fb63 	bl	800de04 <__lshift>
 800d73e:	4605      	mov	r5, r0
 800d740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d742:	2b00      	cmp	r3, #0
 800d744:	d058      	beq.n	800d7f8 <_dtoa_r+0x950>
 800d746:	6869      	ldr	r1, [r5, #4]
 800d748:	4648      	mov	r0, r9
 800d74a:	f000 f955 	bl	800d9f8 <_Balloc>
 800d74e:	4606      	mov	r6, r0
 800d750:	b928      	cbnz	r0, 800d75e <_dtoa_r+0x8b6>
 800d752:	4b82      	ldr	r3, [pc, #520]	@ (800d95c <_dtoa_r+0xab4>)
 800d754:	4602      	mov	r2, r0
 800d756:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d75a:	f7ff bbbe 	b.w	800ceda <_dtoa_r+0x32>
 800d75e:	692a      	ldr	r2, [r5, #16]
 800d760:	3202      	adds	r2, #2
 800d762:	0092      	lsls	r2, r2, #2
 800d764:	f105 010c 	add.w	r1, r5, #12
 800d768:	300c      	adds	r0, #12
 800d76a:	f7ff fb06 	bl	800cd7a <memcpy>
 800d76e:	2201      	movs	r2, #1
 800d770:	4631      	mov	r1, r6
 800d772:	4648      	mov	r0, r9
 800d774:	f000 fb46 	bl	800de04 <__lshift>
 800d778:	1c7b      	adds	r3, r7, #1
 800d77a:	9304      	str	r3, [sp, #16]
 800d77c:	eb07 030b 	add.w	r3, r7, fp
 800d780:	9309      	str	r3, [sp, #36]	@ 0x24
 800d782:	9b02      	ldr	r3, [sp, #8]
 800d784:	f003 0301 	and.w	r3, r3, #1
 800d788:	46a8      	mov	r8, r5
 800d78a:	9308      	str	r3, [sp, #32]
 800d78c:	4605      	mov	r5, r0
 800d78e:	9b04      	ldr	r3, [sp, #16]
 800d790:	9801      	ldr	r0, [sp, #4]
 800d792:	4621      	mov	r1, r4
 800d794:	f103 3bff 	add.w	fp, r3, #4294967295
 800d798:	f7ff fafd 	bl	800cd96 <quorem>
 800d79c:	4641      	mov	r1, r8
 800d79e:	9002      	str	r0, [sp, #8]
 800d7a0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d7a4:	9801      	ldr	r0, [sp, #4]
 800d7a6:	f000 fb99 	bl	800dedc <__mcmp>
 800d7aa:	462a      	mov	r2, r5
 800d7ac:	9006      	str	r0, [sp, #24]
 800d7ae:	4621      	mov	r1, r4
 800d7b0:	4648      	mov	r0, r9
 800d7b2:	f000 fbaf 	bl	800df14 <__mdiff>
 800d7b6:	68c2      	ldr	r2, [r0, #12]
 800d7b8:	4606      	mov	r6, r0
 800d7ba:	b9fa      	cbnz	r2, 800d7fc <_dtoa_r+0x954>
 800d7bc:	4601      	mov	r1, r0
 800d7be:	9801      	ldr	r0, [sp, #4]
 800d7c0:	f000 fb8c 	bl	800dedc <__mcmp>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	4631      	mov	r1, r6
 800d7c8:	4648      	mov	r0, r9
 800d7ca:	920a      	str	r2, [sp, #40]	@ 0x28
 800d7cc:	f000 f954 	bl	800da78 <_Bfree>
 800d7d0:	9b07      	ldr	r3, [sp, #28]
 800d7d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7d4:	9e04      	ldr	r6, [sp, #16]
 800d7d6:	ea42 0103 	orr.w	r1, r2, r3
 800d7da:	9b08      	ldr	r3, [sp, #32]
 800d7dc:	4319      	orrs	r1, r3
 800d7de:	d10f      	bne.n	800d800 <_dtoa_r+0x958>
 800d7e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d7e4:	d028      	beq.n	800d838 <_dtoa_r+0x990>
 800d7e6:	9b06      	ldr	r3, [sp, #24]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	dd02      	ble.n	800d7f2 <_dtoa_r+0x94a>
 800d7ec:	9b02      	ldr	r3, [sp, #8]
 800d7ee:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d7f2:	f88b a000 	strb.w	sl, [fp]
 800d7f6:	e55e      	b.n	800d2b6 <_dtoa_r+0x40e>
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	e7bd      	b.n	800d778 <_dtoa_r+0x8d0>
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	e7e2      	b.n	800d7c6 <_dtoa_r+0x91e>
 800d800:	9b06      	ldr	r3, [sp, #24]
 800d802:	2b00      	cmp	r3, #0
 800d804:	db04      	blt.n	800d810 <_dtoa_r+0x968>
 800d806:	9907      	ldr	r1, [sp, #28]
 800d808:	430b      	orrs	r3, r1
 800d80a:	9908      	ldr	r1, [sp, #32]
 800d80c:	430b      	orrs	r3, r1
 800d80e:	d120      	bne.n	800d852 <_dtoa_r+0x9aa>
 800d810:	2a00      	cmp	r2, #0
 800d812:	ddee      	ble.n	800d7f2 <_dtoa_r+0x94a>
 800d814:	9901      	ldr	r1, [sp, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	4648      	mov	r0, r9
 800d81a:	f000 faf3 	bl	800de04 <__lshift>
 800d81e:	4621      	mov	r1, r4
 800d820:	9001      	str	r0, [sp, #4]
 800d822:	f000 fb5b 	bl	800dedc <__mcmp>
 800d826:	2800      	cmp	r0, #0
 800d828:	dc03      	bgt.n	800d832 <_dtoa_r+0x98a>
 800d82a:	d1e2      	bne.n	800d7f2 <_dtoa_r+0x94a>
 800d82c:	f01a 0f01 	tst.w	sl, #1
 800d830:	d0df      	beq.n	800d7f2 <_dtoa_r+0x94a>
 800d832:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d836:	d1d9      	bne.n	800d7ec <_dtoa_r+0x944>
 800d838:	2339      	movs	r3, #57	@ 0x39
 800d83a:	f88b 3000 	strb.w	r3, [fp]
 800d83e:	4633      	mov	r3, r6
 800d840:	461e      	mov	r6, r3
 800d842:	3b01      	subs	r3, #1
 800d844:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d848:	2a39      	cmp	r2, #57	@ 0x39
 800d84a:	d052      	beq.n	800d8f2 <_dtoa_r+0xa4a>
 800d84c:	3201      	adds	r2, #1
 800d84e:	701a      	strb	r2, [r3, #0]
 800d850:	e531      	b.n	800d2b6 <_dtoa_r+0x40e>
 800d852:	2a00      	cmp	r2, #0
 800d854:	dd07      	ble.n	800d866 <_dtoa_r+0x9be>
 800d856:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d85a:	d0ed      	beq.n	800d838 <_dtoa_r+0x990>
 800d85c:	f10a 0301 	add.w	r3, sl, #1
 800d860:	f88b 3000 	strb.w	r3, [fp]
 800d864:	e527      	b.n	800d2b6 <_dtoa_r+0x40e>
 800d866:	9b04      	ldr	r3, [sp, #16]
 800d868:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d86a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d86e:	4293      	cmp	r3, r2
 800d870:	d029      	beq.n	800d8c6 <_dtoa_r+0xa1e>
 800d872:	9901      	ldr	r1, [sp, #4]
 800d874:	2300      	movs	r3, #0
 800d876:	220a      	movs	r2, #10
 800d878:	4648      	mov	r0, r9
 800d87a:	f000 f91f 	bl	800dabc <__multadd>
 800d87e:	45a8      	cmp	r8, r5
 800d880:	9001      	str	r0, [sp, #4]
 800d882:	f04f 0300 	mov.w	r3, #0
 800d886:	f04f 020a 	mov.w	r2, #10
 800d88a:	4641      	mov	r1, r8
 800d88c:	4648      	mov	r0, r9
 800d88e:	d107      	bne.n	800d8a0 <_dtoa_r+0x9f8>
 800d890:	f000 f914 	bl	800dabc <__multadd>
 800d894:	4680      	mov	r8, r0
 800d896:	4605      	mov	r5, r0
 800d898:	9b04      	ldr	r3, [sp, #16]
 800d89a:	3301      	adds	r3, #1
 800d89c:	9304      	str	r3, [sp, #16]
 800d89e:	e776      	b.n	800d78e <_dtoa_r+0x8e6>
 800d8a0:	f000 f90c 	bl	800dabc <__multadd>
 800d8a4:	4629      	mov	r1, r5
 800d8a6:	4680      	mov	r8, r0
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	220a      	movs	r2, #10
 800d8ac:	4648      	mov	r0, r9
 800d8ae:	f000 f905 	bl	800dabc <__multadd>
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	e7f0      	b.n	800d898 <_dtoa_r+0x9f0>
 800d8b6:	f1bb 0f00 	cmp.w	fp, #0
 800d8ba:	bfcc      	ite	gt
 800d8bc:	465e      	movgt	r6, fp
 800d8be:	2601      	movle	r6, #1
 800d8c0:	443e      	add	r6, r7
 800d8c2:	f04f 0800 	mov.w	r8, #0
 800d8c6:	9901      	ldr	r1, [sp, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	4648      	mov	r0, r9
 800d8cc:	f000 fa9a 	bl	800de04 <__lshift>
 800d8d0:	4621      	mov	r1, r4
 800d8d2:	9001      	str	r0, [sp, #4]
 800d8d4:	f000 fb02 	bl	800dedc <__mcmp>
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	dcb0      	bgt.n	800d83e <_dtoa_r+0x996>
 800d8dc:	d102      	bne.n	800d8e4 <_dtoa_r+0xa3c>
 800d8de:	f01a 0f01 	tst.w	sl, #1
 800d8e2:	d1ac      	bne.n	800d83e <_dtoa_r+0x996>
 800d8e4:	4633      	mov	r3, r6
 800d8e6:	461e      	mov	r6, r3
 800d8e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8ec:	2a30      	cmp	r2, #48	@ 0x30
 800d8ee:	d0fa      	beq.n	800d8e6 <_dtoa_r+0xa3e>
 800d8f0:	e4e1      	b.n	800d2b6 <_dtoa_r+0x40e>
 800d8f2:	429f      	cmp	r7, r3
 800d8f4:	d1a4      	bne.n	800d840 <_dtoa_r+0x998>
 800d8f6:	9b05      	ldr	r3, [sp, #20]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	9305      	str	r3, [sp, #20]
 800d8fc:	2331      	movs	r3, #49	@ 0x31
 800d8fe:	703b      	strb	r3, [r7, #0]
 800d900:	e4d9      	b.n	800d2b6 <_dtoa_r+0x40e>
 800d902:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d904:	4f16      	ldr	r7, [pc, #88]	@ (800d960 <_dtoa_r+0xab8>)
 800d906:	b11b      	cbz	r3, 800d910 <_dtoa_r+0xa68>
 800d908:	f107 0308 	add.w	r3, r7, #8
 800d90c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d90e:	6013      	str	r3, [r2, #0]
 800d910:	4638      	mov	r0, r7
 800d912:	b011      	add	sp, #68	@ 0x44
 800d914:	ecbd 8b02 	vpop	{d8}
 800d918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91c:	9b07      	ldr	r3, [sp, #28]
 800d91e:	2b01      	cmp	r3, #1
 800d920:	f77f ae2c 	ble.w	800d57c <_dtoa_r+0x6d4>
 800d924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d926:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d928:	2001      	movs	r0, #1
 800d92a:	e64c      	b.n	800d5c6 <_dtoa_r+0x71e>
 800d92c:	f1bb 0f00 	cmp.w	fp, #0
 800d930:	f77f aed8 	ble.w	800d6e4 <_dtoa_r+0x83c>
 800d934:	463e      	mov	r6, r7
 800d936:	9801      	ldr	r0, [sp, #4]
 800d938:	4621      	mov	r1, r4
 800d93a:	f7ff fa2c 	bl	800cd96 <quorem>
 800d93e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d942:	f806 ab01 	strb.w	sl, [r6], #1
 800d946:	1bf2      	subs	r2, r6, r7
 800d948:	4593      	cmp	fp, r2
 800d94a:	ddb4      	ble.n	800d8b6 <_dtoa_r+0xa0e>
 800d94c:	9901      	ldr	r1, [sp, #4]
 800d94e:	2300      	movs	r3, #0
 800d950:	220a      	movs	r2, #10
 800d952:	4648      	mov	r0, r9
 800d954:	f000 f8b2 	bl	800dabc <__multadd>
 800d958:	9001      	str	r0, [sp, #4]
 800d95a:	e7ec      	b.n	800d936 <_dtoa_r+0xa8e>
 800d95c:	08034d14 	.word	0x08034d14
 800d960:	08034c98 	.word	0x08034c98

0800d964 <_free_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4605      	mov	r5, r0
 800d968:	2900      	cmp	r1, #0
 800d96a:	d041      	beq.n	800d9f0 <_free_r+0x8c>
 800d96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d970:	1f0c      	subs	r4, r1, #4
 800d972:	2b00      	cmp	r3, #0
 800d974:	bfb8      	it	lt
 800d976:	18e4      	addlt	r4, r4, r3
 800d978:	f7fe fbf4 	bl	800c164 <__malloc_lock>
 800d97c:	4a1d      	ldr	r2, [pc, #116]	@ (800d9f4 <_free_r+0x90>)
 800d97e:	6813      	ldr	r3, [r2, #0]
 800d980:	b933      	cbnz	r3, 800d990 <_free_r+0x2c>
 800d982:	6063      	str	r3, [r4, #4]
 800d984:	6014      	str	r4, [r2, #0]
 800d986:	4628      	mov	r0, r5
 800d988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d98c:	f7fe bbf0 	b.w	800c170 <__malloc_unlock>
 800d990:	42a3      	cmp	r3, r4
 800d992:	d908      	bls.n	800d9a6 <_free_r+0x42>
 800d994:	6820      	ldr	r0, [r4, #0]
 800d996:	1821      	adds	r1, r4, r0
 800d998:	428b      	cmp	r3, r1
 800d99a:	bf01      	itttt	eq
 800d99c:	6819      	ldreq	r1, [r3, #0]
 800d99e:	685b      	ldreq	r3, [r3, #4]
 800d9a0:	1809      	addeq	r1, r1, r0
 800d9a2:	6021      	streq	r1, [r4, #0]
 800d9a4:	e7ed      	b.n	800d982 <_free_r+0x1e>
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	b10b      	cbz	r3, 800d9b0 <_free_r+0x4c>
 800d9ac:	42a3      	cmp	r3, r4
 800d9ae:	d9fa      	bls.n	800d9a6 <_free_r+0x42>
 800d9b0:	6811      	ldr	r1, [r2, #0]
 800d9b2:	1850      	adds	r0, r2, r1
 800d9b4:	42a0      	cmp	r0, r4
 800d9b6:	d10b      	bne.n	800d9d0 <_free_r+0x6c>
 800d9b8:	6820      	ldr	r0, [r4, #0]
 800d9ba:	4401      	add	r1, r0
 800d9bc:	1850      	adds	r0, r2, r1
 800d9be:	4283      	cmp	r3, r0
 800d9c0:	6011      	str	r1, [r2, #0]
 800d9c2:	d1e0      	bne.n	800d986 <_free_r+0x22>
 800d9c4:	6818      	ldr	r0, [r3, #0]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	6053      	str	r3, [r2, #4]
 800d9ca:	4408      	add	r0, r1
 800d9cc:	6010      	str	r0, [r2, #0]
 800d9ce:	e7da      	b.n	800d986 <_free_r+0x22>
 800d9d0:	d902      	bls.n	800d9d8 <_free_r+0x74>
 800d9d2:	230c      	movs	r3, #12
 800d9d4:	602b      	str	r3, [r5, #0]
 800d9d6:	e7d6      	b.n	800d986 <_free_r+0x22>
 800d9d8:	6820      	ldr	r0, [r4, #0]
 800d9da:	1821      	adds	r1, r4, r0
 800d9dc:	428b      	cmp	r3, r1
 800d9de:	bf04      	itt	eq
 800d9e0:	6819      	ldreq	r1, [r3, #0]
 800d9e2:	685b      	ldreq	r3, [r3, #4]
 800d9e4:	6063      	str	r3, [r4, #4]
 800d9e6:	bf04      	itt	eq
 800d9e8:	1809      	addeq	r1, r1, r0
 800d9ea:	6021      	streq	r1, [r4, #0]
 800d9ec:	6054      	str	r4, [r2, #4]
 800d9ee:	e7ca      	b.n	800d986 <_free_r+0x22>
 800d9f0:	bd38      	pop	{r3, r4, r5, pc}
 800d9f2:	bf00      	nop
 800d9f4:	24001978 	.word	0x24001978

0800d9f8 <_Balloc>:
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	69c6      	ldr	r6, [r0, #28]
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	460d      	mov	r5, r1
 800da00:	b976      	cbnz	r6, 800da20 <_Balloc+0x28>
 800da02:	2010      	movs	r0, #16
 800da04:	f7fe fb04 	bl	800c010 <malloc>
 800da08:	4602      	mov	r2, r0
 800da0a:	61e0      	str	r0, [r4, #28]
 800da0c:	b920      	cbnz	r0, 800da18 <_Balloc+0x20>
 800da0e:	4b18      	ldr	r3, [pc, #96]	@ (800da70 <_Balloc+0x78>)
 800da10:	4818      	ldr	r0, [pc, #96]	@ (800da74 <_Balloc+0x7c>)
 800da12:	216b      	movs	r1, #107	@ 0x6b
 800da14:	f000 ff5e 	bl	800e8d4 <__assert_func>
 800da18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da1c:	6006      	str	r6, [r0, #0]
 800da1e:	60c6      	str	r6, [r0, #12]
 800da20:	69e6      	ldr	r6, [r4, #28]
 800da22:	68f3      	ldr	r3, [r6, #12]
 800da24:	b183      	cbz	r3, 800da48 <_Balloc+0x50>
 800da26:	69e3      	ldr	r3, [r4, #28]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da2e:	b9b8      	cbnz	r0, 800da60 <_Balloc+0x68>
 800da30:	2101      	movs	r1, #1
 800da32:	fa01 f605 	lsl.w	r6, r1, r5
 800da36:	1d72      	adds	r2, r6, #5
 800da38:	0092      	lsls	r2, r2, #2
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 ff68 	bl	800e910 <_calloc_r>
 800da40:	b160      	cbz	r0, 800da5c <_Balloc+0x64>
 800da42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da46:	e00e      	b.n	800da66 <_Balloc+0x6e>
 800da48:	2221      	movs	r2, #33	@ 0x21
 800da4a:	2104      	movs	r1, #4
 800da4c:	4620      	mov	r0, r4
 800da4e:	f000 ff5f 	bl	800e910 <_calloc_r>
 800da52:	69e3      	ldr	r3, [r4, #28]
 800da54:	60f0      	str	r0, [r6, #12]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e4      	bne.n	800da26 <_Balloc+0x2e>
 800da5c:	2000      	movs	r0, #0
 800da5e:	bd70      	pop	{r4, r5, r6, pc}
 800da60:	6802      	ldr	r2, [r0, #0]
 800da62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da66:	2300      	movs	r3, #0
 800da68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da6c:	e7f7      	b.n	800da5e <_Balloc+0x66>
 800da6e:	bf00      	nop
 800da70:	08034ca5 	.word	0x08034ca5
 800da74:	08034d25 	.word	0x08034d25

0800da78 <_Bfree>:
 800da78:	b570      	push	{r4, r5, r6, lr}
 800da7a:	69c6      	ldr	r6, [r0, #28]
 800da7c:	4605      	mov	r5, r0
 800da7e:	460c      	mov	r4, r1
 800da80:	b976      	cbnz	r6, 800daa0 <_Bfree+0x28>
 800da82:	2010      	movs	r0, #16
 800da84:	f7fe fac4 	bl	800c010 <malloc>
 800da88:	4602      	mov	r2, r0
 800da8a:	61e8      	str	r0, [r5, #28]
 800da8c:	b920      	cbnz	r0, 800da98 <_Bfree+0x20>
 800da8e:	4b09      	ldr	r3, [pc, #36]	@ (800dab4 <_Bfree+0x3c>)
 800da90:	4809      	ldr	r0, [pc, #36]	@ (800dab8 <_Bfree+0x40>)
 800da92:	218f      	movs	r1, #143	@ 0x8f
 800da94:	f000 ff1e 	bl	800e8d4 <__assert_func>
 800da98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da9c:	6006      	str	r6, [r0, #0]
 800da9e:	60c6      	str	r6, [r0, #12]
 800daa0:	b13c      	cbz	r4, 800dab2 <_Bfree+0x3a>
 800daa2:	69eb      	ldr	r3, [r5, #28]
 800daa4:	6862      	ldr	r2, [r4, #4]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800daac:	6021      	str	r1, [r4, #0]
 800daae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dab2:	bd70      	pop	{r4, r5, r6, pc}
 800dab4:	08034ca5 	.word	0x08034ca5
 800dab8:	08034d25 	.word	0x08034d25

0800dabc <__multadd>:
 800dabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac0:	690d      	ldr	r5, [r1, #16]
 800dac2:	4607      	mov	r7, r0
 800dac4:	460c      	mov	r4, r1
 800dac6:	461e      	mov	r6, r3
 800dac8:	f101 0c14 	add.w	ip, r1, #20
 800dacc:	2000      	movs	r0, #0
 800dace:	f8dc 3000 	ldr.w	r3, [ip]
 800dad2:	b299      	uxth	r1, r3
 800dad4:	fb02 6101 	mla	r1, r2, r1, r6
 800dad8:	0c1e      	lsrs	r6, r3, #16
 800dada:	0c0b      	lsrs	r3, r1, #16
 800dadc:	fb02 3306 	mla	r3, r2, r6, r3
 800dae0:	b289      	uxth	r1, r1
 800dae2:	3001      	adds	r0, #1
 800dae4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dae8:	4285      	cmp	r5, r0
 800daea:	f84c 1b04 	str.w	r1, [ip], #4
 800daee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800daf2:	dcec      	bgt.n	800dace <__multadd+0x12>
 800daf4:	b30e      	cbz	r6, 800db3a <__multadd+0x7e>
 800daf6:	68a3      	ldr	r3, [r4, #8]
 800daf8:	42ab      	cmp	r3, r5
 800dafa:	dc19      	bgt.n	800db30 <__multadd+0x74>
 800dafc:	6861      	ldr	r1, [r4, #4]
 800dafe:	4638      	mov	r0, r7
 800db00:	3101      	adds	r1, #1
 800db02:	f7ff ff79 	bl	800d9f8 <_Balloc>
 800db06:	4680      	mov	r8, r0
 800db08:	b928      	cbnz	r0, 800db16 <__multadd+0x5a>
 800db0a:	4602      	mov	r2, r0
 800db0c:	4b0c      	ldr	r3, [pc, #48]	@ (800db40 <__multadd+0x84>)
 800db0e:	480d      	ldr	r0, [pc, #52]	@ (800db44 <__multadd+0x88>)
 800db10:	21ba      	movs	r1, #186	@ 0xba
 800db12:	f000 fedf 	bl	800e8d4 <__assert_func>
 800db16:	6922      	ldr	r2, [r4, #16]
 800db18:	3202      	adds	r2, #2
 800db1a:	f104 010c 	add.w	r1, r4, #12
 800db1e:	0092      	lsls	r2, r2, #2
 800db20:	300c      	adds	r0, #12
 800db22:	f7ff f92a 	bl	800cd7a <memcpy>
 800db26:	4621      	mov	r1, r4
 800db28:	4638      	mov	r0, r7
 800db2a:	f7ff ffa5 	bl	800da78 <_Bfree>
 800db2e:	4644      	mov	r4, r8
 800db30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db34:	3501      	adds	r5, #1
 800db36:	615e      	str	r6, [r3, #20]
 800db38:	6125      	str	r5, [r4, #16]
 800db3a:	4620      	mov	r0, r4
 800db3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db40:	08034d14 	.word	0x08034d14
 800db44:	08034d25 	.word	0x08034d25

0800db48 <__hi0bits>:
 800db48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db4c:	4603      	mov	r3, r0
 800db4e:	bf36      	itet	cc
 800db50:	0403      	lslcc	r3, r0, #16
 800db52:	2000      	movcs	r0, #0
 800db54:	2010      	movcc	r0, #16
 800db56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db5a:	bf3c      	itt	cc
 800db5c:	021b      	lslcc	r3, r3, #8
 800db5e:	3008      	addcc	r0, #8
 800db60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db64:	bf3c      	itt	cc
 800db66:	011b      	lslcc	r3, r3, #4
 800db68:	3004      	addcc	r0, #4
 800db6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db6e:	bf3c      	itt	cc
 800db70:	009b      	lslcc	r3, r3, #2
 800db72:	3002      	addcc	r0, #2
 800db74:	2b00      	cmp	r3, #0
 800db76:	db05      	blt.n	800db84 <__hi0bits+0x3c>
 800db78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800db7c:	f100 0001 	add.w	r0, r0, #1
 800db80:	bf08      	it	eq
 800db82:	2020      	moveq	r0, #32
 800db84:	4770      	bx	lr

0800db86 <__lo0bits>:
 800db86:	6803      	ldr	r3, [r0, #0]
 800db88:	4602      	mov	r2, r0
 800db8a:	f013 0007 	ands.w	r0, r3, #7
 800db8e:	d00b      	beq.n	800dba8 <__lo0bits+0x22>
 800db90:	07d9      	lsls	r1, r3, #31
 800db92:	d421      	bmi.n	800dbd8 <__lo0bits+0x52>
 800db94:	0798      	lsls	r0, r3, #30
 800db96:	bf49      	itett	mi
 800db98:	085b      	lsrmi	r3, r3, #1
 800db9a:	089b      	lsrpl	r3, r3, #2
 800db9c:	2001      	movmi	r0, #1
 800db9e:	6013      	strmi	r3, [r2, #0]
 800dba0:	bf5c      	itt	pl
 800dba2:	6013      	strpl	r3, [r2, #0]
 800dba4:	2002      	movpl	r0, #2
 800dba6:	4770      	bx	lr
 800dba8:	b299      	uxth	r1, r3
 800dbaa:	b909      	cbnz	r1, 800dbb0 <__lo0bits+0x2a>
 800dbac:	0c1b      	lsrs	r3, r3, #16
 800dbae:	2010      	movs	r0, #16
 800dbb0:	b2d9      	uxtb	r1, r3
 800dbb2:	b909      	cbnz	r1, 800dbb8 <__lo0bits+0x32>
 800dbb4:	3008      	adds	r0, #8
 800dbb6:	0a1b      	lsrs	r3, r3, #8
 800dbb8:	0719      	lsls	r1, r3, #28
 800dbba:	bf04      	itt	eq
 800dbbc:	091b      	lsreq	r3, r3, #4
 800dbbe:	3004      	addeq	r0, #4
 800dbc0:	0799      	lsls	r1, r3, #30
 800dbc2:	bf04      	itt	eq
 800dbc4:	089b      	lsreq	r3, r3, #2
 800dbc6:	3002      	addeq	r0, #2
 800dbc8:	07d9      	lsls	r1, r3, #31
 800dbca:	d403      	bmi.n	800dbd4 <__lo0bits+0x4e>
 800dbcc:	085b      	lsrs	r3, r3, #1
 800dbce:	f100 0001 	add.w	r0, r0, #1
 800dbd2:	d003      	beq.n	800dbdc <__lo0bits+0x56>
 800dbd4:	6013      	str	r3, [r2, #0]
 800dbd6:	4770      	bx	lr
 800dbd8:	2000      	movs	r0, #0
 800dbda:	4770      	bx	lr
 800dbdc:	2020      	movs	r0, #32
 800dbde:	4770      	bx	lr

0800dbe0 <__i2b>:
 800dbe0:	b510      	push	{r4, lr}
 800dbe2:	460c      	mov	r4, r1
 800dbe4:	2101      	movs	r1, #1
 800dbe6:	f7ff ff07 	bl	800d9f8 <_Balloc>
 800dbea:	4602      	mov	r2, r0
 800dbec:	b928      	cbnz	r0, 800dbfa <__i2b+0x1a>
 800dbee:	4b05      	ldr	r3, [pc, #20]	@ (800dc04 <__i2b+0x24>)
 800dbf0:	4805      	ldr	r0, [pc, #20]	@ (800dc08 <__i2b+0x28>)
 800dbf2:	f240 1145 	movw	r1, #325	@ 0x145
 800dbf6:	f000 fe6d 	bl	800e8d4 <__assert_func>
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	6144      	str	r4, [r0, #20]
 800dbfe:	6103      	str	r3, [r0, #16]
 800dc00:	bd10      	pop	{r4, pc}
 800dc02:	bf00      	nop
 800dc04:	08034d14 	.word	0x08034d14
 800dc08:	08034d25 	.word	0x08034d25

0800dc0c <__multiply>:
 800dc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc10:	4617      	mov	r7, r2
 800dc12:	690a      	ldr	r2, [r1, #16]
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	bfa8      	it	ge
 800dc1a:	463b      	movge	r3, r7
 800dc1c:	4689      	mov	r9, r1
 800dc1e:	bfa4      	itt	ge
 800dc20:	460f      	movge	r7, r1
 800dc22:	4699      	movge	r9, r3
 800dc24:	693d      	ldr	r5, [r7, #16]
 800dc26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	6879      	ldr	r1, [r7, #4]
 800dc2e:	eb05 060a 	add.w	r6, r5, sl
 800dc32:	42b3      	cmp	r3, r6
 800dc34:	b085      	sub	sp, #20
 800dc36:	bfb8      	it	lt
 800dc38:	3101      	addlt	r1, #1
 800dc3a:	f7ff fedd 	bl	800d9f8 <_Balloc>
 800dc3e:	b930      	cbnz	r0, 800dc4e <__multiply+0x42>
 800dc40:	4602      	mov	r2, r0
 800dc42:	4b41      	ldr	r3, [pc, #260]	@ (800dd48 <__multiply+0x13c>)
 800dc44:	4841      	ldr	r0, [pc, #260]	@ (800dd4c <__multiply+0x140>)
 800dc46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc4a:	f000 fe43 	bl	800e8d4 <__assert_func>
 800dc4e:	f100 0414 	add.w	r4, r0, #20
 800dc52:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dc56:	4623      	mov	r3, r4
 800dc58:	2200      	movs	r2, #0
 800dc5a:	4573      	cmp	r3, lr
 800dc5c:	d320      	bcc.n	800dca0 <__multiply+0x94>
 800dc5e:	f107 0814 	add.w	r8, r7, #20
 800dc62:	f109 0114 	add.w	r1, r9, #20
 800dc66:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dc6a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dc6e:	9302      	str	r3, [sp, #8]
 800dc70:	1beb      	subs	r3, r5, r7
 800dc72:	3b15      	subs	r3, #21
 800dc74:	f023 0303 	bic.w	r3, r3, #3
 800dc78:	3304      	adds	r3, #4
 800dc7a:	3715      	adds	r7, #21
 800dc7c:	42bd      	cmp	r5, r7
 800dc7e:	bf38      	it	cc
 800dc80:	2304      	movcc	r3, #4
 800dc82:	9301      	str	r3, [sp, #4]
 800dc84:	9b02      	ldr	r3, [sp, #8]
 800dc86:	9103      	str	r1, [sp, #12]
 800dc88:	428b      	cmp	r3, r1
 800dc8a:	d80c      	bhi.n	800dca6 <__multiply+0x9a>
 800dc8c:	2e00      	cmp	r6, #0
 800dc8e:	dd03      	ble.n	800dc98 <__multiply+0x8c>
 800dc90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d055      	beq.n	800dd44 <__multiply+0x138>
 800dc98:	6106      	str	r6, [r0, #16]
 800dc9a:	b005      	add	sp, #20
 800dc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca0:	f843 2b04 	str.w	r2, [r3], #4
 800dca4:	e7d9      	b.n	800dc5a <__multiply+0x4e>
 800dca6:	f8b1 a000 	ldrh.w	sl, [r1]
 800dcaa:	f1ba 0f00 	cmp.w	sl, #0
 800dcae:	d01f      	beq.n	800dcf0 <__multiply+0xe4>
 800dcb0:	46c4      	mov	ip, r8
 800dcb2:	46a1      	mov	r9, r4
 800dcb4:	2700      	movs	r7, #0
 800dcb6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dcba:	f8d9 3000 	ldr.w	r3, [r9]
 800dcbe:	fa1f fb82 	uxth.w	fp, r2
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	fb0a 330b 	mla	r3, sl, fp, r3
 800dcc8:	443b      	add	r3, r7
 800dcca:	f8d9 7000 	ldr.w	r7, [r9]
 800dcce:	0c12      	lsrs	r2, r2, #16
 800dcd0:	0c3f      	lsrs	r7, r7, #16
 800dcd2:	fb0a 7202 	mla	r2, sl, r2, r7
 800dcd6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dce0:	4565      	cmp	r5, ip
 800dce2:	f849 3b04 	str.w	r3, [r9], #4
 800dce6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800dcea:	d8e4      	bhi.n	800dcb6 <__multiply+0xaa>
 800dcec:	9b01      	ldr	r3, [sp, #4]
 800dcee:	50e7      	str	r7, [r4, r3]
 800dcf0:	9b03      	ldr	r3, [sp, #12]
 800dcf2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dcf6:	3104      	adds	r1, #4
 800dcf8:	f1b9 0f00 	cmp.w	r9, #0
 800dcfc:	d020      	beq.n	800dd40 <__multiply+0x134>
 800dcfe:	6823      	ldr	r3, [r4, #0]
 800dd00:	4647      	mov	r7, r8
 800dd02:	46a4      	mov	ip, r4
 800dd04:	f04f 0a00 	mov.w	sl, #0
 800dd08:	f8b7 b000 	ldrh.w	fp, [r7]
 800dd0c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dd10:	fb09 220b 	mla	r2, r9, fp, r2
 800dd14:	4452      	add	r2, sl
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd1c:	f84c 3b04 	str.w	r3, [ip], #4
 800dd20:	f857 3b04 	ldr.w	r3, [r7], #4
 800dd24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd28:	f8bc 3000 	ldrh.w	r3, [ip]
 800dd2c:	fb09 330a 	mla	r3, r9, sl, r3
 800dd30:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dd34:	42bd      	cmp	r5, r7
 800dd36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd3a:	d8e5      	bhi.n	800dd08 <__multiply+0xfc>
 800dd3c:	9a01      	ldr	r2, [sp, #4]
 800dd3e:	50a3      	str	r3, [r4, r2]
 800dd40:	3404      	adds	r4, #4
 800dd42:	e79f      	b.n	800dc84 <__multiply+0x78>
 800dd44:	3e01      	subs	r6, #1
 800dd46:	e7a1      	b.n	800dc8c <__multiply+0x80>
 800dd48:	08034d14 	.word	0x08034d14
 800dd4c:	08034d25 	.word	0x08034d25

0800dd50 <__pow5mult>:
 800dd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd54:	4615      	mov	r5, r2
 800dd56:	f012 0203 	ands.w	r2, r2, #3
 800dd5a:	4607      	mov	r7, r0
 800dd5c:	460e      	mov	r6, r1
 800dd5e:	d007      	beq.n	800dd70 <__pow5mult+0x20>
 800dd60:	4c25      	ldr	r4, [pc, #148]	@ (800ddf8 <__pow5mult+0xa8>)
 800dd62:	3a01      	subs	r2, #1
 800dd64:	2300      	movs	r3, #0
 800dd66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd6a:	f7ff fea7 	bl	800dabc <__multadd>
 800dd6e:	4606      	mov	r6, r0
 800dd70:	10ad      	asrs	r5, r5, #2
 800dd72:	d03d      	beq.n	800ddf0 <__pow5mult+0xa0>
 800dd74:	69fc      	ldr	r4, [r7, #28]
 800dd76:	b97c      	cbnz	r4, 800dd98 <__pow5mult+0x48>
 800dd78:	2010      	movs	r0, #16
 800dd7a:	f7fe f949 	bl	800c010 <malloc>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	61f8      	str	r0, [r7, #28]
 800dd82:	b928      	cbnz	r0, 800dd90 <__pow5mult+0x40>
 800dd84:	4b1d      	ldr	r3, [pc, #116]	@ (800ddfc <__pow5mult+0xac>)
 800dd86:	481e      	ldr	r0, [pc, #120]	@ (800de00 <__pow5mult+0xb0>)
 800dd88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dd8c:	f000 fda2 	bl	800e8d4 <__assert_func>
 800dd90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd94:	6004      	str	r4, [r0, #0]
 800dd96:	60c4      	str	r4, [r0, #12]
 800dd98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dd9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dda0:	b94c      	cbnz	r4, 800ddb6 <__pow5mult+0x66>
 800dda2:	f240 2171 	movw	r1, #625	@ 0x271
 800dda6:	4638      	mov	r0, r7
 800dda8:	f7ff ff1a 	bl	800dbe0 <__i2b>
 800ddac:	2300      	movs	r3, #0
 800ddae:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	6003      	str	r3, [r0, #0]
 800ddb6:	f04f 0900 	mov.w	r9, #0
 800ddba:	07eb      	lsls	r3, r5, #31
 800ddbc:	d50a      	bpl.n	800ddd4 <__pow5mult+0x84>
 800ddbe:	4631      	mov	r1, r6
 800ddc0:	4622      	mov	r2, r4
 800ddc2:	4638      	mov	r0, r7
 800ddc4:	f7ff ff22 	bl	800dc0c <__multiply>
 800ddc8:	4631      	mov	r1, r6
 800ddca:	4680      	mov	r8, r0
 800ddcc:	4638      	mov	r0, r7
 800ddce:	f7ff fe53 	bl	800da78 <_Bfree>
 800ddd2:	4646      	mov	r6, r8
 800ddd4:	106d      	asrs	r5, r5, #1
 800ddd6:	d00b      	beq.n	800ddf0 <__pow5mult+0xa0>
 800ddd8:	6820      	ldr	r0, [r4, #0]
 800ddda:	b938      	cbnz	r0, 800ddec <__pow5mult+0x9c>
 800dddc:	4622      	mov	r2, r4
 800ddde:	4621      	mov	r1, r4
 800dde0:	4638      	mov	r0, r7
 800dde2:	f7ff ff13 	bl	800dc0c <__multiply>
 800dde6:	6020      	str	r0, [r4, #0]
 800dde8:	f8c0 9000 	str.w	r9, [r0]
 800ddec:	4604      	mov	r4, r0
 800ddee:	e7e4      	b.n	800ddba <__pow5mult+0x6a>
 800ddf0:	4630      	mov	r0, r6
 800ddf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddf6:	bf00      	nop
 800ddf8:	08034dd8 	.word	0x08034dd8
 800ddfc:	08034ca5 	.word	0x08034ca5
 800de00:	08034d25 	.word	0x08034d25

0800de04 <__lshift>:
 800de04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de08:	460c      	mov	r4, r1
 800de0a:	6849      	ldr	r1, [r1, #4]
 800de0c:	6923      	ldr	r3, [r4, #16]
 800de0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de12:	68a3      	ldr	r3, [r4, #8]
 800de14:	4607      	mov	r7, r0
 800de16:	4691      	mov	r9, r2
 800de18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de1c:	f108 0601 	add.w	r6, r8, #1
 800de20:	42b3      	cmp	r3, r6
 800de22:	db0b      	blt.n	800de3c <__lshift+0x38>
 800de24:	4638      	mov	r0, r7
 800de26:	f7ff fde7 	bl	800d9f8 <_Balloc>
 800de2a:	4605      	mov	r5, r0
 800de2c:	b948      	cbnz	r0, 800de42 <__lshift+0x3e>
 800de2e:	4602      	mov	r2, r0
 800de30:	4b28      	ldr	r3, [pc, #160]	@ (800ded4 <__lshift+0xd0>)
 800de32:	4829      	ldr	r0, [pc, #164]	@ (800ded8 <__lshift+0xd4>)
 800de34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de38:	f000 fd4c 	bl	800e8d4 <__assert_func>
 800de3c:	3101      	adds	r1, #1
 800de3e:	005b      	lsls	r3, r3, #1
 800de40:	e7ee      	b.n	800de20 <__lshift+0x1c>
 800de42:	2300      	movs	r3, #0
 800de44:	f100 0114 	add.w	r1, r0, #20
 800de48:	f100 0210 	add.w	r2, r0, #16
 800de4c:	4618      	mov	r0, r3
 800de4e:	4553      	cmp	r3, sl
 800de50:	db33      	blt.n	800deba <__lshift+0xb6>
 800de52:	6920      	ldr	r0, [r4, #16]
 800de54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de58:	f104 0314 	add.w	r3, r4, #20
 800de5c:	f019 091f 	ands.w	r9, r9, #31
 800de60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de68:	d02b      	beq.n	800dec2 <__lshift+0xbe>
 800de6a:	f1c9 0e20 	rsb	lr, r9, #32
 800de6e:	468a      	mov	sl, r1
 800de70:	2200      	movs	r2, #0
 800de72:	6818      	ldr	r0, [r3, #0]
 800de74:	fa00 f009 	lsl.w	r0, r0, r9
 800de78:	4310      	orrs	r0, r2
 800de7a:	f84a 0b04 	str.w	r0, [sl], #4
 800de7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de82:	459c      	cmp	ip, r3
 800de84:	fa22 f20e 	lsr.w	r2, r2, lr
 800de88:	d8f3      	bhi.n	800de72 <__lshift+0x6e>
 800de8a:	ebac 0304 	sub.w	r3, ip, r4
 800de8e:	3b15      	subs	r3, #21
 800de90:	f023 0303 	bic.w	r3, r3, #3
 800de94:	3304      	adds	r3, #4
 800de96:	f104 0015 	add.w	r0, r4, #21
 800de9a:	4560      	cmp	r0, ip
 800de9c:	bf88      	it	hi
 800de9e:	2304      	movhi	r3, #4
 800dea0:	50ca      	str	r2, [r1, r3]
 800dea2:	b10a      	cbz	r2, 800dea8 <__lshift+0xa4>
 800dea4:	f108 0602 	add.w	r6, r8, #2
 800dea8:	3e01      	subs	r6, #1
 800deaa:	4638      	mov	r0, r7
 800deac:	612e      	str	r6, [r5, #16]
 800deae:	4621      	mov	r1, r4
 800deb0:	f7ff fde2 	bl	800da78 <_Bfree>
 800deb4:	4628      	mov	r0, r5
 800deb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deba:	f842 0f04 	str.w	r0, [r2, #4]!
 800debe:	3301      	adds	r3, #1
 800dec0:	e7c5      	b.n	800de4e <__lshift+0x4a>
 800dec2:	3904      	subs	r1, #4
 800dec4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dec8:	f841 2f04 	str.w	r2, [r1, #4]!
 800decc:	459c      	cmp	ip, r3
 800dece:	d8f9      	bhi.n	800dec4 <__lshift+0xc0>
 800ded0:	e7ea      	b.n	800dea8 <__lshift+0xa4>
 800ded2:	bf00      	nop
 800ded4:	08034d14 	.word	0x08034d14
 800ded8:	08034d25 	.word	0x08034d25

0800dedc <__mcmp>:
 800dedc:	690a      	ldr	r2, [r1, #16]
 800dede:	4603      	mov	r3, r0
 800dee0:	6900      	ldr	r0, [r0, #16]
 800dee2:	1a80      	subs	r0, r0, r2
 800dee4:	b530      	push	{r4, r5, lr}
 800dee6:	d10e      	bne.n	800df06 <__mcmp+0x2a>
 800dee8:	3314      	adds	r3, #20
 800deea:	3114      	adds	r1, #20
 800deec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800def0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800def4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800def8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800defc:	4295      	cmp	r5, r2
 800defe:	d003      	beq.n	800df08 <__mcmp+0x2c>
 800df00:	d205      	bcs.n	800df0e <__mcmp+0x32>
 800df02:	f04f 30ff 	mov.w	r0, #4294967295
 800df06:	bd30      	pop	{r4, r5, pc}
 800df08:	42a3      	cmp	r3, r4
 800df0a:	d3f3      	bcc.n	800def4 <__mcmp+0x18>
 800df0c:	e7fb      	b.n	800df06 <__mcmp+0x2a>
 800df0e:	2001      	movs	r0, #1
 800df10:	e7f9      	b.n	800df06 <__mcmp+0x2a>
	...

0800df14 <__mdiff>:
 800df14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	4689      	mov	r9, r1
 800df1a:	4606      	mov	r6, r0
 800df1c:	4611      	mov	r1, r2
 800df1e:	4648      	mov	r0, r9
 800df20:	4614      	mov	r4, r2
 800df22:	f7ff ffdb 	bl	800dedc <__mcmp>
 800df26:	1e05      	subs	r5, r0, #0
 800df28:	d112      	bne.n	800df50 <__mdiff+0x3c>
 800df2a:	4629      	mov	r1, r5
 800df2c:	4630      	mov	r0, r6
 800df2e:	f7ff fd63 	bl	800d9f8 <_Balloc>
 800df32:	4602      	mov	r2, r0
 800df34:	b928      	cbnz	r0, 800df42 <__mdiff+0x2e>
 800df36:	4b3f      	ldr	r3, [pc, #252]	@ (800e034 <__mdiff+0x120>)
 800df38:	f240 2137 	movw	r1, #567	@ 0x237
 800df3c:	483e      	ldr	r0, [pc, #248]	@ (800e038 <__mdiff+0x124>)
 800df3e:	f000 fcc9 	bl	800e8d4 <__assert_func>
 800df42:	2301      	movs	r3, #1
 800df44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df48:	4610      	mov	r0, r2
 800df4a:	b003      	add	sp, #12
 800df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df50:	bfbc      	itt	lt
 800df52:	464b      	movlt	r3, r9
 800df54:	46a1      	movlt	r9, r4
 800df56:	4630      	mov	r0, r6
 800df58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df5c:	bfba      	itte	lt
 800df5e:	461c      	movlt	r4, r3
 800df60:	2501      	movlt	r5, #1
 800df62:	2500      	movge	r5, #0
 800df64:	f7ff fd48 	bl	800d9f8 <_Balloc>
 800df68:	4602      	mov	r2, r0
 800df6a:	b918      	cbnz	r0, 800df74 <__mdiff+0x60>
 800df6c:	4b31      	ldr	r3, [pc, #196]	@ (800e034 <__mdiff+0x120>)
 800df6e:	f240 2145 	movw	r1, #581	@ 0x245
 800df72:	e7e3      	b.n	800df3c <__mdiff+0x28>
 800df74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800df78:	6926      	ldr	r6, [r4, #16]
 800df7a:	60c5      	str	r5, [r0, #12]
 800df7c:	f109 0310 	add.w	r3, r9, #16
 800df80:	f109 0514 	add.w	r5, r9, #20
 800df84:	f104 0e14 	add.w	lr, r4, #20
 800df88:	f100 0b14 	add.w	fp, r0, #20
 800df8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800df90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800df94:	9301      	str	r3, [sp, #4]
 800df96:	46d9      	mov	r9, fp
 800df98:	f04f 0c00 	mov.w	ip, #0
 800df9c:	9b01      	ldr	r3, [sp, #4]
 800df9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dfa2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dfa6:	9301      	str	r3, [sp, #4]
 800dfa8:	fa1f f38a 	uxth.w	r3, sl
 800dfac:	4619      	mov	r1, r3
 800dfae:	b283      	uxth	r3, r0
 800dfb0:	1acb      	subs	r3, r1, r3
 800dfb2:	0c00      	lsrs	r0, r0, #16
 800dfb4:	4463      	add	r3, ip
 800dfb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dfba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dfc4:	4576      	cmp	r6, lr
 800dfc6:	f849 3b04 	str.w	r3, [r9], #4
 800dfca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfce:	d8e5      	bhi.n	800df9c <__mdiff+0x88>
 800dfd0:	1b33      	subs	r3, r6, r4
 800dfd2:	3b15      	subs	r3, #21
 800dfd4:	f023 0303 	bic.w	r3, r3, #3
 800dfd8:	3415      	adds	r4, #21
 800dfda:	3304      	adds	r3, #4
 800dfdc:	42a6      	cmp	r6, r4
 800dfde:	bf38      	it	cc
 800dfe0:	2304      	movcc	r3, #4
 800dfe2:	441d      	add	r5, r3
 800dfe4:	445b      	add	r3, fp
 800dfe6:	461e      	mov	r6, r3
 800dfe8:	462c      	mov	r4, r5
 800dfea:	4544      	cmp	r4, r8
 800dfec:	d30e      	bcc.n	800e00c <__mdiff+0xf8>
 800dfee:	f108 0103 	add.w	r1, r8, #3
 800dff2:	1b49      	subs	r1, r1, r5
 800dff4:	f021 0103 	bic.w	r1, r1, #3
 800dff8:	3d03      	subs	r5, #3
 800dffa:	45a8      	cmp	r8, r5
 800dffc:	bf38      	it	cc
 800dffe:	2100      	movcc	r1, #0
 800e000:	440b      	add	r3, r1
 800e002:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e006:	b191      	cbz	r1, 800e02e <__mdiff+0x11a>
 800e008:	6117      	str	r7, [r2, #16]
 800e00a:	e79d      	b.n	800df48 <__mdiff+0x34>
 800e00c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e010:	46e6      	mov	lr, ip
 800e012:	0c08      	lsrs	r0, r1, #16
 800e014:	fa1c fc81 	uxtah	ip, ip, r1
 800e018:	4471      	add	r1, lr
 800e01a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e01e:	b289      	uxth	r1, r1
 800e020:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e024:	f846 1b04 	str.w	r1, [r6], #4
 800e028:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e02c:	e7dd      	b.n	800dfea <__mdiff+0xd6>
 800e02e:	3f01      	subs	r7, #1
 800e030:	e7e7      	b.n	800e002 <__mdiff+0xee>
 800e032:	bf00      	nop
 800e034:	08034d14 	.word	0x08034d14
 800e038:	08034d25 	.word	0x08034d25

0800e03c <__d2b>:
 800e03c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e040:	460f      	mov	r7, r1
 800e042:	2101      	movs	r1, #1
 800e044:	ec59 8b10 	vmov	r8, r9, d0
 800e048:	4616      	mov	r6, r2
 800e04a:	f7ff fcd5 	bl	800d9f8 <_Balloc>
 800e04e:	4604      	mov	r4, r0
 800e050:	b930      	cbnz	r0, 800e060 <__d2b+0x24>
 800e052:	4602      	mov	r2, r0
 800e054:	4b23      	ldr	r3, [pc, #140]	@ (800e0e4 <__d2b+0xa8>)
 800e056:	4824      	ldr	r0, [pc, #144]	@ (800e0e8 <__d2b+0xac>)
 800e058:	f240 310f 	movw	r1, #783	@ 0x30f
 800e05c:	f000 fc3a 	bl	800e8d4 <__assert_func>
 800e060:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e064:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e068:	b10d      	cbz	r5, 800e06e <__d2b+0x32>
 800e06a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e06e:	9301      	str	r3, [sp, #4]
 800e070:	f1b8 0300 	subs.w	r3, r8, #0
 800e074:	d023      	beq.n	800e0be <__d2b+0x82>
 800e076:	4668      	mov	r0, sp
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	f7ff fd84 	bl	800db86 <__lo0bits>
 800e07e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e082:	b1d0      	cbz	r0, 800e0ba <__d2b+0x7e>
 800e084:	f1c0 0320 	rsb	r3, r0, #32
 800e088:	fa02 f303 	lsl.w	r3, r2, r3
 800e08c:	430b      	orrs	r3, r1
 800e08e:	40c2      	lsrs	r2, r0
 800e090:	6163      	str	r3, [r4, #20]
 800e092:	9201      	str	r2, [sp, #4]
 800e094:	9b01      	ldr	r3, [sp, #4]
 800e096:	61a3      	str	r3, [r4, #24]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	bf0c      	ite	eq
 800e09c:	2201      	moveq	r2, #1
 800e09e:	2202      	movne	r2, #2
 800e0a0:	6122      	str	r2, [r4, #16]
 800e0a2:	b1a5      	cbz	r5, 800e0ce <__d2b+0x92>
 800e0a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e0a8:	4405      	add	r5, r0
 800e0aa:	603d      	str	r5, [r7, #0]
 800e0ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e0b0:	6030      	str	r0, [r6, #0]
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	b003      	add	sp, #12
 800e0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0ba:	6161      	str	r1, [r4, #20]
 800e0bc:	e7ea      	b.n	800e094 <__d2b+0x58>
 800e0be:	a801      	add	r0, sp, #4
 800e0c0:	f7ff fd61 	bl	800db86 <__lo0bits>
 800e0c4:	9b01      	ldr	r3, [sp, #4]
 800e0c6:	6163      	str	r3, [r4, #20]
 800e0c8:	3020      	adds	r0, #32
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	e7e8      	b.n	800e0a0 <__d2b+0x64>
 800e0ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e0d6:	6038      	str	r0, [r7, #0]
 800e0d8:	6918      	ldr	r0, [r3, #16]
 800e0da:	f7ff fd35 	bl	800db48 <__hi0bits>
 800e0de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0e2:	e7e5      	b.n	800e0b0 <__d2b+0x74>
 800e0e4:	08034d14 	.word	0x08034d14
 800e0e8:	08034d25 	.word	0x08034d25

0800e0ec <__ssputs_r>:
 800e0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f0:	688e      	ldr	r6, [r1, #8]
 800e0f2:	461f      	mov	r7, r3
 800e0f4:	42be      	cmp	r6, r7
 800e0f6:	680b      	ldr	r3, [r1, #0]
 800e0f8:	4682      	mov	sl, r0
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	4690      	mov	r8, r2
 800e0fe:	d82d      	bhi.n	800e15c <__ssputs_r+0x70>
 800e100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e104:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e108:	d026      	beq.n	800e158 <__ssputs_r+0x6c>
 800e10a:	6965      	ldr	r5, [r4, #20]
 800e10c:	6909      	ldr	r1, [r1, #16]
 800e10e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e112:	eba3 0901 	sub.w	r9, r3, r1
 800e116:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e11a:	1c7b      	adds	r3, r7, #1
 800e11c:	444b      	add	r3, r9
 800e11e:	106d      	asrs	r5, r5, #1
 800e120:	429d      	cmp	r5, r3
 800e122:	bf38      	it	cc
 800e124:	461d      	movcc	r5, r3
 800e126:	0553      	lsls	r3, r2, #21
 800e128:	d527      	bpl.n	800e17a <__ssputs_r+0x8e>
 800e12a:	4629      	mov	r1, r5
 800e12c:	f7fd ff9a 	bl	800c064 <_malloc_r>
 800e130:	4606      	mov	r6, r0
 800e132:	b360      	cbz	r0, 800e18e <__ssputs_r+0xa2>
 800e134:	6921      	ldr	r1, [r4, #16]
 800e136:	464a      	mov	r2, r9
 800e138:	f7fe fe1f 	bl	800cd7a <memcpy>
 800e13c:	89a3      	ldrh	r3, [r4, #12]
 800e13e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e146:	81a3      	strh	r3, [r4, #12]
 800e148:	6126      	str	r6, [r4, #16]
 800e14a:	6165      	str	r5, [r4, #20]
 800e14c:	444e      	add	r6, r9
 800e14e:	eba5 0509 	sub.w	r5, r5, r9
 800e152:	6026      	str	r6, [r4, #0]
 800e154:	60a5      	str	r5, [r4, #8]
 800e156:	463e      	mov	r6, r7
 800e158:	42be      	cmp	r6, r7
 800e15a:	d900      	bls.n	800e15e <__ssputs_r+0x72>
 800e15c:	463e      	mov	r6, r7
 800e15e:	6820      	ldr	r0, [r4, #0]
 800e160:	4632      	mov	r2, r6
 800e162:	4641      	mov	r1, r8
 800e164:	f000 fb9c 	bl	800e8a0 <memmove>
 800e168:	68a3      	ldr	r3, [r4, #8]
 800e16a:	1b9b      	subs	r3, r3, r6
 800e16c:	60a3      	str	r3, [r4, #8]
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	4433      	add	r3, r6
 800e172:	6023      	str	r3, [r4, #0]
 800e174:	2000      	movs	r0, #0
 800e176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e17a:	462a      	mov	r2, r5
 800e17c:	f000 fbee 	bl	800e95c <_realloc_r>
 800e180:	4606      	mov	r6, r0
 800e182:	2800      	cmp	r0, #0
 800e184:	d1e0      	bne.n	800e148 <__ssputs_r+0x5c>
 800e186:	6921      	ldr	r1, [r4, #16]
 800e188:	4650      	mov	r0, sl
 800e18a:	f7ff fbeb 	bl	800d964 <_free_r>
 800e18e:	230c      	movs	r3, #12
 800e190:	f8ca 3000 	str.w	r3, [sl]
 800e194:	89a3      	ldrh	r3, [r4, #12]
 800e196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e19a:	81a3      	strh	r3, [r4, #12]
 800e19c:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a0:	e7e9      	b.n	800e176 <__ssputs_r+0x8a>
	...

0800e1a4 <_svfiprintf_r>:
 800e1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a8:	4698      	mov	r8, r3
 800e1aa:	898b      	ldrh	r3, [r1, #12]
 800e1ac:	061b      	lsls	r3, r3, #24
 800e1ae:	b09d      	sub	sp, #116	@ 0x74
 800e1b0:	4607      	mov	r7, r0
 800e1b2:	460d      	mov	r5, r1
 800e1b4:	4614      	mov	r4, r2
 800e1b6:	d510      	bpl.n	800e1da <_svfiprintf_r+0x36>
 800e1b8:	690b      	ldr	r3, [r1, #16]
 800e1ba:	b973      	cbnz	r3, 800e1da <_svfiprintf_r+0x36>
 800e1bc:	2140      	movs	r1, #64	@ 0x40
 800e1be:	f7fd ff51 	bl	800c064 <_malloc_r>
 800e1c2:	6028      	str	r0, [r5, #0]
 800e1c4:	6128      	str	r0, [r5, #16]
 800e1c6:	b930      	cbnz	r0, 800e1d6 <_svfiprintf_r+0x32>
 800e1c8:	230c      	movs	r3, #12
 800e1ca:	603b      	str	r3, [r7, #0]
 800e1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d0:	b01d      	add	sp, #116	@ 0x74
 800e1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d6:	2340      	movs	r3, #64	@ 0x40
 800e1d8:	616b      	str	r3, [r5, #20]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1de:	2320      	movs	r3, #32
 800e1e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1e8:	2330      	movs	r3, #48	@ 0x30
 800e1ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e388 <_svfiprintf_r+0x1e4>
 800e1ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1f2:	f04f 0901 	mov.w	r9, #1
 800e1f6:	4623      	mov	r3, r4
 800e1f8:	469a      	mov	sl, r3
 800e1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1fe:	b10a      	cbz	r2, 800e204 <_svfiprintf_r+0x60>
 800e200:	2a25      	cmp	r2, #37	@ 0x25
 800e202:	d1f9      	bne.n	800e1f8 <_svfiprintf_r+0x54>
 800e204:	ebba 0b04 	subs.w	fp, sl, r4
 800e208:	d00b      	beq.n	800e222 <_svfiprintf_r+0x7e>
 800e20a:	465b      	mov	r3, fp
 800e20c:	4622      	mov	r2, r4
 800e20e:	4629      	mov	r1, r5
 800e210:	4638      	mov	r0, r7
 800e212:	f7ff ff6b 	bl	800e0ec <__ssputs_r>
 800e216:	3001      	adds	r0, #1
 800e218:	f000 80a7 	beq.w	800e36a <_svfiprintf_r+0x1c6>
 800e21c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e21e:	445a      	add	r2, fp
 800e220:	9209      	str	r2, [sp, #36]	@ 0x24
 800e222:	f89a 3000 	ldrb.w	r3, [sl]
 800e226:	2b00      	cmp	r3, #0
 800e228:	f000 809f 	beq.w	800e36a <_svfiprintf_r+0x1c6>
 800e22c:	2300      	movs	r3, #0
 800e22e:	f04f 32ff 	mov.w	r2, #4294967295
 800e232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e236:	f10a 0a01 	add.w	sl, sl, #1
 800e23a:	9304      	str	r3, [sp, #16]
 800e23c:	9307      	str	r3, [sp, #28]
 800e23e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e242:	931a      	str	r3, [sp, #104]	@ 0x68
 800e244:	4654      	mov	r4, sl
 800e246:	2205      	movs	r2, #5
 800e248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e24c:	484e      	ldr	r0, [pc, #312]	@ (800e388 <_svfiprintf_r+0x1e4>)
 800e24e:	f7f2 f84f 	bl	80002f0 <memchr>
 800e252:	9a04      	ldr	r2, [sp, #16]
 800e254:	b9d8      	cbnz	r0, 800e28e <_svfiprintf_r+0xea>
 800e256:	06d0      	lsls	r0, r2, #27
 800e258:	bf44      	itt	mi
 800e25a:	2320      	movmi	r3, #32
 800e25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e260:	0711      	lsls	r1, r2, #28
 800e262:	bf44      	itt	mi
 800e264:	232b      	movmi	r3, #43	@ 0x2b
 800e266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e26a:	f89a 3000 	ldrb.w	r3, [sl]
 800e26e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e270:	d015      	beq.n	800e29e <_svfiprintf_r+0xfa>
 800e272:	9a07      	ldr	r2, [sp, #28]
 800e274:	4654      	mov	r4, sl
 800e276:	2000      	movs	r0, #0
 800e278:	f04f 0c0a 	mov.w	ip, #10
 800e27c:	4621      	mov	r1, r4
 800e27e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e282:	3b30      	subs	r3, #48	@ 0x30
 800e284:	2b09      	cmp	r3, #9
 800e286:	d94b      	bls.n	800e320 <_svfiprintf_r+0x17c>
 800e288:	b1b0      	cbz	r0, 800e2b8 <_svfiprintf_r+0x114>
 800e28a:	9207      	str	r2, [sp, #28]
 800e28c:	e014      	b.n	800e2b8 <_svfiprintf_r+0x114>
 800e28e:	eba0 0308 	sub.w	r3, r0, r8
 800e292:	fa09 f303 	lsl.w	r3, r9, r3
 800e296:	4313      	orrs	r3, r2
 800e298:	9304      	str	r3, [sp, #16]
 800e29a:	46a2      	mov	sl, r4
 800e29c:	e7d2      	b.n	800e244 <_svfiprintf_r+0xa0>
 800e29e:	9b03      	ldr	r3, [sp, #12]
 800e2a0:	1d19      	adds	r1, r3, #4
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	9103      	str	r1, [sp, #12]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	bfbb      	ittet	lt
 800e2aa:	425b      	neglt	r3, r3
 800e2ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e2b0:	9307      	strge	r3, [sp, #28]
 800e2b2:	9307      	strlt	r3, [sp, #28]
 800e2b4:	bfb8      	it	lt
 800e2b6:	9204      	strlt	r2, [sp, #16]
 800e2b8:	7823      	ldrb	r3, [r4, #0]
 800e2ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2bc:	d10a      	bne.n	800e2d4 <_svfiprintf_r+0x130>
 800e2be:	7863      	ldrb	r3, [r4, #1]
 800e2c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2c2:	d132      	bne.n	800e32a <_svfiprintf_r+0x186>
 800e2c4:	9b03      	ldr	r3, [sp, #12]
 800e2c6:	1d1a      	adds	r2, r3, #4
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	9203      	str	r2, [sp, #12]
 800e2cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2d0:	3402      	adds	r4, #2
 800e2d2:	9305      	str	r3, [sp, #20]
 800e2d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e398 <_svfiprintf_r+0x1f4>
 800e2d8:	7821      	ldrb	r1, [r4, #0]
 800e2da:	2203      	movs	r2, #3
 800e2dc:	4650      	mov	r0, sl
 800e2de:	f7f2 f807 	bl	80002f0 <memchr>
 800e2e2:	b138      	cbz	r0, 800e2f4 <_svfiprintf_r+0x150>
 800e2e4:	9b04      	ldr	r3, [sp, #16]
 800e2e6:	eba0 000a 	sub.w	r0, r0, sl
 800e2ea:	2240      	movs	r2, #64	@ 0x40
 800e2ec:	4082      	lsls	r2, r0
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	3401      	adds	r4, #1
 800e2f2:	9304      	str	r3, [sp, #16]
 800e2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2f8:	4824      	ldr	r0, [pc, #144]	@ (800e38c <_svfiprintf_r+0x1e8>)
 800e2fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2fe:	2206      	movs	r2, #6
 800e300:	f7f1 fff6 	bl	80002f0 <memchr>
 800e304:	2800      	cmp	r0, #0
 800e306:	d036      	beq.n	800e376 <_svfiprintf_r+0x1d2>
 800e308:	4b21      	ldr	r3, [pc, #132]	@ (800e390 <_svfiprintf_r+0x1ec>)
 800e30a:	bb1b      	cbnz	r3, 800e354 <_svfiprintf_r+0x1b0>
 800e30c:	9b03      	ldr	r3, [sp, #12]
 800e30e:	3307      	adds	r3, #7
 800e310:	f023 0307 	bic.w	r3, r3, #7
 800e314:	3308      	adds	r3, #8
 800e316:	9303      	str	r3, [sp, #12]
 800e318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e31a:	4433      	add	r3, r6
 800e31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e31e:	e76a      	b.n	800e1f6 <_svfiprintf_r+0x52>
 800e320:	fb0c 3202 	mla	r2, ip, r2, r3
 800e324:	460c      	mov	r4, r1
 800e326:	2001      	movs	r0, #1
 800e328:	e7a8      	b.n	800e27c <_svfiprintf_r+0xd8>
 800e32a:	2300      	movs	r3, #0
 800e32c:	3401      	adds	r4, #1
 800e32e:	9305      	str	r3, [sp, #20]
 800e330:	4619      	mov	r1, r3
 800e332:	f04f 0c0a 	mov.w	ip, #10
 800e336:	4620      	mov	r0, r4
 800e338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e33c:	3a30      	subs	r2, #48	@ 0x30
 800e33e:	2a09      	cmp	r2, #9
 800e340:	d903      	bls.n	800e34a <_svfiprintf_r+0x1a6>
 800e342:	2b00      	cmp	r3, #0
 800e344:	d0c6      	beq.n	800e2d4 <_svfiprintf_r+0x130>
 800e346:	9105      	str	r1, [sp, #20]
 800e348:	e7c4      	b.n	800e2d4 <_svfiprintf_r+0x130>
 800e34a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e34e:	4604      	mov	r4, r0
 800e350:	2301      	movs	r3, #1
 800e352:	e7f0      	b.n	800e336 <_svfiprintf_r+0x192>
 800e354:	ab03      	add	r3, sp, #12
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	462a      	mov	r2, r5
 800e35a:	4b0e      	ldr	r3, [pc, #56]	@ (800e394 <_svfiprintf_r+0x1f0>)
 800e35c:	a904      	add	r1, sp, #16
 800e35e:	4638      	mov	r0, r7
 800e360:	f7fd ff9a 	bl	800c298 <_printf_float>
 800e364:	1c42      	adds	r2, r0, #1
 800e366:	4606      	mov	r6, r0
 800e368:	d1d6      	bne.n	800e318 <_svfiprintf_r+0x174>
 800e36a:	89ab      	ldrh	r3, [r5, #12]
 800e36c:	065b      	lsls	r3, r3, #25
 800e36e:	f53f af2d 	bmi.w	800e1cc <_svfiprintf_r+0x28>
 800e372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e374:	e72c      	b.n	800e1d0 <_svfiprintf_r+0x2c>
 800e376:	ab03      	add	r3, sp, #12
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	462a      	mov	r2, r5
 800e37c:	4b05      	ldr	r3, [pc, #20]	@ (800e394 <_svfiprintf_r+0x1f0>)
 800e37e:	a904      	add	r1, sp, #16
 800e380:	4638      	mov	r0, r7
 800e382:	f7fe fa11 	bl	800c7a8 <_printf_i>
 800e386:	e7ed      	b.n	800e364 <_svfiprintf_r+0x1c0>
 800e388:	08034d7e 	.word	0x08034d7e
 800e38c:	08034d88 	.word	0x08034d88
 800e390:	0800c299 	.word	0x0800c299
 800e394:	0800e0ed 	.word	0x0800e0ed
 800e398:	08034d84 	.word	0x08034d84

0800e39c <__sfputc_r>:
 800e39c:	6893      	ldr	r3, [r2, #8]
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	b410      	push	{r4}
 800e3a4:	6093      	str	r3, [r2, #8]
 800e3a6:	da08      	bge.n	800e3ba <__sfputc_r+0x1e>
 800e3a8:	6994      	ldr	r4, [r2, #24]
 800e3aa:	42a3      	cmp	r3, r4
 800e3ac:	db01      	blt.n	800e3b2 <__sfputc_r+0x16>
 800e3ae:	290a      	cmp	r1, #10
 800e3b0:	d103      	bne.n	800e3ba <__sfputc_r+0x1e>
 800e3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3b6:	f000 b9df 	b.w	800e778 <__swbuf_r>
 800e3ba:	6813      	ldr	r3, [r2, #0]
 800e3bc:	1c58      	adds	r0, r3, #1
 800e3be:	6010      	str	r0, [r2, #0]
 800e3c0:	7019      	strb	r1, [r3, #0]
 800e3c2:	4608      	mov	r0, r1
 800e3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3c8:	4770      	bx	lr

0800e3ca <__sfputs_r>:
 800e3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	460f      	mov	r7, r1
 800e3d0:	4614      	mov	r4, r2
 800e3d2:	18d5      	adds	r5, r2, r3
 800e3d4:	42ac      	cmp	r4, r5
 800e3d6:	d101      	bne.n	800e3dc <__sfputs_r+0x12>
 800e3d8:	2000      	movs	r0, #0
 800e3da:	e007      	b.n	800e3ec <__sfputs_r+0x22>
 800e3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3e0:	463a      	mov	r2, r7
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	f7ff ffda 	bl	800e39c <__sfputc_r>
 800e3e8:	1c43      	adds	r3, r0, #1
 800e3ea:	d1f3      	bne.n	800e3d4 <__sfputs_r+0xa>
 800e3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3f0 <_vfiprintf_r>:
 800e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f4:	460d      	mov	r5, r1
 800e3f6:	b09d      	sub	sp, #116	@ 0x74
 800e3f8:	4614      	mov	r4, r2
 800e3fa:	4698      	mov	r8, r3
 800e3fc:	4606      	mov	r6, r0
 800e3fe:	b118      	cbz	r0, 800e408 <_vfiprintf_r+0x18>
 800e400:	6a03      	ldr	r3, [r0, #32]
 800e402:	b90b      	cbnz	r3, 800e408 <_vfiprintf_r+0x18>
 800e404:	f7fe fb7a 	bl	800cafc <__sinit>
 800e408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e40a:	07d9      	lsls	r1, r3, #31
 800e40c:	d405      	bmi.n	800e41a <_vfiprintf_r+0x2a>
 800e40e:	89ab      	ldrh	r3, [r5, #12]
 800e410:	059a      	lsls	r2, r3, #22
 800e412:	d402      	bmi.n	800e41a <_vfiprintf_r+0x2a>
 800e414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e416:	f7fe fcae 	bl	800cd76 <__retarget_lock_acquire_recursive>
 800e41a:	89ab      	ldrh	r3, [r5, #12]
 800e41c:	071b      	lsls	r3, r3, #28
 800e41e:	d501      	bpl.n	800e424 <_vfiprintf_r+0x34>
 800e420:	692b      	ldr	r3, [r5, #16]
 800e422:	b99b      	cbnz	r3, 800e44c <_vfiprintf_r+0x5c>
 800e424:	4629      	mov	r1, r5
 800e426:	4630      	mov	r0, r6
 800e428:	f000 f9e4 	bl	800e7f4 <__swsetup_r>
 800e42c:	b170      	cbz	r0, 800e44c <_vfiprintf_r+0x5c>
 800e42e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e430:	07dc      	lsls	r4, r3, #31
 800e432:	d504      	bpl.n	800e43e <_vfiprintf_r+0x4e>
 800e434:	f04f 30ff 	mov.w	r0, #4294967295
 800e438:	b01d      	add	sp, #116	@ 0x74
 800e43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e43e:	89ab      	ldrh	r3, [r5, #12]
 800e440:	0598      	lsls	r0, r3, #22
 800e442:	d4f7      	bmi.n	800e434 <_vfiprintf_r+0x44>
 800e444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e446:	f7fe fc97 	bl	800cd78 <__retarget_lock_release_recursive>
 800e44a:	e7f3      	b.n	800e434 <_vfiprintf_r+0x44>
 800e44c:	2300      	movs	r3, #0
 800e44e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e450:	2320      	movs	r3, #32
 800e452:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e456:	f8cd 800c 	str.w	r8, [sp, #12]
 800e45a:	2330      	movs	r3, #48	@ 0x30
 800e45c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e60c <_vfiprintf_r+0x21c>
 800e460:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e464:	f04f 0901 	mov.w	r9, #1
 800e468:	4623      	mov	r3, r4
 800e46a:	469a      	mov	sl, r3
 800e46c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e470:	b10a      	cbz	r2, 800e476 <_vfiprintf_r+0x86>
 800e472:	2a25      	cmp	r2, #37	@ 0x25
 800e474:	d1f9      	bne.n	800e46a <_vfiprintf_r+0x7a>
 800e476:	ebba 0b04 	subs.w	fp, sl, r4
 800e47a:	d00b      	beq.n	800e494 <_vfiprintf_r+0xa4>
 800e47c:	465b      	mov	r3, fp
 800e47e:	4622      	mov	r2, r4
 800e480:	4629      	mov	r1, r5
 800e482:	4630      	mov	r0, r6
 800e484:	f7ff ffa1 	bl	800e3ca <__sfputs_r>
 800e488:	3001      	adds	r0, #1
 800e48a:	f000 80a7 	beq.w	800e5dc <_vfiprintf_r+0x1ec>
 800e48e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e490:	445a      	add	r2, fp
 800e492:	9209      	str	r2, [sp, #36]	@ 0x24
 800e494:	f89a 3000 	ldrb.w	r3, [sl]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 809f 	beq.w	800e5dc <_vfiprintf_r+0x1ec>
 800e49e:	2300      	movs	r3, #0
 800e4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e4a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4a8:	f10a 0a01 	add.w	sl, sl, #1
 800e4ac:	9304      	str	r3, [sp, #16]
 800e4ae:	9307      	str	r3, [sp, #28]
 800e4b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4b6:	4654      	mov	r4, sl
 800e4b8:	2205      	movs	r2, #5
 800e4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4be:	4853      	ldr	r0, [pc, #332]	@ (800e60c <_vfiprintf_r+0x21c>)
 800e4c0:	f7f1 ff16 	bl	80002f0 <memchr>
 800e4c4:	9a04      	ldr	r2, [sp, #16]
 800e4c6:	b9d8      	cbnz	r0, 800e500 <_vfiprintf_r+0x110>
 800e4c8:	06d1      	lsls	r1, r2, #27
 800e4ca:	bf44      	itt	mi
 800e4cc:	2320      	movmi	r3, #32
 800e4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4d2:	0713      	lsls	r3, r2, #28
 800e4d4:	bf44      	itt	mi
 800e4d6:	232b      	movmi	r3, #43	@ 0x2b
 800e4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4e2:	d015      	beq.n	800e510 <_vfiprintf_r+0x120>
 800e4e4:	9a07      	ldr	r2, [sp, #28]
 800e4e6:	4654      	mov	r4, sl
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	f04f 0c0a 	mov.w	ip, #10
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4f4:	3b30      	subs	r3, #48	@ 0x30
 800e4f6:	2b09      	cmp	r3, #9
 800e4f8:	d94b      	bls.n	800e592 <_vfiprintf_r+0x1a2>
 800e4fa:	b1b0      	cbz	r0, 800e52a <_vfiprintf_r+0x13a>
 800e4fc:	9207      	str	r2, [sp, #28]
 800e4fe:	e014      	b.n	800e52a <_vfiprintf_r+0x13a>
 800e500:	eba0 0308 	sub.w	r3, r0, r8
 800e504:	fa09 f303 	lsl.w	r3, r9, r3
 800e508:	4313      	orrs	r3, r2
 800e50a:	9304      	str	r3, [sp, #16]
 800e50c:	46a2      	mov	sl, r4
 800e50e:	e7d2      	b.n	800e4b6 <_vfiprintf_r+0xc6>
 800e510:	9b03      	ldr	r3, [sp, #12]
 800e512:	1d19      	adds	r1, r3, #4
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	9103      	str	r1, [sp, #12]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	bfbb      	ittet	lt
 800e51c:	425b      	neglt	r3, r3
 800e51e:	f042 0202 	orrlt.w	r2, r2, #2
 800e522:	9307      	strge	r3, [sp, #28]
 800e524:	9307      	strlt	r3, [sp, #28]
 800e526:	bfb8      	it	lt
 800e528:	9204      	strlt	r2, [sp, #16]
 800e52a:	7823      	ldrb	r3, [r4, #0]
 800e52c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e52e:	d10a      	bne.n	800e546 <_vfiprintf_r+0x156>
 800e530:	7863      	ldrb	r3, [r4, #1]
 800e532:	2b2a      	cmp	r3, #42	@ 0x2a
 800e534:	d132      	bne.n	800e59c <_vfiprintf_r+0x1ac>
 800e536:	9b03      	ldr	r3, [sp, #12]
 800e538:	1d1a      	adds	r2, r3, #4
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	9203      	str	r2, [sp, #12]
 800e53e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e542:	3402      	adds	r4, #2
 800e544:	9305      	str	r3, [sp, #20]
 800e546:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e61c <_vfiprintf_r+0x22c>
 800e54a:	7821      	ldrb	r1, [r4, #0]
 800e54c:	2203      	movs	r2, #3
 800e54e:	4650      	mov	r0, sl
 800e550:	f7f1 fece 	bl	80002f0 <memchr>
 800e554:	b138      	cbz	r0, 800e566 <_vfiprintf_r+0x176>
 800e556:	9b04      	ldr	r3, [sp, #16]
 800e558:	eba0 000a 	sub.w	r0, r0, sl
 800e55c:	2240      	movs	r2, #64	@ 0x40
 800e55e:	4082      	lsls	r2, r0
 800e560:	4313      	orrs	r3, r2
 800e562:	3401      	adds	r4, #1
 800e564:	9304      	str	r3, [sp, #16]
 800e566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e56a:	4829      	ldr	r0, [pc, #164]	@ (800e610 <_vfiprintf_r+0x220>)
 800e56c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e570:	2206      	movs	r2, #6
 800e572:	f7f1 febd 	bl	80002f0 <memchr>
 800e576:	2800      	cmp	r0, #0
 800e578:	d03f      	beq.n	800e5fa <_vfiprintf_r+0x20a>
 800e57a:	4b26      	ldr	r3, [pc, #152]	@ (800e614 <_vfiprintf_r+0x224>)
 800e57c:	bb1b      	cbnz	r3, 800e5c6 <_vfiprintf_r+0x1d6>
 800e57e:	9b03      	ldr	r3, [sp, #12]
 800e580:	3307      	adds	r3, #7
 800e582:	f023 0307 	bic.w	r3, r3, #7
 800e586:	3308      	adds	r3, #8
 800e588:	9303      	str	r3, [sp, #12]
 800e58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e58c:	443b      	add	r3, r7
 800e58e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e590:	e76a      	b.n	800e468 <_vfiprintf_r+0x78>
 800e592:	fb0c 3202 	mla	r2, ip, r2, r3
 800e596:	460c      	mov	r4, r1
 800e598:	2001      	movs	r0, #1
 800e59a:	e7a8      	b.n	800e4ee <_vfiprintf_r+0xfe>
 800e59c:	2300      	movs	r3, #0
 800e59e:	3401      	adds	r4, #1
 800e5a0:	9305      	str	r3, [sp, #20]
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	f04f 0c0a 	mov.w	ip, #10
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5ae:	3a30      	subs	r2, #48	@ 0x30
 800e5b0:	2a09      	cmp	r2, #9
 800e5b2:	d903      	bls.n	800e5bc <_vfiprintf_r+0x1cc>
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d0c6      	beq.n	800e546 <_vfiprintf_r+0x156>
 800e5b8:	9105      	str	r1, [sp, #20]
 800e5ba:	e7c4      	b.n	800e546 <_vfiprintf_r+0x156>
 800e5bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e7f0      	b.n	800e5a8 <_vfiprintf_r+0x1b8>
 800e5c6:	ab03      	add	r3, sp, #12
 800e5c8:	9300      	str	r3, [sp, #0]
 800e5ca:	462a      	mov	r2, r5
 800e5cc:	4b12      	ldr	r3, [pc, #72]	@ (800e618 <_vfiprintf_r+0x228>)
 800e5ce:	a904      	add	r1, sp, #16
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	f7fd fe61 	bl	800c298 <_printf_float>
 800e5d6:	4607      	mov	r7, r0
 800e5d8:	1c78      	adds	r0, r7, #1
 800e5da:	d1d6      	bne.n	800e58a <_vfiprintf_r+0x19a>
 800e5dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5de:	07d9      	lsls	r1, r3, #31
 800e5e0:	d405      	bmi.n	800e5ee <_vfiprintf_r+0x1fe>
 800e5e2:	89ab      	ldrh	r3, [r5, #12]
 800e5e4:	059a      	lsls	r2, r3, #22
 800e5e6:	d402      	bmi.n	800e5ee <_vfiprintf_r+0x1fe>
 800e5e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5ea:	f7fe fbc5 	bl	800cd78 <__retarget_lock_release_recursive>
 800e5ee:	89ab      	ldrh	r3, [r5, #12]
 800e5f0:	065b      	lsls	r3, r3, #25
 800e5f2:	f53f af1f 	bmi.w	800e434 <_vfiprintf_r+0x44>
 800e5f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5f8:	e71e      	b.n	800e438 <_vfiprintf_r+0x48>
 800e5fa:	ab03      	add	r3, sp, #12
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	462a      	mov	r2, r5
 800e600:	4b05      	ldr	r3, [pc, #20]	@ (800e618 <_vfiprintf_r+0x228>)
 800e602:	a904      	add	r1, sp, #16
 800e604:	4630      	mov	r0, r6
 800e606:	f7fe f8cf 	bl	800c7a8 <_printf_i>
 800e60a:	e7e4      	b.n	800e5d6 <_vfiprintf_r+0x1e6>
 800e60c:	08034d7e 	.word	0x08034d7e
 800e610:	08034d88 	.word	0x08034d88
 800e614:	0800c299 	.word	0x0800c299
 800e618:	0800e3cb 	.word	0x0800e3cb
 800e61c:	08034d84 	.word	0x08034d84

0800e620 <__sflush_r>:
 800e620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e628:	0716      	lsls	r6, r2, #28
 800e62a:	4605      	mov	r5, r0
 800e62c:	460c      	mov	r4, r1
 800e62e:	d454      	bmi.n	800e6da <__sflush_r+0xba>
 800e630:	684b      	ldr	r3, [r1, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	dc02      	bgt.n	800e63c <__sflush_r+0x1c>
 800e636:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e638:	2b00      	cmp	r3, #0
 800e63a:	dd48      	ble.n	800e6ce <__sflush_r+0xae>
 800e63c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e63e:	2e00      	cmp	r6, #0
 800e640:	d045      	beq.n	800e6ce <__sflush_r+0xae>
 800e642:	2300      	movs	r3, #0
 800e644:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e648:	682f      	ldr	r7, [r5, #0]
 800e64a:	6a21      	ldr	r1, [r4, #32]
 800e64c:	602b      	str	r3, [r5, #0]
 800e64e:	d030      	beq.n	800e6b2 <__sflush_r+0x92>
 800e650:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e652:	89a3      	ldrh	r3, [r4, #12]
 800e654:	0759      	lsls	r1, r3, #29
 800e656:	d505      	bpl.n	800e664 <__sflush_r+0x44>
 800e658:	6863      	ldr	r3, [r4, #4]
 800e65a:	1ad2      	subs	r2, r2, r3
 800e65c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e65e:	b10b      	cbz	r3, 800e664 <__sflush_r+0x44>
 800e660:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e662:	1ad2      	subs	r2, r2, r3
 800e664:	2300      	movs	r3, #0
 800e666:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e668:	6a21      	ldr	r1, [r4, #32]
 800e66a:	4628      	mov	r0, r5
 800e66c:	47b0      	blx	r6
 800e66e:	1c43      	adds	r3, r0, #1
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	d106      	bne.n	800e682 <__sflush_r+0x62>
 800e674:	6829      	ldr	r1, [r5, #0]
 800e676:	291d      	cmp	r1, #29
 800e678:	d82b      	bhi.n	800e6d2 <__sflush_r+0xb2>
 800e67a:	4a2a      	ldr	r2, [pc, #168]	@ (800e724 <__sflush_r+0x104>)
 800e67c:	40ca      	lsrs	r2, r1
 800e67e:	07d6      	lsls	r6, r2, #31
 800e680:	d527      	bpl.n	800e6d2 <__sflush_r+0xb2>
 800e682:	2200      	movs	r2, #0
 800e684:	6062      	str	r2, [r4, #4]
 800e686:	04d9      	lsls	r1, r3, #19
 800e688:	6922      	ldr	r2, [r4, #16]
 800e68a:	6022      	str	r2, [r4, #0]
 800e68c:	d504      	bpl.n	800e698 <__sflush_r+0x78>
 800e68e:	1c42      	adds	r2, r0, #1
 800e690:	d101      	bne.n	800e696 <__sflush_r+0x76>
 800e692:	682b      	ldr	r3, [r5, #0]
 800e694:	b903      	cbnz	r3, 800e698 <__sflush_r+0x78>
 800e696:	6560      	str	r0, [r4, #84]	@ 0x54
 800e698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e69a:	602f      	str	r7, [r5, #0]
 800e69c:	b1b9      	cbz	r1, 800e6ce <__sflush_r+0xae>
 800e69e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6a2:	4299      	cmp	r1, r3
 800e6a4:	d002      	beq.n	800e6ac <__sflush_r+0x8c>
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	f7ff f95c 	bl	800d964 <_free_r>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6b0:	e00d      	b.n	800e6ce <__sflush_r+0xae>
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	47b0      	blx	r6
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	1c50      	adds	r0, r2, #1
 800e6bc:	d1c9      	bne.n	800e652 <__sflush_r+0x32>
 800e6be:	682b      	ldr	r3, [r5, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d0c6      	beq.n	800e652 <__sflush_r+0x32>
 800e6c4:	2b1d      	cmp	r3, #29
 800e6c6:	d001      	beq.n	800e6cc <__sflush_r+0xac>
 800e6c8:	2b16      	cmp	r3, #22
 800e6ca:	d11e      	bne.n	800e70a <__sflush_r+0xea>
 800e6cc:	602f      	str	r7, [r5, #0]
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	e022      	b.n	800e718 <__sflush_r+0xf8>
 800e6d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6d6:	b21b      	sxth	r3, r3
 800e6d8:	e01b      	b.n	800e712 <__sflush_r+0xf2>
 800e6da:	690f      	ldr	r7, [r1, #16]
 800e6dc:	2f00      	cmp	r7, #0
 800e6de:	d0f6      	beq.n	800e6ce <__sflush_r+0xae>
 800e6e0:	0793      	lsls	r3, r2, #30
 800e6e2:	680e      	ldr	r6, [r1, #0]
 800e6e4:	bf08      	it	eq
 800e6e6:	694b      	ldreq	r3, [r1, #20]
 800e6e8:	600f      	str	r7, [r1, #0]
 800e6ea:	bf18      	it	ne
 800e6ec:	2300      	movne	r3, #0
 800e6ee:	eba6 0807 	sub.w	r8, r6, r7
 800e6f2:	608b      	str	r3, [r1, #8]
 800e6f4:	f1b8 0f00 	cmp.w	r8, #0
 800e6f8:	dde9      	ble.n	800e6ce <__sflush_r+0xae>
 800e6fa:	6a21      	ldr	r1, [r4, #32]
 800e6fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6fe:	4643      	mov	r3, r8
 800e700:	463a      	mov	r2, r7
 800e702:	4628      	mov	r0, r5
 800e704:	47b0      	blx	r6
 800e706:	2800      	cmp	r0, #0
 800e708:	dc08      	bgt.n	800e71c <__sflush_r+0xfc>
 800e70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e70e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e712:	81a3      	strh	r3, [r4, #12]
 800e714:	f04f 30ff 	mov.w	r0, #4294967295
 800e718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e71c:	4407      	add	r7, r0
 800e71e:	eba8 0800 	sub.w	r8, r8, r0
 800e722:	e7e7      	b.n	800e6f4 <__sflush_r+0xd4>
 800e724:	20400001 	.word	0x20400001

0800e728 <_fflush_r>:
 800e728:	b538      	push	{r3, r4, r5, lr}
 800e72a:	690b      	ldr	r3, [r1, #16]
 800e72c:	4605      	mov	r5, r0
 800e72e:	460c      	mov	r4, r1
 800e730:	b913      	cbnz	r3, 800e738 <_fflush_r+0x10>
 800e732:	2500      	movs	r5, #0
 800e734:	4628      	mov	r0, r5
 800e736:	bd38      	pop	{r3, r4, r5, pc}
 800e738:	b118      	cbz	r0, 800e742 <_fflush_r+0x1a>
 800e73a:	6a03      	ldr	r3, [r0, #32]
 800e73c:	b90b      	cbnz	r3, 800e742 <_fflush_r+0x1a>
 800e73e:	f7fe f9dd 	bl	800cafc <__sinit>
 800e742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0f3      	beq.n	800e732 <_fflush_r+0xa>
 800e74a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e74c:	07d0      	lsls	r0, r2, #31
 800e74e:	d404      	bmi.n	800e75a <_fflush_r+0x32>
 800e750:	0599      	lsls	r1, r3, #22
 800e752:	d402      	bmi.n	800e75a <_fflush_r+0x32>
 800e754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e756:	f7fe fb0e 	bl	800cd76 <__retarget_lock_acquire_recursive>
 800e75a:	4628      	mov	r0, r5
 800e75c:	4621      	mov	r1, r4
 800e75e:	f7ff ff5f 	bl	800e620 <__sflush_r>
 800e762:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e764:	07da      	lsls	r2, r3, #31
 800e766:	4605      	mov	r5, r0
 800e768:	d4e4      	bmi.n	800e734 <_fflush_r+0xc>
 800e76a:	89a3      	ldrh	r3, [r4, #12]
 800e76c:	059b      	lsls	r3, r3, #22
 800e76e:	d4e1      	bmi.n	800e734 <_fflush_r+0xc>
 800e770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e772:	f7fe fb01 	bl	800cd78 <__retarget_lock_release_recursive>
 800e776:	e7dd      	b.n	800e734 <_fflush_r+0xc>

0800e778 <__swbuf_r>:
 800e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77a:	460e      	mov	r6, r1
 800e77c:	4614      	mov	r4, r2
 800e77e:	4605      	mov	r5, r0
 800e780:	b118      	cbz	r0, 800e78a <__swbuf_r+0x12>
 800e782:	6a03      	ldr	r3, [r0, #32]
 800e784:	b90b      	cbnz	r3, 800e78a <__swbuf_r+0x12>
 800e786:	f7fe f9b9 	bl	800cafc <__sinit>
 800e78a:	69a3      	ldr	r3, [r4, #24]
 800e78c:	60a3      	str	r3, [r4, #8]
 800e78e:	89a3      	ldrh	r3, [r4, #12]
 800e790:	071a      	lsls	r2, r3, #28
 800e792:	d501      	bpl.n	800e798 <__swbuf_r+0x20>
 800e794:	6923      	ldr	r3, [r4, #16]
 800e796:	b943      	cbnz	r3, 800e7aa <__swbuf_r+0x32>
 800e798:	4621      	mov	r1, r4
 800e79a:	4628      	mov	r0, r5
 800e79c:	f000 f82a 	bl	800e7f4 <__swsetup_r>
 800e7a0:	b118      	cbz	r0, 800e7aa <__swbuf_r+0x32>
 800e7a2:	f04f 37ff 	mov.w	r7, #4294967295
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	6922      	ldr	r2, [r4, #16]
 800e7ae:	1a98      	subs	r0, r3, r2
 800e7b0:	6963      	ldr	r3, [r4, #20]
 800e7b2:	b2f6      	uxtb	r6, r6
 800e7b4:	4283      	cmp	r3, r0
 800e7b6:	4637      	mov	r7, r6
 800e7b8:	dc05      	bgt.n	800e7c6 <__swbuf_r+0x4e>
 800e7ba:	4621      	mov	r1, r4
 800e7bc:	4628      	mov	r0, r5
 800e7be:	f7ff ffb3 	bl	800e728 <_fflush_r>
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	d1ed      	bne.n	800e7a2 <__swbuf_r+0x2a>
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	60a3      	str	r3, [r4, #8]
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	1c5a      	adds	r2, r3, #1
 800e7d0:	6022      	str	r2, [r4, #0]
 800e7d2:	701e      	strb	r6, [r3, #0]
 800e7d4:	6962      	ldr	r2, [r4, #20]
 800e7d6:	1c43      	adds	r3, r0, #1
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d004      	beq.n	800e7e6 <__swbuf_r+0x6e>
 800e7dc:	89a3      	ldrh	r3, [r4, #12]
 800e7de:	07db      	lsls	r3, r3, #31
 800e7e0:	d5e1      	bpl.n	800e7a6 <__swbuf_r+0x2e>
 800e7e2:	2e0a      	cmp	r6, #10
 800e7e4:	d1df      	bne.n	800e7a6 <__swbuf_r+0x2e>
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f7ff ff9d 	bl	800e728 <_fflush_r>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d0d9      	beq.n	800e7a6 <__swbuf_r+0x2e>
 800e7f2:	e7d6      	b.n	800e7a2 <__swbuf_r+0x2a>

0800e7f4 <__swsetup_r>:
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4b29      	ldr	r3, [pc, #164]	@ (800e89c <__swsetup_r+0xa8>)
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	6818      	ldr	r0, [r3, #0]
 800e7fc:	460c      	mov	r4, r1
 800e7fe:	b118      	cbz	r0, 800e808 <__swsetup_r+0x14>
 800e800:	6a03      	ldr	r3, [r0, #32]
 800e802:	b90b      	cbnz	r3, 800e808 <__swsetup_r+0x14>
 800e804:	f7fe f97a 	bl	800cafc <__sinit>
 800e808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e80c:	0719      	lsls	r1, r3, #28
 800e80e:	d422      	bmi.n	800e856 <__swsetup_r+0x62>
 800e810:	06da      	lsls	r2, r3, #27
 800e812:	d407      	bmi.n	800e824 <__swsetup_r+0x30>
 800e814:	2209      	movs	r2, #9
 800e816:	602a      	str	r2, [r5, #0]
 800e818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e81c:	81a3      	strh	r3, [r4, #12]
 800e81e:	f04f 30ff 	mov.w	r0, #4294967295
 800e822:	e033      	b.n	800e88c <__swsetup_r+0x98>
 800e824:	0758      	lsls	r0, r3, #29
 800e826:	d512      	bpl.n	800e84e <__swsetup_r+0x5a>
 800e828:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e82a:	b141      	cbz	r1, 800e83e <__swsetup_r+0x4a>
 800e82c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e830:	4299      	cmp	r1, r3
 800e832:	d002      	beq.n	800e83a <__swsetup_r+0x46>
 800e834:	4628      	mov	r0, r5
 800e836:	f7ff f895 	bl	800d964 <_free_r>
 800e83a:	2300      	movs	r3, #0
 800e83c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e83e:	89a3      	ldrh	r3, [r4, #12]
 800e840:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e844:	81a3      	strh	r3, [r4, #12]
 800e846:	2300      	movs	r3, #0
 800e848:	6063      	str	r3, [r4, #4]
 800e84a:	6923      	ldr	r3, [r4, #16]
 800e84c:	6023      	str	r3, [r4, #0]
 800e84e:	89a3      	ldrh	r3, [r4, #12]
 800e850:	f043 0308 	orr.w	r3, r3, #8
 800e854:	81a3      	strh	r3, [r4, #12]
 800e856:	6923      	ldr	r3, [r4, #16]
 800e858:	b94b      	cbnz	r3, 800e86e <__swsetup_r+0x7a>
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e864:	d003      	beq.n	800e86e <__swsetup_r+0x7a>
 800e866:	4621      	mov	r1, r4
 800e868:	4628      	mov	r0, r5
 800e86a:	f000 f8eb 	bl	800ea44 <__smakebuf_r>
 800e86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e872:	f013 0201 	ands.w	r2, r3, #1
 800e876:	d00a      	beq.n	800e88e <__swsetup_r+0x9a>
 800e878:	2200      	movs	r2, #0
 800e87a:	60a2      	str	r2, [r4, #8]
 800e87c:	6962      	ldr	r2, [r4, #20]
 800e87e:	4252      	negs	r2, r2
 800e880:	61a2      	str	r2, [r4, #24]
 800e882:	6922      	ldr	r2, [r4, #16]
 800e884:	b942      	cbnz	r2, 800e898 <__swsetup_r+0xa4>
 800e886:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e88a:	d1c5      	bne.n	800e818 <__swsetup_r+0x24>
 800e88c:	bd38      	pop	{r3, r4, r5, pc}
 800e88e:	0799      	lsls	r1, r3, #30
 800e890:	bf58      	it	pl
 800e892:	6962      	ldrpl	r2, [r4, #20]
 800e894:	60a2      	str	r2, [r4, #8]
 800e896:	e7f4      	b.n	800e882 <__swsetup_r+0x8e>
 800e898:	2000      	movs	r0, #0
 800e89a:	e7f7      	b.n	800e88c <__swsetup_r+0x98>
 800e89c:	240000ac 	.word	0x240000ac

0800e8a0 <memmove>:
 800e8a0:	4288      	cmp	r0, r1
 800e8a2:	b510      	push	{r4, lr}
 800e8a4:	eb01 0402 	add.w	r4, r1, r2
 800e8a8:	d902      	bls.n	800e8b0 <memmove+0x10>
 800e8aa:	4284      	cmp	r4, r0
 800e8ac:	4623      	mov	r3, r4
 800e8ae:	d807      	bhi.n	800e8c0 <memmove+0x20>
 800e8b0:	1e43      	subs	r3, r0, #1
 800e8b2:	42a1      	cmp	r1, r4
 800e8b4:	d008      	beq.n	800e8c8 <memmove+0x28>
 800e8b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8be:	e7f8      	b.n	800e8b2 <memmove+0x12>
 800e8c0:	4402      	add	r2, r0
 800e8c2:	4601      	mov	r1, r0
 800e8c4:	428a      	cmp	r2, r1
 800e8c6:	d100      	bne.n	800e8ca <memmove+0x2a>
 800e8c8:	bd10      	pop	{r4, pc}
 800e8ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8d2:	e7f7      	b.n	800e8c4 <memmove+0x24>

0800e8d4 <__assert_func>:
 800e8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8d6:	4614      	mov	r4, r2
 800e8d8:	461a      	mov	r2, r3
 800e8da:	4b09      	ldr	r3, [pc, #36]	@ (800e900 <__assert_func+0x2c>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4605      	mov	r5, r0
 800e8e0:	68d8      	ldr	r0, [r3, #12]
 800e8e2:	b14c      	cbz	r4, 800e8f8 <__assert_func+0x24>
 800e8e4:	4b07      	ldr	r3, [pc, #28]	@ (800e904 <__assert_func+0x30>)
 800e8e6:	9100      	str	r1, [sp, #0]
 800e8e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8ec:	4906      	ldr	r1, [pc, #24]	@ (800e908 <__assert_func+0x34>)
 800e8ee:	462b      	mov	r3, r5
 800e8f0:	f000 f870 	bl	800e9d4 <fiprintf>
 800e8f4:	f000 f904 	bl	800eb00 <abort>
 800e8f8:	4b04      	ldr	r3, [pc, #16]	@ (800e90c <__assert_func+0x38>)
 800e8fa:	461c      	mov	r4, r3
 800e8fc:	e7f3      	b.n	800e8e6 <__assert_func+0x12>
 800e8fe:	bf00      	nop
 800e900:	240000ac 	.word	0x240000ac
 800e904:	08034d99 	.word	0x08034d99
 800e908:	08034da6 	.word	0x08034da6
 800e90c:	08034dd4 	.word	0x08034dd4

0800e910 <_calloc_r>:
 800e910:	b570      	push	{r4, r5, r6, lr}
 800e912:	fba1 5402 	umull	r5, r4, r1, r2
 800e916:	b934      	cbnz	r4, 800e926 <_calloc_r+0x16>
 800e918:	4629      	mov	r1, r5
 800e91a:	f7fd fba3 	bl	800c064 <_malloc_r>
 800e91e:	4606      	mov	r6, r0
 800e920:	b928      	cbnz	r0, 800e92e <_calloc_r+0x1e>
 800e922:	4630      	mov	r0, r6
 800e924:	bd70      	pop	{r4, r5, r6, pc}
 800e926:	220c      	movs	r2, #12
 800e928:	6002      	str	r2, [r0, #0]
 800e92a:	2600      	movs	r6, #0
 800e92c:	e7f9      	b.n	800e922 <_calloc_r+0x12>
 800e92e:	462a      	mov	r2, r5
 800e930:	4621      	mov	r1, r4
 800e932:	f7fe f992 	bl	800cc5a <memset>
 800e936:	e7f4      	b.n	800e922 <_calloc_r+0x12>

0800e938 <__ascii_mbtowc>:
 800e938:	b082      	sub	sp, #8
 800e93a:	b901      	cbnz	r1, 800e93e <__ascii_mbtowc+0x6>
 800e93c:	a901      	add	r1, sp, #4
 800e93e:	b142      	cbz	r2, 800e952 <__ascii_mbtowc+0x1a>
 800e940:	b14b      	cbz	r3, 800e956 <__ascii_mbtowc+0x1e>
 800e942:	7813      	ldrb	r3, [r2, #0]
 800e944:	600b      	str	r3, [r1, #0]
 800e946:	7812      	ldrb	r2, [r2, #0]
 800e948:	1e10      	subs	r0, r2, #0
 800e94a:	bf18      	it	ne
 800e94c:	2001      	movne	r0, #1
 800e94e:	b002      	add	sp, #8
 800e950:	4770      	bx	lr
 800e952:	4610      	mov	r0, r2
 800e954:	e7fb      	b.n	800e94e <__ascii_mbtowc+0x16>
 800e956:	f06f 0001 	mvn.w	r0, #1
 800e95a:	e7f8      	b.n	800e94e <__ascii_mbtowc+0x16>

0800e95c <_realloc_r>:
 800e95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e960:	4607      	mov	r7, r0
 800e962:	4614      	mov	r4, r2
 800e964:	460d      	mov	r5, r1
 800e966:	b921      	cbnz	r1, 800e972 <_realloc_r+0x16>
 800e968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e96c:	4611      	mov	r1, r2
 800e96e:	f7fd bb79 	b.w	800c064 <_malloc_r>
 800e972:	b92a      	cbnz	r2, 800e980 <_realloc_r+0x24>
 800e974:	f7fe fff6 	bl	800d964 <_free_r>
 800e978:	4625      	mov	r5, r4
 800e97a:	4628      	mov	r0, r5
 800e97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e980:	f000 f8c5 	bl	800eb0e <_malloc_usable_size_r>
 800e984:	4284      	cmp	r4, r0
 800e986:	4606      	mov	r6, r0
 800e988:	d802      	bhi.n	800e990 <_realloc_r+0x34>
 800e98a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e98e:	d8f4      	bhi.n	800e97a <_realloc_r+0x1e>
 800e990:	4621      	mov	r1, r4
 800e992:	4638      	mov	r0, r7
 800e994:	f7fd fb66 	bl	800c064 <_malloc_r>
 800e998:	4680      	mov	r8, r0
 800e99a:	b908      	cbnz	r0, 800e9a0 <_realloc_r+0x44>
 800e99c:	4645      	mov	r5, r8
 800e99e:	e7ec      	b.n	800e97a <_realloc_r+0x1e>
 800e9a0:	42b4      	cmp	r4, r6
 800e9a2:	4622      	mov	r2, r4
 800e9a4:	4629      	mov	r1, r5
 800e9a6:	bf28      	it	cs
 800e9a8:	4632      	movcs	r2, r6
 800e9aa:	f7fe f9e6 	bl	800cd7a <memcpy>
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	f7fe ffd7 	bl	800d964 <_free_r>
 800e9b6:	e7f1      	b.n	800e99c <_realloc_r+0x40>

0800e9b8 <__ascii_wctomb>:
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	4608      	mov	r0, r1
 800e9bc:	b141      	cbz	r1, 800e9d0 <__ascii_wctomb+0x18>
 800e9be:	2aff      	cmp	r2, #255	@ 0xff
 800e9c0:	d904      	bls.n	800e9cc <__ascii_wctomb+0x14>
 800e9c2:	228a      	movs	r2, #138	@ 0x8a
 800e9c4:	601a      	str	r2, [r3, #0]
 800e9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ca:	4770      	bx	lr
 800e9cc:	700a      	strb	r2, [r1, #0]
 800e9ce:	2001      	movs	r0, #1
 800e9d0:	4770      	bx	lr
	...

0800e9d4 <fiprintf>:
 800e9d4:	b40e      	push	{r1, r2, r3}
 800e9d6:	b503      	push	{r0, r1, lr}
 800e9d8:	4601      	mov	r1, r0
 800e9da:	ab03      	add	r3, sp, #12
 800e9dc:	4805      	ldr	r0, [pc, #20]	@ (800e9f4 <fiprintf+0x20>)
 800e9de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9e2:	6800      	ldr	r0, [r0, #0]
 800e9e4:	9301      	str	r3, [sp, #4]
 800e9e6:	f7ff fd03 	bl	800e3f0 <_vfiprintf_r>
 800e9ea:	b002      	add	sp, #8
 800e9ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9f0:	b003      	add	sp, #12
 800e9f2:	4770      	bx	lr
 800e9f4:	240000ac 	.word	0x240000ac

0800e9f8 <__swhatbuf_r>:
 800e9f8:	b570      	push	{r4, r5, r6, lr}
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea00:	2900      	cmp	r1, #0
 800ea02:	b096      	sub	sp, #88	@ 0x58
 800ea04:	4615      	mov	r5, r2
 800ea06:	461e      	mov	r6, r3
 800ea08:	da0d      	bge.n	800ea26 <__swhatbuf_r+0x2e>
 800ea0a:	89a3      	ldrh	r3, [r4, #12]
 800ea0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ea10:	f04f 0100 	mov.w	r1, #0
 800ea14:	bf14      	ite	ne
 800ea16:	2340      	movne	r3, #64	@ 0x40
 800ea18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	6031      	str	r1, [r6, #0]
 800ea20:	602b      	str	r3, [r5, #0]
 800ea22:	b016      	add	sp, #88	@ 0x58
 800ea24:	bd70      	pop	{r4, r5, r6, pc}
 800ea26:	466a      	mov	r2, sp
 800ea28:	f000 f848 	bl	800eabc <_fstat_r>
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	dbec      	blt.n	800ea0a <__swhatbuf_r+0x12>
 800ea30:	9901      	ldr	r1, [sp, #4]
 800ea32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ea36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ea3a:	4259      	negs	r1, r3
 800ea3c:	4159      	adcs	r1, r3
 800ea3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea42:	e7eb      	b.n	800ea1c <__swhatbuf_r+0x24>

0800ea44 <__smakebuf_r>:
 800ea44:	898b      	ldrh	r3, [r1, #12]
 800ea46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea48:	079d      	lsls	r5, r3, #30
 800ea4a:	4606      	mov	r6, r0
 800ea4c:	460c      	mov	r4, r1
 800ea4e:	d507      	bpl.n	800ea60 <__smakebuf_r+0x1c>
 800ea50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ea54:	6023      	str	r3, [r4, #0]
 800ea56:	6123      	str	r3, [r4, #16]
 800ea58:	2301      	movs	r3, #1
 800ea5a:	6163      	str	r3, [r4, #20]
 800ea5c:	b003      	add	sp, #12
 800ea5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea60:	ab01      	add	r3, sp, #4
 800ea62:	466a      	mov	r2, sp
 800ea64:	f7ff ffc8 	bl	800e9f8 <__swhatbuf_r>
 800ea68:	9f00      	ldr	r7, [sp, #0]
 800ea6a:	4605      	mov	r5, r0
 800ea6c:	4639      	mov	r1, r7
 800ea6e:	4630      	mov	r0, r6
 800ea70:	f7fd faf8 	bl	800c064 <_malloc_r>
 800ea74:	b948      	cbnz	r0, 800ea8a <__smakebuf_r+0x46>
 800ea76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea7a:	059a      	lsls	r2, r3, #22
 800ea7c:	d4ee      	bmi.n	800ea5c <__smakebuf_r+0x18>
 800ea7e:	f023 0303 	bic.w	r3, r3, #3
 800ea82:	f043 0302 	orr.w	r3, r3, #2
 800ea86:	81a3      	strh	r3, [r4, #12]
 800ea88:	e7e2      	b.n	800ea50 <__smakebuf_r+0xc>
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	6020      	str	r0, [r4, #0]
 800ea8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea92:	81a3      	strh	r3, [r4, #12]
 800ea94:	9b01      	ldr	r3, [sp, #4]
 800ea96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ea9a:	b15b      	cbz	r3, 800eab4 <__smakebuf_r+0x70>
 800ea9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	f000 f81d 	bl	800eae0 <_isatty_r>
 800eaa6:	b128      	cbz	r0, 800eab4 <__smakebuf_r+0x70>
 800eaa8:	89a3      	ldrh	r3, [r4, #12]
 800eaaa:	f023 0303 	bic.w	r3, r3, #3
 800eaae:	f043 0301 	orr.w	r3, r3, #1
 800eab2:	81a3      	strh	r3, [r4, #12]
 800eab4:	89a3      	ldrh	r3, [r4, #12]
 800eab6:	431d      	orrs	r5, r3
 800eab8:	81a5      	strh	r5, [r4, #12]
 800eaba:	e7cf      	b.n	800ea5c <__smakebuf_r+0x18>

0800eabc <_fstat_r>:
 800eabc:	b538      	push	{r3, r4, r5, lr}
 800eabe:	4d07      	ldr	r5, [pc, #28]	@ (800eadc <_fstat_r+0x20>)
 800eac0:	2300      	movs	r3, #0
 800eac2:	4604      	mov	r4, r0
 800eac4:	4608      	mov	r0, r1
 800eac6:	4611      	mov	r1, r2
 800eac8:	602b      	str	r3, [r5, #0]
 800eaca:	f7f2 fd49 	bl	8001560 <_fstat>
 800eace:	1c43      	adds	r3, r0, #1
 800ead0:	d102      	bne.n	800ead8 <_fstat_r+0x1c>
 800ead2:	682b      	ldr	r3, [r5, #0]
 800ead4:	b103      	cbz	r3, 800ead8 <_fstat_r+0x1c>
 800ead6:	6023      	str	r3, [r4, #0]
 800ead8:	bd38      	pop	{r3, r4, r5, pc}
 800eada:	bf00      	nop
 800eadc:	24001ab8 	.word	0x24001ab8

0800eae0 <_isatty_r>:
 800eae0:	b538      	push	{r3, r4, r5, lr}
 800eae2:	4d06      	ldr	r5, [pc, #24]	@ (800eafc <_isatty_r+0x1c>)
 800eae4:	2300      	movs	r3, #0
 800eae6:	4604      	mov	r4, r0
 800eae8:	4608      	mov	r0, r1
 800eaea:	602b      	str	r3, [r5, #0]
 800eaec:	f7f2 fd48 	bl	8001580 <_isatty>
 800eaf0:	1c43      	adds	r3, r0, #1
 800eaf2:	d102      	bne.n	800eafa <_isatty_r+0x1a>
 800eaf4:	682b      	ldr	r3, [r5, #0]
 800eaf6:	b103      	cbz	r3, 800eafa <_isatty_r+0x1a>
 800eaf8:	6023      	str	r3, [r4, #0]
 800eafa:	bd38      	pop	{r3, r4, r5, pc}
 800eafc:	24001ab8 	.word	0x24001ab8

0800eb00 <abort>:
 800eb00:	b508      	push	{r3, lr}
 800eb02:	2006      	movs	r0, #6
 800eb04:	f000 f834 	bl	800eb70 <raise>
 800eb08:	2001      	movs	r0, #1
 800eb0a:	f7f2 fcd9 	bl	80014c0 <_exit>

0800eb0e <_malloc_usable_size_r>:
 800eb0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb12:	1f18      	subs	r0, r3, #4
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	bfbc      	itt	lt
 800eb18:	580b      	ldrlt	r3, [r1, r0]
 800eb1a:	18c0      	addlt	r0, r0, r3
 800eb1c:	4770      	bx	lr

0800eb1e <_raise_r>:
 800eb1e:	291f      	cmp	r1, #31
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4605      	mov	r5, r0
 800eb24:	460c      	mov	r4, r1
 800eb26:	d904      	bls.n	800eb32 <_raise_r+0x14>
 800eb28:	2316      	movs	r3, #22
 800eb2a:	6003      	str	r3, [r0, #0]
 800eb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb30:	bd38      	pop	{r3, r4, r5, pc}
 800eb32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb34:	b112      	cbz	r2, 800eb3c <_raise_r+0x1e>
 800eb36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb3a:	b94b      	cbnz	r3, 800eb50 <_raise_r+0x32>
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	f000 f831 	bl	800eba4 <_getpid_r>
 800eb42:	4622      	mov	r2, r4
 800eb44:	4601      	mov	r1, r0
 800eb46:	4628      	mov	r0, r5
 800eb48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb4c:	f000 b818 	b.w	800eb80 <_kill_r>
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d00a      	beq.n	800eb6a <_raise_r+0x4c>
 800eb54:	1c59      	adds	r1, r3, #1
 800eb56:	d103      	bne.n	800eb60 <_raise_r+0x42>
 800eb58:	2316      	movs	r3, #22
 800eb5a:	6003      	str	r3, [r0, #0]
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	e7e7      	b.n	800eb30 <_raise_r+0x12>
 800eb60:	2100      	movs	r1, #0
 800eb62:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb66:	4620      	mov	r0, r4
 800eb68:	4798      	blx	r3
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	e7e0      	b.n	800eb30 <_raise_r+0x12>
	...

0800eb70 <raise>:
 800eb70:	4b02      	ldr	r3, [pc, #8]	@ (800eb7c <raise+0xc>)
 800eb72:	4601      	mov	r1, r0
 800eb74:	6818      	ldr	r0, [r3, #0]
 800eb76:	f7ff bfd2 	b.w	800eb1e <_raise_r>
 800eb7a:	bf00      	nop
 800eb7c:	240000ac 	.word	0x240000ac

0800eb80 <_kill_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	4d07      	ldr	r5, [pc, #28]	@ (800eba0 <_kill_r+0x20>)
 800eb84:	2300      	movs	r3, #0
 800eb86:	4604      	mov	r4, r0
 800eb88:	4608      	mov	r0, r1
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	602b      	str	r3, [r5, #0]
 800eb8e:	f7f2 fc87 	bl	80014a0 <_kill>
 800eb92:	1c43      	adds	r3, r0, #1
 800eb94:	d102      	bne.n	800eb9c <_kill_r+0x1c>
 800eb96:	682b      	ldr	r3, [r5, #0]
 800eb98:	b103      	cbz	r3, 800eb9c <_kill_r+0x1c>
 800eb9a:	6023      	str	r3, [r4, #0]
 800eb9c:	bd38      	pop	{r3, r4, r5, pc}
 800eb9e:	bf00      	nop
 800eba0:	24001ab8 	.word	0x24001ab8

0800eba4 <_getpid_r>:
 800eba4:	f7f2 bc74 	b.w	8001490 <_getpid>

0800eba8 <_init>:
 800eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebaa:	bf00      	nop
 800ebac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebae:	bc08      	pop	{r3}
 800ebb0:	469e      	mov	lr, r3
 800ebb2:	4770      	bx	lr

0800ebb4 <_fini>:
 800ebb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebb6:	bf00      	nop
 800ebb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebba:	bc08      	pop	{r3}
 800ebbc:	469e      	mov	lr, r3
 800ebbe:	4770      	bx	lr
