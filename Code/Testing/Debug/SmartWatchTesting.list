
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011600  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000784  080118b0  080118b0  000128b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012034  08012034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801203c  0801203c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012040  08012040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08012044  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c40  240001d8  0801221c  000141d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e18  0801221c  00014e18  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020730  00000000  00000000  00014206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042b8  00000000  00000000  00034936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001458  00000000  00000000  00038bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f9a  00000000  00000000  0003a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033efc  00000000  00000000  0003afe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002036d  00000000  00000000  0006eede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e28c  00000000  00000000  0008f24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cd4d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006314  00000000  00000000  001cd51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  001d3830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08011898 	.word	0x08011898

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	08011898 	.word	0x08011898

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_ldivmod>:
 80003a0:	b97b      	cbnz	r3, 80003c2 <__aeabi_ldivmod+0x22>
 80003a2:	b972      	cbnz	r2, 80003c2 <__aeabi_ldivmod+0x22>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bfbe      	ittt	lt
 80003a8:	2000      	movlt	r0, #0
 80003aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003ae:	e006      	blt.n	80003be <__aeabi_ldivmod+0x1e>
 80003b0:	bf08      	it	eq
 80003b2:	2800      	cmpeq	r0, #0
 80003b4:	bf1c      	itt	ne
 80003b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ba:	f04f 30ff 	movne.w	r0, #4294967295
 80003be:	f000 b9d3 	b.w	8000768 <__aeabi_idiv0>
 80003c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ca:	2900      	cmp	r1, #0
 80003cc:	db09      	blt.n	80003e2 <__aeabi_ldivmod+0x42>
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db1a      	blt.n	8000408 <__aeabi_ldivmod+0x68>
 80003d2:	f000 f84d 	bl	8000470 <__udivmoddi4>
 80003d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003de:	b004      	add	sp, #16
 80003e0:	4770      	bx	lr
 80003e2:	4240      	negs	r0, r0
 80003e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db1b      	blt.n	8000424 <__aeabi_ldivmod+0x84>
 80003ec:	f000 f840 	bl	8000470 <__udivmoddi4>
 80003f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003f8:	b004      	add	sp, #16
 80003fa:	4240      	negs	r0, r0
 80003fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000400:	4252      	negs	r2, r2
 8000402:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000406:	4770      	bx	lr
 8000408:	4252      	negs	r2, r2
 800040a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800040e:	f000 f82f 	bl	8000470 <__udivmoddi4>
 8000412:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800041a:	b004      	add	sp, #16
 800041c:	4240      	negs	r0, r0
 800041e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000422:	4770      	bx	lr
 8000424:	4252      	negs	r2, r2
 8000426:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042a:	f000 f821 	bl	8000470 <__udivmoddi4>
 800042e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000436:	b004      	add	sp, #16
 8000438:	4252      	negs	r2, r2
 800043a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043e:	4770      	bx	lr

08000440 <__aeabi_uldivmod>:
 8000440:	b953      	cbnz	r3, 8000458 <__aeabi_uldivmod+0x18>
 8000442:	b94a      	cbnz	r2, 8000458 <__aeabi_uldivmod+0x18>
 8000444:	2900      	cmp	r1, #0
 8000446:	bf08      	it	eq
 8000448:	2800      	cmpeq	r0, #0
 800044a:	bf1c      	itt	ne
 800044c:	f04f 31ff 	movne.w	r1, #4294967295
 8000450:	f04f 30ff 	movne.w	r0, #4294967295
 8000454:	f000 b988 	b.w	8000768 <__aeabi_idiv0>
 8000458:	f1ad 0c08 	sub.w	ip, sp, #8
 800045c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046c:	b004      	add	sp, #16
 800046e:	4770      	bx	lr

08000470 <__udivmoddi4>:
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000474:	9d08      	ldr	r5, [sp, #32]
 8000476:	468e      	mov	lr, r1
 8000478:	4604      	mov	r4, r0
 800047a:	4688      	mov	r8, r1
 800047c:	2b00      	cmp	r3, #0
 800047e:	d14a      	bne.n	8000516 <__udivmoddi4+0xa6>
 8000480:	428a      	cmp	r2, r1
 8000482:	4617      	mov	r7, r2
 8000484:	d962      	bls.n	800054c <__udivmoddi4+0xdc>
 8000486:	fab2 f682 	clz	r6, r2
 800048a:	b14e      	cbz	r6, 80004a0 <__udivmoddi4+0x30>
 800048c:	f1c6 0320 	rsb	r3, r6, #32
 8000490:	fa01 f806 	lsl.w	r8, r1, r6
 8000494:	fa20 f303 	lsr.w	r3, r0, r3
 8000498:	40b7      	lsls	r7, r6
 800049a:	ea43 0808 	orr.w	r8, r3, r8
 800049e:	40b4      	lsls	r4, r6
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80004b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b6:	fb01 f20c 	mul.w	r2, r1, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0x62>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80004c4:	f080 80ea 	bcs.w	800069c <__udivmoddi4+0x22c>
 80004c8:	429a      	cmp	r2, r3
 80004ca:	f240 80e7 	bls.w	800069c <__udivmoddi4+0x22c>
 80004ce:	3902      	subs	r1, #2
 80004d0:	443b      	add	r3, r7
 80004d2:	1a9a      	subs	r2, r3, r2
 80004d4:	b2a3      	uxth	r3, r4
 80004d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004da:	fb0e 2210 	mls	r2, lr, r0, r2
 80004de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80004e6:	459c      	cmp	ip, r3
 80004e8:	d909      	bls.n	80004fe <__udivmoddi4+0x8e>
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f0:	f080 80d6 	bcs.w	80006a0 <__udivmoddi4+0x230>
 80004f4:	459c      	cmp	ip, r3
 80004f6:	f240 80d3 	bls.w	80006a0 <__udivmoddi4+0x230>
 80004fa:	443b      	add	r3, r7
 80004fc:	3802      	subs	r0, #2
 80004fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000502:	eba3 030c 	sub.w	r3, r3, ip
 8000506:	2100      	movs	r1, #0
 8000508:	b11d      	cbz	r5, 8000512 <__udivmoddi4+0xa2>
 800050a:	40f3      	lsrs	r3, r6
 800050c:	2200      	movs	r2, #0
 800050e:	e9c5 3200 	strd	r3, r2, [r5]
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	428b      	cmp	r3, r1
 8000518:	d905      	bls.n	8000526 <__udivmoddi4+0xb6>
 800051a:	b10d      	cbz	r5, 8000520 <__udivmoddi4+0xb0>
 800051c:	e9c5 0100 	strd	r0, r1, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	4608      	mov	r0, r1
 8000524:	e7f5      	b.n	8000512 <__udivmoddi4+0xa2>
 8000526:	fab3 f183 	clz	r1, r3
 800052a:	2900      	cmp	r1, #0
 800052c:	d146      	bne.n	80005bc <__udivmoddi4+0x14c>
 800052e:	4573      	cmp	r3, lr
 8000530:	d302      	bcc.n	8000538 <__udivmoddi4+0xc8>
 8000532:	4282      	cmp	r2, r0
 8000534:	f200 8105 	bhi.w	8000742 <__udivmoddi4+0x2d2>
 8000538:	1a84      	subs	r4, r0, r2
 800053a:	eb6e 0203 	sbc.w	r2, lr, r3
 800053e:	2001      	movs	r0, #1
 8000540:	4690      	mov	r8, r2
 8000542:	2d00      	cmp	r5, #0
 8000544:	d0e5      	beq.n	8000512 <__udivmoddi4+0xa2>
 8000546:	e9c5 4800 	strd	r4, r8, [r5]
 800054a:	e7e2      	b.n	8000512 <__udivmoddi4+0xa2>
 800054c:	2a00      	cmp	r2, #0
 800054e:	f000 8090 	beq.w	8000672 <__udivmoddi4+0x202>
 8000552:	fab2 f682 	clz	r6, r2
 8000556:	2e00      	cmp	r6, #0
 8000558:	f040 80a4 	bne.w	80006a4 <__udivmoddi4+0x234>
 800055c:	1a8a      	subs	r2, r1, r2
 800055e:	0c03      	lsrs	r3, r0, #16
 8000560:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000564:	b280      	uxth	r0, r0
 8000566:	b2bc      	uxth	r4, r7
 8000568:	2101      	movs	r1, #1
 800056a:	fbb2 fcfe 	udiv	ip, r2, lr
 800056e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000576:	fb04 f20c 	mul.w	r2, r4, ip
 800057a:	429a      	cmp	r2, r3
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x11e>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000584:	d202      	bcs.n	800058c <__udivmoddi4+0x11c>
 8000586:	429a      	cmp	r2, r3
 8000588:	f200 80e0 	bhi.w	800074c <__udivmoddi4+0x2dc>
 800058c:	46c4      	mov	ip, r8
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	fbb3 f2fe 	udiv	r2, r3, lr
 8000594:	fb0e 3312 	mls	r3, lr, r2, r3
 8000598:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800059c:	fb02 f404 	mul.w	r4, r2, r4
 80005a0:	429c      	cmp	r4, r3
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x144>
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80005aa:	d202      	bcs.n	80005b2 <__udivmoddi4+0x142>
 80005ac:	429c      	cmp	r4, r3
 80005ae:	f200 80ca 	bhi.w	8000746 <__udivmoddi4+0x2d6>
 80005b2:	4602      	mov	r2, r0
 80005b4:	1b1b      	subs	r3, r3, r4
 80005b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80005ba:	e7a5      	b.n	8000508 <__udivmoddi4+0x98>
 80005bc:	f1c1 0620 	rsb	r6, r1, #32
 80005c0:	408b      	lsls	r3, r1
 80005c2:	fa22 f706 	lsr.w	r7, r2, r6
 80005c6:	431f      	orrs	r7, r3
 80005c8:	fa0e f401 	lsl.w	r4, lr, r1
 80005cc:	fa20 f306 	lsr.w	r3, r0, r6
 80005d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80005d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80005d8:	4323      	orrs	r3, r4
 80005da:	fa00 f801 	lsl.w	r8, r0, r1
 80005de:	fa1f fc87 	uxth.w	ip, r7
 80005e2:	fbbe f0f9 	udiv	r0, lr, r9
 80005e6:	0c1c      	lsrs	r4, r3, #16
 80005e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80005ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80005f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80005f4:	45a6      	cmp	lr, r4
 80005f6:	fa02 f201 	lsl.w	r2, r2, r1
 80005fa:	d909      	bls.n	8000610 <__udivmoddi4+0x1a0>
 80005fc:	193c      	adds	r4, r7, r4
 80005fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000602:	f080 809c 	bcs.w	800073e <__udivmoddi4+0x2ce>
 8000606:	45a6      	cmp	lr, r4
 8000608:	f240 8099 	bls.w	800073e <__udivmoddi4+0x2ce>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	eba4 040e 	sub.w	r4, r4, lr
 8000614:	fa1f fe83 	uxth.w	lr, r3
 8000618:	fbb4 f3f9 	udiv	r3, r4, r9
 800061c:	fb09 4413 	mls	r4, r9, r3, r4
 8000620:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000624:	fb03 fc0c 	mul.w	ip, r3, ip
 8000628:	45a4      	cmp	ip, r4
 800062a:	d908      	bls.n	800063e <__udivmoddi4+0x1ce>
 800062c:	193c      	adds	r4, r7, r4
 800062e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000632:	f080 8082 	bcs.w	800073a <__udivmoddi4+0x2ca>
 8000636:	45a4      	cmp	ip, r4
 8000638:	d97f      	bls.n	800073a <__udivmoddi4+0x2ca>
 800063a:	3b02      	subs	r3, #2
 800063c:	443c      	add	r4, r7
 800063e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000642:	eba4 040c 	sub.w	r4, r4, ip
 8000646:	fba0 ec02 	umull	lr, ip, r0, r2
 800064a:	4564      	cmp	r4, ip
 800064c:	4673      	mov	r3, lr
 800064e:	46e1      	mov	r9, ip
 8000650:	d362      	bcc.n	8000718 <__udivmoddi4+0x2a8>
 8000652:	d05f      	beq.n	8000714 <__udivmoddi4+0x2a4>
 8000654:	b15d      	cbz	r5, 800066e <__udivmoddi4+0x1fe>
 8000656:	ebb8 0203 	subs.w	r2, r8, r3
 800065a:	eb64 0409 	sbc.w	r4, r4, r9
 800065e:	fa04 f606 	lsl.w	r6, r4, r6
 8000662:	fa22 f301 	lsr.w	r3, r2, r1
 8000666:	431e      	orrs	r6, r3
 8000668:	40cc      	lsrs	r4, r1
 800066a:	e9c5 6400 	strd	r6, r4, [r5]
 800066e:	2100      	movs	r1, #0
 8000670:	e74f      	b.n	8000512 <__udivmoddi4+0xa2>
 8000672:	fbb1 fcf2 	udiv	ip, r1, r2
 8000676:	0c01      	lsrs	r1, r0, #16
 8000678:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800067c:	b280      	uxth	r0, r0
 800067e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000682:	463b      	mov	r3, r7
 8000684:	4638      	mov	r0, r7
 8000686:	463c      	mov	r4, r7
 8000688:	46b8      	mov	r8, r7
 800068a:	46be      	mov	lr, r7
 800068c:	2620      	movs	r6, #32
 800068e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000692:	eba2 0208 	sub.w	r2, r2, r8
 8000696:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800069a:	e766      	b.n	800056a <__udivmoddi4+0xfa>
 800069c:	4601      	mov	r1, r0
 800069e:	e718      	b.n	80004d2 <__udivmoddi4+0x62>
 80006a0:	4610      	mov	r0, r2
 80006a2:	e72c      	b.n	80004fe <__udivmoddi4+0x8e>
 80006a4:	f1c6 0220 	rsb	r2, r6, #32
 80006a8:	fa2e f302 	lsr.w	r3, lr, r2
 80006ac:	40b7      	lsls	r7, r6
 80006ae:	40b1      	lsls	r1, r6
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006b8:	430a      	orrs	r2, r1
 80006ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80006be:	b2bc      	uxth	r4, r7
 80006c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80006c4:	0c11      	lsrs	r1, r2, #16
 80006c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ca:	fb08 f904 	mul.w	r9, r8, r4
 80006ce:	40b0      	lsls	r0, r6
 80006d0:	4589      	cmp	r9, r1
 80006d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80006d6:	b280      	uxth	r0, r0
 80006d8:	d93e      	bls.n	8000758 <__udivmoddi4+0x2e8>
 80006da:	1879      	adds	r1, r7, r1
 80006dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80006e0:	d201      	bcs.n	80006e6 <__udivmoddi4+0x276>
 80006e2:	4589      	cmp	r9, r1
 80006e4:	d81f      	bhi.n	8000726 <__udivmoddi4+0x2b6>
 80006e6:	eba1 0109 	sub.w	r1, r1, r9
 80006ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80006ee:	fb09 f804 	mul.w	r8, r9, r4
 80006f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80006f6:	b292      	uxth	r2, r2
 80006f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006fc:	4542      	cmp	r2, r8
 80006fe:	d229      	bcs.n	8000754 <__udivmoddi4+0x2e4>
 8000700:	18ba      	adds	r2, r7, r2
 8000702:	f109 31ff 	add.w	r1, r9, #4294967295
 8000706:	d2c4      	bcs.n	8000692 <__udivmoddi4+0x222>
 8000708:	4542      	cmp	r2, r8
 800070a:	d2c2      	bcs.n	8000692 <__udivmoddi4+0x222>
 800070c:	f1a9 0102 	sub.w	r1, r9, #2
 8000710:	443a      	add	r2, r7
 8000712:	e7be      	b.n	8000692 <__udivmoddi4+0x222>
 8000714:	45f0      	cmp	r8, lr
 8000716:	d29d      	bcs.n	8000654 <__udivmoddi4+0x1e4>
 8000718:	ebbe 0302 	subs.w	r3, lr, r2
 800071c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000720:	3801      	subs	r0, #1
 8000722:	46e1      	mov	r9, ip
 8000724:	e796      	b.n	8000654 <__udivmoddi4+0x1e4>
 8000726:	eba7 0909 	sub.w	r9, r7, r9
 800072a:	4449      	add	r1, r9
 800072c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000730:	fbb1 f9fe 	udiv	r9, r1, lr
 8000734:	fb09 f804 	mul.w	r8, r9, r4
 8000738:	e7db      	b.n	80006f2 <__udivmoddi4+0x282>
 800073a:	4673      	mov	r3, lr
 800073c:	e77f      	b.n	800063e <__udivmoddi4+0x1ce>
 800073e:	4650      	mov	r0, sl
 8000740:	e766      	b.n	8000610 <__udivmoddi4+0x1a0>
 8000742:	4608      	mov	r0, r1
 8000744:	e6fd      	b.n	8000542 <__udivmoddi4+0xd2>
 8000746:	443b      	add	r3, r7
 8000748:	3a02      	subs	r2, #2
 800074a:	e733      	b.n	80005b4 <__udivmoddi4+0x144>
 800074c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000750:	443b      	add	r3, r7
 8000752:	e71c      	b.n	800058e <__udivmoddi4+0x11e>
 8000754:	4649      	mov	r1, r9
 8000756:	e79c      	b.n	8000692 <__udivmoddi4+0x222>
 8000758:	eba1 0109 	sub.w	r1, r1, r9
 800075c:	46c4      	mov	ip, r8
 800075e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000762:	fb09 f804 	mul.w	r8, r9, r4
 8000766:	e7c4      	b.n	80006f2 <__udivmoddi4+0x282>

08000768 <__aeabi_idiv0>:
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000772:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <MX_DMA_Init+0x7c>)
 8000774:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000778:	4a1b      	ldr	r2, [pc, #108]	@ (80007e8 <MX_DMA_Init+0x7c>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_DMA_Init+0x7c>)
 8000784:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	200b      	movs	r0, #11
 8000796:	f001 fcc6 	bl	8002126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800079a:	200b      	movs	r0, #11
 800079c:	f001 fcdd 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	200c      	movs	r0, #12
 80007a6:	f001 fcbe 	bl	8002126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007aa:	200c      	movs	r0, #12
 80007ac:	f001 fcd5 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	200d      	movs	r0, #13
 80007b6:	f001 fcb6 	bl	8002126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80007ba:	200d      	movs	r0, #13
 80007bc:	f001 fccd 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	200e      	movs	r0, #14
 80007c6:	f001 fcae 	bl	8002126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007ca:	200e      	movs	r0, #14
 80007cc:	f001 fcc5 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2010      	movs	r0, #16
 80007d6:	f001 fca6 	bl	8002126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007da:	2010      	movs	r0, #16
 80007dc:	f001 fcbd 	bl	800215a <HAL_NVIC_EnableIRQ>

}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	58024400 	.word	0x58024400

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	@ 0x30
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b96      	ldr	r3, [pc, #600]	@ (8000a5c <MX_GPIO_Init+0x270>)
 8000804:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000808:	4a94      	ldr	r2, [pc, #592]	@ (8000a5c <MX_GPIO_Init+0x270>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000812:	4b92      	ldr	r3, [pc, #584]	@ (8000a5c <MX_GPIO_Init+0x270>)
 8000814:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000820:	4b8e      	ldr	r3, [pc, #568]	@ (8000a5c <MX_GPIO_Init+0x270>)
 8000822:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000826:	4a8d      	ldr	r2, [pc, #564]	@ (8000a5c <MX_GPIO_Init+0x270>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000830:	4b8a      	ldr	r3, [pc, #552]	@ (8000a5c <MX_GPIO_Init+0x270>)
 8000832:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b87      	ldr	r3, [pc, #540]	@ (8000a5c <MX_GPIO_Init+0x270>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000844:	4a85      	ldr	r2, [pc, #532]	@ (8000a5c <MX_GPIO_Init+0x270>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800084e:	4b83      	ldr	r3, [pc, #524]	@ (8000a5c <MX_GPIO_Init+0x270>)
 8000850:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085c:	4b7f      	ldr	r3, [pc, #508]	@ (8000a5c <MX_GPIO_Init+0x270>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000862:	4a7e      	ldr	r2, [pc, #504]	@ (8000a5c <MX_GPIO_Init+0x270>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800086c:	4b7b      	ldr	r3, [pc, #492]	@ (8000a5c <MX_GPIO_Init+0x270>)
 800086e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	4b78      	ldr	r3, [pc, #480]	@ (8000a5c <MX_GPIO_Init+0x270>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000880:	4a76      	ldr	r2, [pc, #472]	@ (8000a5c <MX_GPIO_Init+0x270>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800088a:	4b74      	ldr	r3, [pc, #464]	@ (8000a5c <MX_GPIO_Init+0x270>)
 800088c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000898:	4b70      	ldr	r3, [pc, #448]	@ (8000a5c <MX_GPIO_Init+0x270>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800089e:	4a6f      	ldr	r2, [pc, #444]	@ (8000a5c <MX_GPIO_Init+0x270>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008a8:	4b6c      	ldr	r3, [pc, #432]	@ (8000a5c <MX_GPIO_Init+0x270>)
 80008aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	4b69      	ldr	r3, [pc, #420]	@ (8000a5c <MX_GPIO_Init+0x270>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008bc:	4a67      	ldr	r2, [pc, #412]	@ (8000a5c <MX_GPIO_Init+0x270>)
 80008be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008c6:	4b65      	ldr	r3, [pc, #404]	@ (8000a5c <MX_GPIO_Init+0x270>)
 80008c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_AD0_GPIO_Port, MPU6500_AD0_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2108      	movs	r1, #8
 80008d8:	4861      	ldr	r0, [pc, #388]	@ (8000a60 <MX_GPIO_Init+0x274>)
 80008da:	f004 fd6b 	bl	80053b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|ST7789_BLK_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f244 0111 	movw	r1, #16401	@ 0x4011
 80008e4:	485f      	ldr	r0, [pc, #380]	@ (8000a64 <MX_GPIO_Init+0x278>)
 80008e6:	f004 fd65 	bl	80053b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME280_CS_GPIO_Port, BME280_CS_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008f0:	485d      	ldr	r0, [pc, #372]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 80008f2:	f004 fd5f 	bl	80053b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fc:	485b      	ldr	r0, [pc, #364]	@ (8000a6c <MX_GPIO_Init+0x280>)
 80008fe:	f004 fd59 	bl	80053b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000908:	4858      	ldr	r0, [pc, #352]	@ (8000a6c <MX_GPIO_Init+0x280>)
 800090a:	f004 fd53 	bl	80053b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2140      	movs	r1, #64	@ 0x40
 8000912:	4857      	ldr	r0, [pc, #348]	@ (8000a70 <MX_GPIO_Init+0x284>)
 8000914:	f004 fd4e 	bl	80053b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091e:	4855      	ldr	r0, [pc, #340]	@ (8000a74 <MX_GPIO_Init+0x288>)
 8000920:	f004 fd48 	bl	80053b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2102      	movs	r1, #2
 8000928:	484f      	ldr	r0, [pc, #316]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 800092a:	f004 fd43 	bl	80053b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : InputButton_Pin */
  GPIO_InitStruct.Pin = InputButton_Pin;
 800092e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000934:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(InputButton_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	484a      	ldr	r0, [pc, #296]	@ (8000a70 <MX_GPIO_Init+0x284>)
 8000946:	f004 fb85 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_AD0_Pin */
  GPIO_InitStruct.Pin = MPU6500_AD0_Pin;
 800094a:	2308      	movs	r3, #8
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MPU6500_AD0_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	483f      	ldr	r0, [pc, #252]	@ (8000a60 <MX_GPIO_Init+0x274>)
 8000962:	f004 fb77 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin ST7789_BLK_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ST7789_BLK_Pin;
 8000966:	f244 0311 	movw	r3, #16401	@ 0x4011
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4839      	ldr	r0, [pc, #228]	@ (8000a64 <MX_GPIO_Init+0x278>)
 8000980:	f004 fb68 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX30102_INT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin;
 8000984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MAX30102_INT_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4833      	ldr	r0, [pc, #204]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 800099c:	f004 fb5a 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pins : BME280_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = BME280_CS_Pin|LD2_Pin;
 80009a0:	f248 0302 	movw	r3, #32770	@ 0x8002
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	482b      	ldr	r0, [pc, #172]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 80009ba:	f004 fb4b 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 80009be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009cc:	2302      	movs	r3, #2
 80009ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4825      	ldr	r0, [pc, #148]	@ (8000a6c <MX_GPIO_Init+0x280>)
 80009d8:	f004 fb3c 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 80009dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	481d      	ldr	r0, [pc, #116]	@ (8000a6c <MX_GPIO_Init+0x280>)
 80009f6:	f004 fb2d 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009fa:	2340      	movs	r3, #64	@ 0x40
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4817      	ldr	r0, [pc, #92]	@ (8000a70 <MX_GPIO_Init+0x284>)
 8000a12:	f004 fb1f 	bl	8005054 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8000a16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4811      	ldr	r0, [pc, #68]	@ (8000a74 <MX_GPIO_Init+0x288>)
 8000a30:	f004 fb10 	bl	8005054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2017      	movs	r0, #23
 8000a3a:	f001 fb74 	bl	8002126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a3e:	2017      	movs	r0, #23
 8000a40:	f001 fb8b 	bl	800215a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2028      	movs	r0, #40	@ 0x28
 8000a4a:	f001 fb6c 	bl	8002126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a4e:	2028      	movs	r0, #40	@ 0x28
 8000a50:	f001 fb83 	bl	800215a <HAL_NVIC_EnableIRQ>

}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	@ 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	58020000 	.word	0x58020000
 8000a64:	58020400 	.word	0x58020400
 8000a68:	58021000 	.word	0x58021000
 8000a6c:	58020c00 	.word	0x58020c00
 8000a70:	58020800 	.word	0x58020800
 8000a74:	58021800 	.word	0x58021800

08000a78 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000af0 <MX_I2C1_Init+0x78>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000a84:	4a1b      	ldr	r2, [pc, #108]	@ (8000af4 <MX_I2C1_Init+0x7c>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab2:	480e      	ldr	r0, [pc, #56]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000ab4:	f004 fcb2 	bl	800541c <HAL_I2C_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000abe:	f000 fb93 	bl	80011e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4809      	ldr	r0, [pc, #36]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000ac6:	f005 fccf 	bl	8006468 <HAL_I2CEx_ConfigAnalogFilter>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ad0:	f000 fb8a 	bl	80011e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_I2C1_Init+0x74>)
 8000ad8:	f005 fd11 	bl	80064fe <HAL_I2CEx_ConfigDigitalFilter>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ae2:	f000 fb81 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	240001f4 	.word	0x240001f4
 8000af0:	40005400 	.word	0x40005400
 8000af4:	20b0ccff 	.word	0x20b0ccff

08000af8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000afe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b70 <MX_I2C2_Init+0x78>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b04:	4a1b      	ldr	r2, [pc, #108]	@ (8000b74 <MX_I2C2_Init+0x7c>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b32:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b34:	f004 fc72 	bl	800541c <HAL_I2C_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b3e:	f000 fb53 	bl	80011e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b42:	2100      	movs	r1, #0
 8000b44:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b46:	f005 fc8f 	bl	8006468 <HAL_I2CEx_ConfigAnalogFilter>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b50:	f000 fb4a 	bl	80011e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b54:	2100      	movs	r1, #0
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_I2C2_Init+0x74>)
 8000b58:	f005 fcd1 	bl	80064fe <HAL_I2CEx_ConfigDigitalFilter>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b62:	f000 fb41 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	24000248 	.word	0x24000248
 8000b70:	40005800 	.word	0x40005800
 8000b74:	20b0ccff 	.word	0x20b0ccff

08000b78 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf0 <MX_I2C4_Init+0x78>)
 8000b80:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000b84:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf4 <MX_I2C4_Init+0x7c>)
 8000b86:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000b88:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000bb2:	480e      	ldr	r0, [pc, #56]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000bb4:	f004 fc32 	bl	800541c <HAL_I2C_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000bbe:	f000 fb13 	bl	80011e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4809      	ldr	r0, [pc, #36]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000bc6:	f005 fc4f 	bl	8006468 <HAL_I2CEx_ConfigAnalogFilter>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000bd0:	f000 fb0a 	bl	80011e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_I2C4_Init+0x74>)
 8000bd8:	f005 fc91 	bl	80064fe <HAL_I2CEx_ConfigDigitalFilter>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000be2:	f000 fb01 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2400029c 	.word	0x2400029c
 8000bf0:	58001c00 	.word	0x58001c00
 8000bf4:	20b0ccff 	.word	0x20b0ccff

08000bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0be      	sub	sp, #248	@ 0xf8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c10:	f107 0320 	add.w	r3, r7, #32
 8000c14:	22c0      	movs	r2, #192	@ 0xc0
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f00e fe94 	bl	800f946 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a73      	ldr	r2, [pc, #460]	@ (8000df0 <HAL_I2C_MspInit+0x1f8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d146      	bne.n	8000cb6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c28:	f04f 0208 	mov.w	r2, #8
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f006 fcc2 	bl	80075c8 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c4a:	f000 facd 	bl	80011e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b69      	ldr	r3, [pc, #420]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000c50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c54:	4a67      	ldr	r2, [pc, #412]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c5e:	4b65      	ldr	r3, [pc, #404]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000c60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 8000c6c:	23c0      	movs	r3, #192	@ 0xc0
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c72:	2312      	movs	r3, #18
 8000c74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c84:	2304      	movs	r3, #4
 8000c86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4859      	ldr	r0, [pc, #356]	@ (8000df8 <HAL_I2C_MspInit+0x200>)
 8000c92:	f004 f9df 	bl	8005054 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c96:	4b57      	ldr	r3, [pc, #348]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000c98:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000c9c:	4a55      	ldr	r2, [pc, #340]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000c9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ca2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ca6:	4b53      	ldr	r3, [pc, #332]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000ca8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000cb4:	e098      	b.n	8000de8 <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C2)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a50      	ldr	r2, [pc, #320]	@ (8000dfc <HAL_I2C_MspInit+0x204>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d147      	bne.n	8000d50 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cc0:	f04f 0208 	mov.w	r2, #8
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f006 fc76 	bl	80075c8 <HAL_RCCEx_PeriphCLKConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000ce2:	f000 fa81 	bl	80011e8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b43      	ldr	r3, [pc, #268]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000ce8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cec:	4a41      	ldr	r2, [pc, #260]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000cf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BME280_SCL_Pin|BME280_SDA_Pin;
 8000d04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0c:	2312      	movs	r3, #18
 8000d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4833      	ldr	r0, [pc, #204]	@ (8000df8 <HAL_I2C_MspInit+0x200>)
 8000d2c:	f004 f992 	bl	8005054 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d30:	4b30      	ldr	r3, [pc, #192]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000d32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d36:	4a2f      	ldr	r2, [pc, #188]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000d38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d3c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d40:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000d42:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
}
 8000d4e:	e04b      	b.n	8000de8 <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C4)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a2a      	ldr	r2, [pc, #168]	@ (8000e00 <HAL_I2C_MspInit+0x208>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d146      	bne.n	8000de8 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d5a:	f04f 0210 	mov.w	r2, #16
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4618      	mov	r0, r3
 8000d72:	f006 fc29 	bl	80075c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000d7c:	f000 fa34 	bl	80011e8 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d80:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d86:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000d92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8000d9e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da6:	2312      	movs	r3, #18
 8000da8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000db8:	2304      	movs	r3, #4
 8000dba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480f      	ldr	r0, [pc, #60]	@ (8000e04 <HAL_I2C_MspInit+0x20c>)
 8000dc6:	f004 f945 	bl	8005054 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000dcc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000dd0:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_I2C_MspInit+0x1fc>)
 8000ddc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
}
 8000de8:	bf00      	nop
 8000dea:	37f8      	adds	r7, #248	@ 0xf8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40005400 	.word	0x40005400
 8000df4:	58024400 	.word	0x58024400
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	40005800 	.word	0x40005800
 8000e00:	58001c00 	.word	0x58001c00
 8000e04:	58020c00 	.word	0x58020c00

08000e08 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*) &chr, 1, HAL_MAX_DELAY);
 8000e10:	1d39      	adds	r1, r7, #4
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	2201      	movs	r2, #1
 8000e18:	4803      	ldr	r0, [pc, #12]	@ (8000e28 <__io_putchar+0x20>)
 8000e1a:	f008 fdfe 	bl	8009a1a <HAL_UART_Transmit>
	return chr;
 8000e1e:	687b      	ldr	r3, [r7, #4]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	24000620 	.word	0x24000620

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
int main(void)
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e38:	f000 f9aa 	bl	8001190 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3c:	f000 ffe2 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e40:	f000 f83e 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e44:	f7ff fcd2 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000e48:	f7ff fc90 	bl	800076c <MX_DMA_Init>
  MX_UART4_Init();
 8000e4c:	f000 fce4 	bl	8001818 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000e50:	f000 fd7a 	bl	8001948 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000e54:	f7ff fe50 	bl	8000af8 <MX_I2C2_Init>
  MX_UART5_Init();
 8000e58:	f000 fd2a 	bl	80018b0 <MX_UART5_Init>
  MX_SPI1_Init();
 8000e5c:	f000 f9ca 	bl	80011f4 <MX_SPI1_Init>
  MX_I2C4_Init();
 8000e60:	f7ff fe8a 	bl	8000b78 <MX_I2C4_Init>
  MX_I2C1_Init();
 8000e64:	f7ff fe08 	bl	8000a78 <MX_I2C1_Init>
//	Sensor_MAX30102_init(800, &max30102, &MAX30102_I2C);
	Sensor_MAX30102_init(&SmartWatchData_handle.max30102, &MAX30102_I2C);

#endif
//	Scan_I2C_Bus(&MAX30102_I2C);
	uint32_t Timer = HAL_GetTick();
 8000e68:	f001 f852 	bl	8001f10 <HAL_GetTick>
 8000e6c:	6078      	str	r0, [r7, #4]
	Sensor_SmartWatch_init(&SmartWatchData_handle);
 8000e6e:	4810      	ldr	r0, [pc, #64]	@ (8000eb0 <main+0x84>)
 8000e70:	f00b ff5c 	bl	800cd2c <Sensor_SmartWatch_init>
//		      printf("spo2 : %u r\n",spo2);
//
//	    }

#endif
		if (messageReady)
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <main+0x88>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d006      	beq.n	8000e8c <main+0x60>
		{
			// Process the complete message
			printf("Received complete message: %s\r\n", messageBuffer);
 8000e7e:	490e      	ldr	r1, [pc, #56]	@ (8000eb8 <main+0x8c>)
 8000e80:	480e      	ldr	r0, [pc, #56]	@ (8000ebc <main+0x90>)
 8000e82:	f00e fcd5 	bl	800f830 <iprintf>
			messageReady = 0;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <main+0x88>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
		}

		Sensor_SmartWatch_update(&SmartWatchData_handle);
 8000e8c:	4808      	ldr	r0, [pc, #32]	@ (8000eb0 <main+0x84>)
 8000e8e:	f00b ff7b 	bl	800cd88 <Sensor_SmartWatch_update>

		if ((HAL_GetTick() - Timer) > 1000)
 8000e92:	f001 f83d 	bl	8001f10 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea0:	d9e8      	bls.n	8000e74 <main+0x48>
		{
			Sensor_SmartWatch_log(&SmartWatchData_handle);
 8000ea2:	4803      	ldr	r0, [pc, #12]	@ (8000eb0 <main+0x84>)
 8000ea4:	f00c f9ec 	bl	800d280 <Sensor_SmartWatch_log>
			Timer = HAL_GetTick();
 8000ea8:	f001 f832 	bl	8001f10 <HAL_GetTick>
 8000eac:	6078      	str	r0, [r7, #4]
		if (messageReady)
 8000eae:	e7e1      	b.n	8000e74 <main+0x48>
 8000eb0:	24000998 	.word	0x24000998
 8000eb4:	240003f0 	.word	0x240003f0
 8000eb8:	240002f0 	.word	0x240002f0
 8000ebc:	080118b0 	.word	0x080118b0

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09c      	sub	sp, #112	@ 0x70
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eca:	224c      	movs	r2, #76	@ 0x4c
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f00e fd39 	bl	800f946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00e fd33 	bl	800f946 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa0 <SystemClock_Config+0xe0>)
 8000ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000eea:	2004      	movs	r0, #4
 8000eec:	f005 fb54 	bl	8006598 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa4 <SystemClock_Config+0xe4>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8000fa4 <SystemClock_Config+0xe4>)
 8000efa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <SystemClock_Config+0xe4>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f0c:	bf00      	nop
 8000f0e:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <SystemClock_Config+0xe4>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f1a:	d1f8      	bne.n	8000f0e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f26:	2302      	movs	r3, #2
 8000f28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000f32:	2346      	movs	r3, #70	@ 0x46
 8000f34:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f42:	230c      	movs	r3, #12
 8000f44:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 fb7a 	bl	800664c <HAL_RCC_OscConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f5e:	f000 f943 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	233f      	movs	r3, #63	@ 0x3f
 8000f64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2303      	movs	r3, #3
 8000f68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f72:	2340      	movs	r3, #64	@ 0x40
 8000f74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f76:	2340      	movs	r3, #64	@ 0x40
 8000f78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f80:	2340      	movs	r3, #64	@ 0x40
 8000f82:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2106      	movs	r1, #6
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 ff91 	bl	8006eb0 <HAL_RCC_ClockConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000f94:	f000 f928 	bl	80011e8 <Error_Handler>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3770      	adds	r7, #112	@ 0x70
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	58024800 	.word	0x58024800

08000fa8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART4)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a56      	ldr	r2, [pc, #344]	@ (8001114 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	f040 80a5 	bne.w	800110a <HAL_UARTEx_RxEventCallback+0x162>
	{
		// Copy the data from DMA buffer to message buffer
		memcpy(messageBuffer, rxBuffer, Size);
 8000fc0:	887b      	ldrh	r3, [r7, #2]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4954      	ldr	r1, [pc, #336]	@ (8001118 <HAL_UARTEx_RxEventCallback+0x170>)
 8000fc6:	4855      	ldr	r0, [pc, #340]	@ (800111c <HAL_UARTEx_RxEventCallback+0x174>)
 8000fc8:	f00e fd4d 	bl	800fa66 <memcpy>

		// Null-terminate the string
		messageBuffer[Size] = '\0';
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	4a53      	ldr	r2, [pc, #332]	@ (800111c <HAL_UARTEx_RxEventCallback+0x174>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	54d1      	strb	r1, [r2, r3]

		// Set flag for main loop
		messageReady = 1;
 8000fd4:	4b52      	ldr	r3, [pc, #328]	@ (8001120 <HAL_UARTEx_RxEventCallback+0x178>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]

		HAL_UART_AbortReceive(huart);  // Stop DMA
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f008 fe78 	bl	8009cd0 <HAL_UART_AbortReceive>
		memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8000fe0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	484c      	ldr	r0, [pc, #304]	@ (8001118 <HAL_UARTEx_RxEventCallback+0x170>)
 8000fe8:	f00e fcad 	bl	800f946 <memset>

		// Restart DMA reception
		HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ff0:	4949      	ldr	r1, [pc, #292]	@ (8001118 <HAL_UARTEx_RxEventCallback+0x170>)
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f00b fd3d 	bl	800ca72 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a48      	ldr	r2, [pc, #288]	@ (8001124 <HAL_UARTEx_RxEventCallback+0x17c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d068      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a46      	ldr	r2, [pc, #280]	@ (8001128 <HAL_UARTEx_RxEventCallback+0x180>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d061      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a43      	ldr	r2, [pc, #268]	@ (800112c <HAL_UARTEx_RxEventCallback+0x184>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d05a      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a41      	ldr	r2, [pc, #260]	@ (8001130 <HAL_UARTEx_RxEventCallback+0x188>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d053      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a3e      	ldr	r2, [pc, #248]	@ (8001134 <HAL_UARTEx_RxEventCallback+0x18c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d04c      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a3c      	ldr	r2, [pc, #240]	@ (8001138 <HAL_UARTEx_RxEventCallback+0x190>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d045      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a39      	ldr	r2, [pc, #228]	@ (800113c <HAL_UARTEx_RxEventCallback+0x194>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d03e      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a37      	ldr	r2, [pc, #220]	@ (8001140 <HAL_UARTEx_RxEventCallback+0x198>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d037      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a34      	ldr	r2, [pc, #208]	@ (8001144 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d030      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a32      	ldr	r2, [pc, #200]	@ (8001148 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d029      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a2f      	ldr	r2, [pc, #188]	@ (800114c <HAL_UARTEx_RxEventCallback+0x1a4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d022      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a2d      	ldr	r2, [pc, #180]	@ (8001150 <HAL_UARTEx_RxEventCallback+0x1a8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d01b      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001154 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d014      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a28      	ldr	r2, [pc, #160]	@ (8001158 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a25      	ldr	r2, [pc, #148]	@ (800115c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d006      	beq.n	80010d8 <HAL_UARTEx_RxEventCallback+0x130>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a23      	ldr	r2, [pc, #140]	@ (8001160 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d10c      	bne.n	80010f2 <HAL_UARTEx_RxEventCallback+0x14a>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0208 	bic.w	r2, r2, #8
 80010ee:	601a      	str	r2, [r3, #0]
	}
}
 80010f0:	e00b      	b.n	800110a <HAL_UARTEx_RxEventCallback+0x162>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0204 	bic.w	r2, r2, #4
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40004c00 	.word	0x40004c00
 8001118:	24000898 	.word	0x24000898
 800111c:	240002f0 	.word	0x240002f0
 8001120:	240003f0 	.word	0x240003f0
 8001124:	40020010 	.word	0x40020010
 8001128:	40020028 	.word	0x40020028
 800112c:	40020040 	.word	0x40020040
 8001130:	40020058 	.word	0x40020058
 8001134:	40020070 	.word	0x40020070
 8001138:	40020088 	.word	0x40020088
 800113c:	400200a0 	.word	0x400200a0
 8001140:	400200b8 	.word	0x400200b8
 8001144:	40020410 	.word	0x40020410
 8001148:	40020428 	.word	0x40020428
 800114c:	40020440 	.word	0x40020440
 8001150:	40020458 	.word	0x40020458
 8001154:	40020470 	.word	0x40020470
 8001158:	40020488 	.word	0x40020488
 800115c:	400204a0 	.word	0x400204a0
 8001160:	400204b8 	.word	0x400204b8

08001164 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == InputButton_Pin)
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001174:	d006      	beq.n	8001184 <HAL_GPIO_EXTI_Callback+0x20>
	{

	}
	else if (GPIO_Pin == MAX30102_INT_Pin)
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800117c:	d102      	bne.n	8001184 <HAL_GPIO_EXTI_Callback+0x20>
	{
		max30102_on_interrupt(&SmartWatchData_handle.max30102);
 800117e:	4803      	ldr	r0, [pc, #12]	@ (800118c <HAL_GPIO_EXTI_Callback+0x28>)
 8001180:	f00d fba3 	bl	800e8ca <max30102_on_interrupt>
	}
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	24000ad0 	.word	0x24000ad0

08001190 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011a2:	f000 fff5 	bl	8002190 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011a6:	2301      	movs	r3, #1
 80011a8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011b2:	231f      	movs	r3, #31
 80011b4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011b6:	2387      	movs	r3, #135	@ 0x87
 80011b8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011be:	2300      	movs	r3, #0
 80011c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011c2:	2301      	movs	r3, #1
 80011c4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011c6:	2301      	movs	r3, #1
 80011c8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011d2:	463b      	mov	r3, r7
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 f813 	bl	8002200 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011da:	2004      	movs	r0, #4
 80011dc:	f000 fff0 	bl	80021c0 <HAL_MPU_Enable>

}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011f8:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <MX_SPI1_Init+0xac>)
 80011fa:	4a2a      	ldr	r2, [pc, #168]	@ (80012a4 <MX_SPI1_Init+0xb0>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001200:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001206:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001208:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800120c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001210:	2207      	movs	r2, #7
 8001212:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001214:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001216:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800121a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800121c:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <MX_SPI1_Init+0xac>)
 800121e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001222:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001224:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001226:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800122a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800122c:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <MX_SPI1_Init+0xac>)
 800122e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001232:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001234:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <MX_SPI1_Init+0xac>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_SPI1_Init+0xac>)
 800124e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001252:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001256:	2200      	movs	r2, #0
 8001258:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_SPI1_Init+0xac>)
 800125c:	2200      	movs	r2, #0
 800125e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001262:	2200      	movs	r2, #0
 8001264:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001268:	2200      	movs	r2, #0
 800126a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_SPI1_Init+0xac>)
 800126e:	2200      	movs	r2, #0
 8001270:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001274:	2200      	movs	r2, #0
 8001276:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_SPI1_Init+0xac>)
 800127a:	2200      	movs	r2, #0
 800127c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001280:	2200      	movs	r2, #0
 8001282:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MX_SPI1_Init+0xac>)
 8001286:	2200      	movs	r2, #0
 8001288:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_SPI1_Init+0xac>)
 800128c:	f007 ff7c 	bl	8009188 <HAL_SPI_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 8001296:	f7ff ffa7 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	240003f4 	.word	0x240003f4
 80012a4:	40013000 	.word	0x40013000

080012a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0ba      	sub	sp, #232	@ 0xe8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	22c0      	movs	r2, #192	@ 0xc0
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00e fb3c 	bl	800f946 <memset>
  if(spiHandle->Instance==SPI1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a40      	ldr	r2, [pc, #256]	@ (80013d4 <HAL_SPI_MspInit+0x12c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d179      	bne.n	80013cc <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 f96b 	bl	80075c8 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80012f8:	f7ff ff76 	bl	80011e8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fc:	4b36      	ldr	r3, [pc, #216]	@ (80013d8 <HAL_SPI_MspInit+0x130>)
 80012fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001302:	4a35      	ldr	r2, [pc, #212]	@ (80013d8 <HAL_SPI_MspInit+0x130>)
 8001304:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001308:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800130c:	4b32      	ldr	r3, [pc, #200]	@ (80013d8 <HAL_SPI_MspInit+0x130>)
 800130e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001312:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <HAL_SPI_MspInit+0x130>)
 800131c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001320:	4a2d      	ldr	r2, [pc, #180]	@ (80013d8 <HAL_SPI_MspInit+0x130>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800132a:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <HAL_SPI_MspInit+0x130>)
 800132c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST7789_SCK_Pin|ST7789_MOSI_Pin;
 8001338:	23a0      	movs	r3, #160	@ 0xa0
 800133a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001350:	2305      	movs	r3, #5
 8001352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800135a:	4619      	mov	r1, r3
 800135c:	481f      	ldr	r0, [pc, #124]	@ (80013dc <HAL_SPI_MspInit+0x134>)
 800135e:	f003 fe79 	bl	8005054 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8001362:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 8001364:	4a1f      	ldr	r2, [pc, #124]	@ (80013e4 <HAL_SPI_MspInit+0x13c>)
 8001366:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001368:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 800136a:	2226      	movs	r2, #38	@ 0x26
 800136c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136e:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 8001370:	2240      	movs	r2, #64	@ 0x40
 8001372:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 800137c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001380:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 8001390:	2200      	movs	r2, #0
 8001392:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 8001396:	2200      	movs	r2, #0
 8001398:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013a0:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 80013a2:	f000 ff6d 	bl	8002280 <HAL_DMA_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80013ac:	f7ff ff1c 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 80013b4:	679a      	str	r2, [r3, #120]	@ 0x78
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <HAL_SPI_MspInit+0x138>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	2023      	movs	r0, #35	@ 0x23
 80013c2:	f000 feb0 	bl	8002126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013c6:	2023      	movs	r0, #35	@ 0x23
 80013c8:	f000 fec7 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013cc:	bf00      	nop
 80013ce:	37e8      	adds	r7, #232	@ 0xe8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40013000 	.word	0x40013000
 80013d8:	58024400 	.word	0x58024400
 80013dc:	58020000 	.word	0x58020000
 80013e0:	2400047c 	.word	0x2400047c
 80013e4:	40020088 	.word	0x40020088

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <HAL_MspInit+0x30>)
 80013f0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80013f4:	4a08      	ldr	r2, [pc, #32]	@ (8001418 <HAL_MspInit+0x30>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_MspInit+0x30>)
 8001400:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	58024400 	.word	0x58024400

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <NMI_Handler+0x4>

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <MemManage_Handler+0x4>

08001434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <UsageFault_Handler+0x4>

08001444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001472:	f000 fd39 	bl	8001ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <DMA1_Stream0_IRQHandler+0x10>)
 8001482:	f002 fa59 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	240007a4 	.word	0x240007a4

08001490 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001496:	f002 fa4f 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2400081c 	.word	0x2400081c

080014a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <DMA1_Stream2_IRQHandler+0x10>)
 80014aa:	f002 fa45 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	240006b4 	.word	0x240006b4

080014b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <DMA1_Stream3_IRQHandler+0x10>)
 80014be:	f002 fa3b 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2400072c 	.word	0x2400072c

080014cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <DMA1_Stream5_IRQHandler+0x10>)
 80014d2:	f002 fa31 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2400047c 	.word	0x2400047c

080014e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 80014e4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80014e8:	f003 ff7d 	bl	80053e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80014f4:	4802      	ldr	r0, [pc, #8]	@ (8001500 <SPI1_IRQHandler+0x10>)
 80014f6:	f007 ff6b 	bl	80093d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	240003f4 	.word	0x240003f4

08001504 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(InputButton_Pin);
 8001508:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800150c:	f003 ff6b 	bl	80053e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <UART4_IRQHandler+0x10>)
 800151a:	f008 fc8f 	bl	8009e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	240004f8 	.word	0x240004f8

08001528 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <UART5_IRQHandler+0x10>)
 800152e:	f008 fc85 	bl	8009e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2400058c 	.word	0x2400058c

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001556:	f00e fa59 	bl	800fa0c <__errno>
 800155a:	4603      	mov	r3, r0
 800155c:	2216      	movs	r2, #22
 800155e:	601a      	str	r2, [r3, #0]
  return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_exit>:

void _exit (int status)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffe7 	bl	800154c <_kill>
  while (1) {}    /* Make sure we hang here */
 800157e:	bf00      	nop
 8001580:	e7fd      	b.n	800157e <_exit+0x12>

08001582 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e00a      	b.n	80015aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001594:	f3af 8000 	nop.w
 8001598:	4601      	mov	r1, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	60ba      	str	r2, [r7, #8]
 80015a0:	b2ca      	uxtb	r2, r1
 80015a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	dbf0      	blt.n	8001594 <_read+0x12>
  }

  return len;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	e009      	b.n	80015e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	60ba      	str	r2, [r7, #8]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fc16 	bl	8000e08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbf1      	blt.n	80015ce <_write+0x12>
  }
  return len;
 80015ea:	687b      	ldr	r3, [r7, #4]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_close>:

int _close(int file)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800161c:	605a      	str	r2, [r3, #4]
  return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_isatty>:

int _isatty(int file)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f00e f9be 	bl	800fa0c <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	24100000 	.word	0x24100000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	240004f4 	.word	0x240004f4
 80016c4:	24000e18 	.word	0x24000e18

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016cc:	4b3e      	ldr	r3, [pc, #248]	@ (80017c8 <SystemInit+0x100>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d2:	4a3d      	ldr	r2, [pc, #244]	@ (80017c8 <SystemInit+0x100>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016dc:	4b3b      	ldr	r3, [pc, #236]	@ (80017cc <SystemInit+0x104>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d807      	bhi.n	80016f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016e8:	4b38      	ldr	r3, [pc, #224]	@ (80017cc <SystemInit+0x104>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 030f 	bic.w	r3, r3, #15
 80016f0:	4a36      	ldr	r2, [pc, #216]	@ (80017cc <SystemInit+0x104>)
 80016f2:	f043 0303 	orr.w	r3, r3, #3
 80016f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016f8:	4b35      	ldr	r3, [pc, #212]	@ (80017d0 <SystemInit+0x108>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a34      	ldr	r2, [pc, #208]	@ (80017d0 <SystemInit+0x108>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001704:	4b32      	ldr	r3, [pc, #200]	@ (80017d0 <SystemInit+0x108>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800170a:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <SystemInit+0x108>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4930      	ldr	r1, [pc, #192]	@ (80017d0 <SystemInit+0x108>)
 8001710:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <SystemInit+0x10c>)
 8001712:	4013      	ands	r3, r2
 8001714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001716:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <SystemInit+0x104>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <SystemInit+0x104>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 030f 	bic.w	r3, r3, #15
 800172a:	4a28      	ldr	r2, [pc, #160]	@ (80017cc <SystemInit+0x104>)
 800172c:	f043 0303 	orr.w	r3, r3, #3
 8001730:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001732:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <SystemInit+0x108>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001738:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <SystemInit+0x108>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800173e:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <SystemInit+0x108>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <SystemInit+0x108>)
 8001746:	4a24      	ldr	r2, [pc, #144]	@ (80017d8 <SystemInit+0x110>)
 8001748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800174a:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <SystemInit+0x108>)
 800174c:	4a23      	ldr	r2, [pc, #140]	@ (80017dc <SystemInit+0x114>)
 800174e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001750:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <SystemInit+0x108>)
 8001752:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <SystemInit+0x118>)
 8001754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001756:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <SystemInit+0x108>)
 8001758:	2200      	movs	r2, #0
 800175a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800175c:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <SystemInit+0x108>)
 800175e:	4a20      	ldr	r2, [pc, #128]	@ (80017e0 <SystemInit+0x118>)
 8001760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001762:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <SystemInit+0x108>)
 8001764:	2200      	movs	r2, #0
 8001766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <SystemInit+0x108>)
 800176a:	4a1d      	ldr	r2, [pc, #116]	@ (80017e0 <SystemInit+0x118>)
 800176c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800176e:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <SystemInit+0x108>)
 8001770:	2200      	movs	r2, #0
 8001772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001774:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <SystemInit+0x108>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <SystemInit+0x108>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800177e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <SystemInit+0x108>)
 8001782:	2200      	movs	r2, #0
 8001784:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001786:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <SystemInit+0x108>)
 8001788:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800178c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d113      	bne.n	80017bc <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001794:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <SystemInit+0x108>)
 8001796:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800179a:	4a0d      	ldr	r2, [pc, #52]	@ (80017d0 <SystemInit+0x108>)
 800179c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017a0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <SystemInit+0x11c>)
 80017a6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017aa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <SystemInit+0x108>)
 80017ae:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80017b2:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <SystemInit+0x108>)
 80017b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017b8:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	52002000 	.word	0x52002000
 80017d0:	58024400 	.word	0x58024400
 80017d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80017d8:	02020200 	.word	0x02020200
 80017dc:	01ff0000 	.word	0x01ff0000
 80017e0:	01010280 	.word	0x01010280
 80017e4:	52004000 	.word	0x52004000

080017e8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <ExitRun0Mode+0x2c>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <ExitRun0Mode+0x2c>)
 80017f2:	f023 0302 	bic.w	r3, r3, #2
 80017f6:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80017f8:	bf00      	nop
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <ExitRun0Mode+0x2c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f9      	beq.n	80017fa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001806:	bf00      	nop
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	58024800 	.word	0x58024800

08001818 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800181c:	4b22      	ldr	r3, [pc, #136]	@ (80018a8 <MX_UART4_Init+0x90>)
 800181e:	4a23      	ldr	r2, [pc, #140]	@ (80018ac <MX_UART4_Init+0x94>)
 8001820:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001822:	4b21      	ldr	r3, [pc, #132]	@ (80018a8 <MX_UART4_Init+0x90>)
 8001824:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001828:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <MX_UART4_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b1d      	ldr	r3, [pc, #116]	@ (80018a8 <MX_UART4_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001836:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <MX_UART4_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_UART4_Init+0x90>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <MX_UART4_Init+0x90>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <MX_UART4_Init+0x90>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <MX_UART4_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <MX_UART4_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185a:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <MX_UART4_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001860:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <MX_UART4_Init+0x90>)
 8001862:	f008 f88a 	bl	800997a <HAL_UART_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800186c:	f7ff fcbc 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001870:	2100      	movs	r1, #0
 8001872:	480d      	ldr	r0, [pc, #52]	@ (80018a8 <MX_UART4_Init+0x90>)
 8001874:	f00b f881 	bl	800c97a <HAL_UARTEx_SetTxFifoThreshold>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800187e:	f7ff fcb3 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4808      	ldr	r0, [pc, #32]	@ (80018a8 <MX_UART4_Init+0x90>)
 8001886:	f00b f8b6 	bl	800c9f6 <HAL_UARTEx_SetRxFifoThreshold>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001890:	f7ff fcaa 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	@ (80018a8 <MX_UART4_Init+0x90>)
 8001896:	f00b f837 	bl	800c908 <HAL_UARTEx_DisableFifoMode>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80018a0:	f7ff fca2 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	240004f8 	.word	0x240004f8
 80018ac:	40004c00 	.word	0x40004c00

080018b0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80018b4:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <MX_UART5_Init+0x90>)
 80018b6:	4a23      	ldr	r2, [pc, #140]	@ (8001944 <MX_UART5_Init+0x94>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80018ba:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <MX_UART5_Init+0x90>)
 80018bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018c0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <MX_UART5_Init+0x90>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <MX_UART5_Init+0x90>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001940 <MX_UART5_Init+0x90>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001940 <MX_UART5_Init+0x90>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <MX_UART5_Init+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <MX_UART5_Init+0x90>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <MX_UART5_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <MX_UART5_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f2:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <MX_UART5_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80018f8:	4811      	ldr	r0, [pc, #68]	@ (8001940 <MX_UART5_Init+0x90>)
 80018fa:	f008 f83e 	bl	800997a <HAL_UART_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001904:	f7ff fc70 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001908:	2100      	movs	r1, #0
 800190a:	480d      	ldr	r0, [pc, #52]	@ (8001940 <MX_UART5_Init+0x90>)
 800190c:	f00b f835 	bl	800c97a <HAL_UARTEx_SetTxFifoThreshold>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001916:	f7ff fc67 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800191a:	2100      	movs	r1, #0
 800191c:	4808      	ldr	r0, [pc, #32]	@ (8001940 <MX_UART5_Init+0x90>)
 800191e:	f00b f86a 	bl	800c9f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001928:	f7ff fc5e 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	@ (8001940 <MX_UART5_Init+0x90>)
 800192e:	f00a ffeb 	bl	800c908 <HAL_UARTEx_DisableFifoMode>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001938:	f7ff fc56 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2400058c 	.word	0x2400058c
 8001944:	40005000 	.word	0x40005000

08001948 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800194c:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 800194e:	4a23      	ldr	r2, [pc, #140]	@ (80019dc <MX_USART3_UART_Init+0x94>)
 8001950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001952:	4b21      	ldr	r3, [pc, #132]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001966:	4b1c      	ldr	r3, [pc, #112]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197e:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001984:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198a:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001990:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 8001992:	f007 fff2 	bl	800997a <HAL_UART_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800199c:	f7ff fc24 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a0:	2100      	movs	r1, #0
 80019a2:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 80019a4:	f00a ffe9 	bl	800c97a <HAL_UARTEx_SetTxFifoThreshold>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019ae:	f7ff fc1b 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b2:	2100      	movs	r1, #0
 80019b4:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 80019b6:	f00b f81e 	bl	800c9f6 <HAL_UARTEx_SetRxFifoThreshold>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019c0:	f7ff fc12 	bl	80011e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <MX_USART3_UART_Init+0x90>)
 80019c6:	f00a ff9f 	bl	800c908 <HAL_UARTEx_DisableFifoMode>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019d0:	f7ff fc0a 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	24000620 	.word	0x24000620
 80019dc:	40004800 	.word	0x40004800

080019e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0be      	sub	sp, #248	@ 0xf8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	22c0      	movs	r2, #192	@ 0xc0
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00d ffa0 	bl	800f946 <memset>
  if(uartHandle->Instance==UART4)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4ab1      	ldr	r2, [pc, #708]	@ (8001cd0 <HAL_UART_MspInit+0x2f0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	f040 80ac 	bne.w	8001b6a <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a12:	f04f 0202 	mov.w	r2, #2
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f005 fdcd 	bl	80075c8 <HAL_RCCEx_PeriphCLKConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001a34:	f7ff fbd8 	bl	80011e8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a38:	4ba6      	ldr	r3, [pc, #664]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001a3a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a3e:	4aa5      	ldr	r2, [pc, #660]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001a40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a44:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001a48:	4ba2      	ldr	r3, [pc, #648]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001a4a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	4b9f      	ldr	r3, [pc, #636]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001a58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a5c:	4a9d      	ldr	r2, [pc, #628]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a66:	4b9b      	ldr	r3, [pc, #620]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001a68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 8001a74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a8e:	2308      	movs	r3, #8
 8001a90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	488f      	ldr	r0, [pc, #572]	@ (8001cd8 <HAL_UART_MspInit+0x2f8>)
 8001a9c:	f003 fada 	bl	8005054 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001aa2:	4a8f      	ldr	r2, [pc, #572]	@ (8001ce0 <HAL_UART_MspInit+0x300>)
 8001aa4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001aa8:	223f      	movs	r2, #63	@ 0x3f
 8001aaa:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aac:	4b8b      	ldr	r3, [pc, #556]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab2:	4b8a      	ldr	r3, [pc, #552]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab8:	4b88      	ldr	r3, [pc, #544]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001aba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001abe:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac0:	4b86      	ldr	r3, [pc, #536]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac6:	4b85      	ldr	r3, [pc, #532]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001acc:	4b83      	ldr	r3, [pc, #524]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001ace:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ad2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ad4:	4b81      	ldr	r3, [pc, #516]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ada:	4b80      	ldr	r3, [pc, #512]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001ae0:	487e      	ldr	r0, [pc, #504]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001ae2:	f000 fbcd 	bl	8002280 <HAL_DMA_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001aec:	f7ff fb7c 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a7a      	ldr	r2, [pc, #488]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001af4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001af8:	4a78      	ldr	r2, [pc, #480]	@ (8001cdc <HAL_UART_MspInit+0x2fc>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 8001afe:	4b79      	ldr	r3, [pc, #484]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b00:	4a79      	ldr	r2, [pc, #484]	@ (8001ce8 <HAL_UART_MspInit+0x308>)
 8001b02:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001b04:	4b77      	ldr	r3, [pc, #476]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b06:	2240      	movs	r2, #64	@ 0x40
 8001b08:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b0c:	2240      	movs	r2, #64	@ 0x40
 8001b0e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b10:	4b74      	ldr	r3, [pc, #464]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b16:	4b73      	ldr	r3, [pc, #460]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b1c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b1e:	4b71      	ldr	r3, [pc, #452]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001b2a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b30:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b36:	4b6b      	ldr	r3, [pc, #428]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001b3c:	4869      	ldr	r0, [pc, #420]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b3e:	f000 fb9f 	bl	8002280 <HAL_DMA_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8001b48:	f7ff fb4e 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a65      	ldr	r2, [pc, #404]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b50:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b52:	4a64      	ldr	r2, [pc, #400]	@ (8001ce4 <HAL_UART_MspInit+0x304>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2034      	movs	r0, #52	@ 0x34
 8001b5e:	f000 fae2 	bl	8002126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b62:	2034      	movs	r0, #52	@ 0x34
 8001b64:	f000 faf9 	bl	800215a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b68:	e116      	b.n	8001d98 <HAL_UART_MspInit+0x3b8>
  else if(uartHandle->Instance==UART5)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a5f      	ldr	r2, [pc, #380]	@ (8001cec <HAL_UART_MspInit+0x30c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	f040 80c5 	bne.w	8001d00 <HAL_UART_MspInit+0x320>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001b76:	f04f 0202 	mov.w	r2, #2
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f005 fd1b 	bl	80075c8 <HAL_RCCEx_PeriphCLKConfig>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001b98:	f7ff fb26 	bl	80011e8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001b9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001ba2:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001ba4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ba8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001bac:	4b49      	ldr	r3, [pc, #292]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001bae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b46      	ldr	r3, [pc, #280]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bc0:	4a44      	ldr	r2, [pc, #272]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001bc2:	f043 0302 	orr.w	r3, r3, #2
 8001bc6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001bca:	4b42      	ldr	r3, [pc, #264]	@ (8001cd4 <HAL_UART_MspInit+0x2f4>)
 8001bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GNSS_RX_Pin|GNSS_TX_Pin;
 8001bd8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001bdc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001bf2:	230e      	movs	r3, #14
 8001bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4836      	ldr	r0, [pc, #216]	@ (8001cd8 <HAL_UART_MspInit+0x2f8>)
 8001c00:	f003 fa28 	bl	8005054 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001c04:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c06:	4a3b      	ldr	r2, [pc, #236]	@ (8001cf4 <HAL_UART_MspInit+0x314>)
 8001c08:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001c0a:	4b39      	ldr	r3, [pc, #228]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c0c:	2241      	movs	r2, #65	@ 0x41
 8001c0e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c10:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c16:	4b36      	ldr	r3, [pc, #216]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1c:	4b34      	ldr	r3, [pc, #208]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c22:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c24:	4b32      	ldr	r3, [pc, #200]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2a:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001c30:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c36:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c38:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001c44:	482a      	ldr	r0, [pc, #168]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c46:	f000 fb1b 	bl	8002280 <HAL_DMA_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8001c50:	f7ff faca 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c5c:	4a24      	ldr	r2, [pc, #144]	@ (8001cf0 <HAL_UART_MspInit+0x310>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8001c62:	4b25      	ldr	r3, [pc, #148]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001c64:	4a25      	ldr	r2, [pc, #148]	@ (8001cfc <HAL_UART_MspInit+0x31c>)
 8001c66:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8001c68:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001c6a:	2242      	movs	r2, #66	@ 0x42
 8001c6c:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c6e:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001c70:	2240      	movs	r2, #64	@ 0x40
 8001c72:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c74:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001c7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c80:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c82:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c94:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001ca0:	4815      	ldr	r0, [pc, #84]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001ca2:	f000 faed 	bl	8002280 <HAL_DMA_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8001cac:	f7ff fa9c 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001cb4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001cb6:	4a10      	ldr	r2, [pc, #64]	@ (8001cf8 <HAL_UART_MspInit+0x318>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2035      	movs	r0, #53	@ 0x35
 8001cc2:	f000 fa30 	bl	8002126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001cc6:	2035      	movs	r0, #53	@ 0x35
 8001cc8:	f000 fa47 	bl	800215a <HAL_NVIC_EnableIRQ>
}
 8001ccc:	e064      	b.n	8001d98 <HAL_UART_MspInit+0x3b8>
 8001cce:	bf00      	nop
 8001cd0:	40004c00 	.word	0x40004c00
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	58020400 	.word	0x58020400
 8001cdc:	240006b4 	.word	0x240006b4
 8001ce0:	40020040 	.word	0x40020040
 8001ce4:	2400072c 	.word	0x2400072c
 8001ce8:	40020058 	.word	0x40020058
 8001cec:	40005000 	.word	0x40005000
 8001cf0:	240007a4 	.word	0x240007a4
 8001cf4:	40020010 	.word	0x40020010
 8001cf8:	2400081c 	.word	0x2400081c
 8001cfc:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a26      	ldr	r2, [pc, #152]	@ (8001da0 <HAL_UART_MspInit+0x3c0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d146      	bne.n	8001d98 <HAL_UART_MspInit+0x3b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d0a:	f04f 0202 	mov.w	r2, #2
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	4618      	mov	r0, r3
 8001d22:	f005 fc51 	bl	80075c8 <HAL_RCCEx_PeriphCLKConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_UART_MspInit+0x350>
      Error_Handler();
 8001d2c:	f7ff fa5c 	bl	80011e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d30:	4b1c      	ldr	r3, [pc, #112]	@ (8001da4 <HAL_UART_MspInit+0x3c4>)
 8001d32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d36:	4a1b      	ldr	r2, [pc, #108]	@ (8001da4 <HAL_UART_MspInit+0x3c4>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d3c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001d40:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <HAL_UART_MspInit+0x3c4>)
 8001d42:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <HAL_UART_MspInit+0x3c4>)
 8001d50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d54:	4a13      	ldr	r2, [pc, #76]	@ (8001da4 <HAL_UART_MspInit+0x3c4>)
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001d5e:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <HAL_UART_MspInit+0x3c4>)
 8001d60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d86:	2307      	movs	r3, #7
 8001d88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d8c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <HAL_UART_MspInit+0x3c8>)
 8001d94:	f003 f95e 	bl	8005054 <HAL_GPIO_Init>
}
 8001d98:	bf00      	nop
 8001d9a:	37f8      	adds	r7, #248	@ 0xf8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40004800 	.word	0x40004800
 8001da4:	58024400 	.word	0x58024400
 8001da8:	58020c00 	.word	0x58020c00

08001dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001de8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001db0:	f7ff fd1a 	bl	80017e8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db4:	f7ff fc88 	bl	80016c8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	@ (8001df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f00d fe1b 	bl	800fa18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7ff f823 	bl	8000e2c <main>
  bx  lr
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001de8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001dec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001df0:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001df4:	08012044 	.word	0x08012044
  ldr r2, =_sbss
 8001df8:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001dfc:	24000e18 	.word	0x24000e18

08001e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0a:	2003      	movs	r0, #3
 8001e0c:	f000 f980 	bl	8002110 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e10:	f005 fa04 	bl	800721c <HAL_RCC_GetSysClockFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_Init+0x68>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	4913      	ldr	r1, [pc, #76]	@ (8001e70 <HAL_Init+0x6c>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <HAL_Init+0x68>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	4a0e      	ldr	r2, [pc, #56]	@ (8001e70 <HAL_Init+0x6c>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	4a0b      	ldr	r2, [pc, #44]	@ (8001e74 <HAL_Init+0x70>)
 8001e46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e48:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <HAL_Init+0x74>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f000 f814 	bl	8001e7c <HAL_InitTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e002      	b.n	8001e64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5e:	f7ff fac3 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	08011a88 	.word	0x08011a88
 8001e74:	24000004 	.word	0x24000004
 8001e78:	24000000 	.word	0x24000000

08001e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e84:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_InitTick+0x60>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e021      	b.n	8001ed4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <HAL_InitTick+0x64>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_InitTick+0x60>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f965 	bl	8002176 <HAL_SYSTICK_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00e      	b.n	8001ed4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d80a      	bhi.n	8001ed2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f000 f92f 	bl	8002126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec8:	4a06      	ldr	r2, [pc, #24]	@ (8001ee4 <HAL_InitTick+0x68>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2400000c 	.word	0x2400000c
 8001ee0:	24000000 	.word	0x24000000
 8001ee4:	24000008 	.word	0x24000008

08001ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_IncTick+0x20>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_IncTick+0x24>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <HAL_IncTick+0x24>)
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2400000c 	.word	0x2400000c
 8001f0c:	24000894 	.word	0x24000894

08001f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b03      	ldr	r3, [pc, #12]	@ (8001f24 <HAL_GetTick+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	24000894 	.word	0x24000894

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff ffee 	bl	8001f10 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d005      	beq.n	8001f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <HAL_Delay+0x44>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4e:	bf00      	nop
 8001f50:	f7ff ffde 	bl	8001f10 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <HAL_Delay+0x28>
  {
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2400000c 	.word	0x2400000c

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00
 8001fb4:	05fa0000 	.word	0x05fa0000

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4907      	ldr	r1, [pc, #28]	@ (800200c <__NVIC_EnableIRQ+0x38>)
 8001fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	@ (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	@ (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	@ 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	@ 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020dc:	d301      	bcc.n	80020e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020de:	2301      	movs	r3, #1
 80020e0:	e00f      	b.n	8002102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e2:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <SysTick_Config+0x40>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ea:	210f      	movs	r1, #15
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f7ff ff8e 	bl	8002010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f4:	4b05      	ldr	r3, [pc, #20]	@ (800210c <SysTick_Config+0x40>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fa:	4b04      	ldr	r3, [pc, #16]	@ (800210c <SysTick_Config+0x40>)
 80020fc:	2207      	movs	r2, #7
 80020fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	e000e010 	.word	0xe000e010

08002110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff29 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff40 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ff90 	bl	8002064 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5f 	bl	8002010 <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff33 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffa4 	bl	80020cc <SysTick_Config>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002194:	f3bf 8f5f 	dmb	sy
}
 8002198:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <HAL_MPU_Disable+0x28>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	4a06      	ldr	r2, [pc, #24]	@ (80021b8 <HAL_MPU_Disable+0x28>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_MPU_Disable+0x2c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00
 80021bc:	e000ed90 	.word	0xe000ed90

080021c0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021c8:	4a0b      	ldr	r2, [pc, #44]	@ (80021f8 <HAL_MPU_Enable+0x38>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_MPU_Enable+0x3c>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	4a09      	ldr	r2, [pc, #36]	@ (80021fc <HAL_MPU_Enable+0x3c>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021dc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80021de:	f3bf 8f4f 	dsb	sy
}
 80021e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021e4:	f3bf 8f6f 	isb	sy
}
 80021e8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed90 	.word	0xe000ed90
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	785a      	ldrb	r2, [r3, #1]
 800220c:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <HAL_MPU_ConfigRegion+0x7c>)
 800220e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002210:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <HAL_MPU_ConfigRegion+0x7c>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	4a19      	ldr	r2, [pc, #100]	@ (800227c <HAL_MPU_ConfigRegion+0x7c>)
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800221c:	4a17      	ldr	r2, [pc, #92]	@ (800227c <HAL_MPU_ConfigRegion+0x7c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	7b1b      	ldrb	r3, [r3, #12]
 8002228:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7adb      	ldrb	r3, [r3, #11]
 800222e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002230:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7a9b      	ldrb	r3, [r3, #10]
 8002236:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002238:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7b5b      	ldrb	r3, [r3, #13]
 800223e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002240:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7b9b      	ldrb	r3, [r3, #14]
 8002246:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002248:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7bdb      	ldrb	r3, [r3, #15]
 800224e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002250:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7a5b      	ldrb	r3, [r3, #9]
 8002256:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002258:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7a1b      	ldrb	r3, [r3, #8]
 800225e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002260:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	7812      	ldrb	r2, [r2, #0]
 8002266:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002268:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800226a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800226c:	6113      	str	r3, [r2, #16]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed90 	.word	0xe000ed90

08002280 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff fe42 	bl	8001f10 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e37d      	b.n	8002994 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a66      	ldr	r2, [pc, #408]	@ (8002438 <HAL_DMA_Init+0x1b8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d04a      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a65      	ldr	r2, [pc, #404]	@ (800243c <HAL_DMA_Init+0x1bc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d045      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a63      	ldr	r2, [pc, #396]	@ (8002440 <HAL_DMA_Init+0x1c0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d040      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a62      	ldr	r2, [pc, #392]	@ (8002444 <HAL_DMA_Init+0x1c4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d03b      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a60      	ldr	r2, [pc, #384]	@ (8002448 <HAL_DMA_Init+0x1c8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d036      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a5f      	ldr	r2, [pc, #380]	@ (800244c <HAL_DMA_Init+0x1cc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d031      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002450 <HAL_DMA_Init+0x1d0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02c      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002454 <HAL_DMA_Init+0x1d4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d027      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002458 <HAL_DMA_Init+0x1d8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d022      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a59      	ldr	r2, [pc, #356]	@ (800245c <HAL_DMA_Init+0x1dc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d01d      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a57      	ldr	r2, [pc, #348]	@ (8002460 <HAL_DMA_Init+0x1e0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d018      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a56      	ldr	r2, [pc, #344]	@ (8002464 <HAL_DMA_Init+0x1e4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d013      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a54      	ldr	r2, [pc, #336]	@ (8002468 <HAL_DMA_Init+0x1e8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00e      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a53      	ldr	r2, [pc, #332]	@ (800246c <HAL_DMA_Init+0x1ec>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d009      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a51      	ldr	r2, [pc, #324]	@ (8002470 <HAL_DMA_Init+0x1f0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d004      	beq.n	8002338 <HAL_DMA_Init+0xb8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a50      	ldr	r2, [pc, #320]	@ (8002474 <HAL_DMA_Init+0x1f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_DMA_Init+0xbc>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_DMA_Init+0xbe>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 813c 	beq.w	80025bc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a37      	ldr	r2, [pc, #220]	@ (8002438 <HAL_DMA_Init+0x1b8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d04a      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a36      	ldr	r2, [pc, #216]	@ (800243c <HAL_DMA_Init+0x1bc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d045      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a34      	ldr	r2, [pc, #208]	@ (8002440 <HAL_DMA_Init+0x1c0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d040      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a33      	ldr	r2, [pc, #204]	@ (8002444 <HAL_DMA_Init+0x1c4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d03b      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a31      	ldr	r2, [pc, #196]	@ (8002448 <HAL_DMA_Init+0x1c8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d036      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a30      	ldr	r2, [pc, #192]	@ (800244c <HAL_DMA_Init+0x1cc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d031      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2e      	ldr	r2, [pc, #184]	@ (8002450 <HAL_DMA_Init+0x1d0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d02c      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a2d      	ldr	r2, [pc, #180]	@ (8002454 <HAL_DMA_Init+0x1d4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d027      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002458 <HAL_DMA_Init+0x1d8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d022      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2a      	ldr	r2, [pc, #168]	@ (800245c <HAL_DMA_Init+0x1dc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d01d      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a28      	ldr	r2, [pc, #160]	@ (8002460 <HAL_DMA_Init+0x1e0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d018      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a27      	ldr	r2, [pc, #156]	@ (8002464 <HAL_DMA_Init+0x1e4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a25      	ldr	r2, [pc, #148]	@ (8002468 <HAL_DMA_Init+0x1e8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00e      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a24      	ldr	r2, [pc, #144]	@ (800246c <HAL_DMA_Init+0x1ec>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a22      	ldr	r2, [pc, #136]	@ (8002470 <HAL_DMA_Init+0x1f0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_Init+0x174>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a21      	ldr	r2, [pc, #132]	@ (8002474 <HAL_DMA_Init+0x1f4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d108      	bne.n	8002406 <HAL_DMA_Init+0x186>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e007      	b.n	8002416 <HAL_DMA_Init+0x196>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002416:	e02f      	b.n	8002478 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002418:	f7ff fd7a 	bl	8001f10 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b05      	cmp	r3, #5
 8002424:	d928      	bls.n	8002478 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2203      	movs	r2, #3
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e2ad      	b.n	8002994 <HAL_DMA_Init+0x714>
 8002438:	40020010 	.word	0x40020010
 800243c:	40020028 	.word	0x40020028
 8002440:	40020040 	.word	0x40020040
 8002444:	40020058 	.word	0x40020058
 8002448:	40020070 	.word	0x40020070
 800244c:	40020088 	.word	0x40020088
 8002450:	400200a0 	.word	0x400200a0
 8002454:	400200b8 	.word	0x400200b8
 8002458:	40020410 	.word	0x40020410
 800245c:	40020428 	.word	0x40020428
 8002460:	40020440 	.word	0x40020440
 8002464:	40020458 	.word	0x40020458
 8002468:	40020470 	.word	0x40020470
 800246c:	40020488 	.word	0x40020488
 8002470:	400204a0 	.word	0x400204a0
 8002474:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1c8      	bne.n	8002418 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4b73      	ldr	r3, [pc, #460]	@ (8002660 <HAL_DMA_Init+0x3e0>)
 8002492:	4013      	ands	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800249e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d107      	bne.n	80024dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d4:	4313      	orrs	r3, r2
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b28      	cmp	r3, #40	@ 0x28
 80024e2:	d903      	bls.n	80024ec <HAL_DMA_Init+0x26c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80024ea:	d91f      	bls.n	800252c <HAL_DMA_Init+0x2ac>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80024f2:	d903      	bls.n	80024fc <HAL_DMA_Init+0x27c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b42      	cmp	r3, #66	@ 0x42
 80024fa:	d917      	bls.n	800252c <HAL_DMA_Init+0x2ac>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b46      	cmp	r3, #70	@ 0x46
 8002502:	d903      	bls.n	800250c <HAL_DMA_Init+0x28c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b48      	cmp	r3, #72	@ 0x48
 800250a:	d90f      	bls.n	800252c <HAL_DMA_Init+0x2ac>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b4e      	cmp	r3, #78	@ 0x4e
 8002512:	d903      	bls.n	800251c <HAL_DMA_Init+0x29c>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b52      	cmp	r3, #82	@ 0x52
 800251a:	d907      	bls.n	800252c <HAL_DMA_Init+0x2ac>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b73      	cmp	r3, #115	@ 0x73
 8002522:	d905      	bls.n	8002530 <HAL_DMA_Init+0x2b0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b77      	cmp	r3, #119	@ 0x77
 800252a:	d801      	bhi.n	8002530 <HAL_DMA_Init+0x2b0>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <HAL_DMA_Init+0x2b2>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800253c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f023 0307 	bic.w	r3, r3, #7
 8002554:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	2b04      	cmp	r3, #4
 8002566:	d117      	bne.n	8002598 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00e      	beq.n	8002598 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f002 fbe0 	bl	8004d40 <DMA_CheckFifoParam>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2240      	movs	r2, #64	@ 0x40
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e1fd      	b.n	8002994 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f002 fb1b 	bl	8004bdc <DMA_CalcBaseAndBitshift>
 80025a6:	4603      	mov	r3, r0
 80025a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	223f      	movs	r2, #63	@ 0x3f
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	e0fd      	b.n	80027b8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a28      	ldr	r2, [pc, #160]	@ (8002664 <HAL_DMA_Init+0x3e4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d04a      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a27      	ldr	r2, [pc, #156]	@ (8002668 <HAL_DMA_Init+0x3e8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d045      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a25      	ldr	r2, [pc, #148]	@ (800266c <HAL_DMA_Init+0x3ec>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d040      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a24      	ldr	r2, [pc, #144]	@ (8002670 <HAL_DMA_Init+0x3f0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d03b      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a22      	ldr	r2, [pc, #136]	@ (8002674 <HAL_DMA_Init+0x3f4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d036      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a21      	ldr	r2, [pc, #132]	@ (8002678 <HAL_DMA_Init+0x3f8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d031      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1f      	ldr	r2, [pc, #124]	@ (800267c <HAL_DMA_Init+0x3fc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d02c      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1e      	ldr	r2, [pc, #120]	@ (8002680 <HAL_DMA_Init+0x400>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d027      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1c      	ldr	r2, [pc, #112]	@ (8002684 <HAL_DMA_Init+0x404>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d022      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1b      	ldr	r2, [pc, #108]	@ (8002688 <HAL_DMA_Init+0x408>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d01d      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a19      	ldr	r2, [pc, #100]	@ (800268c <HAL_DMA_Init+0x40c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d018      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <HAL_DMA_Init+0x410>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d013      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a16      	ldr	r2, [pc, #88]	@ (8002694 <HAL_DMA_Init+0x414>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00e      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a15      	ldr	r2, [pc, #84]	@ (8002698 <HAL_DMA_Init+0x418>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d009      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a13      	ldr	r2, [pc, #76]	@ (800269c <HAL_DMA_Init+0x41c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d004      	beq.n	800265c <HAL_DMA_Init+0x3dc>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a12      	ldr	r2, [pc, #72]	@ (80026a0 <HAL_DMA_Init+0x420>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d123      	bne.n	80026a4 <HAL_DMA_Init+0x424>
 800265c:	2301      	movs	r3, #1
 800265e:	e022      	b.n	80026a6 <HAL_DMA_Init+0x426>
 8002660:	fe10803f 	.word	0xfe10803f
 8002664:	48022c08 	.word	0x48022c08
 8002668:	48022c1c 	.word	0x48022c1c
 800266c:	48022c30 	.word	0x48022c30
 8002670:	48022c44 	.word	0x48022c44
 8002674:	48022c58 	.word	0x48022c58
 8002678:	48022c6c 	.word	0x48022c6c
 800267c:	48022c80 	.word	0x48022c80
 8002680:	48022c94 	.word	0x48022c94
 8002684:	58025408 	.word	0x58025408
 8002688:	5802541c 	.word	0x5802541c
 800268c:	58025430 	.word	0x58025430
 8002690:	58025444 	.word	0x58025444
 8002694:	58025458 	.word	0x58025458
 8002698:	5802546c 	.word	0x5802546c
 800269c:	58025480 	.word	0x58025480
 80026a0:	58025494 	.word	0x58025494
 80026a4:	2300      	movs	r3, #0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d07d      	beq.n	80027a6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a7f      	ldr	r2, [pc, #508]	@ (80028ac <HAL_DMA_Init+0x62c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d021      	beq.n	80026f8 <HAL_DMA_Init+0x478>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a7d      	ldr	r2, [pc, #500]	@ (80028b0 <HAL_DMA_Init+0x630>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01c      	beq.n	80026f8 <HAL_DMA_Init+0x478>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7c      	ldr	r2, [pc, #496]	@ (80028b4 <HAL_DMA_Init+0x634>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d017      	beq.n	80026f8 <HAL_DMA_Init+0x478>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a7a      	ldr	r2, [pc, #488]	@ (80028b8 <HAL_DMA_Init+0x638>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d012      	beq.n	80026f8 <HAL_DMA_Init+0x478>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a79      	ldr	r2, [pc, #484]	@ (80028bc <HAL_DMA_Init+0x63c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d00d      	beq.n	80026f8 <HAL_DMA_Init+0x478>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a77      	ldr	r2, [pc, #476]	@ (80028c0 <HAL_DMA_Init+0x640>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d008      	beq.n	80026f8 <HAL_DMA_Init+0x478>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a76      	ldr	r2, [pc, #472]	@ (80028c4 <HAL_DMA_Init+0x644>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <HAL_DMA_Init+0x478>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a74      	ldr	r2, [pc, #464]	@ (80028c8 <HAL_DMA_Init+0x648>)
 80026f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4b6e      	ldr	r3, [pc, #440]	@ (80028cc <HAL_DMA_Init+0x64c>)
 8002714:	4013      	ands	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b40      	cmp	r3, #64	@ 0x40
 800271e:	d008      	beq.n	8002732 <HAL_DMA_Init+0x4b2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b80      	cmp	r3, #128	@ 0x80
 8002726:	d102      	bne.n	800272e <HAL_DMA_Init+0x4ae>
 8002728:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800272c:	e002      	b.n	8002734 <HAL_DMA_Init+0x4b4>
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_DMA_Init+0x4b4>
 8002732:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	68d2      	ldr	r2, [r2, #12]
 8002738:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800273a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002742:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800274a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002752:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800275a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002762:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	4b55      	ldr	r3, [pc, #340]	@ (80028d0 <HAL_DMA_Init+0x650>)
 800277a:	4413      	add	r3, r2
 800277c:	4a55      	ldr	r2, [pc, #340]	@ (80028d4 <HAL_DMA_Init+0x654>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	009a      	lsls	r2, r3, #2
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f002 fa26 	bl	8004bdc <DMA_CalcBaseAndBitshift>
 8002790:	4603      	mov	r3, r0
 8002792:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	2201      	movs	r2, #1
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	e008      	b.n	80027b8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2240      	movs	r2, #64	@ 0x40
 80027aa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2203      	movs	r2, #3
 80027b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0ed      	b.n	8002994 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a46      	ldr	r2, [pc, #280]	@ (80028d8 <HAL_DMA_Init+0x658>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d072      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a45      	ldr	r2, [pc, #276]	@ (80028dc <HAL_DMA_Init+0x65c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d06d      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a43      	ldr	r2, [pc, #268]	@ (80028e0 <HAL_DMA_Init+0x660>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d068      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a42      	ldr	r2, [pc, #264]	@ (80028e4 <HAL_DMA_Init+0x664>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d063      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a40      	ldr	r2, [pc, #256]	@ (80028e8 <HAL_DMA_Init+0x668>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d05e      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3f      	ldr	r2, [pc, #252]	@ (80028ec <HAL_DMA_Init+0x66c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d059      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a3d      	ldr	r2, [pc, #244]	@ (80028f0 <HAL_DMA_Init+0x670>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d054      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a3c      	ldr	r2, [pc, #240]	@ (80028f4 <HAL_DMA_Init+0x674>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d04f      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a3a      	ldr	r2, [pc, #232]	@ (80028f8 <HAL_DMA_Init+0x678>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d04a      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a39      	ldr	r2, [pc, #228]	@ (80028fc <HAL_DMA_Init+0x67c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d045      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a37      	ldr	r2, [pc, #220]	@ (8002900 <HAL_DMA_Init+0x680>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d040      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a36      	ldr	r2, [pc, #216]	@ (8002904 <HAL_DMA_Init+0x684>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d03b      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a34      	ldr	r2, [pc, #208]	@ (8002908 <HAL_DMA_Init+0x688>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d036      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a33      	ldr	r2, [pc, #204]	@ (800290c <HAL_DMA_Init+0x68c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d031      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a31      	ldr	r2, [pc, #196]	@ (8002910 <HAL_DMA_Init+0x690>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d02c      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a30      	ldr	r2, [pc, #192]	@ (8002914 <HAL_DMA_Init+0x694>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d027      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <HAL_DMA_Init+0x62c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d022      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <HAL_DMA_Init+0x630>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d01d      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a10      	ldr	r2, [pc, #64]	@ (80028b4 <HAL_DMA_Init+0x634>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d018      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a0f      	ldr	r2, [pc, #60]	@ (80028b8 <HAL_DMA_Init+0x638>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d013      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0d      	ldr	r2, [pc, #52]	@ (80028bc <HAL_DMA_Init+0x63c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00e      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a0c      	ldr	r2, [pc, #48]	@ (80028c0 <HAL_DMA_Init+0x640>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d009      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <HAL_DMA_Init+0x644>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_DMA_Init+0x628>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a09      	ldr	r2, [pc, #36]	@ (80028c8 <HAL_DMA_Init+0x648>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d137      	bne.n	8002918 <HAL_DMA_Init+0x698>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e036      	b.n	800291a <HAL_DMA_Init+0x69a>
 80028ac:	58025408 	.word	0x58025408
 80028b0:	5802541c 	.word	0x5802541c
 80028b4:	58025430 	.word	0x58025430
 80028b8:	58025444 	.word	0x58025444
 80028bc:	58025458 	.word	0x58025458
 80028c0:	5802546c 	.word	0x5802546c
 80028c4:	58025480 	.word	0x58025480
 80028c8:	58025494 	.word	0x58025494
 80028cc:	fffe000f 	.word	0xfffe000f
 80028d0:	a7fdabf8 	.word	0xa7fdabf8
 80028d4:	cccccccd 	.word	0xcccccccd
 80028d8:	40020010 	.word	0x40020010
 80028dc:	40020028 	.word	0x40020028
 80028e0:	40020040 	.word	0x40020040
 80028e4:	40020058 	.word	0x40020058
 80028e8:	40020070 	.word	0x40020070
 80028ec:	40020088 	.word	0x40020088
 80028f0:	400200a0 	.word	0x400200a0
 80028f4:	400200b8 	.word	0x400200b8
 80028f8:	40020410 	.word	0x40020410
 80028fc:	40020428 	.word	0x40020428
 8002900:	40020440 	.word	0x40020440
 8002904:	40020458 	.word	0x40020458
 8002908:	40020470 	.word	0x40020470
 800290c:	40020488 	.word	0x40020488
 8002910:	400204a0 	.word	0x400204a0
 8002914:	400204b8 	.word	0x400204b8
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d032      	beq.n	8002984 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f002 fa8a 	bl	8004e38 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b80      	cmp	r3, #128	@ 0x80
 800292a:	d102      	bne.n	8002932 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002946:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d010      	beq.n	8002972 <HAL_DMA_Init+0x6f2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d80c      	bhi.n	8002972 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f002 fb07 	bl	8004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	e008      	b.n	8002984 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e226      	b.n	8002e06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_DMA_Start_IT+0x2a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e21f      	b.n	8002e06 <HAL_DMA_Start_IT+0x46a>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	f040 820a 	bne.w	8002df0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a68      	ldr	r2, [pc, #416]	@ (8002b90 <HAL_DMA_Start_IT+0x1f4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d04a      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a66      	ldr	r2, [pc, #408]	@ (8002b94 <HAL_DMA_Start_IT+0x1f8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d045      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a65      	ldr	r2, [pc, #404]	@ (8002b98 <HAL_DMA_Start_IT+0x1fc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d040      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a63      	ldr	r2, [pc, #396]	@ (8002b9c <HAL_DMA_Start_IT+0x200>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d03b      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a62      	ldr	r2, [pc, #392]	@ (8002ba0 <HAL_DMA_Start_IT+0x204>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d036      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a60      	ldr	r2, [pc, #384]	@ (8002ba4 <HAL_DMA_Start_IT+0x208>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d031      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ba8 <HAL_DMA_Start_IT+0x20c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d02c      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a5d      	ldr	r2, [pc, #372]	@ (8002bac <HAL_DMA_Start_IT+0x210>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d027      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb0 <HAL_DMA_Start_IT+0x214>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a5a      	ldr	r2, [pc, #360]	@ (8002bb4 <HAL_DMA_Start_IT+0x218>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01d      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a59      	ldr	r2, [pc, #356]	@ (8002bb8 <HAL_DMA_Start_IT+0x21c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d018      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a57      	ldr	r2, [pc, #348]	@ (8002bbc <HAL_DMA_Start_IT+0x220>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a56      	ldr	r2, [pc, #344]	@ (8002bc0 <HAL_DMA_Start_IT+0x224>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a54      	ldr	r2, [pc, #336]	@ (8002bc4 <HAL_DMA_Start_IT+0x228>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a53      	ldr	r2, [pc, #332]	@ (8002bc8 <HAL_DMA_Start_IT+0x22c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_DMA_Start_IT+0xee>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a51      	ldr	r2, [pc, #324]	@ (8002bcc <HAL_DMA_Start_IT+0x230>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d108      	bne.n	8002a9c <HAL_DMA_Start_IT+0x100>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e007      	b.n	8002aac <HAL_DMA_Start_IT+0x110>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f001 feae 	bl	8004814 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a34      	ldr	r2, [pc, #208]	@ (8002b90 <HAL_DMA_Start_IT+0x1f4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04a      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a33      	ldr	r2, [pc, #204]	@ (8002b94 <HAL_DMA_Start_IT+0x1f8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d045      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a31      	ldr	r2, [pc, #196]	@ (8002b98 <HAL_DMA_Start_IT+0x1fc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d040      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a30      	ldr	r2, [pc, #192]	@ (8002b9c <HAL_DMA_Start_IT+0x200>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d03b      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8002ba0 <HAL_DMA_Start_IT+0x204>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d036      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba4 <HAL_DMA_Start_IT+0x208>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d031      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba8 <HAL_DMA_Start_IT+0x20c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02c      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2a      	ldr	r2, [pc, #168]	@ (8002bac <HAL_DMA_Start_IT+0x210>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d027      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a28      	ldr	r2, [pc, #160]	@ (8002bb0 <HAL_DMA_Start_IT+0x214>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d022      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a27      	ldr	r2, [pc, #156]	@ (8002bb4 <HAL_DMA_Start_IT+0x218>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d01d      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a25      	ldr	r2, [pc, #148]	@ (8002bb8 <HAL_DMA_Start_IT+0x21c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d018      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a24      	ldr	r2, [pc, #144]	@ (8002bbc <HAL_DMA_Start_IT+0x220>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a22      	ldr	r2, [pc, #136]	@ (8002bc0 <HAL_DMA_Start_IT+0x224>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00e      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a21      	ldr	r2, [pc, #132]	@ (8002bc4 <HAL_DMA_Start_IT+0x228>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc8 <HAL_DMA_Start_IT+0x22c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_DMA_Start_IT+0x1bc>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1e      	ldr	r2, [pc, #120]	@ (8002bcc <HAL_DMA_Start_IT+0x230>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_DMA_Start_IT+0x1c0>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_DMA_Start_IT+0x1c2>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d036      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 021e 	bic.w	r2, r3, #30
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0216 	orr.w	r2, r2, #22
 8002b74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d03e      	beq.n	8002bfc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0208 	orr.w	r2, r2, #8
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e035      	b.n	8002bfc <HAL_DMA_Start_IT+0x260>
 8002b90:	40020010 	.word	0x40020010
 8002b94:	40020028 	.word	0x40020028
 8002b98:	40020040 	.word	0x40020040
 8002b9c:	40020058 	.word	0x40020058
 8002ba0:	40020070 	.word	0x40020070
 8002ba4:	40020088 	.word	0x40020088
 8002ba8:	400200a0 	.word	0x400200a0
 8002bac:	400200b8 	.word	0x400200b8
 8002bb0:	40020410 	.word	0x40020410
 8002bb4:	40020428 	.word	0x40020428
 8002bb8:	40020440 	.word	0x40020440
 8002bbc:	40020458 	.word	0x40020458
 8002bc0:	40020470 	.word	0x40020470
 8002bc4:	40020488 	.word	0x40020488
 8002bc8:	400204a0 	.word	0x400204a0
 8002bcc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 020e 	bic.w	r2, r3, #14
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 020a 	orr.w	r2, r2, #10
 8002be2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0204 	orr.w	r2, r2, #4
 8002bfa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a83      	ldr	r2, [pc, #524]	@ (8002e10 <HAL_DMA_Start_IT+0x474>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d072      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a82      	ldr	r2, [pc, #520]	@ (8002e14 <HAL_DMA_Start_IT+0x478>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d06d      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a80      	ldr	r2, [pc, #512]	@ (8002e18 <HAL_DMA_Start_IT+0x47c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d068      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7f      	ldr	r2, [pc, #508]	@ (8002e1c <HAL_DMA_Start_IT+0x480>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d063      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a7d      	ldr	r2, [pc, #500]	@ (8002e20 <HAL_DMA_Start_IT+0x484>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d05e      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7c      	ldr	r2, [pc, #496]	@ (8002e24 <HAL_DMA_Start_IT+0x488>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d059      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a7a      	ldr	r2, [pc, #488]	@ (8002e28 <HAL_DMA_Start_IT+0x48c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d054      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a79      	ldr	r2, [pc, #484]	@ (8002e2c <HAL_DMA_Start_IT+0x490>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d04f      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a77      	ldr	r2, [pc, #476]	@ (8002e30 <HAL_DMA_Start_IT+0x494>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d04a      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a76      	ldr	r2, [pc, #472]	@ (8002e34 <HAL_DMA_Start_IT+0x498>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d045      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a74      	ldr	r2, [pc, #464]	@ (8002e38 <HAL_DMA_Start_IT+0x49c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d040      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a73      	ldr	r2, [pc, #460]	@ (8002e3c <HAL_DMA_Start_IT+0x4a0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d03b      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a71      	ldr	r2, [pc, #452]	@ (8002e40 <HAL_DMA_Start_IT+0x4a4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d036      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a70      	ldr	r2, [pc, #448]	@ (8002e44 <HAL_DMA_Start_IT+0x4a8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d031      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e48 <HAL_DMA_Start_IT+0x4ac>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d02c      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6d      	ldr	r2, [pc, #436]	@ (8002e4c <HAL_DMA_Start_IT+0x4b0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d027      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6b      	ldr	r2, [pc, #428]	@ (8002e50 <HAL_DMA_Start_IT+0x4b4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d022      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6a      	ldr	r2, [pc, #424]	@ (8002e54 <HAL_DMA_Start_IT+0x4b8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d01d      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a68      	ldr	r2, [pc, #416]	@ (8002e58 <HAL_DMA_Start_IT+0x4bc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d018      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a67      	ldr	r2, [pc, #412]	@ (8002e5c <HAL_DMA_Start_IT+0x4c0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a65      	ldr	r2, [pc, #404]	@ (8002e60 <HAL_DMA_Start_IT+0x4c4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a64      	ldr	r2, [pc, #400]	@ (8002e64 <HAL_DMA_Start_IT+0x4c8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a62      	ldr	r2, [pc, #392]	@ (8002e68 <HAL_DMA_Start_IT+0x4cc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_DMA_Start_IT+0x350>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a61      	ldr	r2, [pc, #388]	@ (8002e6c <HAL_DMA_Start_IT+0x4d0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_DMA_Start_IT+0x354>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_DMA_Start_IT+0x356>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01a      	beq.n	8002d2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a37      	ldr	r2, [pc, #220]	@ (8002e10 <HAL_DMA_Start_IT+0x474>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d04a      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a36      	ldr	r2, [pc, #216]	@ (8002e14 <HAL_DMA_Start_IT+0x478>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d045      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a34      	ldr	r2, [pc, #208]	@ (8002e18 <HAL_DMA_Start_IT+0x47c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d040      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a33      	ldr	r2, [pc, #204]	@ (8002e1c <HAL_DMA_Start_IT+0x480>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d03b      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a31      	ldr	r2, [pc, #196]	@ (8002e20 <HAL_DMA_Start_IT+0x484>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d036      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a30      	ldr	r2, [pc, #192]	@ (8002e24 <HAL_DMA_Start_IT+0x488>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d031      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e28 <HAL_DMA_Start_IT+0x48c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02c      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2d      	ldr	r2, [pc, #180]	@ (8002e2c <HAL_DMA_Start_IT+0x490>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d027      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2b      	ldr	r2, [pc, #172]	@ (8002e30 <HAL_DMA_Start_IT+0x494>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d022      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002e34 <HAL_DMA_Start_IT+0x498>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d01d      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a28      	ldr	r2, [pc, #160]	@ (8002e38 <HAL_DMA_Start_IT+0x49c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d018      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a27      	ldr	r2, [pc, #156]	@ (8002e3c <HAL_DMA_Start_IT+0x4a0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a25      	ldr	r2, [pc, #148]	@ (8002e40 <HAL_DMA_Start_IT+0x4a4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00e      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a24      	ldr	r2, [pc, #144]	@ (8002e44 <HAL_DMA_Start_IT+0x4a8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a22      	ldr	r2, [pc, #136]	@ (8002e48 <HAL_DMA_Start_IT+0x4ac>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_DMA_Start_IT+0x430>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a21      	ldr	r2, [pc, #132]	@ (8002e4c <HAL_DMA_Start_IT+0x4b0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d108      	bne.n	8002dde <HAL_DMA_Start_IT+0x442>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e012      	b.n	8002e04 <HAL_DMA_Start_IT+0x468>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0201 	orr.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e009      	b.n	8002e04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40020010 	.word	0x40020010
 8002e14:	40020028 	.word	0x40020028
 8002e18:	40020040 	.word	0x40020040
 8002e1c:	40020058 	.word	0x40020058
 8002e20:	40020070 	.word	0x40020070
 8002e24:	40020088 	.word	0x40020088
 8002e28:	400200a0 	.word	0x400200a0
 8002e2c:	400200b8 	.word	0x400200b8
 8002e30:	40020410 	.word	0x40020410
 8002e34:	40020428 	.word	0x40020428
 8002e38:	40020440 	.word	0x40020440
 8002e3c:	40020458 	.word	0x40020458
 8002e40:	40020470 	.word	0x40020470
 8002e44:	40020488 	.word	0x40020488
 8002e48:	400204a0 	.word	0x400204a0
 8002e4c:	400204b8 	.word	0x400204b8
 8002e50:	58025408 	.word	0x58025408
 8002e54:	5802541c 	.word	0x5802541c
 8002e58:	58025430 	.word	0x58025430
 8002e5c:	58025444 	.word	0x58025444
 8002e60:	58025458 	.word	0x58025458
 8002e64:	5802546c 	.word	0x5802546c
 8002e68:	58025480 	.word	0x58025480
 8002e6c:	58025494 	.word	0x58025494

08002e70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff f84a 	bl	8001f10 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e2dc      	b.n	8003442 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d008      	beq.n	8002ea6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2280      	movs	r2, #128	@ 0x80
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e2cd      	b.n	8003442 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a76      	ldr	r2, [pc, #472]	@ (8003084 <HAL_DMA_Abort+0x214>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d04a      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a74      	ldr	r2, [pc, #464]	@ (8003088 <HAL_DMA_Abort+0x218>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d045      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a73      	ldr	r2, [pc, #460]	@ (800308c <HAL_DMA_Abort+0x21c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d040      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a71      	ldr	r2, [pc, #452]	@ (8003090 <HAL_DMA_Abort+0x220>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d03b      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a70      	ldr	r2, [pc, #448]	@ (8003094 <HAL_DMA_Abort+0x224>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d036      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6e      	ldr	r2, [pc, #440]	@ (8003098 <HAL_DMA_Abort+0x228>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d031      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6d      	ldr	r2, [pc, #436]	@ (800309c <HAL_DMA_Abort+0x22c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d02c      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80030a0 <HAL_DMA_Abort+0x230>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d027      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6a      	ldr	r2, [pc, #424]	@ (80030a4 <HAL_DMA_Abort+0x234>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d022      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a68      	ldr	r2, [pc, #416]	@ (80030a8 <HAL_DMA_Abort+0x238>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01d      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a67      	ldr	r2, [pc, #412]	@ (80030ac <HAL_DMA_Abort+0x23c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d018      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a65      	ldr	r2, [pc, #404]	@ (80030b0 <HAL_DMA_Abort+0x240>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a64      	ldr	r2, [pc, #400]	@ (80030b4 <HAL_DMA_Abort+0x244>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a62      	ldr	r2, [pc, #392]	@ (80030b8 <HAL_DMA_Abort+0x248>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a61      	ldr	r2, [pc, #388]	@ (80030bc <HAL_DMA_Abort+0x24c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_DMA_Abort+0xd6>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a5f      	ldr	r2, [pc, #380]	@ (80030c0 <HAL_DMA_Abort+0x250>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <HAL_DMA_Abort+0xda>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_DMA_Abort+0xdc>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 021e 	bic.w	r2, r2, #30
 8002f5e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f6e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e00a      	b.n	8002f8e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 020e 	bic.w	r2, r2, #14
 8002f86:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a3c      	ldr	r2, [pc, #240]	@ (8003084 <HAL_DMA_Abort+0x214>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d072      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3a      	ldr	r2, [pc, #232]	@ (8003088 <HAL_DMA_Abort+0x218>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d06d      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a39      	ldr	r2, [pc, #228]	@ (800308c <HAL_DMA_Abort+0x21c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d068      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a37      	ldr	r2, [pc, #220]	@ (8003090 <HAL_DMA_Abort+0x220>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d063      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a36      	ldr	r2, [pc, #216]	@ (8003094 <HAL_DMA_Abort+0x224>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d05e      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a34      	ldr	r2, [pc, #208]	@ (8003098 <HAL_DMA_Abort+0x228>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d059      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a33      	ldr	r2, [pc, #204]	@ (800309c <HAL_DMA_Abort+0x22c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d054      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a31      	ldr	r2, [pc, #196]	@ (80030a0 <HAL_DMA_Abort+0x230>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d04f      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a30      	ldr	r2, [pc, #192]	@ (80030a4 <HAL_DMA_Abort+0x234>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d04a      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2e      	ldr	r2, [pc, #184]	@ (80030a8 <HAL_DMA_Abort+0x238>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d045      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80030ac <HAL_DMA_Abort+0x23c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d040      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2b      	ldr	r2, [pc, #172]	@ (80030b0 <HAL_DMA_Abort+0x240>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d03b      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2a      	ldr	r2, [pc, #168]	@ (80030b4 <HAL_DMA_Abort+0x244>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d036      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a28      	ldr	r2, [pc, #160]	@ (80030b8 <HAL_DMA_Abort+0x248>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d031      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a27      	ldr	r2, [pc, #156]	@ (80030bc <HAL_DMA_Abort+0x24c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d02c      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a25      	ldr	r2, [pc, #148]	@ (80030c0 <HAL_DMA_Abort+0x250>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d027      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a24      	ldr	r2, [pc, #144]	@ (80030c4 <HAL_DMA_Abort+0x254>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <HAL_DMA_Abort+0x258>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01d      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a21      	ldr	r2, [pc, #132]	@ (80030cc <HAL_DMA_Abort+0x25c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d018      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1f      	ldr	r2, [pc, #124]	@ (80030d0 <HAL_DMA_Abort+0x260>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1e      	ldr	r2, [pc, #120]	@ (80030d4 <HAL_DMA_Abort+0x264>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00e      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <HAL_DMA_Abort+0x268>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d009      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <HAL_DMA_Abort+0x26c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d004      	beq.n	800307e <HAL_DMA_Abort+0x20e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	@ (80030e0 <HAL_DMA_Abort+0x270>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d132      	bne.n	80030e4 <HAL_DMA_Abort+0x274>
 800307e:	2301      	movs	r3, #1
 8003080:	e031      	b.n	80030e6 <HAL_DMA_Abort+0x276>
 8003082:	bf00      	nop
 8003084:	40020010 	.word	0x40020010
 8003088:	40020028 	.word	0x40020028
 800308c:	40020040 	.word	0x40020040
 8003090:	40020058 	.word	0x40020058
 8003094:	40020070 	.word	0x40020070
 8003098:	40020088 	.word	0x40020088
 800309c:	400200a0 	.word	0x400200a0
 80030a0:	400200b8 	.word	0x400200b8
 80030a4:	40020410 	.word	0x40020410
 80030a8:	40020428 	.word	0x40020428
 80030ac:	40020440 	.word	0x40020440
 80030b0:	40020458 	.word	0x40020458
 80030b4:	40020470 	.word	0x40020470
 80030b8:	40020488 	.word	0x40020488
 80030bc:	400204a0 	.word	0x400204a0
 80030c0:	400204b8 	.word	0x400204b8
 80030c4:	58025408 	.word	0x58025408
 80030c8:	5802541c 	.word	0x5802541c
 80030cc:	58025430 	.word	0x58025430
 80030d0:	58025444 	.word	0x58025444
 80030d4:	58025458 	.word	0x58025458
 80030d8:	5802546c 	.word	0x5802546c
 80030dc:	58025480 	.word	0x58025480
 80030e0:	58025494 	.word	0x58025494
 80030e4:	2300      	movs	r3, #0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6d      	ldr	r2, [pc, #436]	@ (80032b4 <HAL_DMA_Abort+0x444>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d04a      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6b      	ldr	r2, [pc, #428]	@ (80032b8 <HAL_DMA_Abort+0x448>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d045      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6a      	ldr	r2, [pc, #424]	@ (80032bc <HAL_DMA_Abort+0x44c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d040      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a68      	ldr	r2, [pc, #416]	@ (80032c0 <HAL_DMA_Abort+0x450>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d03b      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a67      	ldr	r2, [pc, #412]	@ (80032c4 <HAL_DMA_Abort+0x454>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d036      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a65      	ldr	r2, [pc, #404]	@ (80032c8 <HAL_DMA_Abort+0x458>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d031      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a64      	ldr	r2, [pc, #400]	@ (80032cc <HAL_DMA_Abort+0x45c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d02c      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a62      	ldr	r2, [pc, #392]	@ (80032d0 <HAL_DMA_Abort+0x460>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d027      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a61      	ldr	r2, [pc, #388]	@ (80032d4 <HAL_DMA_Abort+0x464>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d022      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5f      	ldr	r2, [pc, #380]	@ (80032d8 <HAL_DMA_Abort+0x468>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01d      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a5e      	ldr	r2, [pc, #376]	@ (80032dc <HAL_DMA_Abort+0x46c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d018      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5c      	ldr	r2, [pc, #368]	@ (80032e0 <HAL_DMA_Abort+0x470>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5b      	ldr	r2, [pc, #364]	@ (80032e4 <HAL_DMA_Abort+0x474>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00e      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a59      	ldr	r2, [pc, #356]	@ (80032e8 <HAL_DMA_Abort+0x478>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d009      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a58      	ldr	r2, [pc, #352]	@ (80032ec <HAL_DMA_Abort+0x47c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d004      	beq.n	800319a <HAL_DMA_Abort+0x32a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a56      	ldr	r2, [pc, #344]	@ (80032f0 <HAL_DMA_Abort+0x480>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <HAL_DMA_Abort+0x33c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e007      	b.n	80031bc <HAL_DMA_Abort+0x34c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031bc:	e013      	b.n	80031e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031be:	f7fe fea7 	bl	8001f10 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d90c      	bls.n	80031e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2203      	movs	r2, #3
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e12d      	b.n	8003442 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2f      	ldr	r2, [pc, #188]	@ (80032b4 <HAL_DMA_Abort+0x444>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04a      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2d      	ldr	r2, [pc, #180]	@ (80032b8 <HAL_DMA_Abort+0x448>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d045      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2c      	ldr	r2, [pc, #176]	@ (80032bc <HAL_DMA_Abort+0x44c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d040      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2a      	ldr	r2, [pc, #168]	@ (80032c0 <HAL_DMA_Abort+0x450>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d03b      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a29      	ldr	r2, [pc, #164]	@ (80032c4 <HAL_DMA_Abort+0x454>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d036      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a27      	ldr	r2, [pc, #156]	@ (80032c8 <HAL_DMA_Abort+0x458>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d031      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a26      	ldr	r2, [pc, #152]	@ (80032cc <HAL_DMA_Abort+0x45c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d02c      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a24      	ldr	r2, [pc, #144]	@ (80032d0 <HAL_DMA_Abort+0x460>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d027      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a23      	ldr	r2, [pc, #140]	@ (80032d4 <HAL_DMA_Abort+0x464>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a21      	ldr	r2, [pc, #132]	@ (80032d8 <HAL_DMA_Abort+0x468>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01d      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a20      	ldr	r2, [pc, #128]	@ (80032dc <HAL_DMA_Abort+0x46c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d018      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1e      	ldr	r2, [pc, #120]	@ (80032e0 <HAL_DMA_Abort+0x470>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1d      	ldr	r2, [pc, #116]	@ (80032e4 <HAL_DMA_Abort+0x474>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00e      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1b      	ldr	r2, [pc, #108]	@ (80032e8 <HAL_DMA_Abort+0x478>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d009      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1a      	ldr	r2, [pc, #104]	@ (80032ec <HAL_DMA_Abort+0x47c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_DMA_Abort+0x422>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a18      	ldr	r2, [pc, #96]	@ (80032f0 <HAL_DMA_Abort+0x480>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_DMA_Abort+0x426>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_DMA_Abort+0x428>
 8003296:	2300      	movs	r3, #0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02b      	beq.n	80032f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	223f      	movs	r2, #63	@ 0x3f
 80032ac:	409a      	lsls	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	e02a      	b.n	800330a <HAL_DMA_Abort+0x49a>
 80032b4:	40020010 	.word	0x40020010
 80032b8:	40020028 	.word	0x40020028
 80032bc:	40020040 	.word	0x40020040
 80032c0:	40020058 	.word	0x40020058
 80032c4:	40020070 	.word	0x40020070
 80032c8:	40020088 	.word	0x40020088
 80032cc:	400200a0 	.word	0x400200a0
 80032d0:	400200b8 	.word	0x400200b8
 80032d4:	40020410 	.word	0x40020410
 80032d8:	40020428 	.word	0x40020428
 80032dc:	40020440 	.word	0x40020440
 80032e0:	40020458 	.word	0x40020458
 80032e4:	40020470 	.word	0x40020470
 80032e8:	40020488 	.word	0x40020488
 80032ec:	400204a0 	.word	0x400204a0
 80032f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2201      	movs	r2, #1
 8003304:	409a      	lsls	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a4f      	ldr	r2, [pc, #316]	@ (800344c <HAL_DMA_Abort+0x5dc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d072      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a4d      	ldr	r2, [pc, #308]	@ (8003450 <HAL_DMA_Abort+0x5e0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d06d      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a4c      	ldr	r2, [pc, #304]	@ (8003454 <HAL_DMA_Abort+0x5e4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d068      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a4a      	ldr	r2, [pc, #296]	@ (8003458 <HAL_DMA_Abort+0x5e8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d063      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a49      	ldr	r2, [pc, #292]	@ (800345c <HAL_DMA_Abort+0x5ec>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d05e      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a47      	ldr	r2, [pc, #284]	@ (8003460 <HAL_DMA_Abort+0x5f0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d059      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a46      	ldr	r2, [pc, #280]	@ (8003464 <HAL_DMA_Abort+0x5f4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d054      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a44      	ldr	r2, [pc, #272]	@ (8003468 <HAL_DMA_Abort+0x5f8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d04f      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a43      	ldr	r2, [pc, #268]	@ (800346c <HAL_DMA_Abort+0x5fc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d04a      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a41      	ldr	r2, [pc, #260]	@ (8003470 <HAL_DMA_Abort+0x600>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d045      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a40      	ldr	r2, [pc, #256]	@ (8003474 <HAL_DMA_Abort+0x604>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d040      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a3e      	ldr	r2, [pc, #248]	@ (8003478 <HAL_DMA_Abort+0x608>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d03b      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a3d      	ldr	r2, [pc, #244]	@ (800347c <HAL_DMA_Abort+0x60c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d036      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a3b      	ldr	r2, [pc, #236]	@ (8003480 <HAL_DMA_Abort+0x610>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d031      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a3a      	ldr	r2, [pc, #232]	@ (8003484 <HAL_DMA_Abort+0x614>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d02c      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a38      	ldr	r2, [pc, #224]	@ (8003488 <HAL_DMA_Abort+0x618>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d027      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a37      	ldr	r2, [pc, #220]	@ (800348c <HAL_DMA_Abort+0x61c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a35      	ldr	r2, [pc, #212]	@ (8003490 <HAL_DMA_Abort+0x620>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01d      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a34      	ldr	r2, [pc, #208]	@ (8003494 <HAL_DMA_Abort+0x624>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d018      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a32      	ldr	r2, [pc, #200]	@ (8003498 <HAL_DMA_Abort+0x628>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a31      	ldr	r2, [pc, #196]	@ (800349c <HAL_DMA_Abort+0x62c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00e      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2f      	ldr	r2, [pc, #188]	@ (80034a0 <HAL_DMA_Abort+0x630>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2e      	ldr	r2, [pc, #184]	@ (80034a4 <HAL_DMA_Abort+0x634>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_DMA_Abort+0x58a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	@ (80034a8 <HAL_DMA_Abort+0x638>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_DMA_Abort+0x58e>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_DMA_Abort+0x590>
 80033fe:	2300      	movs	r3, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800340c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003424:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800342e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40020010 	.word	0x40020010
 8003450:	40020028 	.word	0x40020028
 8003454:	40020040 	.word	0x40020040
 8003458:	40020058 	.word	0x40020058
 800345c:	40020070 	.word	0x40020070
 8003460:	40020088 	.word	0x40020088
 8003464:	400200a0 	.word	0x400200a0
 8003468:	400200b8 	.word	0x400200b8
 800346c:	40020410 	.word	0x40020410
 8003470:	40020428 	.word	0x40020428
 8003474:	40020440 	.word	0x40020440
 8003478:	40020458 	.word	0x40020458
 800347c:	40020470 	.word	0x40020470
 8003480:	40020488 	.word	0x40020488
 8003484:	400204a0 	.word	0x400204a0
 8003488:	400204b8 	.word	0x400204b8
 800348c:	58025408 	.word	0x58025408
 8003490:	5802541c 	.word	0x5802541c
 8003494:	58025430 	.word	0x58025430
 8003498:	58025444 	.word	0x58025444
 800349c:	58025458 	.word	0x58025458
 80034a0:	5802546c 	.word	0x5802546c
 80034a4:	58025480 	.word	0x58025480
 80034a8:	58025494 	.word	0x58025494

080034ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e237      	b.n	800392e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d004      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2280      	movs	r2, #128	@ 0x80
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e22c      	b.n	800392e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a5c      	ldr	r2, [pc, #368]	@ (800364c <HAL_DMA_Abort_IT+0x1a0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04a      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003650 <HAL_DMA_Abort_IT+0x1a4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d045      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a59      	ldr	r2, [pc, #356]	@ (8003654 <HAL_DMA_Abort_IT+0x1a8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d040      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a58      	ldr	r2, [pc, #352]	@ (8003658 <HAL_DMA_Abort_IT+0x1ac>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d03b      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a56      	ldr	r2, [pc, #344]	@ (800365c <HAL_DMA_Abort_IT+0x1b0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d036      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a55      	ldr	r2, [pc, #340]	@ (8003660 <HAL_DMA_Abort_IT+0x1b4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d031      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a53      	ldr	r2, [pc, #332]	@ (8003664 <HAL_DMA_Abort_IT+0x1b8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02c      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a52      	ldr	r2, [pc, #328]	@ (8003668 <HAL_DMA_Abort_IT+0x1bc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d027      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a50      	ldr	r2, [pc, #320]	@ (800366c <HAL_DMA_Abort_IT+0x1c0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a4f      	ldr	r2, [pc, #316]	@ (8003670 <HAL_DMA_Abort_IT+0x1c4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01d      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a4d      	ldr	r2, [pc, #308]	@ (8003674 <HAL_DMA_Abort_IT+0x1c8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a4c      	ldr	r2, [pc, #304]	@ (8003678 <HAL_DMA_Abort_IT+0x1cc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a4a      	ldr	r2, [pc, #296]	@ (800367c <HAL_DMA_Abort_IT+0x1d0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a49      	ldr	r2, [pc, #292]	@ (8003680 <HAL_DMA_Abort_IT+0x1d4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a47      	ldr	r2, [pc, #284]	@ (8003684 <HAL_DMA_Abort_IT+0x1d8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_DMA_Abort_IT+0xc8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a46      	ldr	r2, [pc, #280]	@ (8003688 <HAL_DMA_Abort_IT+0x1dc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d101      	bne.n	8003578 <HAL_DMA_Abort_IT+0xcc>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_DMA_Abort_IT+0xce>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8086 	beq.w	800368c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2204      	movs	r2, #4
 8003584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2f      	ldr	r2, [pc, #188]	@ (800364c <HAL_DMA_Abort_IT+0x1a0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d04a      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2e      	ldr	r2, [pc, #184]	@ (8003650 <HAL_DMA_Abort_IT+0x1a4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d045      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003654 <HAL_DMA_Abort_IT+0x1a8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d040      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003658 <HAL_DMA_Abort_IT+0x1ac>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d03b      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a29      	ldr	r2, [pc, #164]	@ (800365c <HAL_DMA_Abort_IT+0x1b0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d036      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a28      	ldr	r2, [pc, #160]	@ (8003660 <HAL_DMA_Abort_IT+0x1b4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d031      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a26      	ldr	r2, [pc, #152]	@ (8003664 <HAL_DMA_Abort_IT+0x1b8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02c      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a25      	ldr	r2, [pc, #148]	@ (8003668 <HAL_DMA_Abort_IT+0x1bc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d027      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a23      	ldr	r2, [pc, #140]	@ (800366c <HAL_DMA_Abort_IT+0x1c0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d022      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a22      	ldr	r2, [pc, #136]	@ (8003670 <HAL_DMA_Abort_IT+0x1c4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d01d      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a20      	ldr	r2, [pc, #128]	@ (8003674 <HAL_DMA_Abort_IT+0x1c8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d018      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003678 <HAL_DMA_Abort_IT+0x1cc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1d      	ldr	r2, [pc, #116]	@ (800367c <HAL_DMA_Abort_IT+0x1d0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00e      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1c      	ldr	r2, [pc, #112]	@ (8003680 <HAL_DMA_Abort_IT+0x1d4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1a      	ldr	r2, [pc, #104]	@ (8003684 <HAL_DMA_Abort_IT+0x1d8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_DMA_Abort_IT+0x17c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a19      	ldr	r2, [pc, #100]	@ (8003688 <HAL_DMA_Abort_IT+0x1dc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d108      	bne.n	800363a <HAL_DMA_Abort_IT+0x18e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e178      	b.n	800392c <HAL_DMA_Abort_IT+0x480>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e16f      	b.n	800392c <HAL_DMA_Abort_IT+0x480>
 800364c:	40020010 	.word	0x40020010
 8003650:	40020028 	.word	0x40020028
 8003654:	40020040 	.word	0x40020040
 8003658:	40020058 	.word	0x40020058
 800365c:	40020070 	.word	0x40020070
 8003660:	40020088 	.word	0x40020088
 8003664:	400200a0 	.word	0x400200a0
 8003668:	400200b8 	.word	0x400200b8
 800366c:	40020410 	.word	0x40020410
 8003670:	40020428 	.word	0x40020428
 8003674:	40020440 	.word	0x40020440
 8003678:	40020458 	.word	0x40020458
 800367c:	40020470 	.word	0x40020470
 8003680:	40020488 	.word	0x40020488
 8003684:	400204a0 	.word	0x400204a0
 8003688:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 020e 	bic.w	r2, r2, #14
 800369a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a6c      	ldr	r2, [pc, #432]	@ (8003854 <HAL_DMA_Abort_IT+0x3a8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d04a      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003858 <HAL_DMA_Abort_IT+0x3ac>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d045      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a69      	ldr	r2, [pc, #420]	@ (800385c <HAL_DMA_Abort_IT+0x3b0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d040      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a68      	ldr	r2, [pc, #416]	@ (8003860 <HAL_DMA_Abort_IT+0x3b4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d03b      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a66      	ldr	r2, [pc, #408]	@ (8003864 <HAL_DMA_Abort_IT+0x3b8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d036      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a65      	ldr	r2, [pc, #404]	@ (8003868 <HAL_DMA_Abort_IT+0x3bc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d031      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a63      	ldr	r2, [pc, #396]	@ (800386c <HAL_DMA_Abort_IT+0x3c0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02c      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a62      	ldr	r2, [pc, #392]	@ (8003870 <HAL_DMA_Abort_IT+0x3c4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d027      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a60      	ldr	r2, [pc, #384]	@ (8003874 <HAL_DMA_Abort_IT+0x3c8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d022      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003878 <HAL_DMA_Abort_IT+0x3cc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d01d      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a5d      	ldr	r2, [pc, #372]	@ (800387c <HAL_DMA_Abort_IT+0x3d0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d018      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a5c      	ldr	r2, [pc, #368]	@ (8003880 <HAL_DMA_Abort_IT+0x3d4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d013      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a5a      	ldr	r2, [pc, #360]	@ (8003884 <HAL_DMA_Abort_IT+0x3d8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a59      	ldr	r2, [pc, #356]	@ (8003888 <HAL_DMA_Abort_IT+0x3dc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a57      	ldr	r2, [pc, #348]	@ (800388c <HAL_DMA_Abort_IT+0x3e0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_DMA_Abort_IT+0x290>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a56      	ldr	r2, [pc, #344]	@ (8003890 <HAL_DMA_Abort_IT+0x3e4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d108      	bne.n	800374e <HAL_DMA_Abort_IT+0x2a2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e007      	b.n	800375e <HAL_DMA_Abort_IT+0x2b2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a3c      	ldr	r2, [pc, #240]	@ (8003854 <HAL_DMA_Abort_IT+0x3a8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d072      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a3a      	ldr	r2, [pc, #232]	@ (8003858 <HAL_DMA_Abort_IT+0x3ac>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d06d      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a39      	ldr	r2, [pc, #228]	@ (800385c <HAL_DMA_Abort_IT+0x3b0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d068      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a37      	ldr	r2, [pc, #220]	@ (8003860 <HAL_DMA_Abort_IT+0x3b4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d063      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a36      	ldr	r2, [pc, #216]	@ (8003864 <HAL_DMA_Abort_IT+0x3b8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d05e      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a34      	ldr	r2, [pc, #208]	@ (8003868 <HAL_DMA_Abort_IT+0x3bc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d059      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a33      	ldr	r2, [pc, #204]	@ (800386c <HAL_DMA_Abort_IT+0x3c0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d054      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a31      	ldr	r2, [pc, #196]	@ (8003870 <HAL_DMA_Abort_IT+0x3c4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d04f      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a30      	ldr	r2, [pc, #192]	@ (8003874 <HAL_DMA_Abort_IT+0x3c8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d04a      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003878 <HAL_DMA_Abort_IT+0x3cc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d045      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a2d      	ldr	r2, [pc, #180]	@ (800387c <HAL_DMA_Abort_IT+0x3d0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d040      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003880 <HAL_DMA_Abort_IT+0x3d4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d03b      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2a      	ldr	r2, [pc, #168]	@ (8003884 <HAL_DMA_Abort_IT+0x3d8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d036      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a28      	ldr	r2, [pc, #160]	@ (8003888 <HAL_DMA_Abort_IT+0x3dc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d031      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a27      	ldr	r2, [pc, #156]	@ (800388c <HAL_DMA_Abort_IT+0x3e0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d02c      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a25      	ldr	r2, [pc, #148]	@ (8003890 <HAL_DMA_Abort_IT+0x3e4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d027      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a24      	ldr	r2, [pc, #144]	@ (8003894 <HAL_DMA_Abort_IT+0x3e8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d022      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a22      	ldr	r2, [pc, #136]	@ (8003898 <HAL_DMA_Abort_IT+0x3ec>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01d      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a21      	ldr	r2, [pc, #132]	@ (800389c <HAL_DMA_Abort_IT+0x3f0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d018      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1f      	ldr	r2, [pc, #124]	@ (80038a0 <HAL_DMA_Abort_IT+0x3f4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1e      	ldr	r2, [pc, #120]	@ (80038a4 <HAL_DMA_Abort_IT+0x3f8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00e      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1c      	ldr	r2, [pc, #112]	@ (80038a8 <HAL_DMA_Abort_IT+0x3fc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d009      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1b      	ldr	r2, [pc, #108]	@ (80038ac <HAL_DMA_Abort_IT+0x400>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d004      	beq.n	800384e <HAL_DMA_Abort_IT+0x3a2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a19      	ldr	r2, [pc, #100]	@ (80038b0 <HAL_DMA_Abort_IT+0x404>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d132      	bne.n	80038b4 <HAL_DMA_Abort_IT+0x408>
 800384e:	2301      	movs	r3, #1
 8003850:	e031      	b.n	80038b6 <HAL_DMA_Abort_IT+0x40a>
 8003852:	bf00      	nop
 8003854:	40020010 	.word	0x40020010
 8003858:	40020028 	.word	0x40020028
 800385c:	40020040 	.word	0x40020040
 8003860:	40020058 	.word	0x40020058
 8003864:	40020070 	.word	0x40020070
 8003868:	40020088 	.word	0x40020088
 800386c:	400200a0 	.word	0x400200a0
 8003870:	400200b8 	.word	0x400200b8
 8003874:	40020410 	.word	0x40020410
 8003878:	40020428 	.word	0x40020428
 800387c:	40020440 	.word	0x40020440
 8003880:	40020458 	.word	0x40020458
 8003884:	40020470 	.word	0x40020470
 8003888:	40020488 	.word	0x40020488
 800388c:	400204a0 	.word	0x400204a0
 8003890:	400204b8 	.word	0x400204b8
 8003894:	58025408 	.word	0x58025408
 8003898:	5802541c 	.word	0x5802541c
 800389c:	58025430 	.word	0x58025430
 80038a0:	58025444 	.word	0x58025444
 80038a4:	58025458 	.word	0x58025458
 80038a8:	5802546c 	.word	0x5802546c
 80038ac:	58025480 	.word	0x58025480
 80038b0:	58025494 	.word	0x58025494
 80038b4:	2300      	movs	r3, #0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d028      	beq.n	800390c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003900:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800390a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop

08003938 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	@ 0x28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003944:	4b67      	ldr	r3, [pc, #412]	@ (8003ae4 <HAL_DMA_IRQHandler+0x1ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a67      	ldr	r2, [pc, #412]	@ (8003ae8 <HAL_DMA_IRQHandler+0x1b0>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003956:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a5f      	ldr	r2, [pc, #380]	@ (8003aec <HAL_DMA_IRQHandler+0x1b4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d04a      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5d      	ldr	r2, [pc, #372]	@ (8003af0 <HAL_DMA_IRQHandler+0x1b8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d045      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a5c      	ldr	r2, [pc, #368]	@ (8003af4 <HAL_DMA_IRQHandler+0x1bc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d040      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5a      	ldr	r2, [pc, #360]	@ (8003af8 <HAL_DMA_IRQHandler+0x1c0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d03b      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a59      	ldr	r2, [pc, #356]	@ (8003afc <HAL_DMA_IRQHandler+0x1c4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d036      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a57      	ldr	r2, [pc, #348]	@ (8003b00 <HAL_DMA_IRQHandler+0x1c8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d031      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a56      	ldr	r2, [pc, #344]	@ (8003b04 <HAL_DMA_IRQHandler+0x1cc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d02c      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a54      	ldr	r2, [pc, #336]	@ (8003b08 <HAL_DMA_IRQHandler+0x1d0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d027      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a53      	ldr	r2, [pc, #332]	@ (8003b0c <HAL_DMA_IRQHandler+0x1d4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d022      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a51      	ldr	r2, [pc, #324]	@ (8003b10 <HAL_DMA_IRQHandler+0x1d8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d01d      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a50      	ldr	r2, [pc, #320]	@ (8003b14 <HAL_DMA_IRQHandler+0x1dc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d018      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003b18 <HAL_DMA_IRQHandler+0x1e0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a4d      	ldr	r2, [pc, #308]	@ (8003b1c <HAL_DMA_IRQHandler+0x1e4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00e      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b20 <HAL_DMA_IRQHandler+0x1e8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d009      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003b24 <HAL_DMA_IRQHandler+0x1ec>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d004      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xd2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a48      	ldr	r2, [pc, #288]	@ (8003b28 <HAL_DMA_IRQHandler+0x1f0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_DMA_IRQHandler+0xd6>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_DMA_IRQHandler+0xd8>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 842b 	beq.w	800426c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2208      	movs	r2, #8
 8003a20:	409a      	lsls	r2, r3
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80a2 	beq.w	8003b70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a2e      	ldr	r2, [pc, #184]	@ (8003aec <HAL_DMA_IRQHandler+0x1b4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d04a      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003af0 <HAL_DMA_IRQHandler+0x1b8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d045      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2b      	ldr	r2, [pc, #172]	@ (8003af4 <HAL_DMA_IRQHandler+0x1bc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d040      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003af8 <HAL_DMA_IRQHandler+0x1c0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d03b      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a28      	ldr	r2, [pc, #160]	@ (8003afc <HAL_DMA_IRQHandler+0x1c4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d036      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a27      	ldr	r2, [pc, #156]	@ (8003b00 <HAL_DMA_IRQHandler+0x1c8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d031      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a25      	ldr	r2, [pc, #148]	@ (8003b04 <HAL_DMA_IRQHandler+0x1cc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d02c      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a24      	ldr	r2, [pc, #144]	@ (8003b08 <HAL_DMA_IRQHandler+0x1d0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d027      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a22      	ldr	r2, [pc, #136]	@ (8003b0c <HAL_DMA_IRQHandler+0x1d4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d022      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a21      	ldr	r2, [pc, #132]	@ (8003b10 <HAL_DMA_IRQHandler+0x1d8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d01d      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1f      	ldr	r2, [pc, #124]	@ (8003b14 <HAL_DMA_IRQHandler+0x1dc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d018      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003b18 <HAL_DMA_IRQHandler+0x1e0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b1c <HAL_DMA_IRQHandler+0x1e4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00e      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b20 <HAL_DMA_IRQHandler+0x1e8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d009      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a19      	ldr	r2, [pc, #100]	@ (8003b24 <HAL_DMA_IRQHandler+0x1ec>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <HAL_DMA_IRQHandler+0x194>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a18      	ldr	r2, [pc, #96]	@ (8003b28 <HAL_DMA_IRQHandler+0x1f0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d12f      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x1f4>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e02e      	b.n	8003b40 <HAL_DMA_IRQHandler+0x208>
 8003ae2:	bf00      	nop
 8003ae4:	24000000 	.word	0x24000000
 8003ae8:	1b4e81b5 	.word	0x1b4e81b5
 8003aec:	40020010 	.word	0x40020010
 8003af0:	40020028 	.word	0x40020028
 8003af4:	40020040 	.word	0x40020040
 8003af8:	40020058 	.word	0x40020058
 8003afc:	40020070 	.word	0x40020070
 8003b00:	40020088 	.word	0x40020088
 8003b04:	400200a0 	.word	0x400200a0
 8003b08:	400200b8 	.word	0x400200b8
 8003b0c:	40020410 	.word	0x40020410
 8003b10:	40020428 	.word	0x40020428
 8003b14:	40020440 	.word	0x40020440
 8003b18:	40020458 	.word	0x40020458
 8003b1c:	40020470 	.word	0x40020470
 8003b20:	40020488 	.word	0x40020488
 8003b24:	400204a0 	.word	0x400204a0
 8003b28:	400204b8 	.word	0x400204b8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf14      	ite	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	2300      	moveq	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d015      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0204 	bic.w	r2, r2, #4
 8003b52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b68:	f043 0201 	orr.w	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d06e      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a69      	ldr	r2, [pc, #420]	@ (8003d30 <HAL_DMA_IRQHandler+0x3f8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d04a      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a67      	ldr	r2, [pc, #412]	@ (8003d34 <HAL_DMA_IRQHandler+0x3fc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d045      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a66      	ldr	r2, [pc, #408]	@ (8003d38 <HAL_DMA_IRQHandler+0x400>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d040      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a64      	ldr	r2, [pc, #400]	@ (8003d3c <HAL_DMA_IRQHandler+0x404>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d03b      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a63      	ldr	r2, [pc, #396]	@ (8003d40 <HAL_DMA_IRQHandler+0x408>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d036      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a61      	ldr	r2, [pc, #388]	@ (8003d44 <HAL_DMA_IRQHandler+0x40c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d031      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a60      	ldr	r2, [pc, #384]	@ (8003d48 <HAL_DMA_IRQHandler+0x410>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d02c      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a5e      	ldr	r2, [pc, #376]	@ (8003d4c <HAL_DMA_IRQHandler+0x414>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d027      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a5d      	ldr	r2, [pc, #372]	@ (8003d50 <HAL_DMA_IRQHandler+0x418>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d022      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a5b      	ldr	r2, [pc, #364]	@ (8003d54 <HAL_DMA_IRQHandler+0x41c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01d      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5a      	ldr	r2, [pc, #360]	@ (8003d58 <HAL_DMA_IRQHandler+0x420>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a58      	ldr	r2, [pc, #352]	@ (8003d5c <HAL_DMA_IRQHandler+0x424>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a57      	ldr	r2, [pc, #348]	@ (8003d60 <HAL_DMA_IRQHandler+0x428>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a55      	ldr	r2, [pc, #340]	@ (8003d64 <HAL_DMA_IRQHandler+0x42c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a54      	ldr	r2, [pc, #336]	@ (8003d68 <HAL_DMA_IRQHandler+0x430>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x2ee>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a52      	ldr	r2, [pc, #328]	@ (8003d6c <HAL_DMA_IRQHandler+0x434>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10a      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x304>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e003      	b.n	8003c44 <HAL_DMA_IRQHandler+0x30c>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00d      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5c:	f043 0202 	orr.w	r2, r3, #2
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 808f 	beq.w	8003d98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d30 <HAL_DMA_IRQHandler+0x3f8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d04a      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2a      	ldr	r2, [pc, #168]	@ (8003d34 <HAL_DMA_IRQHandler+0x3fc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d045      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a29      	ldr	r2, [pc, #164]	@ (8003d38 <HAL_DMA_IRQHandler+0x400>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d040      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <HAL_DMA_IRQHandler+0x404>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d03b      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a26      	ldr	r2, [pc, #152]	@ (8003d40 <HAL_DMA_IRQHandler+0x408>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d036      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a24      	ldr	r2, [pc, #144]	@ (8003d44 <HAL_DMA_IRQHandler+0x40c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d031      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a23      	ldr	r2, [pc, #140]	@ (8003d48 <HAL_DMA_IRQHandler+0x410>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d02c      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a21      	ldr	r2, [pc, #132]	@ (8003d4c <HAL_DMA_IRQHandler+0x414>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d027      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a20      	ldr	r2, [pc, #128]	@ (8003d50 <HAL_DMA_IRQHandler+0x418>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d022      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d54 <HAL_DMA_IRQHandler+0x41c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d58 <HAL_DMA_IRQHandler+0x420>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d018      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1b      	ldr	r2, [pc, #108]	@ (8003d5c <HAL_DMA_IRQHandler+0x424>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d60 <HAL_DMA_IRQHandler+0x428>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <HAL_DMA_IRQHandler+0x42c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a17      	ldr	r2, [pc, #92]	@ (8003d68 <HAL_DMA_IRQHandler+0x430>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x3e2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a15      	ldr	r2, [pc, #84]	@ (8003d6c <HAL_DMA_IRQHandler+0x434>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d12a      	bne.n	8003d70 <HAL_DMA_IRQHandler+0x438>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	e023      	b.n	8003d78 <HAL_DMA_IRQHandler+0x440>
 8003d30:	40020010 	.word	0x40020010
 8003d34:	40020028 	.word	0x40020028
 8003d38:	40020040 	.word	0x40020040
 8003d3c:	40020058 	.word	0x40020058
 8003d40:	40020070 	.word	0x40020070
 8003d44:	40020088 	.word	0x40020088
 8003d48:	400200a0 	.word	0x400200a0
 8003d4c:	400200b8 	.word	0x400200b8
 8003d50:	40020410 	.word	0x40020410
 8003d54:	40020428 	.word	0x40020428
 8003d58:	40020440 	.word	0x40020440
 8003d5c:	40020458 	.word	0x40020458
 8003d60:	40020470 	.word	0x40020470
 8003d64:	40020488 	.word	0x40020488
 8003d68:	400204a0 	.word	0x400204a0
 8003d6c:	400204b8 	.word	0x400204b8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00d      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2204      	movs	r2, #4
 8003d86:	409a      	lsls	r2, r3
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d90:	f043 0204 	orr.w	r2, r3, #4
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	2210      	movs	r2, #16
 8003da2:	409a      	lsls	r2, r3
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a6 	beq.w	8003efa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a85      	ldr	r2, [pc, #532]	@ (8003fc8 <HAL_DMA_IRQHandler+0x690>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d04a      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a83      	ldr	r2, [pc, #524]	@ (8003fcc <HAL_DMA_IRQHandler+0x694>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d045      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a82      	ldr	r2, [pc, #520]	@ (8003fd0 <HAL_DMA_IRQHandler+0x698>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d040      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a80      	ldr	r2, [pc, #512]	@ (8003fd4 <HAL_DMA_IRQHandler+0x69c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d03b      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7f      	ldr	r2, [pc, #508]	@ (8003fd8 <HAL_DMA_IRQHandler+0x6a0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d036      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a7d      	ldr	r2, [pc, #500]	@ (8003fdc <HAL_DMA_IRQHandler+0x6a4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d031      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7c      	ldr	r2, [pc, #496]	@ (8003fe0 <HAL_DMA_IRQHandler+0x6a8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d02c      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a7a      	ldr	r2, [pc, #488]	@ (8003fe4 <HAL_DMA_IRQHandler+0x6ac>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d027      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a79      	ldr	r2, [pc, #484]	@ (8003fe8 <HAL_DMA_IRQHandler+0x6b0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d022      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a77      	ldr	r2, [pc, #476]	@ (8003fec <HAL_DMA_IRQHandler+0x6b4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01d      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a76      	ldr	r2, [pc, #472]	@ (8003ff0 <HAL_DMA_IRQHandler+0x6b8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d018      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a74      	ldr	r2, [pc, #464]	@ (8003ff4 <HAL_DMA_IRQHandler+0x6bc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a73      	ldr	r2, [pc, #460]	@ (8003ff8 <HAL_DMA_IRQHandler+0x6c0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00e      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a71      	ldr	r2, [pc, #452]	@ (8003ffc <HAL_DMA_IRQHandler+0x6c4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a70      	ldr	r2, [pc, #448]	@ (8004000 <HAL_DMA_IRQHandler+0x6c8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x516>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a6e      	ldr	r2, [pc, #440]	@ (8004004 <HAL_DMA_IRQHandler+0x6cc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d10a      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x52c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	e009      	b.n	8003e78 <HAL_DMA_IRQHandler+0x540>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	bf14      	ite	ne
 8003e72:	2301      	movne	r3, #1
 8003e74:	2300      	moveq	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d03e      	beq.n	8003efa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2210      	movs	r2, #16
 8003e86:	409a      	lsls	r2, r3
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d018      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d108      	bne.n	8003eba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d024      	beq.n	8003efa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
 8003eb8:	e01f      	b.n	8003efa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01b      	beq.n	8003efa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
 8003eca:	e016      	b.n	8003efa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d107      	bne.n	8003eea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0208 	bic.w	r2, r2, #8
 8003ee8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2220      	movs	r2, #32
 8003f04:	409a      	lsls	r2, r3
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8110 	beq.w	8004130 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc8 <HAL_DMA_IRQHandler+0x690>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d04a      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003fcc <HAL_DMA_IRQHandler+0x694>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d045      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a29      	ldr	r2, [pc, #164]	@ (8003fd0 <HAL_DMA_IRQHandler+0x698>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d040      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a28      	ldr	r2, [pc, #160]	@ (8003fd4 <HAL_DMA_IRQHandler+0x69c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d03b      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a26      	ldr	r2, [pc, #152]	@ (8003fd8 <HAL_DMA_IRQHandler+0x6a0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d036      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a25      	ldr	r2, [pc, #148]	@ (8003fdc <HAL_DMA_IRQHandler+0x6a4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d031      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a23      	ldr	r2, [pc, #140]	@ (8003fe0 <HAL_DMA_IRQHandler+0x6a8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d02c      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a22      	ldr	r2, [pc, #136]	@ (8003fe4 <HAL_DMA_IRQHandler+0x6ac>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d027      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a20      	ldr	r2, [pc, #128]	@ (8003fe8 <HAL_DMA_IRQHandler+0x6b0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fec <HAL_DMA_IRQHandler+0x6b4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01d      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff0 <HAL_DMA_IRQHandler+0x6b8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d018      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff4 <HAL_DMA_IRQHandler+0x6bc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff8 <HAL_DMA_IRQHandler+0x6c0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00e      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a19      	ldr	r2, [pc, #100]	@ (8003ffc <HAL_DMA_IRQHandler+0x6c4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d009      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a17      	ldr	r2, [pc, #92]	@ (8004000 <HAL_DMA_IRQHandler+0x6c8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x678>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a16      	ldr	r2, [pc, #88]	@ (8004004 <HAL_DMA_IRQHandler+0x6cc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d12b      	bne.n	8004008 <HAL_DMA_IRQHandler+0x6d0>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf14      	ite	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	2300      	moveq	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	e02a      	b.n	800401c <HAL_DMA_IRQHandler+0x6e4>
 8003fc6:	bf00      	nop
 8003fc8:	40020010 	.word	0x40020010
 8003fcc:	40020028 	.word	0x40020028
 8003fd0:	40020040 	.word	0x40020040
 8003fd4:	40020058 	.word	0x40020058
 8003fd8:	40020070 	.word	0x40020070
 8003fdc:	40020088 	.word	0x40020088
 8003fe0:	400200a0 	.word	0x400200a0
 8003fe4:	400200b8 	.word	0x400200b8
 8003fe8:	40020410 	.word	0x40020410
 8003fec:	40020428 	.word	0x40020428
 8003ff0:	40020440 	.word	0x40020440
 8003ff4:	40020458 	.word	0x40020458
 8003ff8:	40020470 	.word	0x40020470
 8003ffc:	40020488 	.word	0x40020488
 8004000:	400204a0 	.word	0x400204a0
 8004004:	400204b8 	.word	0x400204b8
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf14      	ite	ne
 8004016:	2301      	movne	r3, #1
 8004018:	2300      	moveq	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8087 	beq.w	8004130 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	2220      	movs	r2, #32
 800402c:	409a      	lsls	r2, r3
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b04      	cmp	r3, #4
 800403c:	d139      	bne.n	80040b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0216 	bic.w	r2, r2, #22
 800404c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800405c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <HAL_DMA_IRQHandler+0x736>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0208 	bic.w	r2, r2, #8
 800407c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	223f      	movs	r2, #63	@ 0x3f
 8004088:	409a      	lsls	r2, r3
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8382 	beq.w	80047ac <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
          }
          return;
 80040b0:	e37c      	b.n	80047ac <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d018      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d108      	bne.n	80040e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d02c      	beq.n	8004130 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
 80040de:	e027      	b.n	8004130 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d023      	beq.n	8004130 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
 80040f0:	e01e      	b.n	8004130 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10f      	bne.n	8004120 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0210 	bic.w	r2, r2, #16
 800410e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 833e 	beq.w	80047b6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8088 	beq.w	8004258 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2204      	movs	r2, #4
 800414c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a89      	ldr	r2, [pc, #548]	@ (800437c <HAL_DMA_IRQHandler+0xa44>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d04a      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a88      	ldr	r2, [pc, #544]	@ (8004380 <HAL_DMA_IRQHandler+0xa48>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d045      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a86      	ldr	r2, [pc, #536]	@ (8004384 <HAL_DMA_IRQHandler+0xa4c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d040      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a85      	ldr	r2, [pc, #532]	@ (8004388 <HAL_DMA_IRQHandler+0xa50>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d03b      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a83      	ldr	r2, [pc, #524]	@ (800438c <HAL_DMA_IRQHandler+0xa54>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d036      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a82      	ldr	r2, [pc, #520]	@ (8004390 <HAL_DMA_IRQHandler+0xa58>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d031      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a80      	ldr	r2, [pc, #512]	@ (8004394 <HAL_DMA_IRQHandler+0xa5c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d02c      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7f      	ldr	r2, [pc, #508]	@ (8004398 <HAL_DMA_IRQHandler+0xa60>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d027      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a7d      	ldr	r2, [pc, #500]	@ (800439c <HAL_DMA_IRQHandler+0xa64>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d022      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7c      	ldr	r2, [pc, #496]	@ (80043a0 <HAL_DMA_IRQHandler+0xa68>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d01d      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7a      	ldr	r2, [pc, #488]	@ (80043a4 <HAL_DMA_IRQHandler+0xa6c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d018      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a79      	ldr	r2, [pc, #484]	@ (80043a8 <HAL_DMA_IRQHandler+0xa70>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a77      	ldr	r2, [pc, #476]	@ (80043ac <HAL_DMA_IRQHandler+0xa74>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a76      	ldr	r2, [pc, #472]	@ (80043b0 <HAL_DMA_IRQHandler+0xa78>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a74      	ldr	r2, [pc, #464]	@ (80043b4 <HAL_DMA_IRQHandler+0xa7c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_DMA_IRQHandler+0x8b8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a73      	ldr	r2, [pc, #460]	@ (80043b8 <HAL_DMA_IRQHandler+0xa80>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d108      	bne.n	8004202 <HAL_DMA_IRQHandler+0x8ca>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	e007      	b.n	8004212 <HAL_DMA_IRQHandler+0x8da>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3301      	adds	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421a:	429a      	cmp	r2, r3
 800421c:	d307      	bcc.n	800422e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f2      	bne.n	8004212 <HAL_DMA_IRQHandler+0x8da>
 800422c:	e000      	b.n	8004230 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800422e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2203      	movs	r2, #3
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004246:	e003      	b.n	8004250 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 82aa 	beq.w	80047b6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
 800426a:	e2a4      	b.n	80047b6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a52      	ldr	r2, [pc, #328]	@ (80043bc <HAL_DMA_IRQHandler+0xa84>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d04a      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a51      	ldr	r2, [pc, #324]	@ (80043c0 <HAL_DMA_IRQHandler+0xa88>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d045      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a4f      	ldr	r2, [pc, #316]	@ (80043c4 <HAL_DMA_IRQHandler+0xa8c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d040      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a4e      	ldr	r2, [pc, #312]	@ (80043c8 <HAL_DMA_IRQHandler+0xa90>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d03b      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a4c      	ldr	r2, [pc, #304]	@ (80043cc <HAL_DMA_IRQHandler+0xa94>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d036      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a4b      	ldr	r2, [pc, #300]	@ (80043d0 <HAL_DMA_IRQHandler+0xa98>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d031      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a49      	ldr	r2, [pc, #292]	@ (80043d4 <HAL_DMA_IRQHandler+0xa9c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d02c      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a48      	ldr	r2, [pc, #288]	@ (80043d8 <HAL_DMA_IRQHandler+0xaa0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d027      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a46      	ldr	r2, [pc, #280]	@ (80043dc <HAL_DMA_IRQHandler+0xaa4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d022      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a45      	ldr	r2, [pc, #276]	@ (80043e0 <HAL_DMA_IRQHandler+0xaa8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d01d      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a43      	ldr	r2, [pc, #268]	@ (80043e4 <HAL_DMA_IRQHandler+0xaac>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d018      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a42      	ldr	r2, [pc, #264]	@ (80043e8 <HAL_DMA_IRQHandler+0xab0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a40      	ldr	r2, [pc, #256]	@ (80043ec <HAL_DMA_IRQHandler+0xab4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00e      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a3f      	ldr	r2, [pc, #252]	@ (80043f0 <HAL_DMA_IRQHandler+0xab8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d009      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a3d      	ldr	r2, [pc, #244]	@ (80043f4 <HAL_DMA_IRQHandler+0xabc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <HAL_DMA_IRQHandler+0x9d4>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a3c      	ldr	r2, [pc, #240]	@ (80043f8 <HAL_DMA_IRQHandler+0xac0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_DMA_IRQHandler+0x9d8>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_DMA_IRQHandler+0x9da>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 824f 	beq.w	80047b6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	2204      	movs	r2, #4
 800432a:	409a      	lsls	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	4013      	ands	r3, r2
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80dd 	beq.w	80044f0 <HAL_DMA_IRQHandler+0xbb8>
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80d7 	beq.w	80044f0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	2204      	movs	r2, #4
 800434c:	409a      	lsls	r2, r3
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d059      	beq.n	8004410 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d14a      	bne.n	80043fc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8220 	beq.w	80047b0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004378:	e21a      	b.n	80047b0 <HAL_DMA_IRQHandler+0xe78>
 800437a:	bf00      	nop
 800437c:	40020010 	.word	0x40020010
 8004380:	40020028 	.word	0x40020028
 8004384:	40020040 	.word	0x40020040
 8004388:	40020058 	.word	0x40020058
 800438c:	40020070 	.word	0x40020070
 8004390:	40020088 	.word	0x40020088
 8004394:	400200a0 	.word	0x400200a0
 8004398:	400200b8 	.word	0x400200b8
 800439c:	40020410 	.word	0x40020410
 80043a0:	40020428 	.word	0x40020428
 80043a4:	40020440 	.word	0x40020440
 80043a8:	40020458 	.word	0x40020458
 80043ac:	40020470 	.word	0x40020470
 80043b0:	40020488 	.word	0x40020488
 80043b4:	400204a0 	.word	0x400204a0
 80043b8:	400204b8 	.word	0x400204b8
 80043bc:	48022c08 	.word	0x48022c08
 80043c0:	48022c1c 	.word	0x48022c1c
 80043c4:	48022c30 	.word	0x48022c30
 80043c8:	48022c44 	.word	0x48022c44
 80043cc:	48022c58 	.word	0x48022c58
 80043d0:	48022c6c 	.word	0x48022c6c
 80043d4:	48022c80 	.word	0x48022c80
 80043d8:	48022c94 	.word	0x48022c94
 80043dc:	58025408 	.word	0x58025408
 80043e0:	5802541c 	.word	0x5802541c
 80043e4:	58025430 	.word	0x58025430
 80043e8:	58025444 	.word	0x58025444
 80043ec:	58025458 	.word	0x58025458
 80043f0:	5802546c 	.word	0x5802546c
 80043f4:	58025480 	.word	0x58025480
 80043f8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 81d5 	beq.w	80047b0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800440e:	e1cf      	b.n	80047b0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d160      	bne.n	80044dc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7f      	ldr	r2, [pc, #508]	@ (800461c <HAL_DMA_IRQHandler+0xce4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d04a      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7d      	ldr	r2, [pc, #500]	@ (8004620 <HAL_DMA_IRQHandler+0xce8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d045      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7c      	ldr	r2, [pc, #496]	@ (8004624 <HAL_DMA_IRQHandler+0xcec>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d040      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a7a      	ldr	r2, [pc, #488]	@ (8004628 <HAL_DMA_IRQHandler+0xcf0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d03b      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a79      	ldr	r2, [pc, #484]	@ (800462c <HAL_DMA_IRQHandler+0xcf4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d036      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a77      	ldr	r2, [pc, #476]	@ (8004630 <HAL_DMA_IRQHandler+0xcf8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d031      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a76      	ldr	r2, [pc, #472]	@ (8004634 <HAL_DMA_IRQHandler+0xcfc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d02c      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a74      	ldr	r2, [pc, #464]	@ (8004638 <HAL_DMA_IRQHandler+0xd00>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d027      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a73      	ldr	r2, [pc, #460]	@ (800463c <HAL_DMA_IRQHandler+0xd04>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d022      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a71      	ldr	r2, [pc, #452]	@ (8004640 <HAL_DMA_IRQHandler+0xd08>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d01d      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a70      	ldr	r2, [pc, #448]	@ (8004644 <HAL_DMA_IRQHandler+0xd0c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d018      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6e      	ldr	r2, [pc, #440]	@ (8004648 <HAL_DMA_IRQHandler+0xd10>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6d      	ldr	r2, [pc, #436]	@ (800464c <HAL_DMA_IRQHandler+0xd14>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00e      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004650 <HAL_DMA_IRQHandler+0xd18>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d009      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004654 <HAL_DMA_IRQHandler+0xd1c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d004      	beq.n	80044ba <HAL_DMA_IRQHandler+0xb82>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a68      	ldr	r2, [pc, #416]	@ (8004658 <HAL_DMA_IRQHandler+0xd20>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d108      	bne.n	80044cc <HAL_DMA_IRQHandler+0xb94>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0208 	bic.w	r2, r2, #8
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e007      	b.n	80044dc <HAL_DMA_IRQHandler+0xba4>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0204 	bic.w	r2, r2, #4
 80044da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8165 	beq.w	80047b0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ee:	e15f      	b.n	80047b0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	2202      	movs	r2, #2
 80044fa:	409a      	lsls	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80c5 	beq.w	8004690 <HAL_DMA_IRQHandler+0xd58>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80bf 	beq.w	8004690 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	2202      	movs	r2, #2
 800451c:	409a      	lsls	r2, r3
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d018      	beq.n	800455e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 813a 	beq.w	80047b4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004548:	e134      	b.n	80047b4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 8130 	beq.w	80047b4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800455c:	e12a      	b.n	80047b4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	f040 8089 	bne.w	800467c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2b      	ldr	r2, [pc, #172]	@ (800461c <HAL_DMA_IRQHandler+0xce4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d04a      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a29      	ldr	r2, [pc, #164]	@ (8004620 <HAL_DMA_IRQHandler+0xce8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d045      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a28      	ldr	r2, [pc, #160]	@ (8004624 <HAL_DMA_IRQHandler+0xcec>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d040      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a26      	ldr	r2, [pc, #152]	@ (8004628 <HAL_DMA_IRQHandler+0xcf0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d03b      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a25      	ldr	r2, [pc, #148]	@ (800462c <HAL_DMA_IRQHandler+0xcf4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d036      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a23      	ldr	r2, [pc, #140]	@ (8004630 <HAL_DMA_IRQHandler+0xcf8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d031      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a22      	ldr	r2, [pc, #136]	@ (8004634 <HAL_DMA_IRQHandler+0xcfc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d02c      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a20      	ldr	r2, [pc, #128]	@ (8004638 <HAL_DMA_IRQHandler+0xd00>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d027      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1f      	ldr	r2, [pc, #124]	@ (800463c <HAL_DMA_IRQHandler+0xd04>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d022      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004640 <HAL_DMA_IRQHandler+0xd08>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01d      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004644 <HAL_DMA_IRQHandler+0xd0c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d018      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004648 <HAL_DMA_IRQHandler+0xd10>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a19      	ldr	r2, [pc, #100]	@ (800464c <HAL_DMA_IRQHandler+0xd14>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00e      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <HAL_DMA_IRQHandler+0xd18>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a16      	ldr	r2, [pc, #88]	@ (8004654 <HAL_DMA_IRQHandler+0xd1c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_DMA_IRQHandler+0xcd2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a14      	ldr	r2, [pc, #80]	@ (8004658 <HAL_DMA_IRQHandler+0xd20>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d128      	bne.n	800465c <HAL_DMA_IRQHandler+0xd24>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0214 	bic.w	r2, r2, #20
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e027      	b.n	800466c <HAL_DMA_IRQHandler+0xd34>
 800461c:	40020010 	.word	0x40020010
 8004620:	40020028 	.word	0x40020028
 8004624:	40020040 	.word	0x40020040
 8004628:	40020058 	.word	0x40020058
 800462c:	40020070 	.word	0x40020070
 8004630:	40020088 	.word	0x40020088
 8004634:	400200a0 	.word	0x400200a0
 8004638:	400200b8 	.word	0x400200b8
 800463c:	40020410 	.word	0x40020410
 8004640:	40020428 	.word	0x40020428
 8004644:	40020440 	.word	0x40020440
 8004648:	40020458 	.word	0x40020458
 800464c:	40020470 	.word	0x40020470
 8004650:	40020488 	.word	0x40020488
 8004654:	400204a0 	.word	0x400204a0
 8004658:	400204b8 	.word	0x400204b8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 020a 	bic.w	r2, r2, #10
 800466a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8097 	beq.w	80047b4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800468e:	e091      	b.n	80047b4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	2208      	movs	r2, #8
 800469a:	409a      	lsls	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8088 	beq.w	80047b6 <HAL_DMA_IRQHandler+0xe7e>
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8082 	beq.w	80047b6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a41      	ldr	r2, [pc, #260]	@ (80047bc <HAL_DMA_IRQHandler+0xe84>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d04a      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a3f      	ldr	r2, [pc, #252]	@ (80047c0 <HAL_DMA_IRQHandler+0xe88>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d045      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3e      	ldr	r2, [pc, #248]	@ (80047c4 <HAL_DMA_IRQHandler+0xe8c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d040      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a3c      	ldr	r2, [pc, #240]	@ (80047c8 <HAL_DMA_IRQHandler+0xe90>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d03b      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a3b      	ldr	r2, [pc, #236]	@ (80047cc <HAL_DMA_IRQHandler+0xe94>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d036      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a39      	ldr	r2, [pc, #228]	@ (80047d0 <HAL_DMA_IRQHandler+0xe98>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d031      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a38      	ldr	r2, [pc, #224]	@ (80047d4 <HAL_DMA_IRQHandler+0xe9c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d02c      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a36      	ldr	r2, [pc, #216]	@ (80047d8 <HAL_DMA_IRQHandler+0xea0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d027      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a35      	ldr	r2, [pc, #212]	@ (80047dc <HAL_DMA_IRQHandler+0xea4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d022      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a33      	ldr	r2, [pc, #204]	@ (80047e0 <HAL_DMA_IRQHandler+0xea8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01d      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a32      	ldr	r2, [pc, #200]	@ (80047e4 <HAL_DMA_IRQHandler+0xeac>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d018      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a30      	ldr	r2, [pc, #192]	@ (80047e8 <HAL_DMA_IRQHandler+0xeb0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2f      	ldr	r2, [pc, #188]	@ (80047ec <HAL_DMA_IRQHandler+0xeb4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2d      	ldr	r2, [pc, #180]	@ (80047f0 <HAL_DMA_IRQHandler+0xeb8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2c      	ldr	r2, [pc, #176]	@ (80047f4 <HAL_DMA_IRQHandler+0xebc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_DMA_IRQHandler+0xe1a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2a      	ldr	r2, [pc, #168]	@ (80047f8 <HAL_DMA_IRQHandler+0xec0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d108      	bne.n	8004764 <HAL_DMA_IRQHandler+0xe2c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 021c 	bic.w	r2, r2, #28
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e007      	b.n	8004774 <HAL_DMA_IRQHandler+0xe3c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 020e 	bic.w	r2, r2, #14
 8004772:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2201      	movs	r2, #1
 800477e:	409a      	lsls	r2, r3
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
 80047aa:	e004      	b.n	80047b6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80047ac:	bf00      	nop
 80047ae:	e002      	b.n	80047b6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047b6:	3728      	adds	r7, #40	@ 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40020010 	.word	0x40020010
 80047c0:	40020028 	.word	0x40020028
 80047c4:	40020040 	.word	0x40020040
 80047c8:	40020058 	.word	0x40020058
 80047cc:	40020070 	.word	0x40020070
 80047d0:	40020088 	.word	0x40020088
 80047d4:	400200a0 	.word	0x400200a0
 80047d8:	400200b8 	.word	0x400200b8
 80047dc:	40020410 	.word	0x40020410
 80047e0:	40020428 	.word	0x40020428
 80047e4:	40020440 	.word	0x40020440
 80047e8:	40020458 	.word	0x40020458
 80047ec:	40020470 	.word	0x40020470
 80047f0:	40020488 	.word	0x40020488
 80047f4:	400204a0 	.word	0x400204a0
 80047f8:	400204b8 	.word	0x400204b8

080047fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004826:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7f      	ldr	r2, [pc, #508]	@ (8004a30 <DMA_SetConfig+0x21c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d072      	beq.n	800491e <DMA_SetConfig+0x10a>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a7d      	ldr	r2, [pc, #500]	@ (8004a34 <DMA_SetConfig+0x220>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d06d      	beq.n	800491e <DMA_SetConfig+0x10a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a7c      	ldr	r2, [pc, #496]	@ (8004a38 <DMA_SetConfig+0x224>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d068      	beq.n	800491e <DMA_SetConfig+0x10a>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a7a      	ldr	r2, [pc, #488]	@ (8004a3c <DMA_SetConfig+0x228>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d063      	beq.n	800491e <DMA_SetConfig+0x10a>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a79      	ldr	r2, [pc, #484]	@ (8004a40 <DMA_SetConfig+0x22c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d05e      	beq.n	800491e <DMA_SetConfig+0x10a>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a77      	ldr	r2, [pc, #476]	@ (8004a44 <DMA_SetConfig+0x230>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d059      	beq.n	800491e <DMA_SetConfig+0x10a>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a76      	ldr	r2, [pc, #472]	@ (8004a48 <DMA_SetConfig+0x234>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d054      	beq.n	800491e <DMA_SetConfig+0x10a>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a74      	ldr	r2, [pc, #464]	@ (8004a4c <DMA_SetConfig+0x238>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d04f      	beq.n	800491e <DMA_SetConfig+0x10a>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a73      	ldr	r2, [pc, #460]	@ (8004a50 <DMA_SetConfig+0x23c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d04a      	beq.n	800491e <DMA_SetConfig+0x10a>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a71      	ldr	r2, [pc, #452]	@ (8004a54 <DMA_SetConfig+0x240>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d045      	beq.n	800491e <DMA_SetConfig+0x10a>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a70      	ldr	r2, [pc, #448]	@ (8004a58 <DMA_SetConfig+0x244>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d040      	beq.n	800491e <DMA_SetConfig+0x10a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a6e      	ldr	r2, [pc, #440]	@ (8004a5c <DMA_SetConfig+0x248>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d03b      	beq.n	800491e <DMA_SetConfig+0x10a>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004a60 <DMA_SetConfig+0x24c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d036      	beq.n	800491e <DMA_SetConfig+0x10a>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004a64 <DMA_SetConfig+0x250>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d031      	beq.n	800491e <DMA_SetConfig+0x10a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a6a      	ldr	r2, [pc, #424]	@ (8004a68 <DMA_SetConfig+0x254>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d02c      	beq.n	800491e <DMA_SetConfig+0x10a>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a68      	ldr	r2, [pc, #416]	@ (8004a6c <DMA_SetConfig+0x258>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d027      	beq.n	800491e <DMA_SetConfig+0x10a>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a67      	ldr	r2, [pc, #412]	@ (8004a70 <DMA_SetConfig+0x25c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d022      	beq.n	800491e <DMA_SetConfig+0x10a>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a65      	ldr	r2, [pc, #404]	@ (8004a74 <DMA_SetConfig+0x260>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01d      	beq.n	800491e <DMA_SetConfig+0x10a>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a64      	ldr	r2, [pc, #400]	@ (8004a78 <DMA_SetConfig+0x264>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d018      	beq.n	800491e <DMA_SetConfig+0x10a>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a62      	ldr	r2, [pc, #392]	@ (8004a7c <DMA_SetConfig+0x268>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <DMA_SetConfig+0x10a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a61      	ldr	r2, [pc, #388]	@ (8004a80 <DMA_SetConfig+0x26c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <DMA_SetConfig+0x10a>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a5f      	ldr	r2, [pc, #380]	@ (8004a84 <DMA_SetConfig+0x270>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <DMA_SetConfig+0x10a>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a5e      	ldr	r2, [pc, #376]	@ (8004a88 <DMA_SetConfig+0x274>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <DMA_SetConfig+0x10a>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a5c      	ldr	r2, [pc, #368]	@ (8004a8c <DMA_SetConfig+0x278>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d101      	bne.n	8004922 <DMA_SetConfig+0x10e>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <DMA_SetConfig+0x110>
 8004922:	2300      	movs	r3, #0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00d      	beq.n	8004944 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004930:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d004      	beq.n	8004944 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004942:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a39      	ldr	r2, [pc, #228]	@ (8004a30 <DMA_SetConfig+0x21c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d04a      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a38      	ldr	r2, [pc, #224]	@ (8004a34 <DMA_SetConfig+0x220>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d045      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a36      	ldr	r2, [pc, #216]	@ (8004a38 <DMA_SetConfig+0x224>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d040      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a35      	ldr	r2, [pc, #212]	@ (8004a3c <DMA_SetConfig+0x228>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d03b      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a33      	ldr	r2, [pc, #204]	@ (8004a40 <DMA_SetConfig+0x22c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d036      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a32      	ldr	r2, [pc, #200]	@ (8004a44 <DMA_SetConfig+0x230>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d031      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a30      	ldr	r2, [pc, #192]	@ (8004a48 <DMA_SetConfig+0x234>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02c      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a2f      	ldr	r2, [pc, #188]	@ (8004a4c <DMA_SetConfig+0x238>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d027      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <DMA_SetConfig+0x23c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d022      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a54 <DMA_SetConfig+0x240>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d01d      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004a58 <DMA_SetConfig+0x244>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d018      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a29      	ldr	r2, [pc, #164]	@ (8004a5c <DMA_SetConfig+0x248>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d013      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a27      	ldr	r2, [pc, #156]	@ (8004a60 <DMA_SetConfig+0x24c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00e      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a26      	ldr	r2, [pc, #152]	@ (8004a64 <DMA_SetConfig+0x250>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d009      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a24      	ldr	r2, [pc, #144]	@ (8004a68 <DMA_SetConfig+0x254>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <DMA_SetConfig+0x1d0>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a23      	ldr	r2, [pc, #140]	@ (8004a6c <DMA_SetConfig+0x258>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d101      	bne.n	80049e8 <DMA_SetConfig+0x1d4>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <DMA_SetConfig+0x1d6>
 80049e8:	2300      	movs	r3, #0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d059      	beq.n	8004aa2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	223f      	movs	r2, #63	@ 0x3f
 80049f8:	409a      	lsls	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b40      	cmp	r3, #64	@ 0x40
 8004a1c:	d138      	bne.n	8004a90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a2e:	e0ae      	b.n	8004b8e <DMA_SetConfig+0x37a>
 8004a30:	40020010 	.word	0x40020010
 8004a34:	40020028 	.word	0x40020028
 8004a38:	40020040 	.word	0x40020040
 8004a3c:	40020058 	.word	0x40020058
 8004a40:	40020070 	.word	0x40020070
 8004a44:	40020088 	.word	0x40020088
 8004a48:	400200a0 	.word	0x400200a0
 8004a4c:	400200b8 	.word	0x400200b8
 8004a50:	40020410 	.word	0x40020410
 8004a54:	40020428 	.word	0x40020428
 8004a58:	40020440 	.word	0x40020440
 8004a5c:	40020458 	.word	0x40020458
 8004a60:	40020470 	.word	0x40020470
 8004a64:	40020488 	.word	0x40020488
 8004a68:	400204a0 	.word	0x400204a0
 8004a6c:	400204b8 	.word	0x400204b8
 8004a70:	58025408 	.word	0x58025408
 8004a74:	5802541c 	.word	0x5802541c
 8004a78:	58025430 	.word	0x58025430
 8004a7c:	58025444 	.word	0x58025444
 8004a80:	58025458 	.word	0x58025458
 8004a84:	5802546c 	.word	0x5802546c
 8004a88:	58025480 	.word	0x58025480
 8004a8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	60da      	str	r2, [r3, #12]
}
 8004aa0:	e075      	b.n	8004b8e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8004b9c <DMA_SetConfig+0x388>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d04a      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba0 <DMA_SetConfig+0x38c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d045      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3a      	ldr	r2, [pc, #232]	@ (8004ba4 <DMA_SetConfig+0x390>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d040      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a38      	ldr	r2, [pc, #224]	@ (8004ba8 <DMA_SetConfig+0x394>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d03b      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a37      	ldr	r2, [pc, #220]	@ (8004bac <DMA_SetConfig+0x398>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d036      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a35      	ldr	r2, [pc, #212]	@ (8004bb0 <DMA_SetConfig+0x39c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d031      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a34      	ldr	r2, [pc, #208]	@ (8004bb4 <DMA_SetConfig+0x3a0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d02c      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a32      	ldr	r2, [pc, #200]	@ (8004bb8 <DMA_SetConfig+0x3a4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d027      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a31      	ldr	r2, [pc, #196]	@ (8004bbc <DMA_SetConfig+0x3a8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc0 <DMA_SetConfig+0x3ac>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc4 <DMA_SetConfig+0x3b0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc8 <DMA_SetConfig+0x3b4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004bcc <DMA_SetConfig+0x3b8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a29      	ldr	r2, [pc, #164]	@ (8004bd0 <DMA_SetConfig+0x3bc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a28      	ldr	r2, [pc, #160]	@ (8004bd4 <DMA_SetConfig+0x3c0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <DMA_SetConfig+0x32e>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a26      	ldr	r2, [pc, #152]	@ (8004bd8 <DMA_SetConfig+0x3c4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <DMA_SetConfig+0x332>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <DMA_SetConfig+0x334>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d020      	beq.n	8004b8e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2201      	movs	r2, #1
 8004b56:	409a      	lsls	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b40      	cmp	r3, #64	@ 0x40
 8004b6a:	d108      	bne.n	8004b7e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	60da      	str	r2, [r3, #12]
}
 8004b7c:	e007      	b.n	8004b8e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	48022c08 	.word	0x48022c08
 8004ba0:	48022c1c 	.word	0x48022c1c
 8004ba4:	48022c30 	.word	0x48022c30
 8004ba8:	48022c44 	.word	0x48022c44
 8004bac:	48022c58 	.word	0x48022c58
 8004bb0:	48022c6c 	.word	0x48022c6c
 8004bb4:	48022c80 	.word	0x48022c80
 8004bb8:	48022c94 	.word	0x48022c94
 8004bbc:	58025408 	.word	0x58025408
 8004bc0:	5802541c 	.word	0x5802541c
 8004bc4:	58025430 	.word	0x58025430
 8004bc8:	58025444 	.word	0x58025444
 8004bcc:	58025458 	.word	0x58025458
 8004bd0:	5802546c 	.word	0x5802546c
 8004bd4:	58025480 	.word	0x58025480
 8004bd8:	58025494 	.word	0x58025494

08004bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a42      	ldr	r2, [pc, #264]	@ (8004cf4 <DMA_CalcBaseAndBitshift+0x118>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d04a      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a41      	ldr	r2, [pc, #260]	@ (8004cf8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d045      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8004cfc <DMA_CalcBaseAndBitshift+0x120>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d040      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a3e      	ldr	r2, [pc, #248]	@ (8004d00 <DMA_CalcBaseAndBitshift+0x124>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d03b      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a3c      	ldr	r2, [pc, #240]	@ (8004d04 <DMA_CalcBaseAndBitshift+0x128>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d036      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3b      	ldr	r2, [pc, #236]	@ (8004d08 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d031      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a39      	ldr	r2, [pc, #228]	@ (8004d0c <DMA_CalcBaseAndBitshift+0x130>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02c      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a38      	ldr	r2, [pc, #224]	@ (8004d10 <DMA_CalcBaseAndBitshift+0x134>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d027      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a36      	ldr	r2, [pc, #216]	@ (8004d14 <DMA_CalcBaseAndBitshift+0x138>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a35      	ldr	r2, [pc, #212]	@ (8004d18 <DMA_CalcBaseAndBitshift+0x13c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d01d      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a33      	ldr	r2, [pc, #204]	@ (8004d1c <DMA_CalcBaseAndBitshift+0x140>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a32      	ldr	r2, [pc, #200]	@ (8004d20 <DMA_CalcBaseAndBitshift+0x144>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a30      	ldr	r2, [pc, #192]	@ (8004d24 <DMA_CalcBaseAndBitshift+0x148>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004d28 <DMA_CalcBaseAndBitshift+0x14c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2d      	ldr	r2, [pc, #180]	@ (8004d2c <DMA_CalcBaseAndBitshift+0x150>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <DMA_CalcBaseAndBitshift+0x154>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d101      	bne.n	8004c88 <DMA_CalcBaseAndBitshift+0xac>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <DMA_CalcBaseAndBitshift+0xae>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d024      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	3b10      	subs	r3, #16
 8004c96:	4a27      	ldr	r2, [pc, #156]	@ (8004d34 <DMA_CalcBaseAndBitshift+0x158>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	091b      	lsrs	r3, r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	4a24      	ldr	r2, [pc, #144]	@ (8004d38 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ca8:	5cd3      	ldrb	r3, [r2, r3]
 8004caa:	461a      	mov	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d908      	bls.n	8004cc8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8004d3c <DMA_CalcBaseAndBitshift+0x160>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	1d1a      	adds	r2, r3, #4
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cc6:	e00d      	b.n	8004ce4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4b1b      	ldr	r3, [pc, #108]	@ (8004d3c <DMA_CalcBaseAndBitshift+0x160>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cd6:	e005      	b.n	8004ce4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8
 8004d34:	aaaaaaab 	.word	0xaaaaaaab
 8004d38:	08011a98 	.word	0x08011a98
 8004d3c:	fffffc00 	.word	0xfffffc00

08004d40 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d120      	bne.n	8004d96 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d858      	bhi.n	8004e0e <DMA_CheckFifoParam+0xce>
 8004d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d64 <DMA_CheckFifoParam+0x24>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d75 	.word	0x08004d75
 8004d68:	08004d87 	.word	0x08004d87
 8004d6c:	08004d75 	.word	0x08004d75
 8004d70:	08004e0f 	.word	0x08004e0f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d048      	beq.n	8004e12 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d84:	e045      	b.n	8004e12 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d8e:	d142      	bne.n	8004e16 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d94:	e03f      	b.n	8004e16 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9e:	d123      	bne.n	8004de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d838      	bhi.n	8004e1a <DMA_CheckFifoParam+0xda>
 8004da8:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <DMA_CheckFifoParam+0x70>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004dc7 	.word	0x08004dc7
 8004db8:	08004dc1 	.word	0x08004dc1
 8004dbc:	08004dd9 	.word	0x08004dd9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
        break;
 8004dc4:	e030      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d025      	beq.n	8004e1e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dd6:	e022      	b.n	8004e1e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004de0:	d11f      	bne.n	8004e22 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004de6:	e01c      	b.n	8004e22 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d902      	bls.n	8004df6 <DMA_CheckFifoParam+0xb6>
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d003      	beq.n	8004dfc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004df4:	e018      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dfa:	e015      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00e      	beq.n	8004e26 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8004e0c:	e00b      	b.n	8004e26 <DMA_CheckFifoParam+0xe6>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e00a      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
        break;
 8004e12:	bf00      	nop
 8004e14:	e008      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
        break;
 8004e16:	bf00      	nop
 8004e18:	e006      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
        break;
 8004e1a:	bf00      	nop
 8004e1c:	e004      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
        break;
 8004e1e:	bf00      	nop
 8004e20:	e002      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
        break;
 8004e22:	bf00      	nop
 8004e24:	e000      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
    break;
 8004e26:	bf00      	nop
    }
  }

  return status;
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop

08004e38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a38      	ldr	r2, [pc, #224]	@ (8004f2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d022      	beq.n	8004e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a36      	ldr	r2, [pc, #216]	@ (8004f30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01d      	beq.n	8004e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a35      	ldr	r2, [pc, #212]	@ (8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d018      	beq.n	8004e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a33      	ldr	r2, [pc, #204]	@ (8004f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a32      	ldr	r2, [pc, #200]	@ (8004f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00e      	beq.n	8004e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a30      	ldr	r2, [pc, #192]	@ (8004f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2f      	ldr	r2, [pc, #188]	@ (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2d      	ldr	r2, [pc, #180]	@ (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d101      	bne.n	8004e9a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01a      	beq.n	8004ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	3b08      	subs	r3, #8
 8004ea8:	4a28      	ldr	r2, [pc, #160]	@ (8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	091b      	lsrs	r3, r3, #4
 8004eb0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4b26      	ldr	r3, [pc, #152]	@ (8004f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	461a      	mov	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a24      	ldr	r2, [pc, #144]	@ (8004f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ec4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	2201      	movs	r2, #1
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ed4:	e024      	b.n	8004f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	3b10      	subs	r3, #16
 8004ede:	4a1e      	ldr	r2, [pc, #120]	@ (8004f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4a1c      	ldr	r2, [pc, #112]	@ (8004f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d806      	bhi.n	8004efe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d902      	bls.n	8004efe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3308      	adds	r3, #8
 8004efc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	461a      	mov	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a16      	ldr	r2, [pc, #88]	@ (8004f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f10:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	2201      	movs	r2, #1
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	58025408 	.word	0x58025408
 8004f30:	5802541c 	.word	0x5802541c
 8004f34:	58025430 	.word	0x58025430
 8004f38:	58025444 	.word	0x58025444
 8004f3c:	58025458 	.word	0x58025458
 8004f40:	5802546c 	.word	0x5802546c
 8004f44:	58025480 	.word	0x58025480
 8004f48:	58025494 	.word	0x58025494
 8004f4c:	cccccccd 	.word	0xcccccccd
 8004f50:	16009600 	.word	0x16009600
 8004f54:	58025880 	.word	0x58025880
 8004f58:	aaaaaaab 	.word	0xaaaaaaab
 8004f5c:	400204b8 	.word	0x400204b8
 8004f60:	4002040f 	.word	0x4002040f
 8004f64:	10008200 	.word	0x10008200
 8004f68:	40020880 	.word	0x40020880

08004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d04a      	beq.n	8005018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d847      	bhi.n	8005018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a25      	ldr	r2, [pc, #148]	@ (8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d022      	beq.n	8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a24      	ldr	r2, [pc, #144]	@ (8005028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d01d      	beq.n	8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a22      	ldr	r2, [pc, #136]	@ (800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d018      	beq.n	8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a21      	ldr	r2, [pc, #132]	@ (8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d013      	beq.n	8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00e      	beq.n	8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d009      	beq.n	8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d101      	bne.n	8004fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4b17      	ldr	r3, [pc, #92]	@ (8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	461a      	mov	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a15      	ldr	r2, [pc, #84]	@ (8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004ff4:	671a      	str	r2, [r3, #112]	@ 0x70
 8004ff6:	e009      	b.n	800500c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4b14      	ldr	r3, [pc, #80]	@ (800504c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	461a      	mov	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a11      	ldr	r2, [pc, #68]	@ (8005050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800500a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3b01      	subs	r3, #1
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	58025408 	.word	0x58025408
 8005028:	5802541c 	.word	0x5802541c
 800502c:	58025430 	.word	0x58025430
 8005030:	58025444 	.word	0x58025444
 8005034:	58025458 	.word	0x58025458
 8005038:	5802546c 	.word	0x5802546c
 800503c:	58025480 	.word	0x58025480
 8005040:	58025494 	.word	0x58025494
 8005044:	1600963f 	.word	0x1600963f
 8005048:	58025940 	.word	0x58025940
 800504c:	1000823f 	.word	0x1000823f
 8005050:	40020940 	.word	0x40020940

08005054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	@ 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005062:	4b89      	ldr	r3, [pc, #548]	@ (8005288 <HAL_GPIO_Init+0x234>)
 8005064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005066:	e194      	b.n	8005392 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	4013      	ands	r3, r2
 8005076:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8186 	beq.w	800538c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d005      	beq.n	8005098 <HAL_GPIO_Init+0x44>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d130      	bne.n	80050fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	2203      	movs	r2, #3
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ce:	2201      	movs	r2, #1
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	091b      	lsrs	r3, r3, #4
 80050e4:	f003 0201 	and.w	r2, r3, #1
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b03      	cmp	r3, #3
 8005104:	d017      	beq.n	8005136 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	2203      	movs	r2, #3
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4313      	orrs	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d123      	bne.n	800518a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	08da      	lsrs	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3208      	adds	r2, #8
 800514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	220f      	movs	r2, #15
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4013      	ands	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	08da      	lsrs	r2, r3, #3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3208      	adds	r2, #8
 8005184:	69b9      	ldr	r1, [r7, #24]
 8005186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	2203      	movs	r2, #3
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 0203 	and.w	r2, r3, #3
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80e0 	beq.w	800538c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051cc:	4b2f      	ldr	r3, [pc, #188]	@ (800528c <HAL_GPIO_Init+0x238>)
 80051ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80051d2:	4a2e      	ldr	r2, [pc, #184]	@ (800528c <HAL_GPIO_Init+0x238>)
 80051d4:	f043 0302 	orr.w	r3, r3, #2
 80051d8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80051dc:	4b2b      	ldr	r3, [pc, #172]	@ (800528c <HAL_GPIO_Init+0x238>)
 80051de:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051ea:	4a29      	ldr	r2, [pc, #164]	@ (8005290 <HAL_GPIO_Init+0x23c>)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	089b      	lsrs	r3, r3, #2
 80051f0:	3302      	adds	r3, #2
 80051f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	220f      	movs	r2, #15
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43db      	mvns	r3, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4013      	ands	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a20      	ldr	r2, [pc, #128]	@ (8005294 <HAL_GPIO_Init+0x240>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d052      	beq.n	80052bc <HAL_GPIO_Init+0x268>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a1f      	ldr	r2, [pc, #124]	@ (8005298 <HAL_GPIO_Init+0x244>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d031      	beq.n	8005282 <HAL_GPIO_Init+0x22e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a1e      	ldr	r2, [pc, #120]	@ (800529c <HAL_GPIO_Init+0x248>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d02b      	beq.n	800527e <HAL_GPIO_Init+0x22a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1d      	ldr	r2, [pc, #116]	@ (80052a0 <HAL_GPIO_Init+0x24c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d025      	beq.n	800527a <HAL_GPIO_Init+0x226>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a1c      	ldr	r2, [pc, #112]	@ (80052a4 <HAL_GPIO_Init+0x250>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01f      	beq.n	8005276 <HAL_GPIO_Init+0x222>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a1b      	ldr	r2, [pc, #108]	@ (80052a8 <HAL_GPIO_Init+0x254>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d019      	beq.n	8005272 <HAL_GPIO_Init+0x21e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a1a      	ldr	r2, [pc, #104]	@ (80052ac <HAL_GPIO_Init+0x258>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_GPIO_Init+0x21a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a19      	ldr	r2, [pc, #100]	@ (80052b0 <HAL_GPIO_Init+0x25c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00d      	beq.n	800526a <HAL_GPIO_Init+0x216>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a18      	ldr	r2, [pc, #96]	@ (80052b4 <HAL_GPIO_Init+0x260>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <HAL_GPIO_Init+0x212>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a17      	ldr	r2, [pc, #92]	@ (80052b8 <HAL_GPIO_Init+0x264>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <HAL_GPIO_Init+0x20e>
 800525e:	2309      	movs	r3, #9
 8005260:	e02d      	b.n	80052be <HAL_GPIO_Init+0x26a>
 8005262:	230a      	movs	r3, #10
 8005264:	e02b      	b.n	80052be <HAL_GPIO_Init+0x26a>
 8005266:	2308      	movs	r3, #8
 8005268:	e029      	b.n	80052be <HAL_GPIO_Init+0x26a>
 800526a:	2307      	movs	r3, #7
 800526c:	e027      	b.n	80052be <HAL_GPIO_Init+0x26a>
 800526e:	2306      	movs	r3, #6
 8005270:	e025      	b.n	80052be <HAL_GPIO_Init+0x26a>
 8005272:	2305      	movs	r3, #5
 8005274:	e023      	b.n	80052be <HAL_GPIO_Init+0x26a>
 8005276:	2304      	movs	r3, #4
 8005278:	e021      	b.n	80052be <HAL_GPIO_Init+0x26a>
 800527a:	2303      	movs	r3, #3
 800527c:	e01f      	b.n	80052be <HAL_GPIO_Init+0x26a>
 800527e:	2302      	movs	r3, #2
 8005280:	e01d      	b.n	80052be <HAL_GPIO_Init+0x26a>
 8005282:	2301      	movs	r3, #1
 8005284:	e01b      	b.n	80052be <HAL_GPIO_Init+0x26a>
 8005286:	bf00      	nop
 8005288:	58000080 	.word	0x58000080
 800528c:	58024400 	.word	0x58024400
 8005290:	58000400 	.word	0x58000400
 8005294:	58020000 	.word	0x58020000
 8005298:	58020400 	.word	0x58020400
 800529c:	58020800 	.word	0x58020800
 80052a0:	58020c00 	.word	0x58020c00
 80052a4:	58021000 	.word	0x58021000
 80052a8:	58021400 	.word	0x58021400
 80052ac:	58021800 	.word	0x58021800
 80052b0:	58021c00 	.word	0x58021c00
 80052b4:	58022000 	.word	0x58022000
 80052b8:	58022400 	.word	0x58022400
 80052bc:	2300      	movs	r3, #0
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	f002 0203 	and.w	r2, r2, #3
 80052c4:	0092      	lsls	r2, r2, #2
 80052c6:	4093      	lsls	r3, r2
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052ce:	4938      	ldr	r1, [pc, #224]	@ (80053b0 <HAL_GPIO_Init+0x35c>)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	089b      	lsrs	r3, r3, #2
 80052d4:	3302      	adds	r3, #2
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005302:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800530a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	43db      	mvns	r3, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4013      	ands	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005330:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	43db      	mvns	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4013      	ands	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	43db      	mvns	r3, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4013      	ands	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	3301      	adds	r3, #1
 8005390:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	f47f ae63 	bne.w	8005068 <HAL_GPIO_Init+0x14>
  }
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	3724      	adds	r7, #36	@ 0x24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	58000400 	.word	0x58000400

080053b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	807b      	strh	r3, [r7, #2]
 80053c0:	4613      	mov	r3, r2
 80053c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053c4:	787b      	ldrb	r3, [r7, #1]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ca:	887a      	ldrh	r2, [r7, #2]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053d0:	e003      	b.n	80053da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053d2:	887b      	ldrh	r3, [r7, #2]
 80053d4:	041a      	lsls	r2, r3, #16
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	619a      	str	r2, [r3, #24]
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	4603      	mov	r3, r0
 80053ee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80053f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005400:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	4618      	mov	r0, r3
 800540e:	f7fb fea9 	bl	8001164 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e08b      	b.n	8005546 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fb fbd8 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2224      	movs	r2, #36	@ 0x24
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0201 	bic.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800546c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800547c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d107      	bne.n	8005496 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	e006      	b.n	80054a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80054a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d108      	bne.n	80054be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	e007      	b.n	80054ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005550 <HAL_I2C_Init+0x134>)
 80054da:	430b      	orrs	r3, r1
 80054dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69d9      	ldr	r1, [r3, #28]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	02008000 	.word	0x02008000

08005554 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	461a      	mov	r2, r3
 8005560:	460b      	mov	r3, r1
 8005562:	817b      	strh	r3, [r7, #10]
 8005564:	4613      	mov	r3, r2
 8005566:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b20      	cmp	r3, #32
 8005572:	f040 80fd 	bne.w	8005770 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_I2C_Master_Transmit+0x30>
 8005580:	2302      	movs	r3, #2
 8005582:	e0f6      	b.n	8005772 <HAL_I2C_Master_Transmit+0x21e>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800558c:	f7fc fcc0 	bl	8001f10 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	2319      	movs	r3, #25
 8005598:	2201      	movs	r2, #1
 800559a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 fce0 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e0e1      	b.n	8005772 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2221      	movs	r2, #33	@ 0x21
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2210      	movs	r2, #16
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	893a      	ldrh	r2, [r7, #8]
 80055ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2bff      	cmp	r3, #255	@ 0xff
 80055de:	d906      	bls.n	80055ee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	22ff      	movs	r2, #255	@ 0xff
 80055e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80055e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e007      	b.n	80055fe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055fc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d024      	beq.n	8005650 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563a:	b2db      	uxtb	r3, r3
 800563c:	3301      	adds	r3, #1
 800563e:	b2da      	uxtb	r2, r3
 8005640:	8979      	ldrh	r1, [r7, #10]
 8005642:	4b4e      	ldr	r3, [pc, #312]	@ (800577c <HAL_I2C_Master_Transmit+0x228>)
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fedb 	bl	8006404 <I2C_TransferConfig>
 800564e:	e066      	b.n	800571e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005654:	b2da      	uxtb	r2, r3
 8005656:	8979      	ldrh	r1, [r7, #10]
 8005658:	4b48      	ldr	r3, [pc, #288]	@ (800577c <HAL_I2C_Master_Transmit+0x228>)
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fed0 	bl	8006404 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005664:	e05b      	b.n	800571e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	6a39      	ldr	r1, [r7, #32]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fcd3 	bl	8006016 <I2C_WaitOnTXISFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e07b      	b.n	8005772 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	781a      	ldrb	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d034      	beq.n	800571e <HAL_I2C_Master_Transmit+0x1ca>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d130      	bne.n	800571e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	2200      	movs	r2, #0
 80056c4:	2180      	movs	r1, #128	@ 0x80
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fc4c 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e04d      	b.n	8005772 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2bff      	cmp	r3, #255	@ 0xff
 80056de:	d90e      	bls.n	80056fe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	22ff      	movs	r2, #255	@ 0xff
 80056e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	8979      	ldrh	r1, [r7, #10]
 80056ee:	2300      	movs	r3, #0
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fe84 	bl	8006404 <I2C_TransferConfig>
 80056fc:	e00f      	b.n	800571e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570c:	b2da      	uxtb	r2, r3
 800570e:	8979      	ldrh	r1, [r7, #10]
 8005710:	2300      	movs	r3, #0
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fe73 	bl	8006404 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d19e      	bne.n	8005666 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	6a39      	ldr	r1, [r7, #32]
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fcb9 	bl	80060a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e01a      	b.n	8005772 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2220      	movs	r2, #32
 8005742:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6859      	ldr	r1, [r3, #4]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <HAL_I2C_Master_Transmit+0x22c>)
 8005750:	400b      	ands	r3, r1
 8005752:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	e000      	b.n	8005772 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005770:	2302      	movs	r3, #2
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	80002000 	.word	0x80002000
 8005780:	fe00e800 	.word	0xfe00e800

08005784 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	461a      	mov	r2, r3
 8005790:	460b      	mov	r3, r1
 8005792:	817b      	strh	r3, [r7, #10]
 8005794:	4613      	mov	r3, r2
 8005796:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	f040 80db 	bne.w	800595c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_I2C_Master_Receive+0x30>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e0d4      	b.n	800595e <HAL_I2C_Master_Receive+0x1da>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057bc:	f7fc fba8 	bl	8001f10 <HAL_GetTick>
 80057c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	2319      	movs	r3, #25
 80057c8:	2201      	movs	r2, #1
 80057ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fbc8 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e0bf      	b.n	800595e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2222      	movs	r2, #34	@ 0x22
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2210      	movs	r2, #16
 80057ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	893a      	ldrh	r2, [r7, #8]
 80057fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2bff      	cmp	r3, #255	@ 0xff
 800580e:	d90e      	bls.n	800582e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	22ff      	movs	r2, #255	@ 0xff
 8005814:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581a:	b2da      	uxtb	r2, r3
 800581c:	8979      	ldrh	r1, [r7, #10]
 800581e:	4b52      	ldr	r3, [pc, #328]	@ (8005968 <HAL_I2C_Master_Receive+0x1e4>)
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fdec 	bl	8006404 <I2C_TransferConfig>
 800582c:	e06d      	b.n	800590a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583c:	b2da      	uxtb	r2, r3
 800583e:	8979      	ldrh	r1, [r7, #10]
 8005840:	4b49      	ldr	r3, [pc, #292]	@ (8005968 <HAL_I2C_Master_Receive+0x1e4>)
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fddb 	bl	8006404 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800584e:	e05c      	b.n	800590a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	6a39      	ldr	r1, [r7, #32]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fc69 	bl	800612c <I2C_WaitOnRXNEFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e07c      	b.n	800595e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d034      	beq.n	800590a <HAL_I2C_Master_Receive+0x186>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d130      	bne.n	800590a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2200      	movs	r2, #0
 80058b0:	2180      	movs	r1, #128	@ 0x80
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fb56 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e04d      	b.n	800595e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2bff      	cmp	r3, #255	@ 0xff
 80058ca:	d90e      	bls.n	80058ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	22ff      	movs	r2, #255	@ 0xff
 80058d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	8979      	ldrh	r1, [r7, #10]
 80058da:	2300      	movs	r3, #0
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fd8e 	bl	8006404 <I2C_TransferConfig>
 80058e8:	e00f      	b.n	800590a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	8979      	ldrh	r1, [r7, #10]
 80058fc:	2300      	movs	r3, #0
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fd7d 	bl	8006404 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d19d      	bne.n	8005850 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	6a39      	ldr	r1, [r7, #32]
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 fbc3 	bl	80060a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e01a      	b.n	800595e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2220      	movs	r2, #32
 800592e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6859      	ldr	r1, [r3, #4]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <HAL_I2C_Master_Receive+0x1e8>)
 800593c:	400b      	ands	r3, r1
 800593e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	80002400 	.word	0x80002400
 800596c:	fe00e800 	.word	0xfe00e800

08005970 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af02      	add	r7, sp, #8
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	4608      	mov	r0, r1
 800597a:	4611      	mov	r1, r2
 800597c:	461a      	mov	r2, r3
 800597e:	4603      	mov	r3, r0
 8005980:	817b      	strh	r3, [r7, #10]
 8005982:	460b      	mov	r3, r1
 8005984:	813b      	strh	r3, [r7, #8]
 8005986:	4613      	mov	r3, r2
 8005988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b20      	cmp	r3, #32
 8005994:	f040 80f9 	bne.w	8005b8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_I2C_Mem_Write+0x34>
 800599e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0ed      	b.n	8005b8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_I2C_Mem_Write+0x4e>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e0e6      	b.n	8005b8c <HAL_I2C_Mem_Write+0x21c>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059c6:	f7fc faa3 	bl	8001f10 <HAL_GetTick>
 80059ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	2319      	movs	r3, #25
 80059d2:	2201      	movs	r2, #1
 80059d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 fac3 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0d1      	b.n	8005b8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2221      	movs	r2, #33	@ 0x21
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2240      	movs	r2, #64	@ 0x40
 80059f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a3a      	ldr	r2, [r7, #32]
 8005a02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a10:	88f8      	ldrh	r0, [r7, #6]
 8005a12:	893a      	ldrh	r2, [r7, #8]
 8005a14:	8979      	ldrh	r1, [r7, #10]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	4603      	mov	r3, r0
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f9d3 	bl	8005dcc <I2C_RequestMemoryWrite>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0a9      	b.n	8005b8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2bff      	cmp	r3, #255	@ 0xff
 8005a40:	d90e      	bls.n	8005a60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	22ff      	movs	r2, #255	@ 0xff
 8005a46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	8979      	ldrh	r1, [r7, #10]
 8005a50:	2300      	movs	r3, #0
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 fcd3 	bl	8006404 <I2C_TransferConfig>
 8005a5e:	e00f      	b.n	8005a80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	8979      	ldrh	r1, [r7, #10]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 fcc2 	bl	8006404 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fac6 	bl	8006016 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e07b      	b.n	8005b8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	781a      	ldrb	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d034      	beq.n	8005b38 <HAL_I2C_Mem_Write+0x1c8>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d130      	bne.n	8005b38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005adc:	2200      	movs	r2, #0
 8005ade:	2180      	movs	r1, #128	@ 0x80
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fa3f 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e04d      	b.n	8005b8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2bff      	cmp	r3, #255	@ 0xff
 8005af8:	d90e      	bls.n	8005b18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	22ff      	movs	r2, #255	@ 0xff
 8005afe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	8979      	ldrh	r1, [r7, #10]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fc77 	bl	8006404 <I2C_TransferConfig>
 8005b16:	e00f      	b.n	8005b38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	8979      	ldrh	r1, [r7, #10]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fc66 	bl	8006404 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d19e      	bne.n	8005a80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 faac 	bl	80060a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e01a      	b.n	8005b8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6859      	ldr	r1, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b0a      	ldr	r3, [pc, #40]	@ (8005b94 <HAL_I2C_Mem_Write+0x224>)
 8005b6a:	400b      	ands	r3, r1
 8005b6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	e000      	b.n	8005b8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005b8a:	2302      	movs	r3, #2
  }
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	fe00e800 	.word	0xfe00e800

08005b98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	817b      	strh	r3, [r7, #10]
 8005baa:	460b      	mov	r3, r1
 8005bac:	813b      	strh	r3, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	f040 80fd 	bne.w	8005dba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <HAL_I2C_Mem_Read+0x34>
 8005bc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d105      	bne.n	8005bd8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bd2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0f1      	b.n	8005dbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_I2C_Mem_Read+0x4e>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e0ea      	b.n	8005dbc <HAL_I2C_Mem_Read+0x224>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bee:	f7fc f98f 	bl	8001f10 <HAL_GetTick>
 8005bf2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	2319      	movs	r3, #25
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f9af 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0d5      	b.n	8005dbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2222      	movs	r2, #34	@ 0x22
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2240      	movs	r2, #64	@ 0x40
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a3a      	ldr	r2, [r7, #32]
 8005c2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c38:	88f8      	ldrh	r0, [r7, #6]
 8005c3a:	893a      	ldrh	r2, [r7, #8]
 8005c3c:	8979      	ldrh	r1, [r7, #10]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	4603      	mov	r3, r0
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f913 	bl	8005e74 <I2C_RequestMemoryRead>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0ad      	b.n	8005dbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2bff      	cmp	r3, #255	@ 0xff
 8005c68:	d90e      	bls.n	8005c88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	22ff      	movs	r2, #255	@ 0xff
 8005c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	8979      	ldrh	r1, [r7, #10]
 8005c78:	4b52      	ldr	r3, [pc, #328]	@ (8005dc4 <HAL_I2C_Mem_Read+0x22c>)
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 fbbf 	bl	8006404 <I2C_TransferConfig>
 8005c86:	e00f      	b.n	8005ca8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	8979      	ldrh	r1, [r7, #10]
 8005c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8005dc4 <HAL_I2C_Mem_Read+0x22c>)
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fbae 	bl	8006404 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2104      	movs	r1, #4
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f956 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e07c      	b.n	8005dbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d034      	beq.n	8005d68 <HAL_I2C_Mem_Read+0x1d0>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d130      	bne.n	8005d68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2180      	movs	r1, #128	@ 0x80
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f927 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e04d      	b.n	8005dbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2bff      	cmp	r3, #255	@ 0xff
 8005d28:	d90e      	bls.n	8005d48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	22ff      	movs	r2, #255	@ 0xff
 8005d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	8979      	ldrh	r1, [r7, #10]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fb5f 	bl	8006404 <I2C_TransferConfig>
 8005d46:	e00f      	b.n	8005d68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	8979      	ldrh	r1, [r7, #10]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fb4e 	bl	8006404 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d19a      	bne.n	8005ca8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f994 	bl	80060a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e01a      	b.n	8005dbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6859      	ldr	r1, [r3, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc8 <HAL_I2C_Mem_Read+0x230>)
 8005d9a:	400b      	ands	r3, r1
 8005d9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	80002400 	.word	0x80002400
 8005dc8:	fe00e800 	.word	0xfe00e800

08005dcc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4603      	mov	r3, r0
 8005ddc:	817b      	strh	r3, [r7, #10]
 8005dde:	460b      	mov	r3, r1
 8005de0:	813b      	strh	r3, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	8979      	ldrh	r1, [r7, #10]
 8005dec:	4b20      	ldr	r3, [pc, #128]	@ (8005e70 <I2C_RequestMemoryWrite+0xa4>)
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fb05 	bl	8006404 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	69b9      	ldr	r1, [r7, #24]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f909 	bl	8006016 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e02c      	b.n	8005e68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d105      	bne.n	8005e20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e14:	893b      	ldrh	r3, [r7, #8]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e1e:	e015      	b.n	8005e4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e20:	893b      	ldrh	r3, [r7, #8]
 8005e22:	0a1b      	lsrs	r3, r3, #8
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	69b9      	ldr	r1, [r7, #24]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f8ef 	bl	8006016 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e012      	b.n	8005e68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e42:	893b      	ldrh	r3, [r7, #8]
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2200      	movs	r2, #0
 8005e54:	2180      	movs	r1, #128	@ 0x80
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f884 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	80002000 	.word	0x80002000

08005e74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	461a      	mov	r2, r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	817b      	strh	r3, [r7, #10]
 8005e86:	460b      	mov	r3, r1
 8005e88:	813b      	strh	r3, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	8979      	ldrh	r1, [r7, #10]
 8005e94:	4b20      	ldr	r3, [pc, #128]	@ (8005f18 <I2C_RequestMemoryRead+0xa4>)
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fab2 	bl	8006404 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	69b9      	ldr	r1, [r7, #24]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f8b6 	bl	8006016 <I2C_WaitOnTXISFlagUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e02c      	b.n	8005f0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eb4:	88fb      	ldrh	r3, [r7, #6]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005eba:	893b      	ldrh	r3, [r7, #8]
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ec4:	e015      	b.n	8005ef2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ec6:	893b      	ldrh	r3, [r7, #8]
 8005ec8:	0a1b      	lsrs	r3, r3, #8
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	69b9      	ldr	r1, [r7, #24]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f89c 	bl	8006016 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e012      	b.n	8005f0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ee8:	893b      	ldrh	r3, [r7, #8]
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2140      	movs	r1, #64	@ 0x40
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f831 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	80002000 	.word	0x80002000

08005f1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d103      	bne.n	8005f3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d007      	beq.n	8005f58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	619a      	str	r2, [r3, #24]
  }
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	4613      	mov	r3, r2
 8005f72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f74:	e03b      	b.n	8005fee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f962 	bl	8006244 <I2C_IsErrorOccurred>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e041      	b.n	800600e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d02d      	beq.n	8005fee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f92:	f7fb ffbd 	bl	8001f10 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d122      	bne.n	8005fee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d113      	bne.n	8005fee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fca:	f043 0220 	orr.w	r2, r3, #32
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e00f      	b.n	800600e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	bf0c      	ite	eq
 8005ffe:	2301      	moveq	r3, #1
 8006000:	2300      	movne	r3, #0
 8006002:	b2db      	uxtb	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	429a      	cmp	r2, r3
 800600a:	d0b4      	beq.n	8005f76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006022:	e033      	b.n	800608c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f90b 	bl	8006244 <I2C_IsErrorOccurred>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e031      	b.n	800609c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d025      	beq.n	800608c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006040:	f7fb ff66 	bl	8001f10 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	429a      	cmp	r2, r3
 800604e:	d302      	bcc.n	8006056 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d11a      	bne.n	800608c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b02      	cmp	r3, #2
 8006062:	d013      	beq.n	800608c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006068:	f043 0220 	orr.w	r2, r3, #32
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e007      	b.n	800609c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b02      	cmp	r3, #2
 8006098:	d1c4      	bne.n	8006024 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060b0:	e02f      	b.n	8006112 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f8c4 	bl	8006244 <I2C_IsErrorOccurred>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e02d      	b.n	8006122 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c6:	f7fb ff23 	bl	8001f10 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d302      	bcc.n	80060dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d11a      	bne.n	8006112 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d013      	beq.n	8006112 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ee:	f043 0220 	orr.w	r2, r3, #32
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e007      	b.n	8006122 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b20      	cmp	r3, #32
 800611e:	d1c8      	bne.n	80060b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800613c:	e071      	b.n	8006222 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f87e 	bl	8006244 <I2C_IsErrorOccurred>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b20      	cmp	r3, #32
 800615e:	d13b      	bne.n	80061d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d138      	bne.n	80061d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b04      	cmp	r3, #4
 8006172:	d105      	bne.n	8006180 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f003 0310 	and.w	r3, r3, #16
 800618a:	2b10      	cmp	r3, #16
 800618c:	d121      	bne.n	80061d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2210      	movs	r2, #16
 8006194:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2204      	movs	r2, #4
 800619a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2220      	movs	r2, #32
 80061a2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b24      	ldr	r3, [pc, #144]	@ (8006240 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80061b0:	400b      	ands	r3, r1
 80061b2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	75fb      	strb	r3, [r7, #23]
 80061d0:	e002      	b.n	80061d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80061d8:	f7fb fe9a 	bl	8001f10 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d302      	bcc.n	80061ee <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d119      	bne.n	8006222 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d116      	bne.n	8006222 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d00f      	beq.n	8006222 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006206:	f043 0220 	orr.w	r2, r3, #32
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b04      	cmp	r3, #4
 800622e:	d002      	beq.n	8006236 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d083      	beq.n	800613e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	fe00e800 	.word	0xfe00e800

08006244 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08a      	sub	sp, #40	@ 0x28
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b00      	cmp	r3, #0
 800626e:	d068      	beq.n	8006342 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2210      	movs	r2, #16
 8006276:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006278:	e049      	b.n	800630e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d045      	beq.n	800630e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006282:	f7fb fe45 	bl	8001f10 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	429a      	cmp	r2, r3
 8006290:	d302      	bcc.n	8006298 <I2C_IsErrorOccurred+0x54>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d13a      	bne.n	800630e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ba:	d121      	bne.n	8006300 <I2C_IsErrorOccurred+0xbc>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062c2:	d01d      	beq.n	8006300 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80062c4:	7cfb      	ldrb	r3, [r7, #19]
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d01a      	beq.n	8006300 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80062da:	f7fb fe19 	bl	8001f10 <HAL_GetTick>
 80062de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062e0:	e00e      	b.n	8006300 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80062e2:	f7fb fe15 	bl	8001f10 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b19      	cmp	r3, #25
 80062ee:	d907      	bls.n	8006300 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	f043 0320 	orr.w	r3, r3, #32
 80062f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80062fe:	e006      	b.n	800630e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b20      	cmp	r3, #32
 800630c:	d1e9      	bne.n	80062e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b20      	cmp	r3, #32
 800631a:	d003      	beq.n	8006324 <I2C_IsErrorOccurred+0xe0>
 800631c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0aa      	beq.n	800627a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006328:	2b00      	cmp	r3, #0
 800632a:	d103      	bne.n	8006334 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2220      	movs	r2, #32
 8006332:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	f043 0304 	orr.w	r3, r3, #4
 800633a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006364:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	f043 0308 	orr.w	r3, r3, #8
 800637c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006386:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	f043 0302 	orr.w	r3, r3, #2
 800639e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80063b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01c      	beq.n	80063f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff fdaf 	bl	8005f1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6859      	ldr	r1, [r3, #4]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006400 <I2C_IsErrorOccurred+0x1bc>)
 80063ca:	400b      	ands	r3, r1
 80063cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80063f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3728      	adds	r7, #40	@ 0x28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	fe00e800 	.word	0xfe00e800

08006404 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	607b      	str	r3, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	817b      	strh	r3, [r7, #10]
 8006412:	4613      	mov	r3, r2
 8006414:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006416:	897b      	ldrh	r3, [r7, #10]
 8006418:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800641c:	7a7b      	ldrb	r3, [r7, #9]
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006424:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	4313      	orrs	r3, r2
 800642e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006432:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	0d5b      	lsrs	r3, r3, #21
 800643e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006442:	4b08      	ldr	r3, [pc, #32]	@ (8006464 <I2C_TransferConfig+0x60>)
 8006444:	430b      	orrs	r3, r1
 8006446:	43db      	mvns	r3, r3
 8006448:	ea02 0103 	and.w	r1, r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	03ff63ff 	.word	0x03ff63ff

08006468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b20      	cmp	r3, #32
 800647c:	d138      	bne.n	80064f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006488:	2302      	movs	r3, #2
 800648a:	e032      	b.n	80064f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2224      	movs	r2, #36	@ 0x24
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80064ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6819      	ldr	r1, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	e000      	b.n	80064f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b20      	cmp	r3, #32
 8006512:	d139      	bne.n	8006588 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800651e:	2302      	movs	r3, #2
 8006520:	e033      	b.n	800658a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2224      	movs	r2, #36	@ 0x24
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0201 	bic.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006550:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	e000      	b.n	800658a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006588:	2302      	movs	r3, #2
  }
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
	...

08006598 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80065a0:	4b29      	ldr	r3, [pc, #164]	@ (8006648 <HAL_PWREx_ConfigSupply+0xb0>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	2b06      	cmp	r3, #6
 80065aa:	d00a      	beq.n	80065c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80065ac:	4b26      	ldr	r3, [pc, #152]	@ (8006648 <HAL_PWREx_ConfigSupply+0xb0>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d001      	beq.n	80065be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e040      	b.n	8006640 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	e03e      	b.n	8006640 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80065c2:	4b21      	ldr	r3, [pc, #132]	@ (8006648 <HAL_PWREx_ConfigSupply+0xb0>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80065ca:	491f      	ldr	r1, [pc, #124]	@ (8006648 <HAL_PWREx_ConfigSupply+0xb0>)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80065d2:	f7fb fc9d 	bl	8001f10 <HAL_GetTick>
 80065d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065d8:	e009      	b.n	80065ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80065da:	f7fb fc99 	bl	8001f10 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065e8:	d901      	bls.n	80065ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e028      	b.n	8006640 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065ee:	4b16      	ldr	r3, [pc, #88]	@ (8006648 <HAL_PWREx_ConfigSupply+0xb0>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065fa:	d1ee      	bne.n	80065da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b1e      	cmp	r3, #30
 8006600:	d008      	beq.n	8006614 <HAL_PWREx_ConfigSupply+0x7c>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b2e      	cmp	r3, #46	@ 0x2e
 8006606:	d005      	beq.n	8006614 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b1d      	cmp	r3, #29
 800660c:	d002      	beq.n	8006614 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b2d      	cmp	r3, #45	@ 0x2d
 8006612:	d114      	bne.n	800663e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006614:	f7fb fc7c 	bl	8001f10 <HAL_GetTick>
 8006618:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800661a:	e009      	b.n	8006630 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800661c:	f7fb fc78 	bl	8001f10 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800662a:	d901      	bls.n	8006630 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e007      	b.n	8006640 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006630:	4b05      	ldr	r3, [pc, #20]	@ (8006648 <HAL_PWREx_ConfigSupply+0xb0>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800663c:	d1ee      	bne.n	800661c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	58024800 	.word	0x58024800

0800664c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08c      	sub	sp, #48	@ 0x30
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	f000 bc1f 	b.w	8006e9e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80b3 	beq.w	80067d4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800666e:	4b95      	ldr	r3, [pc, #596]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006678:	4b92      	ldr	r3, [pc, #584]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800667a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800667e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006680:	2b10      	cmp	r3, #16
 8006682:	d007      	beq.n	8006694 <HAL_RCC_OscConfig+0x48>
 8006684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006686:	2b18      	cmp	r3, #24
 8006688:	d112      	bne.n	80066b0 <HAL_RCC_OscConfig+0x64>
 800668a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d10d      	bne.n	80066b0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006694:	4b8b      	ldr	r3, [pc, #556]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 8098 	beq.w	80067d2 <HAL_RCC_OscConfig+0x186>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f040 8093 	bne.w	80067d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e3f6      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b8:	d106      	bne.n	80066c8 <HAL_RCC_OscConfig+0x7c>
 80066ba:	4b82      	ldr	r3, [pc, #520]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a81      	ldr	r2, [pc, #516]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80066c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e058      	b.n	800677a <HAL_RCC_OscConfig+0x12e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d112      	bne.n	80066f6 <HAL_RCC_OscConfig+0xaa>
 80066d0:	4b7c      	ldr	r3, [pc, #496]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a7b      	ldr	r2, [pc, #492]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80066d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	4b79      	ldr	r3, [pc, #484]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a78      	ldr	r2, [pc, #480]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80066e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	4b76      	ldr	r3, [pc, #472]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a75      	ldr	r2, [pc, #468]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80066ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	e041      	b.n	800677a <HAL_RCC_OscConfig+0x12e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066fe:	d112      	bne.n	8006726 <HAL_RCC_OscConfig+0xda>
 8006700:	4b70      	ldr	r3, [pc, #448]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a6f      	ldr	r2, [pc, #444]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006706:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	4b6d      	ldr	r3, [pc, #436]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a6c      	ldr	r2, [pc, #432]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006712:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	4b6a      	ldr	r3, [pc, #424]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a69      	ldr	r2, [pc, #420]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800671e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	e029      	b.n	800677a <HAL_RCC_OscConfig+0x12e>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800672e:	d112      	bne.n	8006756 <HAL_RCC_OscConfig+0x10a>
 8006730:	4b64      	ldr	r3, [pc, #400]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a63      	ldr	r2, [pc, #396]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006736:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	4b61      	ldr	r3, [pc, #388]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a60      	ldr	r2, [pc, #384]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	4b5e      	ldr	r3, [pc, #376]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a5d      	ldr	r2, [pc, #372]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800674e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	e011      	b.n	800677a <HAL_RCC_OscConfig+0x12e>
 8006756:	4b5b      	ldr	r3, [pc, #364]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a5a      	ldr	r2, [pc, #360]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800675c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	4b58      	ldr	r3, [pc, #352]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a57      	ldr	r2, [pc, #348]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006768:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	4b55      	ldr	r3, [pc, #340]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a54      	ldr	r2, [pc, #336]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006774:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006778:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d013      	beq.n	80067aa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006782:	f7fb fbc5 	bl	8001f10 <HAL_GetTick>
 8006786:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800678a:	f7fb fbc1 	bl	8001f10 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b64      	cmp	r3, #100	@ 0x64
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e380      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800679c:	4b49      	ldr	r3, [pc, #292]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f0      	beq.n	800678a <HAL_RCC_OscConfig+0x13e>
 80067a8:	e014      	b.n	80067d4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067aa:	f7fb fbb1 	bl	8001f10 <HAL_GetTick>
 80067ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b2:	f7fb fbad 	bl	8001f10 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b64      	cmp	r3, #100	@ 0x64
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e36c      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067c4:	4b3f      	ldr	r3, [pc, #252]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f0      	bne.n	80067b2 <HAL_RCC_OscConfig+0x166>
 80067d0:	e000      	b.n	80067d4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 808c 	beq.w	80068fa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067e2:	4b38      	ldr	r3, [pc, #224]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067ec:	4b35      	ldr	r3, [pc, #212]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80067ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <HAL_RCC_OscConfig+0x1bc>
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	2b18      	cmp	r3, #24
 80067fc:	d137      	bne.n	800686e <HAL_RCC_OscConfig+0x222>
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	f003 0303 	and.w	r3, r3, #3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d132      	bne.n	800686e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006808:	4b2e      	ldr	r3, [pc, #184]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_RCC_OscConfig+0x1d4>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e33e      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006820:	4b28      	ldr	r3, [pc, #160]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f023 0219 	bic.w	r2, r3, #25
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4925      	ldr	r1, [pc, #148]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800682e:	4313      	orrs	r3, r2
 8006830:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006832:	f7fb fb6d 	bl	8001f10 <HAL_GetTick>
 8006836:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800683a:	f7fb fb69 	bl	8001f10 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e328      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800684c:	4b1d      	ldr	r3, [pc, #116]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006858:	4b1a      	ldr	r3, [pc, #104]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	061b      	lsls	r3, r3, #24
 8006866:	4917      	ldr	r1, [pc, #92]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006868:	4313      	orrs	r3, r2
 800686a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800686c:	e045      	b.n	80068fa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d028      	beq.n	80068c8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006876:	4b13      	ldr	r3, [pc, #76]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 0219 	bic.w	r2, r3, #25
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	4910      	ldr	r1, [pc, #64]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 8006884:	4313      	orrs	r3, r2
 8006886:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fb fb42 	bl	8001f10 <HAL_GetTick>
 800688c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006890:	f7fb fb3e 	bl	8001f10 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b02      	cmp	r3, #2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e2fd      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068a2:	4b08      	ldr	r3, [pc, #32]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0f0      	beq.n	8006890 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ae:	4b05      	ldr	r3, [pc, #20]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	061b      	lsls	r3, r3, #24
 80068bc:	4901      	ldr	r1, [pc, #4]	@ (80068c4 <HAL_RCC_OscConfig+0x278>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	604b      	str	r3, [r1, #4]
 80068c2:	e01a      	b.n	80068fa <HAL_RCC_OscConfig+0x2ae>
 80068c4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068c8:	4b97      	ldr	r3, [pc, #604]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a96      	ldr	r2, [pc, #600]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7fb fb1c 	bl	8001f10 <HAL_GetTick>
 80068d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068dc:	f7fb fb18 	bl	8001f10 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e2d7      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068ee:	4b8e      	ldr	r3, [pc, #568]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b00      	cmp	r3, #0
 8006904:	d06a      	beq.n	80069dc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006906:	4b88      	ldr	r3, [pc, #544]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800690e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006910:	4b85      	ldr	r3, [pc, #532]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006914:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2b08      	cmp	r3, #8
 800691a:	d007      	beq.n	800692c <HAL_RCC_OscConfig+0x2e0>
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b18      	cmp	r3, #24
 8006920:	d11b      	bne.n	800695a <HAL_RCC_OscConfig+0x30e>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	2b01      	cmp	r3, #1
 800692a:	d116      	bne.n	800695a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800692c:	4b7e      	ldr	r3, [pc, #504]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <HAL_RCC_OscConfig+0x2f8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	2b80      	cmp	r3, #128	@ 0x80
 800693e:	d001      	beq.n	8006944 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e2ac      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006944:	4b78      	ldr	r3, [pc, #480]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	061b      	lsls	r3, r3, #24
 8006952:	4975      	ldr	r1, [pc, #468]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006954:	4313      	orrs	r3, r2
 8006956:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006958:	e040      	b.n	80069dc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d023      	beq.n	80069aa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006962:	4b71      	ldr	r3, [pc, #452]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a70      	ldr	r2, [pc, #448]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800696c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696e:	f7fb facf 	bl	8001f10 <HAL_GetTick>
 8006972:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006976:	f7fb facb 	bl	8001f10 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e28a      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006988:	4b67      	ldr	r3, [pc, #412]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006994:	4b64      	ldr	r3, [pc, #400]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	4961      	ldr	r1, [pc, #388]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60cb      	str	r3, [r1, #12]
 80069a8:	e018      	b.n	80069dc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80069aa:	4b5f      	ldr	r3, [pc, #380]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 80069b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b6:	f7fb faab 	bl	8001f10 <HAL_GetTick>
 80069ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069bc:	e008      	b.n	80069d0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80069be:	f7fb faa7 	bl	8001f10 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e266      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069d0:	4b55      	ldr	r3, [pc, #340]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f0      	bne.n	80069be <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d036      	beq.n	8006a56 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d019      	beq.n	8006a24 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069f0:	4b4d      	ldr	r3, [pc, #308]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 80069f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069f4:	4a4c      	ldr	r2, [pc, #304]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 80069f6:	f043 0301 	orr.w	r3, r3, #1
 80069fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069fc:	f7fb fa88 	bl	8001f10 <HAL_GetTick>
 8006a00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a04:	f7fb fa84 	bl	8001f10 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e243      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a16:	4b44      	ldr	r3, [pc, #272]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0x3b8>
 8006a22:	e018      	b.n	8006a56 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a24:	4b40      	ldr	r3, [pc, #256]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a28:	4a3f      	ldr	r2, [pc, #252]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a30:	f7fb fa6e 	bl	8001f10 <HAL_GetTick>
 8006a34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a38:	f7fb fa6a 	bl	8001f10 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e229      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a4a:	4b37      	ldr	r3, [pc, #220]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d036      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d019      	beq.n	8006a9e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a2e      	ldr	r2, [pc, #184]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006a70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006a74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a76:	f7fb fa4b 	bl	8001f10 <HAL_GetTick>
 8006a7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a7e:	f7fb fa47 	bl	8001f10 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e206      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a90:	4b25      	ldr	r3, [pc, #148]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <HAL_RCC_OscConfig+0x432>
 8006a9c:	e018      	b.n	8006ad0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a9e:	4b22      	ldr	r3, [pc, #136]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a21      	ldr	r2, [pc, #132]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006aa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006aa8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006aaa:	f7fb fa31 	bl	8001f10 <HAL_GetTick>
 8006aae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ab2:	f7fb fa2d 	bl	8001f10 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e1ec      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ac4:	4b18      	ldr	r3, [pc, #96]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f0      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80af 	beq.w	8006c3c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ade:	4b13      	ldr	r3, [pc, #76]	@ (8006b2c <HAL_RCC_OscConfig+0x4e0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a12      	ldr	r2, [pc, #72]	@ (8006b2c <HAL_RCC_OscConfig+0x4e0>)
 8006ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ae8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aea:	f7fb fa11 	bl	8001f10 <HAL_GetTick>
 8006aee:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006af0:	e008      	b.n	8006b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af2:	f7fb fa0d 	bl	8001f10 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b64      	cmp	r3, #100	@ 0x64
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e1cc      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b04:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <HAL_RCC_OscConfig+0x4e0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0f0      	beq.n	8006af2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d10b      	bne.n	8006b30 <HAL_RCC_OscConfig+0x4e4>
 8006b18:	4b03      	ldr	r3, [pc, #12]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b1c:	4a02      	ldr	r2, [pc, #8]	@ (8006b28 <HAL_RCC_OscConfig+0x4dc>)
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b24:	e05b      	b.n	8006bde <HAL_RCC_OscConfig+0x592>
 8006b26:	bf00      	nop
 8006b28:	58024400 	.word	0x58024400
 8006b2c:	58024800 	.word	0x58024800
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d112      	bne.n	8006b5e <HAL_RCC_OscConfig+0x512>
 8006b38:	4b9d      	ldr	r3, [pc, #628]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b3c:	4a9c      	ldr	r2, [pc, #624]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b44:	4b9a      	ldr	r3, [pc, #616]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b48:	4a99      	ldr	r2, [pc, #612]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b50:	4b97      	ldr	r3, [pc, #604]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b54:	4a96      	ldr	r2, [pc, #600]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b56:	f023 0304 	bic.w	r3, r3, #4
 8006b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b5c:	e03f      	b.n	8006bde <HAL_RCC_OscConfig+0x592>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	d112      	bne.n	8006b8c <HAL_RCC_OscConfig+0x540>
 8006b66:	4b92      	ldr	r3, [pc, #584]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b6a:	4a91      	ldr	r2, [pc, #580]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b6c:	f043 0304 	orr.w	r3, r3, #4
 8006b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b72:	4b8f      	ldr	r3, [pc, #572]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b76:	4a8e      	ldr	r2, [pc, #568]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b7e:	4b8c      	ldr	r3, [pc, #560]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b82:	4a8b      	ldr	r2, [pc, #556]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b84:	f043 0301 	orr.w	r3, r3, #1
 8006b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b8a:	e028      	b.n	8006bde <HAL_RCC_OscConfig+0x592>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b85      	cmp	r3, #133	@ 0x85
 8006b92:	d112      	bne.n	8006bba <HAL_RCC_OscConfig+0x56e>
 8006b94:	4b86      	ldr	r3, [pc, #536]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b98:	4a85      	ldr	r2, [pc, #532]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006b9a:	f043 0304 	orr.w	r3, r3, #4
 8006b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ba0:	4b83      	ldr	r3, [pc, #524]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba4:	4a82      	ldr	r2, [pc, #520]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bac:	4b80      	ldr	r3, [pc, #512]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bb0:	4a7f      	ldr	r2, [pc, #508]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006bb2:	f043 0301 	orr.w	r3, r3, #1
 8006bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bb8:	e011      	b.n	8006bde <HAL_RCC_OscConfig+0x592>
 8006bba:	4b7d      	ldr	r3, [pc, #500]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bc6:	4b7a      	ldr	r3, [pc, #488]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bca:	4a79      	ldr	r2, [pc, #484]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006bcc:	f023 0304 	bic.w	r3, r3, #4
 8006bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bd2:	4b77      	ldr	r3, [pc, #476]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bd6:	4a76      	ldr	r2, [pc, #472]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006bd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bdc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d015      	beq.n	8006c12 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be6:	f7fb f993 	bl	8001f10 <HAL_GetTick>
 8006bea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bec:	e00a      	b.n	8006c04 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bee:	f7fb f98f 	bl	8001f10 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e14c      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c04:	4b6a      	ldr	r3, [pc, #424]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0ee      	beq.n	8006bee <HAL_RCC_OscConfig+0x5a2>
 8006c10:	e014      	b.n	8006c3c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c12:	f7fb f97d 	bl	8001f10 <HAL_GetTick>
 8006c16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c18:	e00a      	b.n	8006c30 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1a:	f7fb f979 	bl	8001f10 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e136      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c30:	4b5f      	ldr	r3, [pc, #380]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1ee      	bne.n	8006c1a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 812b 	beq.w	8006e9c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006c46:	4b5a      	ldr	r3, [pc, #360]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c4e:	2b18      	cmp	r3, #24
 8006c50:	f000 80bb 	beq.w	8006dca <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	f040 8095 	bne.w	8006d88 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c5e:	4b54      	ldr	r3, [pc, #336]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a53      	ldr	r2, [pc, #332]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006c64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6a:	f7fb f951 	bl	8001f10 <HAL_GetTick>
 8006c6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c70:	e008      	b.n	8006c84 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c72:	f7fb f94d 	bl	8001f10 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e10c      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c84:	4b4a      	ldr	r3, [pc, #296]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1f0      	bne.n	8006c72 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c90:	4b47      	ldr	r3, [pc, #284]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006c92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c94:	4b47      	ldr	r3, [pc, #284]	@ (8006db4 <HAL_RCC_OscConfig+0x768>)
 8006c96:	4013      	ands	r3, r2
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ca0:	0112      	lsls	r2, r2, #4
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	4942      	ldr	r1, [pc, #264]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	628b      	str	r3, [r1, #40]	@ 0x28
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	025b      	lsls	r3, r3, #9
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	061b      	lsls	r3, r3, #24
 8006cd6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006cda:	4935      	ldr	r1, [pc, #212]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006ce0:	4b33      	ldr	r3, [pc, #204]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	4a32      	ldr	r2, [pc, #200]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006cec:	4b30      	ldr	r3, [pc, #192]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006cee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cf0:	4b31      	ldr	r3, [pc, #196]	@ (8006db8 <HAL_RCC_OscConfig+0x76c>)
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006cf8:	00d2      	lsls	r2, r2, #3
 8006cfa:	492d      	ldr	r1, [pc, #180]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006d00:	4b2b      	ldr	r3, [pc, #172]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	f023 020c 	bic.w	r2, r3, #12
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0c:	4928      	ldr	r1, [pc, #160]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006d12:	4b27      	ldr	r3, [pc, #156]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d16:	f023 0202 	bic.w	r2, r3, #2
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1e:	4924      	ldr	r1, [pc, #144]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d24:	4b22      	ldr	r3, [pc, #136]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d28:	4a21      	ldr	r2, [pc, #132]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d30:	4b1f      	ldr	r3, [pc, #124]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	4a1e      	ldr	r2, [pc, #120]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d40:	4a1b      	ldr	r2, [pc, #108]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006d48:	4b19      	ldr	r3, [pc, #100]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4c:	4a18      	ldr	r2, [pc, #96]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d54:	4b16      	ldr	r3, [pc, #88]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a15      	ldr	r2, [pc, #84]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fb f8d6 	bl	8001f10 <HAL_GetTick>
 8006d64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d68:	f7fb f8d2 	bl	8001f10 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e091      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0f0      	beq.n	8006d68 <HAL_RCC_OscConfig+0x71c>
 8006d86:	e089      	b.n	8006e9c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d88:	4b09      	ldr	r3, [pc, #36]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a08      	ldr	r2, [pc, #32]	@ (8006db0 <HAL_RCC_OscConfig+0x764>)
 8006d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d94:	f7fb f8bc 	bl	8001f10 <HAL_GetTick>
 8006d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d9a:	e00f      	b.n	8006dbc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d9c:	f7fb f8b8 	bl	8001f10 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d908      	bls.n	8006dbc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e077      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
 8006dae:	bf00      	nop
 8006db0:	58024400 	.word	0x58024400
 8006db4:	fffffc0c 	.word	0xfffffc0c
 8006db8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ea8 <HAL_RCC_OscConfig+0x85c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e9      	bne.n	8006d9c <HAL_RCC_OscConfig+0x750>
 8006dc8:	e068      	b.n	8006e9c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006dca:	4b37      	ldr	r3, [pc, #220]	@ (8006ea8 <HAL_RCC_OscConfig+0x85c>)
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006dd0:	4b35      	ldr	r3, [pc, #212]	@ (8006ea8 <HAL_RCC_OscConfig+0x85c>)
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d031      	beq.n	8006e42 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f003 0203 	and.w	r2, r3, #3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d12a      	bne.n	8006e42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	091b      	lsrs	r3, r3, #4
 8006df0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d122      	bne.n	8006e42 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e06:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d11a      	bne.n	8006e42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	0a5b      	lsrs	r3, r3, #9
 8006e10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e18:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d111      	bne.n	8006e42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	0c1b      	lsrs	r3, r3, #16
 8006e22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d108      	bne.n	8006e42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	0e1b      	lsrs	r3, r3, #24
 8006e34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d001      	beq.n	8006e46 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e02b      	b.n	8006e9e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006e46:	4b18      	ldr	r3, [pc, #96]	@ (8006ea8 <HAL_RCC_OscConfig+0x85c>)
 8006e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4a:	08db      	lsrs	r3, r3, #3
 8006e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e50:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d01f      	beq.n	8006e9c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006e5c:	4b12      	ldr	r3, [pc, #72]	@ (8006ea8 <HAL_RCC_OscConfig+0x85c>)
 8006e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e60:	4a11      	ldr	r2, [pc, #68]	@ (8006ea8 <HAL_RCC_OscConfig+0x85c>)
 8006e62:	f023 0301 	bic.w	r3, r3, #1
 8006e66:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e68:	f7fb f852 	bl	8001f10 <HAL_GetTick>
 8006e6c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006e6e:	bf00      	nop
 8006e70:	f7fb f84e 	bl	8001f10 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d0f9      	beq.n	8006e70 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea8 <HAL_RCC_OscConfig+0x85c>)
 8006e7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e80:	4b0a      	ldr	r3, [pc, #40]	@ (8006eac <HAL_RCC_OscConfig+0x860>)
 8006e82:	4013      	ands	r3, r2
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006e88:	00d2      	lsls	r2, r2, #3
 8006e8a:	4907      	ldr	r1, [pc, #28]	@ (8006ea8 <HAL_RCC_OscConfig+0x85c>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006e90:	4b05      	ldr	r3, [pc, #20]	@ (8006ea8 <HAL_RCC_OscConfig+0x85c>)
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	4a04      	ldr	r2, [pc, #16]	@ (8006ea8 <HAL_RCC_OscConfig+0x85c>)
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3730      	adds	r7, #48	@ 0x30
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	58024400 	.word	0x58024400
 8006eac:	ffff0007 	.word	0xffff0007

08006eb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e19c      	b.n	80071fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ec4:	4b8a      	ldr	r3, [pc, #552]	@ (80070f0 <HAL_RCC_ClockConfig+0x240>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 030f 	and.w	r3, r3, #15
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d910      	bls.n	8006ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed2:	4b87      	ldr	r3, [pc, #540]	@ (80070f0 <HAL_RCC_ClockConfig+0x240>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f023 020f 	bic.w	r2, r3, #15
 8006eda:	4985      	ldr	r1, [pc, #532]	@ (80070f0 <HAL_RCC_ClockConfig+0x240>)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee2:	4b83      	ldr	r3, [pc, #524]	@ (80070f0 <HAL_RCC_ClockConfig+0x240>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d001      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e184      	b.n	80071fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d010      	beq.n	8006f22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	4b7b      	ldr	r3, [pc, #492]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d908      	bls.n	8006f22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f10:	4b78      	ldr	r3, [pc, #480]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	4975      	ldr	r1, [pc, #468]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d010      	beq.n	8006f50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695a      	ldr	r2, [r3, #20]
 8006f32:	4b70      	ldr	r3, [pc, #448]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d908      	bls.n	8006f50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	496a      	ldr	r1, [pc, #424]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0310 	and.w	r3, r3, #16
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d010      	beq.n	8006f7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699a      	ldr	r2, [r3, #24]
 8006f60:	4b64      	ldr	r3, [pc, #400]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d908      	bls.n	8006f7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f6c:	4b61      	ldr	r3, [pc, #388]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	495e      	ldr	r1, [pc, #376]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d010      	beq.n	8006fac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	69da      	ldr	r2, [r3, #28]
 8006f8e:	4b59      	ldr	r3, [pc, #356]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d908      	bls.n	8006fac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f9a:	4b56      	ldr	r3, [pc, #344]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	4953      	ldr	r1, [pc, #332]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d010      	beq.n	8006fda <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d908      	bls.n	8006fda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	f023 020f 	bic.w	r2, r3, #15
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	4947      	ldr	r1, [pc, #284]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d055      	beq.n	8007092 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006fe6:	4b43      	ldr	r3, [pc, #268]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	4940      	ldr	r1, [pc, #256]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d107      	bne.n	8007010 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007000:	4b3c      	ldr	r3, [pc, #240]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d121      	bne.n	8007050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e0f6      	b.n	80071fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b03      	cmp	r3, #3
 8007016:	d107      	bne.n	8007028 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007018:	4b36      	ldr	r3, [pc, #216]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d115      	bne.n	8007050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e0ea      	b.n	80071fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d107      	bne.n	8007040 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007030:	4b30      	ldr	r3, [pc, #192]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d109      	bne.n	8007050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e0de      	b.n	80071fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007040:	4b2c      	ldr	r3, [pc, #176]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0d6      	b.n	80071fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007050:	4b28      	ldr	r3, [pc, #160]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f023 0207 	bic.w	r2, r3, #7
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4925      	ldr	r1, [pc, #148]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 800705e:	4313      	orrs	r3, r2
 8007060:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007062:	f7fa ff55 	bl	8001f10 <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007068:	e00a      	b.n	8007080 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800706a:	f7fa ff51 	bl	8001f10 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007078:	4293      	cmp	r3, r2
 800707a:	d901      	bls.n	8007080 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e0be      	b.n	80071fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007080:	4b1c      	ldr	r3, [pc, #112]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	429a      	cmp	r2, r3
 8007090:	d1eb      	bne.n	800706a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d010      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	4b14      	ldr	r3, [pc, #80]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d208      	bcs.n	80070c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070ae:	4b11      	ldr	r3, [pc, #68]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	f023 020f 	bic.w	r2, r3, #15
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	490e      	ldr	r1, [pc, #56]	@ (80070f4 <HAL_RCC_ClockConfig+0x244>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070c0:	4b0b      	ldr	r3, [pc, #44]	@ (80070f0 <HAL_RCC_ClockConfig+0x240>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d214      	bcs.n	80070f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ce:	4b08      	ldr	r3, [pc, #32]	@ (80070f0 <HAL_RCC_ClockConfig+0x240>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f023 020f 	bic.w	r2, r3, #15
 80070d6:	4906      	ldr	r1, [pc, #24]	@ (80070f0 <HAL_RCC_ClockConfig+0x240>)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	4313      	orrs	r3, r2
 80070dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070de:	4b04      	ldr	r3, [pc, #16]	@ (80070f0 <HAL_RCC_ClockConfig+0x240>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d005      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e086      	b.n	80071fe <HAL_RCC_ClockConfig+0x34e>
 80070f0:	52002000 	.word	0x52002000
 80070f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d010      	beq.n	8007126 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	4b3f      	ldr	r3, [pc, #252]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007110:	429a      	cmp	r2, r3
 8007112:	d208      	bcs.n	8007126 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007114:	4b3c      	ldr	r3, [pc, #240]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	4939      	ldr	r1, [pc, #228]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 8007122:	4313      	orrs	r3, r2
 8007124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d010      	beq.n	8007154 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695a      	ldr	r2, [r3, #20]
 8007136:	4b34      	ldr	r3, [pc, #208]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800713e:	429a      	cmp	r2, r3
 8007140:	d208      	bcs.n	8007154 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007142:	4b31      	ldr	r3, [pc, #196]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	492e      	ldr	r1, [pc, #184]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 8007150:	4313      	orrs	r3, r2
 8007152:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0310 	and.w	r3, r3, #16
 800715c:	2b00      	cmp	r3, #0
 800715e:	d010      	beq.n	8007182 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699a      	ldr	r2, [r3, #24]
 8007164:	4b28      	ldr	r3, [pc, #160]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800716c:	429a      	cmp	r2, r3
 800716e:	d208      	bcs.n	8007182 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007170:	4b25      	ldr	r3, [pc, #148]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	4922      	ldr	r1, [pc, #136]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 800717e:	4313      	orrs	r3, r2
 8007180:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d010      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69da      	ldr	r2, [r3, #28]
 8007192:	4b1d      	ldr	r3, [pc, #116]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800719a:	429a      	cmp	r2, r3
 800719c:	d208      	bcs.n	80071b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800719e:	4b1a      	ldr	r3, [pc, #104]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	4917      	ldr	r1, [pc, #92]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80071b0:	f000 f834 	bl	800721c <HAL_RCC_GetSysClockFreq>
 80071b4:	4602      	mov	r2, r0
 80071b6:	4b14      	ldr	r3, [pc, #80]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	0a1b      	lsrs	r3, r3, #8
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	4912      	ldr	r1, [pc, #72]	@ (800720c <HAL_RCC_ClockConfig+0x35c>)
 80071c2:	5ccb      	ldrb	r3, [r1, r3]
 80071c4:	f003 031f 	and.w	r3, r3, #31
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
 80071cc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80071ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007208 <HAL_RCC_ClockConfig+0x358>)
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	4a0d      	ldr	r2, [pc, #52]	@ (800720c <HAL_RCC_ClockConfig+0x35c>)
 80071d8:	5cd3      	ldrb	r3, [r2, r3]
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	fa22 f303 	lsr.w	r3, r2, r3
 80071e4:	4a0a      	ldr	r2, [pc, #40]	@ (8007210 <HAL_RCC_ClockConfig+0x360>)
 80071e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007214 <HAL_RCC_ClockConfig+0x364>)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80071ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007218 <HAL_RCC_ClockConfig+0x368>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fa fe42 	bl	8001e7c <HAL_InitTick>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	58024400 	.word	0x58024400
 800720c:	08011a88 	.word	0x08011a88
 8007210:	24000004 	.word	0x24000004
 8007214:	24000000 	.word	0x24000000
 8007218:	24000008 	.word	0x24000008

0800721c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800721c:	b480      	push	{r7}
 800721e:	b089      	sub	sp, #36	@ 0x24
 8007220:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007222:	4bb3      	ldr	r3, [pc, #716]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800722a:	2b18      	cmp	r3, #24
 800722c:	f200 8155 	bhi.w	80074da <HAL_RCC_GetSysClockFreq+0x2be>
 8007230:	a201      	add	r2, pc, #4	@ (adr r2, 8007238 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	0800729d 	.word	0x0800729d
 800723c:	080074db 	.word	0x080074db
 8007240:	080074db 	.word	0x080074db
 8007244:	080074db 	.word	0x080074db
 8007248:	080074db 	.word	0x080074db
 800724c:	080074db 	.word	0x080074db
 8007250:	080074db 	.word	0x080074db
 8007254:	080074db 	.word	0x080074db
 8007258:	080072c3 	.word	0x080072c3
 800725c:	080074db 	.word	0x080074db
 8007260:	080074db 	.word	0x080074db
 8007264:	080074db 	.word	0x080074db
 8007268:	080074db 	.word	0x080074db
 800726c:	080074db 	.word	0x080074db
 8007270:	080074db 	.word	0x080074db
 8007274:	080074db 	.word	0x080074db
 8007278:	080072c9 	.word	0x080072c9
 800727c:	080074db 	.word	0x080074db
 8007280:	080074db 	.word	0x080074db
 8007284:	080074db 	.word	0x080074db
 8007288:	080074db 	.word	0x080074db
 800728c:	080074db 	.word	0x080074db
 8007290:	080074db 	.word	0x080074db
 8007294:	080074db 	.word	0x080074db
 8007298:	080072cf 	.word	0x080072cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800729c:	4b94      	ldr	r3, [pc, #592]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d009      	beq.n	80072bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072a8:	4b91      	ldr	r3, [pc, #580]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	08db      	lsrs	r3, r3, #3
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	4a90      	ldr	r2, [pc, #576]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
 80072b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80072ba:	e111      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80072bc:	4b8d      	ldr	r3, [pc, #564]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80072be:	61bb      	str	r3, [r7, #24]
      break;
 80072c0:	e10e      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80072c2:	4b8d      	ldr	r3, [pc, #564]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80072c4:	61bb      	str	r3, [r7, #24]
      break;
 80072c6:	e10b      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80072c8:	4b8c      	ldr	r3, [pc, #560]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80072ca:	61bb      	str	r3, [r7, #24]
      break;
 80072cc:	e108      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072ce:	4b88      	ldr	r3, [pc, #544]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80072d8:	4b85      	ldr	r3, [pc, #532]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072dc:	091b      	lsrs	r3, r3, #4
 80072de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80072e4:	4b82      	ldr	r3, [pc, #520]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80072ee:	4b80      	ldr	r3, [pc, #512]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f2:	08db      	lsrs	r3, r3, #3
 80072f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	fb02 f303 	mul.w	r3, r2, r3
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 80e1 	beq.w	80074d4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b02      	cmp	r3, #2
 8007316:	f000 8083 	beq.w	8007420 <HAL_RCC_GetSysClockFreq+0x204>
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b02      	cmp	r3, #2
 800731e:	f200 80a1 	bhi.w	8007464 <HAL_RCC_GetSysClockFreq+0x248>
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_RCC_GetSysClockFreq+0x114>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d056      	beq.n	80073dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800732e:	e099      	b.n	8007464 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007330:	4b6f      	ldr	r3, [pc, #444]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	d02d      	beq.n	8007398 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800733c:	4b6c      	ldr	r3, [pc, #432]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	08db      	lsrs	r3, r3, #3
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	4a6b      	ldr	r2, [pc, #428]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
 800734c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b62      	ldr	r3, [pc, #392]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a02 	vldr	s12, [r7, #8]
 800737a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007396:	e087      	b.n	80074a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007504 <HAL_RCC_GetSysClockFreq+0x2e8>
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b51      	ldr	r3, [pc, #324]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80073be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007500 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80073da:	e065      	b.n	80074a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007508 <HAL_RCC_GetSysClockFreq+0x2ec>
 80073ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ee:	4b40      	ldr	r3, [pc, #256]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007402:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007500 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800741e:	e043      	b.n	80074a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800750c <HAL_RCC_GetSysClockFreq+0x2f0>
 800742e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007432:	4b2f      	ldr	r3, [pc, #188]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007442:	ed97 6a02 	vldr	s12, [r7, #8]
 8007446:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800744a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007462:	e021      	b.n	80074a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007508 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007476:	4b1e      	ldr	r3, [pc, #120]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007486:	ed97 6a02 	vldr	s12, [r7, #8]
 800748a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800748e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800749a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80074a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80074a8:	4b11      	ldr	r3, [pc, #68]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ac:	0a5b      	lsrs	r3, r3, #9
 80074ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074b2:	3301      	adds	r3, #1
 80074b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80074c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80074c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074cc:	ee17 3a90 	vmov	r3, s15
 80074d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80074d2:	e005      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
      break;
 80074d8:	e002      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80074da:	4b07      	ldr	r3, [pc, #28]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80074dc:	61bb      	str	r3, [r7, #24]
      break;
 80074de:	bf00      	nop
  }

  return sysclockfreq;
 80074e0:	69bb      	ldr	r3, [r7, #24]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3724      	adds	r7, #36	@ 0x24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	58024400 	.word	0x58024400
 80074f4:	03d09000 	.word	0x03d09000
 80074f8:	003d0900 	.word	0x003d0900
 80074fc:	007a1200 	.word	0x007a1200
 8007500:	46000000 	.word	0x46000000
 8007504:	4c742400 	.word	0x4c742400
 8007508:	4a742400 	.word	0x4a742400
 800750c:	4af42400 	.word	0x4af42400

08007510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007516:	f7ff fe81 	bl	800721c <HAL_RCC_GetSysClockFreq>
 800751a:	4602      	mov	r2, r0
 800751c:	4b10      	ldr	r3, [pc, #64]	@ (8007560 <HAL_RCC_GetHCLKFreq+0x50>)
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	0a1b      	lsrs	r3, r3, #8
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	490f      	ldr	r1, [pc, #60]	@ (8007564 <HAL_RCC_GetHCLKFreq+0x54>)
 8007528:	5ccb      	ldrb	r3, [r1, r3]
 800752a:	f003 031f 	and.w	r3, r3, #31
 800752e:	fa22 f303 	lsr.w	r3, r2, r3
 8007532:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007534:	4b0a      	ldr	r3, [pc, #40]	@ (8007560 <HAL_RCC_GetHCLKFreq+0x50>)
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	f003 030f 	and.w	r3, r3, #15
 800753c:	4a09      	ldr	r2, [pc, #36]	@ (8007564 <HAL_RCC_GetHCLKFreq+0x54>)
 800753e:	5cd3      	ldrb	r3, [r2, r3]
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	fa22 f303 	lsr.w	r3, r2, r3
 800754a:	4a07      	ldr	r2, [pc, #28]	@ (8007568 <HAL_RCC_GetHCLKFreq+0x58>)
 800754c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800754e:	4a07      	ldr	r2, [pc, #28]	@ (800756c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007554:	4b04      	ldr	r3, [pc, #16]	@ (8007568 <HAL_RCC_GetHCLKFreq+0x58>)
 8007556:	681b      	ldr	r3, [r3, #0]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	58024400 	.word	0x58024400
 8007564:	08011a88 	.word	0x08011a88
 8007568:	24000004 	.word	0x24000004
 800756c:	24000000 	.word	0x24000000

08007570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007574:	f7ff ffcc 	bl	8007510 <HAL_RCC_GetHCLKFreq>
 8007578:	4602      	mov	r2, r0
 800757a:	4b06      	ldr	r3, [pc, #24]	@ (8007594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	091b      	lsrs	r3, r3, #4
 8007580:	f003 0307 	and.w	r3, r3, #7
 8007584:	4904      	ldr	r1, [pc, #16]	@ (8007598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007586:	5ccb      	ldrb	r3, [r1, r3]
 8007588:	f003 031f 	and.w	r3, r3, #31
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007590:	4618      	mov	r0, r3
 8007592:	bd80      	pop	{r7, pc}
 8007594:	58024400 	.word	0x58024400
 8007598:	08011a88 	.word	0x08011a88

0800759c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80075a0:	f7ff ffb6 	bl	8007510 <HAL_RCC_GetHCLKFreq>
 80075a4:	4602      	mov	r2, r0
 80075a6:	4b06      	ldr	r3, [pc, #24]	@ (80075c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	0a1b      	lsrs	r3, r3, #8
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	4904      	ldr	r1, [pc, #16]	@ (80075c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80075b2:	5ccb      	ldrb	r3, [r1, r3]
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80075bc:	4618      	mov	r0, r3
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	58024400 	.word	0x58024400
 80075c4:	08011a88 	.word	0x08011a88

080075c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075cc:	b0c8      	sub	sp, #288	@ 0x120
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075da:	2300      	movs	r3, #0
 80075dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80075e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80075ec:	2500      	movs	r5, #0
 80075ee:	ea54 0305 	orrs.w	r3, r4, r5
 80075f2:	d049      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80075f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80075fe:	d02f      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007600:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007604:	d828      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800760a:	d01a      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800760c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007610:	d822      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800761a:	d007      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800761c:	e01c      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800761e:	4ba7      	ldr	r3, [pc, #668]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007622:	4aa6      	ldr	r2, [pc, #664]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007628:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800762a:	e01a      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800762c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007630:	3308      	adds	r3, #8
 8007632:	2102      	movs	r1, #2
 8007634:	4618      	mov	r0, r3
 8007636:	f001 fc43 	bl	8008ec0 <RCCEx_PLL2_Config>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007640:	e00f      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007646:	3328      	adds	r3, #40	@ 0x28
 8007648:	2102      	movs	r1, #2
 800764a:	4618      	mov	r0, r3
 800764c:	f001 fcea 	bl	8009024 <RCCEx_PLL3_Config>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007656:	e004      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800765e:	e000      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007662:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800766a:	4b94      	ldr	r3, [pc, #592]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800766c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800766e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007678:	4a90      	ldr	r2, [pc, #576]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800767a:	430b      	orrs	r3, r1
 800767c:	6513      	str	r3, [r2, #80]	@ 0x50
 800767e:	e003      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007680:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007684:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007694:	f04f 0900 	mov.w	r9, #0
 8007698:	ea58 0309 	orrs.w	r3, r8, r9
 800769c:	d047      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800769e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d82a      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80076a8:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	080076c5 	.word	0x080076c5
 80076b4:	080076d3 	.word	0x080076d3
 80076b8:	080076e9 	.word	0x080076e9
 80076bc:	08007707 	.word	0x08007707
 80076c0:	08007707 	.word	0x08007707
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c4:	4b7d      	ldr	r3, [pc, #500]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	4a7c      	ldr	r2, [pc, #496]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076d0:	e01a      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076d6:	3308      	adds	r3, #8
 80076d8:	2100      	movs	r1, #0
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fbf0 	bl	8008ec0 <RCCEx_PLL2_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076e6:	e00f      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ec:	3328      	adds	r3, #40	@ 0x28
 80076ee:	2100      	movs	r1, #0
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 fc97 	bl	8009024 <RCCEx_PLL3_Config>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076fc:	e004      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007704:	e000      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007708:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10a      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007710:	4b6a      	ldr	r3, [pc, #424]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007714:	f023 0107 	bic.w	r1, r3, #7
 8007718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800771c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800771e:	4a67      	ldr	r2, [pc, #412]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007720:	430b      	orrs	r3, r1
 8007722:	6513      	str	r3, [r2, #80]	@ 0x50
 8007724:	e003      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007726:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800772a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800772e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800773a:	f04f 0b00 	mov.w	fp, #0
 800773e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007742:	d054      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800774a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800774e:	d036      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007750:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007754:	d82f      	bhi.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800775a:	d032      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800775c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007760:	d829      	bhi.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007762:	2bc0      	cmp	r3, #192	@ 0xc0
 8007764:	d02f      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007766:	2bc0      	cmp	r3, #192	@ 0xc0
 8007768:	d825      	bhi.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800776a:	2b80      	cmp	r3, #128	@ 0x80
 800776c:	d018      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800776e:	2b80      	cmp	r3, #128	@ 0x80
 8007770:	d821      	bhi.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007776:	2b40      	cmp	r3, #64	@ 0x40
 8007778:	d007      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800777a:	e01c      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800777c:	4b4f      	ldr	r3, [pc, #316]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007780:	4a4e      	ldr	r2, [pc, #312]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007788:	e01e      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800778a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800778e:	3308      	adds	r3, #8
 8007790:	2100      	movs	r1, #0
 8007792:	4618      	mov	r0, r3
 8007794:	f001 fb94 	bl	8008ec0 <RCCEx_PLL2_Config>
 8007798:	4603      	mov	r3, r0
 800779a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800779e:	e013      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077a4:	3328      	adds	r3, #40	@ 0x28
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 fc3b 	bl	8009024 <RCCEx_PLL3_Config>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80077b4:	e008      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80077bc:	e004      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80077be:	bf00      	nop
 80077c0:	e002      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80077c2:	bf00      	nop
 80077c4:	e000      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80077c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80077d0:	4b3a      	ldr	r3, [pc, #232]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80077d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077de:	4a37      	ldr	r2, [pc, #220]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80077e4:	e003      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80077ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80077fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077fe:	2300      	movs	r3, #0
 8007800:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007804:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007808:	460b      	mov	r3, r1
 800780a:	4313      	orrs	r3, r2
 800780c:	d05c      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800780e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007814:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007818:	d03b      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800781a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800781e:	d834      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007824:	d037      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8007826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800782a:	d82e      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800782c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007830:	d033      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007832:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007836:	d828      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800783c:	d01a      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800783e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007842:	d822      	bhi.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800784c:	d007      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800784e:	e01c      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007850:	4b1a      	ldr	r3, [pc, #104]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007854:	4a19      	ldr	r2, [pc, #100]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800785a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800785c:	e01e      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800785e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007862:	3308      	adds	r3, #8
 8007864:	2100      	movs	r1, #0
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fb2a 	bl	8008ec0 <RCCEx_PLL2_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007872:	e013      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007878:	3328      	adds	r3, #40	@ 0x28
 800787a:	2100      	movs	r1, #0
 800787c:	4618      	mov	r0, r3
 800787e:	f001 fbd1 	bl	8009024 <RCCEx_PLL3_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007888:	e008      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007890:	e004      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007892:	bf00      	nop
 8007894:	e002      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007896:	bf00      	nop
 8007898:	e000      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800789a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10d      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80078a4:	4b05      	ldr	r3, [pc, #20]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80078ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b2:	4a02      	ldr	r2, [pc, #8]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078b4:	430b      	orrs	r3, r1
 80078b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80078b8:	e006      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80078ba:	bf00      	nop
 80078bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80078c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80078d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078d8:	2300      	movs	r3, #0
 80078da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d03a      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80078e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ee:	2b30      	cmp	r3, #48	@ 0x30
 80078f0:	d01f      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80078f2:	2b30      	cmp	r3, #48	@ 0x30
 80078f4:	d819      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d00c      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d815      	bhi.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d019      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007902:	2b10      	cmp	r3, #16
 8007904:	d111      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007906:	4bae      	ldr	r3, [pc, #696]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	4aad      	ldr	r2, [pc, #692]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800790c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007912:	e011      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007918:	3308      	adds	r3, #8
 800791a:	2102      	movs	r1, #2
 800791c:	4618      	mov	r0, r3
 800791e:	f001 facf 	bl	8008ec0 <RCCEx_PLL2_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007928:	e006      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007930:	e002      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007932:	bf00      	nop
 8007934:	e000      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10a      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007940:	4b9f      	ldr	r3, [pc, #636]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007944:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800794c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800794e:	4a9c      	ldr	r2, [pc, #624]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007950:	430b      	orrs	r3, r1
 8007952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007954:	e003      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007956:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800795a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800795e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800796a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800796e:	2300      	movs	r3, #0
 8007970:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007974:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007978:	460b      	mov	r3, r1
 800797a:	4313      	orrs	r3, r2
 800797c:	d051      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800797e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007988:	d035      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800798a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800798e:	d82e      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007990:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007994:	d031      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800799a:	d828      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 800799c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079a0:	d01a      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80079a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079a6:	d822      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80079ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079b0:	d007      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80079b2:	e01c      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b4:	4b82      	ldr	r3, [pc, #520]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b8:	4a81      	ldr	r2, [pc, #516]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80079ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079c0:	e01c      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079c6:	3308      	adds	r3, #8
 80079c8:	2100      	movs	r1, #0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f001 fa78 	bl	8008ec0 <RCCEx_PLL2_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079d6:	e011      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079dc:	3328      	adds	r3, #40	@ 0x28
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 fb1f 	bl	8009024 <RCCEx_PLL3_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079ec:	e006      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80079f4:	e002      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80079f6:	bf00      	nop
 80079f8:	e000      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80079fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007a04:	4b6e      	ldr	r3, [pc, #440]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a12:	4a6b      	ldr	r2, [pc, #428]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007a14:	430b      	orrs	r3, r1
 8007a16:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a18:	e003      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a32:	2300      	movs	r3, #0
 8007a34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	d053      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a4c:	d033      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007a4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a52:	d82c      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007a54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a58:	d02f      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007a5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a5e:	d826      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007a60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a64:	d02b      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007a66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a6a:	d820      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a70:	d012      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a76:	d81a      	bhi.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d022      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a80:	d115      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a86:	3308      	adds	r3, #8
 8007a88:	2101      	movs	r1, #1
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 fa18 	bl	8008ec0 <RCCEx_PLL2_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a96:	e015      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a9c:	3328      	adds	r3, #40	@ 0x28
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 fabf 	bl	8009024 <RCCEx_PLL3_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007aac:	e00a      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ab4:	e006      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007ab6:	bf00      	nop
 8007ab8:	e004      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007aba:	bf00      	nop
 8007abc:	e002      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007acc:	4b3c      	ldr	r3, [pc, #240]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ada:	4a39      	ldr	r2, [pc, #228]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ae0:	e003      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ae6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007af6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007afa:	2300      	movs	r3, #0
 8007afc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4313      	orrs	r3, r2
 8007b08:	d060      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b12:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007b16:	d039      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007b18:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007b1c:	d832      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b22:	d035      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b28:	d82c      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b2e:	d031      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b34:	d826      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007b36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b3a:	d02d      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007b3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b40:	d820      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b46:	d012      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b4c:	d81a      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d024      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b56:	d115      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 f9ad 	bl	8008ec0 <RCCEx_PLL2_Config>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b6c:	e017      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b72:	3328      	adds	r3, #40	@ 0x28
 8007b74:	2101      	movs	r1, #1
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 fa54 	bl	8009024 <RCCEx_PLL3_Config>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b82:	e00c      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b8a:	e008      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b8c:	bf00      	nop
 8007b8e:	e006      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b90:	bf00      	nop
 8007b92:	e004      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b94:	bf00      	nop
 8007b96:	e002      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b98:	bf00      	nop
 8007b9a:	e000      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10e      	bne.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ba6:	4b06      	ldr	r3, [pc, #24]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007baa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bb6:	4a02      	ldr	r2, [pc, #8]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bbc:	e006      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007bbe:	bf00      	nop
 8007bc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007be6:	460b      	mov	r3, r1
 8007be8:	4313      	orrs	r3, r2
 8007bea:	d037      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bf6:	d00e      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bfc:	d816      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d018      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007c02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c06:	d111      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c08:	4bc4      	ldr	r3, [pc, #784]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	4ac3      	ldr	r2, [pc, #780]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007c14:	e00f      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 f94e 	bl	8008ec0 <RCCEx_PLL2_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007c2a:	e004      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c32:	e000      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c3e:	4bb7      	ldr	r3, [pc, #732]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c4c:	4ab3      	ldr	r2, [pc, #716]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c52:	e003      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	d039      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d81c      	bhi.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007c86:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8c:	08007cc9 	.word	0x08007cc9
 8007c90:	08007c9d 	.word	0x08007c9d
 8007c94:	08007cab 	.word	0x08007cab
 8007c98:	08007cc9 	.word	0x08007cc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c9c:	4b9f      	ldr	r3, [pc, #636]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	4a9e      	ldr	r2, [pc, #632]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ca8:	e00f      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cae:	3308      	adds	r3, #8
 8007cb0:	2102      	movs	r1, #2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 f904 	bl	8008ec0 <RCCEx_PLL2_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007cbe:	e004      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cc6:	e000      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cd2:	4b92      	ldr	r3, [pc, #584]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cd6:	f023 0103 	bic.w	r1, r3, #3
 8007cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ce0:	4a8e      	ldr	r2, [pc, #568]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ce2:	430b      	orrs	r3, r1
 8007ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ce6:	e003      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d00:	2300      	movs	r3, #0
 8007d02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f000 8099 	beq.w	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d12:	4b83      	ldr	r3, [pc, #524]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a82      	ldr	r2, [pc, #520]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d1e:	f7fa f8f7 	bl	8001f10 <HAL_GetTick>
 8007d22:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d26:	e00b      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d28:	f7fa f8f2 	bl	8001f10 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	2b64      	cmp	r3, #100	@ 0x64
 8007d36:	d903      	bls.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d3e:	e005      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d40:	4b77      	ldr	r3, [pc, #476]	@ (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0ed      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d173      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d54:	4b71      	ldr	r3, [pc, #452]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d60:	4053      	eors	r3, r2
 8007d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d015      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d6a:	4b6c      	ldr	r3, [pc, #432]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d72:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d76:	4b69      	ldr	r3, [pc, #420]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d7a:	4a68      	ldr	r2, [pc, #416]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d80:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d82:	4b66      	ldr	r3, [pc, #408]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d86:	4a65      	ldr	r2, [pc, #404]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d8c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d8e:	4a63      	ldr	r2, [pc, #396]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d94:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007da2:	d118      	bne.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da4:	f7fa f8b4 	bl	8001f10 <HAL_GetTick>
 8007da8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dac:	e00d      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dae:	f7fa f8af 	bl	8001f10 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007db8:	1ad2      	subs	r2, r2, r3
 8007dba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d903      	bls.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8007dc8:	e005      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dca:	4b54      	ldr	r3, [pc, #336]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0eb      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007dd6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d129      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dee:	d10e      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007df0:	4b4a      	ldr	r3, [pc, #296]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e00:	091a      	lsrs	r2, r3, #4
 8007e02:	4b48      	ldr	r3, [pc, #288]	@ (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007e04:	4013      	ands	r3, r2
 8007e06:	4a45      	ldr	r2, [pc, #276]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	6113      	str	r3, [r2, #16]
 8007e0c:	e005      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007e0e:	4b43      	ldr	r3, [pc, #268]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	4a42      	ldr	r2, [pc, #264]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e18:	6113      	str	r3, [r2, #16]
 8007e1a:	4b40      	ldr	r3, [pc, #256]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e1c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e2a:	4a3c      	ldr	r2, [pc, #240]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e30:	e008      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007e3a:	e003      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	f002 0301 	and.w	r3, r2, #1
 8007e50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e54:	2300      	movs	r3, #0
 8007e56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	f000 8090 	beq.w	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e6e:	2b28      	cmp	r3, #40	@ 0x28
 8007e70:	d870      	bhi.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007e72:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007f5d 	.word	0x08007f5d
 8007e7c:	08007f55 	.word	0x08007f55
 8007e80:	08007f55 	.word	0x08007f55
 8007e84:	08007f55 	.word	0x08007f55
 8007e88:	08007f55 	.word	0x08007f55
 8007e8c:	08007f55 	.word	0x08007f55
 8007e90:	08007f55 	.word	0x08007f55
 8007e94:	08007f55 	.word	0x08007f55
 8007e98:	08007f29 	.word	0x08007f29
 8007e9c:	08007f55 	.word	0x08007f55
 8007ea0:	08007f55 	.word	0x08007f55
 8007ea4:	08007f55 	.word	0x08007f55
 8007ea8:	08007f55 	.word	0x08007f55
 8007eac:	08007f55 	.word	0x08007f55
 8007eb0:	08007f55 	.word	0x08007f55
 8007eb4:	08007f55 	.word	0x08007f55
 8007eb8:	08007f3f 	.word	0x08007f3f
 8007ebc:	08007f55 	.word	0x08007f55
 8007ec0:	08007f55 	.word	0x08007f55
 8007ec4:	08007f55 	.word	0x08007f55
 8007ec8:	08007f55 	.word	0x08007f55
 8007ecc:	08007f55 	.word	0x08007f55
 8007ed0:	08007f55 	.word	0x08007f55
 8007ed4:	08007f55 	.word	0x08007f55
 8007ed8:	08007f5d 	.word	0x08007f5d
 8007edc:	08007f55 	.word	0x08007f55
 8007ee0:	08007f55 	.word	0x08007f55
 8007ee4:	08007f55 	.word	0x08007f55
 8007ee8:	08007f55 	.word	0x08007f55
 8007eec:	08007f55 	.word	0x08007f55
 8007ef0:	08007f55 	.word	0x08007f55
 8007ef4:	08007f55 	.word	0x08007f55
 8007ef8:	08007f5d 	.word	0x08007f5d
 8007efc:	08007f55 	.word	0x08007f55
 8007f00:	08007f55 	.word	0x08007f55
 8007f04:	08007f55 	.word	0x08007f55
 8007f08:	08007f55 	.word	0x08007f55
 8007f0c:	08007f55 	.word	0x08007f55
 8007f10:	08007f55 	.word	0x08007f55
 8007f14:	08007f55 	.word	0x08007f55
 8007f18:	08007f5d 	.word	0x08007f5d
 8007f1c:	58024400 	.word	0x58024400
 8007f20:	58024800 	.word	0x58024800
 8007f24:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	2101      	movs	r1, #1
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 ffc5 	bl	8008ec0 <RCCEx_PLL2_Config>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f3c:	e00f      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f42:	3328      	adds	r3, #40	@ 0x28
 8007f44:	2101      	movs	r1, #1
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 f86c 	bl	8009024 <RCCEx_PLL3_Config>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f52:	e004      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f5a:	e000      	b.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10b      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f66:	4bc0      	ldr	r3, [pc, #768]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f76:	4abc      	ldr	r2, [pc, #752]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f7c:	e003      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f002 0302 	and.w	r3, r2, #2
 8007f92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f96:	2300      	movs	r3, #0
 8007f98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f9c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	d043      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fae:	2b05      	cmp	r3, #5
 8007fb0:	d824      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb8:	08008005 	.word	0x08008005
 8007fbc:	08007fd1 	.word	0x08007fd1
 8007fc0:	08007fe7 	.word	0x08007fe7
 8007fc4:	08008005 	.word	0x08008005
 8007fc8:	08008005 	.word	0x08008005
 8007fcc:	08008005 	.word	0x08008005
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 ff71 	bl	8008ec0 <RCCEx_PLL2_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fe4:	e00f      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fea:	3328      	adds	r3, #40	@ 0x28
 8007fec:	2101      	movs	r1, #1
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 f818 	bl	8009024 <RCCEx_PLL3_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007ffa:	e004      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008002:	e000      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008006:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10b      	bne.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800800e:	4b96      	ldr	r3, [pc, #600]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008012:	f023 0107 	bic.w	r1, r3, #7
 8008016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800801a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800801e:	4a92      	ldr	r2, [pc, #584]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008020:	430b      	orrs	r3, r1
 8008022:	6553      	str	r3, [r2, #84]	@ 0x54
 8008024:	e003      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008026:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800802a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800802e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f002 0304 	and.w	r3, r2, #4
 800803a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800803e:	2300      	movs	r3, #0
 8008040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008044:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008048:	460b      	mov	r3, r1
 800804a:	4313      	orrs	r3, r2
 800804c:	d043      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800804e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008052:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008056:	2b05      	cmp	r3, #5
 8008058:	d824      	bhi.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800805a:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	080080ad 	.word	0x080080ad
 8008064:	08008079 	.word	0x08008079
 8008068:	0800808f 	.word	0x0800808f
 800806c:	080080ad 	.word	0x080080ad
 8008070:	080080ad 	.word	0x080080ad
 8008074:	080080ad 	.word	0x080080ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800807c:	3308      	adds	r3, #8
 800807e:	2101      	movs	r1, #1
 8008080:	4618      	mov	r0, r3
 8008082:	f000 ff1d 	bl	8008ec0 <RCCEx_PLL2_Config>
 8008086:	4603      	mov	r3, r0
 8008088:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800808c:	e00f      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800808e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008092:	3328      	adds	r3, #40	@ 0x28
 8008094:	2101      	movs	r1, #1
 8008096:	4618      	mov	r0, r3
 8008098:	f000 ffc4 	bl	8009024 <RCCEx_PLL3_Config>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80080a2:	e004      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080aa:	e000      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80080ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080b6:	4b6c      	ldr	r3, [pc, #432]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80080b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ba:	f023 0107 	bic.w	r1, r3, #7
 80080be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080c6:	4a68      	ldr	r2, [pc, #416]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80080cc:	e003      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f002 0320 	and.w	r3, r2, #32
 80080e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080e6:	2300      	movs	r3, #0
 80080e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080f0:	460b      	mov	r3, r1
 80080f2:	4313      	orrs	r3, r2
 80080f4:	d055      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008102:	d033      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008104:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008108:	d82c      	bhi.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800810a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800810e:	d02f      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008114:	d826      	bhi.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008116:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800811a:	d02b      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800811c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008120:	d820      	bhi.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008126:	d012      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800812c:	d81a      	bhi.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d022      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008136:	d115      	bne.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800813c:	3308      	adds	r3, #8
 800813e:	2100      	movs	r1, #0
 8008140:	4618      	mov	r0, r3
 8008142:	f000 febd 	bl	8008ec0 <RCCEx_PLL2_Config>
 8008146:	4603      	mov	r3, r0
 8008148:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800814c:	e015      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800814e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008152:	3328      	adds	r3, #40	@ 0x28
 8008154:	2102      	movs	r1, #2
 8008156:	4618      	mov	r0, r3
 8008158:	f000 ff64 	bl	8009024 <RCCEx_PLL3_Config>
 800815c:	4603      	mov	r3, r0
 800815e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008162:	e00a      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800816a:	e006      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800816c:	bf00      	nop
 800816e:	e004      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008170:	bf00      	nop
 8008172:	e002      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008174:	bf00      	nop
 8008176:	e000      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800817a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10b      	bne.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008182:	4b39      	ldr	r3, [pc, #228]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008186:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800818a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800818e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008192:	4a35      	ldr	r2, [pc, #212]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008194:	430b      	orrs	r3, r1
 8008196:	6553      	str	r3, [r2, #84]	@ 0x54
 8008198:	e003      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800819e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80081a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80081ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081b2:	2300      	movs	r3, #0
 80081b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80081bc:	460b      	mov	r3, r1
 80081be:	4313      	orrs	r3, r2
 80081c0:	d058      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80081c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081ce:	d033      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80081d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081d4:	d82c      	bhi.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80081d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081da:	d02f      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e0:	d826      	bhi.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80081e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081e6:	d02b      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80081e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081ec:	d820      	bhi.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80081ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081f2:	d012      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80081f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081f8:	d81a      	bhi.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d022      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80081fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008202:	d115      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008208:	3308      	adds	r3, #8
 800820a:	2100      	movs	r1, #0
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fe57 	bl	8008ec0 <RCCEx_PLL2_Config>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008218:	e015      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800821a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800821e:	3328      	adds	r3, #40	@ 0x28
 8008220:	2102      	movs	r1, #2
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fefe 	bl	8009024 <RCCEx_PLL3_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800822e:	e00a      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008236:	e006      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008238:	bf00      	nop
 800823a:	e004      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800823c:	bf00      	nop
 800823e:	e002      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008240:	bf00      	nop
 8008242:	e000      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008246:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10e      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800824e:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008252:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800825a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800825e:	4a02      	ldr	r2, [pc, #8]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008260:	430b      	orrs	r3, r1
 8008262:	6593      	str	r3, [r2, #88]	@ 0x58
 8008264:	e006      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008266:	bf00      	nop
 8008268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008270:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008284:	2300      	movs	r3, #0
 8008286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800828a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800828e:	460b      	mov	r3, r1
 8008290:	4313      	orrs	r3, r2
 8008292:	d055      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008298:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800829c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80082a0:	d033      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80082a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80082a6:	d82c      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80082a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ac:	d02f      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80082ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082b2:	d826      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80082b4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80082b8:	d02b      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80082ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80082be:	d820      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80082c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082c4:	d012      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80082c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082ca:	d81a      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d022      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80082d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082d4:	d115      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082da:	3308      	adds	r3, #8
 80082dc:	2100      	movs	r1, #0
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fdee 	bl	8008ec0 <RCCEx_PLL2_Config>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082ea:	e015      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082f0:	3328      	adds	r3, #40	@ 0x28
 80082f2:	2102      	movs	r1, #2
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fe95 	bl	8009024 <RCCEx_PLL3_Config>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008300:	e00a      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008308:	e006      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800830a:	bf00      	nop
 800830c:	e004      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800830e:	bf00      	nop
 8008310:	e002      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008318:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10b      	bne.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008320:	4ba1      	ldr	r3, [pc, #644]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008324:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008330:	4a9d      	ldr	r2, [pc, #628]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008332:	430b      	orrs	r3, r1
 8008334:	6593      	str	r3, [r2, #88]	@ 0x58
 8008336:	e003      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008338:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800833c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f002 0308 	and.w	r3, r2, #8
 800834c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008350:	2300      	movs	r3, #0
 8008352:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008356:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800835a:	460b      	mov	r3, r1
 800835c:	4313      	orrs	r3, r2
 800835e:	d01e      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800836c:	d10c      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800836e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008372:	3328      	adds	r3, #40	@ 0x28
 8008374:	2102      	movs	r1, #2
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fe54 	bl	8009024 <RCCEx_PLL3_Config>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008388:	4b87      	ldr	r3, [pc, #540]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800838a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800838c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008398:	4a83      	ldr	r2, [pc, #524]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800839a:	430b      	orrs	r3, r1
 800839c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800839e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f002 0310 	and.w	r3, r2, #16
 80083aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083ae:	2300      	movs	r3, #0
 80083b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80083b8:	460b      	mov	r3, r1
 80083ba:	4313      	orrs	r3, r2
 80083bc:	d01e      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80083be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80083c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ca:	d10c      	bne.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083d0:	3328      	adds	r3, #40	@ 0x28
 80083d2:	2102      	movs	r1, #2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fe25 	bl	8009024 <RCCEx_PLL3_Config>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083e6:	4b70      	ldr	r3, [pc, #448]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80083e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80083f6:	4a6c      	ldr	r2, [pc, #432]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80083f8:	430b      	orrs	r3, r1
 80083fa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008408:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800840c:	2300      	movs	r3, #0
 800840e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008412:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008416:	460b      	mov	r3, r1
 8008418:	4313      	orrs	r3, r2
 800841a:	d03e      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800841c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008420:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008428:	d022      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800842a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800842e:	d81b      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008438:	d00b      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800843a:	e015      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800843c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008440:	3308      	adds	r3, #8
 8008442:	2100      	movs	r1, #0
 8008444:	4618      	mov	r0, r3
 8008446:	f000 fd3b 	bl	8008ec0 <RCCEx_PLL2_Config>
 800844a:	4603      	mov	r3, r0
 800844c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008450:	e00f      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008456:	3328      	adds	r3, #40	@ 0x28
 8008458:	2102      	movs	r1, #2
 800845a:	4618      	mov	r0, r3
 800845c:	f000 fde2 	bl	8009024 <RCCEx_PLL3_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008466:	e004      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800846e:	e000      	b.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008472:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10b      	bne.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800847a:	4b4b      	ldr	r3, [pc, #300]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800847c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800847e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008482:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008486:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800848a:	4a47      	ldr	r2, [pc, #284]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800848c:	430b      	orrs	r3, r1
 800848e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008490:	e003      	b.n	800849a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008492:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008496:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800849a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80084a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084a8:	2300      	movs	r3, #0
 80084aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80084ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80084b0:	460b      	mov	r3, r1
 80084b2:	4313      	orrs	r3, r2
 80084b4:	d03b      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80084b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084c2:	d01f      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80084c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084c8:	d818      	bhi.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80084ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ce:	d003      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80084d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084d4:	d007      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80084d6:	e011      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084d8:	4b33      	ldr	r3, [pc, #204]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80084da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084dc:	4a32      	ldr	r2, [pc, #200]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80084de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80084e4:	e00f      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ea:	3328      	adds	r3, #40	@ 0x28
 80084ec:	2101      	movs	r1, #1
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fd98 	bl	8009024 <RCCEx_PLL3_Config>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80084fa:	e004      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008502:	e000      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008506:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10b      	bne.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800850e:	4b26      	ldr	r3, [pc, #152]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008512:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008516:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800851a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800851e:	4a22      	ldr	r2, [pc, #136]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008520:	430b      	orrs	r3, r1
 8008522:	6553      	str	r3, [r2, #84]	@ 0x54
 8008524:	e003      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008526:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800852a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800852e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800853a:	673b      	str	r3, [r7, #112]	@ 0x70
 800853c:	2300      	movs	r3, #0
 800853e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008540:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008544:	460b      	mov	r3, r1
 8008546:	4313      	orrs	r3, r2
 8008548:	d034      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800854a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800854e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008558:	d007      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800855a:	e011      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800855c:	4b12      	ldr	r3, [pc, #72]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800855e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008560:	4a11      	ldr	r2, [pc, #68]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008568:	e00e      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800856a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800856e:	3308      	adds	r3, #8
 8008570:	2102      	movs	r1, #2
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fca4 	bl	8008ec0 <RCCEx_PLL2_Config>
 8008578:	4603      	mov	r3, r0
 800857a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800857e:	e003      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008588:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10d      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008590:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008594:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800859c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800859e:	4a02      	ldr	r2, [pc, #8]	@ (80085a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80085a0:	430b      	orrs	r3, r1
 80085a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80085a4:	e006      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80085a6:	bf00      	nop
 80085a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80085c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085c2:	2300      	movs	r3, #0
 80085c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80085ca:	460b      	mov	r3, r1
 80085cc:	4313      	orrs	r3, r2
 80085ce:	d00c      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d4:	3328      	adds	r3, #40	@ 0x28
 80085d6:	2102      	movs	r1, #2
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fd23 	bl	8009024 <RCCEx_PLL3_Config>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80085f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80085f8:	2300      	movs	r3, #0
 80085fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80085fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008600:	460b      	mov	r3, r1
 8008602:	4313      	orrs	r3, r2
 8008604:	d038      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800860a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800860e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008612:	d018      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008614:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008618:	d811      	bhi.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800861a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800861e:	d014      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008624:	d80b      	bhi.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d011      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800862a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800862e:	d106      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008630:	4bc3      	ldr	r3, [pc, #780]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008634:	4ac2      	ldr	r2, [pc, #776]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800863a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800863c:	e008      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008644:	e004      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008646:	bf00      	nop
 8008648:	e002      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800864a:	bf00      	nop
 800864c:	e000      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800864e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008650:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10b      	bne.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008658:	4bb9      	ldr	r3, [pc, #740]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800865a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800865c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008668:	4ab5      	ldr	r2, [pc, #724]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800866a:	430b      	orrs	r3, r1
 800866c:	6553      	str	r3, [r2, #84]	@ 0x54
 800866e:	e003      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008670:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008674:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008686:	2300      	movs	r3, #0
 8008688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800868a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800868e:	460b      	mov	r3, r1
 8008690:	4313      	orrs	r3, r2
 8008692:	d009      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008694:	4baa      	ldr	r3, [pc, #680]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008698:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800869c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086a2:	4aa7      	ldr	r2, [pc, #668]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80086a4:	430b      	orrs	r3, r1
 80086a6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80086b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80086b6:	2300      	movs	r3, #0
 80086b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80086ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80086be:	460b      	mov	r3, r1
 80086c0:	4313      	orrs	r3, r2
 80086c2:	d009      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086c4:	4b9e      	ldr	r3, [pc, #632]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80086c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80086cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d2:	4a9b      	ldr	r2, [pc, #620]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80086d4:	430b      	orrs	r3, r1
 80086d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80086d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80086e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086e6:	2300      	movs	r3, #0
 80086e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80086ee:	460b      	mov	r3, r1
 80086f0:	4313      	orrs	r3, r2
 80086f2:	d009      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80086f4:	4b92      	ldr	r3, [pc, #584]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80086f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f8:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80086fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008702:	4a8f      	ldr	r2, [pc, #572]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008704:	430b      	orrs	r3, r1
 8008706:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008714:	643b      	str	r3, [r7, #64]	@ 0x40
 8008716:	2300      	movs	r3, #0
 8008718:	647b      	str	r3, [r7, #68]	@ 0x44
 800871a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800871e:	460b      	mov	r3, r1
 8008720:	4313      	orrs	r3, r2
 8008722:	d00e      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008724:	4b86      	ldr	r3, [pc, #536]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	4a85      	ldr	r2, [pc, #532]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800872a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800872e:	6113      	str	r3, [r2, #16]
 8008730:	4b83      	ldr	r3, [pc, #524]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008732:	6919      	ldr	r1, [r3, #16]
 8008734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008738:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800873c:	4a80      	ldr	r2, [pc, #512]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800873e:	430b      	orrs	r3, r1
 8008740:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800874e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008754:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008758:	460b      	mov	r3, r1
 800875a:	4313      	orrs	r3, r2
 800875c:	d009      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800875e:	4b78      	ldr	r3, [pc, #480]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008762:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800876a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800876c:	4a74      	ldr	r2, [pc, #464]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800876e:	430b      	orrs	r3, r1
 8008770:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800877e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008780:	2300      	movs	r3, #0
 8008782:	637b      	str	r3, [r7, #52]	@ 0x34
 8008784:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008788:	460b      	mov	r3, r1
 800878a:	4313      	orrs	r3, r2
 800878c:	d00a      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800878e:	4b6c      	ldr	r3, [pc, #432]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008792:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800879a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800879e:	4a68      	ldr	r2, [pc, #416]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80087a0:	430b      	orrs	r3, r1
 80087a2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80087a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	2100      	movs	r1, #0
 80087ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80087ba:	460b      	mov	r3, r1
 80087bc:	4313      	orrs	r3, r2
 80087be:	d011      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c4:	3308      	adds	r3, #8
 80087c6:	2100      	movs	r1, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fb79 	bl	8008ec0 <RCCEx_PLL2_Config>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80087d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80087e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	2100      	movs	r1, #0
 80087ee:	6239      	str	r1, [r7, #32]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80087f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80087fa:	460b      	mov	r3, r1
 80087fc:	4313      	orrs	r3, r2
 80087fe:	d011      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008804:	3308      	adds	r3, #8
 8008806:	2101      	movs	r1, #1
 8008808:	4618      	mov	r0, r3
 800880a:	f000 fb59 	bl	8008ec0 <RCCEx_PLL2_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008814:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800881c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008820:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	2100      	movs	r1, #0
 800882e:	61b9      	str	r1, [r7, #24]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800883a:	460b      	mov	r3, r1
 800883c:	4313      	orrs	r3, r2
 800883e:	d011      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008844:	3308      	adds	r3, #8
 8008846:	2102      	movs	r1, #2
 8008848:	4618      	mov	r0, r3
 800884a:	f000 fb39 	bl	8008ec0 <RCCEx_PLL2_Config>
 800884e:	4603      	mov	r3, r0
 8008850:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008854:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008860:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	2100      	movs	r1, #0
 800886e:	6139      	str	r1, [r7, #16]
 8008870:	f003 0308 	and.w	r3, r3, #8
 8008874:	617b      	str	r3, [r7, #20]
 8008876:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800887a:	460b      	mov	r3, r1
 800887c:	4313      	orrs	r3, r2
 800887e:	d011      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008884:	3328      	adds	r3, #40	@ 0x28
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fbcb 	bl	8009024 <RCCEx_PLL3_Config>
 800888e:	4603      	mov	r3, r0
 8008890:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008894:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80088a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	2100      	movs	r1, #0
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	f003 0310 	and.w	r3, r3, #16
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80088ba:	460b      	mov	r3, r1
 80088bc:	4313      	orrs	r3, r2
 80088be:	d011      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088c4:	3328      	adds	r3, #40	@ 0x28
 80088c6:	2101      	movs	r1, #1
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fbab 	bl	8009024 <RCCEx_PLL3_Config>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80088d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80088e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	2100      	movs	r1, #0
 80088ee:	6039      	str	r1, [r7, #0]
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	607b      	str	r3, [r7, #4]
 80088f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088fa:	460b      	mov	r3, r1
 80088fc:	4313      	orrs	r3, r2
 80088fe:	d011      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008904:	3328      	adds	r3, #40	@ 0x28
 8008906:	2102      	movs	r1, #2
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fb8b 	bl	8009024 <RCCEx_PLL3_Config>
 800890e:	4603      	mov	r3, r0
 8008910:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008914:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008920:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8008924:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	e000      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
}
 8008932:	4618      	mov	r0, r3
 8008934:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008938:	46bd      	mov	sp, r7
 800893a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800893e:	bf00      	nop
 8008940:	58024400 	.word	0x58024400

08008944 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008948:	f7fe fde2 	bl	8007510 <HAL_RCC_GetHCLKFreq>
 800894c:	4602      	mov	r2, r0
 800894e:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	091b      	lsrs	r3, r3, #4
 8008954:	f003 0307 	and.w	r3, r3, #7
 8008958:	4904      	ldr	r1, [pc, #16]	@ (800896c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800895a:	5ccb      	ldrb	r3, [r1, r3]
 800895c:	f003 031f 	and.w	r3, r3, #31
 8008960:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008964:	4618      	mov	r0, r3
 8008966:	bd80      	pop	{r7, pc}
 8008968:	58024400 	.word	0x58024400
 800896c:	08011a88 	.word	0x08011a88

08008970 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008970:	b480      	push	{r7}
 8008972:	b089      	sub	sp, #36	@ 0x24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008978:	4ba1      	ldr	r3, [pc, #644]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800897a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897c:	f003 0303 	and.w	r3, r3, #3
 8008980:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008982:	4b9f      	ldr	r3, [pc, #636]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008986:	0b1b      	lsrs	r3, r3, #12
 8008988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800898c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800898e:	4b9c      	ldr	r3, [pc, #624]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008992:	091b      	lsrs	r3, r3, #4
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800899a:	4b99      	ldr	r3, [pc, #612]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800899c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800899e:	08db      	lsrs	r3, r3, #3
 80089a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	fb02 f303 	mul.w	r3, r2, r3
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 8111 	beq.w	8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	f000 8083 	beq.w	8008acc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	f200 80a1 	bhi.w	8008b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d056      	beq.n	8008a88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089da:	e099      	b.n	8008b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089dc:	4b88      	ldr	r3, [pc, #544]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0320 	and.w	r3, r3, #32
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d02d      	beq.n	8008a44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089e8:	4b85      	ldr	r3, [pc, #532]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	08db      	lsrs	r3, r3, #3
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	4a84      	ldr	r2, [pc, #528]	@ (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089f4:	fa22 f303 	lsr.w	r3, r2, r3
 80089f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	ee07 3a90 	vmov	s15, r3
 8008a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a12:	4b7b      	ldr	r3, [pc, #492]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a42:	e087      	b.n	8008b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a56:	4b6a      	ldr	r3, [pc, #424]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a86:	e065      	b.n	8008b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9a:	4b59      	ldr	r3, [pc, #356]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aca:	e043      	b.n	8008b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ade:	4b48      	ldr	r3, [pc, #288]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008af2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b0e:	e021      	b.n	8008b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b22:	4b37      	ldr	r3, [pc, #220]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b54:	4b2a      	ldr	r3, [pc, #168]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b58:	0a5b      	lsrs	r3, r3, #9
 8008b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b7a:	ee17 2a90 	vmov	r2, s15
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b82:	4b1f      	ldr	r3, [pc, #124]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b86:	0c1b      	lsrs	r3, r3, #16
 8008b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b8c:	ee07 3a90 	vmov	s15, r3
 8008b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ba8:	ee17 2a90 	vmov	r2, s15
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008bb0:	4b13      	ldr	r3, [pc, #76]	@ (8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb4:	0e1b      	lsrs	r3, r3, #24
 8008bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bd6:	ee17 2a90 	vmov	r2, s15
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bde:	e008      	b.n	8008bf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	609a      	str	r2, [r3, #8]
}
 8008bf2:	bf00      	nop
 8008bf4:	3724      	adds	r7, #36	@ 0x24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	58024400 	.word	0x58024400
 8008c04:	03d09000 	.word	0x03d09000
 8008c08:	46000000 	.word	0x46000000
 8008c0c:	4c742400 	.word	0x4c742400
 8008c10:	4a742400 	.word	0x4a742400
 8008c14:	4af42400 	.word	0x4af42400

08008c18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b089      	sub	sp, #36	@ 0x24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c20:	4ba1      	ldr	r3, [pc, #644]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c24:	f003 0303 	and.w	r3, r3, #3
 8008c28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c2a:	4b9f      	ldr	r3, [pc, #636]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c2e:	0d1b      	lsrs	r3, r3, #20
 8008c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c36:	4b9c      	ldr	r3, [pc, #624]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3a:	0a1b      	lsrs	r3, r3, #8
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c42:	4b99      	ldr	r3, [pc, #612]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c46:	08db      	lsrs	r3, r3, #3
 8008c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	fb02 f303 	mul.w	r3, r2, r3
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8111 	beq.w	8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	f000 8083 	beq.w	8008d74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	f200 80a1 	bhi.w	8008db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d056      	beq.n	8008d30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c82:	e099      	b.n	8008db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c84:	4b88      	ldr	r3, [pc, #544]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d02d      	beq.n	8008cec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c90:	4b85      	ldr	r3, [pc, #532]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	08db      	lsrs	r3, r3, #3
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	4a84      	ldr	r2, [pc, #528]	@ (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	ee07 3a90 	vmov	s15, r3
 8008ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cba:	4b7b      	ldr	r3, [pc, #492]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cea:	e087      	b.n	8008dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d2e:	e065      	b.n	8008dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d42:	4b59      	ldr	r3, [pc, #356]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d72:	e043      	b.n	8008dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d86:	4b48      	ldr	r3, [pc, #288]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008db6:	e021      	b.n	8008dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dca:	4b37      	ldr	r3, [pc, #220]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e00:	0a5b      	lsrs	r3, r3, #9
 8008e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e22:	ee17 2a90 	vmov	r2, s15
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2e:	0c1b      	lsrs	r3, r3, #16
 8008e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e34:	ee07 3a90 	vmov	s15, r3
 8008e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e50:	ee17 2a90 	vmov	r2, s15
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e58:	4b13      	ldr	r3, [pc, #76]	@ (8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5c:	0e1b      	lsrs	r3, r3, #24
 8008e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e7e:	ee17 2a90 	vmov	r2, s15
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e86:	e008      	b.n	8008e9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	609a      	str	r2, [r3, #8]
}
 8008e9a:	bf00      	nop
 8008e9c:	3724      	adds	r7, #36	@ 0x24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	58024400 	.word	0x58024400
 8008eac:	03d09000 	.word	0x03d09000
 8008eb0:	46000000 	.word	0x46000000
 8008eb4:	4c742400 	.word	0x4c742400
 8008eb8:	4a742400 	.word	0x4a742400
 8008ebc:	4af42400 	.word	0x4af42400

08008ec0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ece:	4b53      	ldr	r3, [pc, #332]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d101      	bne.n	8008ede <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e099      	b.n	8009012 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ede:	4b4f      	ldr	r3, [pc, #316]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a4e      	ldr	r2, [pc, #312]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008ee4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eea:	f7f9 f811 	bl	8001f10 <HAL_GetTick>
 8008eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ef0:	e008      	b.n	8008f04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ef2:	f7f9 f80d 	bl	8001f10 <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d901      	bls.n	8008f04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e086      	b.n	8009012 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f04:	4b45      	ldr	r3, [pc, #276]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1f0      	bne.n	8008ef2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f10:	4b42      	ldr	r3, [pc, #264]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f14:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	031b      	lsls	r3, r3, #12
 8008f1e:	493f      	ldr	r1, [pc, #252]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	025b      	lsls	r3, r3, #9
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	041b      	lsls	r3, r3, #16
 8008f42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	061b      	lsls	r3, r3, #24
 8008f50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f54:	4931      	ldr	r1, [pc, #196]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f5a:	4b30      	ldr	r3, [pc, #192]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	492d      	ldr	r1, [pc, #180]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f70:	f023 0220 	bic.w	r2, r3, #32
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	4928      	ldr	r1, [pc, #160]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f7e:	4b27      	ldr	r3, [pc, #156]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f82:	4a26      	ldr	r2, [pc, #152]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f84:	f023 0310 	bic.w	r3, r3, #16
 8008f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f8a:	4b24      	ldr	r3, [pc, #144]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f8e:	4b24      	ldr	r3, [pc, #144]	@ (8009020 <RCCEx_PLL2_Config+0x160>)
 8008f90:	4013      	ands	r3, r2
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	69d2      	ldr	r2, [r2, #28]
 8008f96:	00d2      	lsls	r2, r2, #3
 8008f98:	4920      	ldr	r1, [pc, #128]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008fa4:	f043 0310 	orr.w	r3, r3, #16
 8008fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d106      	bne.n	8008fbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	4a19      	ldr	r2, [pc, #100]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008fb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fbc:	e00f      	b.n	8008fde <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d106      	bne.n	8008fd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008fc4:	4b15      	ldr	r3, [pc, #84]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc8:	4a14      	ldr	r2, [pc, #80]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fd0:	e005      	b.n	8008fde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008fd2:	4b12      	ldr	r3, [pc, #72]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd6:	4a11      	ldr	r2, [pc, #68]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008fd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fde:	4b0f      	ldr	r3, [pc, #60]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8008fe4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fea:	f7f8 ff91 	bl	8001f10 <HAL_GetTick>
 8008fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ff0:	e008      	b.n	8009004 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ff2:	f7f8 ff8d 	bl	8001f10 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e006      	b.n	8009012 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009004:	4b05      	ldr	r3, [pc, #20]	@ (800901c <RCCEx_PLL2_Config+0x15c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0f0      	beq.n	8008ff2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009010:	7bfb      	ldrb	r3, [r7, #15]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	58024400 	.word	0x58024400
 8009020:	ffff0007 	.word	0xffff0007

08009024 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009032:	4b53      	ldr	r3, [pc, #332]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	2b03      	cmp	r3, #3
 800903c:	d101      	bne.n	8009042 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e099      	b.n	8009176 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009042:	4b4f      	ldr	r3, [pc, #316]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a4e      	ldr	r2, [pc, #312]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800904c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800904e:	f7f8 ff5f 	bl	8001f10 <HAL_GetTick>
 8009052:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009054:	e008      	b.n	8009068 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009056:	f7f8 ff5b 	bl	8001f10 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b02      	cmp	r3, #2
 8009062:	d901      	bls.n	8009068 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e086      	b.n	8009176 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009068:	4b45      	ldr	r3, [pc, #276]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1f0      	bne.n	8009056 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009074:	4b42      	ldr	r3, [pc, #264]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009078:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	051b      	lsls	r3, r3, #20
 8009082:	493f      	ldr	r1, [pc, #252]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009084:	4313      	orrs	r3, r2
 8009086:	628b      	str	r3, [r1, #40]	@ 0x28
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	3b01      	subs	r3, #1
 800908e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	3b01      	subs	r3, #1
 8009098:	025b      	lsls	r3, r3, #9
 800909a:	b29b      	uxth	r3, r3
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	041b      	lsls	r3, r3, #16
 80090a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80090aa:	431a      	orrs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	061b      	lsls	r3, r3, #24
 80090b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80090b8:	4931      	ldr	r1, [pc, #196]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090be:	4b30      	ldr	r3, [pc, #192]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 80090c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	492d      	ldr	r1, [pc, #180]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090d0:	4b2b      	ldr	r3, [pc, #172]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	4928      	ldr	r1, [pc, #160]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090e2:	4b27      	ldr	r3, [pc, #156]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e6:	4a26      	ldr	r2, [pc, #152]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 80090e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090ee:	4b24      	ldr	r3, [pc, #144]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 80090f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090f2:	4b24      	ldr	r3, [pc, #144]	@ (8009184 <RCCEx_PLL3_Config+0x160>)
 80090f4:	4013      	ands	r3, r2
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	69d2      	ldr	r2, [r2, #28]
 80090fa:	00d2      	lsls	r2, r2, #3
 80090fc:	4920      	ldr	r1, [pc, #128]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009102:	4b1f      	ldr	r3, [pc, #124]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009106:	4a1e      	ldr	r2, [pc, #120]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800910c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009114:	4b1a      	ldr	r3, [pc, #104]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009118:	4a19      	ldr	r2, [pc, #100]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 800911a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800911e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009120:	e00f      	b.n	8009142 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d106      	bne.n	8009136 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009128:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 800912a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912c:	4a14      	ldr	r2, [pc, #80]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 800912e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009132:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009134:	e005      	b.n	8009142 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009136:	4b12      	ldr	r3, [pc, #72]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800913a:	4a11      	ldr	r2, [pc, #68]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 800913c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009140:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009142:	4b0f      	ldr	r3, [pc, #60]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a0e      	ldr	r2, [pc, #56]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 8009148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800914c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800914e:	f7f8 fedf 	bl	8001f10 <HAL_GetTick>
 8009152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009154:	e008      	b.n	8009168 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009156:	f7f8 fedb 	bl	8001f10 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	2b02      	cmp	r3, #2
 8009162:	d901      	bls.n	8009168 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e006      	b.n	8009176 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009168:	4b05      	ldr	r3, [pc, #20]	@ (8009180 <RCCEx_PLL3_Config+0x15c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d0f0      	beq.n	8009156 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	58024400 	.word	0x58024400
 8009184:	ffff0007 	.word	0xffff0007

08009188 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e10f      	b.n	80093ba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a87      	ldr	r2, [pc, #540]	@ (80093c4 <HAL_SPI_Init+0x23c>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d00f      	beq.n	80091ca <HAL_SPI_Init+0x42>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a86      	ldr	r2, [pc, #536]	@ (80093c8 <HAL_SPI_Init+0x240>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00a      	beq.n	80091ca <HAL_SPI_Init+0x42>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a84      	ldr	r2, [pc, #528]	@ (80093cc <HAL_SPI_Init+0x244>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d005      	beq.n	80091ca <HAL_SPI_Init+0x42>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	2b0f      	cmp	r3, #15
 80091c4:	d901      	bls.n	80091ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e0f7      	b.n	80093ba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fbba 	bl	8009944 <SPI_GetPacketSize>
 80091d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a7b      	ldr	r2, [pc, #492]	@ (80093c4 <HAL_SPI_Init+0x23c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00c      	beq.n	80091f6 <HAL_SPI_Init+0x6e>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a79      	ldr	r2, [pc, #484]	@ (80093c8 <HAL_SPI_Init+0x240>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d007      	beq.n	80091f6 <HAL_SPI_Init+0x6e>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a78      	ldr	r2, [pc, #480]	@ (80093cc <HAL_SPI_Init+0x244>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d002      	beq.n	80091f6 <HAL_SPI_Init+0x6e>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b08      	cmp	r3, #8
 80091f4:	d811      	bhi.n	800921a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80091fa:	4a72      	ldr	r2, [pc, #456]	@ (80093c4 <HAL_SPI_Init+0x23c>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d009      	beq.n	8009214 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a70      	ldr	r2, [pc, #448]	@ (80093c8 <HAL_SPI_Init+0x240>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d004      	beq.n	8009214 <HAL_SPI_Init+0x8c>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a6f      	ldr	r2, [pc, #444]	@ (80093cc <HAL_SPI_Init+0x244>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d104      	bne.n	800921e <HAL_SPI_Init+0x96>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b10      	cmp	r3, #16
 8009218:	d901      	bls.n	800921e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e0cd      	b.n	80093ba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d106      	bne.n	8009238 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7f8 f838 	bl	80012a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2202      	movs	r2, #2
 800923c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f022 0201 	bic.w	r2, r2, #1
 800924e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800925a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009264:	d119      	bne.n	800929a <HAL_SPI_Init+0x112>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800926e:	d103      	bne.n	8009278 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009274:	2b00      	cmp	r3, #0
 8009276:	d008      	beq.n	800928a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10c      	bne.n	800929a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009288:	d107      	bne.n	800929a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009298:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00f      	beq.n	80092c6 <HAL_SPI_Init+0x13e>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	2b06      	cmp	r3, #6
 80092ac:	d90b      	bls.n	80092c6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	e007      	b.n	80092d6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80092d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	69da      	ldr	r2, [r3, #28]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092de:	431a      	orrs	r2, r3
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e8:	ea42 0103 	orr.w	r1, r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009300:	431a      	orrs	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009306:	431a      	orrs	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	431a      	orrs	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	431a      	orrs	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	431a      	orrs	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	431a      	orrs	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800932a:	431a      	orrs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	431a      	orrs	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009336:	ea42 0103 	orr.w	r1, r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	430a      	orrs	r2, r1
 8009344:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d113      	bne.n	8009376 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009360:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009374:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 0201 	bic.w	r2, r2, #1
 8009384:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	430a      	orrs	r2, r1
 80093a6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	40013000 	.word	0x40013000
 80093c8:	40003800 	.word	0x40003800
 80093cc:	40003c00 	.word	0x40003c00

080093d0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08a      	sub	sp, #40	@ 0x28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80093e8:	6a3a      	ldr	r2, [r7, #32]
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	4013      	ands	r3, r2
 80093ee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80093f8:	2300      	movs	r3, #0
 80093fa:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009402:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3330      	adds	r3, #48	@ 0x30
 800940a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009412:	2b00      	cmp	r3, #0
 8009414:	d010      	beq.n	8009438 <HAL_SPI_IRQHandler+0x68>
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	f003 0308 	and.w	r3, r3, #8
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00b      	beq.n	8009438 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	699a      	ldr	r2, [r3, #24]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800942e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f9c3 	bl	80097bc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009436:	e192      	b.n	800975e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800943e:	2b00      	cmp	r3, #0
 8009440:	d113      	bne.n	800946a <HAL_SPI_IRQHandler+0x9a>
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10e      	bne.n	800946a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009452:	2b00      	cmp	r3, #0
 8009454:	d009      	beq.n	800946a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	4798      	blx	r3
    handled = 1UL;
 8009466:	2301      	movs	r3, #1
 8009468:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10f      	bne.n	8009494 <HAL_SPI_IRQHandler+0xc4>
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00a      	beq.n	8009494 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009484:	2b00      	cmp	r3, #0
 8009486:	d105      	bne.n	8009494 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	4798      	blx	r3
    handled = 1UL;
 8009490:	2301      	movs	r3, #1
 8009492:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10f      	bne.n	80094be <HAL_SPI_IRQHandler+0xee>
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d105      	bne.n	80094be <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
    handled = 1UL;
 80094ba:	2301      	movs	r3, #1
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f040 8147 	bne.w	8009754 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	f003 0308 	and.w	r3, r3, #8
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 808b 	beq.w	80095e8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	699a      	ldr	r2, [r3, #24]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f042 0208 	orr.w	r2, r2, #8
 80094e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699a      	ldr	r2, [r3, #24]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f042 0210 	orr.w	r2, r2, #16
 80094f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	699a      	ldr	r2, [r3, #24]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009500:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0208 	bic.w	r2, r2, #8
 8009510:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d13d      	bne.n	800959c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009520:	e036      	b.n	8009590 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	2b0f      	cmp	r3, #15
 8009528:	d90b      	bls.n	8009542 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009532:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009534:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800953a:	1d1a      	adds	r2, r3, #4
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	665a      	str	r2, [r3, #100]	@ 0x64
 8009540:	e01d      	b.n	800957e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	2b07      	cmp	r3, #7
 8009548:	d90b      	bls.n	8009562 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	8812      	ldrh	r2, [r2, #0]
 8009552:	b292      	uxth	r2, r2
 8009554:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800955a:	1c9a      	adds	r2, r3, #2
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	665a      	str	r2, [r3, #100]	@ 0x64
 8009560:	e00d      	b.n	800957e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800956e:	7812      	ldrb	r2, [r2, #0]
 8009570:	b2d2      	uxtb	r2, r2
 8009572:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009578:	1c5a      	adds	r2, r3, #1
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009584:	b29b      	uxth	r3, r3
 8009586:	3b01      	subs	r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009596:	b29b      	uxth	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1c2      	bne.n	8009522 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f931 	bl	8009804 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f8f7 	bl	80097a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80095ba:	e0d0      	b.n	800975e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80095bc:	7cfb      	ldrb	r3, [r7, #19]
 80095be:	2b05      	cmp	r3, #5
 80095c0:	d103      	bne.n	80095ca <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f8e6 	bl	8009794 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80095c8:	e0c6      	b.n	8009758 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80095ca:	7cfb      	ldrb	r3, [r7, #19]
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	d103      	bne.n	80095d8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f8d5 	bl	8009780 <HAL_SPI_RxCpltCallback>
    return;
 80095d6:	e0bf      	b.n	8009758 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80095d8:	7cfb      	ldrb	r3, [r7, #19]
 80095da:	2b03      	cmp	r3, #3
 80095dc:	f040 80bc 	bne.w	8009758 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f8c3 	bl	800976c <HAL_SPI_TxCpltCallback>
    return;
 80095e6:	e0b7      	b.n	8009758 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 80b5 	beq.w	800975e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00f      	beq.n	800961e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009604:	f043 0204 	orr.w	r2, r3, #4
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	699a      	ldr	r2, [r3, #24]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800961c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00f      	beq.n	8009648 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800962e:	f043 0201 	orr.w	r2, r3, #1
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009646:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00f      	beq.n	8009672 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009658:	f043 0208 	orr.w	r2, r3, #8
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	699a      	ldr	r2, [r3, #24]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009670:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	f003 0320 	and.w	r3, r3, #32
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00f      	beq.n	800969c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009682:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f042 0220 	orr.w	r2, r2, #32
 800969a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d05a      	beq.n	800975c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0201 	bic.w	r2, r2, #1
 80096b4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6919      	ldr	r1, [r3, #16]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	4b28      	ldr	r3, [pc, #160]	@ (8009764 <HAL_SPI_IRQHandler+0x394>)
 80096c2:	400b      	ands	r3, r1
 80096c4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80096cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80096d0:	d138      	bne.n	8009744 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80096e0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d013      	beq.n	8009712 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009768 <HAL_SPI_IRQHandler+0x398>)
 80096f0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7f9 fed8 	bl	80034ac <HAL_DMA_Abort_IT>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009708:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009716:	2b00      	cmp	r3, #0
 8009718:	d020      	beq.n	800975c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800971e:	4a12      	ldr	r2, [pc, #72]	@ (8009768 <HAL_SPI_IRQHandler+0x398>)
 8009720:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009726:	4618      	mov	r0, r3
 8009728:	f7f9 fec0 	bl	80034ac <HAL_DMA_Abort_IT>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d014      	beq.n	800975c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009738:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009742:	e00b      	b.n	800975c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f82b 	bl	80097a8 <HAL_SPI_ErrorCallback>
    return;
 8009752:	e003      	b.n	800975c <HAL_SPI_IRQHandler+0x38c>
    return;
 8009754:	bf00      	nop
 8009756:	e002      	b.n	800975e <HAL_SPI_IRQHandler+0x38e>
    return;
 8009758:	bf00      	nop
 800975a:	e000      	b.n	800975e <HAL_SPI_IRQHandler+0x38e>
    return;
 800975c:	bf00      	nop
  }
}
 800975e:	3728      	adds	r7, #40	@ 0x28
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	fffffc94 	.word	0xfffffc94
 8009768:	080097d1 	.word	0x080097d1

0800976c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7ff ffd6 	bl	80097a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	699a      	ldr	r2, [r3, #24]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0208 	orr.w	r2, r2, #8
 8009822:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	699a      	ldr	r2, [r3, #24]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0210 	orr.w	r2, r2, #16
 8009832:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f022 0201 	bic.w	r2, r2, #1
 8009842:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6919      	ldr	r1, [r3, #16]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	4b3c      	ldr	r3, [pc, #240]	@ (8009940 <SPI_CloseTransfer+0x13c>)
 8009850:	400b      	ands	r3, r1
 8009852:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689a      	ldr	r2, [r3, #8]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009862:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b04      	cmp	r3, #4
 800986e:	d014      	beq.n	800989a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00f      	beq.n	800989a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009880:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	699a      	ldr	r2, [r3, #24]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f042 0220 	orr.w	r2, r2, #32
 8009898:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d014      	beq.n	80098d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00f      	beq.n	80098d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098b6:	f043 0204 	orr.w	r2, r3, #4
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	699a      	ldr	r2, [r3, #24]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00f      	beq.n	80098fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098e0:	f043 0201 	orr.w	r2, r3, #1
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699a      	ldr	r2, [r3, #24]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00f      	beq.n	8009924 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800990a:	f043 0208 	orr.w	r2, r3, #8
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	699a      	ldr	r2, [r3, #24]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009922:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009934:	bf00      	nop
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	fffffc90 	.word	0xfffffc90

08009944 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009950:	095b      	lsrs	r3, r3, #5
 8009952:	3301      	adds	r3, #1
 8009954:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	3307      	adds	r3, #7
 8009962:	08db      	lsrs	r3, r3, #3
 8009964:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	fb02 f303 	mul.w	r3, r2, r3
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e042      	b.n	8009a12 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009992:	2b00      	cmp	r3, #0
 8009994:	d106      	bne.n	80099a4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7f8 f81e 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2224      	movs	r2, #36	@ 0x24
 80099a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f022 0201 	bic.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 fcad 	bl	800b324 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fe3e 	bl	800a64c <UART_SetConfig>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d101      	bne.n	80099da <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e01b      	b.n	8009a12 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689a      	ldr	r2, [r3, #8]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80099f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0201 	orr.w	r2, r2, #1
 8009a08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 fd2c 	bl	800b468 <UART_CheckIdleState>
 8009a10:	4603      	mov	r3, r0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b08a      	sub	sp, #40	@ 0x28
 8009a1e:	af02      	add	r7, sp, #8
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	603b      	str	r3, [r7, #0]
 8009a26:	4613      	mov	r3, r2
 8009a28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	d17b      	bne.n	8009b2c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d002      	beq.n	8009a40 <HAL_UART_Transmit+0x26>
 8009a3a:	88fb      	ldrh	r3, [r7, #6]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e074      	b.n	8009b2e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2221      	movs	r2, #33	@ 0x21
 8009a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a54:	f7f8 fa5c 	bl	8001f10 <HAL_GetTick>
 8009a58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	88fa      	ldrh	r2, [r7, #6]
 8009a5e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	88fa      	ldrh	r2, [r7, #6]
 8009a66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a72:	d108      	bne.n	8009a86 <HAL_UART_Transmit+0x6c>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d104      	bne.n	8009a86 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	61bb      	str	r3, [r7, #24]
 8009a84:	e003      	b.n	8009a8e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a8e:	e030      	b.n	8009af2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2200      	movs	r2, #0
 8009a98:	2180      	movs	r1, #128	@ 0x80
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f001 fd8e 	bl	800b5bc <UART_WaitOnFlagUntilTimeout>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d005      	beq.n	8009ab2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e03d      	b.n	8009b2e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10b      	bne.n	8009ad0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ac6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	3302      	adds	r3, #2
 8009acc:	61bb      	str	r3, [r7, #24]
 8009ace:	e007      	b.n	8009ae0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	3301      	adds	r3, #1
 8009ade:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1c8      	bne.n	8009a90 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2200      	movs	r2, #0
 8009b06:	2140      	movs	r1, #64	@ 0x40
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f001 fd57 	bl	800b5bc <UART_WaitOnFlagUntilTimeout>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d005      	beq.n	8009b20 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2220      	movs	r2, #32
 8009b18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e006      	b.n	8009b2e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e000      	b.n	8009b2e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009b2c:	2302      	movs	r3, #2
  }
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3720      	adds	r7, #32
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	@ 0x28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b4c:	2b20      	cmp	r3, #32
 8009b4e:	d137      	bne.n	8009bc0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <HAL_UART_Receive_IT+0x24>
 8009b56:	88fb      	ldrh	r3, [r7, #6]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e030      	b.n	8009bc2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a18      	ldr	r2, [pc, #96]	@ (8009bcc <HAL_UART_Receive_IT+0x94>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d01f      	beq.n	8009bb0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d018      	beq.n	8009bb0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	623b      	str	r3, [r7, #32]
 8009b9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba0:	69f9      	ldr	r1, [r7, #28]
 8009ba2:	6a3a      	ldr	r2, [r7, #32]
 8009ba4:	e841 2300 	strex	r3, r2, [r1]
 8009ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e6      	bne.n	8009b7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009bb0:	88fb      	ldrh	r3, [r7, #6]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	68b9      	ldr	r1, [r7, #8]
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f001 fd6e 	bl	800b698 <UART_Start_Receive_IT>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	e000      	b.n	8009bc2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009bc0:	2302      	movs	r3, #2
  }
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3728      	adds	r7, #40	@ 0x28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	58000c00 	.word	0x58000c00

08009bd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08a      	sub	sp, #40	@ 0x28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	d167      	bne.n	8009cb8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <HAL_UART_Transmit_DMA+0x24>
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e060      	b.n	8009cba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	88fa      	ldrh	r2, [r7, #6]
 8009c02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	88fa      	ldrh	r2, [r7, #6]
 8009c0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2221      	movs	r2, #33	@ 0x21
 8009c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d028      	beq.n	8009c78 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c2a:	4a26      	ldr	r2, [pc, #152]	@ (8009cc4 <HAL_UART_Transmit_DMA+0xf4>)
 8009c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c32:	4a25      	ldr	r2, [pc, #148]	@ (8009cc8 <HAL_UART_Transmit_DMA+0xf8>)
 8009c34:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c3a:	4a24      	ldr	r2, [pc, #144]	@ (8009ccc <HAL_UART_Transmit_DMA+0xfc>)
 8009c3c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c42:	2200      	movs	r2, #0
 8009c44:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c4e:	4619      	mov	r1, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3328      	adds	r3, #40	@ 0x28
 8009c56:	461a      	mov	r2, r3
 8009c58:	88fb      	ldrh	r3, [r7, #6]
 8009c5a:	f7f8 fe9f 	bl	800299c <HAL_DMA_Start_IT>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d009      	beq.n	8009c78 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2210      	movs	r2, #16
 8009c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e020      	b.n	8009cba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2240      	movs	r2, #64	@ 0x40
 8009c7e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3308      	adds	r3, #8
 8009c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	e853 3f00 	ldrex	r3, [r3]
 8009c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca0:	623a      	str	r2, [r7, #32]
 8009ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	69f9      	ldr	r1, [r7, #28]
 8009ca6:	6a3a      	ldr	r2, [r7, #32]
 8009ca8:	e841 2300 	strex	r3, r2, [r1]
 8009cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e5      	bne.n	8009c80 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	e000      	b.n	8009cba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009cb8:	2302      	movs	r3, #2
  }
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3728      	adds	r7, #40	@ 0x28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	0800bb79 	.word	0x0800bb79
 8009cc8:	0800bc0f 	.word	0x0800bc0f
 8009ccc:	0800bd91 	.word	0x0800bd91

08009cd0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b09a      	sub	sp, #104	@ 0x68
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ce0:	e853 3f00 	ldrex	r3, [r3]
 8009ce4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cec:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cf8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009cfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e6      	bne.n	8009cd8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d1c:	4b46      	ldr	r3, [pc, #280]	@ (8009e38 <HAL_UART_AbortReceive+0x168>)
 8009d1e:	4013      	ands	r3, r2
 8009d20:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3308      	adds	r3, #8
 8009d28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8009d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d32:	e841 2300 	strex	r3, r2, [r1]
 8009d36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1e5      	bne.n	8009d0a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d118      	bne.n	8009d78 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	e853 3f00 	ldrex	r3, [r3]
 8009d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	f023 0310 	bic.w	r3, r3, #16
 8009d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	461a      	mov	r2, r3
 8009d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d66:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e6      	bne.n	8009d46 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d82:	2b40      	cmp	r3, #64	@ 0x40
 8009d84:	d13b      	bne.n	8009dfe <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009da6:	61ba      	str	r2, [r7, #24]
 8009da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	6979      	ldr	r1, [r7, #20]
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	e841 2300 	strex	r3, r2, [r1]
 8009db2:	613b      	str	r3, [r7, #16]
   return(result);
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e5      	bne.n	8009d86 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d01c      	beq.n	8009dfe <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dca:	2200      	movs	r2, #0
 8009dcc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7f9 f84b 	bl	8002e70 <HAL_DMA_Abort>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00e      	beq.n	8009dfe <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fa fd08 	bl	80047fc <HAL_DMA_GetError>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b20      	cmp	r3, #32
 8009df0:	d105      	bne.n	8009dfe <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2210      	movs	r2, #16
 8009df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e017      	b.n	8009e2e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	220f      	movs	r2, #15
 8009e0c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	699a      	ldr	r2, [r3, #24]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f042 0208 	orr.w	r2, r2, #8
 8009e1c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3768      	adds	r7, #104	@ 0x68
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	effffffe 	.word	0xeffffffe

08009e3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b0ba      	sub	sp, #232	@ 0xe8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009e66:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d11b      	bne.n	8009eb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e7c:	f003 0320 	and.w	r3, r3, #32
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d015      	beq.n	8009eb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e88:	f003 0320 	and.w	r3, r3, #32
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d105      	bne.n	8009e9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d009      	beq.n	8009eb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 8393 	beq.w	800a5cc <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	4798      	blx	r3
      }
      return;
 8009eae:	e38d      	b.n	800a5cc <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009eb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 8123 	beq.w	800a100 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009eba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009ebe:	4b8d      	ldr	r3, [pc, #564]	@ (800a0f4 <HAL_UART_IRQHandler+0x2b8>)
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ec6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009eca:	4b8b      	ldr	r3, [pc, #556]	@ (800a0f8 <HAL_UART_IRQHandler+0x2bc>)
 8009ecc:	4013      	ands	r3, r2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f000 8116 	beq.w	800a100 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ed8:	f003 0301 	and.w	r3, r3, #1
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d011      	beq.n	8009f04 <HAL_UART_IRQHandler+0xc8>
 8009ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00b      	beq.n	8009f04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009efa:	f043 0201 	orr.w	r2, r3, #1
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f08:	f003 0302 	and.w	r3, r3, #2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d011      	beq.n	8009f34 <HAL_UART_IRQHandler+0xf8>
 8009f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00b      	beq.n	8009f34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2202      	movs	r2, #2
 8009f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f2a:	f043 0204 	orr.w	r2, r3, #4
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f38:	f003 0304 	and.w	r3, r3, #4
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d011      	beq.n	8009f64 <HAL_UART_IRQHandler+0x128>
 8009f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00b      	beq.n	8009f64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2204      	movs	r2, #4
 8009f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f5a:	f043 0202 	orr.w	r2, r3, #2
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f68:	f003 0308 	and.w	r3, r3, #8
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d017      	beq.n	8009fa0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f74:	f003 0320 	and.w	r3, r3, #32
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d105      	bne.n	8009f88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009f7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009f80:	4b5c      	ldr	r3, [pc, #368]	@ (800a0f4 <HAL_UART_IRQHandler+0x2b8>)
 8009f82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00b      	beq.n	8009fa0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2208      	movs	r2, #8
 8009f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f96:	f043 0208 	orr.w	r2, r3, #8
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d012      	beq.n	8009fd2 <HAL_UART_IRQHandler+0x196>
 8009fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00c      	beq.n	8009fd2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fc8:	f043 0220 	orr.w	r2, r3, #32
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 82f9 	beq.w	800a5d0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d013      	beq.n	800a012 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fee:	f003 0320 	and.w	r3, r3, #32
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d105      	bne.n	800a002 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d007      	beq.n	800a012 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a018:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a026:	2b40      	cmp	r3, #64	@ 0x40
 800a028:	d005      	beq.n	800a036 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a02a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a02e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a032:	2b00      	cmp	r3, #0
 800a034:	d054      	beq.n	800a0e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f001 fd38 	bl	800baac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a046:	2b40      	cmp	r3, #64	@ 0x40
 800a048:	d146      	bne.n	800a0d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3308      	adds	r3, #8
 800a050:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a054:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a058:	e853 3f00 	ldrex	r3, [r3]
 800a05c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a060:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3308      	adds	r3, #8
 800a072:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a076:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a07a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a082:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a08e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1d9      	bne.n	800a04a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d017      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0a6:	4a15      	ldr	r2, [pc, #84]	@ (800a0fc <HAL_UART_IRQHandler+0x2c0>)
 800a0a8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7f9 f9fb 	bl	80034ac <HAL_DMA_Abort_IT>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d019      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ce:	e00f      	b.n	800a0f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fab1 	bl	800a638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d6:	e00b      	b.n	800a0f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 faad 	bl	800a638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0de:	e007      	b.n	800a0f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 faa9 	bl	800a638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a0ee:	e26f      	b.n	800a5d0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f0:	bf00      	nop
    return;
 800a0f2:	e26d      	b.n	800a5d0 <HAL_UART_IRQHandler+0x794>
 800a0f4:	10000001 	.word	0x10000001
 800a0f8:	04000120 	.word	0x04000120
 800a0fc:	0800be11 	.word	0x0800be11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a104:	2b01      	cmp	r3, #1
 800a106:	f040 8203 	bne.w	800a510 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a10e:	f003 0310 	and.w	r3, r3, #16
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 81fc 	beq.w	800a510 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a11c:	f003 0310 	and.w	r3, r3, #16
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 81f5 	beq.w	800a510 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2210      	movs	r2, #16
 800a12c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a138:	2b40      	cmp	r3, #64	@ 0x40
 800a13a:	f040 816d 	bne.w	800a418 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4aa4      	ldr	r2, [pc, #656]	@ (800a3d8 <HAL_UART_IRQHandler+0x59c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d068      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4aa1      	ldr	r2, [pc, #644]	@ (800a3dc <HAL_UART_IRQHandler+0x5a0>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d061      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a9f      	ldr	r2, [pc, #636]	@ (800a3e0 <HAL_UART_IRQHandler+0x5a4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d05a      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a9c      	ldr	r2, [pc, #624]	@ (800a3e4 <HAL_UART_IRQHandler+0x5a8>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d053      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a9a      	ldr	r2, [pc, #616]	@ (800a3e8 <HAL_UART_IRQHandler+0x5ac>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d04c      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a97      	ldr	r2, [pc, #604]	@ (800a3ec <HAL_UART_IRQHandler+0x5b0>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d045      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a95      	ldr	r2, [pc, #596]	@ (800a3f0 <HAL_UART_IRQHandler+0x5b4>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d03e      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a92      	ldr	r2, [pc, #584]	@ (800a3f4 <HAL_UART_IRQHandler+0x5b8>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d037      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a90      	ldr	r2, [pc, #576]	@ (800a3f8 <HAL_UART_IRQHandler+0x5bc>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d030      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a8d      	ldr	r2, [pc, #564]	@ (800a3fc <HAL_UART_IRQHandler+0x5c0>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d029      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a8b      	ldr	r2, [pc, #556]	@ (800a400 <HAL_UART_IRQHandler+0x5c4>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d022      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a88      	ldr	r2, [pc, #544]	@ (800a404 <HAL_UART_IRQHandler+0x5c8>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d01b      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a86      	ldr	r2, [pc, #536]	@ (800a408 <HAL_UART_IRQHandler+0x5cc>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d014      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a83      	ldr	r2, [pc, #524]	@ (800a40c <HAL_UART_IRQHandler+0x5d0>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d00d      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a81      	ldr	r2, [pc, #516]	@ (800a410 <HAL_UART_IRQHandler+0x5d4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d006      	beq.n	800a21e <HAL_UART_IRQHandler+0x3e2>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a7e      	ldr	r2, [pc, #504]	@ (800a414 <HAL_UART_IRQHandler+0x5d8>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d106      	bne.n	800a22c <HAL_UART_IRQHandler+0x3f0>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	e005      	b.n	800a238 <HAL_UART_IRQHandler+0x3fc>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	b29b      	uxth	r3, r3
 800a238:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a23c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 80ad 	beq.w	800a3a0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a24c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a250:	429a      	cmp	r2, r3
 800a252:	f080 80a5 	bcs.w	800a3a0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a25c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a26c:	f000 8087 	beq.w	800a37e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a278:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a28c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a29a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a29e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a2a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a2aa:	e841 2300 	strex	r3, r2, [r1]
 800a2ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a2b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1da      	bne.n	800a270 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3308      	adds	r3, #8
 800a2c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2c4:	e853 3f00 	ldrex	r3, [r3]
 800a2c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a2ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a2cc:	f023 0301 	bic.w	r3, r3, #1
 800a2d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3308      	adds	r3, #8
 800a2da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a2de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a2e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a2e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a2ea:	e841 2300 	strex	r3, r2, [r1]
 800a2ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a2f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1e1      	bne.n	800a2ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a300:	e853 3f00 	ldrex	r3, [r3]
 800a304:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a30c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3308      	adds	r3, #8
 800a316:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a31a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a31c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a320:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a322:	e841 2300 	strex	r3, r2, [r1]
 800a326:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1e3      	bne.n	800a2f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2220      	movs	r2, #32
 800a332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a34a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a34c:	f023 0310 	bic.w	r3, r3, #16
 800a350:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	461a      	mov	r2, r3
 800a35a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a35e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a360:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a364:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a366:	e841 2300 	strex	r3, r2, [r1]
 800a36a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a36c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1e4      	bne.n	800a33c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a378:	4618      	mov	r0, r3
 800a37a:	f7f8 fd79 	bl	8002e70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2202      	movs	r2, #2
 800a382:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a390:	b29b      	uxth	r3, r3
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	b29b      	uxth	r3, r3
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7f6 fe05 	bl	8000fa8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a39e:	e119      	b.n	800a5d4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	f040 8112 	bne.w	800a5d4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3bc:	f040 810a 	bne.w	800a5d4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7f6 fdea 	bl	8000fa8 <HAL_UARTEx_RxEventCallback>
      return;
 800a3d4:	e0fe      	b.n	800a5d4 <HAL_UART_IRQHandler+0x798>
 800a3d6:	bf00      	nop
 800a3d8:	40020010 	.word	0x40020010
 800a3dc:	40020028 	.word	0x40020028
 800a3e0:	40020040 	.word	0x40020040
 800a3e4:	40020058 	.word	0x40020058
 800a3e8:	40020070 	.word	0x40020070
 800a3ec:	40020088 	.word	0x40020088
 800a3f0:	400200a0 	.word	0x400200a0
 800a3f4:	400200b8 	.word	0x400200b8
 800a3f8:	40020410 	.word	0x40020410
 800a3fc:	40020428 	.word	0x40020428
 800a400:	40020440 	.word	0x40020440
 800a404:	40020458 	.word	0x40020458
 800a408:	40020470 	.word	0x40020470
 800a40c:	40020488 	.word	0x40020488
 800a410:	400204a0 	.word	0x400204a0
 800a414:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a424:	b29b      	uxth	r3, r3
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a432:	b29b      	uxth	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 80cf 	beq.w	800a5d8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800a43a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 80ca 	beq.w	800a5d8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a458:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	461a      	mov	r2, r3
 800a462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a466:	647b      	str	r3, [r7, #68]	@ 0x44
 800a468:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a46c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e4      	bne.n	800a444 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3308      	adds	r3, #8
 800a480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a484:	e853 3f00 	ldrex	r3, [r3]
 800a488:	623b      	str	r3, [r7, #32]
   return(result);
 800a48a:	6a3a      	ldr	r2, [r7, #32]
 800a48c:	4b55      	ldr	r3, [pc, #340]	@ (800a5e4 <HAL_UART_IRQHandler+0x7a8>)
 800a48e:	4013      	ands	r3, r2
 800a490:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3308      	adds	r3, #8
 800a49a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a49e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4a6:	e841 2300 	strex	r3, r2, [r1]
 800a4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1e3      	bne.n	800a47a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	e853 3f00 	ldrex	r3, [r3]
 800a4d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f023 0310 	bic.w	r3, r3, #16
 800a4da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a4e8:	61fb      	str	r3, [r7, #28]
 800a4ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ec:	69b9      	ldr	r1, [r7, #24]
 800a4ee:	69fa      	ldr	r2, [r7, #28]
 800a4f0:	e841 2300 	strex	r3, r2, [r1]
 800a4f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1e4      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a502:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7f6 fd4d 	bl	8000fa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a50e:	e063      	b.n	800a5d8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00e      	beq.n	800a53a <HAL_UART_IRQHandler+0x6fe>
 800a51c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a520:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d008      	beq.n	800a53a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f002 f9ca 	bl	800c8cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a538:	e051      	b.n	800a5de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a53e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a542:	2b00      	cmp	r3, #0
 800a544:	d014      	beq.n	800a570 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a54a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d105      	bne.n	800a55e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d008      	beq.n	800a570 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a562:	2b00      	cmp	r3, #0
 800a564:	d03a      	beq.n	800a5dc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	4798      	blx	r3
    }
    return;
 800a56e:	e035      	b.n	800a5dc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d009      	beq.n	800a590 <HAL_UART_IRQHandler+0x754>
 800a57c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f001 fc53 	bl	800be34 <UART_EndTransmit_IT>
    return;
 800a58e:	e026      	b.n	800a5de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a594:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d009      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x774>
 800a59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f002 f9a3 	bl	800c8f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5ae:	e016      	b.n	800a5de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d010      	beq.n	800a5de <HAL_UART_IRQHandler+0x7a2>
 800a5bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	da0c      	bge.n	800a5de <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f002 f98b 	bl	800c8e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a5ca:	e008      	b.n	800a5de <HAL_UART_IRQHandler+0x7a2>
      return;
 800a5cc:	bf00      	nop
 800a5ce:	e006      	b.n	800a5de <HAL_UART_IRQHandler+0x7a2>
    return;
 800a5d0:	bf00      	nop
 800a5d2:	e004      	b.n	800a5de <HAL_UART_IRQHandler+0x7a2>
      return;
 800a5d4:	bf00      	nop
 800a5d6:	e002      	b.n	800a5de <HAL_UART_IRQHandler+0x7a2>
      return;
 800a5d8:	bf00      	nop
 800a5da:	e000      	b.n	800a5de <HAL_UART_IRQHandler+0x7a2>
    return;
 800a5dc:	bf00      	nop
  }
}
 800a5de:	37e8      	adds	r7, #232	@ 0xe8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	effffffe 	.word	0xeffffffe

0800a5e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a64c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a650:	b092      	sub	sp, #72	@ 0x48
 800a652:	af00      	add	r7, sp, #0
 800a654:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	689a      	ldr	r2, [r3, #8]
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	431a      	orrs	r2, r3
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	431a      	orrs	r2, r3
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	4313      	orrs	r3, r2
 800a672:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	4bbe      	ldr	r3, [pc, #760]	@ (800a974 <UART_SetConfig+0x328>)
 800a67c:	4013      	ands	r3, r2
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	6812      	ldr	r2, [r2, #0]
 800a682:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a684:	430b      	orrs	r3, r1
 800a686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	430a      	orrs	r2, r1
 800a69c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4ab3      	ldr	r2, [pc, #716]	@ (800a978 <UART_SetConfig+0x32c>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d004      	beq.n	800a6b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689a      	ldr	r2, [r3, #8]
 800a6be:	4baf      	ldr	r3, [pc, #700]	@ (800a97c <UART_SetConfig+0x330>)
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	6812      	ldr	r2, [r2, #0]
 800a6c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d2:	f023 010f 	bic.w	r1, r3, #15
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4aa6      	ldr	r2, [pc, #664]	@ (800a980 <UART_SetConfig+0x334>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d177      	bne.n	800a7dc <UART_SetConfig+0x190>
 800a6ec:	4ba5      	ldr	r3, [pc, #660]	@ (800a984 <UART_SetConfig+0x338>)
 800a6ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6f4:	2b28      	cmp	r3, #40	@ 0x28
 800a6f6:	d86d      	bhi.n	800a7d4 <UART_SetConfig+0x188>
 800a6f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a700 <UART_SetConfig+0xb4>)
 800a6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fe:	bf00      	nop
 800a700:	0800a7a5 	.word	0x0800a7a5
 800a704:	0800a7d5 	.word	0x0800a7d5
 800a708:	0800a7d5 	.word	0x0800a7d5
 800a70c:	0800a7d5 	.word	0x0800a7d5
 800a710:	0800a7d5 	.word	0x0800a7d5
 800a714:	0800a7d5 	.word	0x0800a7d5
 800a718:	0800a7d5 	.word	0x0800a7d5
 800a71c:	0800a7d5 	.word	0x0800a7d5
 800a720:	0800a7ad 	.word	0x0800a7ad
 800a724:	0800a7d5 	.word	0x0800a7d5
 800a728:	0800a7d5 	.word	0x0800a7d5
 800a72c:	0800a7d5 	.word	0x0800a7d5
 800a730:	0800a7d5 	.word	0x0800a7d5
 800a734:	0800a7d5 	.word	0x0800a7d5
 800a738:	0800a7d5 	.word	0x0800a7d5
 800a73c:	0800a7d5 	.word	0x0800a7d5
 800a740:	0800a7b5 	.word	0x0800a7b5
 800a744:	0800a7d5 	.word	0x0800a7d5
 800a748:	0800a7d5 	.word	0x0800a7d5
 800a74c:	0800a7d5 	.word	0x0800a7d5
 800a750:	0800a7d5 	.word	0x0800a7d5
 800a754:	0800a7d5 	.word	0x0800a7d5
 800a758:	0800a7d5 	.word	0x0800a7d5
 800a75c:	0800a7d5 	.word	0x0800a7d5
 800a760:	0800a7bd 	.word	0x0800a7bd
 800a764:	0800a7d5 	.word	0x0800a7d5
 800a768:	0800a7d5 	.word	0x0800a7d5
 800a76c:	0800a7d5 	.word	0x0800a7d5
 800a770:	0800a7d5 	.word	0x0800a7d5
 800a774:	0800a7d5 	.word	0x0800a7d5
 800a778:	0800a7d5 	.word	0x0800a7d5
 800a77c:	0800a7d5 	.word	0x0800a7d5
 800a780:	0800a7c5 	.word	0x0800a7c5
 800a784:	0800a7d5 	.word	0x0800a7d5
 800a788:	0800a7d5 	.word	0x0800a7d5
 800a78c:	0800a7d5 	.word	0x0800a7d5
 800a790:	0800a7d5 	.word	0x0800a7d5
 800a794:	0800a7d5 	.word	0x0800a7d5
 800a798:	0800a7d5 	.word	0x0800a7d5
 800a79c:	0800a7d5 	.word	0x0800a7d5
 800a7a0:	0800a7cd 	.word	0x0800a7cd
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7aa:	e326      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a7ac:	2304      	movs	r3, #4
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7b2:	e322      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a7b4:	2308      	movs	r3, #8
 800a7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ba:	e31e      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a7bc:	2310      	movs	r3, #16
 800a7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c2:	e31a      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a7c4:	2320      	movs	r3, #32
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ca:	e316      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a7cc:	2340      	movs	r3, #64	@ 0x40
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d2:	e312      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a7d4:	2380      	movs	r3, #128	@ 0x80
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7da:	e30e      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a69      	ldr	r2, [pc, #420]	@ (800a988 <UART_SetConfig+0x33c>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d130      	bne.n	800a848 <UART_SetConfig+0x1fc>
 800a7e6:	4b67      	ldr	r3, [pc, #412]	@ (800a984 <UART_SetConfig+0x338>)
 800a7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ea:	f003 0307 	and.w	r3, r3, #7
 800a7ee:	2b05      	cmp	r3, #5
 800a7f0:	d826      	bhi.n	800a840 <UART_SetConfig+0x1f4>
 800a7f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f8 <UART_SetConfig+0x1ac>)
 800a7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f8:	0800a811 	.word	0x0800a811
 800a7fc:	0800a819 	.word	0x0800a819
 800a800:	0800a821 	.word	0x0800a821
 800a804:	0800a829 	.word	0x0800a829
 800a808:	0800a831 	.word	0x0800a831
 800a80c:	0800a839 	.word	0x0800a839
 800a810:	2300      	movs	r3, #0
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a816:	e2f0      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a818:	2304      	movs	r3, #4
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81e:	e2ec      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a820:	2308      	movs	r3, #8
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a826:	e2e8      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a828:	2310      	movs	r3, #16
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82e:	e2e4      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a830:	2320      	movs	r3, #32
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e2e0      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a838:	2340      	movs	r3, #64	@ 0x40
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83e:	e2dc      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a840:	2380      	movs	r3, #128	@ 0x80
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a846:	e2d8      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a4f      	ldr	r2, [pc, #316]	@ (800a98c <UART_SetConfig+0x340>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d130      	bne.n	800a8b4 <UART_SetConfig+0x268>
 800a852:	4b4c      	ldr	r3, [pc, #304]	@ (800a984 <UART_SetConfig+0x338>)
 800a854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a856:	f003 0307 	and.w	r3, r3, #7
 800a85a:	2b05      	cmp	r3, #5
 800a85c:	d826      	bhi.n	800a8ac <UART_SetConfig+0x260>
 800a85e:	a201      	add	r2, pc, #4	@ (adr r2, 800a864 <UART_SetConfig+0x218>)
 800a860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a864:	0800a87d 	.word	0x0800a87d
 800a868:	0800a885 	.word	0x0800a885
 800a86c:	0800a88d 	.word	0x0800a88d
 800a870:	0800a895 	.word	0x0800a895
 800a874:	0800a89d 	.word	0x0800a89d
 800a878:	0800a8a5 	.word	0x0800a8a5
 800a87c:	2300      	movs	r3, #0
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a882:	e2ba      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a884:	2304      	movs	r3, #4
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88a:	e2b6      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a88c:	2308      	movs	r3, #8
 800a88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a892:	e2b2      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a894:	2310      	movs	r3, #16
 800a896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89a:	e2ae      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a89c:	2320      	movs	r3, #32
 800a89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a2:	e2aa      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a8a4:	2340      	movs	r3, #64	@ 0x40
 800a8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8aa:	e2a6      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a8ac:	2380      	movs	r3, #128	@ 0x80
 800a8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b2:	e2a2      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a35      	ldr	r2, [pc, #212]	@ (800a990 <UART_SetConfig+0x344>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d130      	bne.n	800a920 <UART_SetConfig+0x2d4>
 800a8be:	4b31      	ldr	r3, [pc, #196]	@ (800a984 <UART_SetConfig+0x338>)
 800a8c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8c2:	f003 0307 	and.w	r3, r3, #7
 800a8c6:	2b05      	cmp	r3, #5
 800a8c8:	d826      	bhi.n	800a918 <UART_SetConfig+0x2cc>
 800a8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d0 <UART_SetConfig+0x284>)
 800a8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d0:	0800a8e9 	.word	0x0800a8e9
 800a8d4:	0800a8f1 	.word	0x0800a8f1
 800a8d8:	0800a8f9 	.word	0x0800a8f9
 800a8dc:	0800a901 	.word	0x0800a901
 800a8e0:	0800a909 	.word	0x0800a909
 800a8e4:	0800a911 	.word	0x0800a911
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ee:	e284      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a8f0:	2304      	movs	r3, #4
 800a8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f6:	e280      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a8f8:	2308      	movs	r3, #8
 800a8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fe:	e27c      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a900:	2310      	movs	r3, #16
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a906:	e278      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a908:	2320      	movs	r3, #32
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90e:	e274      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a910:	2340      	movs	r3, #64	@ 0x40
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a916:	e270      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a918:	2380      	movs	r3, #128	@ 0x80
 800a91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91e:	e26c      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a1b      	ldr	r2, [pc, #108]	@ (800a994 <UART_SetConfig+0x348>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d142      	bne.n	800a9b0 <UART_SetConfig+0x364>
 800a92a:	4b16      	ldr	r3, [pc, #88]	@ (800a984 <UART_SetConfig+0x338>)
 800a92c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a92e:	f003 0307 	and.w	r3, r3, #7
 800a932:	2b05      	cmp	r3, #5
 800a934:	d838      	bhi.n	800a9a8 <UART_SetConfig+0x35c>
 800a936:	a201      	add	r2, pc, #4	@ (adr r2, 800a93c <UART_SetConfig+0x2f0>)
 800a938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93c:	0800a955 	.word	0x0800a955
 800a940:	0800a95d 	.word	0x0800a95d
 800a944:	0800a965 	.word	0x0800a965
 800a948:	0800a96d 	.word	0x0800a96d
 800a94c:	0800a999 	.word	0x0800a999
 800a950:	0800a9a1 	.word	0x0800a9a1
 800a954:	2300      	movs	r3, #0
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95a:	e24e      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a95c:	2304      	movs	r3, #4
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a962:	e24a      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a964:	2308      	movs	r3, #8
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96a:	e246      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a96c:	2310      	movs	r3, #16
 800a96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a972:	e242      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a974:	cfff69f3 	.word	0xcfff69f3
 800a978:	58000c00 	.word	0x58000c00
 800a97c:	11fff4ff 	.word	0x11fff4ff
 800a980:	40011000 	.word	0x40011000
 800a984:	58024400 	.word	0x58024400
 800a988:	40004400 	.word	0x40004400
 800a98c:	40004800 	.word	0x40004800
 800a990:	40004c00 	.word	0x40004c00
 800a994:	40005000 	.word	0x40005000
 800a998:	2320      	movs	r3, #32
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a99e:	e22c      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a9a0:	2340      	movs	r3, #64	@ 0x40
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9a6:	e228      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a9a8:	2380      	movs	r3, #128	@ 0x80
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ae:	e224      	b.n	800adfa <UART_SetConfig+0x7ae>
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4ab1      	ldr	r2, [pc, #708]	@ (800ac7c <UART_SetConfig+0x630>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d176      	bne.n	800aaa8 <UART_SetConfig+0x45c>
 800a9ba:	4bb1      	ldr	r3, [pc, #708]	@ (800ac80 <UART_SetConfig+0x634>)
 800a9bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9c2:	2b28      	cmp	r3, #40	@ 0x28
 800a9c4:	d86c      	bhi.n	800aaa0 <UART_SetConfig+0x454>
 800a9c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9cc <UART_SetConfig+0x380>)
 800a9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9cc:	0800aa71 	.word	0x0800aa71
 800a9d0:	0800aaa1 	.word	0x0800aaa1
 800a9d4:	0800aaa1 	.word	0x0800aaa1
 800a9d8:	0800aaa1 	.word	0x0800aaa1
 800a9dc:	0800aaa1 	.word	0x0800aaa1
 800a9e0:	0800aaa1 	.word	0x0800aaa1
 800a9e4:	0800aaa1 	.word	0x0800aaa1
 800a9e8:	0800aaa1 	.word	0x0800aaa1
 800a9ec:	0800aa79 	.word	0x0800aa79
 800a9f0:	0800aaa1 	.word	0x0800aaa1
 800a9f4:	0800aaa1 	.word	0x0800aaa1
 800a9f8:	0800aaa1 	.word	0x0800aaa1
 800a9fc:	0800aaa1 	.word	0x0800aaa1
 800aa00:	0800aaa1 	.word	0x0800aaa1
 800aa04:	0800aaa1 	.word	0x0800aaa1
 800aa08:	0800aaa1 	.word	0x0800aaa1
 800aa0c:	0800aa81 	.word	0x0800aa81
 800aa10:	0800aaa1 	.word	0x0800aaa1
 800aa14:	0800aaa1 	.word	0x0800aaa1
 800aa18:	0800aaa1 	.word	0x0800aaa1
 800aa1c:	0800aaa1 	.word	0x0800aaa1
 800aa20:	0800aaa1 	.word	0x0800aaa1
 800aa24:	0800aaa1 	.word	0x0800aaa1
 800aa28:	0800aaa1 	.word	0x0800aaa1
 800aa2c:	0800aa89 	.word	0x0800aa89
 800aa30:	0800aaa1 	.word	0x0800aaa1
 800aa34:	0800aaa1 	.word	0x0800aaa1
 800aa38:	0800aaa1 	.word	0x0800aaa1
 800aa3c:	0800aaa1 	.word	0x0800aaa1
 800aa40:	0800aaa1 	.word	0x0800aaa1
 800aa44:	0800aaa1 	.word	0x0800aaa1
 800aa48:	0800aaa1 	.word	0x0800aaa1
 800aa4c:	0800aa91 	.word	0x0800aa91
 800aa50:	0800aaa1 	.word	0x0800aaa1
 800aa54:	0800aaa1 	.word	0x0800aaa1
 800aa58:	0800aaa1 	.word	0x0800aaa1
 800aa5c:	0800aaa1 	.word	0x0800aaa1
 800aa60:	0800aaa1 	.word	0x0800aaa1
 800aa64:	0800aaa1 	.word	0x0800aaa1
 800aa68:	0800aaa1 	.word	0x0800aaa1
 800aa6c:	0800aa99 	.word	0x0800aa99
 800aa70:	2301      	movs	r3, #1
 800aa72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa76:	e1c0      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aa78:	2304      	movs	r3, #4
 800aa7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa7e:	e1bc      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aa80:	2308      	movs	r3, #8
 800aa82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa86:	e1b8      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aa88:	2310      	movs	r3, #16
 800aa8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa8e:	e1b4      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aa90:	2320      	movs	r3, #32
 800aa92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa96:	e1b0      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aa98:	2340      	movs	r3, #64	@ 0x40
 800aa9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa9e:	e1ac      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aaa0:	2380      	movs	r3, #128	@ 0x80
 800aaa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaa6:	e1a8      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a75      	ldr	r2, [pc, #468]	@ (800ac84 <UART_SetConfig+0x638>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d130      	bne.n	800ab14 <UART_SetConfig+0x4c8>
 800aab2:	4b73      	ldr	r3, [pc, #460]	@ (800ac80 <UART_SetConfig+0x634>)
 800aab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aab6:	f003 0307 	and.w	r3, r3, #7
 800aaba:	2b05      	cmp	r3, #5
 800aabc:	d826      	bhi.n	800ab0c <UART_SetConfig+0x4c0>
 800aabe:	a201      	add	r2, pc, #4	@ (adr r2, 800aac4 <UART_SetConfig+0x478>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800aadd 	.word	0x0800aadd
 800aac8:	0800aae5 	.word	0x0800aae5
 800aacc:	0800aaed 	.word	0x0800aaed
 800aad0:	0800aaf5 	.word	0x0800aaf5
 800aad4:	0800aafd 	.word	0x0800aafd
 800aad8:	0800ab05 	.word	0x0800ab05
 800aadc:	2300      	movs	r3, #0
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae2:	e18a      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aae4:	2304      	movs	r3, #4
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaea:	e186      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aaec:	2308      	movs	r3, #8
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf2:	e182      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aaf4:	2310      	movs	r3, #16
 800aaf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aafa:	e17e      	b.n	800adfa <UART_SetConfig+0x7ae>
 800aafc:	2320      	movs	r3, #32
 800aafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab02:	e17a      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ab04:	2340      	movs	r3, #64	@ 0x40
 800ab06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab0a:	e176      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ab0c:	2380      	movs	r3, #128	@ 0x80
 800ab0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab12:	e172      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a5b      	ldr	r2, [pc, #364]	@ (800ac88 <UART_SetConfig+0x63c>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d130      	bne.n	800ab80 <UART_SetConfig+0x534>
 800ab1e:	4b58      	ldr	r3, [pc, #352]	@ (800ac80 <UART_SetConfig+0x634>)
 800ab20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab22:	f003 0307 	and.w	r3, r3, #7
 800ab26:	2b05      	cmp	r3, #5
 800ab28:	d826      	bhi.n	800ab78 <UART_SetConfig+0x52c>
 800ab2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab30 <UART_SetConfig+0x4e4>)
 800ab2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab30:	0800ab49 	.word	0x0800ab49
 800ab34:	0800ab51 	.word	0x0800ab51
 800ab38:	0800ab59 	.word	0x0800ab59
 800ab3c:	0800ab61 	.word	0x0800ab61
 800ab40:	0800ab69 	.word	0x0800ab69
 800ab44:	0800ab71 	.word	0x0800ab71
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4e:	e154      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ab50:	2304      	movs	r3, #4
 800ab52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab56:	e150      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ab58:	2308      	movs	r3, #8
 800ab5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5e:	e14c      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ab60:	2310      	movs	r3, #16
 800ab62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab66:	e148      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ab68:	2320      	movs	r3, #32
 800ab6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab6e:	e144      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ab70:	2340      	movs	r3, #64	@ 0x40
 800ab72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab76:	e140      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ab78:	2380      	movs	r3, #128	@ 0x80
 800ab7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab7e:	e13c      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a41      	ldr	r2, [pc, #260]	@ (800ac8c <UART_SetConfig+0x640>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	f040 8082 	bne.w	800ac90 <UART_SetConfig+0x644>
 800ab8c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac80 <UART_SetConfig+0x634>)
 800ab8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab94:	2b28      	cmp	r3, #40	@ 0x28
 800ab96:	d86d      	bhi.n	800ac74 <UART_SetConfig+0x628>
 800ab98:	a201      	add	r2, pc, #4	@ (adr r2, 800aba0 <UART_SetConfig+0x554>)
 800ab9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9e:	bf00      	nop
 800aba0:	0800ac45 	.word	0x0800ac45
 800aba4:	0800ac75 	.word	0x0800ac75
 800aba8:	0800ac75 	.word	0x0800ac75
 800abac:	0800ac75 	.word	0x0800ac75
 800abb0:	0800ac75 	.word	0x0800ac75
 800abb4:	0800ac75 	.word	0x0800ac75
 800abb8:	0800ac75 	.word	0x0800ac75
 800abbc:	0800ac75 	.word	0x0800ac75
 800abc0:	0800ac4d 	.word	0x0800ac4d
 800abc4:	0800ac75 	.word	0x0800ac75
 800abc8:	0800ac75 	.word	0x0800ac75
 800abcc:	0800ac75 	.word	0x0800ac75
 800abd0:	0800ac75 	.word	0x0800ac75
 800abd4:	0800ac75 	.word	0x0800ac75
 800abd8:	0800ac75 	.word	0x0800ac75
 800abdc:	0800ac75 	.word	0x0800ac75
 800abe0:	0800ac55 	.word	0x0800ac55
 800abe4:	0800ac75 	.word	0x0800ac75
 800abe8:	0800ac75 	.word	0x0800ac75
 800abec:	0800ac75 	.word	0x0800ac75
 800abf0:	0800ac75 	.word	0x0800ac75
 800abf4:	0800ac75 	.word	0x0800ac75
 800abf8:	0800ac75 	.word	0x0800ac75
 800abfc:	0800ac75 	.word	0x0800ac75
 800ac00:	0800ac5d 	.word	0x0800ac5d
 800ac04:	0800ac75 	.word	0x0800ac75
 800ac08:	0800ac75 	.word	0x0800ac75
 800ac0c:	0800ac75 	.word	0x0800ac75
 800ac10:	0800ac75 	.word	0x0800ac75
 800ac14:	0800ac75 	.word	0x0800ac75
 800ac18:	0800ac75 	.word	0x0800ac75
 800ac1c:	0800ac75 	.word	0x0800ac75
 800ac20:	0800ac65 	.word	0x0800ac65
 800ac24:	0800ac75 	.word	0x0800ac75
 800ac28:	0800ac75 	.word	0x0800ac75
 800ac2c:	0800ac75 	.word	0x0800ac75
 800ac30:	0800ac75 	.word	0x0800ac75
 800ac34:	0800ac75 	.word	0x0800ac75
 800ac38:	0800ac75 	.word	0x0800ac75
 800ac3c:	0800ac75 	.word	0x0800ac75
 800ac40:	0800ac6d 	.word	0x0800ac6d
 800ac44:	2301      	movs	r3, #1
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac4a:	e0d6      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac52:	e0d2      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ac54:	2308      	movs	r3, #8
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac5a:	e0ce      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ac5c:	2310      	movs	r3, #16
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac62:	e0ca      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ac64:	2320      	movs	r3, #32
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6a:	e0c6      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ac6c:	2340      	movs	r3, #64	@ 0x40
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac72:	e0c2      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ac74:	2380      	movs	r3, #128	@ 0x80
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7a:	e0be      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ac7c:	40011400 	.word	0x40011400
 800ac80:	58024400 	.word	0x58024400
 800ac84:	40007800 	.word	0x40007800
 800ac88:	40007c00 	.word	0x40007c00
 800ac8c:	40011800 	.word	0x40011800
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4aad      	ldr	r2, [pc, #692]	@ (800af4c <UART_SetConfig+0x900>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d176      	bne.n	800ad88 <UART_SetConfig+0x73c>
 800ac9a:	4bad      	ldr	r3, [pc, #692]	@ (800af50 <UART_SetConfig+0x904>)
 800ac9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aca2:	2b28      	cmp	r3, #40	@ 0x28
 800aca4:	d86c      	bhi.n	800ad80 <UART_SetConfig+0x734>
 800aca6:	a201      	add	r2, pc, #4	@ (adr r2, 800acac <UART_SetConfig+0x660>)
 800aca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acac:	0800ad51 	.word	0x0800ad51
 800acb0:	0800ad81 	.word	0x0800ad81
 800acb4:	0800ad81 	.word	0x0800ad81
 800acb8:	0800ad81 	.word	0x0800ad81
 800acbc:	0800ad81 	.word	0x0800ad81
 800acc0:	0800ad81 	.word	0x0800ad81
 800acc4:	0800ad81 	.word	0x0800ad81
 800acc8:	0800ad81 	.word	0x0800ad81
 800accc:	0800ad59 	.word	0x0800ad59
 800acd0:	0800ad81 	.word	0x0800ad81
 800acd4:	0800ad81 	.word	0x0800ad81
 800acd8:	0800ad81 	.word	0x0800ad81
 800acdc:	0800ad81 	.word	0x0800ad81
 800ace0:	0800ad81 	.word	0x0800ad81
 800ace4:	0800ad81 	.word	0x0800ad81
 800ace8:	0800ad81 	.word	0x0800ad81
 800acec:	0800ad61 	.word	0x0800ad61
 800acf0:	0800ad81 	.word	0x0800ad81
 800acf4:	0800ad81 	.word	0x0800ad81
 800acf8:	0800ad81 	.word	0x0800ad81
 800acfc:	0800ad81 	.word	0x0800ad81
 800ad00:	0800ad81 	.word	0x0800ad81
 800ad04:	0800ad81 	.word	0x0800ad81
 800ad08:	0800ad81 	.word	0x0800ad81
 800ad0c:	0800ad69 	.word	0x0800ad69
 800ad10:	0800ad81 	.word	0x0800ad81
 800ad14:	0800ad81 	.word	0x0800ad81
 800ad18:	0800ad81 	.word	0x0800ad81
 800ad1c:	0800ad81 	.word	0x0800ad81
 800ad20:	0800ad81 	.word	0x0800ad81
 800ad24:	0800ad81 	.word	0x0800ad81
 800ad28:	0800ad81 	.word	0x0800ad81
 800ad2c:	0800ad71 	.word	0x0800ad71
 800ad30:	0800ad81 	.word	0x0800ad81
 800ad34:	0800ad81 	.word	0x0800ad81
 800ad38:	0800ad81 	.word	0x0800ad81
 800ad3c:	0800ad81 	.word	0x0800ad81
 800ad40:	0800ad81 	.word	0x0800ad81
 800ad44:	0800ad81 	.word	0x0800ad81
 800ad48:	0800ad81 	.word	0x0800ad81
 800ad4c:	0800ad79 	.word	0x0800ad79
 800ad50:	2301      	movs	r3, #1
 800ad52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad56:	e050      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ad58:	2304      	movs	r3, #4
 800ad5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad5e:	e04c      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ad60:	2308      	movs	r3, #8
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad66:	e048      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ad68:	2310      	movs	r3, #16
 800ad6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6e:	e044      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ad70:	2320      	movs	r3, #32
 800ad72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad76:	e040      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ad78:	2340      	movs	r3, #64	@ 0x40
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7e:	e03c      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ad80:	2380      	movs	r3, #128	@ 0x80
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad86:	e038      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a71      	ldr	r2, [pc, #452]	@ (800af54 <UART_SetConfig+0x908>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d130      	bne.n	800adf4 <UART_SetConfig+0x7a8>
 800ad92:	4b6f      	ldr	r3, [pc, #444]	@ (800af50 <UART_SetConfig+0x904>)
 800ad94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad96:	f003 0307 	and.w	r3, r3, #7
 800ad9a:	2b05      	cmp	r3, #5
 800ad9c:	d826      	bhi.n	800adec <UART_SetConfig+0x7a0>
 800ad9e:	a201      	add	r2, pc, #4	@ (adr r2, 800ada4 <UART_SetConfig+0x758>)
 800ada0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada4:	0800adbd 	.word	0x0800adbd
 800ada8:	0800adc5 	.word	0x0800adc5
 800adac:	0800adcd 	.word	0x0800adcd
 800adb0:	0800add5 	.word	0x0800add5
 800adb4:	0800addd 	.word	0x0800addd
 800adb8:	0800ade5 	.word	0x0800ade5
 800adbc:	2302      	movs	r3, #2
 800adbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adc2:	e01a      	b.n	800adfa <UART_SetConfig+0x7ae>
 800adc4:	2304      	movs	r3, #4
 800adc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adca:	e016      	b.n	800adfa <UART_SetConfig+0x7ae>
 800adcc:	2308      	movs	r3, #8
 800adce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800add2:	e012      	b.n	800adfa <UART_SetConfig+0x7ae>
 800add4:	2310      	movs	r3, #16
 800add6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adda:	e00e      	b.n	800adfa <UART_SetConfig+0x7ae>
 800addc:	2320      	movs	r3, #32
 800adde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade2:	e00a      	b.n	800adfa <UART_SetConfig+0x7ae>
 800ade4:	2340      	movs	r3, #64	@ 0x40
 800ade6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adea:	e006      	b.n	800adfa <UART_SetConfig+0x7ae>
 800adec:	2380      	movs	r3, #128	@ 0x80
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf2:	e002      	b.n	800adfa <UART_SetConfig+0x7ae>
 800adf4:	2380      	movs	r3, #128	@ 0x80
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a55      	ldr	r2, [pc, #340]	@ (800af54 <UART_SetConfig+0x908>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	f040 80f8 	bne.w	800aff6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	2b20      	cmp	r3, #32
 800ae0c:	dc46      	bgt.n	800ae9c <UART_SetConfig+0x850>
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	db75      	blt.n	800aefe <UART_SetConfig+0x8b2>
 800ae12:	3b02      	subs	r3, #2
 800ae14:	2b1e      	cmp	r3, #30
 800ae16:	d872      	bhi.n	800aefe <UART_SetConfig+0x8b2>
 800ae18:	a201      	add	r2, pc, #4	@ (adr r2, 800ae20 <UART_SetConfig+0x7d4>)
 800ae1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1e:	bf00      	nop
 800ae20:	0800aea3 	.word	0x0800aea3
 800ae24:	0800aeff 	.word	0x0800aeff
 800ae28:	0800aeab 	.word	0x0800aeab
 800ae2c:	0800aeff 	.word	0x0800aeff
 800ae30:	0800aeff 	.word	0x0800aeff
 800ae34:	0800aeff 	.word	0x0800aeff
 800ae38:	0800aebb 	.word	0x0800aebb
 800ae3c:	0800aeff 	.word	0x0800aeff
 800ae40:	0800aeff 	.word	0x0800aeff
 800ae44:	0800aeff 	.word	0x0800aeff
 800ae48:	0800aeff 	.word	0x0800aeff
 800ae4c:	0800aeff 	.word	0x0800aeff
 800ae50:	0800aeff 	.word	0x0800aeff
 800ae54:	0800aeff 	.word	0x0800aeff
 800ae58:	0800aecb 	.word	0x0800aecb
 800ae5c:	0800aeff 	.word	0x0800aeff
 800ae60:	0800aeff 	.word	0x0800aeff
 800ae64:	0800aeff 	.word	0x0800aeff
 800ae68:	0800aeff 	.word	0x0800aeff
 800ae6c:	0800aeff 	.word	0x0800aeff
 800ae70:	0800aeff 	.word	0x0800aeff
 800ae74:	0800aeff 	.word	0x0800aeff
 800ae78:	0800aeff 	.word	0x0800aeff
 800ae7c:	0800aeff 	.word	0x0800aeff
 800ae80:	0800aeff 	.word	0x0800aeff
 800ae84:	0800aeff 	.word	0x0800aeff
 800ae88:	0800aeff 	.word	0x0800aeff
 800ae8c:	0800aeff 	.word	0x0800aeff
 800ae90:	0800aeff 	.word	0x0800aeff
 800ae94:	0800aeff 	.word	0x0800aeff
 800ae98:	0800aef1 	.word	0x0800aef1
 800ae9c:	2b40      	cmp	r3, #64	@ 0x40
 800ae9e:	d02a      	beq.n	800aef6 <UART_SetConfig+0x8aa>
 800aea0:	e02d      	b.n	800aefe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aea2:	f7fd fd4f 	bl	8008944 <HAL_RCCEx_GetD3PCLK1Freq>
 800aea6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aea8:	e02f      	b.n	800af0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fd fd5e 	bl	8008970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb8:	e027      	b.n	800af0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeba:	f107 0318 	add.w	r3, r7, #24
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fd feaa 	bl	8008c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aec8:	e01f      	b.n	800af0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeca:	4b21      	ldr	r3, [pc, #132]	@ (800af50 <UART_SetConfig+0x904>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0320 	and.w	r3, r3, #32
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d009      	beq.n	800aeea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aed6:	4b1e      	ldr	r3, [pc, #120]	@ (800af50 <UART_SetConfig+0x904>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	08db      	lsrs	r3, r3, #3
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	4a1d      	ldr	r2, [pc, #116]	@ (800af58 <UART_SetConfig+0x90c>)
 800aee2:	fa22 f303 	lsr.w	r3, r2, r3
 800aee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aee8:	e00f      	b.n	800af0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aeea:	4b1b      	ldr	r3, [pc, #108]	@ (800af58 <UART_SetConfig+0x90c>)
 800aeec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeee:	e00c      	b.n	800af0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aef0:	4b1a      	ldr	r3, [pc, #104]	@ (800af5c <UART_SetConfig+0x910>)
 800aef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef4:	e009      	b.n	800af0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aefc:	e005      	b.n	800af0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 81ee 	beq.w	800b2ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af16:	4a12      	ldr	r2, [pc, #72]	@ (800af60 <UART_SetConfig+0x914>)
 800af18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af1c:	461a      	mov	r2, r3
 800af1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af20:	fbb3 f3f2 	udiv	r3, r3, r2
 800af24:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	685a      	ldr	r2, [r3, #4]
 800af2a:	4613      	mov	r3, r2
 800af2c:	005b      	lsls	r3, r3, #1
 800af2e:	4413      	add	r3, r2
 800af30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af32:	429a      	cmp	r2, r3
 800af34:	d305      	bcc.n	800af42 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af3e:	429a      	cmp	r2, r3
 800af40:	d910      	bls.n	800af64 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af48:	e1d1      	b.n	800b2ee <UART_SetConfig+0xca2>
 800af4a:	bf00      	nop
 800af4c:	40011c00 	.word	0x40011c00
 800af50:	58024400 	.word	0x58024400
 800af54:	58000c00 	.word	0x58000c00
 800af58:	03d09000 	.word	0x03d09000
 800af5c:	003d0900 	.word	0x003d0900
 800af60:	08011aa0 	.word	0x08011aa0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af66:	2200      	movs	r2, #0
 800af68:	60bb      	str	r3, [r7, #8]
 800af6a:	60fa      	str	r2, [r7, #12]
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af70:	4ac0      	ldr	r2, [pc, #768]	@ (800b274 <UART_SetConfig+0xc28>)
 800af72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af76:	b29b      	uxth	r3, r3
 800af78:	2200      	movs	r2, #0
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	607a      	str	r2, [r7, #4]
 800af7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af86:	f7f5 fa5b 	bl	8000440 <__aeabi_uldivmod>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4610      	mov	r0, r2
 800af90:	4619      	mov	r1, r3
 800af92:	f04f 0200 	mov.w	r2, #0
 800af96:	f04f 0300 	mov.w	r3, #0
 800af9a:	020b      	lsls	r3, r1, #8
 800af9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afa0:	0202      	lsls	r2, r0, #8
 800afa2:	6979      	ldr	r1, [r7, #20]
 800afa4:	6849      	ldr	r1, [r1, #4]
 800afa6:	0849      	lsrs	r1, r1, #1
 800afa8:	2000      	movs	r0, #0
 800afaa:	460c      	mov	r4, r1
 800afac:	4605      	mov	r5, r0
 800afae:	eb12 0804 	adds.w	r8, r2, r4
 800afb2:	eb43 0905 	adc.w	r9, r3, r5
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	469a      	mov	sl, r3
 800afbe:	4693      	mov	fp, r2
 800afc0:	4652      	mov	r2, sl
 800afc2:	465b      	mov	r3, fp
 800afc4:	4640      	mov	r0, r8
 800afc6:	4649      	mov	r1, r9
 800afc8:	f7f5 fa3a 	bl	8000440 <__aeabi_uldivmod>
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	4613      	mov	r3, r2
 800afd2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afda:	d308      	bcc.n	800afee <UART_SetConfig+0x9a2>
 800afdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afe2:	d204      	bcs.n	800afee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800afea:	60da      	str	r2, [r3, #12]
 800afec:	e17f      	b.n	800b2ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aff4:	e17b      	b.n	800b2ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	69db      	ldr	r3, [r3, #28]
 800affa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800affe:	f040 80bd 	bne.w	800b17c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b002:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b006:	2b20      	cmp	r3, #32
 800b008:	dc48      	bgt.n	800b09c <UART_SetConfig+0xa50>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	db7b      	blt.n	800b106 <UART_SetConfig+0xaba>
 800b00e:	2b20      	cmp	r3, #32
 800b010:	d879      	bhi.n	800b106 <UART_SetConfig+0xaba>
 800b012:	a201      	add	r2, pc, #4	@ (adr r2, 800b018 <UART_SetConfig+0x9cc>)
 800b014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b018:	0800b0a3 	.word	0x0800b0a3
 800b01c:	0800b0ab 	.word	0x0800b0ab
 800b020:	0800b107 	.word	0x0800b107
 800b024:	0800b107 	.word	0x0800b107
 800b028:	0800b0b3 	.word	0x0800b0b3
 800b02c:	0800b107 	.word	0x0800b107
 800b030:	0800b107 	.word	0x0800b107
 800b034:	0800b107 	.word	0x0800b107
 800b038:	0800b0c3 	.word	0x0800b0c3
 800b03c:	0800b107 	.word	0x0800b107
 800b040:	0800b107 	.word	0x0800b107
 800b044:	0800b107 	.word	0x0800b107
 800b048:	0800b107 	.word	0x0800b107
 800b04c:	0800b107 	.word	0x0800b107
 800b050:	0800b107 	.word	0x0800b107
 800b054:	0800b107 	.word	0x0800b107
 800b058:	0800b0d3 	.word	0x0800b0d3
 800b05c:	0800b107 	.word	0x0800b107
 800b060:	0800b107 	.word	0x0800b107
 800b064:	0800b107 	.word	0x0800b107
 800b068:	0800b107 	.word	0x0800b107
 800b06c:	0800b107 	.word	0x0800b107
 800b070:	0800b107 	.word	0x0800b107
 800b074:	0800b107 	.word	0x0800b107
 800b078:	0800b107 	.word	0x0800b107
 800b07c:	0800b107 	.word	0x0800b107
 800b080:	0800b107 	.word	0x0800b107
 800b084:	0800b107 	.word	0x0800b107
 800b088:	0800b107 	.word	0x0800b107
 800b08c:	0800b107 	.word	0x0800b107
 800b090:	0800b107 	.word	0x0800b107
 800b094:	0800b107 	.word	0x0800b107
 800b098:	0800b0f9 	.word	0x0800b0f9
 800b09c:	2b40      	cmp	r3, #64	@ 0x40
 800b09e:	d02e      	beq.n	800b0fe <UART_SetConfig+0xab2>
 800b0a0:	e031      	b.n	800b106 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0a2:	f7fc fa65 	bl	8007570 <HAL_RCC_GetPCLK1Freq>
 800b0a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0a8:	e033      	b.n	800b112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0aa:	f7fc fa77 	bl	800759c <HAL_RCC_GetPCLK2Freq>
 800b0ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0b0:	e02f      	b.n	800b112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fd fc5a 	bl	8008970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c0:	e027      	b.n	800b112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0c2:	f107 0318 	add.w	r3, r7, #24
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fd fda6 	bl	8008c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0d0:	e01f      	b.n	800b112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0d2:	4b69      	ldr	r3, [pc, #420]	@ (800b278 <UART_SetConfig+0xc2c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f003 0320 	and.w	r3, r3, #32
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d009      	beq.n	800b0f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0de:	4b66      	ldr	r3, [pc, #408]	@ (800b278 <UART_SetConfig+0xc2c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	08db      	lsrs	r3, r3, #3
 800b0e4:	f003 0303 	and.w	r3, r3, #3
 800b0e8:	4a64      	ldr	r2, [pc, #400]	@ (800b27c <UART_SetConfig+0xc30>)
 800b0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0f0:	e00f      	b.n	800b112 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b0f2:	4b62      	ldr	r3, [pc, #392]	@ (800b27c <UART_SetConfig+0xc30>)
 800b0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0f6:	e00c      	b.n	800b112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0f8:	4b61      	ldr	r3, [pc, #388]	@ (800b280 <UART_SetConfig+0xc34>)
 800b0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0fc:	e009      	b.n	800b112 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b104:	e005      	b.n	800b112 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b110:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b114:	2b00      	cmp	r3, #0
 800b116:	f000 80ea 	beq.w	800b2ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b11e:	4a55      	ldr	r2, [pc, #340]	@ (800b274 <UART_SetConfig+0xc28>)
 800b120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b124:	461a      	mov	r2, r3
 800b126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b128:	fbb3 f3f2 	udiv	r3, r3, r2
 800b12c:	005a      	lsls	r2, r3, #1
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	085b      	lsrs	r3, r3, #1
 800b134:	441a      	add	r2, r3
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b13e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b142:	2b0f      	cmp	r3, #15
 800b144:	d916      	bls.n	800b174 <UART_SetConfig+0xb28>
 800b146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b14c:	d212      	bcs.n	800b174 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b150:	b29b      	uxth	r3, r3
 800b152:	f023 030f 	bic.w	r3, r3, #15
 800b156:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15a:	085b      	lsrs	r3, r3, #1
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	f003 0307 	and.w	r3, r3, #7
 800b162:	b29a      	uxth	r2, r3
 800b164:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b166:	4313      	orrs	r3, r2
 800b168:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b170:	60da      	str	r2, [r3, #12]
 800b172:	e0bc      	b.n	800b2ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b17a:	e0b8      	b.n	800b2ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b17c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b180:	2b20      	cmp	r3, #32
 800b182:	dc4b      	bgt.n	800b21c <UART_SetConfig+0xbd0>
 800b184:	2b00      	cmp	r3, #0
 800b186:	f2c0 8087 	blt.w	800b298 <UART_SetConfig+0xc4c>
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	f200 8084 	bhi.w	800b298 <UART_SetConfig+0xc4c>
 800b190:	a201      	add	r2, pc, #4	@ (adr r2, 800b198 <UART_SetConfig+0xb4c>)
 800b192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b196:	bf00      	nop
 800b198:	0800b223 	.word	0x0800b223
 800b19c:	0800b22b 	.word	0x0800b22b
 800b1a0:	0800b299 	.word	0x0800b299
 800b1a4:	0800b299 	.word	0x0800b299
 800b1a8:	0800b233 	.word	0x0800b233
 800b1ac:	0800b299 	.word	0x0800b299
 800b1b0:	0800b299 	.word	0x0800b299
 800b1b4:	0800b299 	.word	0x0800b299
 800b1b8:	0800b243 	.word	0x0800b243
 800b1bc:	0800b299 	.word	0x0800b299
 800b1c0:	0800b299 	.word	0x0800b299
 800b1c4:	0800b299 	.word	0x0800b299
 800b1c8:	0800b299 	.word	0x0800b299
 800b1cc:	0800b299 	.word	0x0800b299
 800b1d0:	0800b299 	.word	0x0800b299
 800b1d4:	0800b299 	.word	0x0800b299
 800b1d8:	0800b253 	.word	0x0800b253
 800b1dc:	0800b299 	.word	0x0800b299
 800b1e0:	0800b299 	.word	0x0800b299
 800b1e4:	0800b299 	.word	0x0800b299
 800b1e8:	0800b299 	.word	0x0800b299
 800b1ec:	0800b299 	.word	0x0800b299
 800b1f0:	0800b299 	.word	0x0800b299
 800b1f4:	0800b299 	.word	0x0800b299
 800b1f8:	0800b299 	.word	0x0800b299
 800b1fc:	0800b299 	.word	0x0800b299
 800b200:	0800b299 	.word	0x0800b299
 800b204:	0800b299 	.word	0x0800b299
 800b208:	0800b299 	.word	0x0800b299
 800b20c:	0800b299 	.word	0x0800b299
 800b210:	0800b299 	.word	0x0800b299
 800b214:	0800b299 	.word	0x0800b299
 800b218:	0800b28b 	.word	0x0800b28b
 800b21c:	2b40      	cmp	r3, #64	@ 0x40
 800b21e:	d037      	beq.n	800b290 <UART_SetConfig+0xc44>
 800b220:	e03a      	b.n	800b298 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b222:	f7fc f9a5 	bl	8007570 <HAL_RCC_GetPCLK1Freq>
 800b226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b228:	e03c      	b.n	800b2a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b22a:	f7fc f9b7 	bl	800759c <HAL_RCC_GetPCLK2Freq>
 800b22e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b230:	e038      	b.n	800b2a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b236:	4618      	mov	r0, r3
 800b238:	f7fd fb9a 	bl	8008970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b240:	e030      	b.n	800b2a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b242:	f107 0318 	add.w	r3, r7, #24
 800b246:	4618      	mov	r0, r3
 800b248:	f7fd fce6 	bl	8008c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b250:	e028      	b.n	800b2a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b252:	4b09      	ldr	r3, [pc, #36]	@ (800b278 <UART_SetConfig+0xc2c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0320 	and.w	r3, r3, #32
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d012      	beq.n	800b284 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b25e:	4b06      	ldr	r3, [pc, #24]	@ (800b278 <UART_SetConfig+0xc2c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	08db      	lsrs	r3, r3, #3
 800b264:	f003 0303 	and.w	r3, r3, #3
 800b268:	4a04      	ldr	r2, [pc, #16]	@ (800b27c <UART_SetConfig+0xc30>)
 800b26a:	fa22 f303 	lsr.w	r3, r2, r3
 800b26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b270:	e018      	b.n	800b2a4 <UART_SetConfig+0xc58>
 800b272:	bf00      	nop
 800b274:	08011aa0 	.word	0x08011aa0
 800b278:	58024400 	.word	0x58024400
 800b27c:	03d09000 	.word	0x03d09000
 800b280:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b284:	4b24      	ldr	r3, [pc, #144]	@ (800b318 <UART_SetConfig+0xccc>)
 800b286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b288:	e00c      	b.n	800b2a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b28a:	4b24      	ldr	r3, [pc, #144]	@ (800b31c <UART_SetConfig+0xcd0>)
 800b28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b28e:	e009      	b.n	800b2a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b296:	e005      	b.n	800b2a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b298:	2300      	movs	r3, #0
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2a2:	bf00      	nop
    }

    if (pclk != 0U)
 800b2a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d021      	beq.n	800b2ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ae:	4a1c      	ldr	r2, [pc, #112]	@ (800b320 <UART_SetConfig+0xcd4>)
 800b2b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	085b      	lsrs	r3, r3, #1
 800b2c2:	441a      	add	r2, r3
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d0:	2b0f      	cmp	r3, #15
 800b2d2:	d909      	bls.n	800b2e8 <UART_SetConfig+0xc9c>
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2da:	d205      	bcs.n	800b2e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	60da      	str	r2, [r3, #12]
 800b2e6:	e002      	b.n	800b2ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	2200      	movs	r2, #0
 800b302:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2200      	movs	r2, #0
 800b308:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b30a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3748      	adds	r7, #72	@ 0x48
 800b312:	46bd      	mov	sp, r7
 800b314:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b318:	03d09000 	.word	0x03d09000
 800b31c:	003d0900 	.word	0x003d0900
 800b320:	08011aa0 	.word	0x08011aa0

0800b324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b330:	f003 0308 	and.w	r3, r3, #8
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00a      	beq.n	800b34e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	430a      	orrs	r2, r1
 800b34c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00a      	beq.n	800b370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	430a      	orrs	r2, r1
 800b36e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b374:	f003 0302 	and.w	r3, r3, #2
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00a      	beq.n	800b392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	430a      	orrs	r2, r1
 800b390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b396:	f003 0304 	and.w	r3, r3, #4
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00a      	beq.n	800b3b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	430a      	orrs	r2, r1
 800b3b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b8:	f003 0310 	and.w	r3, r3, #16
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00a      	beq.n	800b3d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b400:	2b00      	cmp	r3, #0
 800b402:	d01a      	beq.n	800b43a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	430a      	orrs	r2, r1
 800b418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b41e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b422:	d10a      	bne.n	800b43a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	430a      	orrs	r2, r1
 800b438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b43e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00a      	beq.n	800b45c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	430a      	orrs	r2, r1
 800b45a:	605a      	str	r2, [r3, #4]
  }
}
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b098      	sub	sp, #96	@ 0x60
 800b46c:	af02      	add	r7, sp, #8
 800b46e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b478:	f7f6 fd4a 	bl	8001f10 <HAL_GetTick>
 800b47c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0308 	and.w	r3, r3, #8
 800b488:	2b08      	cmp	r3, #8
 800b48a:	d12f      	bne.n	800b4ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b48c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b494:	2200      	movs	r2, #0
 800b496:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f88e 	bl	800b5bc <UART_WaitOnFlagUntilTimeout>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d022      	beq.n	800b4ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ae:	e853 3f00 	ldrex	r3, [r3]
 800b4b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4cc:	e841 2300 	strex	r3, r2, [r1]
 800b4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e6      	bne.n	800b4a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e063      	b.n	800b5b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0304 	and.w	r3, r3, #4
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	d149      	bne.n	800b58e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b502:	2200      	movs	r2, #0
 800b504:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 f857 	bl	800b5bc <UART_WaitOnFlagUntilTimeout>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d03c      	beq.n	800b58e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	623b      	str	r3, [r7, #32]
   return(result);
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b532:	633b      	str	r3, [r7, #48]	@ 0x30
 800b534:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b53a:	e841 2300 	strex	r3, r2, [r1]
 800b53e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e6      	bne.n	800b514 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3308      	adds	r3, #8
 800b54c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	e853 3f00 	ldrex	r3, [r3]
 800b554:	60fb      	str	r3, [r7, #12]
   return(result);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f023 0301 	bic.w	r3, r3, #1
 800b55c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3308      	adds	r3, #8
 800b564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b566:	61fa      	str	r2, [r7, #28]
 800b568:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56a:	69b9      	ldr	r1, [r7, #24]
 800b56c:	69fa      	ldr	r2, [r7, #28]
 800b56e:	e841 2300 	strex	r3, r2, [r1]
 800b572:	617b      	str	r3, [r7, #20]
   return(result);
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1e5      	bne.n	800b546 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2220      	movs	r2, #32
 800b57e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b58a:	2303      	movs	r3, #3
 800b58c:	e012      	b.n	800b5b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2220      	movs	r2, #32
 800b592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2220      	movs	r2, #32
 800b59a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3758      	adds	r7, #88	@ 0x58
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	603b      	str	r3, [r7, #0]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5cc:	e04f      	b.n	800b66e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d4:	d04b      	beq.n	800b66e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5d6:	f7f6 fc9b 	bl	8001f10 <HAL_GetTick>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	69ba      	ldr	r2, [r7, #24]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d302      	bcc.n	800b5ec <UART_WaitOnFlagUntilTimeout+0x30>
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e04e      	b.n	800b68e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0304 	and.w	r3, r3, #4
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d037      	beq.n	800b66e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2b80      	cmp	r3, #128	@ 0x80
 800b602:	d034      	beq.n	800b66e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2b40      	cmp	r3, #64	@ 0x40
 800b608:	d031      	beq.n	800b66e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	69db      	ldr	r3, [r3, #28]
 800b610:	f003 0308 	and.w	r3, r3, #8
 800b614:	2b08      	cmp	r3, #8
 800b616:	d110      	bne.n	800b63a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2208      	movs	r2, #8
 800b61e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 fa43 	bl	800baac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2208      	movs	r2, #8
 800b62a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e029      	b.n	800b68e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	69db      	ldr	r3, [r3, #28]
 800b640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b648:	d111      	bne.n	800b66e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f000 fa29 	bl	800baac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2220      	movs	r2, #32
 800b65e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e00f      	b.n	800b68e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	69da      	ldr	r2, [r3, #28]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	4013      	ands	r3, r2
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	bf0c      	ite	eq
 800b67e:	2301      	moveq	r3, #1
 800b680:	2300      	movne	r3, #0
 800b682:	b2db      	uxtb	r3, r3
 800b684:	461a      	mov	r2, r3
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d0a0      	beq.n	800b5ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b698:	b480      	push	{r7}
 800b69a:	b0a3      	sub	sp, #140	@ 0x8c
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	88fa      	ldrh	r2, [r7, #6]
 800b6b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	88fa      	ldrh	r2, [r7, #6]
 800b6b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6ca:	d10e      	bne.n	800b6ea <UART_Start_Receive_IT+0x52>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d105      	bne.n	800b6e0 <UART_Start_Receive_IT+0x48>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b6da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b6de:	e02d      	b.n	800b73c <UART_Start_Receive_IT+0xa4>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	22ff      	movs	r2, #255	@ 0xff
 800b6e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b6e8:	e028      	b.n	800b73c <UART_Start_Receive_IT+0xa4>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10d      	bne.n	800b70e <UART_Start_Receive_IT+0x76>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d104      	bne.n	800b704 <UART_Start_Receive_IT+0x6c>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	22ff      	movs	r2, #255	@ 0xff
 800b6fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b702:	e01b      	b.n	800b73c <UART_Start_Receive_IT+0xa4>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	227f      	movs	r2, #127	@ 0x7f
 800b708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b70c:	e016      	b.n	800b73c <UART_Start_Receive_IT+0xa4>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b716:	d10d      	bne.n	800b734 <UART_Start_Receive_IT+0x9c>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d104      	bne.n	800b72a <UART_Start_Receive_IT+0x92>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	227f      	movs	r2, #127	@ 0x7f
 800b724:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b728:	e008      	b.n	800b73c <UART_Start_Receive_IT+0xa4>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	223f      	movs	r2, #63	@ 0x3f
 800b72e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b732:	e003      	b.n	800b73c <UART_Start_Receive_IT+0xa4>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2222      	movs	r2, #34	@ 0x22
 800b748:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	3308      	adds	r3, #8
 800b752:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b756:	e853 3f00 	ldrex	r3, [r3]
 800b75a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b75c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b75e:	f043 0301 	orr.w	r3, r3, #1
 800b762:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3308      	adds	r3, #8
 800b76c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b770:	673a      	str	r2, [r7, #112]	@ 0x70
 800b772:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b776:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b778:	e841 2300 	strex	r3, r2, [r1]
 800b77c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b77e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e3      	bne.n	800b74c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b78c:	d14f      	bne.n	800b82e <UART_Start_Receive_IT+0x196>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b794:	88fa      	ldrh	r2, [r7, #6]
 800b796:	429a      	cmp	r2, r3
 800b798:	d349      	bcc.n	800b82e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7a2:	d107      	bne.n	800b7b4 <UART_Start_Receive_IT+0x11c>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d103      	bne.n	800b7b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4a47      	ldr	r2, [pc, #284]	@ (800b8cc <UART_Start_Receive_IT+0x234>)
 800b7b0:	675a      	str	r2, [r3, #116]	@ 0x74
 800b7b2:	e002      	b.n	800b7ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	4a46      	ldr	r2, [pc, #280]	@ (800b8d0 <UART_Start_Receive_IT+0x238>)
 800b7b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d01a      	beq.n	800b7f8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7ca:	e853 3f00 	ldrex	r3, [r3]
 800b7ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b7d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b7e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7e6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b7ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b7ec:	e841 2300 	strex	r3, r2, [r1]
 800b7f0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b7f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1e4      	bne.n	800b7c2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b80e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3308      	adds	r3, #8
 800b816:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b818:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b81a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b81e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e5      	bne.n	800b7f8 <UART_Start_Receive_IT+0x160>
 800b82c:	e046      	b.n	800b8bc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b836:	d107      	bne.n	800b848 <UART_Start_Receive_IT+0x1b0>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d103      	bne.n	800b848 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	4a24      	ldr	r2, [pc, #144]	@ (800b8d4 <UART_Start_Receive_IT+0x23c>)
 800b844:	675a      	str	r2, [r3, #116]	@ 0x74
 800b846:	e002      	b.n	800b84e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4a23      	ldr	r2, [pc, #140]	@ (800b8d8 <UART_Start_Receive_IT+0x240>)
 800b84c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d019      	beq.n	800b88a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85e:	e853 3f00 	ldrex	r3, [r3]
 800b862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b866:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b86a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	461a      	mov	r2, r3
 800b872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b874:	637b      	str	r3, [r7, #52]	@ 0x34
 800b876:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b878:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b87a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b87c:	e841 2300 	strex	r3, r2, [r1]
 800b880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1e6      	bne.n	800b856 <UART_Start_Receive_IT+0x1be>
 800b888:	e018      	b.n	800b8bc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	e853 3f00 	ldrex	r3, [r3]
 800b896:	613b      	str	r3, [r7, #16]
   return(result);
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	f043 0320 	orr.w	r3, r3, #32
 800b89e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b8a8:	623b      	str	r3, [r7, #32]
 800b8aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ac:	69f9      	ldr	r1, [r7, #28]
 800b8ae:	6a3a      	ldr	r2, [r7, #32]
 800b8b0:	e841 2300 	strex	r3, r2, [r1]
 800b8b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e6      	bne.n	800b88a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	378c      	adds	r7, #140	@ 0x8c
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	0800c561 	.word	0x0800c561
 800b8d0:	0800c1fd 	.word	0x0800c1fd
 800b8d4:	0800c045 	.word	0x0800c045
 800b8d8:	0800be8d 	.word	0x0800be8d

0800b8dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b096      	sub	sp, #88	@ 0x58
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	88fa      	ldrh	r2, [r7, #6]
 800b8f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2222      	movs	r2, #34	@ 0x22
 800b904:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d02d      	beq.n	800b96e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b918:	4a40      	ldr	r2, [pc, #256]	@ (800ba1c <UART_Start_Receive_DMA+0x140>)
 800b91a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b922:	4a3f      	ldr	r2, [pc, #252]	@ (800ba20 <UART_Start_Receive_DMA+0x144>)
 800b924:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b92c:	4a3d      	ldr	r2, [pc, #244]	@ (800ba24 <UART_Start_Receive_DMA+0x148>)
 800b92e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b936:	2200      	movs	r2, #0
 800b938:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3324      	adds	r3, #36	@ 0x24
 800b946:	4619      	mov	r1, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b94c:	461a      	mov	r2, r3
 800b94e:	88fb      	ldrh	r3, [r7, #6]
 800b950:	f7f7 f824 	bl	800299c <HAL_DMA_Start_IT>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d009      	beq.n	800b96e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2210      	movs	r2, #16
 800b95e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2220      	movs	r2, #32
 800b966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e051      	b.n	800ba12 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d018      	beq.n	800b9a8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b97e:	e853 3f00 	ldrex	r3, [r3]
 800b982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b98a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	461a      	mov	r2, r3
 800b992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b994:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b996:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b998:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b99a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b99c:	e841 2300 	strex	r3, r2, [r1]
 800b9a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b9a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1e6      	bne.n	800b976 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b2:	e853 3f00 	ldrex	r3, [r3]
 800b9b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ba:	f043 0301 	orr.w	r3, r3, #1
 800b9be:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b9c8:	637a      	str	r2, [r7, #52]	@ 0x34
 800b9ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b9ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9d0:	e841 2300 	strex	r3, r2, [r1]
 800b9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1e5      	bne.n	800b9a8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	3308      	adds	r3, #8
 800b9fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b9fc:	623a      	str	r2, [r7, #32]
 800b9fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba00:	69f9      	ldr	r1, [r7, #28]
 800ba02:	6a3a      	ldr	r2, [r7, #32]
 800ba04:	e841 2300 	strex	r3, r2, [r1]
 800ba08:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1e5      	bne.n	800b9dc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3758      	adds	r7, #88	@ 0x58
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	0800bc2b 	.word	0x0800bc2b
 800ba20:	0800bd53 	.word	0x0800bd53
 800ba24:	0800bd91 	.word	0x0800bd91

0800ba28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b08f      	sub	sp, #60	@ 0x3c
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba36:	6a3b      	ldr	r3, [r7, #32]
 800ba38:	e853 3f00 	ldrex	r3, [r3]
 800ba3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ba44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba50:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba56:	e841 2300 	strex	r3, r2, [r1]
 800ba5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1e6      	bne.n	800ba30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3308      	adds	r3, #8
 800ba68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	e853 3f00 	ldrex	r3, [r3]
 800ba70:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ba78:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	3308      	adds	r3, #8
 800ba80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba82:	61ba      	str	r2, [r7, #24]
 800ba84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba86:	6979      	ldr	r1, [r7, #20]
 800ba88:	69ba      	ldr	r2, [r7, #24]
 800ba8a:	e841 2300 	strex	r3, r2, [r1]
 800ba8e:	613b      	str	r3, [r7, #16]
   return(result);
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1e5      	bne.n	800ba62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2220      	movs	r2, #32
 800ba9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ba9e:	bf00      	nop
 800baa0:	373c      	adds	r7, #60	@ 0x3c
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
	...

0800baac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800baac:	b480      	push	{r7}
 800baae:	b095      	sub	sp, #84	@ 0x54
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800babc:	e853 3f00 	ldrex	r3, [r3]
 800bac0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	461a      	mov	r2, r3
 800bad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bad2:	643b      	str	r3, [r7, #64]	@ 0x40
 800bad4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bad8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bada:	e841 2300 	strex	r3, r2, [r1]
 800bade:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e6      	bne.n	800bab4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3308      	adds	r3, #8
 800baec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baee:	6a3b      	ldr	r3, [r7, #32]
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	61fb      	str	r3, [r7, #28]
   return(result);
 800baf6:	69fa      	ldr	r2, [r7, #28]
 800baf8:	4b1e      	ldr	r3, [pc, #120]	@ (800bb74 <UART_EndRxTransfer+0xc8>)
 800bafa:	4013      	ands	r3, r2
 800bafc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	3308      	adds	r3, #8
 800bb04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb0e:	e841 2300 	strex	r3, r2, [r1]
 800bb12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1e5      	bne.n	800bae6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d118      	bne.n	800bb54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	e853 3f00 	ldrex	r3, [r3]
 800bb2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	f023 0310 	bic.w	r3, r3, #16
 800bb36:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb40:	61bb      	str	r3, [r7, #24]
 800bb42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb44:	6979      	ldr	r1, [r7, #20]
 800bb46:	69ba      	ldr	r2, [r7, #24]
 800bb48:	e841 2300 	strex	r3, r2, [r1]
 800bb4c:	613b      	str	r3, [r7, #16]
   return(result);
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1e6      	bne.n	800bb22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2220      	movs	r2, #32
 800bb58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bb68:	bf00      	nop
 800bb6a:	3754      	adds	r7, #84	@ 0x54
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	effffffe 	.word	0xeffffffe

0800bb78 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b090      	sub	sp, #64	@ 0x40
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb84:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb8e:	d037      	beq.n	800bc00 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800bb90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3308      	adds	r3, #8
 800bb9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba2:	e853 3f00 	ldrex	r3, [r3]
 800bba6:	623b      	str	r3, [r7, #32]
   return(result);
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bbb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbb8:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbc0:	e841 2300 	strex	r3, r2, [r1]
 800bbc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1e5      	bne.n	800bb98 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	e853 3f00 	ldrex	r3, [r3]
 800bbd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbe0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbea:	61fb      	str	r3, [r7, #28]
 800bbec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbee:	69b9      	ldr	r1, [r7, #24]
 800bbf0:	69fa      	ldr	r2, [r7, #28]
 800bbf2:	e841 2300 	strex	r3, r2, [r1]
 800bbf6:	617b      	str	r3, [r7, #20]
   return(result);
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1e6      	bne.n	800bbcc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbfe:	e002      	b.n	800bc06 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800bc00:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bc02:	f7fe fcf1 	bl	800a5e8 <HAL_UART_TxCpltCallback>
}
 800bc06:	bf00      	nop
 800bc08:	3740      	adds	r7, #64	@ 0x40
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc1a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f7fe fced 	bl	800a5fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b09c      	sub	sp, #112	@ 0x70
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc36:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc40:	d071      	beq.n	800bd26 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800bc42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc44:	2200      	movs	r2, #0
 800bc46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc52:	e853 3f00 	ldrex	r3, [r3]
 800bc56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bc58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	461a      	mov	r2, r3
 800bc66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc68:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc6a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc70:	e841 2300 	strex	r3, r2, [r1]
 800bc74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bc76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1e6      	bne.n	800bc4a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3308      	adds	r3, #8
 800bc82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc86:	e853 3f00 	ldrex	r3, [r3]
 800bc8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc8e:	f023 0301 	bic.w	r3, r3, #1
 800bc92:	667b      	str	r3, [r7, #100]	@ 0x64
 800bc94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3308      	adds	r3, #8
 800bc9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bc9c:	647a      	str	r2, [r7, #68]	@ 0x44
 800bc9e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bca4:	e841 2300 	strex	r3, r2, [r1]
 800bca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bcaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1e5      	bne.n	800bc7c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcba:	e853 3f00 	ldrex	r3, [r3]
 800bcbe:	623b      	str	r3, [r7, #32]
   return(result);
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcc6:	663b      	str	r3, [r7, #96]	@ 0x60
 800bcc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3308      	adds	r3, #8
 800bcce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bcd0:	633a      	str	r2, [r7, #48]	@ 0x30
 800bcd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcd8:	e841 2300 	strex	r3, r2, [r1]
 800bcdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1e5      	bne.n	800bcb0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bce6:	2220      	movs	r2, #32
 800bce8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d118      	bne.n	800bd26 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	e853 3f00 	ldrex	r3, [r3]
 800bd00:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f023 0310 	bic.w	r3, r3, #16
 800bd08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd12:	61fb      	str	r3, [r7, #28]
 800bd14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd16:	69b9      	ldr	r1, [r7, #24]
 800bd18:	69fa      	ldr	r2, [r7, #28]
 800bd1a:	e841 2300 	strex	r3, r2, [r1]
 800bd1e:	617b      	str	r3, [r7, #20]
   return(result);
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1e6      	bne.n	800bcf4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd28:	2200      	movs	r2, #0
 800bd2a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d107      	bne.n	800bd44 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bd3e:	f7f5 f933 	bl	8000fa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd42:	e002      	b.n	800bd4a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800bd44:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bd46:	f7fe fc63 	bl	800a610 <HAL_UART_RxCpltCallback>
}
 800bd4a:	bf00      	nop
 800bd4c:	3770      	adds	r7, #112	@ 0x70
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd5e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2201      	movs	r2, #1
 800bd64:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d109      	bne.n	800bd82 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bd74:	085b      	lsrs	r3, r3, #1
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	4619      	mov	r1, r3
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f7f5 f914 	bl	8000fa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd80:	e002      	b.n	800bd88 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f7fe fc4e 	bl	800a624 <HAL_UART_RxHalfCpltCallback>
}
 800bd88:	bf00      	nop
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bda4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bdac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdb8:	2b80      	cmp	r3, #128	@ 0x80
 800bdba:	d109      	bne.n	800bdd0 <UART_DMAError+0x40>
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	2b21      	cmp	r3, #33	@ 0x21
 800bdc0:	d106      	bne.n	800bdd0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bdca:	6978      	ldr	r0, [r7, #20]
 800bdcc:	f7ff fe2c 	bl	800ba28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdda:	2b40      	cmp	r3, #64	@ 0x40
 800bddc:	d109      	bne.n	800bdf2 <UART_DMAError+0x62>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2b22      	cmp	r3, #34	@ 0x22
 800bde2:	d106      	bne.n	800bdf2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bdec:	6978      	ldr	r0, [r7, #20]
 800bdee:	f7ff fe5d 	bl	800baac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdf8:	f043 0210 	orr.w	r2, r3, #16
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be02:	6978      	ldr	r0, [r7, #20]
 800be04:	f7fe fc18 	bl	800a638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be08:	bf00      	nop
 800be0a:	3718      	adds	r7, #24
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7fe fc06 	bl	800a638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be2c:	bf00      	nop
 800be2e:	3710      	adds	r7, #16
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	e853 3f00 	ldrex	r3, [r3]
 800be48:	60bb      	str	r3, [r7, #8]
   return(result);
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be50:	61fb      	str	r3, [r7, #28]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	461a      	mov	r2, r3
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	61bb      	str	r3, [r7, #24]
 800be5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5e:	6979      	ldr	r1, [r7, #20]
 800be60:	69ba      	ldr	r2, [r7, #24]
 800be62:	e841 2300 	strex	r3, r2, [r1]
 800be66:	613b      	str	r3, [r7, #16]
   return(result);
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1e6      	bne.n	800be3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2220      	movs	r2, #32
 800be72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7fe fbb3 	bl	800a5e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be82:	bf00      	nop
 800be84:	3720      	adds	r7, #32
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
	...

0800be8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b09c      	sub	sp, #112	@ 0x70
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800be9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bea4:	2b22      	cmp	r3, #34	@ 0x22
 800bea6:	f040 80be 	bne.w	800c026 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beb0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800beb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800beb8:	b2d9      	uxtb	r1, r3
 800beba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bec4:	400a      	ands	r2, r1
 800bec6:	b2d2      	uxtb	r2, r2
 800bec8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bece:	1c5a      	adds	r2, r3, #1
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800beda:	b29b      	uxth	r3, r3
 800bedc:	3b01      	subs	r3, #1
 800bede:	b29a      	uxth	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800beec:	b29b      	uxth	r3, r3
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f040 80a1 	bne.w	800c036 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800befc:	e853 3f00 	ldrex	r3, [r3]
 800bf00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf08:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf1a:	e841 2300 	strex	r3, r2, [r1]
 800bf1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1e6      	bne.n	800bef4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf30:	e853 3f00 	ldrex	r3, [r3]
 800bf34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf38:	f023 0301 	bic.w	r3, r3, #1
 800bf3c:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3308      	adds	r3, #8
 800bf44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bf46:	647a      	str	r2, [r7, #68]	@ 0x44
 800bf48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf4e:	e841 2300 	strex	r3, r2, [r1]
 800bf52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1e5      	bne.n	800bf26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a33      	ldr	r2, [pc, #204]	@ (800c040 <UART_RxISR_8BIT+0x1b4>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d01f      	beq.n	800bfb8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d018      	beq.n	800bfb8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	623b      	str	r3, [r7, #32]
   return(result);
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bf9a:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfa4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfac:	e841 2300 	strex	r3, r2, [r1]
 800bfb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1e6      	bne.n	800bf86 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d12e      	bne.n	800c01e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	e853 3f00 	ldrex	r3, [r3]
 800bfd2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0310 	bic.w	r3, r3, #16
 800bfda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfe4:	61fb      	str	r3, [r7, #28]
 800bfe6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	69b9      	ldr	r1, [r7, #24]
 800bfea:	69fa      	ldr	r2, [r7, #28]
 800bfec:	e841 2300 	strex	r3, r2, [r1]
 800bff0:	617b      	str	r3, [r7, #20]
   return(result);
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e6      	bne.n	800bfc6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	f003 0310 	and.w	r3, r3, #16
 800c002:	2b10      	cmp	r3, #16
 800c004:	d103      	bne.n	800c00e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2210      	movs	r2, #16
 800c00c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c014:	4619      	mov	r1, r3
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f7f4 ffc6 	bl	8000fa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c01c:	e00b      	b.n	800c036 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7fe faf6 	bl	800a610 <HAL_UART_RxCpltCallback>
}
 800c024:	e007      	b.n	800c036 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	699a      	ldr	r2, [r3, #24]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f042 0208 	orr.w	r2, r2, #8
 800c034:	619a      	str	r2, [r3, #24]
}
 800c036:	bf00      	nop
 800c038:	3770      	adds	r7, #112	@ 0x70
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	58000c00 	.word	0x58000c00

0800c044 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b09c      	sub	sp, #112	@ 0x70
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c052:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c05c:	2b22      	cmp	r3, #34	@ 0x22
 800c05e:	f040 80be 	bne.w	800c1de <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c068:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c070:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c072:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c076:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c07a:	4013      	ands	r3, r2
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c080:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c086:	1c9a      	adds	r2, r3, #2
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c092:	b29b      	uxth	r3, r3
 800c094:	3b01      	subs	r3, #1
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f040 80a1 	bne.w	800c1ee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0b4:	e853 3f00 	ldrex	r3, [r3]
 800c0b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c0ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0c0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800c0cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c0d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c0d2:	e841 2300 	strex	r3, r2, [r1]
 800c0d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c0d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1e6      	bne.n	800c0ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0e8:	e853 3f00 	ldrex	r3, [r3]
 800c0ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f0:	f023 0301 	bic.w	r3, r3, #1
 800c0f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	3308      	adds	r3, #8
 800c0fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c0fe:	643a      	str	r2, [r7, #64]	@ 0x40
 800c100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c102:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c104:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c106:	e841 2300 	strex	r3, r2, [r1]
 800c10a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1e5      	bne.n	800c0de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2220      	movs	r2, #32
 800c116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4a33      	ldr	r2, [pc, #204]	@ (800c1f8 <UART_RxISR_16BIT+0x1b4>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d01f      	beq.n	800c170 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d018      	beq.n	800c170 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c144:	6a3b      	ldr	r3, [r7, #32]
 800c146:	e853 3f00 	ldrex	r3, [r3]
 800c14a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c152:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	461a      	mov	r2, r3
 800c15a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c15c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c15e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c164:	e841 2300 	strex	r3, r2, [r1]
 800c168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d1e6      	bne.n	800c13e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c174:	2b01      	cmp	r3, #1
 800c176:	d12e      	bne.n	800c1d6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	e853 3f00 	ldrex	r3, [r3]
 800c18a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	f023 0310 	bic.w	r3, r3, #16
 800c192:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	461a      	mov	r2, r3
 800c19a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c19c:	61bb      	str	r3, [r7, #24]
 800c19e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a0:	6979      	ldr	r1, [r7, #20]
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	e841 2300 	strex	r3, r2, [r1]
 800c1a8:	613b      	str	r3, [r7, #16]
   return(result);
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1e6      	bne.n	800c17e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	f003 0310 	and.w	r3, r3, #16
 800c1ba:	2b10      	cmp	r3, #16
 800c1bc:	d103      	bne.n	800c1c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2210      	movs	r2, #16
 800c1c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7f4 feea 	bl	8000fa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1d4:	e00b      	b.n	800c1ee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7fe fa1a 	bl	800a610 <HAL_UART_RxCpltCallback>
}
 800c1dc:	e007      	b.n	800c1ee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	699a      	ldr	r2, [r3, #24]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f042 0208 	orr.w	r2, r2, #8
 800c1ec:	619a      	str	r2, [r3, #24]
}
 800c1ee:	bf00      	nop
 800c1f0:	3770      	adds	r7, #112	@ 0x70
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	58000c00 	.word	0x58000c00

0800c1fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b0ac      	sub	sp, #176	@ 0xb0
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c20a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	69db      	ldr	r3, [r3, #28]
 800c214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c232:	2b22      	cmp	r3, #34	@ 0x22
 800c234:	f040 8181 	bne.w	800c53a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c23e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c242:	e124      	b.n	800c48e <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c24e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c252:	b2d9      	uxtb	r1, r3
 800c254:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c258:	b2da      	uxtb	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c25e:	400a      	ands	r2, r1
 800c260:	b2d2      	uxtb	r2, r2
 800c262:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c274:	b29b      	uxth	r3, r3
 800c276:	3b01      	subs	r3, #1
 800c278:	b29a      	uxth	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c28a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c28e:	f003 0307 	and.w	r3, r3, #7
 800c292:	2b00      	cmp	r3, #0
 800c294:	d053      	beq.n	800c33e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d011      	beq.n	800c2c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c2a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00b      	beq.n	800c2c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2bc:	f043 0201 	orr.w	r2, r3, #1
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2ca:	f003 0302 	and.w	r3, r3, #2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d011      	beq.n	800c2f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c2d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c2d6:	f003 0301 	and.w	r3, r3, #1
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00b      	beq.n	800c2f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2ec:	f043 0204 	orr.w	r2, r3, #4
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2fa:	f003 0304 	and.w	r3, r3, #4
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d011      	beq.n	800c326 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00b      	beq.n	800c326 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2204      	movs	r2, #4
 800c314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c31c:	f043 0202 	orr.w	r2, r3, #2
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d006      	beq.n	800c33e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f7fe f981 	bl	800a638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c344:	b29b      	uxth	r3, r3
 800c346:	2b00      	cmp	r3, #0
 800c348:	f040 80a1 	bne.w	800c48e <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c352:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c354:	e853 3f00 	ldrex	r3, [r3]
 800c358:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c35a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c35c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	461a      	mov	r2, r3
 800c36a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c36e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c370:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c372:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c374:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c376:	e841 2300 	strex	r3, r2, [r1]
 800c37a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c37c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1e4      	bne.n	800c34c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3308      	adds	r3, #8
 800c388:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c38c:	e853 3f00 	ldrex	r3, [r3]
 800c390:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c392:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c394:	4b6f      	ldr	r3, [pc, #444]	@ (800c554 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c396:	4013      	ands	r3, r2
 800c398:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c3a6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c3a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3aa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c3ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c3ae:	e841 2300 	strex	r3, r2, [r1]
 800c3b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c3b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1e3      	bne.n	800c382 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2220      	movs	r2, #32
 800c3be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a61      	ldr	r2, [pc, #388]	@ (800c558 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d021      	beq.n	800c41c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d01a      	beq.n	800c41c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3ee:	e853 3f00 	ldrex	r3, [r3]
 800c3f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c3fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	461a      	mov	r2, r3
 800c404:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c408:	657b      	str	r3, [r7, #84]	@ 0x54
 800c40a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c40e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c410:	e841 2300 	strex	r3, r2, [r1]
 800c414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1e4      	bne.n	800c3e6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c420:	2b01      	cmp	r3, #1
 800c422:	d130      	bne.n	800c486 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c432:	e853 3f00 	ldrex	r3, [r3]
 800c436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43a:	f023 0310 	bic.w	r3, r3, #16
 800c43e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	461a      	mov	r2, r3
 800c448:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c44c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c44e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c452:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c454:	e841 2300 	strex	r3, r2, [r1]
 800c458:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1e4      	bne.n	800c42a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	69db      	ldr	r3, [r3, #28]
 800c466:	f003 0310 	and.w	r3, r3, #16
 800c46a:	2b10      	cmp	r3, #16
 800c46c:	d103      	bne.n	800c476 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2210      	movs	r2, #16
 800c474:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c47c:	4619      	mov	r1, r3
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7f4 fd92 	bl	8000fa8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c484:	e00e      	b.n	800c4a4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7fe f8c2 	bl	800a610 <HAL_UART_RxCpltCallback>
        break;
 800c48c:	e00a      	b.n	800c4a4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c48e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c492:	2b00      	cmp	r3, #0
 800c494:	d006      	beq.n	800c4a4 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800c496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c49a:	f003 0320 	and.w	r3, r3, #32
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f47f aed0 	bne.w	800c244 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4aa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c4ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d049      	beq.n	800c54a <UART_RxISR_8BIT_FIFOEN+0x34e>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c4bc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d242      	bcs.n	800c54a <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	3308      	adds	r3, #8
 800c4ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4cc:	6a3b      	ldr	r3, [r7, #32]
 800c4ce:	e853 3f00 	ldrex	r3, [r3]
 800c4d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c4da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	3308      	adds	r3, #8
 800c4e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c4e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c4ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4f0:	e841 2300 	strex	r3, r2, [r1]
 800c4f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1e3      	bne.n	800c4c4 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4a17      	ldr	r2, [pc, #92]	@ (800c55c <UART_RxISR_8BIT_FIFOEN+0x360>)
 800c500:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	e853 3f00 	ldrex	r3, [r3]
 800c50e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	f043 0320 	orr.w	r3, r3, #32
 800c516:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c524:	61bb      	str	r3, [r7, #24]
 800c526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c528:	6979      	ldr	r1, [r7, #20]
 800c52a:	69ba      	ldr	r2, [r7, #24]
 800c52c:	e841 2300 	strex	r3, r2, [r1]
 800c530:	613b      	str	r3, [r7, #16]
   return(result);
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1e4      	bne.n	800c502 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c538:	e007      	b.n	800c54a <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	699a      	ldr	r2, [r3, #24]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f042 0208 	orr.w	r2, r2, #8
 800c548:	619a      	str	r2, [r3, #24]
}
 800c54a:	bf00      	nop
 800c54c:	37b0      	adds	r7, #176	@ 0xb0
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	effffffe 	.word	0xeffffffe
 800c558:	58000c00 	.word	0x58000c00
 800c55c:	0800be8d 	.word	0x0800be8d

0800c560 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b0ae      	sub	sp, #184	@ 0xb8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c56e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	69db      	ldr	r3, [r3, #28]
 800c578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c596:	2b22      	cmp	r3, #34	@ 0x22
 800c598:	f040 8185 	bne.w	800c8a6 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c5a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c5a6:	e128      	b.n	800c7fa <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c5ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c5be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c5ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5d0:	1c9a      	adds	r2, r3, #2
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	69db      	ldr	r3, [r3, #28]
 800c5ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c5f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c5f6:	f003 0307 	and.w	r3, r3, #7
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d053      	beq.n	800c6a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d011      	beq.n	800c62e <UART_RxISR_16BIT_FIFOEN+0xce>
 800c60a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c60e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00b      	beq.n	800c62e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2201      	movs	r2, #1
 800c61c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c624:	f043 0201 	orr.w	r2, r3, #1
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c62e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c632:	f003 0302 	and.w	r3, r3, #2
 800c636:	2b00      	cmp	r3, #0
 800c638:	d011      	beq.n	800c65e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c63a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00b      	beq.n	800c65e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2202      	movs	r2, #2
 800c64c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c654:	f043 0204 	orr.w	r2, r3, #4
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c65e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c662:	f003 0304 	and.w	r3, r3, #4
 800c666:	2b00      	cmp	r3, #0
 800c668:	d011      	beq.n	800c68e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c66a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c66e:	f003 0301 	and.w	r3, r3, #1
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00b      	beq.n	800c68e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2204      	movs	r2, #4
 800c67c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c684:	f043 0202 	orr.w	r2, r3, #2
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c694:	2b00      	cmp	r3, #0
 800c696:	d006      	beq.n	800c6a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7fd ffcd 	bl	800a638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f040 80a3 	bne.w	800c7fa <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6bc:	e853 3f00 	ldrex	r3, [r3]
 800c6c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c6c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c6c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c6da:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c6de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c6e2:	e841 2300 	strex	r3, r2, [r1]
 800c6e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c6e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1e2      	bne.n	800c6b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3308      	adds	r3, #8
 800c6f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6f8:	e853 3f00 	ldrex	r3, [r3]
 800c6fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c6fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c700:	4b6f      	ldr	r3, [pc, #444]	@ (800c8c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c702:	4013      	ands	r3, r2
 800c704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3308      	adds	r3, #8
 800c70e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c712:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c714:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c716:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c718:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c71a:	e841 2300 	strex	r3, r2, [r1]
 800c71e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1e3      	bne.n	800c6ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2220      	movs	r2, #32
 800c72a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a61      	ldr	r2, [pc, #388]	@ (800c8c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d021      	beq.n	800c788 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d01a      	beq.n	800c788 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c75a:	e853 3f00 	ldrex	r3, [r3]
 800c75e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c762:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	461a      	mov	r2, r3
 800c770:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c774:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c776:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c778:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c77a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c77c:	e841 2300 	strex	r3, r2, [r1]
 800c780:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1e4      	bne.n	800c752 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d130      	bne.n	800c7f2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79e:	e853 3f00 	ldrex	r3, [r3]
 800c7a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a6:	f023 0310 	bic.w	r3, r3, #16
 800c7aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c7b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c7be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7c0:	e841 2300 	strex	r3, r2, [r1]
 800c7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1e4      	bne.n	800c796 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	69db      	ldr	r3, [r3, #28]
 800c7d2:	f003 0310 	and.w	r3, r3, #16
 800c7d6:	2b10      	cmp	r3, #16
 800c7d8:	d103      	bne.n	800c7e2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2210      	movs	r2, #16
 800c7e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7f4 fbdc 	bl	8000fa8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c7f0:	e00e      	b.n	800c810 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7fd ff0c 	bl	800a610 <HAL_UART_RxCpltCallback>
        break;
 800c7f8:	e00a      	b.n	800c810 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c7fa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d006      	beq.n	800c810 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800c802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c806:	f003 0320 	and.w	r3, r3, #32
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f47f aecc 	bne.w	800c5a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c816:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c81a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d049      	beq.n	800c8b6 <UART_RxISR_16BIT_FIFOEN+0x356>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c828:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d242      	bcs.n	800c8b6 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3308      	adds	r3, #8
 800c836:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83a:	e853 3f00 	ldrex	r3, [r3]
 800c83e:	623b      	str	r3, [r7, #32]
   return(result);
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c846:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	3308      	adds	r3, #8
 800c850:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c854:	633a      	str	r2, [r7, #48]	@ 0x30
 800c856:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c858:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c85a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c85c:	e841 2300 	strex	r3, r2, [r1]
 800c860:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1e3      	bne.n	800c830 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4a17      	ldr	r2, [pc, #92]	@ (800c8c8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800c86c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	e853 3f00 	ldrex	r3, [r3]
 800c87a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f043 0320 	orr.w	r3, r3, #32
 800c882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	461a      	mov	r2, r3
 800c88c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c890:	61fb      	str	r3, [r7, #28]
 800c892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c894:	69b9      	ldr	r1, [r7, #24]
 800c896:	69fa      	ldr	r2, [r7, #28]
 800c898:	e841 2300 	strex	r3, r2, [r1]
 800c89c:	617b      	str	r3, [r7, #20]
   return(result);
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1e4      	bne.n	800c86e <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c8a4:	e007      	b.n	800c8b6 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	699a      	ldr	r2, [r3, #24]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f042 0208 	orr.w	r2, r2, #8
 800c8b4:	619a      	str	r2, [r3, #24]
}
 800c8b6:	bf00      	nop
 800c8b8:	37b8      	adds	r7, #184	@ 0xb8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	effffffe 	.word	0xeffffffe
 800c8c4:	58000c00 	.word	0x58000c00
 800c8c8:	0800c045 	.word	0x0800c045

0800c8cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c8e8:	bf00      	nop
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c916:	2b01      	cmp	r3, #1
 800c918:	d101      	bne.n	800c91e <HAL_UARTEx_DisableFifoMode+0x16>
 800c91a:	2302      	movs	r3, #2
 800c91c:	e027      	b.n	800c96e <HAL_UARTEx_DisableFifoMode+0x66>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2224      	movs	r2, #36	@ 0x24
 800c92a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f022 0201 	bic.w	r2, r2, #1
 800c944:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c94c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2220      	movs	r2, #32
 800c960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b084      	sub	sp, #16
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d101      	bne.n	800c992 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c98e:	2302      	movs	r3, #2
 800c990:	e02d      	b.n	800c9ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2201      	movs	r2, #1
 800c996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2224      	movs	r2, #36	@ 0x24
 800c99e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f022 0201 	bic.w	r2, r2, #1
 800c9b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	430a      	orrs	r2, r1
 800c9cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f8a4 	bl	800cb1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2220      	movs	r2, #32
 800c9e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b084      	sub	sp, #16
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
 800c9fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d101      	bne.n	800ca0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca0a:	2302      	movs	r3, #2
 800ca0c:	e02d      	b.n	800ca6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2224      	movs	r2, #36	@ 0x24
 800ca1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f022 0201 	bic.w	r2, r2, #1
 800ca34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	430a      	orrs	r2, r1
 800ca48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 f866 	bl	800cb1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2220      	movs	r2, #32
 800ca5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b08c      	sub	sp, #48	@ 0x30
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	60f8      	str	r0, [r7, #12]
 800ca7a:	60b9      	str	r1, [r7, #8]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca86:	2b20      	cmp	r3, #32
 800ca88:	d142      	bne.n	800cb10 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d002      	beq.n	800ca96 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ca90:	88fb      	ldrh	r3, [r7, #6]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d101      	bne.n	800ca9a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e03b      	b.n	800cb12 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800caa6:	88fb      	ldrh	r3, [r7, #6]
 800caa8:	461a      	mov	r2, r3
 800caaa:	68b9      	ldr	r1, [r7, #8]
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f7fe ff15 	bl	800b8dc <UART_Start_Receive_DMA>
 800cab2:	4603      	mov	r3, r0
 800cab4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800cab8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d124      	bne.n	800cb0a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d11d      	bne.n	800cb04 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2210      	movs	r2, #16
 800cace:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	e853 3f00 	ldrex	r3, [r3]
 800cadc:	617b      	str	r3, [r7, #20]
   return(result);
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	f043 0310 	orr.w	r3, r3, #16
 800cae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	461a      	mov	r2, r3
 800caec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caee:	627b      	str	r3, [r7, #36]	@ 0x24
 800caf0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf2:	6a39      	ldr	r1, [r7, #32]
 800caf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caf6:	e841 2300 	strex	r3, r2, [r1]
 800cafa:	61fb      	str	r3, [r7, #28]
   return(result);
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1e6      	bne.n	800cad0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800cb02:	e002      	b.n	800cb0a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800cb04:	2301      	movs	r3, #1
 800cb06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800cb0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb0e:	e000      	b.n	800cb12 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cb10:	2302      	movs	r3, #2
  }
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3730      	adds	r7, #48	@ 0x30
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
	...

0800cb1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b085      	sub	sp, #20
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d108      	bne.n	800cb3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2201      	movs	r2, #1
 800cb38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb3c:	e031      	b.n	800cba2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb3e:	2310      	movs	r3, #16
 800cb40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb42:	2310      	movs	r3, #16
 800cb44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	0e5b      	lsrs	r3, r3, #25
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	f003 0307 	and.w	r3, r3, #7
 800cb54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	0f5b      	lsrs	r3, r3, #29
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	f003 0307 	and.w	r3, r3, #7
 800cb64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb66:	7bbb      	ldrb	r3, [r7, #14]
 800cb68:	7b3a      	ldrb	r2, [r7, #12]
 800cb6a:	4911      	ldr	r1, [pc, #68]	@ (800cbb0 <UARTEx_SetNbDataToProcess+0x94>)
 800cb6c:	5c8a      	ldrb	r2, [r1, r2]
 800cb6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb72:	7b3a      	ldrb	r2, [r7, #12]
 800cb74:	490f      	ldr	r1, [pc, #60]	@ (800cbb4 <UARTEx_SetNbDataToProcess+0x98>)
 800cb76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb78:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
 800cb86:	7b7a      	ldrb	r2, [r7, #13]
 800cb88:	4909      	ldr	r1, [pc, #36]	@ (800cbb0 <UARTEx_SetNbDataToProcess+0x94>)
 800cb8a:	5c8a      	ldrb	r2, [r1, r2]
 800cb8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb90:	7b7a      	ldrb	r2, [r7, #13]
 800cb92:	4908      	ldr	r1, [pc, #32]	@ (800cbb4 <UARTEx_SetNbDataToProcess+0x98>)
 800cb94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb96:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cba2:	bf00      	nop
 800cba4:	3714      	adds	r7, #20
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	08011ab8 	.word	0x08011ab8
 800cbb4:	08011ac0 	.word	0x08011ac0

0800cbb8 <startUartReception>:

}

// Start DMA reception with idle line detection
void startUartReception(UART_HandleTypeDef *huart)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 800cbc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cbc4:	4948      	ldr	r1, [pc, #288]	@ (800cce8 <startUartReception+0x130>)
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7ff ff53 	bl	800ca72 <HAL_UARTEx_ReceiveToIdle_DMA>
	// Optionally disable half-transfer interrupt to reduce overhead
	__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a45      	ldr	r2, [pc, #276]	@ (800ccec <startUartReception+0x134>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d068      	beq.n	800ccac <startUartReception+0xf4>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a43      	ldr	r2, [pc, #268]	@ (800ccf0 <startUartReception+0x138>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d061      	beq.n	800ccac <startUartReception+0xf4>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a40      	ldr	r2, [pc, #256]	@ (800ccf4 <startUartReception+0x13c>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d05a      	beq.n	800ccac <startUartReception+0xf4>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a3e      	ldr	r2, [pc, #248]	@ (800ccf8 <startUartReception+0x140>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d053      	beq.n	800ccac <startUartReception+0xf4>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a3b      	ldr	r2, [pc, #236]	@ (800ccfc <startUartReception+0x144>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d04c      	beq.n	800ccac <startUartReception+0xf4>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a39      	ldr	r2, [pc, #228]	@ (800cd00 <startUartReception+0x148>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d045      	beq.n	800ccac <startUartReception+0xf4>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a36      	ldr	r2, [pc, #216]	@ (800cd04 <startUartReception+0x14c>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d03e      	beq.n	800ccac <startUartReception+0xf4>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a34      	ldr	r2, [pc, #208]	@ (800cd08 <startUartReception+0x150>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d037      	beq.n	800ccac <startUartReception+0xf4>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a31      	ldr	r2, [pc, #196]	@ (800cd0c <startUartReception+0x154>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d030      	beq.n	800ccac <startUartReception+0xf4>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a2f      	ldr	r2, [pc, #188]	@ (800cd10 <startUartReception+0x158>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d029      	beq.n	800ccac <startUartReception+0xf4>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a2c      	ldr	r2, [pc, #176]	@ (800cd14 <startUartReception+0x15c>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d022      	beq.n	800ccac <startUartReception+0xf4>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a2a      	ldr	r2, [pc, #168]	@ (800cd18 <startUartReception+0x160>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d01b      	beq.n	800ccac <startUartReception+0xf4>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a27      	ldr	r2, [pc, #156]	@ (800cd1c <startUartReception+0x164>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d014      	beq.n	800ccac <startUartReception+0xf4>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a25      	ldr	r2, [pc, #148]	@ (800cd20 <startUartReception+0x168>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00d      	beq.n	800ccac <startUartReception+0xf4>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a22      	ldr	r2, [pc, #136]	@ (800cd24 <startUartReception+0x16c>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d006      	beq.n	800ccac <startUartReception+0xf4>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a20      	ldr	r2, [pc, #128]	@ (800cd28 <startUartReception+0x170>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d10c      	bne.n	800ccc6 <startUartReception+0x10e>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f022 0208 	bic.w	r2, r2, #8
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	e00c      	b.n	800cce0 <startUartReception+0x128>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f022 0204 	bic.w	r2, r2, #4
 800ccdc:	601a      	str	r2, [r3, #0]
}
 800ccde:	bf00      	nop
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	24000898 	.word	0x24000898
 800ccec:	40020010 	.word	0x40020010
 800ccf0:	40020028 	.word	0x40020028
 800ccf4:	40020040 	.word	0x40020040
 800ccf8:	40020058 	.word	0x40020058
 800ccfc:	40020070 	.word	0x40020070
 800cd00:	40020088 	.word	0x40020088
 800cd04:	400200a0 	.word	0x400200a0
 800cd08:	400200b8 	.word	0x400200b8
 800cd0c:	40020410 	.word	0x40020410
 800cd10:	40020428 	.word	0x40020428
 800cd14:	40020440 	.word	0x40020440
 800cd18:	40020458 	.word	0x40020458
 800cd1c:	40020470 	.word	0x40020470
 800cd20:	40020488 	.word	0x40020488
 800cd24:	400204a0 	.word	0x400204a0
 800cd28:	400204b8 	.word	0x400204b8

0800cd2c <Sensor_SmartWatch_init>:
static uint32_t app_ir_analysis_buffer[MAX30102_WINDOW_SIZE];
static uint32_t app_red_analysis_buffer[MAX30102_WINDOW_SIZE];
static int app_buffer_fill_count = 0; // Current number of samples in our app_buffers

void Sensor_SmartWatch_init(SmartWatchData_t *SmartWatchData)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
	// 1) Zero entire struct to ensure all numeric fields are 0 / pointers NULL
	memset(SmartWatchData, 0, sizeof(*SmartWatchData));
 800cd34:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800cd38:	2100      	movs	r1, #0
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f002 fe03 	bl	800f946 <memset>

	// 2) Explicitly set “valid” flags to false (0)
	SmartWatchData->bmp_data_valid = 0;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	641a      	str	r2, [r3, #64]	@ 0x40
	SmartWatchData->mpu_data_valid = 0;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

	// 3) Call sensor-specific init routines,
	startUartReception(&BLE_UART);
 800cd4e:	480b      	ldr	r0, [pc, #44]	@ (800cd7c <Sensor_SmartWatch_init+0x50>)
 800cd50:	f7ff ff32 	bl	800cbb8 <startUartReception>
	Sensor_BMP280_init(&SmartWatchData->bmp280);     // initialize BMP280 driver
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f000 f910 	bl	800cf7c <Sensor_BMP280_init>
	Sensor_GNSS_Init(SmartWatchData, &GNSS_UART);       // init GNSS data handle
 800cd5c:	4908      	ldr	r1, [pc, #32]	@ (800cd80 <Sensor_SmartWatch_init+0x54>)
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f84b 	bl	800cdfa <Sensor_GNSS_Init>
	Sensor_MAX30102_init(&SmartWatchData->max30102, &MAX30102_I2C); //800f is default sampling rate for config
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800cd6a:	4906      	ldr	r1, [pc, #24]	@ (800cd84 <Sensor_SmartWatch_init+0x58>)
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 f999 	bl	800d0a4 <Sensor_MAX30102_init>
}
 800cd72:	bf00      	nop
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	240004f8 	.word	0x240004f8
 800cd80:	2400058c 	.word	0x2400058c
 800cd84:	240001f4 	.word	0x240001f4

0800cd88 <Sensor_SmartWatch_update>:

void Sensor_SmartWatch_update(SmartWatchData_t *SmartWatchData)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
	Sensor_BMP280_read_data(SmartWatchData);
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 f919 	bl	800cfc8 <Sensor_BMP280_read_data>
	Sensor_GNSS_Update(SmartWatchData);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f85c 	bl	800ce54 <Sensor_GNSS_Update>
	//Sensor_MPU6500_read_data(SmartWatchData);
	Sensor_max30102_Update(SmartWatchData);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 f804 	bl	800cdaa <Sensor_max30102_Update>
}
 800cda2:	bf00      	nop
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <Sensor_max30102_Update>:

//------------------------------------------------------------------------------
// Call this from your main loop (or a scheduler) to refresh GPS data at ~1 Hz
//------------------------------------------------------------------------------
void Sensor_max30102_Update(SmartWatchData_t *sw)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b082      	sub	sp, #8
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
	if (max30102_has_interrupt(&sw->max30102))
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f001 fd94 	bl	800e8e6 <max30102_has_interrupt>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d005      	beq.n	800cdd0 <Sensor_max30102_Update+0x26>
	{
        max30102_interrupt_handler(&sw->max30102); // This populates sw->max30102._ir_samples etc.
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f001 fd98 	bl	800e900 <max30102_interrupt_handler>
////
////             }
//
//        }
	}
    max30102_read_fifo(&sw->max30102);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f001 fef9 	bl	800ebce <max30102_read_fifo>

}
 800cddc:	bf00      	nop
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <max30102_plot>:

void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
//	printf("ir : %lu, red : %lu \r\n", ir_sample, red_sample);
}
 800cdee:	bf00      	nop
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <Sensor_GNSS_Init>:

//------------------------------------------------------------------------------
// Call this once at startup to wire up the GNSS inside your SmartWatchData
//------------------------------------------------------------------------------
void Sensor_GNSS_Init(SmartWatchData_t *sw, UART_HandleTypeDef *huart)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b082      	sub	sp, #8
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	6039      	str	r1, [r7, #0]
	// 1) initialize the GNSS handle inside sw
	GNSS_Init(&sw->gps_data, huart);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ce0a:	6839      	ldr	r1, [r7, #0]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 fa4b 	bl	800d2a8 <GNSS_Init>

	// 2) load your base configuration (turns off NMEA, enables UBX + Galileo)
	GNSS_LoadConfig(&sw->gps_data);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f000 fe15 	bl	800da48 <GNSS_LoadConfig>
	HAL_Delay(200);
 800ce1e:	20c8      	movs	r0, #200	@ 0xc8
 800ce20:	f7f5 f882 	bl	8001f28 <HAL_Delay>

	// 3) apply the “stationary” dynamic model for best static accuracy
	GNSS_SetMode(&sw->gps_data, Stationary);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ce2a:	2101      	movs	r1, #1
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f000 fb25 	bl	800d47c <GNSS_SetMode>
	HAL_Delay(100);
 800ce32:	2064      	movs	r0, #100	@ 0x64
 800ce34:	f7f5 f878 	bl	8001f28 <HAL_Delay>

	// 4) seed your 1 Hz timer
	sw->GNSS_Timer = HAL_GetTick();
 800ce38:	f7f5 f86a 	bl	8001f10 <HAL_GetTick>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8

	// mark invalid until we get a fix
	sw->gps_data.fixType = 0;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 22bf 	strb.w	r2, [r3, #703]	@ 0x2bf
}
 800ce4c:	bf00      	nop
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <Sensor_GNSS_Update>:

//------------------------------------------------------------------------------
// Call this from your main loop (or a scheduler) to refresh GPS data at ~1 Hz
//------------------------------------------------------------------------------
void Sensor_GNSS_Update(SmartWatchData_t *sw)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 800ce5c:	f7f5 f858 	bl	8001f10 <HAL_GetTick>
 800ce60:	60f8      	str	r0, [r7, #12]

	switch (sw->gnss_state)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f893 3318 	ldrb.w	r3, [r3, #792]	@ 0x318
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d002      	beq.n	800ce72 <Sensor_GNSS_Update+0x1e>
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d017      	beq.n	800cea0 <Sensor_GNSS_Update+0x4c>
			sw->gnss_state = 0;
			sw->gnss_nextRequestTick = now + 1000;
		}
		break;
	}
}
 800ce70:	e07e      	b.n	800cf70 <Sensor_GNSS_Update+0x11c>
		if (now >= sw->gnss_nextRequestTick)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d375      	bcc.n	800cf6a <Sensor_GNSS_Update+0x116>
			GNSS_GetPVTData(&sw->gps_data);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ce84:	4618      	mov	r0, r3
 800ce86:	f000 fabf 	bl	800d408 <GNSS_GetPVTData>
			sw->gnss_state = 1;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
			sw->gnss_nextRequestTick = now + 100;   // parse in 100 ms
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
		break;
 800ce9e:	e064      	b.n	800cf6a <Sensor_GNSS_Update+0x116>
		if (now >= sw->gnss_nextRequestTick)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d360      	bcc.n	800cf6e <Sensor_GNSS_Update+0x11a>
			GNSS_ParseBuffer(&sw->gps_data);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 fa41 	bl	800d33a <GNSS_ParseBuffer>
			if (sw->gps_data.fixType >= 3)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 32bf 	ldrb.w	r3, [r3, #703]	@ 0x2bf
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	d944      	bls.n	800cf4c <Sensor_GNSS_Update+0xf8>
				sw->latitude = sw->gps_data.fLat;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
				sw->longitude = sw->gps_data.fLon;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
				sw->altitude = sw->gps_data.hMSL / 1000.0f;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800cee0:	ee07 3a90 	vmov	s15, r3
 800cee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cee8:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800cf78 <Sensor_GNSS_Update+0x124>
 800ceec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	edc3 7ac1 	vstr	s15, [r3, #772]	@ 0x304
				sw->year = sw->gps_data.year;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8b3 22b6 	ldrh.w	r2, [r3, #694]	@ 0x2b6
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8a3 2308 	strh.w	r2, [r3, #776]	@ 0x308
				sw->month = sw->gps_data.month;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 32ba 	ldrb.w	r3, [r3, #698]	@ 0x2ba
 800cf08:	461a      	mov	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8a3 230a 	strh.w	r2, [r3, #778]	@ 0x30a
				sw->day = sw->gps_data.day;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 32bb 	ldrb.w	r3, [r3, #699]	@ 0x2bb
 800cf16:	461a      	mov	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8a3 230c 	strh.w	r2, [r3, #780]	@ 0x30c
				sw->hour = sw->gps_data.hour;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f893 22bc 	ldrb.w	r2, [r3, #700]	@ 0x2bc
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f883 230e 	strb.w	r2, [r3, #782]	@ 0x30e
				sw->minute = sw->gps_data.min;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 22bd 	ldrb.w	r2, [r3, #701]	@ 0x2bd
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f883 230f 	strb.w	r2, [r3, #783]	@ 0x30f
				sw->second = sw->gps_data.sec;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 22be 	ldrb.w	r2, [r3, #702]	@ 0x2be
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f883 2310 	strb.w	r2, [r3, #784]	@ 0x310
				sw->gps_fix_valid = 1;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2201      	movs	r2, #1
 800cf46:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
 800cf4a:	e003      	b.n	800cf54 <Sensor_GNSS_Update+0x100>
				sw->gps_fix_valid = 0;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f883 2311 	strb.w	r2, [r3, #785]	@ 0x311
			sw->gnss_state = 0;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
			sw->gnss_nextRequestTick = now + 1000;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
		break;
 800cf68:	e001      	b.n	800cf6e <Sensor_GNSS_Update+0x11a>
		break;
 800cf6a:	bf00      	nop
 800cf6c:	e000      	b.n	800cf70 <Sensor_GNSS_Update+0x11c>
		break;
 800cf6e:	bf00      	nop
}
 800cf70:	bf00      	nop
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	447a0000 	.word	0x447a0000

0800cf7c <Sensor_BMP280_init>:
		printf("MPU6500 read failed with status: %u\r\n", status);
	}
}

void Sensor_BMP280_init(BMP280_HandleTypedef *bmp280)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
//	HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &txData, 1, 100);
//	HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR,
//			rxData, 1, 100);
//	printf("Received: 0x%02X \r\n", rxData[0]);  // Print response

	bmp280_init_default_params(&bmp280->params);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	332c      	adds	r3, #44	@ 0x2c
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f000 fd89 	bl	800daa0 <bmp280_init_default_params>
	bmp280->addr = BMP280_I2C_ADDRESS_0;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2276      	movs	r2, #118	@ 0x76
 800cf92:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp280->i2c = &BME280_I2C;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4a0b      	ldr	r2, [pc, #44]	@ (800cfc4 <Sensor_BMP280_init+0x48>)
 800cf98:	629a      	str	r2, [r3, #40]	@ 0x28

	// 3) try to initialize until the chip acks
	while (!bmp280_init(bmp280, &bmp280->params))
 800cf9a:	e002      	b.n	800cfa2 <Sensor_BMP280_init+0x26>
	{
		// Optional: blink an LED, print a message, delay, etc.
		HAL_Delay(200);
 800cf9c:	20c8      	movs	r0, #200	@ 0xc8
 800cf9e:	f7f4 ffc3 	bl	8001f28 <HAL_Delay>
	while (!bmp280_init(bmp280, &bmp280->params))
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	332c      	adds	r3, #44	@ 0x2c
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 fef5 	bl	800dd98 <bmp280_init>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	f083 0301 	eor.w	r3, r3, #1
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1f0      	bne.n	800cf9c <Sensor_BMP280_init+0x20>
	}
//	bool bme280p = bmp280.id == BME280_CHIP_ID;
//	size = sprintf((char*) Data, "BMP280: found %s \r\n",
//			bme280p ? "BME280" : "BMP280");
//	HAL_UART_Transmit(&STLINK_UART, Data, size, 1000);
}
 800cfba:	bf00      	nop
 800cfbc:	bf00      	nop
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	24000248 	.word	0x24000248

0800cfc8 <Sensor_BMP280_read_data>:

void Sensor_BMP280_read_data(SmartWatchData_t *SmartWatchData)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
	bmp280_read_float(&SmartWatchData->bmp280, &SmartWatchData->temperature,
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	333c      	adds	r3, #60	@ 0x3c
 800cfe2:	f001 fb45 	bl	800e670 <bmp280_read_float>
			&SmartWatchData->pressure, &SmartWatchData->humidity);

}
 800cfe6:	bf00      	nop
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
	...

0800cff0 <Sensor_MAX30102_configure_optimal_hr_spo2>:
 * If signals are too low (small AC, low DC), increase LED current.
 * If signals are saturating (DC near max), decrease LED current or increase ADC range.
 */
void Sensor_MAX30102_configure_optimal_hr_spo2(max30102_t *obj,
		I2C_HandleTypeDef *hi2c)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
//	// After reset, DIE_TEMP_CONFIG register is 0x00, so TEMP_EN is already 0.
//	max30102_set_die_temp_en(obj, 0);

	//------------------ DEBUG -----------------------
	// Initiation
	max30102_init(obj, hi2c);
 800cffa:	6839      	ldr	r1, [r7, #0]
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f001 fb83 	bl	800e708 <max30102_init>
	max30102_reset(obj);
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f001 fbf7 	bl	800e7f6 <max30102_reset>
	max30102_clear_fifo(obj);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f001 fdc1 	bl	800eb90 <max30102_clear_fifo>
	max30102_set_fifo_config(obj, max30102_smp_ave_8, 1, 7);
 800d00e:	2307      	movs	r3, #7
 800d010:	2201      	movs	r2, #1
 800d012:	2103      	movs	r1, #3
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f001 fd7f 	bl	800eb18 <max30102_set_fifo_config>

	// Sensor settings
	max30102_set_led_pulse_width(obj, max30102_pw_16_bit);
 800d01a:	2101      	movs	r1, #1
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f001 fce8 	bl	800e9f2 <max30102_set_led_pulse_width>
	max30102_set_adc_resolution(obj, max30102_adc_2048);
 800d022:	2100      	movs	r1, #0
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f001 fd07 	bl	800ea38 <max30102_set_adc_resolution>
	max30102_set_sampling_rate(obj, max30102_sr_800);
 800d02a:	2104      	movs	r1, #4
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f001 fcbb 	bl	800e9a8 <max30102_set_sampling_rate>
	max30102_set_led_current_1(obj, 7.4);
 800d032:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800d0a0 <Sensor_MAX30102_configure_optimal_hr_spo2+0xb0>
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f001 fd26 	bl	800ea88 <max30102_set_led_current_1>
	max30102_set_led_current_2(obj, 7.4);
 800d03c:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800d0a0 <Sensor_MAX30102_configure_optimal_hr_spo2+0xb0>
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f001 fd45 	bl	800ead0 <max30102_set_led_current_2>

	// Enter SpO2 mode
	max30102_set_mode(obj, max30102_spo2);
 800d046:	2103      	movs	r1, #3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f001 fc87 	bl	800e95c <max30102_set_mode>
	max30102_set_a_full(obj, 1);
 800d04e:	2101      	movs	r1, #1
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f001 fbe1 	bl	800e818 <max30102_set_a_full>

	// Initiate 1 temperature measurement
	max30102_set_die_temp_en(obj, 1);
 800d056:	2101      	movs	r1, #1
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f001 fc1e 	bl	800e89a <max30102_set_die_temp_en>
	max30102_set_die_temp_rdy(obj, 1);
 800d05e:	2101      	movs	r1, #1
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f001 fc02 	bl	800e86a <max30102_set_die_temp_rdy>

	uint8_t en_reg[2] =
 800d066:	2300      	movs	r3, #0
 800d068:	81bb      	strh	r3, [r7, #12]
	{ 0 };
	max30102_read(obj, 0x00, en_reg, 1);
 800d06a:	f107 020c 	add.w	r2, r7, #12
 800d06e:	2301      	movs	r3, #1
 800d070:	2100      	movs	r1, #0
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f001 fb9a 	bl	800e7ac <max30102_read>

	//Enter measurement mode:
	// Enter SpO2 mode
	max30102_set_mode(obj, max30102_spo2);
 800d078:	2103      	movs	r1, #3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f001 fc6e 	bl	800e95c <max30102_set_mode>

	//Enable the required interrupts:
	// Enable FIFO_A_FULL interrupt
	max30102_set_a_full(obj, 1);
 800d080:	2101      	movs	r1, #1
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f001 fbc8 	bl	800e818 <max30102_set_a_full>
	// Enable die temperature measurement
	max30102_set_die_temp_en(obj, 1);
 800d088:	2101      	movs	r1, #1
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f001 fc05 	bl	800e89a <max30102_set_die_temp_en>
	// Enable DIE_TEMP_RDY interrupt
	max30102_set_die_temp_rdy(obj, 1);
 800d090:	2101      	movs	r1, #1
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f001 fbe9 	bl	800e86a <max30102_set_die_temp_rdy>
}
 800d098:	bf00      	nop
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	40eccccd 	.word	0x40eccccd

0800d0a4 <Sensor_MAX30102_init>:

	return (bpm > 30 && bpm < 240) ? bpm : 0; // Basic sanity check
}

void Sensor_MAX30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c) // Removed sampling_rate_hz parameter
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
	MAX30102_fs = MAX30102_RAW_SAMPLING_RATE / MAX30102_AVERAGING_FACTOR;
 800d0ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d0ec <Sensor_MAX30102_init+0x48>)
 800d0b0:	4a0f      	ldr	r2, [pc, #60]	@ (800d0f0 <Sensor_MAX30102_init+0x4c>)
 800d0b2:	601a      	str	r2, [r3, #0]
	printf("DEBUG: Effective MAX30102_fs set to: %.2f Hz\r\n", MAX30102_fs);
 800d0b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d0ec <Sensor_MAX30102_init+0x48>)
 800d0b6:	edd3 7a00 	vldr	s15, [r3]
 800d0ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d0be:	ec53 2b17 	vmov	r2, r3, d7
 800d0c2:	480c      	ldr	r0, [pc, #48]	@ (800d0f4 <Sensor_MAX30102_init+0x50>)
 800d0c4:	f002 fbb4 	bl	800f830 <iprintf>

	last_MAX30102_hr = 0;
 800d0c8:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f8 <Sensor_MAX30102_init+0x54>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	701a      	strb	r2, [r3, #0]
	last_MAX30102_spo2 = 0;
 800d0ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d0fc <Sensor_MAX30102_init+0x58>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	701a      	strb	r2, [r3, #0]
	app_buffer_fill_count = 0;
 800d0d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d100 <Sensor_MAX30102_init+0x5c>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	601a      	str	r2, [r3, #0]

	Sensor_MAX30102_configure_optimal_hr_spo2(obj, hi2c);
 800d0da:	6839      	ldr	r1, [r7, #0]
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f7ff ff87 	bl	800cff0 <Sensor_MAX30102_configure_optimal_hr_spo2>
}
 800d0e2:	bf00      	nop
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	24000cb4 	.word	0x24000cb4
 800d0f0:	42c80000 	.word	0x42c80000
 800d0f4:	080119c0 	.word	0x080119c0
 800d0f8:	24000cb8 	.word	0x24000cb8
 800d0fc:	24000cb9 	.word	0x24000cb9
 800d100:	24000cbc 	.word	0x24000cbc

0800d104 <SendSmartWatchData>:


// Transmit all key fields of your SmartWatchData_t as a single CSV line.
// You can adjust which fields you include or change formatting as needed.
void SendSmartWatchData(UART_HandleTypeDef *huart, const SmartWatchData_t *sw)
{
 800d104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d106:	b0e9      	sub	sp, #420	@ 0x1a4
 800d108:	af16      	add	r7, sp, #88	@ 0x58
 800d10a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d10e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d112:	6018      	str	r0, [r3, #0]
 800d114:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d118:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d11c:	6019      	str	r1, [r3, #0]
//        "Gx=%.3f, Gy=%.3f, Gz=%.3f, "
//        "HR=%d, SpO2=%.1f, "
        "raw IR=%lu, raw RED=%lu,  "
        "Lat=%.6f, Lon=%.6f, Alt=%.2f, "
        "Date=%04u-%02u-%02u, Time=%02u:%02u:%02u, Fix=%u\r\n",
        sw->temperature,
 800d11e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d122:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
    int len = snprintf(buf, sizeof(buf),
 800d12c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
        sw->pressure,
 800d130:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d134:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
    int len = snprintf(buf, sizeof(buf),
 800d13e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
        sw->humidity,
 800d142:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d146:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	edd3 5a0f 	vldr	s11, [r3, #60]	@ 0x3c
    int len = snprintf(buf, sizeof(buf),
 800d150:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
//        sw->gyro_dps[0][0],
//        sw->gyro_dps[0][1],
//        sw->gyro_dps[0][2],
//        sw->heart_rate,
//        sw->spo2,
		sw->max30102._ir_samples[0],
 800d154:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d158:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
		sw->max30102._red_samples[0],
 800d162:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800d166:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800d16a:	6812      	ldr	r2, [r2, #0]
 800d16c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
        sw->latitude,
 800d170:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800d174:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d178:	6809      	ldr	r1, [r1, #0]
 800d17a:	edd1 4abf 	vldr	s9, [r1, #764]	@ 0x2fc
    int len = snprintf(buf, sizeof(buf),
 800d17e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
        sw->longitude,
 800d182:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800d186:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d18a:	6809      	ldr	r1, [r1, #0]
 800d18c:	edd1 3ac0 	vldr	s7, [r1, #768]	@ 0x300
    int len = snprintf(buf, sizeof(buf),
 800d190:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
        sw->altitude,
 800d194:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800d198:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d19c:	6809      	ldr	r1, [r1, #0]
 800d19e:	edd1 2ac1 	vldr	s5, [r1, #772]	@ 0x304
    int len = snprintf(buf, sizeof(buf),
 800d1a2:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
        sw->year,
 800d1a6:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800d1aa:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d1ae:	6809      	ldr	r1, [r1, #0]
 800d1b0:	f8b1 1308 	ldrh.w	r1, [r1, #776]	@ 0x308
    int len = snprintf(buf, sizeof(buf),
 800d1b4:	460c      	mov	r4, r1
        sw->month,
 800d1b6:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800d1ba:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d1be:	6809      	ldr	r1, [r1, #0]
 800d1c0:	f8b1 130a 	ldrh.w	r1, [r1, #778]	@ 0x30a
    int len = snprintf(buf, sizeof(buf),
 800d1c4:	460d      	mov	r5, r1
        sw->day,
 800d1c6:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800d1ca:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d1ce:	6809      	ldr	r1, [r1, #0]
 800d1d0:	f8b1 130c 	ldrh.w	r1, [r1, #780]	@ 0x30c
    int len = snprintf(buf, sizeof(buf),
 800d1d4:	460e      	mov	r6, r1
        sw->hour,
 800d1d6:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800d1da:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d1de:	6809      	ldr	r1, [r1, #0]
 800d1e0:	f891 130e 	ldrb.w	r1, [r1, #782]	@ 0x30e
    int len = snprintf(buf, sizeof(buf),
 800d1e4:	60f9      	str	r1, [r7, #12]
        sw->minute,
 800d1e6:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800d1ea:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d1ee:	6809      	ldr	r1, [r1, #0]
 800d1f0:	f891 130f 	ldrb.w	r1, [r1, #783]	@ 0x30f
    int len = snprintf(buf, sizeof(buf),
 800d1f4:	60b9      	str	r1, [r7, #8]
        sw->second,
 800d1f6:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800d1fa:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d1fe:	6809      	ldr	r1, [r1, #0]
 800d200:	f891 1310 	ldrb.w	r1, [r1, #784]	@ 0x310
    int len = snprintf(buf, sizeof(buf),
 800d204:	6079      	str	r1, [r7, #4]
        sw->gps_fix_valid
 800d206:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800d20a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d20e:	6809      	ldr	r1, [r1, #0]
 800d210:	f891 1311 	ldrb.w	r1, [r1, #785]	@ 0x311
    int len = snprintf(buf, sizeof(buf),
 800d214:	f107 0018 	add.w	r0, r7, #24
 800d218:	9114      	str	r1, [sp, #80]	@ 0x50
 800d21a:	6879      	ldr	r1, [r7, #4]
 800d21c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d21e:	68b9      	ldr	r1, [r7, #8]
 800d220:	9112      	str	r1, [sp, #72]	@ 0x48
 800d222:	68f9      	ldr	r1, [r7, #12]
 800d224:	9111      	str	r1, [sp, #68]	@ 0x44
 800d226:	9610      	str	r6, [sp, #64]	@ 0x40
 800d228:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d22a:	940e      	str	r4, [sp, #56]	@ 0x38
 800d22c:	ed8d 2b0c 	vstr	d2, [sp, #48]	@ 0x30
 800d230:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 800d234:	ed8d 4b08 	vstr	d4, [sp, #32]
 800d238:	9207      	str	r2, [sp, #28]
 800d23a:	9306      	str	r3, [sp, #24]
 800d23c:	ed8d 5b04 	vstr	d5, [sp, #16]
 800d240:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d244:	ed8d 7b00 	vstr	d7, [sp]
 800d248:	4a0c      	ldr	r2, [pc, #48]	@ (800d27c <SendSmartWatchData+0x178>)
 800d24a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800d24e:	f002 fb01 	bl	800f854 <sniprintf>
 800d252:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
    );

    // Transmit (blocking here; you can switch to DMA if you like)
    HAL_UART_Transmit(huart, (uint8_t*)buf, len, HAL_MAX_DELAY);
 800d256:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	f107 0118 	add.w	r1, r7, #24
 800d260:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d264:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 800d268:	f04f 33ff 	mov.w	r3, #4294967295
 800d26c:	6800      	ldr	r0, [r0, #0]
 800d26e:	f7fc fbd4 	bl	8009a1a <HAL_UART_Transmit>
}
 800d272:	bf00      	nop
 800d274:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 800d278:	46bd      	mov	sp, r7
 800d27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d27c:	080119f0 	.word	0x080119f0

0800d280 <Sensor_SmartWatch_log>:

//------------------------------------------------------------------------------
// Example: call SendSmartWatchData() periodically in your main loop or scheduler
//------------------------------------------------------------------------------
void Sensor_SmartWatch_log(const SmartWatchData_t *sw)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
    SendSmartWatchData(&STLINK_UART, sw);
 800d288:	6879      	ldr	r1, [r7, #4]
 800d28a:	4805      	ldr	r0, [pc, #20]	@ (800d2a0 <Sensor_SmartWatch_log+0x20>)
 800d28c:	f7ff ff3a 	bl	800d104 <SendSmartWatchData>
    SendSmartWatchData(&BLE_UART, sw);
 800d290:	6879      	ldr	r1, [r7, #4]
 800d292:	4804      	ldr	r0, [pc, #16]	@ (800d2a4 <Sensor_SmartWatch_log+0x24>)
 800d294:	f7ff ff36 	bl	800d104 <SendSmartWatchData>

}
 800d298:	bf00      	nop
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	24000620 	.word	0x24000620
 800d2a4:	240004f8 	.word	0x240004f8

0800d2a8 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = 0;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = 0;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = 0;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = 0;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = 0;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = 0;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->lon = 0;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->lat = 0;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->height = 0;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	GNSS->hMSL = 0;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->hAcc = 0;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->vAcc = 0;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	GNSS->gSpeed = 0;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	GNSS->headMot = 0;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 800d32e:	bf00      	nop
 800d330:	370c      	adds	r7, #12
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr

0800d33a <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b084      	sub	sp, #16
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]

	for (int var = 0; var <= 100; ++var) {
 800d342:	2300      	movs	r3, #0
 800d344:	60fb      	str	r3, [r7, #12]
 800d346:	e057      	b.n	800d3f8 <GNSS_ParseBuffer+0xbe>
		if (GNSS->uartWorkingBuffer[var] == 0xB5
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	4413      	add	r3, r2
 800d34e:	3308      	adds	r3, #8
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	2bb5      	cmp	r3, #181	@ 0xb5
 800d354:	d14d      	bne.n	800d3f2 <GNSS_ParseBuffer+0xb8>
				&& GNSS->uartWorkingBuffer[var + 1] == 0x62) {
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	3301      	adds	r3, #1
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	4413      	add	r3, r2
 800d35e:	7a1b      	ldrb	r3, [r3, #8]
 800d360:	2b62      	cmp	r3, #98	@ 0x62
 800d362:	d146      	bne.n	800d3f2 <GNSS_ParseBuffer+0xb8>
			if (GNSS->uartWorkingBuffer[var + 2] == 0x27
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	3302      	adds	r3, #2
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	4413      	add	r3, r2
 800d36c:	7a1b      	ldrb	r3, [r3, #8]
 800d36e:	2b27      	cmp	r3, #39	@ 0x27
 800d370:	d10a      	bne.n	800d388 <GNSS_ParseBuffer+0x4e>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	3303      	adds	r3, #3
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	4413      	add	r3, r2
 800d37a:	7a1b      	ldrb	r3, [r3, #8]
 800d37c:	2b03      	cmp	r3, #3
 800d37e:	d103      	bne.n	800d388 <GNSS_ParseBuffer+0x4e>
				GNSS_ParseUniqID(GNSS);
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 f85b 	bl	800d43c <GNSS_ParseUniqID>
 800d386:	e034      	b.n	800d3f2 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	3302      	adds	r3, #2
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	4413      	add	r3, r2
 800d390:	7a1b      	ldrb	r3, [r3, #8]
 800d392:	2b01      	cmp	r3, #1
 800d394:	d10a      	bne.n	800d3ac <GNSS_ParseBuffer+0x72>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	3303      	adds	r3, #3
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	4413      	add	r3, r2
 800d39e:	7a1b      	ldrb	r3, [r3, #8]
 800d3a0:	2b21      	cmp	r3, #33	@ 0x21
 800d3a2:	d103      	bne.n	800d3ac <GNSS_ParseBuffer+0x72>
				GNSS_ParseNavigatorData(GNSS);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 fa61 	bl	800d86c <GNSS_ParseNavigatorData>
 800d3aa:	e022      	b.n	800d3f2 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	3302      	adds	r3, #2
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	7a1b      	ldrb	r3, [r3, #8]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d10a      	bne.n	800d3d0 <GNSS_ParseBuffer+0x96>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x07) { //ook at: 32.17.30.1 u-blox 8 Receiver description
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	3303      	adds	r3, #3
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	7a1b      	ldrb	r3, [r3, #8]
 800d3c4:	2b07      	cmp	r3, #7
 800d3c6:	d103      	bne.n	800d3d0 <GNSS_ParseBuffer+0x96>
				GNSS_ParsePVTData(GNSS);
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 f8ed 	bl	800d5a8 <GNSS_ParsePVTData>
 800d3ce:	e010      	b.n	800d3f2 <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	3302      	adds	r3, #2
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	7a1b      	ldrb	r3, [r3, #8]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d109      	bne.n	800d3f2 <GNSS_ParseBuffer+0xb8>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x02) { // Look at: 32.17.15.1 u-blox 8 Receiver description
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	3303      	adds	r3, #3
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	7a1b      	ldrb	r3, [r3, #8]
 800d3e8:	2b02      	cmp	r3, #2
 800d3ea:	d102      	bne.n	800d3f2 <GNSS_ParseBuffer+0xb8>
				GNSS_ParsePOSLLHData(GNSS);
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 fa71 	bl	800d8d4 <GNSS_ParsePOSLLHData>
	for (int var = 0; var <= 100; ++var) {
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	60fb      	str	r3, [r7, #12]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2b64      	cmp	r3, #100	@ 0x64
 800d3fc:	dda4      	ble.n	800d348 <GNSS_ParseBuffer+0xe>
			}
		}
	}
}
 800d3fe:	bf00      	nop
 800d400:	bf00      	nop
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <GNSS_GetPVTData>:

/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getPVTData,
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2208      	movs	r2, #8
 800d416:	4908      	ldr	r1, [pc, #32]	@ (800d438 <GNSS_GetPVTData+0x30>)
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fc fbd9 	bl	8009bd0 <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS->uartWorkingBuffer, 100);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6818      	ldr	r0, [r3, #0]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	3308      	adds	r3, #8
 800d426:	2264      	movs	r2, #100	@ 0x64
 800d428:	4619      	mov	r1, r3
 800d42a:	f7fc fb85 	bl	8009b38 <HAL_UART_Receive_IT>
}
 800d42e:	bf00      	nop
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	08011b2c 	.word	0x08011b2c

0800d43c <GNSS_ParseUniqID>:
/*!
 * Parse data to unique chip ID standard.
 * Look at: 32.19.1.1 u-blox 8 Receiver description
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS) {
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 5; ++var) {
 800d444:	2300      	movs	r3, #0
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	e00d      	b.n	800d466 <GNSS_ParseUniqID+0x2a>
		GNSS->uniqueID[var] = GNSS->uartWorkingBuffer[10 + var];
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	330a      	adds	r3, #10
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	4413      	add	r3, r2
 800d452:	7a19      	ldrb	r1, [r3, #8]
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	4413      	add	r3, r2
 800d45a:	3304      	adds	r3, #4
 800d45c:	460a      	mov	r2, r1
 800d45e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 5; ++var) {
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	3301      	adds	r3, #1
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2b04      	cmp	r3, #4
 800d46a:	ddee      	ble.n	800d44a <GNSS_ParseUniqID+0xe>
	}
}
 800d46c:	bf00      	nop
 800d46e:	bf00      	nop
 800d470:	3714      	adds	r7, #20
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
	...

0800d47c <GNSS_SetMode>:

/*!
 * Changing the GNSS mode.
 * Look at: 32.10.19 u-blox 8 Receiver description
 */
void GNSS_SetMode(GNSS_StateHandle *GNSS, short gnssMode) {
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	807b      	strh	r3, [r7, #2]
	if (gnssMode == 0) {
 800d488:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d107      	bne.n	800d4a0 <GNSS_SetMode+0x24>
		HAL_UART_Transmit_DMA(GNSS->huart, setPortableMode,sizeof(setPortableMode) / sizeof(uint8_t));
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	222c      	movs	r2, #44	@ 0x2c
 800d496:	493a      	ldr	r1, [pc, #232]	@ (800d580 <GNSS_SetMode+0x104>)
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fc fb99 	bl	8009bd0 <HAL_UART_Transmit_DMA>
	} else if (gnssMode == 8) {
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
	} else if (gnssMode == 9) {
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
	}
}
 800d49e:	e06a      	b.n	800d576 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 1) {
 800d4a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d107      	bne.n	800d4b8 <GNSS_SetMode+0x3c>
		HAL_UART_Transmit_DMA(GNSS->huart, setStationaryMode,sizeof(setStationaryMode) / sizeof(uint8_t));
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	222c      	movs	r2, #44	@ 0x2c
 800d4ae:	4935      	ldr	r1, [pc, #212]	@ (800d584 <GNSS_SetMode+0x108>)
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fc fb8d 	bl	8009bd0 <HAL_UART_Transmit_DMA>
}
 800d4b6:	e05e      	b.n	800d576 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 2) {
 800d4b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	d107      	bne.n	800d4d0 <GNSS_SetMode+0x54>
		HAL_UART_Transmit_DMA(GNSS->huart, setPedestrianMode,sizeof(setPedestrianMode) / sizeof(uint8_t));
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	222c      	movs	r2, #44	@ 0x2c
 800d4c6:	4930      	ldr	r1, [pc, #192]	@ (800d588 <GNSS_SetMode+0x10c>)
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fc fb81 	bl	8009bd0 <HAL_UART_Transmit_DMA>
}
 800d4ce:	e052      	b.n	800d576 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 3) {
 800d4d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4d4:	2b03      	cmp	r3, #3
 800d4d6:	d107      	bne.n	800d4e8 <GNSS_SetMode+0x6c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	222c      	movs	r2, #44	@ 0x2c
 800d4de:	492b      	ldr	r1, [pc, #172]	@ (800d58c <GNSS_SetMode+0x110>)
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fc fb75 	bl	8009bd0 <HAL_UART_Transmit_DMA>
}
 800d4e6:	e046      	b.n	800d576 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 4) {
 800d4e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	d107      	bne.n	800d500 <GNSS_SetMode+0x84>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	222c      	movs	r2, #44	@ 0x2c
 800d4f6:	4925      	ldr	r1, [pc, #148]	@ (800d58c <GNSS_SetMode+0x110>)
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fc fb69 	bl	8009bd0 <HAL_UART_Transmit_DMA>
}
 800d4fe:	e03a      	b.n	800d576 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 5) {
 800d500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d504:	2b05      	cmp	r3, #5
 800d506:	d107      	bne.n	800d518 <GNSS_SetMode+0x9c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone1GMode,sizeof(setAirbone1GMode) / sizeof(uint8_t));
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	222c      	movs	r2, #44	@ 0x2c
 800d50e:	4920      	ldr	r1, [pc, #128]	@ (800d590 <GNSS_SetMode+0x114>)
 800d510:	4618      	mov	r0, r3
 800d512:	f7fc fb5d 	bl	8009bd0 <HAL_UART_Transmit_DMA>
}
 800d516:	e02e      	b.n	800d576 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 6) {
 800d518:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d51c:	2b06      	cmp	r3, #6
 800d51e:	d107      	bne.n	800d530 <GNSS_SetMode+0xb4>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone2GMode,sizeof(setAirbone2GMode) / sizeof(uint8_t));
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	222c      	movs	r2, #44	@ 0x2c
 800d526:	491b      	ldr	r1, [pc, #108]	@ (800d594 <GNSS_SetMode+0x118>)
 800d528:	4618      	mov	r0, r3
 800d52a:	f7fc fb51 	bl	8009bd0 <HAL_UART_Transmit_DMA>
}
 800d52e:	e022      	b.n	800d576 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 7) {
 800d530:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d534:	2b07      	cmp	r3, #7
 800d536:	d107      	bne.n	800d548 <GNSS_SetMode+0xcc>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone4GMode,sizeof(setAirbone4GMode) / sizeof(uint8_t));
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	222c      	movs	r2, #44	@ 0x2c
 800d53e:	4916      	ldr	r1, [pc, #88]	@ (800d598 <GNSS_SetMode+0x11c>)
 800d540:	4618      	mov	r0, r3
 800d542:	f7fc fb45 	bl	8009bd0 <HAL_UART_Transmit_DMA>
}
 800d546:	e016      	b.n	800d576 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 8) {
 800d548:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d54c:	2b08      	cmp	r3, #8
 800d54e:	d107      	bne.n	800d560 <GNSS_SetMode+0xe4>
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	222c      	movs	r2, #44	@ 0x2c
 800d556:	4911      	ldr	r1, [pc, #68]	@ (800d59c <GNSS_SetMode+0x120>)
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fc fb39 	bl	8009bd0 <HAL_UART_Transmit_DMA>
}
 800d55e:	e00a      	b.n	800d576 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 9) {
 800d560:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d564:	2b09      	cmp	r3, #9
 800d566:	d106      	bne.n	800d576 <GNSS_SetMode+0xfa>
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	222c      	movs	r2, #44	@ 0x2c
 800d56e:	490c      	ldr	r1, [pc, #48]	@ (800d5a0 <GNSS_SetMode+0x124>)
 800d570:	4618      	mov	r0, r3
 800d572:	f7fc fb2d 	bl	8009bd0 <HAL_UART_Transmit_DMA>
}
 800d576:	bf00      	nop
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	08011b34 	.word	0x08011b34
 800d584:	08011b60 	.word	0x08011b60
 800d588:	08011b8c 	.word	0x08011b8c
 800d58c:	08011bb8 	.word	0x08011bb8
 800d590:	08011be4 	.word	0x08011be4
 800d594:	08011c10 	.word	0x08011c10
 800d598:	08011c3c 	.word	0x08011c3c
 800d59c:	08011c68 	.word	0x08011c68
 800d5a0:	08011c94 	.word	0x08011c94
 800d5a4:	00000000 	.word	0x00000000

0800d5a8 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 800d5a8:	b480      	push	{r7}
 800d5aa:	b08b      	sub	sp, #44	@ 0x2c
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	7c9a      	ldrb	r2, [r3, #18]
 800d5b4:	4b91      	ldr	r3, [pc, #580]	@ (800d7fc <GNSS_ParsePVTData+0x254>)
 800d5b6:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	7c9a      	ldrb	r2, [r3, #18]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	7cda      	ldrb	r2, [r3, #19]
 800d5c6:	4b8d      	ldr	r3, [pc, #564]	@ (800d7fc <GNSS_ParsePVTData+0x254>)
 800d5c8:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	7cda      	ldrb	r2, [r3, #19]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 800d5d4:	4b89      	ldr	r3, [pc, #548]	@ (800d7fc <GNSS_ParsePVTData+0x254>)
 800d5d6:	881a      	ldrh	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	7d1a      	ldrb	r2, [r3, #20]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	7d5a      	ldrb	r2, [r3, #21]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	7d9a      	ldrb	r2, [r3, #22]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	7dda      	ldrb	r2, [r3, #23]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	7e1a      	ldrb	r2, [r3, #24]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77

	for (int var = 0; var < 4; ++var) {
 800d61c:	2300      	movs	r3, #0
 800d61e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d620:	e017      	b.n	800d652 <GNSS_ParsePVTData+0xaa>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 800d622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d624:	331e      	adds	r3, #30
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	4413      	add	r3, r2
 800d62a:	7a19      	ldrb	r1, [r3, #8]
 800d62c:	4a74      	ldr	r2, [pc, #464]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d630:	4413      	add	r3, r2
 800d632:	460a      	mov	r2, r1
 800d634:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 800d636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d638:	331e      	adds	r3, #30
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	7a19      	ldrb	r1, [r3, #8]
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d644:	4413      	add	r3, r2
 800d646:	337c      	adds	r3, #124	@ 0x7c
 800d648:	460a      	mov	r2, r1
 800d64a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64e:	3301      	adds	r3, #1
 800d650:	627b      	str	r3, [r7, #36]	@ 0x24
 800d652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d654:	2b03      	cmp	r3, #3
 800d656:	dde4      	ble.n	800d622 <GNSS_ParsePVTData+0x7a>
	}
	GNSS->lon = iLong.iLong;
 800d658:	4b69      	ldr	r3, [pc, #420]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 800d660:	4b67      	ldr	r3, [pc, #412]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	ee07 3a90 	vmov	s15, r3
 800d668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d66c:	eddf 6a65 	vldr	s13, [pc, #404]	@ 800d804 <GNSS_ParsePVTData+0x25c>
 800d670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
	for (int var = 0; var < 4; ++var) {
 800d67a:	2300      	movs	r3, #0
 800d67c:	623b      	str	r3, [r7, #32]
 800d67e:	e017      	b.n	800d6b0 <GNSS_ParsePVTData+0x108>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	3322      	adds	r3, #34	@ 0x22
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	4413      	add	r3, r2
 800d688:	7a19      	ldrb	r1, [r3, #8]
 800d68a:	4a5d      	ldr	r2, [pc, #372]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	4413      	add	r3, r2
 800d690:	460a      	mov	r2, r1
 800d692:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 800d694:	6a3b      	ldr	r3, [r7, #32]
 800d696:	3322      	adds	r3, #34	@ 0x22
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	4413      	add	r3, r2
 800d69c:	7a19      	ldrb	r1, [r3, #8]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	6a3b      	ldr	r3, [r7, #32]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	3384      	adds	r3, #132	@ 0x84
 800d6a6:	460a      	mov	r2, r1
 800d6a8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d6aa:	6a3b      	ldr	r3, [r7, #32]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	623b      	str	r3, [r7, #32]
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	2b03      	cmp	r3, #3
 800d6b4:	dde4      	ble.n	800d680 <GNSS_ParsePVTData+0xd8>
	}
	GNSS->lat = iLong.iLong;
 800d6b6:	4b52      	ldr	r3, [pc, #328]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 800d6c0:	4b4f      	ldr	r3, [pc, #316]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	ee07 3a90 	vmov	s15, r3
 800d6c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d6cc:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800d804 <GNSS_ParsePVTData+0x25c>
 800d6d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
	for (int var = 0; var < 4; ++var) {
 800d6da:	2300      	movs	r3, #0
 800d6dc:	61fb      	str	r3, [r7, #28]
 800d6de:	e00c      	b.n	800d6fa <GNSS_ParsePVTData+0x152>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	3326      	adds	r3, #38	@ 0x26
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	7a19      	ldrb	r1, [r3, #8]
 800d6ea:	4a45      	ldr	r2, [pc, #276]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	460a      	mov	r2, r1
 800d6f2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	61fb      	str	r3, [r7, #28]
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	2b03      	cmp	r3, #3
 800d6fe:	ddef      	ble.n	800d6e0 <GNSS_ParsePVTData+0x138>
	}
	GNSS->height = iLong.iLong;
 800d700:	4b3f      	ldr	r3, [pc, #252]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 800d70a:	2300      	movs	r3, #0
 800d70c:	61bb      	str	r3, [r7, #24]
 800d70e:	e017      	b.n	800d740 <GNSS_ParsePVTData+0x198>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	332a      	adds	r3, #42	@ 0x2a
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	4413      	add	r3, r2
 800d718:	7a19      	ldrb	r1, [r3, #8]
 800d71a:	4a39      	ldr	r2, [pc, #228]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	4413      	add	r3, r2
 800d720:	460a      	mov	r2, r1
 800d722:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	332a      	adds	r3, #42	@ 0x2a
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	4413      	add	r3, r2
 800d72c:	7a19      	ldrb	r1, [r3, #8]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	4413      	add	r3, r2
 800d734:	3398      	adds	r3, #152	@ 0x98
 800d736:	460a      	mov	r2, r1
 800d738:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	3301      	adds	r3, #1
 800d73e:	61bb      	str	r3, [r7, #24]
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	2b03      	cmp	r3, #3
 800d744:	dde4      	ble.n	800d710 <GNSS_ParsePVTData+0x168>
	}
	GNSS->hMSL = iLong.iLong;
 800d746:	4b2e      	ldr	r3, [pc, #184]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	for (int var = 0; var < 4; ++var) {
 800d750:	2300      	movs	r3, #0
 800d752:	617b      	str	r3, [r7, #20]
 800d754:	e00c      	b.n	800d770 <GNSS_ParsePVTData+0x1c8>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	332e      	adds	r3, #46	@ 0x2e
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	4413      	add	r3, r2
 800d75e:	7a19      	ldrb	r1, [r3, #8]
 800d760:	4a29      	ldr	r2, [pc, #164]	@ (800d808 <GNSS_ParsePVTData+0x260>)
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	4413      	add	r3, r2
 800d766:	460a      	mov	r2, r1
 800d768:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	3301      	adds	r3, #1
 800d76e:	617b      	str	r3, [r7, #20]
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	2b03      	cmp	r3, #3
 800d774:	ddef      	ble.n	800d756 <GNSS_ParsePVTData+0x1ae>
	}
	GNSS->hAcc = uLong.uLong;
 800d776:	4b24      	ldr	r3, [pc, #144]	@ (800d808 <GNSS_ParsePVTData+0x260>)
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	for (int var = 0; var < 4; ++var) {
 800d780:	2300      	movs	r3, #0
 800d782:	613b      	str	r3, [r7, #16]
 800d784:	e00c      	b.n	800d7a0 <GNSS_ParsePVTData+0x1f8>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	3332      	adds	r3, #50	@ 0x32
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	4413      	add	r3, r2
 800d78e:	7a19      	ldrb	r1, [r3, #8]
 800d790:	4a1d      	ldr	r2, [pc, #116]	@ (800d808 <GNSS_ParsePVTData+0x260>)
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	4413      	add	r3, r2
 800d796:	460a      	mov	r2, r1
 800d798:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	3301      	adds	r3, #1
 800d79e:	613b      	str	r3, [r7, #16]
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	2b03      	cmp	r3, #3
 800d7a4:	ddef      	ble.n	800d786 <GNSS_ParsePVTData+0x1de>
	}
	GNSS->vAcc = uLong.uLong;
 800d7a6:	4b18      	ldr	r3, [pc, #96]	@ (800d808 <GNSS_ParsePVTData+0x260>)
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

	for (int var = 0; var < 4; ++var) {
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	60fb      	str	r3, [r7, #12]
 800d7b4:	e017      	b.n	800d7e6 <GNSS_ParsePVTData+0x23e>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	3342      	adds	r3, #66	@ 0x42
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	4413      	add	r3, r2
 800d7be:	7a19      	ldrb	r1, [r3, #8]
 800d7c0:	4a0f      	ldr	r2, [pc, #60]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	460a      	mov	r2, r1
 800d7c8:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	3342      	adds	r3, #66	@ 0x42
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	7a19      	ldrb	r1, [r3, #8]
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	4413      	add	r3, r2
 800d7da:	33a8      	adds	r3, #168	@ 0xa8
 800d7dc:	460a      	mov	r2, r1
 800d7de:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	60fb      	str	r3, [r7, #12]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2b03      	cmp	r3, #3
 800d7ea:	dde4      	ble.n	800d7b6 <GNSS_ParsePVTData+0x20e>
	}
	GNSS->gSpeed = iLong.iLong;
 800d7ec:	4b04      	ldr	r3, [pc, #16]	@ (800d800 <GNSS_ParsePVTData+0x258>)
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	60bb      	str	r3, [r7, #8]
 800d7fa:	e014      	b.n	800d826 <GNSS_ParsePVTData+0x27e>
 800d7fc:	24000cc0 	.word	0x24000cc0
 800d800:	24000cc8 	.word	0x24000cc8
 800d804:	4b189680 	.word	0x4b189680
 800d808:	24000cc4 	.word	0x24000cc4
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	3346      	adds	r3, #70	@ 0x46
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	4413      	add	r3, r2
 800d814:	7a19      	ldrb	r1, [r3, #8]
 800d816:	4a14      	ldr	r2, [pc, #80]	@ (800d868 <GNSS_ParsePVTData+0x2c0>)
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	4413      	add	r3, r2
 800d81c:	460a      	mov	r2, r1
 800d81e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	3301      	adds	r3, #1
 800d824:	60bb      	str	r3, [r7, #8]
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	2b03      	cmp	r3, #3
 800d82a:	ddef      	ble.n	800d80c <GNSS_ParsePVTData+0x264>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 800d82c:	4b0e      	ldr	r3, [pc, #56]	@ (800d868 <GNSS_ParsePVTData+0x2c0>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	ee07 3a90 	vmov	s15, r3
 800d834:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d838:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 800d860 <GNSS_ParsePVTData+0x2b8>
 800d83c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d840:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d844:	ee17 2a90 	vmov	r2, s15
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
 800d84e:	bf00      	nop
 800d850:	372c      	adds	r7, #44	@ 0x2c
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	f3af 8000 	nop.w
 800d860:	88e368f1 	.word	0x88e368f1
 800d864:	3ee4f8b5 	.word	0x3ee4f8b5
 800d868:	24000cc8 	.word	0x24000cc8

0800d86c <GNSS_ParseNavigatorData>:
/*!
 * Parse data to UTC time solution standard.
 * Look at: 32.17.30.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS) {
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS->uartWorkingBuffer[18];
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	7e9a      	ldrb	r2, [r3, #26]
 800d878:	4b15      	ldr	r3, [pc, #84]	@ (800d8d0 <GNSS_ParseNavigatorData+0x64>)
 800d87a:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS->uartWorkingBuffer[19];
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	7eda      	ldrb	r2, [r3, #27]
 800d880:	4b13      	ldr	r3, [pc, #76]	@ (800d8d0 <GNSS_ParseNavigatorData+0x64>)
 800d882:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 800d884:	4b12      	ldr	r3, [pc, #72]	@ (800d8d0 <GNSS_ParseNavigatorData+0x64>)
 800d886:	881a      	ldrh	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[20];
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	7f1a      	ldrb	r2, [r3, #28]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[21];
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7f5a      	ldrb	r2, [r3, #29]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[22];
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	7f9a      	ldrb	r2, [r3, #30]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[23];
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	7fda      	ldrb	r2, [r3, #31]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[24];
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 2020 	ldrb.w	r2, [r3, #32]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
}
 800d8c2:	bf00      	nop
 800d8c4:	370c      	adds	r7, #12
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	24000cc0 	.word	0x24000cc0

0800d8d4 <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS) {
 800d8d4:	b480      	push	{r7}
 800d8d6:	b089      	sub	sp, #36	@ 0x24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 4; ++var) {
 800d8dc:	2300      	movs	r3, #0
 800d8de:	61fb      	str	r3, [r7, #28]
 800d8e0:	e00c      	b.n	800d8fc <GNSS_ParsePOSLLHData+0x28>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 10];
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	330a      	adds	r3, #10
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	7a19      	ldrb	r1, [r3, #8]
 800d8ec:	4a53      	ldr	r2, [pc, #332]	@ (800da3c <GNSS_ParsePOSLLHData+0x168>)
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	460a      	mov	r2, r1
 800d8f4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	61fb      	str	r3, [r7, #28]
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	2b03      	cmp	r3, #3
 800d900:	ddef      	ble.n	800d8e2 <GNSS_ParsePOSLLHData+0xe>
	}
	GNSS->lon = iLong.iLong;
 800d902:	4b4e      	ldr	r3, [pc, #312]	@ (800da3c <GNSS_ParsePOSLLHData+0x168>)
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	679a      	str	r2, [r3, #120]	@ 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 800d90a:	4b4c      	ldr	r3, [pc, #304]	@ (800da3c <GNSS_ParsePOSLLHData+0x168>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	ee07 3a90 	vmov	s15, r3
 800d912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d916:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 800da40 <GNSS_ParsePOSLLHData+0x16c>
 800d91a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88

	for (int var = 0; var < 4; ++var) {
 800d924:	2300      	movs	r3, #0
 800d926:	61bb      	str	r3, [r7, #24]
 800d928:	e00c      	b.n	800d944 <GNSS_ParsePOSLLHData+0x70>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 14];
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	330e      	adds	r3, #14
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	4413      	add	r3, r2
 800d932:	7a19      	ldrb	r1, [r3, #8]
 800d934:	4a41      	ldr	r2, [pc, #260]	@ (800da3c <GNSS_ParsePOSLLHData+0x168>)
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	4413      	add	r3, r2
 800d93a:	460a      	mov	r2, r1
 800d93c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	3301      	adds	r3, #1
 800d942:	61bb      	str	r3, [r7, #24]
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	2b03      	cmp	r3, #3
 800d948:	ddef      	ble.n	800d92a <GNSS_ParsePOSLLHData+0x56>
	}
	GNSS->lat = iLong.iLong;
 800d94a:	4b3c      	ldr	r3, [pc, #240]	@ (800da3c <GNSS_ParsePOSLLHData+0x168>)
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 800d954:	4b39      	ldr	r3, [pc, #228]	@ (800da3c <GNSS_ParsePOSLLHData+0x168>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	ee07 3a90 	vmov	s15, r3
 800d95c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d960:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800da40 <GNSS_ParsePOSLLHData+0x16c>
 800d964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 800d96e:	2300      	movs	r3, #0
 800d970:	617b      	str	r3, [r7, #20]
 800d972:	e00c      	b.n	800d98e <GNSS_ParsePOSLLHData+0xba>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 18];
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	3312      	adds	r3, #18
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	4413      	add	r3, r2
 800d97c:	7a19      	ldrb	r1, [r3, #8]
 800d97e:	4a2f      	ldr	r2, [pc, #188]	@ (800da3c <GNSS_ParsePOSLLHData+0x168>)
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	4413      	add	r3, r2
 800d984:	460a      	mov	r2, r1
 800d986:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	3301      	adds	r3, #1
 800d98c:	617b      	str	r3, [r7, #20]
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	2b03      	cmp	r3, #3
 800d992:	ddef      	ble.n	800d974 <GNSS_ParsePOSLLHData+0xa0>
	}
	GNSS->height = iLong.iLong;
 800d994:	4b29      	ldr	r3, [pc, #164]	@ (800da3c <GNSS_ParsePOSLLHData+0x168>)
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 800d99e:	2300      	movs	r3, #0
 800d9a0:	613b      	str	r3, [r7, #16]
 800d9a2:	e00c      	b.n	800d9be <GNSS_ParsePOSLLHData+0xea>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 22];
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	3316      	adds	r3, #22
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	7a19      	ldrb	r1, [r3, #8]
 800d9ae:	4a23      	ldr	r2, [pc, #140]	@ (800da3c <GNSS_ParsePOSLLHData+0x168>)
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	460a      	mov	r2, r1
 800d9b6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	613b      	str	r3, [r7, #16]
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	2b03      	cmp	r3, #3
 800d9c2:	ddef      	ble.n	800d9a4 <GNSS_ParsePOSLLHData+0xd0>
	}
	GNSS->hMSL = iLong.iLong;
 800d9c4:	4b1d      	ldr	r3, [pc, #116]	@ (800da3c <GNSS_ParsePOSLLHData+0x168>)
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

	for (int var = 0; var < 4; ++var) {
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	60fb      	str	r3, [r7, #12]
 800d9d2:	e00c      	b.n	800d9ee <GNSS_ParsePOSLLHData+0x11a>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 26];
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	331a      	adds	r3, #26
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	4413      	add	r3, r2
 800d9dc:	7a19      	ldrb	r1, [r3, #8]
 800d9de:	4a19      	ldr	r2, [pc, #100]	@ (800da44 <GNSS_ParsePOSLLHData+0x170>)
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	460a      	mov	r2, r1
 800d9e6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b03      	cmp	r3, #3
 800d9f2:	ddef      	ble.n	800d9d4 <GNSS_ParsePOSLLHData+0x100>
	}
	GNSS->hAcc = uLong.uLong;
 800d9f4:	4b13      	ldr	r3, [pc, #76]	@ (800da44 <GNSS_ParsePOSLLHData+0x170>)
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	for (int var = 0; var < 4; ++var) {
 800d9fe:	2300      	movs	r3, #0
 800da00:	60bb      	str	r3, [r7, #8]
 800da02:	e00c      	b.n	800da1e <GNSS_ParsePOSLLHData+0x14a>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	331e      	adds	r3, #30
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	4413      	add	r3, r2
 800da0c:	7a19      	ldrb	r1, [r3, #8]
 800da0e:	4a0d      	ldr	r2, [pc, #52]	@ (800da44 <GNSS_ParsePOSLLHData+0x170>)
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	4413      	add	r3, r2
 800da14:	460a      	mov	r2, r1
 800da16:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	3301      	adds	r3, #1
 800da1c:	60bb      	str	r3, [r7, #8]
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	2b03      	cmp	r3, #3
 800da22:	ddef      	ble.n	800da04 <GNSS_ParsePOSLLHData+0x130>
	}
	GNSS->vAcc = uLong.uLong;
 800da24:	4b07      	ldr	r3, [pc, #28]	@ (800da44 <GNSS_ParsePOSLLHData+0x170>)
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 800da2e:	bf00      	nop
 800da30:	3724      	adds	r7, #36	@ 0x24
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	24000cc8 	.word	0x24000cc8
 800da40:	4b189680 	.word	0x4b189680
 800da44:	24000cc4 	.word	0x24000cc4

0800da48 <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	221c      	movs	r2, #28
 800da56:	490f      	ldr	r1, [pc, #60]	@ (800da94 <GNSS_LoadConfig+0x4c>)
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fc f8b9 	bl	8009bd0 <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 800da5e:	20fa      	movs	r0, #250	@ 0xfa
 800da60:	f7f4 fa62 	bl	8001f28 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setNMEA410,
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	221c      	movs	r2, #28
 800da6a:	490b      	ldr	r1, [pc, #44]	@ (800da98 <GNSS_LoadConfig+0x50>)
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fc f8af 	bl	8009bd0 <HAL_UART_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 800da72:	20fa      	movs	r0, #250	@ 0xfa
 800da74:	f7f4 fa58 	bl	8001f28 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	222c      	movs	r2, #44	@ 0x2c
 800da7e:	4907      	ldr	r1, [pc, #28]	@ (800da9c <GNSS_LoadConfig+0x54>)
 800da80:	4618      	mov	r0, r3
 800da82:	f7fc f8a5 	bl	8009bd0 <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 800da86:	20fa      	movs	r0, #250	@ 0xfa
 800da88:	f7f4 fa4e 	bl	8001f28 <HAL_Delay>
}
 800da8c:	bf00      	nop
 800da8e:	3708      	adds	r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	08011ac8 	.word	0x08011ac8
 800da98:	08011ae4 	.word	0x08011ae4
 800da9c:	08011b00 	.word	0x08011b00

0800daa0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2203      	movs	r2, #3
 800daac:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2203      	movs	r2, #3
 800dab8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2203      	movs	r2, #3
 800dabe:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2203      	movs	r2, #3
 800dac4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2203      	movs	r2, #3
 800daca:	715a      	strb	r2, [r3, #5]
}
 800dacc:	bf00      	nop
 800dace:	370c      	adds	r7, #12
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800dad8:	b580      	push	{r7, lr}
 800dada:	b08a      	sub	sp, #40	@ 0x28
 800dadc:	af04      	add	r7, sp, #16
 800dade:	60f8      	str	r0, [r7, #12]
 800dae0:	460b      	mov	r3, r1
 800dae2:	607a      	str	r2, [r7, #4]
 800dae4:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800daea:	005b      	lsls	r3, r3, #1
 800daec:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800daf2:	7afb      	ldrb	r3, [r7, #11]
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	8af9      	ldrh	r1, [r7, #22]
 800daf8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800dafc:	9302      	str	r3, [sp, #8]
 800dafe:	2302      	movs	r3, #2
 800db00:	9301      	str	r3, [sp, #4]
 800db02:	f107 0314 	add.w	r3, r7, #20
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	2301      	movs	r3, #1
 800db0a:	f7f8 f845 	bl	8005b98 <HAL_I2C_Mem_Read>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10c      	bne.n	800db2e <read_register16+0x56>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800db14:	7d7b      	ldrb	r3, [r7, #21]
 800db16:	b21b      	sxth	r3, r3
 800db18:	021b      	lsls	r3, r3, #8
 800db1a:	b21a      	sxth	r2, r3
 800db1c:	7d3b      	ldrb	r3, [r7, #20]
 800db1e:	b21b      	sxth	r3, r3
 800db20:	4313      	orrs	r3, r2
 800db22:	b21b      	sxth	r3, r3
 800db24:	b29a      	uxth	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	801a      	strh	r2, [r3, #0]
		return true;
 800db2a:	2301      	movs	r3, #1
 800db2c:	e000      	b.n	800db30 <read_register16+0x58>
	} else
		return false;
 800db2e:	2300      	movs	r3, #0

}
 800db30:	4618      	mov	r0, r3
 800db32:	3718      	adds	r7, #24
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800db38:	b590      	push	{r4, r7, lr}
 800db3a:	b08b      	sub	sp, #44	@ 0x2c
 800db3c:	af04      	add	r7, sp, #16
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	607a      	str	r2, [r7, #4]
 800db42:	461a      	mov	r2, r3
 800db44:	460b      	mov	r3, r1
 800db46:	72fb      	strb	r3, [r7, #11]
 800db48:	4613      	mov	r3, r2
 800db4a:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800db50:	005b      	lsls	r3, r3, #1
 800db52:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800db58:	7afb      	ldrb	r3, [r7, #11]
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	7abb      	ldrb	r3, [r7, #10]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	8af9      	ldrh	r1, [r7, #22]
 800db62:	f241 3488 	movw	r4, #5000	@ 0x1388
 800db66:	9402      	str	r4, [sp, #8]
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	2301      	movs	r3, #1
 800db70:	f7f8 f812 	bl	8005b98 <HAL_I2C_Mem_Read>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d101      	bne.n	800db7e <read_data+0x46>
		return 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	e000      	b.n	800db80 <read_data+0x48>
	else
		return 1;
 800db7e:	2301      	movs	r3, #1

}
 800db80:	4618      	mov	r0, r3
 800db82:	371c      	adds	r7, #28
 800db84:	46bd      	mov	sp, r7
 800db86:	bd90      	pop	{r4, r7, pc}

0800db88 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	461a      	mov	r2, r3
 800db94:	2188      	movs	r1, #136	@ 0x88
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7ff ff9e 	bl	800dad8 <read_register16>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d06f      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	3302      	adds	r3, #2
 800dba6:	461a      	mov	r2, r3
 800dba8:	218a      	movs	r1, #138	@ 0x8a
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7ff ff94 	bl	800dad8 <read_register16>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d065      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	461a      	mov	r2, r3
 800dbbc:	218c      	movs	r1, #140	@ 0x8c
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff ff8a 	bl	800dad8 <read_register16>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d05b      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	3306      	adds	r3, #6
 800dbce:	461a      	mov	r2, r3
 800dbd0:	218e      	movs	r1, #142	@ 0x8e
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7ff ff80 	bl	800dad8 <read_register16>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d051      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	3308      	adds	r3, #8
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	2190      	movs	r1, #144	@ 0x90
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7ff ff76 	bl	800dad8 <read_register16>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d047      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	330a      	adds	r3, #10
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	2192      	movs	r1, #146	@ 0x92
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7ff ff6c 	bl	800dad8 <read_register16>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d03d      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	330c      	adds	r3, #12
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	2194      	movs	r1, #148	@ 0x94
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7ff ff62 	bl	800dad8 <read_register16>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d033      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	330e      	adds	r3, #14
 800dc1e:	461a      	mov	r2, r3
 800dc20:	2196      	movs	r1, #150	@ 0x96
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7ff ff58 	bl	800dad8 <read_register16>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d029      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	3310      	adds	r3, #16
 800dc32:	461a      	mov	r2, r3
 800dc34:	2198      	movs	r1, #152	@ 0x98
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f7ff ff4e 	bl	800dad8 <read_register16>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d01f      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	3312      	adds	r3, #18
 800dc46:	461a      	mov	r2, r3
 800dc48:	219a      	movs	r1, #154	@ 0x9a
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff ff44 	bl	800dad8 <read_register16>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d015      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	3314      	adds	r3, #20
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	219c      	movs	r1, #156	@ 0x9c
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7ff ff3a 	bl	800dad8 <read_register16>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00b      	beq.n	800dc82 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800dc6e:	461a      	mov	r2, r3
 800dc70:	219e      	movs	r1, #158	@ 0x9e
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f7ff ff30 	bl	800dad8 <read_register16>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d001      	beq.n	800dc82 <read_calibration_data+0xfa>

		return true;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e000      	b.n	800dc84 <read_calibration_data+0xfc>
	}

	return false;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f103 0218 	add.w	r2, r3, #24
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	21a1      	movs	r1, #161	@ 0xa1
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f7ff ff4a 	bl	800db38 <read_data>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d14c      	bne.n	800dd44 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	331a      	adds	r3, #26
 800dcae:	461a      	mov	r2, r3
 800dcb0:	21e1      	movs	r1, #225	@ 0xe1
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f7ff ff10 	bl	800dad8 <read_register16>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d042      	beq.n	800dd44 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f103 021c 	add.w	r2, r3, #28
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	21e3      	movs	r1, #227	@ 0xe3
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f7ff ff35 	bl	800db38 <read_data>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d137      	bne.n	800dd44 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 800dcd4:	f107 030e 	add.w	r3, r7, #14
 800dcd8:	461a      	mov	r2, r3
 800dcda:	21e4      	movs	r1, #228	@ 0xe4
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7ff fefb 	bl	800dad8 <read_register16>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d02d      	beq.n	800dd44 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 800dce8:	f107 030c 	add.w	r3, r7, #12
 800dcec:	461a      	mov	r2, r3
 800dcee:	21e5      	movs	r1, #229	@ 0xe5
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7ff fef1 	bl	800dad8 <read_register16>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d023      	beq.n	800dd44 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800dd02:	2301      	movs	r3, #1
 800dd04:	21e7      	movs	r1, #231	@ 0xe7
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f7ff ff16 	bl	800db38 <read_data>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d118      	bne.n	800dd44 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800dd12:	89fb      	ldrh	r3, [r7, #14]
 800dd14:	b21b      	sxth	r3, r3
 800dd16:	011b      	lsls	r3, r3, #4
 800dd18:	b21b      	sxth	r3, r3
 800dd1a:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800dd1e:	b21a      	sxth	r2, r3
 800dd20:	89fb      	ldrh	r3, [r7, #14]
 800dd22:	121b      	asrs	r3, r3, #8
 800dd24:	b21b      	sxth	r3, r3
 800dd26:	f003 030f 	and.w	r3, r3, #15
 800dd2a:	b21b      	sxth	r3, r3
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	b21a      	sxth	r2, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800dd34:	89bb      	ldrh	r3, [r7, #12]
 800dd36:	091b      	lsrs	r3, r3, #4
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	b21a      	sxth	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	841a      	strh	r2, [r3, #32]

		return true;
 800dd40:	2301      	movs	r3, #1
 800dd42:	e000      	b.n	800dd46 <read_hum_calibration_data+0xba>
	}

	return false;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3710      	adds	r7, #16
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b088      	sub	sp, #32
 800dd52:	af04      	add	r7, sp, #16
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	460b      	mov	r3, r1
 800dd58:	70fb      	strb	r3, [r7, #3]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dd62:	005b      	lsls	r3, r3, #1
 800dd64:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800dd6a:	78fb      	ldrb	r3, [r7, #3]
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	89f9      	ldrh	r1, [r7, #14]
 800dd70:	f242 7310 	movw	r3, #10000	@ 0x2710
 800dd74:	9302      	str	r3, [sp, #8]
 800dd76:	2301      	movs	r3, #1
 800dd78:	9301      	str	r3, [sp, #4]
 800dd7a:	1cbb      	adds	r3, r7, #2
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	2301      	movs	r3, #1
 800dd80:	f7f7 fdf6 	bl	8005970 <HAL_I2C_Mem_Write>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d101      	bne.n	800dd8e <write_register8+0x40>
		return false;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	e000      	b.n	800dd90 <write_register8+0x42>
	else
		return true;
 800dd8e:	2301      	movs	r3, #1
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dda6:	2b76      	cmp	r3, #118	@ 0x76
 800dda8:	d005      	beq.n	800ddb6 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ddae:	2b77      	cmp	r3, #119	@ 0x77
 800ddb0:	d001      	beq.n	800ddb6 <bmp280_init+0x1e>

		return false;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	e09d      	b.n	800def2 <bmp280_init+0x15a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	21d0      	movs	r1, #208	@ 0xd0
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7ff feb9 	bl	800db38 <read_data>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d001      	beq.n	800ddd0 <bmp280_init+0x38>
		return false;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	e090      	b.n	800def2 <bmp280_init+0x15a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ddd6:	2b58      	cmp	r3, #88	@ 0x58
 800ddd8:	d006      	beq.n	800dde8 <bmp280_init+0x50>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800dde0:	2b60      	cmp	r3, #96	@ 0x60
 800dde2:	d001      	beq.n	800dde8 <bmp280_init+0x50>

		return false;
 800dde4:	2300      	movs	r3, #0
 800dde6:	e084      	b.n	800def2 <bmp280_init+0x15a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800dde8:	22b6      	movs	r2, #182	@ 0xb6
 800ddea:	21e0      	movs	r1, #224	@ 0xe0
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f7ff ffae 	bl	800dd4e <write_register8>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d001      	beq.n	800ddfc <bmp280_init+0x64>
		return false;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	e07a      	b.n	800def2 <bmp280_init+0x15a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800ddfc:	f107 020c 	add.w	r2, r7, #12
 800de00:	2301      	movs	r3, #1
 800de02:	21f3      	movs	r1, #243	@ 0xf3
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff fe97 	bl	800db38 <read_data>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1f5      	bne.n	800ddfc <bmp280_init+0x64>
				&& (status & 1) == 0)
 800de10:	7b3b      	ldrb	r3, [r7, #12]
 800de12:	f003 0301 	and.w	r3, r3, #1
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1f0      	bne.n	800ddfc <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f7ff feb4 	bl	800db88 <read_calibration_data>
 800de20:	4603      	mov	r3, r0
 800de22:	f083 0301 	eor.w	r3, r3, #1
 800de26:	b2db      	uxtb	r3, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d100      	bne.n	800de2e <bmp280_init+0x96>
 800de2c:	e001      	b.n	800de32 <bmp280_init+0x9a>
		return false;
 800de2e:	2300      	movs	r3, #0
 800de30:	e05f      	b.n	800def2 <bmp280_init+0x15a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800de38:	2b60      	cmp	r3, #96	@ 0x60
 800de3a:	d10a      	bne.n	800de52 <bmp280_init+0xba>
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7ff ff25 	bl	800dc8c <read_hum_calibration_data>
 800de42:	4603      	mov	r3, r0
 800de44:	f083 0301 	eor.w	r3, r3, #1
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d001      	beq.n	800de52 <bmp280_init+0xba>
		return false;
 800de4e:	2300      	movs	r3, #0
 800de50:	e04f      	b.n	800def2 <bmp280_init+0x15a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	795b      	ldrb	r3, [r3, #5]
 800de56:	b25b      	sxtb	r3, r3
 800de58:	015b      	lsls	r3, r3, #5
 800de5a:	b25a      	sxtb	r2, r3
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	785b      	ldrb	r3, [r3, #1]
 800de60:	b25b      	sxtb	r3, r3
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	b25b      	sxtb	r3, r3
 800de66:	4313      	orrs	r3, r2
 800de68:	b25b      	sxtb	r3, r3
 800de6a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800de6c:	7bfb      	ldrb	r3, [r7, #15]
 800de6e:	461a      	mov	r2, r3
 800de70:	21f5      	movs	r1, #245	@ 0xf5
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7ff ff6b 	bl	800dd4e <write_register8>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d001      	beq.n	800de82 <bmp280_init+0xea>
		return false;
 800de7e:	2300      	movs	r3, #0
 800de80:	e037      	b.n	800def2 <bmp280_init+0x15a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	2b01      	cmp	r3, #1
 800de88:	d102      	bne.n	800de90 <bmp280_init+0xf8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	2200      	movs	r2, #0
 800de8e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 800de94:	b25b      	sxtb	r3, r3
 800de96:	015b      	lsls	r3, r3, #5
 800de98:	b25a      	sxtb	r2, r3
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	789b      	ldrb	r3, [r3, #2]
 800de9e:	b25b      	sxtb	r3, r3
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	b25b      	sxtb	r3, r3
 800dea4:	4313      	orrs	r3, r2
 800dea6:	b25a      	sxtb	r2, r3
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	b25b      	sxtb	r3, r3
 800deae:	4313      	orrs	r3, r2
 800deb0:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800deb2:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800deba:	2b60      	cmp	r3, #96	@ 0x60
 800debc:	d10d      	bne.n	800deda <bmp280_init+0x142>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	791b      	ldrb	r3, [r3, #4]
 800dec2:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800dec4:	7b7b      	ldrb	r3, [r7, #13]
 800dec6:	461a      	mov	r2, r3
 800dec8:	21f2      	movs	r1, #242	@ 0xf2
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7ff ff3f 	bl	800dd4e <write_register8>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <bmp280_init+0x142>
			return false;
 800ded6:	2300      	movs	r3, #0
 800ded8:	e00b      	b.n	800def2 <bmp280_init+0x15a>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800deda:	7bbb      	ldrb	r3, [r7, #14]
 800dedc:	461a      	mov	r2, r3
 800dede:	21f4      	movs	r1, #244	@ 0xf4
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f7ff ff34 	bl	800dd4e <write_register8>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d001      	beq.n	800def0 <bmp280_init+0x158>
		return false;
 800deec:	2300      	movs	r3, #0
 800deee:	e000      	b.n	800def2 <bmp280_init+0x15a>
	}

	return true;
 800def0:	2301      	movs	r3, #1
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800defa:	b480      	push	{r7}
 800defc:	b087      	sub	sp, #28
 800defe:	af00      	add	r7, sp, #0
 800df00:	60f8      	str	r0, [r7, #12]
 800df02:	60b9      	str	r1, [r7, #8]
 800df04:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	10da      	asrs	r2, r3, #3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	881b      	ldrh	r3, [r3, #0]
 800df0e:	005b      	lsls	r3, r3, #1
 800df10:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800df18:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800df1c:	12db      	asrs	r3, r3, #11
 800df1e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	111b      	asrs	r3, r3, #4
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	8812      	ldrh	r2, [r2, #0]
 800df28:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	1112      	asrs	r2, r2, #4
 800df2e:	68f9      	ldr	r1, [r7, #12]
 800df30:	8809      	ldrh	r1, [r1, #0]
 800df32:	1a52      	subs	r2, r2, r1
 800df34:	fb02 f303 	mul.w	r3, r2, r3
 800df38:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800df40:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800df44:	139b      	asrs	r3, r3, #14
 800df46:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800df48:	697a      	ldr	r2, [r7, #20]
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	441a      	add	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	4613      	mov	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	4413      	add	r3, r2
 800df5c:	3380      	adds	r3, #128	@ 0x80
 800df5e:	121b      	asrs	r3, r3, #8
}
 800df60:	4618      	mov	r0, r3
 800df62:	371c      	adds	r7, #28
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800df6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df70:	b0cc      	sub	sp, #304	@ 0x130
 800df72:	af00      	add	r7, sp, #0
 800df74:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800df78:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800df7c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800df80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df84:	17da      	asrs	r2, r3, #31
 800df86:	461c      	mov	r4, r3
 800df88:	4615      	mov	r5, r2
 800df8a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800df8e:	f145 3bff 	adc.w	fp, r5, #4294967295
 800df92:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800df96:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800df9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df9e:	fb03 f102 	mul.w	r1, r3, r2
 800dfa2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800dfa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfaa:	fb02 f303 	mul.w	r3, r2, r3
 800dfae:	18ca      	adds	r2, r1, r3
 800dfb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfb4:	fba3 8903 	umull	r8, r9, r3, r3
 800dfb8:	eb02 0309 	add.w	r3, r2, r9
 800dfbc:	4699      	mov	r9, r3
 800dfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfc2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800dfc6:	b21b      	sxth	r3, r3
 800dfc8:	17da      	asrs	r2, r3, #31
 800dfca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dfce:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800dfd2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	fb03 f209 	mul.w	r2, r3, r9
 800dfdc:	460b      	mov	r3, r1
 800dfde:	fb08 f303 	mul.w	r3, r8, r3
 800dfe2:	4413      	add	r3, r2
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	fba8 1202 	umull	r1, r2, r8, r2
 800dfea:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800dfee:	460a      	mov	r2, r1
 800dff0:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800dff4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dff8:	4413      	add	r3, r2
 800dffa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dffe:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800e002:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 800e006:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800e00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e00e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e012:	b21b      	sxth	r3, r3
 800e014:	17da      	asrs	r2, r3, #31
 800e016:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e01a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800e01e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e022:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800e026:	462a      	mov	r2, r5
 800e028:	fb02 f203 	mul.w	r2, r2, r3
 800e02c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e030:	4621      	mov	r1, r4
 800e032:	fb01 f303 	mul.w	r3, r1, r3
 800e036:	441a      	add	r2, r3
 800e038:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e03c:	4621      	mov	r1, r4
 800e03e:	fba3 1301 	umull	r1, r3, r3, r1
 800e042:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e046:	460b      	mov	r3, r1
 800e048:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e050:	18d3      	adds	r3, r2, r3
 800e052:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e056:	f04f 0000 	mov.w	r0, #0
 800e05a:	f04f 0100 	mov.w	r1, #0
 800e05e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800e062:	462b      	mov	r3, r5
 800e064:	0459      	lsls	r1, r3, #17
 800e066:	4623      	mov	r3, r4
 800e068:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800e06c:	4623      	mov	r3, r4
 800e06e:	0458      	lsls	r0, r3, #17
 800e070:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800e074:	1814      	adds	r4, r2, r0
 800e076:	643c      	str	r4, [r7, #64]	@ 0x40
 800e078:	414b      	adcs	r3, r1
 800e07a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e07c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800e080:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800e084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e088:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800e08c:	b21b      	sxth	r3, r3
 800e08e:	17da      	asrs	r2, r3, #31
 800e090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e094:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e098:	f04f 0000 	mov.w	r0, #0
 800e09c:	f04f 0100 	mov.w	r1, #0
 800e0a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0a4:	00d9      	lsls	r1, r3, #3
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800e0ac:	1814      	adds	r4, r2, r0
 800e0ae:	63bc      	str	r4, [r7, #56]	@ 0x38
 800e0b0:	414b      	adcs	r3, r1
 800e0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0b4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800e0b8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800e0bc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800e0c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0c4:	fb03 f102 	mul.w	r1, r3, r2
 800e0c8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800e0cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0d0:	fb02 f303 	mul.w	r3, r2, r3
 800e0d4:	18ca      	adds	r2, r1, r3
 800e0d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0da:	fba3 1303 	umull	r1, r3, r3, r3
 800e0de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e0e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e0ec:	18d3      	adds	r3, r2, r3
 800e0ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e0fa:	b21b      	sxth	r3, r3
 800e0fc:	17da      	asrs	r2, r3, #31
 800e0fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e102:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e106:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800e10a:	462b      	mov	r3, r5
 800e10c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e110:	4642      	mov	r2, r8
 800e112:	fb02 f203 	mul.w	r2, r2, r3
 800e116:	464b      	mov	r3, r9
 800e118:	4621      	mov	r1, r4
 800e11a:	fb01 f303 	mul.w	r3, r1, r3
 800e11e:	4413      	add	r3, r2
 800e120:	4622      	mov	r2, r4
 800e122:	4641      	mov	r1, r8
 800e124:	fba2 1201 	umull	r1, r2, r2, r1
 800e128:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800e12c:	460a      	mov	r2, r1
 800e12e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800e132:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800e136:	4413      	add	r3, r2
 800e138:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e13c:	f04f 0000 	mov.w	r0, #0
 800e140:	f04f 0100 	mov.w	r1, #0
 800e144:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800e148:	4623      	mov	r3, r4
 800e14a:	0a18      	lsrs	r0, r3, #8
 800e14c:	462b      	mov	r3, r5
 800e14e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800e152:	462b      	mov	r3, r5
 800e154:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800e156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e15a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e15e:	b21b      	sxth	r3, r3
 800e160:	17da      	asrs	r2, r3, #31
 800e162:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e166:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800e16a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e16e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800e172:	464a      	mov	r2, r9
 800e174:	fb02 f203 	mul.w	r2, r2, r3
 800e178:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e17c:	4644      	mov	r4, r8
 800e17e:	fb04 f303 	mul.w	r3, r4, r3
 800e182:	441a      	add	r2, r3
 800e184:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e188:	4644      	mov	r4, r8
 800e18a:	fba3 4304 	umull	r4, r3, r3, r4
 800e18e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e192:	4623      	mov	r3, r4
 800e194:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e198:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e19c:	18d3      	adds	r3, r2, r3
 800e19e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e1a2:	f04f 0200 	mov.w	r2, #0
 800e1a6:	f04f 0300 	mov.w	r3, #0
 800e1aa:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800e1ae:	464c      	mov	r4, r9
 800e1b0:	0323      	lsls	r3, r4, #12
 800e1b2:	4644      	mov	r4, r8
 800e1b4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800e1b8:	4644      	mov	r4, r8
 800e1ba:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800e1bc:	1884      	adds	r4, r0, r2
 800e1be:	633c      	str	r4, [r7, #48]	@ 0x30
 800e1c0:	eb41 0303 	adc.w	r3, r1, r3
 800e1c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800e1ca:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800e1ce:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800e1d2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800e1d6:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800e1da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800e1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1e2:	88db      	ldrh	r3, [r3, #6]
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e1ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e1f0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e1f4:	462b      	mov	r3, r5
 800e1f6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e1fa:	4642      	mov	r2, r8
 800e1fc:	fb02 f203 	mul.w	r2, r2, r3
 800e200:	464b      	mov	r3, r9
 800e202:	4621      	mov	r1, r4
 800e204:	fb01 f303 	mul.w	r3, r1, r3
 800e208:	4413      	add	r3, r2
 800e20a:	4622      	mov	r2, r4
 800e20c:	4641      	mov	r1, r8
 800e20e:	fba2 1201 	umull	r1, r2, r2, r1
 800e212:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800e216:	460a      	mov	r2, r1
 800e218:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800e21c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e220:	4413      	add	r3, r2
 800e222:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e226:	f04f 0200 	mov.w	r2, #0
 800e22a:	f04f 0300 	mov.w	r3, #0
 800e22e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800e232:	4629      	mov	r1, r5
 800e234:	104a      	asrs	r2, r1, #1
 800e236:	4629      	mov	r1, r5
 800e238:	17cb      	asrs	r3, r1, #31
 800e23a:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800e23e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800e242:	4313      	orrs	r3, r2
 800e244:	d101      	bne.n	800e24a <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 800e246:	2300      	movs	r3, #0
 800e248:	e148      	b.n	800e4dc <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800e24a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e24e:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800e252:	17da      	asrs	r2, r3, #31
 800e254:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e258:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800e25c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800e260:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e264:	105b      	asrs	r3, r3, #1
 800e266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e26a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e26e:	07db      	lsls	r3, r3, #31
 800e270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e274:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800e278:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800e27c:	4621      	mov	r1, r4
 800e27e:	1a89      	subs	r1, r1, r2
 800e280:	67b9      	str	r1, [r7, #120]	@ 0x78
 800e282:	4629      	mov	r1, r5
 800e284:	eb61 0303 	sbc.w	r3, r1, r3
 800e288:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e28a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800e28e:	4622      	mov	r2, r4
 800e290:	462b      	mov	r3, r5
 800e292:	1891      	adds	r1, r2, r2
 800e294:	6239      	str	r1, [r7, #32]
 800e296:	415b      	adcs	r3, r3
 800e298:	627b      	str	r3, [r7, #36]	@ 0x24
 800e29a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e29e:	4621      	mov	r1, r4
 800e2a0:	1851      	adds	r1, r2, r1
 800e2a2:	61b9      	str	r1, [r7, #24]
 800e2a4:	4629      	mov	r1, r5
 800e2a6:	414b      	adcs	r3, r1
 800e2a8:	61fb      	str	r3, [r7, #28]
 800e2aa:	f04f 0200 	mov.w	r2, #0
 800e2ae:	f04f 0300 	mov.w	r3, #0
 800e2b2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800e2b6:	4649      	mov	r1, r9
 800e2b8:	018b      	lsls	r3, r1, #6
 800e2ba:	4641      	mov	r1, r8
 800e2bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e2c0:	4641      	mov	r1, r8
 800e2c2:	018a      	lsls	r2, r1, #6
 800e2c4:	4641      	mov	r1, r8
 800e2c6:	1889      	adds	r1, r1, r2
 800e2c8:	6139      	str	r1, [r7, #16]
 800e2ca:	4649      	mov	r1, r9
 800e2cc:	eb43 0101 	adc.w	r1, r3, r1
 800e2d0:	6179      	str	r1, [r7, #20]
 800e2d2:	f04f 0200 	mov.w	r2, #0
 800e2d6:	f04f 0300 	mov.w	r3, #0
 800e2da:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800e2de:	4649      	mov	r1, r9
 800e2e0:	008b      	lsls	r3, r1, #2
 800e2e2:	4641      	mov	r1, r8
 800e2e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e2e8:	4641      	mov	r1, r8
 800e2ea:	008a      	lsls	r2, r1, #2
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	4622      	mov	r2, r4
 800e2f4:	189b      	adds	r3, r3, r2
 800e2f6:	60bb      	str	r3, [r7, #8]
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	462a      	mov	r2, r5
 800e2fc:	eb42 0303 	adc.w	r3, r2, r3
 800e300:	60fb      	str	r3, [r7, #12]
 800e302:	f04f 0200 	mov.w	r2, #0
 800e306:	f04f 0300 	mov.w	r3, #0
 800e30a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800e30e:	4649      	mov	r1, r9
 800e310:	008b      	lsls	r3, r1, #2
 800e312:	4641      	mov	r1, r8
 800e314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e318:	4641      	mov	r1, r8
 800e31a:	008a      	lsls	r2, r1, #2
 800e31c:	4610      	mov	r0, r2
 800e31e:	4619      	mov	r1, r3
 800e320:	4603      	mov	r3, r0
 800e322:	4622      	mov	r2, r4
 800e324:	189b      	adds	r3, r3, r2
 800e326:	673b      	str	r3, [r7, #112]	@ 0x70
 800e328:	462b      	mov	r3, r5
 800e32a:	460a      	mov	r2, r1
 800e32c:	eb42 0303 	adc.w	r3, r2, r3
 800e330:	677b      	str	r3, [r7, #116]	@ 0x74
 800e332:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800e336:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800e33a:	f7f2 f831 	bl	80003a0 <__aeabi_ldivmod>
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800e346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e34a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800e34e:	b21b      	sxth	r3, r3
 800e350:	17da      	asrs	r2, r3, #31
 800e352:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e354:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e356:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e35a:	f04f 0000 	mov.w	r0, #0
 800e35e:	f04f 0100 	mov.w	r1, #0
 800e362:	0b50      	lsrs	r0, r2, #13
 800e364:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800e368:	1359      	asrs	r1, r3, #13
 800e36a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800e36e:	462b      	mov	r3, r5
 800e370:	fb00 f203 	mul.w	r2, r0, r3
 800e374:	4623      	mov	r3, r4
 800e376:	fb03 f301 	mul.w	r3, r3, r1
 800e37a:	4413      	add	r3, r2
 800e37c:	4622      	mov	r2, r4
 800e37e:	fba2 1200 	umull	r1, r2, r2, r0
 800e382:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e386:	460a      	mov	r2, r1
 800e388:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800e38c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e390:	4413      	add	r3, r2
 800e392:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e396:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800e39a:	f04f 0000 	mov.w	r0, #0
 800e39e:	f04f 0100 	mov.w	r1, #0
 800e3a2:	0b50      	lsrs	r0, r2, #13
 800e3a4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800e3a8:	1359      	asrs	r1, r3, #13
 800e3aa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800e3ae:	462b      	mov	r3, r5
 800e3b0:	fb00 f203 	mul.w	r2, r0, r3
 800e3b4:	4623      	mov	r3, r4
 800e3b6:	fb03 f301 	mul.w	r3, r3, r1
 800e3ba:	4413      	add	r3, r2
 800e3bc:	4622      	mov	r2, r4
 800e3be:	fba2 1200 	umull	r1, r2, r2, r0
 800e3c2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e3c6:	460a      	mov	r2, r1
 800e3c8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800e3cc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e3d0:	4413      	add	r3, r2
 800e3d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e3d6:	f04f 0200 	mov.w	r2, #0
 800e3da:	f04f 0300 	mov.w	r3, #0
 800e3de:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	0e4a      	lsrs	r2, r1, #25
 800e3e6:	4629      	mov	r1, r5
 800e3e8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	164b      	asrs	r3, r1, #25
 800e3f0:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800e3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3f8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800e3fc:	b21b      	sxth	r3, r3
 800e3fe:	17da      	asrs	r2, r3, #31
 800e400:	663b      	str	r3, [r7, #96]	@ 0x60
 800e402:	667a      	str	r2, [r7, #100]	@ 0x64
 800e404:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e408:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800e40c:	462a      	mov	r2, r5
 800e40e:	fb02 f203 	mul.w	r2, r2, r3
 800e412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e416:	4621      	mov	r1, r4
 800e418:	fb01 f303 	mul.w	r3, r1, r3
 800e41c:	4413      	add	r3, r2
 800e41e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e422:	4621      	mov	r1, r4
 800e424:	fba2 1201 	umull	r1, r2, r2, r1
 800e428:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e42c:	460a      	mov	r2, r1
 800e42e:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800e432:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800e436:	4413      	add	r3, r2
 800e438:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e43c:	f04f 0200 	mov.w	r2, #0
 800e440:	f04f 0300 	mov.w	r3, #0
 800e444:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800e448:	4621      	mov	r1, r4
 800e44a:	0cca      	lsrs	r2, r1, #19
 800e44c:	4629      	mov	r1, r5
 800e44e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800e452:	4629      	mov	r1, r5
 800e454:	14cb      	asrs	r3, r1, #19
 800e456:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800e45a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800e45e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800e462:	1884      	adds	r4, r0, r2
 800e464:	65bc      	str	r4, [r7, #88]	@ 0x58
 800e466:	eb41 0303 	adc.w	r3, r1, r3
 800e46a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e46c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800e470:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800e474:	4621      	mov	r1, r4
 800e476:	1889      	adds	r1, r1, r2
 800e478:	6539      	str	r1, [r7, #80]	@ 0x50
 800e47a:	4629      	mov	r1, r5
 800e47c:	eb43 0101 	adc.w	r1, r3, r1
 800e480:	6579      	str	r1, [r7, #84]	@ 0x54
 800e482:	f04f 0000 	mov.w	r0, #0
 800e486:	f04f 0100 	mov.w	r1, #0
 800e48a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800e48e:	4623      	mov	r3, r4
 800e490:	0a18      	lsrs	r0, r3, #8
 800e492:	462b      	mov	r3, r5
 800e494:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800e498:	462b      	mov	r3, r5
 800e49a:	1219      	asrs	r1, r3, #8
 800e49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4a0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e4a4:	b21b      	sxth	r3, r3
 800e4a6:	17da      	asrs	r2, r3, #31
 800e4a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4aa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e4ac:	f04f 0200 	mov.w	r2, #0
 800e4b0:	f04f 0300 	mov.w	r3, #0
 800e4b4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800e4b8:	464c      	mov	r4, r9
 800e4ba:	0123      	lsls	r3, r4, #4
 800e4bc:	4644      	mov	r4, r8
 800e4be:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800e4c2:	4644      	mov	r4, r8
 800e4c4:	0122      	lsls	r2, r4, #4
 800e4c6:	1884      	adds	r4, r0, r2
 800e4c8:	603c      	str	r4, [r7, #0]
 800e4ca:	eb41 0303 	adc.w	r3, r1, r3
 800e4ce:	607b      	str	r3, [r7, #4]
 800e4d0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e4d4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 800e4d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e4e8 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800e4e8:	b480      	push	{r7}
 800e4ea:	b087      	sub	sp, #28
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800e4fa:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	039a      	lsls	r2, r3, #14
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800e506:	051b      	lsls	r3, r3, #20
 800e508:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800e510:	4619      	mov	r1, r3
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	fb01 f303 	mul.w	r3, r1, r3
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e51e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800e526:	4611      	mov	r1, r2
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	fb01 f202 	mul.w	r2, r1, r2
 800e52e:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800e530:	68f9      	ldr	r1, [r7, #12]
 800e532:	7f09      	ldrb	r1, [r1, #28]
 800e534:	4608      	mov	r0, r1
 800e536:	6979      	ldr	r1, [r7, #20]
 800e538:	fb00 f101 	mul.w	r1, r0, r1
 800e53c:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800e53e:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800e542:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800e546:	1292      	asrs	r2, r2, #10
 800e548:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800e54c:	68f9      	ldr	r1, [r7, #12]
 800e54e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800e552:	fb01 f202 	mul.w	r2, r1, r2
 800e556:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800e55a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800e55c:	fb02 f303 	mul.w	r3, r2, r3
 800e560:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	13db      	asrs	r3, r3, #15
 800e566:	697a      	ldr	r2, [r7, #20]
 800e568:	13d2      	asrs	r2, r2, #15
 800e56a:	fb02 f303 	mul.w	r3, r2, r3
 800e56e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800e570:	68fa      	ldr	r2, [r7, #12]
 800e572:	7e12      	ldrb	r2, [r2, #24]
 800e574:	fb02 f303 	mul.w	r3, r2, r3
 800e578:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800e57a:	697a      	ldr	r2, [r7, #20]
 800e57c:	1ad3      	subs	r3, r2, r3
 800e57e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e586:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800e58e:	bfa8      	it	ge
 800e590:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800e594:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	131b      	asrs	r3, r3, #12
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	371c      	adds	r7, #28
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr

0800e5a6 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b08c      	sub	sp, #48	@ 0x30
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	60f8      	str	r0, [r7, #12]
 800e5ae:	60b9      	str	r1, [r7, #8]
 800e5b0:	607a      	str	r2, [r7, #4]
 800e5b2:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e5ba:	2b60      	cmp	r3, #96	@ 0x60
 800e5bc:	d007      	beq.n	800e5ce <bmp280_read_fixed+0x28>
		if (humidity)
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d002      	beq.n	800e5ca <bmp280_read_fixed+0x24>
			*humidity = 0;
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d001      	beq.n	800e5d8 <bmp280_read_fixed+0x32>
 800e5d4:	2308      	movs	r3, #8
 800e5d6:	e000      	b.n	800e5da <bmp280_read_fixed+0x34>
 800e5d8:	2306      	movs	r3, #6
 800e5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800e5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	f107 0218 	add.w	r2, r7, #24
 800e5e4:	21f7      	movs	r1, #247	@ 0xf7
 800e5e6:	68f8      	ldr	r0, [r7, #12]
 800e5e8:	f7ff faa6 	bl	800db38 <read_data>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d001      	beq.n	800e5f6 <bmp280_read_fixed+0x50>
		return false;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	e038      	b.n	800e668 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800e5f6:	7e3b      	ldrb	r3, [r7, #24]
 800e5f8:	031a      	lsls	r2, r3, #12
 800e5fa:	7e7b      	ldrb	r3, [r7, #25]
 800e5fc:	011b      	lsls	r3, r3, #4
 800e5fe:	4313      	orrs	r3, r2
 800e600:	7eba      	ldrb	r2, [r7, #26]
 800e602:	0912      	lsrs	r2, r2, #4
 800e604:	b2d2      	uxtb	r2, r2
 800e606:	4313      	orrs	r3, r2
 800e608:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800e60a:	7efb      	ldrb	r3, [r7, #27]
 800e60c:	031a      	lsls	r2, r3, #12
 800e60e:	7f3b      	ldrb	r3, [r7, #28]
 800e610:	011b      	lsls	r3, r3, #4
 800e612:	4313      	orrs	r3, r2
 800e614:	7f7a      	ldrb	r2, [r7, #29]
 800e616:	0912      	lsrs	r2, r2, #4
 800e618:	b2d2      	uxtb	r2, r2
 800e61a:	4313      	orrs	r3, r2
 800e61c:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800e61e:	f107 0314 	add.w	r3, r7, #20
 800e622:	461a      	mov	r2, r3
 800e624:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f7ff fc67 	bl	800defa <compensate_temperature>
 800e62c:	4602      	mov	r2, r0
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	461a      	mov	r2, r3
 800e636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f7ff fc97 	bl	800df6c <compensate_pressure>
 800e63e:	4602      	mov	r2, r0
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00d      	beq.n	800e666 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800e64a:	7fbb      	ldrb	r3, [r7, #30]
 800e64c:	021b      	lsls	r3, r3, #8
 800e64e:	7ffa      	ldrb	r2, [r7, #31]
 800e650:	4313      	orrs	r3, r2
 800e652:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	461a      	mov	r2, r3
 800e658:	6a39      	ldr	r1, [r7, #32]
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f7ff ff44 	bl	800e4e8 <compensate_humidity>
 800e660:	4602      	mov	r2, r0
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	601a      	str	r2, [r3, #0]
	}

	return true;
 800e666:	2301      	movs	r3, #1
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3730      	adds	r7, #48	@ 0x30
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 800e670:	b580      	push	{r7, lr}
 800e672:	b088      	sub	sp, #32
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
 800e67c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d002      	beq.n	800e68a <bmp280_read_float+0x1a>
 800e684:	f107 0314 	add.w	r3, r7, #20
 800e688:	e000      	b.n	800e68c <bmp280_read_float+0x1c>
 800e68a:	2300      	movs	r3, #0
 800e68c:	f107 0218 	add.w	r2, r7, #24
 800e690:	f107 011c 	add.w	r1, r7, #28
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f7ff ff86 	bl	800e5a6 <bmp280_read_fixed>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d028      	beq.n	800e6f2 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	ee07 3a90 	vmov	s15, r3
 800e6a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e6aa:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800e6fc <bmp280_read_float+0x8c>
 800e6ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	ee07 3a90 	vmov	s15, r3
 800e6be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e6c2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800e700 <bmp280_read_float+0x90>
 800e6c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00b      	beq.n	800e6ee <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	ee07 3a90 	vmov	s15, r3
 800e6dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e6e0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800e704 <bmp280_read_float+0x94>
 800e6e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e000      	b.n	800e6f4 <bmp280_read_float+0x84>
	}

	return false;
 800e6f2:	2300      	movs	r3, #0
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3720      	adds	r7, #32
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	42c80000 	.word	0x42c80000
 800e700:	43800000 	.word	0x43800000
 800e704:	44800000 	.word	0x44800000

0800e708 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	683a      	ldr	r2, [r7, #0]
 800e716:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	3304      	adds	r3, #4
 800e724:	2280      	movs	r2, #128	@ 0x80
 800e726:	2100      	movs	r1, #0
 800e728:	4618      	mov	r0, r3
 800e72a:	f001 f90c 	bl	800f946 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	3384      	adds	r3, #132	@ 0x84
 800e732:	2280      	movs	r2, #128	@ 0x80
 800e734:	2100      	movs	r1, #0
 800e736:	4618      	mov	r0, r3
 800e738:	f001 f905 	bl	800f946 <memset>
}
 800e73c:	bf00      	nop
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b088      	sub	sp, #32
 800e748:	af02      	add	r7, sp, #8
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	607a      	str	r2, [r7, #4]
 800e74e:	461a      	mov	r2, r3
 800e750:	460b      	mov	r3, r1
 800e752:	72fb      	strb	r3, [r7, #11]
 800e754:	4613      	mov	r3, r2
 800e756:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800e758:	893b      	ldrh	r3, [r7, #8]
 800e75a:	3301      	adds	r3, #1
 800e75c:	4618      	mov	r0, r3
 800e75e:	f000 fab1 	bl	800ecc4 <malloc>
 800e762:	4603      	mov	r3, r0
 800e764:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	7afa      	ldrb	r2, [r7, #11]
 800e76a:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d009      	beq.n	800e786 <max30102_write+0x42>
 800e772:	893b      	ldrh	r3, [r7, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d006      	beq.n	800e786 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	3301      	adds	r3, #1
 800e77c:	893a      	ldrh	r2, [r7, #8]
 800e77e:	6879      	ldr	r1, [r7, #4]
 800e780:	4618      	mov	r0, r3
 800e782:	f001 f970 	bl	800fa66 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6818      	ldr	r0, [r3, #0]
 800e78a:	893b      	ldrh	r3, [r7, #8]
 800e78c:	3301      	adds	r3, #1
 800e78e:	b29b      	uxth	r3, r3
 800e790:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e794:	9200      	str	r2, [sp, #0]
 800e796:	697a      	ldr	r2, [r7, #20]
 800e798:	21ae      	movs	r1, #174	@ 0xae
 800e79a:	f7f6 fedb 	bl	8005554 <HAL_I2C_Master_Transmit>
    free(payload);
 800e79e:	6978      	ldr	r0, [r7, #20]
 800e7a0:	f000 fa98 	bl	800ecd4 <free>
}
 800e7a4:	bf00      	nop
 800e7a6:	3718      	adds	r7, #24
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b088      	sub	sp, #32
 800e7b0:	af02      	add	r7, sp, #8
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	607a      	str	r2, [r7, #4]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	72fb      	strb	r3, [r7, #11]
 800e7bc:	4613      	mov	r3, r2
 800e7be:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 800e7c0:	7afb      	ldrb	r3, [r7, #11]
 800e7c2:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6818      	ldr	r0, [r3, #0]
 800e7c8:	f107 0217 	add.w	r2, r7, #23
 800e7cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	21ae      	movs	r1, #174	@ 0xae
 800e7d6:	f7f6 febd 	bl	8005554 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6818      	ldr	r0, [r3, #0]
 800e7de:	893b      	ldrh	r3, [r7, #8]
 800e7e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e7e4:	9200      	str	r2, [sp, #0]
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	21ae      	movs	r1, #174	@ 0xae
 800e7ea:	f7f6 ffcb 	bl	8005784 <HAL_I2C_Master_Receive>
}
 800e7ee:	bf00      	nop
 800e7f0:	3718      	adds	r7, #24
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 800e7fe:	2340      	movs	r3, #64	@ 0x40
 800e800:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 800e802:	f107 020f 	add.w	r2, r7, #15
 800e806:	2301      	movs	r3, #1
 800e808:	2109      	movs	r1, #9
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7ff ff9a 	bl	800e744 <max30102_write>
}
 800e810:	bf00      	nop
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 800e824:	2300      	movs	r3, #0
 800e826:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800e828:	f107 020f 	add.w	r2, r7, #15
 800e82c:	2301      	movs	r3, #1
 800e82e:	2102      	movs	r1, #2
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f7ff ffbb 	bl	800e7ac <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 800e836:	7bfb      	ldrb	r3, [r7, #15]
 800e838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 800e840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e844:	01db      	lsls	r3, r3, #7
 800e846:	b25a      	sxtb	r2, r3
 800e848:	7bfb      	ldrb	r3, [r7, #15]
 800e84a:	b25b      	sxtb	r3, r3
 800e84c:	4313      	orrs	r3, r2
 800e84e:	b25b      	sxtb	r3, r3
 800e850:	b2db      	uxtb	r3, r3
 800e852:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800e854:	f107 020f 	add.w	r2, r7, #15
 800e858:	2301      	movs	r3, #1
 800e85a:	2102      	movs	r1, #2
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7ff ff71 	bl	800e744 <max30102_write>
}
 800e862:	bf00      	nop
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b084      	sub	sp, #16
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	460b      	mov	r3, r1
 800e874:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 800e876:	78fb      	ldrb	r3, [r7, #3]
 800e878:	005b      	lsls	r3, r3, #1
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	f003 0302 	and.w	r3, r3, #2
 800e880:	b2db      	uxtb	r3, r3
 800e882:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 800e884:	f107 020f 	add.w	r2, r7, #15
 800e888:	2301      	movs	r3, #1
 800e88a:	2103      	movs	r1, #3
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f7ff ff59 	bl	800e744 <max30102_write>
}
 800e892:	bf00      	nop
 800e894:	3710      	adds	r7, #16
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}

0800e89a <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b084      	sub	sp, #16
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 800e8a6:	78fb      	ldrb	r3, [r7, #3]
 800e8a8:	005b      	lsls	r3, r3, #1
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	f003 0302 	and.w	r3, r3, #2
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 800e8b4:	f107 020f 	add.w	r2, r7, #15
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	2121      	movs	r1, #33	@ 0x21
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7ff ff41 	bl	800e744 <max30102_write>
}
 800e8c2:	bf00      	nop
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800e8ca:	b480      	push	{r7}
 800e8cc:	b083      	sub	sp, #12
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800e8da:	bf00      	nop
 800e8dc:	370c      	adds	r7, #12
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr

0800e8e6 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 800e8e6:	b480      	push	{r7}
 800e8e8:	b083      	sub	sp, #12
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 800e908:	2300      	movs	r3, #0
 800e90a:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800e90c:	f107 020c 	add.w	r2, r7, #12
 800e910:	2302      	movs	r3, #2
 800e912:	2100      	movs	r1, #0
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f7ff ff49 	bl	800e7ac <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 800e91a:	7b3b      	ldrb	r3, [r7, #12]
 800e91c:	09db      	lsrs	r3, r3, #7
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	f003 0301 	and.w	r3, r3, #1
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 f950 	bl	800ebce <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800e92e:	7b7b      	ldrb	r3, [r7, #13]
 800e930:	085b      	lsrs	r3, r3, #1
 800e932:	b2db      	uxtb	r3, r3
 800e934:	f003 0301 	and.w	r3, r3, #1
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d007      	beq.n	800e94c <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 800e93c:	f107 020a 	add.w	r2, r7, #10
 800e940:	f107 030b 	add.w	r3, r7, #11
 800e944:	4619      	mov	r1, r3
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f000 f9a6 	bl	800ec98 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800e954:	bf00      	nop
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	460b      	mov	r3, r1
 800e966:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 800e968:	f107 020f 	add.w	r2, r7, #15
 800e96c:	2301      	movs	r3, #1
 800e96e:	2109      	movs	r1, #9
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7ff ff1b 	bl	800e7ac <max30102_read>
    config = (config & 0xf8) | mode;
 800e976:	7bfb      	ldrb	r3, [r7, #15]
 800e978:	b25b      	sxtb	r3, r3
 800e97a:	f023 0307 	bic.w	r3, r3, #7
 800e97e:	b25a      	sxtb	r2, r3
 800e980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e984:	4313      	orrs	r3, r2
 800e986:	b25b      	sxtb	r3, r3
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800e98c:	f107 020f 	add.w	r2, r7, #15
 800e990:	2301      	movs	r3, #1
 800e992:	2109      	movs	r1, #9
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f7ff fed5 	bl	800e744 <max30102_write>
    max30102_clear_fifo(obj);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f000 f8f8 	bl	800eb90 <max30102_clear_fifo>
}
 800e9a0:	bf00      	nop
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800e9b4:	f107 020f 	add.w	r2, r7, #15
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	210a      	movs	r1, #10
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f7ff fef5 	bl	800e7ac <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 800e9c2:	7bfb      	ldrb	r3, [r7, #15]
 800e9c4:	b25b      	sxtb	r3, r3
 800e9c6:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 800e9ca:	b25a      	sxtb	r2, r3
 800e9cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	b25b      	sxtb	r3, r3
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	b25b      	sxtb	r3, r3
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800e9dc:	f107 020f 	add.w	r2, r7, #15
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	210a      	movs	r1, #10
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7ff fead 	bl	800e744 <max30102_write>
}
 800e9ea:	bf00      	nop
 800e9ec:	3710      	adds	r7, #16
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b084      	sub	sp, #16
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800e9fe:	f107 020f 	add.w	r2, r7, #15
 800ea02:	2301      	movs	r3, #1
 800ea04:	210a      	movs	r1, #10
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7ff fed0 	bl	800e7ac <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 800ea0c:	7bfb      	ldrb	r3, [r7, #15]
 800ea0e:	b25b      	sxtb	r3, r3
 800ea10:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800ea14:	b25a      	sxtb	r2, r3
 800ea16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	b25b      	sxtb	r3, r3
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800ea22:	f107 020f 	add.w	r2, r7, #15
 800ea26:	2301      	movs	r3, #1
 800ea28:	210a      	movs	r1, #10
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f7ff fe8a 	bl	800e744 <max30102_write>
}
 800ea30:	bf00      	nop
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	460b      	mov	r3, r1
 800ea42:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800ea44:	f107 020f 	add.w	r2, r7, #15
 800ea48:	2301      	movs	r3, #1
 800ea4a:	210a      	movs	r1, #10
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f7ff fead 	bl	800e7ac <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
 800ea54:	b25b      	sxtb	r3, r3
 800ea56:	f003 031f 	and.w	r3, r3, #31
 800ea5a:	b25a      	sxtb	r2, r3
 800ea5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea60:	015b      	lsls	r3, r3, #5
 800ea62:	b25b      	sxtb	r3, r3
 800ea64:	4313      	orrs	r3, r2
 800ea66:	b25b      	sxtb	r3, r3
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800ea6c:	f107 020f 	add.w	r2, r7, #15
 800ea70:	2301      	movs	r3, #1
 800ea72:	210a      	movs	r1, #10
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7ff fe65 	bl	800e744 <max30102_write>
}
 800ea7a:	bf00      	nop
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	0000      	movs	r0, r0
 800ea84:	0000      	movs	r0, r0
	...

0800ea88 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b086      	sub	sp, #24
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	ed87 0a02 	vstr	s0, [r7, #8]
    uint8_t pa = ma / 0.2;
 800ea94:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea98:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800ea9c:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 800eac8 <max30102_set_led_current_1+0x40>
 800eaa0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eaa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800eaa8:	edc7 7a01 	vstr	s15, [r7, #4]
 800eaac:	793b      	ldrb	r3, [r7, #4]
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	75fb      	strb	r3, [r7, #23]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 800eab2:	f107 0217 	add.w	r2, r7, #23
 800eab6:	2301      	movs	r3, #1
 800eab8:	210c      	movs	r1, #12
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f7ff fe42 	bl	800e744 <max30102_write>
}
 800eac0:	bf00      	nop
 800eac2:	3718      	adds	r7, #24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	9999999a 	.word	0x9999999a
 800eacc:	3fc99999 	.word	0x3fc99999

0800ead0 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	ed87 0a02 	vstr	s0, [r7, #8]
    uint8_t pa = ma / 0.2;
 800eadc:	edd7 7a02 	vldr	s15, [r7, #8]
 800eae0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800eae4:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 800eb10 <max30102_set_led_current_2+0x40>
 800eae8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eaec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800eaf0:	edc7 7a01 	vstr	s15, [r7, #4]
 800eaf4:	793b      	ldrb	r3, [r7, #4]
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	75fb      	strb	r3, [r7, #23]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 800eafa:	f107 0217 	add.w	r2, r7, #23
 800eafe:	2301      	movs	r3, #1
 800eb00:	210d      	movs	r1, #13
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f7ff fe1e 	bl	800e744 <max30102_write>
}
 800eb08:	bf00      	nop
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	9999999a 	.word	0x9999999a
 800eb14:	3fc99999 	.word	0x3fc99999

0800eb18 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	4608      	mov	r0, r1
 800eb22:	4611      	mov	r1, r2
 800eb24:	461a      	mov	r2, r3
 800eb26:	4603      	mov	r3, r0
 800eb28:	70fb      	strb	r3, [r7, #3]
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	70bb      	strb	r3, [r7, #2]
 800eb2e:	4613      	mov	r3, r2
 800eb30:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 800eb32:	2300      	movs	r3, #0
 800eb34:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800eb36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb3a:	015b      	lsls	r3, r3, #5
 800eb3c:	b25a      	sxtb	r2, r3
 800eb3e:	7bfb      	ldrb	r3, [r7, #15]
 800eb40:	b25b      	sxtb	r3, r3
 800eb42:	4313      	orrs	r3, r2
 800eb44:	b25b      	sxtb	r3, r3
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 800eb4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800eb4e:	011b      	lsls	r3, r3, #4
 800eb50:	b25b      	sxtb	r3, r3
 800eb52:	f003 0310 	and.w	r3, r3, #16
 800eb56:	b25a      	sxtb	r2, r3
 800eb58:	7bfb      	ldrb	r3, [r7, #15]
 800eb5a:	b25b      	sxtb	r3, r3
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	b25b      	sxtb	r3, r3
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 800eb64:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800eb68:	f003 030f 	and.w	r3, r3, #15
 800eb6c:	b25a      	sxtb	r2, r3
 800eb6e:	7bfb      	ldrb	r3, [r7, #15]
 800eb70:	b25b      	sxtb	r3, r3
 800eb72:	4313      	orrs	r3, r2
 800eb74:	b25b      	sxtb	r3, r3
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800eb7a:	f107 020f 	add.w	r2, r7, #15
 800eb7e:	2301      	movs	r3, #1
 800eb80:	2108      	movs	r1, #8
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7ff fdde 	bl	800e744 <max30102_write>
}
 800eb88:	bf00      	nop
 800eb8a:	3710      	adds	r7, #16
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 800eb9c:	f107 020f 	add.w	r2, r7, #15
 800eba0:	2303      	movs	r3, #3
 800eba2:	2104      	movs	r1, #4
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7ff fdcd 	bl	800e744 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 800ebaa:	f107 020f 	add.w	r2, r7, #15
 800ebae:	2303      	movs	r3, #3
 800ebb0:	2106      	movs	r1, #6
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7ff fdc6 	bl	800e744 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 800ebb8:	f107 020f 	add.w	r2, r7, #15
 800ebbc:	2303      	movs	r3, #3
 800ebbe:	2105      	movs	r1, #5
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7ff fdbf 	bl	800e744 <max30102_write>
}
 800ebc6:	bf00      	nop
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b088      	sub	sp, #32
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	74fb      	strb	r3, [r7, #19]
 800ebda:	2300      	movs	r3, #0
 800ebdc:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800ebde:	f107 0213 	add.w	r2, r7, #19
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	2104      	movs	r1, #4
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7ff fde0 	bl	800e7ac <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 800ebec:	f107 0212 	add.w	r2, r7, #18
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	2106      	movs	r1, #6
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7ff fdd9 	bl	800e7ac <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 800ebfa:	7cfa      	ldrb	r2, [r7, #19]
 800ebfc:	7cbb      	ldrb	r3, [r7, #18]
 800ebfe:	1ad3      	subs	r3, r2, r3
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 800ec04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	dc03      	bgt.n	800ec14 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 800ec0c:	7ffb      	ldrb	r3, [r7, #31]
 800ec0e:	3320      	adds	r3, #32
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 800ec14:	2300      	movs	r3, #0
 800ec16:	77bb      	strb	r3, [r7, #30]
 800ec18:	e033      	b.n	800ec82 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800ec1a:	f107 020c 	add.w	r2, r7, #12
 800ec1e:	2306      	movs	r3, #6
 800ec20:	2107      	movs	r1, #7
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff fdc2 	bl	800e7ac <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800ec28:	7b3b      	ldrb	r3, [r7, #12]
 800ec2a:	041a      	lsls	r2, r3, #16
 800ec2c:	7b7b      	ldrb	r3, [r7, #13]
 800ec2e:	021b      	lsls	r3, r3, #8
 800ec30:	4313      	orrs	r3, r2
 800ec32:	7bba      	ldrb	r2, [r7, #14]
 800ec34:	4313      	orrs	r3, r2
 800ec36:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800ec3a:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 800ec3c:	7bfb      	ldrb	r3, [r7, #15]
 800ec3e:	041a      	lsls	r2, r3, #16
 800ec40:	7c3b      	ldrb	r3, [r7, #16]
 800ec42:	021b      	lsls	r3, r3, #8
 800ec44:	4313      	orrs	r3, r2
 800ec46:	7c7a      	ldrb	r2, [r7, #17]
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800ec4e:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 800ec50:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	4413      	add	r3, r2
 800ec5a:	69ba      	ldr	r2, [r7, #24]
 800ec5c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 800ec5e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	3320      	adds	r3, #32
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	697a      	ldr	r2, [r7, #20]
 800ec6c:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 800ec6e:	6979      	ldr	r1, [r7, #20]
 800ec70:	69b8      	ldr	r0, [r7, #24]
 800ec72:	f7fe f8b7 	bl	800cde4 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 800ec76:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	77bb      	strb	r3, [r7, #30]
 800ec82:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800ec86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	dbc5      	blt.n	800ec1a <max30102_read_fifo+0x4c>
    }
}
 800ec8e:	bf00      	nop
 800ec90:	bf00      	nop
 800ec92:	3720      	adds	r7, #32
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 800eca4:	2301      	movs	r3, #1
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	211f      	movs	r1, #31
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	f7ff fd7e 	bl	800e7ac <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	2120      	movs	r1, #32
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f7ff fd78 	bl	800e7ac <max30102_read>
}
 800ecbc:	bf00      	nop
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <malloc>:
 800ecc4:	4b02      	ldr	r3, [pc, #8]	@ (800ecd0 <malloc+0xc>)
 800ecc6:	4601      	mov	r1, r0
 800ecc8:	6818      	ldr	r0, [r3, #0]
 800ecca:	f000 b82d 	b.w	800ed28 <_malloc_r>
 800ecce:	bf00      	nop
 800ecd0:	2400001c 	.word	0x2400001c

0800ecd4 <free>:
 800ecd4:	4b02      	ldr	r3, [pc, #8]	@ (800ece0 <free+0xc>)
 800ecd6:	4601      	mov	r1, r0
 800ecd8:	6818      	ldr	r0, [r3, #0]
 800ecda:	f001 bcbb 	b.w	8010654 <_free_r>
 800ecde:	bf00      	nop
 800ece0:	2400001c 	.word	0x2400001c

0800ece4 <sbrk_aligned>:
 800ece4:	b570      	push	{r4, r5, r6, lr}
 800ece6:	4e0f      	ldr	r6, [pc, #60]	@ (800ed24 <sbrk_aligned+0x40>)
 800ece8:	460c      	mov	r4, r1
 800ecea:	6831      	ldr	r1, [r6, #0]
 800ecec:	4605      	mov	r5, r0
 800ecee:	b911      	cbnz	r1, 800ecf6 <sbrk_aligned+0x12>
 800ecf0:	f000 fe6a 	bl	800f9c8 <_sbrk_r>
 800ecf4:	6030      	str	r0, [r6, #0]
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f000 fe65 	bl	800f9c8 <_sbrk_r>
 800ecfe:	1c43      	adds	r3, r0, #1
 800ed00:	d103      	bne.n	800ed0a <sbrk_aligned+0x26>
 800ed02:	f04f 34ff 	mov.w	r4, #4294967295
 800ed06:	4620      	mov	r0, r4
 800ed08:	bd70      	pop	{r4, r5, r6, pc}
 800ed0a:	1cc4      	adds	r4, r0, #3
 800ed0c:	f024 0403 	bic.w	r4, r4, #3
 800ed10:	42a0      	cmp	r0, r4
 800ed12:	d0f8      	beq.n	800ed06 <sbrk_aligned+0x22>
 800ed14:	1a21      	subs	r1, r4, r0
 800ed16:	4628      	mov	r0, r5
 800ed18:	f000 fe56 	bl	800f9c8 <_sbrk_r>
 800ed1c:	3001      	adds	r0, #1
 800ed1e:	d1f2      	bne.n	800ed06 <sbrk_aligned+0x22>
 800ed20:	e7ef      	b.n	800ed02 <sbrk_aligned+0x1e>
 800ed22:	bf00      	nop
 800ed24:	24000ccc 	.word	0x24000ccc

0800ed28 <_malloc_r>:
 800ed28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed2c:	1ccd      	adds	r5, r1, #3
 800ed2e:	f025 0503 	bic.w	r5, r5, #3
 800ed32:	3508      	adds	r5, #8
 800ed34:	2d0c      	cmp	r5, #12
 800ed36:	bf38      	it	cc
 800ed38:	250c      	movcc	r5, #12
 800ed3a:	2d00      	cmp	r5, #0
 800ed3c:	4606      	mov	r6, r0
 800ed3e:	db01      	blt.n	800ed44 <_malloc_r+0x1c>
 800ed40:	42a9      	cmp	r1, r5
 800ed42:	d904      	bls.n	800ed4e <_malloc_r+0x26>
 800ed44:	230c      	movs	r3, #12
 800ed46:	6033      	str	r3, [r6, #0]
 800ed48:	2000      	movs	r0, #0
 800ed4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ee24 <_malloc_r+0xfc>
 800ed52:	f000 f869 	bl	800ee28 <__malloc_lock>
 800ed56:	f8d8 3000 	ldr.w	r3, [r8]
 800ed5a:	461c      	mov	r4, r3
 800ed5c:	bb44      	cbnz	r4, 800edb0 <_malloc_r+0x88>
 800ed5e:	4629      	mov	r1, r5
 800ed60:	4630      	mov	r0, r6
 800ed62:	f7ff ffbf 	bl	800ece4 <sbrk_aligned>
 800ed66:	1c43      	adds	r3, r0, #1
 800ed68:	4604      	mov	r4, r0
 800ed6a:	d158      	bne.n	800ee1e <_malloc_r+0xf6>
 800ed6c:	f8d8 4000 	ldr.w	r4, [r8]
 800ed70:	4627      	mov	r7, r4
 800ed72:	2f00      	cmp	r7, #0
 800ed74:	d143      	bne.n	800edfe <_malloc_r+0xd6>
 800ed76:	2c00      	cmp	r4, #0
 800ed78:	d04b      	beq.n	800ee12 <_malloc_r+0xea>
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	4630      	mov	r0, r6
 800ed80:	eb04 0903 	add.w	r9, r4, r3
 800ed84:	f000 fe20 	bl	800f9c8 <_sbrk_r>
 800ed88:	4581      	cmp	r9, r0
 800ed8a:	d142      	bne.n	800ee12 <_malloc_r+0xea>
 800ed8c:	6821      	ldr	r1, [r4, #0]
 800ed8e:	1a6d      	subs	r5, r5, r1
 800ed90:	4629      	mov	r1, r5
 800ed92:	4630      	mov	r0, r6
 800ed94:	f7ff ffa6 	bl	800ece4 <sbrk_aligned>
 800ed98:	3001      	adds	r0, #1
 800ed9a:	d03a      	beq.n	800ee12 <_malloc_r+0xea>
 800ed9c:	6823      	ldr	r3, [r4, #0]
 800ed9e:	442b      	add	r3, r5
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	f8d8 3000 	ldr.w	r3, [r8]
 800eda6:	685a      	ldr	r2, [r3, #4]
 800eda8:	bb62      	cbnz	r2, 800ee04 <_malloc_r+0xdc>
 800edaa:	f8c8 7000 	str.w	r7, [r8]
 800edae:	e00f      	b.n	800edd0 <_malloc_r+0xa8>
 800edb0:	6822      	ldr	r2, [r4, #0]
 800edb2:	1b52      	subs	r2, r2, r5
 800edb4:	d420      	bmi.n	800edf8 <_malloc_r+0xd0>
 800edb6:	2a0b      	cmp	r2, #11
 800edb8:	d917      	bls.n	800edea <_malloc_r+0xc2>
 800edba:	1961      	adds	r1, r4, r5
 800edbc:	42a3      	cmp	r3, r4
 800edbe:	6025      	str	r5, [r4, #0]
 800edc0:	bf18      	it	ne
 800edc2:	6059      	strne	r1, [r3, #4]
 800edc4:	6863      	ldr	r3, [r4, #4]
 800edc6:	bf08      	it	eq
 800edc8:	f8c8 1000 	streq.w	r1, [r8]
 800edcc:	5162      	str	r2, [r4, r5]
 800edce:	604b      	str	r3, [r1, #4]
 800edd0:	4630      	mov	r0, r6
 800edd2:	f000 f82f 	bl	800ee34 <__malloc_unlock>
 800edd6:	f104 000b 	add.w	r0, r4, #11
 800edda:	1d23      	adds	r3, r4, #4
 800eddc:	f020 0007 	bic.w	r0, r0, #7
 800ede0:	1ac2      	subs	r2, r0, r3
 800ede2:	bf1c      	itt	ne
 800ede4:	1a1b      	subne	r3, r3, r0
 800ede6:	50a3      	strne	r3, [r4, r2]
 800ede8:	e7af      	b.n	800ed4a <_malloc_r+0x22>
 800edea:	6862      	ldr	r2, [r4, #4]
 800edec:	42a3      	cmp	r3, r4
 800edee:	bf0c      	ite	eq
 800edf0:	f8c8 2000 	streq.w	r2, [r8]
 800edf4:	605a      	strne	r2, [r3, #4]
 800edf6:	e7eb      	b.n	800edd0 <_malloc_r+0xa8>
 800edf8:	4623      	mov	r3, r4
 800edfa:	6864      	ldr	r4, [r4, #4]
 800edfc:	e7ae      	b.n	800ed5c <_malloc_r+0x34>
 800edfe:	463c      	mov	r4, r7
 800ee00:	687f      	ldr	r7, [r7, #4]
 800ee02:	e7b6      	b.n	800ed72 <_malloc_r+0x4a>
 800ee04:	461a      	mov	r2, r3
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	42a3      	cmp	r3, r4
 800ee0a:	d1fb      	bne.n	800ee04 <_malloc_r+0xdc>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	6053      	str	r3, [r2, #4]
 800ee10:	e7de      	b.n	800edd0 <_malloc_r+0xa8>
 800ee12:	230c      	movs	r3, #12
 800ee14:	6033      	str	r3, [r6, #0]
 800ee16:	4630      	mov	r0, r6
 800ee18:	f000 f80c 	bl	800ee34 <__malloc_unlock>
 800ee1c:	e794      	b.n	800ed48 <_malloc_r+0x20>
 800ee1e:	6005      	str	r5, [r0, #0]
 800ee20:	e7d6      	b.n	800edd0 <_malloc_r+0xa8>
 800ee22:	bf00      	nop
 800ee24:	24000cd0 	.word	0x24000cd0

0800ee28 <__malloc_lock>:
 800ee28:	4801      	ldr	r0, [pc, #4]	@ (800ee30 <__malloc_lock+0x8>)
 800ee2a:	f000 be1a 	b.w	800fa62 <__retarget_lock_acquire_recursive>
 800ee2e:	bf00      	nop
 800ee30:	24000e14 	.word	0x24000e14

0800ee34 <__malloc_unlock>:
 800ee34:	4801      	ldr	r0, [pc, #4]	@ (800ee3c <__malloc_unlock+0x8>)
 800ee36:	f000 be15 	b.w	800fa64 <__retarget_lock_release_recursive>
 800ee3a:	bf00      	nop
 800ee3c:	24000e14 	.word	0x24000e14

0800ee40 <__cvt>:
 800ee40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee42:	ed2d 8b02 	vpush	{d8}
 800ee46:	eeb0 8b40 	vmov.f64	d8, d0
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	4617      	mov	r7, r2
 800ee4e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ee50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee52:	ee18 2a90 	vmov	r2, s17
 800ee56:	f025 0520 	bic.w	r5, r5, #32
 800ee5a:	2a00      	cmp	r2, #0
 800ee5c:	bfb6      	itet	lt
 800ee5e:	222d      	movlt	r2, #45	@ 0x2d
 800ee60:	2200      	movge	r2, #0
 800ee62:	eeb1 8b40 	vneglt.f64	d8, d0
 800ee66:	2d46      	cmp	r5, #70	@ 0x46
 800ee68:	460c      	mov	r4, r1
 800ee6a:	701a      	strb	r2, [r3, #0]
 800ee6c:	d004      	beq.n	800ee78 <__cvt+0x38>
 800ee6e:	2d45      	cmp	r5, #69	@ 0x45
 800ee70:	d100      	bne.n	800ee74 <__cvt+0x34>
 800ee72:	3401      	adds	r4, #1
 800ee74:	2102      	movs	r1, #2
 800ee76:	e000      	b.n	800ee7a <__cvt+0x3a>
 800ee78:	2103      	movs	r1, #3
 800ee7a:	ab03      	add	r3, sp, #12
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	ab02      	add	r3, sp, #8
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	4622      	mov	r2, r4
 800ee84:	4633      	mov	r3, r6
 800ee86:	eeb0 0b48 	vmov.f64	d0, d8
 800ee8a:	f000 fe85 	bl	800fb98 <_dtoa_r>
 800ee8e:	2d47      	cmp	r5, #71	@ 0x47
 800ee90:	d114      	bne.n	800eebc <__cvt+0x7c>
 800ee92:	07fb      	lsls	r3, r7, #31
 800ee94:	d50a      	bpl.n	800eeac <__cvt+0x6c>
 800ee96:	1902      	adds	r2, r0, r4
 800ee98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ee9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea0:	bf08      	it	eq
 800eea2:	9203      	streq	r2, [sp, #12]
 800eea4:	2130      	movs	r1, #48	@ 0x30
 800eea6:	9b03      	ldr	r3, [sp, #12]
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d319      	bcc.n	800eee0 <__cvt+0xa0>
 800eeac:	9b03      	ldr	r3, [sp, #12]
 800eeae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eeb0:	1a1b      	subs	r3, r3, r0
 800eeb2:	6013      	str	r3, [r2, #0]
 800eeb4:	b005      	add	sp, #20
 800eeb6:	ecbd 8b02 	vpop	{d8}
 800eeba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eebc:	2d46      	cmp	r5, #70	@ 0x46
 800eebe:	eb00 0204 	add.w	r2, r0, r4
 800eec2:	d1e9      	bne.n	800ee98 <__cvt+0x58>
 800eec4:	7803      	ldrb	r3, [r0, #0]
 800eec6:	2b30      	cmp	r3, #48	@ 0x30
 800eec8:	d107      	bne.n	800eeda <__cvt+0x9a>
 800eeca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed2:	bf1c      	itt	ne
 800eed4:	f1c4 0401 	rsbne	r4, r4, #1
 800eed8:	6034      	strne	r4, [r6, #0]
 800eeda:	6833      	ldr	r3, [r6, #0]
 800eedc:	441a      	add	r2, r3
 800eede:	e7db      	b.n	800ee98 <__cvt+0x58>
 800eee0:	1c5c      	adds	r4, r3, #1
 800eee2:	9403      	str	r4, [sp, #12]
 800eee4:	7019      	strb	r1, [r3, #0]
 800eee6:	e7de      	b.n	800eea6 <__cvt+0x66>

0800eee8 <__exponent>:
 800eee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eeea:	2900      	cmp	r1, #0
 800eeec:	bfba      	itte	lt
 800eeee:	4249      	neglt	r1, r1
 800eef0:	232d      	movlt	r3, #45	@ 0x2d
 800eef2:	232b      	movge	r3, #43	@ 0x2b
 800eef4:	2909      	cmp	r1, #9
 800eef6:	7002      	strb	r2, [r0, #0]
 800eef8:	7043      	strb	r3, [r0, #1]
 800eefa:	dd29      	ble.n	800ef50 <__exponent+0x68>
 800eefc:	f10d 0307 	add.w	r3, sp, #7
 800ef00:	461d      	mov	r5, r3
 800ef02:	270a      	movs	r7, #10
 800ef04:	461a      	mov	r2, r3
 800ef06:	fbb1 f6f7 	udiv	r6, r1, r7
 800ef0a:	fb07 1416 	mls	r4, r7, r6, r1
 800ef0e:	3430      	adds	r4, #48	@ 0x30
 800ef10:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ef14:	460c      	mov	r4, r1
 800ef16:	2c63      	cmp	r4, #99	@ 0x63
 800ef18:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef1c:	4631      	mov	r1, r6
 800ef1e:	dcf1      	bgt.n	800ef04 <__exponent+0x1c>
 800ef20:	3130      	adds	r1, #48	@ 0x30
 800ef22:	1e94      	subs	r4, r2, #2
 800ef24:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ef28:	1c41      	adds	r1, r0, #1
 800ef2a:	4623      	mov	r3, r4
 800ef2c:	42ab      	cmp	r3, r5
 800ef2e:	d30a      	bcc.n	800ef46 <__exponent+0x5e>
 800ef30:	f10d 0309 	add.w	r3, sp, #9
 800ef34:	1a9b      	subs	r3, r3, r2
 800ef36:	42ac      	cmp	r4, r5
 800ef38:	bf88      	it	hi
 800ef3a:	2300      	movhi	r3, #0
 800ef3c:	3302      	adds	r3, #2
 800ef3e:	4403      	add	r3, r0
 800ef40:	1a18      	subs	r0, r3, r0
 800ef42:	b003      	add	sp, #12
 800ef44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef46:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ef4a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ef4e:	e7ed      	b.n	800ef2c <__exponent+0x44>
 800ef50:	2330      	movs	r3, #48	@ 0x30
 800ef52:	3130      	adds	r1, #48	@ 0x30
 800ef54:	7083      	strb	r3, [r0, #2]
 800ef56:	70c1      	strb	r1, [r0, #3]
 800ef58:	1d03      	adds	r3, r0, #4
 800ef5a:	e7f1      	b.n	800ef40 <__exponent+0x58>
 800ef5c:	0000      	movs	r0, r0
	...

0800ef60 <_printf_float>:
 800ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef64:	b08d      	sub	sp, #52	@ 0x34
 800ef66:	460c      	mov	r4, r1
 800ef68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ef6c:	4616      	mov	r6, r2
 800ef6e:	461f      	mov	r7, r3
 800ef70:	4605      	mov	r5, r0
 800ef72:	f000 fcf1 	bl	800f958 <_localeconv_r>
 800ef76:	f8d0 b000 	ldr.w	fp, [r0]
 800ef7a:	4658      	mov	r0, fp
 800ef7c:	f7f1 fa08 	bl	8000390 <strlen>
 800ef80:	2300      	movs	r3, #0
 800ef82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef84:	f8d8 3000 	ldr.w	r3, [r8]
 800ef88:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ef8c:	6822      	ldr	r2, [r4, #0]
 800ef8e:	9005      	str	r0, [sp, #20]
 800ef90:	3307      	adds	r3, #7
 800ef92:	f023 0307 	bic.w	r3, r3, #7
 800ef96:	f103 0108 	add.w	r1, r3, #8
 800ef9a:	f8c8 1000 	str.w	r1, [r8]
 800ef9e:	ed93 0b00 	vldr	d0, [r3]
 800efa2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f200 <_printf_float+0x2a0>
 800efa6:	eeb0 7bc0 	vabs.f64	d7, d0
 800efaa:	eeb4 7b46 	vcmp.f64	d7, d6
 800efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800efb6:	dd24      	ble.n	800f002 <_printf_float+0xa2>
 800efb8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800efbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc0:	d502      	bpl.n	800efc8 <_printf_float+0x68>
 800efc2:	232d      	movs	r3, #45	@ 0x2d
 800efc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efc8:	498f      	ldr	r1, [pc, #572]	@ (800f208 <_printf_float+0x2a8>)
 800efca:	4b90      	ldr	r3, [pc, #576]	@ (800f20c <_printf_float+0x2ac>)
 800efcc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800efd0:	bf8c      	ite	hi
 800efd2:	4688      	movhi	r8, r1
 800efd4:	4698      	movls	r8, r3
 800efd6:	f022 0204 	bic.w	r2, r2, #4
 800efda:	2303      	movs	r3, #3
 800efdc:	6123      	str	r3, [r4, #16]
 800efde:	6022      	str	r2, [r4, #0]
 800efe0:	f04f 0a00 	mov.w	sl, #0
 800efe4:	9700      	str	r7, [sp, #0]
 800efe6:	4633      	mov	r3, r6
 800efe8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800efea:	4621      	mov	r1, r4
 800efec:	4628      	mov	r0, r5
 800efee:	f000 f9d1 	bl	800f394 <_printf_common>
 800eff2:	3001      	adds	r0, #1
 800eff4:	f040 8089 	bne.w	800f10a <_printf_float+0x1aa>
 800eff8:	f04f 30ff 	mov.w	r0, #4294967295
 800effc:	b00d      	add	sp, #52	@ 0x34
 800effe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f002:	eeb4 0b40 	vcmp.f64	d0, d0
 800f006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00a:	d709      	bvc.n	800f020 <_printf_float+0xc0>
 800f00c:	ee10 3a90 	vmov	r3, s1
 800f010:	2b00      	cmp	r3, #0
 800f012:	bfbc      	itt	lt
 800f014:	232d      	movlt	r3, #45	@ 0x2d
 800f016:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f01a:	497d      	ldr	r1, [pc, #500]	@ (800f210 <_printf_float+0x2b0>)
 800f01c:	4b7d      	ldr	r3, [pc, #500]	@ (800f214 <_printf_float+0x2b4>)
 800f01e:	e7d5      	b.n	800efcc <_printf_float+0x6c>
 800f020:	6863      	ldr	r3, [r4, #4]
 800f022:	1c59      	adds	r1, r3, #1
 800f024:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f028:	d139      	bne.n	800f09e <_printf_float+0x13e>
 800f02a:	2306      	movs	r3, #6
 800f02c:	6063      	str	r3, [r4, #4]
 800f02e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f032:	2300      	movs	r3, #0
 800f034:	6022      	str	r2, [r4, #0]
 800f036:	9303      	str	r3, [sp, #12]
 800f038:	ab0a      	add	r3, sp, #40	@ 0x28
 800f03a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f03e:	ab09      	add	r3, sp, #36	@ 0x24
 800f040:	9300      	str	r3, [sp, #0]
 800f042:	6861      	ldr	r1, [r4, #4]
 800f044:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f048:	4628      	mov	r0, r5
 800f04a:	f7ff fef9 	bl	800ee40 <__cvt>
 800f04e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f052:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f054:	4680      	mov	r8, r0
 800f056:	d129      	bne.n	800f0ac <_printf_float+0x14c>
 800f058:	1cc8      	adds	r0, r1, #3
 800f05a:	db02      	blt.n	800f062 <_printf_float+0x102>
 800f05c:	6863      	ldr	r3, [r4, #4]
 800f05e:	4299      	cmp	r1, r3
 800f060:	dd41      	ble.n	800f0e6 <_printf_float+0x186>
 800f062:	f1a9 0902 	sub.w	r9, r9, #2
 800f066:	fa5f f989 	uxtb.w	r9, r9
 800f06a:	3901      	subs	r1, #1
 800f06c:	464a      	mov	r2, r9
 800f06e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f072:	9109      	str	r1, [sp, #36]	@ 0x24
 800f074:	f7ff ff38 	bl	800eee8 <__exponent>
 800f078:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f07a:	1813      	adds	r3, r2, r0
 800f07c:	2a01      	cmp	r2, #1
 800f07e:	4682      	mov	sl, r0
 800f080:	6123      	str	r3, [r4, #16]
 800f082:	dc02      	bgt.n	800f08a <_printf_float+0x12a>
 800f084:	6822      	ldr	r2, [r4, #0]
 800f086:	07d2      	lsls	r2, r2, #31
 800f088:	d501      	bpl.n	800f08e <_printf_float+0x12e>
 800f08a:	3301      	adds	r3, #1
 800f08c:	6123      	str	r3, [r4, #16]
 800f08e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f092:	2b00      	cmp	r3, #0
 800f094:	d0a6      	beq.n	800efe4 <_printf_float+0x84>
 800f096:	232d      	movs	r3, #45	@ 0x2d
 800f098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f09c:	e7a2      	b.n	800efe4 <_printf_float+0x84>
 800f09e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f0a2:	d1c4      	bne.n	800f02e <_printf_float+0xce>
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d1c2      	bne.n	800f02e <_printf_float+0xce>
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e7bf      	b.n	800f02c <_printf_float+0xcc>
 800f0ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f0b0:	d9db      	bls.n	800f06a <_printf_float+0x10a>
 800f0b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f0b6:	d118      	bne.n	800f0ea <_printf_float+0x18a>
 800f0b8:	2900      	cmp	r1, #0
 800f0ba:	6863      	ldr	r3, [r4, #4]
 800f0bc:	dd0b      	ble.n	800f0d6 <_printf_float+0x176>
 800f0be:	6121      	str	r1, [r4, #16]
 800f0c0:	b913      	cbnz	r3, 800f0c8 <_printf_float+0x168>
 800f0c2:	6822      	ldr	r2, [r4, #0]
 800f0c4:	07d0      	lsls	r0, r2, #31
 800f0c6:	d502      	bpl.n	800f0ce <_printf_float+0x16e>
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	440b      	add	r3, r1
 800f0cc:	6123      	str	r3, [r4, #16]
 800f0ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f0d0:	f04f 0a00 	mov.w	sl, #0
 800f0d4:	e7db      	b.n	800f08e <_printf_float+0x12e>
 800f0d6:	b913      	cbnz	r3, 800f0de <_printf_float+0x17e>
 800f0d8:	6822      	ldr	r2, [r4, #0]
 800f0da:	07d2      	lsls	r2, r2, #31
 800f0dc:	d501      	bpl.n	800f0e2 <_printf_float+0x182>
 800f0de:	3302      	adds	r3, #2
 800f0e0:	e7f4      	b.n	800f0cc <_printf_float+0x16c>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e7f2      	b.n	800f0cc <_printf_float+0x16c>
 800f0e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f0ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0ec:	4299      	cmp	r1, r3
 800f0ee:	db05      	blt.n	800f0fc <_printf_float+0x19c>
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	6121      	str	r1, [r4, #16]
 800f0f4:	07d8      	lsls	r0, r3, #31
 800f0f6:	d5ea      	bpl.n	800f0ce <_printf_float+0x16e>
 800f0f8:	1c4b      	adds	r3, r1, #1
 800f0fa:	e7e7      	b.n	800f0cc <_printf_float+0x16c>
 800f0fc:	2900      	cmp	r1, #0
 800f0fe:	bfd4      	ite	le
 800f100:	f1c1 0202 	rsble	r2, r1, #2
 800f104:	2201      	movgt	r2, #1
 800f106:	4413      	add	r3, r2
 800f108:	e7e0      	b.n	800f0cc <_printf_float+0x16c>
 800f10a:	6823      	ldr	r3, [r4, #0]
 800f10c:	055a      	lsls	r2, r3, #21
 800f10e:	d407      	bmi.n	800f120 <_printf_float+0x1c0>
 800f110:	6923      	ldr	r3, [r4, #16]
 800f112:	4642      	mov	r2, r8
 800f114:	4631      	mov	r1, r6
 800f116:	4628      	mov	r0, r5
 800f118:	47b8      	blx	r7
 800f11a:	3001      	adds	r0, #1
 800f11c:	d12a      	bne.n	800f174 <_printf_float+0x214>
 800f11e:	e76b      	b.n	800eff8 <_printf_float+0x98>
 800f120:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f124:	f240 80e0 	bls.w	800f2e8 <_printf_float+0x388>
 800f128:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f12c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f134:	d133      	bne.n	800f19e <_printf_float+0x23e>
 800f136:	4a38      	ldr	r2, [pc, #224]	@ (800f218 <_printf_float+0x2b8>)
 800f138:	2301      	movs	r3, #1
 800f13a:	4631      	mov	r1, r6
 800f13c:	4628      	mov	r0, r5
 800f13e:	47b8      	blx	r7
 800f140:	3001      	adds	r0, #1
 800f142:	f43f af59 	beq.w	800eff8 <_printf_float+0x98>
 800f146:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f14a:	4543      	cmp	r3, r8
 800f14c:	db02      	blt.n	800f154 <_printf_float+0x1f4>
 800f14e:	6823      	ldr	r3, [r4, #0]
 800f150:	07d8      	lsls	r0, r3, #31
 800f152:	d50f      	bpl.n	800f174 <_printf_float+0x214>
 800f154:	9b05      	ldr	r3, [sp, #20]
 800f156:	465a      	mov	r2, fp
 800f158:	4631      	mov	r1, r6
 800f15a:	4628      	mov	r0, r5
 800f15c:	47b8      	blx	r7
 800f15e:	3001      	adds	r0, #1
 800f160:	f43f af4a 	beq.w	800eff8 <_printf_float+0x98>
 800f164:	f04f 0900 	mov.w	r9, #0
 800f168:	f108 38ff 	add.w	r8, r8, #4294967295
 800f16c:	f104 0a1a 	add.w	sl, r4, #26
 800f170:	45c8      	cmp	r8, r9
 800f172:	dc09      	bgt.n	800f188 <_printf_float+0x228>
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	079b      	lsls	r3, r3, #30
 800f178:	f100 8107 	bmi.w	800f38a <_printf_float+0x42a>
 800f17c:	68e0      	ldr	r0, [r4, #12]
 800f17e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f180:	4298      	cmp	r0, r3
 800f182:	bfb8      	it	lt
 800f184:	4618      	movlt	r0, r3
 800f186:	e739      	b.n	800effc <_printf_float+0x9c>
 800f188:	2301      	movs	r3, #1
 800f18a:	4652      	mov	r2, sl
 800f18c:	4631      	mov	r1, r6
 800f18e:	4628      	mov	r0, r5
 800f190:	47b8      	blx	r7
 800f192:	3001      	adds	r0, #1
 800f194:	f43f af30 	beq.w	800eff8 <_printf_float+0x98>
 800f198:	f109 0901 	add.w	r9, r9, #1
 800f19c:	e7e8      	b.n	800f170 <_printf_float+0x210>
 800f19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	dc3b      	bgt.n	800f21c <_printf_float+0x2bc>
 800f1a4:	4a1c      	ldr	r2, [pc, #112]	@ (800f218 <_printf_float+0x2b8>)
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	4631      	mov	r1, r6
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	47b8      	blx	r7
 800f1ae:	3001      	adds	r0, #1
 800f1b0:	f43f af22 	beq.w	800eff8 <_printf_float+0x98>
 800f1b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f1b8:	ea59 0303 	orrs.w	r3, r9, r3
 800f1bc:	d102      	bne.n	800f1c4 <_printf_float+0x264>
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	07d9      	lsls	r1, r3, #31
 800f1c2:	d5d7      	bpl.n	800f174 <_printf_float+0x214>
 800f1c4:	9b05      	ldr	r3, [sp, #20]
 800f1c6:	465a      	mov	r2, fp
 800f1c8:	4631      	mov	r1, r6
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	47b8      	blx	r7
 800f1ce:	3001      	adds	r0, #1
 800f1d0:	f43f af12 	beq.w	800eff8 <_printf_float+0x98>
 800f1d4:	f04f 0a00 	mov.w	sl, #0
 800f1d8:	f104 0b1a 	add.w	fp, r4, #26
 800f1dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1de:	425b      	negs	r3, r3
 800f1e0:	4553      	cmp	r3, sl
 800f1e2:	dc01      	bgt.n	800f1e8 <_printf_float+0x288>
 800f1e4:	464b      	mov	r3, r9
 800f1e6:	e794      	b.n	800f112 <_printf_float+0x1b2>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	465a      	mov	r2, fp
 800f1ec:	4631      	mov	r1, r6
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	47b8      	blx	r7
 800f1f2:	3001      	adds	r0, #1
 800f1f4:	f43f af00 	beq.w	800eff8 <_printf_float+0x98>
 800f1f8:	f10a 0a01 	add.w	sl, sl, #1
 800f1fc:	e7ee      	b.n	800f1dc <_printf_float+0x27c>
 800f1fe:	bf00      	nop
 800f200:	ffffffff 	.word	0xffffffff
 800f204:	7fefffff 	.word	0x7fefffff
 800f208:	08011cc4 	.word	0x08011cc4
 800f20c:	08011cc0 	.word	0x08011cc0
 800f210:	08011ccc 	.word	0x08011ccc
 800f214:	08011cc8 	.word	0x08011cc8
 800f218:	08011cd0 	.word	0x08011cd0
 800f21c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f21e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f222:	4553      	cmp	r3, sl
 800f224:	bfa8      	it	ge
 800f226:	4653      	movge	r3, sl
 800f228:	2b00      	cmp	r3, #0
 800f22a:	4699      	mov	r9, r3
 800f22c:	dc37      	bgt.n	800f29e <_printf_float+0x33e>
 800f22e:	2300      	movs	r3, #0
 800f230:	9307      	str	r3, [sp, #28]
 800f232:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f236:	f104 021a 	add.w	r2, r4, #26
 800f23a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f23c:	9907      	ldr	r1, [sp, #28]
 800f23e:	9306      	str	r3, [sp, #24]
 800f240:	eba3 0309 	sub.w	r3, r3, r9
 800f244:	428b      	cmp	r3, r1
 800f246:	dc31      	bgt.n	800f2ac <_printf_float+0x34c>
 800f248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f24a:	459a      	cmp	sl, r3
 800f24c:	dc3b      	bgt.n	800f2c6 <_printf_float+0x366>
 800f24e:	6823      	ldr	r3, [r4, #0]
 800f250:	07da      	lsls	r2, r3, #31
 800f252:	d438      	bmi.n	800f2c6 <_printf_float+0x366>
 800f254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f256:	ebaa 0903 	sub.w	r9, sl, r3
 800f25a:	9b06      	ldr	r3, [sp, #24]
 800f25c:	ebaa 0303 	sub.w	r3, sl, r3
 800f260:	4599      	cmp	r9, r3
 800f262:	bfa8      	it	ge
 800f264:	4699      	movge	r9, r3
 800f266:	f1b9 0f00 	cmp.w	r9, #0
 800f26a:	dc34      	bgt.n	800f2d6 <_printf_float+0x376>
 800f26c:	f04f 0800 	mov.w	r8, #0
 800f270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f274:	f104 0b1a 	add.w	fp, r4, #26
 800f278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f27a:	ebaa 0303 	sub.w	r3, sl, r3
 800f27e:	eba3 0309 	sub.w	r3, r3, r9
 800f282:	4543      	cmp	r3, r8
 800f284:	f77f af76 	ble.w	800f174 <_printf_float+0x214>
 800f288:	2301      	movs	r3, #1
 800f28a:	465a      	mov	r2, fp
 800f28c:	4631      	mov	r1, r6
 800f28e:	4628      	mov	r0, r5
 800f290:	47b8      	blx	r7
 800f292:	3001      	adds	r0, #1
 800f294:	f43f aeb0 	beq.w	800eff8 <_printf_float+0x98>
 800f298:	f108 0801 	add.w	r8, r8, #1
 800f29c:	e7ec      	b.n	800f278 <_printf_float+0x318>
 800f29e:	4642      	mov	r2, r8
 800f2a0:	4631      	mov	r1, r6
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	47b8      	blx	r7
 800f2a6:	3001      	adds	r0, #1
 800f2a8:	d1c1      	bne.n	800f22e <_printf_float+0x2ce>
 800f2aa:	e6a5      	b.n	800eff8 <_printf_float+0x98>
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	4631      	mov	r1, r6
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	9206      	str	r2, [sp, #24]
 800f2b4:	47b8      	blx	r7
 800f2b6:	3001      	adds	r0, #1
 800f2b8:	f43f ae9e 	beq.w	800eff8 <_printf_float+0x98>
 800f2bc:	9b07      	ldr	r3, [sp, #28]
 800f2be:	9a06      	ldr	r2, [sp, #24]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	9307      	str	r3, [sp, #28]
 800f2c4:	e7b9      	b.n	800f23a <_printf_float+0x2da>
 800f2c6:	9b05      	ldr	r3, [sp, #20]
 800f2c8:	465a      	mov	r2, fp
 800f2ca:	4631      	mov	r1, r6
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	47b8      	blx	r7
 800f2d0:	3001      	adds	r0, #1
 800f2d2:	d1bf      	bne.n	800f254 <_printf_float+0x2f4>
 800f2d4:	e690      	b.n	800eff8 <_printf_float+0x98>
 800f2d6:	9a06      	ldr	r2, [sp, #24]
 800f2d8:	464b      	mov	r3, r9
 800f2da:	4442      	add	r2, r8
 800f2dc:	4631      	mov	r1, r6
 800f2de:	4628      	mov	r0, r5
 800f2e0:	47b8      	blx	r7
 800f2e2:	3001      	adds	r0, #1
 800f2e4:	d1c2      	bne.n	800f26c <_printf_float+0x30c>
 800f2e6:	e687      	b.n	800eff8 <_printf_float+0x98>
 800f2e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f2ec:	f1b9 0f01 	cmp.w	r9, #1
 800f2f0:	dc01      	bgt.n	800f2f6 <_printf_float+0x396>
 800f2f2:	07db      	lsls	r3, r3, #31
 800f2f4:	d536      	bpl.n	800f364 <_printf_float+0x404>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	4642      	mov	r2, r8
 800f2fa:	4631      	mov	r1, r6
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	47b8      	blx	r7
 800f300:	3001      	adds	r0, #1
 800f302:	f43f ae79 	beq.w	800eff8 <_printf_float+0x98>
 800f306:	9b05      	ldr	r3, [sp, #20]
 800f308:	465a      	mov	r2, fp
 800f30a:	4631      	mov	r1, r6
 800f30c:	4628      	mov	r0, r5
 800f30e:	47b8      	blx	r7
 800f310:	3001      	adds	r0, #1
 800f312:	f43f ae71 	beq.w	800eff8 <_printf_float+0x98>
 800f316:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f31a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f322:	f109 39ff 	add.w	r9, r9, #4294967295
 800f326:	d018      	beq.n	800f35a <_printf_float+0x3fa>
 800f328:	464b      	mov	r3, r9
 800f32a:	f108 0201 	add.w	r2, r8, #1
 800f32e:	4631      	mov	r1, r6
 800f330:	4628      	mov	r0, r5
 800f332:	47b8      	blx	r7
 800f334:	3001      	adds	r0, #1
 800f336:	d10c      	bne.n	800f352 <_printf_float+0x3f2>
 800f338:	e65e      	b.n	800eff8 <_printf_float+0x98>
 800f33a:	2301      	movs	r3, #1
 800f33c:	465a      	mov	r2, fp
 800f33e:	4631      	mov	r1, r6
 800f340:	4628      	mov	r0, r5
 800f342:	47b8      	blx	r7
 800f344:	3001      	adds	r0, #1
 800f346:	f43f ae57 	beq.w	800eff8 <_printf_float+0x98>
 800f34a:	f108 0801 	add.w	r8, r8, #1
 800f34e:	45c8      	cmp	r8, r9
 800f350:	dbf3      	blt.n	800f33a <_printf_float+0x3da>
 800f352:	4653      	mov	r3, sl
 800f354:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f358:	e6dc      	b.n	800f114 <_printf_float+0x1b4>
 800f35a:	f04f 0800 	mov.w	r8, #0
 800f35e:	f104 0b1a 	add.w	fp, r4, #26
 800f362:	e7f4      	b.n	800f34e <_printf_float+0x3ee>
 800f364:	2301      	movs	r3, #1
 800f366:	4642      	mov	r2, r8
 800f368:	e7e1      	b.n	800f32e <_printf_float+0x3ce>
 800f36a:	2301      	movs	r3, #1
 800f36c:	464a      	mov	r2, r9
 800f36e:	4631      	mov	r1, r6
 800f370:	4628      	mov	r0, r5
 800f372:	47b8      	blx	r7
 800f374:	3001      	adds	r0, #1
 800f376:	f43f ae3f 	beq.w	800eff8 <_printf_float+0x98>
 800f37a:	f108 0801 	add.w	r8, r8, #1
 800f37e:	68e3      	ldr	r3, [r4, #12]
 800f380:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f382:	1a5b      	subs	r3, r3, r1
 800f384:	4543      	cmp	r3, r8
 800f386:	dcf0      	bgt.n	800f36a <_printf_float+0x40a>
 800f388:	e6f8      	b.n	800f17c <_printf_float+0x21c>
 800f38a:	f04f 0800 	mov.w	r8, #0
 800f38e:	f104 0919 	add.w	r9, r4, #25
 800f392:	e7f4      	b.n	800f37e <_printf_float+0x41e>

0800f394 <_printf_common>:
 800f394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f398:	4616      	mov	r6, r2
 800f39a:	4698      	mov	r8, r3
 800f39c:	688a      	ldr	r2, [r1, #8]
 800f39e:	690b      	ldr	r3, [r1, #16]
 800f3a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	bfb8      	it	lt
 800f3a8:	4613      	movlt	r3, r2
 800f3aa:	6033      	str	r3, [r6, #0]
 800f3ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f3b0:	4607      	mov	r7, r0
 800f3b2:	460c      	mov	r4, r1
 800f3b4:	b10a      	cbz	r2, 800f3ba <_printf_common+0x26>
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	6033      	str	r3, [r6, #0]
 800f3ba:	6823      	ldr	r3, [r4, #0]
 800f3bc:	0699      	lsls	r1, r3, #26
 800f3be:	bf42      	ittt	mi
 800f3c0:	6833      	ldrmi	r3, [r6, #0]
 800f3c2:	3302      	addmi	r3, #2
 800f3c4:	6033      	strmi	r3, [r6, #0]
 800f3c6:	6825      	ldr	r5, [r4, #0]
 800f3c8:	f015 0506 	ands.w	r5, r5, #6
 800f3cc:	d106      	bne.n	800f3dc <_printf_common+0x48>
 800f3ce:	f104 0a19 	add.w	sl, r4, #25
 800f3d2:	68e3      	ldr	r3, [r4, #12]
 800f3d4:	6832      	ldr	r2, [r6, #0]
 800f3d6:	1a9b      	subs	r3, r3, r2
 800f3d8:	42ab      	cmp	r3, r5
 800f3da:	dc26      	bgt.n	800f42a <_printf_common+0x96>
 800f3dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f3e0:	6822      	ldr	r2, [r4, #0]
 800f3e2:	3b00      	subs	r3, #0
 800f3e4:	bf18      	it	ne
 800f3e6:	2301      	movne	r3, #1
 800f3e8:	0692      	lsls	r2, r2, #26
 800f3ea:	d42b      	bmi.n	800f444 <_printf_common+0xb0>
 800f3ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f3f0:	4641      	mov	r1, r8
 800f3f2:	4638      	mov	r0, r7
 800f3f4:	47c8      	blx	r9
 800f3f6:	3001      	adds	r0, #1
 800f3f8:	d01e      	beq.n	800f438 <_printf_common+0xa4>
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	6922      	ldr	r2, [r4, #16]
 800f3fe:	f003 0306 	and.w	r3, r3, #6
 800f402:	2b04      	cmp	r3, #4
 800f404:	bf02      	ittt	eq
 800f406:	68e5      	ldreq	r5, [r4, #12]
 800f408:	6833      	ldreq	r3, [r6, #0]
 800f40a:	1aed      	subeq	r5, r5, r3
 800f40c:	68a3      	ldr	r3, [r4, #8]
 800f40e:	bf0c      	ite	eq
 800f410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f414:	2500      	movne	r5, #0
 800f416:	4293      	cmp	r3, r2
 800f418:	bfc4      	itt	gt
 800f41a:	1a9b      	subgt	r3, r3, r2
 800f41c:	18ed      	addgt	r5, r5, r3
 800f41e:	2600      	movs	r6, #0
 800f420:	341a      	adds	r4, #26
 800f422:	42b5      	cmp	r5, r6
 800f424:	d11a      	bne.n	800f45c <_printf_common+0xc8>
 800f426:	2000      	movs	r0, #0
 800f428:	e008      	b.n	800f43c <_printf_common+0xa8>
 800f42a:	2301      	movs	r3, #1
 800f42c:	4652      	mov	r2, sl
 800f42e:	4641      	mov	r1, r8
 800f430:	4638      	mov	r0, r7
 800f432:	47c8      	blx	r9
 800f434:	3001      	adds	r0, #1
 800f436:	d103      	bne.n	800f440 <_printf_common+0xac>
 800f438:	f04f 30ff 	mov.w	r0, #4294967295
 800f43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f440:	3501      	adds	r5, #1
 800f442:	e7c6      	b.n	800f3d2 <_printf_common+0x3e>
 800f444:	18e1      	adds	r1, r4, r3
 800f446:	1c5a      	adds	r2, r3, #1
 800f448:	2030      	movs	r0, #48	@ 0x30
 800f44a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f44e:	4422      	add	r2, r4
 800f450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f458:	3302      	adds	r3, #2
 800f45a:	e7c7      	b.n	800f3ec <_printf_common+0x58>
 800f45c:	2301      	movs	r3, #1
 800f45e:	4622      	mov	r2, r4
 800f460:	4641      	mov	r1, r8
 800f462:	4638      	mov	r0, r7
 800f464:	47c8      	blx	r9
 800f466:	3001      	adds	r0, #1
 800f468:	d0e6      	beq.n	800f438 <_printf_common+0xa4>
 800f46a:	3601      	adds	r6, #1
 800f46c:	e7d9      	b.n	800f422 <_printf_common+0x8e>
	...

0800f470 <_printf_i>:
 800f470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f474:	7e0f      	ldrb	r7, [r1, #24]
 800f476:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f478:	2f78      	cmp	r7, #120	@ 0x78
 800f47a:	4691      	mov	r9, r2
 800f47c:	4680      	mov	r8, r0
 800f47e:	460c      	mov	r4, r1
 800f480:	469a      	mov	sl, r3
 800f482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f486:	d807      	bhi.n	800f498 <_printf_i+0x28>
 800f488:	2f62      	cmp	r7, #98	@ 0x62
 800f48a:	d80a      	bhi.n	800f4a2 <_printf_i+0x32>
 800f48c:	2f00      	cmp	r7, #0
 800f48e:	f000 80d1 	beq.w	800f634 <_printf_i+0x1c4>
 800f492:	2f58      	cmp	r7, #88	@ 0x58
 800f494:	f000 80b8 	beq.w	800f608 <_printf_i+0x198>
 800f498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f49c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f4a0:	e03a      	b.n	800f518 <_printf_i+0xa8>
 800f4a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f4a6:	2b15      	cmp	r3, #21
 800f4a8:	d8f6      	bhi.n	800f498 <_printf_i+0x28>
 800f4aa:	a101      	add	r1, pc, #4	@ (adr r1, 800f4b0 <_printf_i+0x40>)
 800f4ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4b0:	0800f509 	.word	0x0800f509
 800f4b4:	0800f51d 	.word	0x0800f51d
 800f4b8:	0800f499 	.word	0x0800f499
 800f4bc:	0800f499 	.word	0x0800f499
 800f4c0:	0800f499 	.word	0x0800f499
 800f4c4:	0800f499 	.word	0x0800f499
 800f4c8:	0800f51d 	.word	0x0800f51d
 800f4cc:	0800f499 	.word	0x0800f499
 800f4d0:	0800f499 	.word	0x0800f499
 800f4d4:	0800f499 	.word	0x0800f499
 800f4d8:	0800f499 	.word	0x0800f499
 800f4dc:	0800f61b 	.word	0x0800f61b
 800f4e0:	0800f547 	.word	0x0800f547
 800f4e4:	0800f5d5 	.word	0x0800f5d5
 800f4e8:	0800f499 	.word	0x0800f499
 800f4ec:	0800f499 	.word	0x0800f499
 800f4f0:	0800f63d 	.word	0x0800f63d
 800f4f4:	0800f499 	.word	0x0800f499
 800f4f8:	0800f547 	.word	0x0800f547
 800f4fc:	0800f499 	.word	0x0800f499
 800f500:	0800f499 	.word	0x0800f499
 800f504:	0800f5dd 	.word	0x0800f5dd
 800f508:	6833      	ldr	r3, [r6, #0]
 800f50a:	1d1a      	adds	r2, r3, #4
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	6032      	str	r2, [r6, #0]
 800f510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f518:	2301      	movs	r3, #1
 800f51a:	e09c      	b.n	800f656 <_printf_i+0x1e6>
 800f51c:	6833      	ldr	r3, [r6, #0]
 800f51e:	6820      	ldr	r0, [r4, #0]
 800f520:	1d19      	adds	r1, r3, #4
 800f522:	6031      	str	r1, [r6, #0]
 800f524:	0606      	lsls	r6, r0, #24
 800f526:	d501      	bpl.n	800f52c <_printf_i+0xbc>
 800f528:	681d      	ldr	r5, [r3, #0]
 800f52a:	e003      	b.n	800f534 <_printf_i+0xc4>
 800f52c:	0645      	lsls	r5, r0, #25
 800f52e:	d5fb      	bpl.n	800f528 <_printf_i+0xb8>
 800f530:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f534:	2d00      	cmp	r5, #0
 800f536:	da03      	bge.n	800f540 <_printf_i+0xd0>
 800f538:	232d      	movs	r3, #45	@ 0x2d
 800f53a:	426d      	negs	r5, r5
 800f53c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f540:	4858      	ldr	r0, [pc, #352]	@ (800f6a4 <_printf_i+0x234>)
 800f542:	230a      	movs	r3, #10
 800f544:	e011      	b.n	800f56a <_printf_i+0xfa>
 800f546:	6821      	ldr	r1, [r4, #0]
 800f548:	6833      	ldr	r3, [r6, #0]
 800f54a:	0608      	lsls	r0, r1, #24
 800f54c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f550:	d402      	bmi.n	800f558 <_printf_i+0xe8>
 800f552:	0649      	lsls	r1, r1, #25
 800f554:	bf48      	it	mi
 800f556:	b2ad      	uxthmi	r5, r5
 800f558:	2f6f      	cmp	r7, #111	@ 0x6f
 800f55a:	4852      	ldr	r0, [pc, #328]	@ (800f6a4 <_printf_i+0x234>)
 800f55c:	6033      	str	r3, [r6, #0]
 800f55e:	bf14      	ite	ne
 800f560:	230a      	movne	r3, #10
 800f562:	2308      	moveq	r3, #8
 800f564:	2100      	movs	r1, #0
 800f566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f56a:	6866      	ldr	r6, [r4, #4]
 800f56c:	60a6      	str	r6, [r4, #8]
 800f56e:	2e00      	cmp	r6, #0
 800f570:	db05      	blt.n	800f57e <_printf_i+0x10e>
 800f572:	6821      	ldr	r1, [r4, #0]
 800f574:	432e      	orrs	r6, r5
 800f576:	f021 0104 	bic.w	r1, r1, #4
 800f57a:	6021      	str	r1, [r4, #0]
 800f57c:	d04b      	beq.n	800f616 <_printf_i+0x1a6>
 800f57e:	4616      	mov	r6, r2
 800f580:	fbb5 f1f3 	udiv	r1, r5, r3
 800f584:	fb03 5711 	mls	r7, r3, r1, r5
 800f588:	5dc7      	ldrb	r7, [r0, r7]
 800f58a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f58e:	462f      	mov	r7, r5
 800f590:	42bb      	cmp	r3, r7
 800f592:	460d      	mov	r5, r1
 800f594:	d9f4      	bls.n	800f580 <_printf_i+0x110>
 800f596:	2b08      	cmp	r3, #8
 800f598:	d10b      	bne.n	800f5b2 <_printf_i+0x142>
 800f59a:	6823      	ldr	r3, [r4, #0]
 800f59c:	07df      	lsls	r7, r3, #31
 800f59e:	d508      	bpl.n	800f5b2 <_printf_i+0x142>
 800f5a0:	6923      	ldr	r3, [r4, #16]
 800f5a2:	6861      	ldr	r1, [r4, #4]
 800f5a4:	4299      	cmp	r1, r3
 800f5a6:	bfde      	ittt	le
 800f5a8:	2330      	movle	r3, #48	@ 0x30
 800f5aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f5ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f5b2:	1b92      	subs	r2, r2, r6
 800f5b4:	6122      	str	r2, [r4, #16]
 800f5b6:	f8cd a000 	str.w	sl, [sp]
 800f5ba:	464b      	mov	r3, r9
 800f5bc:	aa03      	add	r2, sp, #12
 800f5be:	4621      	mov	r1, r4
 800f5c0:	4640      	mov	r0, r8
 800f5c2:	f7ff fee7 	bl	800f394 <_printf_common>
 800f5c6:	3001      	adds	r0, #1
 800f5c8:	d14a      	bne.n	800f660 <_printf_i+0x1f0>
 800f5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ce:	b004      	add	sp, #16
 800f5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5d4:	6823      	ldr	r3, [r4, #0]
 800f5d6:	f043 0320 	orr.w	r3, r3, #32
 800f5da:	6023      	str	r3, [r4, #0]
 800f5dc:	4832      	ldr	r0, [pc, #200]	@ (800f6a8 <_printf_i+0x238>)
 800f5de:	2778      	movs	r7, #120	@ 0x78
 800f5e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f5e4:	6823      	ldr	r3, [r4, #0]
 800f5e6:	6831      	ldr	r1, [r6, #0]
 800f5e8:	061f      	lsls	r7, r3, #24
 800f5ea:	f851 5b04 	ldr.w	r5, [r1], #4
 800f5ee:	d402      	bmi.n	800f5f6 <_printf_i+0x186>
 800f5f0:	065f      	lsls	r7, r3, #25
 800f5f2:	bf48      	it	mi
 800f5f4:	b2ad      	uxthmi	r5, r5
 800f5f6:	6031      	str	r1, [r6, #0]
 800f5f8:	07d9      	lsls	r1, r3, #31
 800f5fa:	bf44      	itt	mi
 800f5fc:	f043 0320 	orrmi.w	r3, r3, #32
 800f600:	6023      	strmi	r3, [r4, #0]
 800f602:	b11d      	cbz	r5, 800f60c <_printf_i+0x19c>
 800f604:	2310      	movs	r3, #16
 800f606:	e7ad      	b.n	800f564 <_printf_i+0xf4>
 800f608:	4826      	ldr	r0, [pc, #152]	@ (800f6a4 <_printf_i+0x234>)
 800f60a:	e7e9      	b.n	800f5e0 <_printf_i+0x170>
 800f60c:	6823      	ldr	r3, [r4, #0]
 800f60e:	f023 0320 	bic.w	r3, r3, #32
 800f612:	6023      	str	r3, [r4, #0]
 800f614:	e7f6      	b.n	800f604 <_printf_i+0x194>
 800f616:	4616      	mov	r6, r2
 800f618:	e7bd      	b.n	800f596 <_printf_i+0x126>
 800f61a:	6833      	ldr	r3, [r6, #0]
 800f61c:	6825      	ldr	r5, [r4, #0]
 800f61e:	6961      	ldr	r1, [r4, #20]
 800f620:	1d18      	adds	r0, r3, #4
 800f622:	6030      	str	r0, [r6, #0]
 800f624:	062e      	lsls	r6, r5, #24
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	d501      	bpl.n	800f62e <_printf_i+0x1be>
 800f62a:	6019      	str	r1, [r3, #0]
 800f62c:	e002      	b.n	800f634 <_printf_i+0x1c4>
 800f62e:	0668      	lsls	r0, r5, #25
 800f630:	d5fb      	bpl.n	800f62a <_printf_i+0x1ba>
 800f632:	8019      	strh	r1, [r3, #0]
 800f634:	2300      	movs	r3, #0
 800f636:	6123      	str	r3, [r4, #16]
 800f638:	4616      	mov	r6, r2
 800f63a:	e7bc      	b.n	800f5b6 <_printf_i+0x146>
 800f63c:	6833      	ldr	r3, [r6, #0]
 800f63e:	1d1a      	adds	r2, r3, #4
 800f640:	6032      	str	r2, [r6, #0]
 800f642:	681e      	ldr	r6, [r3, #0]
 800f644:	6862      	ldr	r2, [r4, #4]
 800f646:	2100      	movs	r1, #0
 800f648:	4630      	mov	r0, r6
 800f64a:	f7f0 fe51 	bl	80002f0 <memchr>
 800f64e:	b108      	cbz	r0, 800f654 <_printf_i+0x1e4>
 800f650:	1b80      	subs	r0, r0, r6
 800f652:	6060      	str	r0, [r4, #4]
 800f654:	6863      	ldr	r3, [r4, #4]
 800f656:	6123      	str	r3, [r4, #16]
 800f658:	2300      	movs	r3, #0
 800f65a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f65e:	e7aa      	b.n	800f5b6 <_printf_i+0x146>
 800f660:	6923      	ldr	r3, [r4, #16]
 800f662:	4632      	mov	r2, r6
 800f664:	4649      	mov	r1, r9
 800f666:	4640      	mov	r0, r8
 800f668:	47d0      	blx	sl
 800f66a:	3001      	adds	r0, #1
 800f66c:	d0ad      	beq.n	800f5ca <_printf_i+0x15a>
 800f66e:	6823      	ldr	r3, [r4, #0]
 800f670:	079b      	lsls	r3, r3, #30
 800f672:	d413      	bmi.n	800f69c <_printf_i+0x22c>
 800f674:	68e0      	ldr	r0, [r4, #12]
 800f676:	9b03      	ldr	r3, [sp, #12]
 800f678:	4298      	cmp	r0, r3
 800f67a:	bfb8      	it	lt
 800f67c:	4618      	movlt	r0, r3
 800f67e:	e7a6      	b.n	800f5ce <_printf_i+0x15e>
 800f680:	2301      	movs	r3, #1
 800f682:	4632      	mov	r2, r6
 800f684:	4649      	mov	r1, r9
 800f686:	4640      	mov	r0, r8
 800f688:	47d0      	blx	sl
 800f68a:	3001      	adds	r0, #1
 800f68c:	d09d      	beq.n	800f5ca <_printf_i+0x15a>
 800f68e:	3501      	adds	r5, #1
 800f690:	68e3      	ldr	r3, [r4, #12]
 800f692:	9903      	ldr	r1, [sp, #12]
 800f694:	1a5b      	subs	r3, r3, r1
 800f696:	42ab      	cmp	r3, r5
 800f698:	dcf2      	bgt.n	800f680 <_printf_i+0x210>
 800f69a:	e7eb      	b.n	800f674 <_printf_i+0x204>
 800f69c:	2500      	movs	r5, #0
 800f69e:	f104 0619 	add.w	r6, r4, #25
 800f6a2:	e7f5      	b.n	800f690 <_printf_i+0x220>
 800f6a4:	08011cd2 	.word	0x08011cd2
 800f6a8:	08011ce3 	.word	0x08011ce3

0800f6ac <std>:
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	b510      	push	{r4, lr}
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	e9c0 3300 	strd	r3, r3, [r0]
 800f6b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f6ba:	6083      	str	r3, [r0, #8]
 800f6bc:	8181      	strh	r1, [r0, #12]
 800f6be:	6643      	str	r3, [r0, #100]	@ 0x64
 800f6c0:	81c2      	strh	r2, [r0, #14]
 800f6c2:	6183      	str	r3, [r0, #24]
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	2208      	movs	r2, #8
 800f6c8:	305c      	adds	r0, #92	@ 0x5c
 800f6ca:	f000 f93c 	bl	800f946 <memset>
 800f6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800f704 <std+0x58>)
 800f6d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800f6d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f708 <std+0x5c>)
 800f6d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f6d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f70c <std+0x60>)
 800f6d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f6da:	4b0d      	ldr	r3, [pc, #52]	@ (800f710 <std+0x64>)
 800f6dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800f6de:	4b0d      	ldr	r3, [pc, #52]	@ (800f714 <std+0x68>)
 800f6e0:	6224      	str	r4, [r4, #32]
 800f6e2:	429c      	cmp	r4, r3
 800f6e4:	d006      	beq.n	800f6f4 <std+0x48>
 800f6e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f6ea:	4294      	cmp	r4, r2
 800f6ec:	d002      	beq.n	800f6f4 <std+0x48>
 800f6ee:	33d0      	adds	r3, #208	@ 0xd0
 800f6f0:	429c      	cmp	r4, r3
 800f6f2:	d105      	bne.n	800f700 <std+0x54>
 800f6f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6fc:	f000 b9b0 	b.w	800fa60 <__retarget_lock_init_recursive>
 800f700:	bd10      	pop	{r4, pc}
 800f702:	bf00      	nop
 800f704:	0800f8c1 	.word	0x0800f8c1
 800f708:	0800f8e3 	.word	0x0800f8e3
 800f70c:	0800f91b 	.word	0x0800f91b
 800f710:	0800f93f 	.word	0x0800f93f
 800f714:	24000cd4 	.word	0x24000cd4

0800f718 <stdio_exit_handler>:
 800f718:	4a02      	ldr	r2, [pc, #8]	@ (800f724 <stdio_exit_handler+0xc>)
 800f71a:	4903      	ldr	r1, [pc, #12]	@ (800f728 <stdio_exit_handler+0x10>)
 800f71c:	4803      	ldr	r0, [pc, #12]	@ (800f72c <stdio_exit_handler+0x14>)
 800f71e:	f000 b869 	b.w	800f7f4 <_fwalk_sglue>
 800f722:	bf00      	nop
 800f724:	24000010 	.word	0x24000010
 800f728:	08011419 	.word	0x08011419
 800f72c:	24000020 	.word	0x24000020

0800f730 <cleanup_stdio>:
 800f730:	6841      	ldr	r1, [r0, #4]
 800f732:	4b0c      	ldr	r3, [pc, #48]	@ (800f764 <cleanup_stdio+0x34>)
 800f734:	4299      	cmp	r1, r3
 800f736:	b510      	push	{r4, lr}
 800f738:	4604      	mov	r4, r0
 800f73a:	d001      	beq.n	800f740 <cleanup_stdio+0x10>
 800f73c:	f001 fe6c 	bl	8011418 <_fflush_r>
 800f740:	68a1      	ldr	r1, [r4, #8]
 800f742:	4b09      	ldr	r3, [pc, #36]	@ (800f768 <cleanup_stdio+0x38>)
 800f744:	4299      	cmp	r1, r3
 800f746:	d002      	beq.n	800f74e <cleanup_stdio+0x1e>
 800f748:	4620      	mov	r0, r4
 800f74a:	f001 fe65 	bl	8011418 <_fflush_r>
 800f74e:	68e1      	ldr	r1, [r4, #12]
 800f750:	4b06      	ldr	r3, [pc, #24]	@ (800f76c <cleanup_stdio+0x3c>)
 800f752:	4299      	cmp	r1, r3
 800f754:	d004      	beq.n	800f760 <cleanup_stdio+0x30>
 800f756:	4620      	mov	r0, r4
 800f758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f75c:	f001 be5c 	b.w	8011418 <_fflush_r>
 800f760:	bd10      	pop	{r4, pc}
 800f762:	bf00      	nop
 800f764:	24000cd4 	.word	0x24000cd4
 800f768:	24000d3c 	.word	0x24000d3c
 800f76c:	24000da4 	.word	0x24000da4

0800f770 <global_stdio_init.part.0>:
 800f770:	b510      	push	{r4, lr}
 800f772:	4b0b      	ldr	r3, [pc, #44]	@ (800f7a0 <global_stdio_init.part.0+0x30>)
 800f774:	4c0b      	ldr	r4, [pc, #44]	@ (800f7a4 <global_stdio_init.part.0+0x34>)
 800f776:	4a0c      	ldr	r2, [pc, #48]	@ (800f7a8 <global_stdio_init.part.0+0x38>)
 800f778:	601a      	str	r2, [r3, #0]
 800f77a:	4620      	mov	r0, r4
 800f77c:	2200      	movs	r2, #0
 800f77e:	2104      	movs	r1, #4
 800f780:	f7ff ff94 	bl	800f6ac <std>
 800f784:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f788:	2201      	movs	r2, #1
 800f78a:	2109      	movs	r1, #9
 800f78c:	f7ff ff8e 	bl	800f6ac <std>
 800f790:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f794:	2202      	movs	r2, #2
 800f796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f79a:	2112      	movs	r1, #18
 800f79c:	f7ff bf86 	b.w	800f6ac <std>
 800f7a0:	24000e0c 	.word	0x24000e0c
 800f7a4:	24000cd4 	.word	0x24000cd4
 800f7a8:	0800f719 	.word	0x0800f719

0800f7ac <__sfp_lock_acquire>:
 800f7ac:	4801      	ldr	r0, [pc, #4]	@ (800f7b4 <__sfp_lock_acquire+0x8>)
 800f7ae:	f000 b958 	b.w	800fa62 <__retarget_lock_acquire_recursive>
 800f7b2:	bf00      	nop
 800f7b4:	24000e15 	.word	0x24000e15

0800f7b8 <__sfp_lock_release>:
 800f7b8:	4801      	ldr	r0, [pc, #4]	@ (800f7c0 <__sfp_lock_release+0x8>)
 800f7ba:	f000 b953 	b.w	800fa64 <__retarget_lock_release_recursive>
 800f7be:	bf00      	nop
 800f7c0:	24000e15 	.word	0x24000e15

0800f7c4 <__sinit>:
 800f7c4:	b510      	push	{r4, lr}
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	f7ff fff0 	bl	800f7ac <__sfp_lock_acquire>
 800f7cc:	6a23      	ldr	r3, [r4, #32]
 800f7ce:	b11b      	cbz	r3, 800f7d8 <__sinit+0x14>
 800f7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7d4:	f7ff bff0 	b.w	800f7b8 <__sfp_lock_release>
 800f7d8:	4b04      	ldr	r3, [pc, #16]	@ (800f7ec <__sinit+0x28>)
 800f7da:	6223      	str	r3, [r4, #32]
 800f7dc:	4b04      	ldr	r3, [pc, #16]	@ (800f7f0 <__sinit+0x2c>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d1f5      	bne.n	800f7d0 <__sinit+0xc>
 800f7e4:	f7ff ffc4 	bl	800f770 <global_stdio_init.part.0>
 800f7e8:	e7f2      	b.n	800f7d0 <__sinit+0xc>
 800f7ea:	bf00      	nop
 800f7ec:	0800f731 	.word	0x0800f731
 800f7f0:	24000e0c 	.word	0x24000e0c

0800f7f4 <_fwalk_sglue>:
 800f7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7f8:	4607      	mov	r7, r0
 800f7fa:	4688      	mov	r8, r1
 800f7fc:	4614      	mov	r4, r2
 800f7fe:	2600      	movs	r6, #0
 800f800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f804:	f1b9 0901 	subs.w	r9, r9, #1
 800f808:	d505      	bpl.n	800f816 <_fwalk_sglue+0x22>
 800f80a:	6824      	ldr	r4, [r4, #0]
 800f80c:	2c00      	cmp	r4, #0
 800f80e:	d1f7      	bne.n	800f800 <_fwalk_sglue+0xc>
 800f810:	4630      	mov	r0, r6
 800f812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f816:	89ab      	ldrh	r3, [r5, #12]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d907      	bls.n	800f82c <_fwalk_sglue+0x38>
 800f81c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f820:	3301      	adds	r3, #1
 800f822:	d003      	beq.n	800f82c <_fwalk_sglue+0x38>
 800f824:	4629      	mov	r1, r5
 800f826:	4638      	mov	r0, r7
 800f828:	47c0      	blx	r8
 800f82a:	4306      	orrs	r6, r0
 800f82c:	3568      	adds	r5, #104	@ 0x68
 800f82e:	e7e9      	b.n	800f804 <_fwalk_sglue+0x10>

0800f830 <iprintf>:
 800f830:	b40f      	push	{r0, r1, r2, r3}
 800f832:	b507      	push	{r0, r1, r2, lr}
 800f834:	4906      	ldr	r1, [pc, #24]	@ (800f850 <iprintf+0x20>)
 800f836:	ab04      	add	r3, sp, #16
 800f838:	6808      	ldr	r0, [r1, #0]
 800f83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f83e:	6881      	ldr	r1, [r0, #8]
 800f840:	9301      	str	r3, [sp, #4]
 800f842:	f001 fc4d 	bl	80110e0 <_vfiprintf_r>
 800f846:	b003      	add	sp, #12
 800f848:	f85d eb04 	ldr.w	lr, [sp], #4
 800f84c:	b004      	add	sp, #16
 800f84e:	4770      	bx	lr
 800f850:	2400001c 	.word	0x2400001c

0800f854 <sniprintf>:
 800f854:	b40c      	push	{r2, r3}
 800f856:	b530      	push	{r4, r5, lr}
 800f858:	4b18      	ldr	r3, [pc, #96]	@ (800f8bc <sniprintf+0x68>)
 800f85a:	1e0c      	subs	r4, r1, #0
 800f85c:	681d      	ldr	r5, [r3, #0]
 800f85e:	b09d      	sub	sp, #116	@ 0x74
 800f860:	da08      	bge.n	800f874 <sniprintf+0x20>
 800f862:	238b      	movs	r3, #139	@ 0x8b
 800f864:	602b      	str	r3, [r5, #0]
 800f866:	f04f 30ff 	mov.w	r0, #4294967295
 800f86a:	b01d      	add	sp, #116	@ 0x74
 800f86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f870:	b002      	add	sp, #8
 800f872:	4770      	bx	lr
 800f874:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f878:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f87c:	f04f 0300 	mov.w	r3, #0
 800f880:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f882:	bf14      	ite	ne
 800f884:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f888:	4623      	moveq	r3, r4
 800f88a:	9304      	str	r3, [sp, #16]
 800f88c:	9307      	str	r3, [sp, #28]
 800f88e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f892:	9002      	str	r0, [sp, #8]
 800f894:	9006      	str	r0, [sp, #24]
 800f896:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f89a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f89c:	ab21      	add	r3, sp, #132	@ 0x84
 800f89e:	a902      	add	r1, sp, #8
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	9301      	str	r3, [sp, #4]
 800f8a4:	f001 faf6 	bl	8010e94 <_svfiprintf_r>
 800f8a8:	1c43      	adds	r3, r0, #1
 800f8aa:	bfbc      	itt	lt
 800f8ac:	238b      	movlt	r3, #139	@ 0x8b
 800f8ae:	602b      	strlt	r3, [r5, #0]
 800f8b0:	2c00      	cmp	r4, #0
 800f8b2:	d0da      	beq.n	800f86a <sniprintf+0x16>
 800f8b4:	9b02      	ldr	r3, [sp, #8]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	701a      	strb	r2, [r3, #0]
 800f8ba:	e7d6      	b.n	800f86a <sniprintf+0x16>
 800f8bc:	2400001c 	.word	0x2400001c

0800f8c0 <__sread>:
 800f8c0:	b510      	push	{r4, lr}
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8c8:	f000 f86c 	bl	800f9a4 <_read_r>
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	bfab      	itete	ge
 800f8d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f8d2:	89a3      	ldrhlt	r3, [r4, #12]
 800f8d4:	181b      	addge	r3, r3, r0
 800f8d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f8da:	bfac      	ite	ge
 800f8dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f8de:	81a3      	strhlt	r3, [r4, #12]
 800f8e0:	bd10      	pop	{r4, pc}

0800f8e2 <__swrite>:
 800f8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e6:	461f      	mov	r7, r3
 800f8e8:	898b      	ldrh	r3, [r1, #12]
 800f8ea:	05db      	lsls	r3, r3, #23
 800f8ec:	4605      	mov	r5, r0
 800f8ee:	460c      	mov	r4, r1
 800f8f0:	4616      	mov	r6, r2
 800f8f2:	d505      	bpl.n	800f900 <__swrite+0x1e>
 800f8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8f8:	2302      	movs	r3, #2
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f000 f840 	bl	800f980 <_lseek_r>
 800f900:	89a3      	ldrh	r3, [r4, #12]
 800f902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f90a:	81a3      	strh	r3, [r4, #12]
 800f90c:	4632      	mov	r2, r6
 800f90e:	463b      	mov	r3, r7
 800f910:	4628      	mov	r0, r5
 800f912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f916:	f000 b867 	b.w	800f9e8 <_write_r>

0800f91a <__sseek>:
 800f91a:	b510      	push	{r4, lr}
 800f91c:	460c      	mov	r4, r1
 800f91e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f922:	f000 f82d 	bl	800f980 <_lseek_r>
 800f926:	1c43      	adds	r3, r0, #1
 800f928:	89a3      	ldrh	r3, [r4, #12]
 800f92a:	bf15      	itete	ne
 800f92c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f92e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f936:	81a3      	strheq	r3, [r4, #12]
 800f938:	bf18      	it	ne
 800f93a:	81a3      	strhne	r3, [r4, #12]
 800f93c:	bd10      	pop	{r4, pc}

0800f93e <__sclose>:
 800f93e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f942:	f000 b80d 	b.w	800f960 <_close_r>

0800f946 <memset>:
 800f946:	4402      	add	r2, r0
 800f948:	4603      	mov	r3, r0
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d100      	bne.n	800f950 <memset+0xa>
 800f94e:	4770      	bx	lr
 800f950:	f803 1b01 	strb.w	r1, [r3], #1
 800f954:	e7f9      	b.n	800f94a <memset+0x4>
	...

0800f958 <_localeconv_r>:
 800f958:	4800      	ldr	r0, [pc, #0]	@ (800f95c <_localeconv_r+0x4>)
 800f95a:	4770      	bx	lr
 800f95c:	2400015c 	.word	0x2400015c

0800f960 <_close_r>:
 800f960:	b538      	push	{r3, r4, r5, lr}
 800f962:	4d06      	ldr	r5, [pc, #24]	@ (800f97c <_close_r+0x1c>)
 800f964:	2300      	movs	r3, #0
 800f966:	4604      	mov	r4, r0
 800f968:	4608      	mov	r0, r1
 800f96a:	602b      	str	r3, [r5, #0]
 800f96c:	f7f1 fe42 	bl	80015f4 <_close>
 800f970:	1c43      	adds	r3, r0, #1
 800f972:	d102      	bne.n	800f97a <_close_r+0x1a>
 800f974:	682b      	ldr	r3, [r5, #0]
 800f976:	b103      	cbz	r3, 800f97a <_close_r+0x1a>
 800f978:	6023      	str	r3, [r4, #0]
 800f97a:	bd38      	pop	{r3, r4, r5, pc}
 800f97c:	24000e10 	.word	0x24000e10

0800f980 <_lseek_r>:
 800f980:	b538      	push	{r3, r4, r5, lr}
 800f982:	4d07      	ldr	r5, [pc, #28]	@ (800f9a0 <_lseek_r+0x20>)
 800f984:	4604      	mov	r4, r0
 800f986:	4608      	mov	r0, r1
 800f988:	4611      	mov	r1, r2
 800f98a:	2200      	movs	r2, #0
 800f98c:	602a      	str	r2, [r5, #0]
 800f98e:	461a      	mov	r2, r3
 800f990:	f7f1 fe57 	bl	8001642 <_lseek>
 800f994:	1c43      	adds	r3, r0, #1
 800f996:	d102      	bne.n	800f99e <_lseek_r+0x1e>
 800f998:	682b      	ldr	r3, [r5, #0]
 800f99a:	b103      	cbz	r3, 800f99e <_lseek_r+0x1e>
 800f99c:	6023      	str	r3, [r4, #0]
 800f99e:	bd38      	pop	{r3, r4, r5, pc}
 800f9a0:	24000e10 	.word	0x24000e10

0800f9a4 <_read_r>:
 800f9a4:	b538      	push	{r3, r4, r5, lr}
 800f9a6:	4d07      	ldr	r5, [pc, #28]	@ (800f9c4 <_read_r+0x20>)
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	4608      	mov	r0, r1
 800f9ac:	4611      	mov	r1, r2
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	602a      	str	r2, [r5, #0]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	f7f1 fde5 	bl	8001582 <_read>
 800f9b8:	1c43      	adds	r3, r0, #1
 800f9ba:	d102      	bne.n	800f9c2 <_read_r+0x1e>
 800f9bc:	682b      	ldr	r3, [r5, #0]
 800f9be:	b103      	cbz	r3, 800f9c2 <_read_r+0x1e>
 800f9c0:	6023      	str	r3, [r4, #0]
 800f9c2:	bd38      	pop	{r3, r4, r5, pc}
 800f9c4:	24000e10 	.word	0x24000e10

0800f9c8 <_sbrk_r>:
 800f9c8:	b538      	push	{r3, r4, r5, lr}
 800f9ca:	4d06      	ldr	r5, [pc, #24]	@ (800f9e4 <_sbrk_r+0x1c>)
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	4608      	mov	r0, r1
 800f9d2:	602b      	str	r3, [r5, #0]
 800f9d4:	f7f1 fe42 	bl	800165c <_sbrk>
 800f9d8:	1c43      	adds	r3, r0, #1
 800f9da:	d102      	bne.n	800f9e2 <_sbrk_r+0x1a>
 800f9dc:	682b      	ldr	r3, [r5, #0]
 800f9de:	b103      	cbz	r3, 800f9e2 <_sbrk_r+0x1a>
 800f9e0:	6023      	str	r3, [r4, #0]
 800f9e2:	bd38      	pop	{r3, r4, r5, pc}
 800f9e4:	24000e10 	.word	0x24000e10

0800f9e8 <_write_r>:
 800f9e8:	b538      	push	{r3, r4, r5, lr}
 800f9ea:	4d07      	ldr	r5, [pc, #28]	@ (800fa08 <_write_r+0x20>)
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	4608      	mov	r0, r1
 800f9f0:	4611      	mov	r1, r2
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	602a      	str	r2, [r5, #0]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	f7f1 fde0 	bl	80015bc <_write>
 800f9fc:	1c43      	adds	r3, r0, #1
 800f9fe:	d102      	bne.n	800fa06 <_write_r+0x1e>
 800fa00:	682b      	ldr	r3, [r5, #0]
 800fa02:	b103      	cbz	r3, 800fa06 <_write_r+0x1e>
 800fa04:	6023      	str	r3, [r4, #0]
 800fa06:	bd38      	pop	{r3, r4, r5, pc}
 800fa08:	24000e10 	.word	0x24000e10

0800fa0c <__errno>:
 800fa0c:	4b01      	ldr	r3, [pc, #4]	@ (800fa14 <__errno+0x8>)
 800fa0e:	6818      	ldr	r0, [r3, #0]
 800fa10:	4770      	bx	lr
 800fa12:	bf00      	nop
 800fa14:	2400001c 	.word	0x2400001c

0800fa18 <__libc_init_array>:
 800fa18:	b570      	push	{r4, r5, r6, lr}
 800fa1a:	4d0d      	ldr	r5, [pc, #52]	@ (800fa50 <__libc_init_array+0x38>)
 800fa1c:	4c0d      	ldr	r4, [pc, #52]	@ (800fa54 <__libc_init_array+0x3c>)
 800fa1e:	1b64      	subs	r4, r4, r5
 800fa20:	10a4      	asrs	r4, r4, #2
 800fa22:	2600      	movs	r6, #0
 800fa24:	42a6      	cmp	r6, r4
 800fa26:	d109      	bne.n	800fa3c <__libc_init_array+0x24>
 800fa28:	4d0b      	ldr	r5, [pc, #44]	@ (800fa58 <__libc_init_array+0x40>)
 800fa2a:	4c0c      	ldr	r4, [pc, #48]	@ (800fa5c <__libc_init_array+0x44>)
 800fa2c:	f001 ff34 	bl	8011898 <_init>
 800fa30:	1b64      	subs	r4, r4, r5
 800fa32:	10a4      	asrs	r4, r4, #2
 800fa34:	2600      	movs	r6, #0
 800fa36:	42a6      	cmp	r6, r4
 800fa38:	d105      	bne.n	800fa46 <__libc_init_array+0x2e>
 800fa3a:	bd70      	pop	{r4, r5, r6, pc}
 800fa3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa40:	4798      	blx	r3
 800fa42:	3601      	adds	r6, #1
 800fa44:	e7ee      	b.n	800fa24 <__libc_init_array+0xc>
 800fa46:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa4a:	4798      	blx	r3
 800fa4c:	3601      	adds	r6, #1
 800fa4e:	e7f2      	b.n	800fa36 <__libc_init_array+0x1e>
 800fa50:	0801203c 	.word	0x0801203c
 800fa54:	0801203c 	.word	0x0801203c
 800fa58:	0801203c 	.word	0x0801203c
 800fa5c:	08012040 	.word	0x08012040

0800fa60 <__retarget_lock_init_recursive>:
 800fa60:	4770      	bx	lr

0800fa62 <__retarget_lock_acquire_recursive>:
 800fa62:	4770      	bx	lr

0800fa64 <__retarget_lock_release_recursive>:
 800fa64:	4770      	bx	lr

0800fa66 <memcpy>:
 800fa66:	440a      	add	r2, r1
 800fa68:	4291      	cmp	r1, r2
 800fa6a:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa6e:	d100      	bne.n	800fa72 <memcpy+0xc>
 800fa70:	4770      	bx	lr
 800fa72:	b510      	push	{r4, lr}
 800fa74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa7c:	4291      	cmp	r1, r2
 800fa7e:	d1f9      	bne.n	800fa74 <memcpy+0xe>
 800fa80:	bd10      	pop	{r4, pc}

0800fa82 <quorem>:
 800fa82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa86:	6903      	ldr	r3, [r0, #16]
 800fa88:	690c      	ldr	r4, [r1, #16]
 800fa8a:	42a3      	cmp	r3, r4
 800fa8c:	4607      	mov	r7, r0
 800fa8e:	db7e      	blt.n	800fb8e <quorem+0x10c>
 800fa90:	3c01      	subs	r4, #1
 800fa92:	f101 0814 	add.w	r8, r1, #20
 800fa96:	00a3      	lsls	r3, r4, #2
 800fa98:	f100 0514 	add.w	r5, r0, #20
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800faa2:	9301      	str	r3, [sp, #4]
 800faa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800faa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800faac:	3301      	adds	r3, #1
 800faae:	429a      	cmp	r2, r3
 800fab0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fab4:	fbb2 f6f3 	udiv	r6, r2, r3
 800fab8:	d32e      	bcc.n	800fb18 <quorem+0x96>
 800faba:	f04f 0a00 	mov.w	sl, #0
 800fabe:	46c4      	mov	ip, r8
 800fac0:	46ae      	mov	lr, r5
 800fac2:	46d3      	mov	fp, sl
 800fac4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fac8:	b298      	uxth	r0, r3
 800faca:	fb06 a000 	mla	r0, r6, r0, sl
 800face:	0c02      	lsrs	r2, r0, #16
 800fad0:	0c1b      	lsrs	r3, r3, #16
 800fad2:	fb06 2303 	mla	r3, r6, r3, r2
 800fad6:	f8de 2000 	ldr.w	r2, [lr]
 800fada:	b280      	uxth	r0, r0
 800fadc:	b292      	uxth	r2, r2
 800fade:	1a12      	subs	r2, r2, r0
 800fae0:	445a      	add	r2, fp
 800fae2:	f8de 0000 	ldr.w	r0, [lr]
 800fae6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800faea:	b29b      	uxth	r3, r3
 800faec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800faf0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800faf4:	b292      	uxth	r2, r2
 800faf6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fafa:	45e1      	cmp	r9, ip
 800fafc:	f84e 2b04 	str.w	r2, [lr], #4
 800fb00:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fb04:	d2de      	bcs.n	800fac4 <quorem+0x42>
 800fb06:	9b00      	ldr	r3, [sp, #0]
 800fb08:	58eb      	ldr	r3, [r5, r3]
 800fb0a:	b92b      	cbnz	r3, 800fb18 <quorem+0x96>
 800fb0c:	9b01      	ldr	r3, [sp, #4]
 800fb0e:	3b04      	subs	r3, #4
 800fb10:	429d      	cmp	r5, r3
 800fb12:	461a      	mov	r2, r3
 800fb14:	d32f      	bcc.n	800fb76 <quorem+0xf4>
 800fb16:	613c      	str	r4, [r7, #16]
 800fb18:	4638      	mov	r0, r7
 800fb1a:	f001 f857 	bl	8010bcc <__mcmp>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	db25      	blt.n	800fb6e <quorem+0xec>
 800fb22:	4629      	mov	r1, r5
 800fb24:	2000      	movs	r0, #0
 800fb26:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb2a:	f8d1 c000 	ldr.w	ip, [r1]
 800fb2e:	fa1f fe82 	uxth.w	lr, r2
 800fb32:	fa1f f38c 	uxth.w	r3, ip
 800fb36:	eba3 030e 	sub.w	r3, r3, lr
 800fb3a:	4403      	add	r3, r0
 800fb3c:	0c12      	lsrs	r2, r2, #16
 800fb3e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fb42:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb4c:	45c1      	cmp	r9, r8
 800fb4e:	f841 3b04 	str.w	r3, [r1], #4
 800fb52:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fb56:	d2e6      	bcs.n	800fb26 <quorem+0xa4>
 800fb58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb60:	b922      	cbnz	r2, 800fb6c <quorem+0xea>
 800fb62:	3b04      	subs	r3, #4
 800fb64:	429d      	cmp	r5, r3
 800fb66:	461a      	mov	r2, r3
 800fb68:	d30b      	bcc.n	800fb82 <quorem+0x100>
 800fb6a:	613c      	str	r4, [r7, #16]
 800fb6c:	3601      	adds	r6, #1
 800fb6e:	4630      	mov	r0, r6
 800fb70:	b003      	add	sp, #12
 800fb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb76:	6812      	ldr	r2, [r2, #0]
 800fb78:	3b04      	subs	r3, #4
 800fb7a:	2a00      	cmp	r2, #0
 800fb7c:	d1cb      	bne.n	800fb16 <quorem+0x94>
 800fb7e:	3c01      	subs	r4, #1
 800fb80:	e7c6      	b.n	800fb10 <quorem+0x8e>
 800fb82:	6812      	ldr	r2, [r2, #0]
 800fb84:	3b04      	subs	r3, #4
 800fb86:	2a00      	cmp	r2, #0
 800fb88:	d1ef      	bne.n	800fb6a <quorem+0xe8>
 800fb8a:	3c01      	subs	r4, #1
 800fb8c:	e7ea      	b.n	800fb64 <quorem+0xe2>
 800fb8e:	2000      	movs	r0, #0
 800fb90:	e7ee      	b.n	800fb70 <quorem+0xee>
 800fb92:	0000      	movs	r0, r0
 800fb94:	0000      	movs	r0, r0
	...

0800fb98 <_dtoa_r>:
 800fb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9c:	ed2d 8b02 	vpush	{d8}
 800fba0:	69c7      	ldr	r7, [r0, #28]
 800fba2:	b091      	sub	sp, #68	@ 0x44
 800fba4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fba8:	ec55 4b10 	vmov	r4, r5, d0
 800fbac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fbae:	9107      	str	r1, [sp, #28]
 800fbb0:	4681      	mov	r9, r0
 800fbb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbb4:	930d      	str	r3, [sp, #52]	@ 0x34
 800fbb6:	b97f      	cbnz	r7, 800fbd8 <_dtoa_r+0x40>
 800fbb8:	2010      	movs	r0, #16
 800fbba:	f7ff f883 	bl	800ecc4 <malloc>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	f8c9 001c 	str.w	r0, [r9, #28]
 800fbc4:	b920      	cbnz	r0, 800fbd0 <_dtoa_r+0x38>
 800fbc6:	4ba0      	ldr	r3, [pc, #640]	@ (800fe48 <_dtoa_r+0x2b0>)
 800fbc8:	21ef      	movs	r1, #239	@ 0xef
 800fbca:	48a0      	ldr	r0, [pc, #640]	@ (800fe4c <_dtoa_r+0x2b4>)
 800fbcc:	f001 fcfa 	bl	80115c4 <__assert_func>
 800fbd0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fbd4:	6007      	str	r7, [r0, #0]
 800fbd6:	60c7      	str	r7, [r0, #12]
 800fbd8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fbdc:	6819      	ldr	r1, [r3, #0]
 800fbde:	b159      	cbz	r1, 800fbf8 <_dtoa_r+0x60>
 800fbe0:	685a      	ldr	r2, [r3, #4]
 800fbe2:	604a      	str	r2, [r1, #4]
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	4093      	lsls	r3, r2
 800fbe8:	608b      	str	r3, [r1, #8]
 800fbea:	4648      	mov	r0, r9
 800fbec:	f000 fdbc 	bl	8010768 <_Bfree>
 800fbf0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	601a      	str	r2, [r3, #0]
 800fbf8:	1e2b      	subs	r3, r5, #0
 800fbfa:	bfbb      	ittet	lt
 800fbfc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fc00:	9303      	strlt	r3, [sp, #12]
 800fc02:	2300      	movge	r3, #0
 800fc04:	2201      	movlt	r2, #1
 800fc06:	bfac      	ite	ge
 800fc08:	6033      	strge	r3, [r6, #0]
 800fc0a:	6032      	strlt	r2, [r6, #0]
 800fc0c:	4b90      	ldr	r3, [pc, #576]	@ (800fe50 <_dtoa_r+0x2b8>)
 800fc0e:	9e03      	ldr	r6, [sp, #12]
 800fc10:	43b3      	bics	r3, r6
 800fc12:	d110      	bne.n	800fc36 <_dtoa_r+0x9e>
 800fc14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc16:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fc1a:	6013      	str	r3, [r2, #0]
 800fc1c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fc20:	4323      	orrs	r3, r4
 800fc22:	f000 84e6 	beq.w	80105f2 <_dtoa_r+0xa5a>
 800fc26:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc28:	4f8a      	ldr	r7, [pc, #552]	@ (800fe54 <_dtoa_r+0x2bc>)
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	f000 84e8 	beq.w	8010600 <_dtoa_r+0xa68>
 800fc30:	1cfb      	adds	r3, r7, #3
 800fc32:	f000 bce3 	b.w	80105fc <_dtoa_r+0xa64>
 800fc36:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fc3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc42:	d10a      	bne.n	800fc5a <_dtoa_r+0xc2>
 800fc44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc46:	2301      	movs	r3, #1
 800fc48:	6013      	str	r3, [r2, #0]
 800fc4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc4c:	b113      	cbz	r3, 800fc54 <_dtoa_r+0xbc>
 800fc4e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fc50:	4b81      	ldr	r3, [pc, #516]	@ (800fe58 <_dtoa_r+0x2c0>)
 800fc52:	6013      	str	r3, [r2, #0]
 800fc54:	4f81      	ldr	r7, [pc, #516]	@ (800fe5c <_dtoa_r+0x2c4>)
 800fc56:	f000 bcd3 	b.w	8010600 <_dtoa_r+0xa68>
 800fc5a:	aa0e      	add	r2, sp, #56	@ 0x38
 800fc5c:	a90f      	add	r1, sp, #60	@ 0x3c
 800fc5e:	4648      	mov	r0, r9
 800fc60:	eeb0 0b48 	vmov.f64	d0, d8
 800fc64:	f001 f862 	bl	8010d2c <__d2b>
 800fc68:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fc6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc6e:	9001      	str	r0, [sp, #4]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d045      	beq.n	800fd00 <_dtoa_r+0x168>
 800fc74:	eeb0 7b48 	vmov.f64	d7, d8
 800fc78:	ee18 1a90 	vmov	r1, s17
 800fc7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fc80:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fc84:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fc88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fc8c:	2500      	movs	r5, #0
 800fc8e:	ee07 1a90 	vmov	s15, r1
 800fc92:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fc96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fe30 <_dtoa_r+0x298>
 800fc9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fc9e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fe38 <_dtoa_r+0x2a0>
 800fca2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fca6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fe40 <_dtoa_r+0x2a8>
 800fcaa:	ee07 3a90 	vmov	s15, r3
 800fcae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fcb2:	eeb0 7b46 	vmov.f64	d7, d6
 800fcb6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fcba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fcbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc6:	ee16 8a90 	vmov	r8, s13
 800fcca:	d508      	bpl.n	800fcde <_dtoa_r+0x146>
 800fccc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fcd0:	eeb4 6b47 	vcmp.f64	d6, d7
 800fcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd8:	bf18      	it	ne
 800fcda:	f108 38ff 	addne.w	r8, r8, #4294967295
 800fcde:	f1b8 0f16 	cmp.w	r8, #22
 800fce2:	d82b      	bhi.n	800fd3c <_dtoa_r+0x1a4>
 800fce4:	495e      	ldr	r1, [pc, #376]	@ (800fe60 <_dtoa_r+0x2c8>)
 800fce6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fcea:	ed91 7b00 	vldr	d7, [r1]
 800fcee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf6:	d501      	bpl.n	800fcfc <_dtoa_r+0x164>
 800fcf8:	f108 38ff 	add.w	r8, r8, #4294967295
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	e01e      	b.n	800fd3e <_dtoa_r+0x1a6>
 800fd00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd02:	4413      	add	r3, r2
 800fd04:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fd08:	2920      	cmp	r1, #32
 800fd0a:	bfc1      	itttt	gt
 800fd0c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fd10:	408e      	lslgt	r6, r1
 800fd12:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fd16:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fd1a:	bfd6      	itet	le
 800fd1c:	f1c1 0120 	rsble	r1, r1, #32
 800fd20:	4331      	orrgt	r1, r6
 800fd22:	fa04 f101 	lslle.w	r1, r4, r1
 800fd26:	ee07 1a90 	vmov	s15, r1
 800fd2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fd2e:	3b01      	subs	r3, #1
 800fd30:	ee17 1a90 	vmov	r1, s15
 800fd34:	2501      	movs	r5, #1
 800fd36:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fd3a:	e7a8      	b.n	800fc8e <_dtoa_r+0xf6>
 800fd3c:	2101      	movs	r1, #1
 800fd3e:	1ad2      	subs	r2, r2, r3
 800fd40:	1e53      	subs	r3, r2, #1
 800fd42:	9306      	str	r3, [sp, #24]
 800fd44:	bf45      	ittet	mi
 800fd46:	f1c2 0301 	rsbmi	r3, r2, #1
 800fd4a:	9304      	strmi	r3, [sp, #16]
 800fd4c:	2300      	movpl	r3, #0
 800fd4e:	2300      	movmi	r3, #0
 800fd50:	bf4c      	ite	mi
 800fd52:	9306      	strmi	r3, [sp, #24]
 800fd54:	9304      	strpl	r3, [sp, #16]
 800fd56:	f1b8 0f00 	cmp.w	r8, #0
 800fd5a:	910c      	str	r1, [sp, #48]	@ 0x30
 800fd5c:	db18      	blt.n	800fd90 <_dtoa_r+0x1f8>
 800fd5e:	9b06      	ldr	r3, [sp, #24]
 800fd60:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fd64:	4443      	add	r3, r8
 800fd66:	9306      	str	r3, [sp, #24]
 800fd68:	2300      	movs	r3, #0
 800fd6a:	9a07      	ldr	r2, [sp, #28]
 800fd6c:	2a09      	cmp	r2, #9
 800fd6e:	d845      	bhi.n	800fdfc <_dtoa_r+0x264>
 800fd70:	2a05      	cmp	r2, #5
 800fd72:	bfc4      	itt	gt
 800fd74:	3a04      	subgt	r2, #4
 800fd76:	9207      	strgt	r2, [sp, #28]
 800fd78:	9a07      	ldr	r2, [sp, #28]
 800fd7a:	f1a2 0202 	sub.w	r2, r2, #2
 800fd7e:	bfcc      	ite	gt
 800fd80:	2400      	movgt	r4, #0
 800fd82:	2401      	movle	r4, #1
 800fd84:	2a03      	cmp	r2, #3
 800fd86:	d844      	bhi.n	800fe12 <_dtoa_r+0x27a>
 800fd88:	e8df f002 	tbb	[pc, r2]
 800fd8c:	0b173634 	.word	0x0b173634
 800fd90:	9b04      	ldr	r3, [sp, #16]
 800fd92:	2200      	movs	r2, #0
 800fd94:	eba3 0308 	sub.w	r3, r3, r8
 800fd98:	9304      	str	r3, [sp, #16]
 800fd9a:	920a      	str	r2, [sp, #40]	@ 0x28
 800fd9c:	f1c8 0300 	rsb	r3, r8, #0
 800fda0:	e7e3      	b.n	800fd6a <_dtoa_r+0x1d2>
 800fda2:	2201      	movs	r2, #1
 800fda4:	9208      	str	r2, [sp, #32]
 800fda6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fda8:	eb08 0b02 	add.w	fp, r8, r2
 800fdac:	f10b 0a01 	add.w	sl, fp, #1
 800fdb0:	4652      	mov	r2, sl
 800fdb2:	2a01      	cmp	r2, #1
 800fdb4:	bfb8      	it	lt
 800fdb6:	2201      	movlt	r2, #1
 800fdb8:	e006      	b.n	800fdc8 <_dtoa_r+0x230>
 800fdba:	2201      	movs	r2, #1
 800fdbc:	9208      	str	r2, [sp, #32]
 800fdbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdc0:	2a00      	cmp	r2, #0
 800fdc2:	dd29      	ble.n	800fe18 <_dtoa_r+0x280>
 800fdc4:	4693      	mov	fp, r2
 800fdc6:	4692      	mov	sl, r2
 800fdc8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fdcc:	2100      	movs	r1, #0
 800fdce:	2004      	movs	r0, #4
 800fdd0:	f100 0614 	add.w	r6, r0, #20
 800fdd4:	4296      	cmp	r6, r2
 800fdd6:	d926      	bls.n	800fe26 <_dtoa_r+0x28e>
 800fdd8:	6079      	str	r1, [r7, #4]
 800fdda:	4648      	mov	r0, r9
 800fddc:	9305      	str	r3, [sp, #20]
 800fdde:	f000 fc83 	bl	80106e8 <_Balloc>
 800fde2:	9b05      	ldr	r3, [sp, #20]
 800fde4:	4607      	mov	r7, r0
 800fde6:	2800      	cmp	r0, #0
 800fde8:	d13e      	bne.n	800fe68 <_dtoa_r+0x2d0>
 800fdea:	4b1e      	ldr	r3, [pc, #120]	@ (800fe64 <_dtoa_r+0x2cc>)
 800fdec:	4602      	mov	r2, r0
 800fdee:	f240 11af 	movw	r1, #431	@ 0x1af
 800fdf2:	e6ea      	b.n	800fbca <_dtoa_r+0x32>
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	e7e1      	b.n	800fdbc <_dtoa_r+0x224>
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	e7d3      	b.n	800fda4 <_dtoa_r+0x20c>
 800fdfc:	2401      	movs	r4, #1
 800fdfe:	2200      	movs	r2, #0
 800fe00:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fe04:	f04f 3bff 	mov.w	fp, #4294967295
 800fe08:	2100      	movs	r1, #0
 800fe0a:	46da      	mov	sl, fp
 800fe0c:	2212      	movs	r2, #18
 800fe0e:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe10:	e7da      	b.n	800fdc8 <_dtoa_r+0x230>
 800fe12:	2201      	movs	r2, #1
 800fe14:	9208      	str	r2, [sp, #32]
 800fe16:	e7f5      	b.n	800fe04 <_dtoa_r+0x26c>
 800fe18:	f04f 0b01 	mov.w	fp, #1
 800fe1c:	46da      	mov	sl, fp
 800fe1e:	465a      	mov	r2, fp
 800fe20:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fe24:	e7d0      	b.n	800fdc8 <_dtoa_r+0x230>
 800fe26:	3101      	adds	r1, #1
 800fe28:	0040      	lsls	r0, r0, #1
 800fe2a:	e7d1      	b.n	800fdd0 <_dtoa_r+0x238>
 800fe2c:	f3af 8000 	nop.w
 800fe30:	636f4361 	.word	0x636f4361
 800fe34:	3fd287a7 	.word	0x3fd287a7
 800fe38:	8b60c8b3 	.word	0x8b60c8b3
 800fe3c:	3fc68a28 	.word	0x3fc68a28
 800fe40:	509f79fb 	.word	0x509f79fb
 800fe44:	3fd34413 	.word	0x3fd34413
 800fe48:	08011d01 	.word	0x08011d01
 800fe4c:	08011d18 	.word	0x08011d18
 800fe50:	7ff00000 	.word	0x7ff00000
 800fe54:	08011cfd 	.word	0x08011cfd
 800fe58:	08011cd1 	.word	0x08011cd1
 800fe5c:	08011cd0 	.word	0x08011cd0
 800fe60:	08011e68 	.word	0x08011e68
 800fe64:	08011d70 	.word	0x08011d70
 800fe68:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800fe6c:	f1ba 0f0e 	cmp.w	sl, #14
 800fe70:	6010      	str	r0, [r2, #0]
 800fe72:	d86e      	bhi.n	800ff52 <_dtoa_r+0x3ba>
 800fe74:	2c00      	cmp	r4, #0
 800fe76:	d06c      	beq.n	800ff52 <_dtoa_r+0x3ba>
 800fe78:	f1b8 0f00 	cmp.w	r8, #0
 800fe7c:	f340 80b4 	ble.w	800ffe8 <_dtoa_r+0x450>
 800fe80:	4ac8      	ldr	r2, [pc, #800]	@ (80101a4 <_dtoa_r+0x60c>)
 800fe82:	f008 010f 	and.w	r1, r8, #15
 800fe86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fe8a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800fe8e:	ed92 7b00 	vldr	d7, [r2]
 800fe92:	ea4f 1128 	mov.w	r1, r8, asr #4
 800fe96:	f000 809b 	beq.w	800ffd0 <_dtoa_r+0x438>
 800fe9a:	4ac3      	ldr	r2, [pc, #780]	@ (80101a8 <_dtoa_r+0x610>)
 800fe9c:	ed92 6b08 	vldr	d6, [r2, #32]
 800fea0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fea4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fea8:	f001 010f 	and.w	r1, r1, #15
 800feac:	2203      	movs	r2, #3
 800feae:	48be      	ldr	r0, [pc, #760]	@ (80101a8 <_dtoa_r+0x610>)
 800feb0:	2900      	cmp	r1, #0
 800feb2:	f040 808f 	bne.w	800ffd4 <_dtoa_r+0x43c>
 800feb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800feba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800febe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fec2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fec4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fec8:	2900      	cmp	r1, #0
 800feca:	f000 80b3 	beq.w	8010034 <_dtoa_r+0x49c>
 800fece:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800fed2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feda:	f140 80ab 	bpl.w	8010034 <_dtoa_r+0x49c>
 800fede:	f1ba 0f00 	cmp.w	sl, #0
 800fee2:	f000 80a7 	beq.w	8010034 <_dtoa_r+0x49c>
 800fee6:	f1bb 0f00 	cmp.w	fp, #0
 800feea:	dd30      	ble.n	800ff4e <_dtoa_r+0x3b6>
 800feec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800fef0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fef4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fef8:	f108 31ff 	add.w	r1, r8, #4294967295
 800fefc:	9105      	str	r1, [sp, #20]
 800fefe:	3201      	adds	r2, #1
 800ff00:	465c      	mov	r4, fp
 800ff02:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ff06:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ff0a:	ee07 2a90 	vmov	s15, r2
 800ff0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ff12:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ff16:	ee15 2a90 	vmov	r2, s11
 800ff1a:	ec51 0b15 	vmov	r0, r1, d5
 800ff1e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ff22:	2c00      	cmp	r4, #0
 800ff24:	f040 808a 	bne.w	801003c <_dtoa_r+0x4a4>
 800ff28:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ff2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ff30:	ec41 0b17 	vmov	d7, r0, r1
 800ff34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff3c:	f300 826a 	bgt.w	8010414 <_dtoa_r+0x87c>
 800ff40:	eeb1 7b47 	vneg.f64	d7, d7
 800ff44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff4c:	d423      	bmi.n	800ff96 <_dtoa_r+0x3fe>
 800ff4e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ff52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ff54:	2a00      	cmp	r2, #0
 800ff56:	f2c0 8129 	blt.w	80101ac <_dtoa_r+0x614>
 800ff5a:	f1b8 0f0e 	cmp.w	r8, #14
 800ff5e:	f300 8125 	bgt.w	80101ac <_dtoa_r+0x614>
 800ff62:	4b90      	ldr	r3, [pc, #576]	@ (80101a4 <_dtoa_r+0x60c>)
 800ff64:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ff68:	ed93 6b00 	vldr	d6, [r3]
 800ff6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f280 80c8 	bge.w	8010104 <_dtoa_r+0x56c>
 800ff74:	f1ba 0f00 	cmp.w	sl, #0
 800ff78:	f300 80c4 	bgt.w	8010104 <_dtoa_r+0x56c>
 800ff7c:	d10b      	bne.n	800ff96 <_dtoa_r+0x3fe>
 800ff7e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ff82:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ff86:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff92:	f2c0 823c 	blt.w	801040e <_dtoa_r+0x876>
 800ff96:	2400      	movs	r4, #0
 800ff98:	4625      	mov	r5, r4
 800ff9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff9c:	43db      	mvns	r3, r3
 800ff9e:	9305      	str	r3, [sp, #20]
 800ffa0:	463e      	mov	r6, r7
 800ffa2:	f04f 0800 	mov.w	r8, #0
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	4648      	mov	r0, r9
 800ffaa:	f000 fbdd 	bl	8010768 <_Bfree>
 800ffae:	2d00      	cmp	r5, #0
 800ffb0:	f000 80a2 	beq.w	80100f8 <_dtoa_r+0x560>
 800ffb4:	f1b8 0f00 	cmp.w	r8, #0
 800ffb8:	d005      	beq.n	800ffc6 <_dtoa_r+0x42e>
 800ffba:	45a8      	cmp	r8, r5
 800ffbc:	d003      	beq.n	800ffc6 <_dtoa_r+0x42e>
 800ffbe:	4641      	mov	r1, r8
 800ffc0:	4648      	mov	r0, r9
 800ffc2:	f000 fbd1 	bl	8010768 <_Bfree>
 800ffc6:	4629      	mov	r1, r5
 800ffc8:	4648      	mov	r0, r9
 800ffca:	f000 fbcd 	bl	8010768 <_Bfree>
 800ffce:	e093      	b.n	80100f8 <_dtoa_r+0x560>
 800ffd0:	2202      	movs	r2, #2
 800ffd2:	e76c      	b.n	800feae <_dtoa_r+0x316>
 800ffd4:	07cc      	lsls	r4, r1, #31
 800ffd6:	d504      	bpl.n	800ffe2 <_dtoa_r+0x44a>
 800ffd8:	ed90 6b00 	vldr	d6, [r0]
 800ffdc:	3201      	adds	r2, #1
 800ffde:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ffe2:	1049      	asrs	r1, r1, #1
 800ffe4:	3008      	adds	r0, #8
 800ffe6:	e763      	b.n	800feb0 <_dtoa_r+0x318>
 800ffe8:	d022      	beq.n	8010030 <_dtoa_r+0x498>
 800ffea:	f1c8 0100 	rsb	r1, r8, #0
 800ffee:	4a6d      	ldr	r2, [pc, #436]	@ (80101a4 <_dtoa_r+0x60c>)
 800fff0:	f001 000f 	and.w	r0, r1, #15
 800fff4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fff8:	ed92 7b00 	vldr	d7, [r2]
 800fffc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010000:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010004:	4868      	ldr	r0, [pc, #416]	@ (80101a8 <_dtoa_r+0x610>)
 8010006:	1109      	asrs	r1, r1, #4
 8010008:	2400      	movs	r4, #0
 801000a:	2202      	movs	r2, #2
 801000c:	b929      	cbnz	r1, 801001a <_dtoa_r+0x482>
 801000e:	2c00      	cmp	r4, #0
 8010010:	f43f af57 	beq.w	800fec2 <_dtoa_r+0x32a>
 8010014:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010018:	e753      	b.n	800fec2 <_dtoa_r+0x32a>
 801001a:	07ce      	lsls	r6, r1, #31
 801001c:	d505      	bpl.n	801002a <_dtoa_r+0x492>
 801001e:	ed90 6b00 	vldr	d6, [r0]
 8010022:	3201      	adds	r2, #1
 8010024:	2401      	movs	r4, #1
 8010026:	ee27 7b06 	vmul.f64	d7, d7, d6
 801002a:	1049      	asrs	r1, r1, #1
 801002c:	3008      	adds	r0, #8
 801002e:	e7ed      	b.n	801000c <_dtoa_r+0x474>
 8010030:	2202      	movs	r2, #2
 8010032:	e746      	b.n	800fec2 <_dtoa_r+0x32a>
 8010034:	f8cd 8014 	str.w	r8, [sp, #20]
 8010038:	4654      	mov	r4, sl
 801003a:	e762      	b.n	800ff02 <_dtoa_r+0x36a>
 801003c:	4a59      	ldr	r2, [pc, #356]	@ (80101a4 <_dtoa_r+0x60c>)
 801003e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010042:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010046:	9a08      	ldr	r2, [sp, #32]
 8010048:	ec41 0b17 	vmov	d7, r0, r1
 801004c:	443c      	add	r4, r7
 801004e:	b34a      	cbz	r2, 80100a4 <_dtoa_r+0x50c>
 8010050:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010054:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010058:	463e      	mov	r6, r7
 801005a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801005e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010062:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010066:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801006a:	ee14 2a90 	vmov	r2, s9
 801006e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010072:	3230      	adds	r2, #48	@ 0x30
 8010074:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010078:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801007c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010080:	f806 2b01 	strb.w	r2, [r6], #1
 8010084:	d438      	bmi.n	80100f8 <_dtoa_r+0x560>
 8010086:	ee32 5b46 	vsub.f64	d5, d2, d6
 801008a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801008e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010092:	d46e      	bmi.n	8010172 <_dtoa_r+0x5da>
 8010094:	42a6      	cmp	r6, r4
 8010096:	f43f af5a 	beq.w	800ff4e <_dtoa_r+0x3b6>
 801009a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801009e:	ee26 6b03 	vmul.f64	d6, d6, d3
 80100a2:	e7e0      	b.n	8010066 <_dtoa_r+0x4ce>
 80100a4:	4621      	mov	r1, r4
 80100a6:	463e      	mov	r6, r7
 80100a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80100ac:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80100b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80100b4:	ee14 2a90 	vmov	r2, s9
 80100b8:	3230      	adds	r2, #48	@ 0x30
 80100ba:	f806 2b01 	strb.w	r2, [r6], #1
 80100be:	42a6      	cmp	r6, r4
 80100c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80100c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80100c8:	d119      	bne.n	80100fe <_dtoa_r+0x566>
 80100ca:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80100ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80100d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80100d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100da:	dc4a      	bgt.n	8010172 <_dtoa_r+0x5da>
 80100dc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80100e0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80100e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e8:	f57f af31 	bpl.w	800ff4e <_dtoa_r+0x3b6>
 80100ec:	460e      	mov	r6, r1
 80100ee:	3901      	subs	r1, #1
 80100f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80100f4:	2b30      	cmp	r3, #48	@ 0x30
 80100f6:	d0f9      	beq.n	80100ec <_dtoa_r+0x554>
 80100f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80100fc:	e027      	b.n	801014e <_dtoa_r+0x5b6>
 80100fe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010102:	e7d5      	b.n	80100b0 <_dtoa_r+0x518>
 8010104:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010108:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801010c:	463e      	mov	r6, r7
 801010e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010112:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010116:	ee15 3a10 	vmov	r3, s10
 801011a:	3330      	adds	r3, #48	@ 0x30
 801011c:	f806 3b01 	strb.w	r3, [r6], #1
 8010120:	1bf3      	subs	r3, r6, r7
 8010122:	459a      	cmp	sl, r3
 8010124:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010128:	eea3 7b46 	vfms.f64	d7, d3, d6
 801012c:	d132      	bne.n	8010194 <_dtoa_r+0x5fc>
 801012e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010132:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013a:	dc18      	bgt.n	801016e <_dtoa_r+0x5d6>
 801013c:	eeb4 7b46 	vcmp.f64	d7, d6
 8010140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010144:	d103      	bne.n	801014e <_dtoa_r+0x5b6>
 8010146:	ee15 3a10 	vmov	r3, s10
 801014a:	07db      	lsls	r3, r3, #31
 801014c:	d40f      	bmi.n	801016e <_dtoa_r+0x5d6>
 801014e:	9901      	ldr	r1, [sp, #4]
 8010150:	4648      	mov	r0, r9
 8010152:	f000 fb09 	bl	8010768 <_Bfree>
 8010156:	2300      	movs	r3, #0
 8010158:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801015a:	7033      	strb	r3, [r6, #0]
 801015c:	f108 0301 	add.w	r3, r8, #1
 8010160:	6013      	str	r3, [r2, #0]
 8010162:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010164:	2b00      	cmp	r3, #0
 8010166:	f000 824b 	beq.w	8010600 <_dtoa_r+0xa68>
 801016a:	601e      	str	r6, [r3, #0]
 801016c:	e248      	b.n	8010600 <_dtoa_r+0xa68>
 801016e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010172:	4633      	mov	r3, r6
 8010174:	461e      	mov	r6, r3
 8010176:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801017a:	2a39      	cmp	r2, #57	@ 0x39
 801017c:	d106      	bne.n	801018c <_dtoa_r+0x5f4>
 801017e:	429f      	cmp	r7, r3
 8010180:	d1f8      	bne.n	8010174 <_dtoa_r+0x5dc>
 8010182:	9a05      	ldr	r2, [sp, #20]
 8010184:	3201      	adds	r2, #1
 8010186:	9205      	str	r2, [sp, #20]
 8010188:	2230      	movs	r2, #48	@ 0x30
 801018a:	703a      	strb	r2, [r7, #0]
 801018c:	781a      	ldrb	r2, [r3, #0]
 801018e:	3201      	adds	r2, #1
 8010190:	701a      	strb	r2, [r3, #0]
 8010192:	e7b1      	b.n	80100f8 <_dtoa_r+0x560>
 8010194:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010198:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801019c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a0:	d1b5      	bne.n	801010e <_dtoa_r+0x576>
 80101a2:	e7d4      	b.n	801014e <_dtoa_r+0x5b6>
 80101a4:	08011e68 	.word	0x08011e68
 80101a8:	08011e40 	.word	0x08011e40
 80101ac:	9908      	ldr	r1, [sp, #32]
 80101ae:	2900      	cmp	r1, #0
 80101b0:	f000 80e9 	beq.w	8010386 <_dtoa_r+0x7ee>
 80101b4:	9907      	ldr	r1, [sp, #28]
 80101b6:	2901      	cmp	r1, #1
 80101b8:	f300 80cb 	bgt.w	8010352 <_dtoa_r+0x7ba>
 80101bc:	2d00      	cmp	r5, #0
 80101be:	f000 80c4 	beq.w	801034a <_dtoa_r+0x7b2>
 80101c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80101c6:	9e04      	ldr	r6, [sp, #16]
 80101c8:	461c      	mov	r4, r3
 80101ca:	9305      	str	r3, [sp, #20]
 80101cc:	9b04      	ldr	r3, [sp, #16]
 80101ce:	4413      	add	r3, r2
 80101d0:	9304      	str	r3, [sp, #16]
 80101d2:	9b06      	ldr	r3, [sp, #24]
 80101d4:	2101      	movs	r1, #1
 80101d6:	4413      	add	r3, r2
 80101d8:	4648      	mov	r0, r9
 80101da:	9306      	str	r3, [sp, #24]
 80101dc:	f000 fb78 	bl	80108d0 <__i2b>
 80101e0:	9b05      	ldr	r3, [sp, #20]
 80101e2:	4605      	mov	r5, r0
 80101e4:	b166      	cbz	r6, 8010200 <_dtoa_r+0x668>
 80101e6:	9a06      	ldr	r2, [sp, #24]
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	dd09      	ble.n	8010200 <_dtoa_r+0x668>
 80101ec:	42b2      	cmp	r2, r6
 80101ee:	9904      	ldr	r1, [sp, #16]
 80101f0:	bfa8      	it	ge
 80101f2:	4632      	movge	r2, r6
 80101f4:	1a89      	subs	r1, r1, r2
 80101f6:	9104      	str	r1, [sp, #16]
 80101f8:	9906      	ldr	r1, [sp, #24]
 80101fa:	1ab6      	subs	r6, r6, r2
 80101fc:	1a8a      	subs	r2, r1, r2
 80101fe:	9206      	str	r2, [sp, #24]
 8010200:	b30b      	cbz	r3, 8010246 <_dtoa_r+0x6ae>
 8010202:	9a08      	ldr	r2, [sp, #32]
 8010204:	2a00      	cmp	r2, #0
 8010206:	f000 80c5 	beq.w	8010394 <_dtoa_r+0x7fc>
 801020a:	2c00      	cmp	r4, #0
 801020c:	f000 80bf 	beq.w	801038e <_dtoa_r+0x7f6>
 8010210:	4629      	mov	r1, r5
 8010212:	4622      	mov	r2, r4
 8010214:	4648      	mov	r0, r9
 8010216:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010218:	f000 fc12 	bl	8010a40 <__pow5mult>
 801021c:	9a01      	ldr	r2, [sp, #4]
 801021e:	4601      	mov	r1, r0
 8010220:	4605      	mov	r5, r0
 8010222:	4648      	mov	r0, r9
 8010224:	f000 fb6a 	bl	80108fc <__multiply>
 8010228:	9901      	ldr	r1, [sp, #4]
 801022a:	9005      	str	r0, [sp, #20]
 801022c:	4648      	mov	r0, r9
 801022e:	f000 fa9b 	bl	8010768 <_Bfree>
 8010232:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010234:	1b1b      	subs	r3, r3, r4
 8010236:	f000 80b0 	beq.w	801039a <_dtoa_r+0x802>
 801023a:	9905      	ldr	r1, [sp, #20]
 801023c:	461a      	mov	r2, r3
 801023e:	4648      	mov	r0, r9
 8010240:	f000 fbfe 	bl	8010a40 <__pow5mult>
 8010244:	9001      	str	r0, [sp, #4]
 8010246:	2101      	movs	r1, #1
 8010248:	4648      	mov	r0, r9
 801024a:	f000 fb41 	bl	80108d0 <__i2b>
 801024e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010250:	4604      	mov	r4, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	f000 81da 	beq.w	801060c <_dtoa_r+0xa74>
 8010258:	461a      	mov	r2, r3
 801025a:	4601      	mov	r1, r0
 801025c:	4648      	mov	r0, r9
 801025e:	f000 fbef 	bl	8010a40 <__pow5mult>
 8010262:	9b07      	ldr	r3, [sp, #28]
 8010264:	2b01      	cmp	r3, #1
 8010266:	4604      	mov	r4, r0
 8010268:	f300 80a0 	bgt.w	80103ac <_dtoa_r+0x814>
 801026c:	9b02      	ldr	r3, [sp, #8]
 801026e:	2b00      	cmp	r3, #0
 8010270:	f040 8096 	bne.w	80103a0 <_dtoa_r+0x808>
 8010274:	9b03      	ldr	r3, [sp, #12]
 8010276:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801027a:	2a00      	cmp	r2, #0
 801027c:	f040 8092 	bne.w	80103a4 <_dtoa_r+0x80c>
 8010280:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010284:	0d12      	lsrs	r2, r2, #20
 8010286:	0512      	lsls	r2, r2, #20
 8010288:	2a00      	cmp	r2, #0
 801028a:	f000 808d 	beq.w	80103a8 <_dtoa_r+0x810>
 801028e:	9b04      	ldr	r3, [sp, #16]
 8010290:	3301      	adds	r3, #1
 8010292:	9304      	str	r3, [sp, #16]
 8010294:	9b06      	ldr	r3, [sp, #24]
 8010296:	3301      	adds	r3, #1
 8010298:	9306      	str	r3, [sp, #24]
 801029a:	2301      	movs	r3, #1
 801029c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801029e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f000 81b9 	beq.w	8010618 <_dtoa_r+0xa80>
 80102a6:	6922      	ldr	r2, [r4, #16]
 80102a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80102ac:	6910      	ldr	r0, [r2, #16]
 80102ae:	f000 fac3 	bl	8010838 <__hi0bits>
 80102b2:	f1c0 0020 	rsb	r0, r0, #32
 80102b6:	9b06      	ldr	r3, [sp, #24]
 80102b8:	4418      	add	r0, r3
 80102ba:	f010 001f 	ands.w	r0, r0, #31
 80102be:	f000 8081 	beq.w	80103c4 <_dtoa_r+0x82c>
 80102c2:	f1c0 0220 	rsb	r2, r0, #32
 80102c6:	2a04      	cmp	r2, #4
 80102c8:	dd73      	ble.n	80103b2 <_dtoa_r+0x81a>
 80102ca:	9b04      	ldr	r3, [sp, #16]
 80102cc:	f1c0 001c 	rsb	r0, r0, #28
 80102d0:	4403      	add	r3, r0
 80102d2:	9304      	str	r3, [sp, #16]
 80102d4:	9b06      	ldr	r3, [sp, #24]
 80102d6:	4406      	add	r6, r0
 80102d8:	4403      	add	r3, r0
 80102da:	9306      	str	r3, [sp, #24]
 80102dc:	9b04      	ldr	r3, [sp, #16]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	dd05      	ble.n	80102ee <_dtoa_r+0x756>
 80102e2:	9901      	ldr	r1, [sp, #4]
 80102e4:	461a      	mov	r2, r3
 80102e6:	4648      	mov	r0, r9
 80102e8:	f000 fc04 	bl	8010af4 <__lshift>
 80102ec:	9001      	str	r0, [sp, #4]
 80102ee:	9b06      	ldr	r3, [sp, #24]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	dd05      	ble.n	8010300 <_dtoa_r+0x768>
 80102f4:	4621      	mov	r1, r4
 80102f6:	461a      	mov	r2, r3
 80102f8:	4648      	mov	r0, r9
 80102fa:	f000 fbfb 	bl	8010af4 <__lshift>
 80102fe:	4604      	mov	r4, r0
 8010300:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010302:	2b00      	cmp	r3, #0
 8010304:	d060      	beq.n	80103c8 <_dtoa_r+0x830>
 8010306:	9801      	ldr	r0, [sp, #4]
 8010308:	4621      	mov	r1, r4
 801030a:	f000 fc5f 	bl	8010bcc <__mcmp>
 801030e:	2800      	cmp	r0, #0
 8010310:	da5a      	bge.n	80103c8 <_dtoa_r+0x830>
 8010312:	f108 33ff 	add.w	r3, r8, #4294967295
 8010316:	9305      	str	r3, [sp, #20]
 8010318:	9901      	ldr	r1, [sp, #4]
 801031a:	2300      	movs	r3, #0
 801031c:	220a      	movs	r2, #10
 801031e:	4648      	mov	r0, r9
 8010320:	f000 fa44 	bl	80107ac <__multadd>
 8010324:	9b08      	ldr	r3, [sp, #32]
 8010326:	9001      	str	r0, [sp, #4]
 8010328:	2b00      	cmp	r3, #0
 801032a:	f000 8177 	beq.w	801061c <_dtoa_r+0xa84>
 801032e:	4629      	mov	r1, r5
 8010330:	2300      	movs	r3, #0
 8010332:	220a      	movs	r2, #10
 8010334:	4648      	mov	r0, r9
 8010336:	f000 fa39 	bl	80107ac <__multadd>
 801033a:	f1bb 0f00 	cmp.w	fp, #0
 801033e:	4605      	mov	r5, r0
 8010340:	dc6e      	bgt.n	8010420 <_dtoa_r+0x888>
 8010342:	9b07      	ldr	r3, [sp, #28]
 8010344:	2b02      	cmp	r3, #2
 8010346:	dc48      	bgt.n	80103da <_dtoa_r+0x842>
 8010348:	e06a      	b.n	8010420 <_dtoa_r+0x888>
 801034a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801034c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010350:	e739      	b.n	80101c6 <_dtoa_r+0x62e>
 8010352:	f10a 34ff 	add.w	r4, sl, #4294967295
 8010356:	42a3      	cmp	r3, r4
 8010358:	db07      	blt.n	801036a <_dtoa_r+0x7d2>
 801035a:	f1ba 0f00 	cmp.w	sl, #0
 801035e:	eba3 0404 	sub.w	r4, r3, r4
 8010362:	db0b      	blt.n	801037c <_dtoa_r+0x7e4>
 8010364:	9e04      	ldr	r6, [sp, #16]
 8010366:	4652      	mov	r2, sl
 8010368:	e72f      	b.n	80101ca <_dtoa_r+0x632>
 801036a:	1ae2      	subs	r2, r4, r3
 801036c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801036e:	9e04      	ldr	r6, [sp, #16]
 8010370:	4413      	add	r3, r2
 8010372:	930a      	str	r3, [sp, #40]	@ 0x28
 8010374:	4652      	mov	r2, sl
 8010376:	4623      	mov	r3, r4
 8010378:	2400      	movs	r4, #0
 801037a:	e726      	b.n	80101ca <_dtoa_r+0x632>
 801037c:	9a04      	ldr	r2, [sp, #16]
 801037e:	eba2 060a 	sub.w	r6, r2, sl
 8010382:	2200      	movs	r2, #0
 8010384:	e721      	b.n	80101ca <_dtoa_r+0x632>
 8010386:	9e04      	ldr	r6, [sp, #16]
 8010388:	9d08      	ldr	r5, [sp, #32]
 801038a:	461c      	mov	r4, r3
 801038c:	e72a      	b.n	80101e4 <_dtoa_r+0x64c>
 801038e:	9a01      	ldr	r2, [sp, #4]
 8010390:	9205      	str	r2, [sp, #20]
 8010392:	e752      	b.n	801023a <_dtoa_r+0x6a2>
 8010394:	9901      	ldr	r1, [sp, #4]
 8010396:	461a      	mov	r2, r3
 8010398:	e751      	b.n	801023e <_dtoa_r+0x6a6>
 801039a:	9b05      	ldr	r3, [sp, #20]
 801039c:	9301      	str	r3, [sp, #4]
 801039e:	e752      	b.n	8010246 <_dtoa_r+0x6ae>
 80103a0:	2300      	movs	r3, #0
 80103a2:	e77b      	b.n	801029c <_dtoa_r+0x704>
 80103a4:	9b02      	ldr	r3, [sp, #8]
 80103a6:	e779      	b.n	801029c <_dtoa_r+0x704>
 80103a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80103aa:	e778      	b.n	801029e <_dtoa_r+0x706>
 80103ac:	2300      	movs	r3, #0
 80103ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103b0:	e779      	b.n	80102a6 <_dtoa_r+0x70e>
 80103b2:	d093      	beq.n	80102dc <_dtoa_r+0x744>
 80103b4:	9b04      	ldr	r3, [sp, #16]
 80103b6:	321c      	adds	r2, #28
 80103b8:	4413      	add	r3, r2
 80103ba:	9304      	str	r3, [sp, #16]
 80103bc:	9b06      	ldr	r3, [sp, #24]
 80103be:	4416      	add	r6, r2
 80103c0:	4413      	add	r3, r2
 80103c2:	e78a      	b.n	80102da <_dtoa_r+0x742>
 80103c4:	4602      	mov	r2, r0
 80103c6:	e7f5      	b.n	80103b4 <_dtoa_r+0x81c>
 80103c8:	f1ba 0f00 	cmp.w	sl, #0
 80103cc:	f8cd 8014 	str.w	r8, [sp, #20]
 80103d0:	46d3      	mov	fp, sl
 80103d2:	dc21      	bgt.n	8010418 <_dtoa_r+0x880>
 80103d4:	9b07      	ldr	r3, [sp, #28]
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	dd1e      	ble.n	8010418 <_dtoa_r+0x880>
 80103da:	f1bb 0f00 	cmp.w	fp, #0
 80103de:	f47f addc 	bne.w	800ff9a <_dtoa_r+0x402>
 80103e2:	4621      	mov	r1, r4
 80103e4:	465b      	mov	r3, fp
 80103e6:	2205      	movs	r2, #5
 80103e8:	4648      	mov	r0, r9
 80103ea:	f000 f9df 	bl	80107ac <__multadd>
 80103ee:	4601      	mov	r1, r0
 80103f0:	4604      	mov	r4, r0
 80103f2:	9801      	ldr	r0, [sp, #4]
 80103f4:	f000 fbea 	bl	8010bcc <__mcmp>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	f77f adce 	ble.w	800ff9a <_dtoa_r+0x402>
 80103fe:	463e      	mov	r6, r7
 8010400:	2331      	movs	r3, #49	@ 0x31
 8010402:	f806 3b01 	strb.w	r3, [r6], #1
 8010406:	9b05      	ldr	r3, [sp, #20]
 8010408:	3301      	adds	r3, #1
 801040a:	9305      	str	r3, [sp, #20]
 801040c:	e5c9      	b.n	800ffa2 <_dtoa_r+0x40a>
 801040e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010412:	4654      	mov	r4, sl
 8010414:	4625      	mov	r5, r4
 8010416:	e7f2      	b.n	80103fe <_dtoa_r+0x866>
 8010418:	9b08      	ldr	r3, [sp, #32]
 801041a:	2b00      	cmp	r3, #0
 801041c:	f000 8102 	beq.w	8010624 <_dtoa_r+0xa8c>
 8010420:	2e00      	cmp	r6, #0
 8010422:	dd05      	ble.n	8010430 <_dtoa_r+0x898>
 8010424:	4629      	mov	r1, r5
 8010426:	4632      	mov	r2, r6
 8010428:	4648      	mov	r0, r9
 801042a:	f000 fb63 	bl	8010af4 <__lshift>
 801042e:	4605      	mov	r5, r0
 8010430:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010432:	2b00      	cmp	r3, #0
 8010434:	d058      	beq.n	80104e8 <_dtoa_r+0x950>
 8010436:	6869      	ldr	r1, [r5, #4]
 8010438:	4648      	mov	r0, r9
 801043a:	f000 f955 	bl	80106e8 <_Balloc>
 801043e:	4606      	mov	r6, r0
 8010440:	b928      	cbnz	r0, 801044e <_dtoa_r+0x8b6>
 8010442:	4b82      	ldr	r3, [pc, #520]	@ (801064c <_dtoa_r+0xab4>)
 8010444:	4602      	mov	r2, r0
 8010446:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801044a:	f7ff bbbe 	b.w	800fbca <_dtoa_r+0x32>
 801044e:	692a      	ldr	r2, [r5, #16]
 8010450:	3202      	adds	r2, #2
 8010452:	0092      	lsls	r2, r2, #2
 8010454:	f105 010c 	add.w	r1, r5, #12
 8010458:	300c      	adds	r0, #12
 801045a:	f7ff fb04 	bl	800fa66 <memcpy>
 801045e:	2201      	movs	r2, #1
 8010460:	4631      	mov	r1, r6
 8010462:	4648      	mov	r0, r9
 8010464:	f000 fb46 	bl	8010af4 <__lshift>
 8010468:	1c7b      	adds	r3, r7, #1
 801046a:	9304      	str	r3, [sp, #16]
 801046c:	eb07 030b 	add.w	r3, r7, fp
 8010470:	9309      	str	r3, [sp, #36]	@ 0x24
 8010472:	9b02      	ldr	r3, [sp, #8]
 8010474:	f003 0301 	and.w	r3, r3, #1
 8010478:	46a8      	mov	r8, r5
 801047a:	9308      	str	r3, [sp, #32]
 801047c:	4605      	mov	r5, r0
 801047e:	9b04      	ldr	r3, [sp, #16]
 8010480:	9801      	ldr	r0, [sp, #4]
 8010482:	4621      	mov	r1, r4
 8010484:	f103 3bff 	add.w	fp, r3, #4294967295
 8010488:	f7ff fafb 	bl	800fa82 <quorem>
 801048c:	4641      	mov	r1, r8
 801048e:	9002      	str	r0, [sp, #8]
 8010490:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010494:	9801      	ldr	r0, [sp, #4]
 8010496:	f000 fb99 	bl	8010bcc <__mcmp>
 801049a:	462a      	mov	r2, r5
 801049c:	9006      	str	r0, [sp, #24]
 801049e:	4621      	mov	r1, r4
 80104a0:	4648      	mov	r0, r9
 80104a2:	f000 fbaf 	bl	8010c04 <__mdiff>
 80104a6:	68c2      	ldr	r2, [r0, #12]
 80104a8:	4606      	mov	r6, r0
 80104aa:	b9fa      	cbnz	r2, 80104ec <_dtoa_r+0x954>
 80104ac:	4601      	mov	r1, r0
 80104ae:	9801      	ldr	r0, [sp, #4]
 80104b0:	f000 fb8c 	bl	8010bcc <__mcmp>
 80104b4:	4602      	mov	r2, r0
 80104b6:	4631      	mov	r1, r6
 80104b8:	4648      	mov	r0, r9
 80104ba:	920a      	str	r2, [sp, #40]	@ 0x28
 80104bc:	f000 f954 	bl	8010768 <_Bfree>
 80104c0:	9b07      	ldr	r3, [sp, #28]
 80104c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80104c4:	9e04      	ldr	r6, [sp, #16]
 80104c6:	ea42 0103 	orr.w	r1, r2, r3
 80104ca:	9b08      	ldr	r3, [sp, #32]
 80104cc:	4319      	orrs	r1, r3
 80104ce:	d10f      	bne.n	80104f0 <_dtoa_r+0x958>
 80104d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80104d4:	d028      	beq.n	8010528 <_dtoa_r+0x990>
 80104d6:	9b06      	ldr	r3, [sp, #24]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	dd02      	ble.n	80104e2 <_dtoa_r+0x94a>
 80104dc:	9b02      	ldr	r3, [sp, #8]
 80104de:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80104e2:	f88b a000 	strb.w	sl, [fp]
 80104e6:	e55e      	b.n	800ffa6 <_dtoa_r+0x40e>
 80104e8:	4628      	mov	r0, r5
 80104ea:	e7bd      	b.n	8010468 <_dtoa_r+0x8d0>
 80104ec:	2201      	movs	r2, #1
 80104ee:	e7e2      	b.n	80104b6 <_dtoa_r+0x91e>
 80104f0:	9b06      	ldr	r3, [sp, #24]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	db04      	blt.n	8010500 <_dtoa_r+0x968>
 80104f6:	9907      	ldr	r1, [sp, #28]
 80104f8:	430b      	orrs	r3, r1
 80104fa:	9908      	ldr	r1, [sp, #32]
 80104fc:	430b      	orrs	r3, r1
 80104fe:	d120      	bne.n	8010542 <_dtoa_r+0x9aa>
 8010500:	2a00      	cmp	r2, #0
 8010502:	ddee      	ble.n	80104e2 <_dtoa_r+0x94a>
 8010504:	9901      	ldr	r1, [sp, #4]
 8010506:	2201      	movs	r2, #1
 8010508:	4648      	mov	r0, r9
 801050a:	f000 faf3 	bl	8010af4 <__lshift>
 801050e:	4621      	mov	r1, r4
 8010510:	9001      	str	r0, [sp, #4]
 8010512:	f000 fb5b 	bl	8010bcc <__mcmp>
 8010516:	2800      	cmp	r0, #0
 8010518:	dc03      	bgt.n	8010522 <_dtoa_r+0x98a>
 801051a:	d1e2      	bne.n	80104e2 <_dtoa_r+0x94a>
 801051c:	f01a 0f01 	tst.w	sl, #1
 8010520:	d0df      	beq.n	80104e2 <_dtoa_r+0x94a>
 8010522:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010526:	d1d9      	bne.n	80104dc <_dtoa_r+0x944>
 8010528:	2339      	movs	r3, #57	@ 0x39
 801052a:	f88b 3000 	strb.w	r3, [fp]
 801052e:	4633      	mov	r3, r6
 8010530:	461e      	mov	r6, r3
 8010532:	3b01      	subs	r3, #1
 8010534:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010538:	2a39      	cmp	r2, #57	@ 0x39
 801053a:	d052      	beq.n	80105e2 <_dtoa_r+0xa4a>
 801053c:	3201      	adds	r2, #1
 801053e:	701a      	strb	r2, [r3, #0]
 8010540:	e531      	b.n	800ffa6 <_dtoa_r+0x40e>
 8010542:	2a00      	cmp	r2, #0
 8010544:	dd07      	ble.n	8010556 <_dtoa_r+0x9be>
 8010546:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801054a:	d0ed      	beq.n	8010528 <_dtoa_r+0x990>
 801054c:	f10a 0301 	add.w	r3, sl, #1
 8010550:	f88b 3000 	strb.w	r3, [fp]
 8010554:	e527      	b.n	800ffa6 <_dtoa_r+0x40e>
 8010556:	9b04      	ldr	r3, [sp, #16]
 8010558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801055a:	f803 ac01 	strb.w	sl, [r3, #-1]
 801055e:	4293      	cmp	r3, r2
 8010560:	d029      	beq.n	80105b6 <_dtoa_r+0xa1e>
 8010562:	9901      	ldr	r1, [sp, #4]
 8010564:	2300      	movs	r3, #0
 8010566:	220a      	movs	r2, #10
 8010568:	4648      	mov	r0, r9
 801056a:	f000 f91f 	bl	80107ac <__multadd>
 801056e:	45a8      	cmp	r8, r5
 8010570:	9001      	str	r0, [sp, #4]
 8010572:	f04f 0300 	mov.w	r3, #0
 8010576:	f04f 020a 	mov.w	r2, #10
 801057a:	4641      	mov	r1, r8
 801057c:	4648      	mov	r0, r9
 801057e:	d107      	bne.n	8010590 <_dtoa_r+0x9f8>
 8010580:	f000 f914 	bl	80107ac <__multadd>
 8010584:	4680      	mov	r8, r0
 8010586:	4605      	mov	r5, r0
 8010588:	9b04      	ldr	r3, [sp, #16]
 801058a:	3301      	adds	r3, #1
 801058c:	9304      	str	r3, [sp, #16]
 801058e:	e776      	b.n	801047e <_dtoa_r+0x8e6>
 8010590:	f000 f90c 	bl	80107ac <__multadd>
 8010594:	4629      	mov	r1, r5
 8010596:	4680      	mov	r8, r0
 8010598:	2300      	movs	r3, #0
 801059a:	220a      	movs	r2, #10
 801059c:	4648      	mov	r0, r9
 801059e:	f000 f905 	bl	80107ac <__multadd>
 80105a2:	4605      	mov	r5, r0
 80105a4:	e7f0      	b.n	8010588 <_dtoa_r+0x9f0>
 80105a6:	f1bb 0f00 	cmp.w	fp, #0
 80105aa:	bfcc      	ite	gt
 80105ac:	465e      	movgt	r6, fp
 80105ae:	2601      	movle	r6, #1
 80105b0:	443e      	add	r6, r7
 80105b2:	f04f 0800 	mov.w	r8, #0
 80105b6:	9901      	ldr	r1, [sp, #4]
 80105b8:	2201      	movs	r2, #1
 80105ba:	4648      	mov	r0, r9
 80105bc:	f000 fa9a 	bl	8010af4 <__lshift>
 80105c0:	4621      	mov	r1, r4
 80105c2:	9001      	str	r0, [sp, #4]
 80105c4:	f000 fb02 	bl	8010bcc <__mcmp>
 80105c8:	2800      	cmp	r0, #0
 80105ca:	dcb0      	bgt.n	801052e <_dtoa_r+0x996>
 80105cc:	d102      	bne.n	80105d4 <_dtoa_r+0xa3c>
 80105ce:	f01a 0f01 	tst.w	sl, #1
 80105d2:	d1ac      	bne.n	801052e <_dtoa_r+0x996>
 80105d4:	4633      	mov	r3, r6
 80105d6:	461e      	mov	r6, r3
 80105d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105dc:	2a30      	cmp	r2, #48	@ 0x30
 80105de:	d0fa      	beq.n	80105d6 <_dtoa_r+0xa3e>
 80105e0:	e4e1      	b.n	800ffa6 <_dtoa_r+0x40e>
 80105e2:	429f      	cmp	r7, r3
 80105e4:	d1a4      	bne.n	8010530 <_dtoa_r+0x998>
 80105e6:	9b05      	ldr	r3, [sp, #20]
 80105e8:	3301      	adds	r3, #1
 80105ea:	9305      	str	r3, [sp, #20]
 80105ec:	2331      	movs	r3, #49	@ 0x31
 80105ee:	703b      	strb	r3, [r7, #0]
 80105f0:	e4d9      	b.n	800ffa6 <_dtoa_r+0x40e>
 80105f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80105f4:	4f16      	ldr	r7, [pc, #88]	@ (8010650 <_dtoa_r+0xab8>)
 80105f6:	b11b      	cbz	r3, 8010600 <_dtoa_r+0xa68>
 80105f8:	f107 0308 	add.w	r3, r7, #8
 80105fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80105fe:	6013      	str	r3, [r2, #0]
 8010600:	4638      	mov	r0, r7
 8010602:	b011      	add	sp, #68	@ 0x44
 8010604:	ecbd 8b02 	vpop	{d8}
 8010608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060c:	9b07      	ldr	r3, [sp, #28]
 801060e:	2b01      	cmp	r3, #1
 8010610:	f77f ae2c 	ble.w	801026c <_dtoa_r+0x6d4>
 8010614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010616:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010618:	2001      	movs	r0, #1
 801061a:	e64c      	b.n	80102b6 <_dtoa_r+0x71e>
 801061c:	f1bb 0f00 	cmp.w	fp, #0
 8010620:	f77f aed8 	ble.w	80103d4 <_dtoa_r+0x83c>
 8010624:	463e      	mov	r6, r7
 8010626:	9801      	ldr	r0, [sp, #4]
 8010628:	4621      	mov	r1, r4
 801062a:	f7ff fa2a 	bl	800fa82 <quorem>
 801062e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010632:	f806 ab01 	strb.w	sl, [r6], #1
 8010636:	1bf2      	subs	r2, r6, r7
 8010638:	4593      	cmp	fp, r2
 801063a:	ddb4      	ble.n	80105a6 <_dtoa_r+0xa0e>
 801063c:	9901      	ldr	r1, [sp, #4]
 801063e:	2300      	movs	r3, #0
 8010640:	220a      	movs	r2, #10
 8010642:	4648      	mov	r0, r9
 8010644:	f000 f8b2 	bl	80107ac <__multadd>
 8010648:	9001      	str	r0, [sp, #4]
 801064a:	e7ec      	b.n	8010626 <_dtoa_r+0xa8e>
 801064c:	08011d70 	.word	0x08011d70
 8010650:	08011cf4 	.word	0x08011cf4

08010654 <_free_r>:
 8010654:	b538      	push	{r3, r4, r5, lr}
 8010656:	4605      	mov	r5, r0
 8010658:	2900      	cmp	r1, #0
 801065a:	d041      	beq.n	80106e0 <_free_r+0x8c>
 801065c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010660:	1f0c      	subs	r4, r1, #4
 8010662:	2b00      	cmp	r3, #0
 8010664:	bfb8      	it	lt
 8010666:	18e4      	addlt	r4, r4, r3
 8010668:	f7fe fbde 	bl	800ee28 <__malloc_lock>
 801066c:	4a1d      	ldr	r2, [pc, #116]	@ (80106e4 <_free_r+0x90>)
 801066e:	6813      	ldr	r3, [r2, #0]
 8010670:	b933      	cbnz	r3, 8010680 <_free_r+0x2c>
 8010672:	6063      	str	r3, [r4, #4]
 8010674:	6014      	str	r4, [r2, #0]
 8010676:	4628      	mov	r0, r5
 8010678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801067c:	f7fe bbda 	b.w	800ee34 <__malloc_unlock>
 8010680:	42a3      	cmp	r3, r4
 8010682:	d908      	bls.n	8010696 <_free_r+0x42>
 8010684:	6820      	ldr	r0, [r4, #0]
 8010686:	1821      	adds	r1, r4, r0
 8010688:	428b      	cmp	r3, r1
 801068a:	bf01      	itttt	eq
 801068c:	6819      	ldreq	r1, [r3, #0]
 801068e:	685b      	ldreq	r3, [r3, #4]
 8010690:	1809      	addeq	r1, r1, r0
 8010692:	6021      	streq	r1, [r4, #0]
 8010694:	e7ed      	b.n	8010672 <_free_r+0x1e>
 8010696:	461a      	mov	r2, r3
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	b10b      	cbz	r3, 80106a0 <_free_r+0x4c>
 801069c:	42a3      	cmp	r3, r4
 801069e:	d9fa      	bls.n	8010696 <_free_r+0x42>
 80106a0:	6811      	ldr	r1, [r2, #0]
 80106a2:	1850      	adds	r0, r2, r1
 80106a4:	42a0      	cmp	r0, r4
 80106a6:	d10b      	bne.n	80106c0 <_free_r+0x6c>
 80106a8:	6820      	ldr	r0, [r4, #0]
 80106aa:	4401      	add	r1, r0
 80106ac:	1850      	adds	r0, r2, r1
 80106ae:	4283      	cmp	r3, r0
 80106b0:	6011      	str	r1, [r2, #0]
 80106b2:	d1e0      	bne.n	8010676 <_free_r+0x22>
 80106b4:	6818      	ldr	r0, [r3, #0]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	6053      	str	r3, [r2, #4]
 80106ba:	4408      	add	r0, r1
 80106bc:	6010      	str	r0, [r2, #0]
 80106be:	e7da      	b.n	8010676 <_free_r+0x22>
 80106c0:	d902      	bls.n	80106c8 <_free_r+0x74>
 80106c2:	230c      	movs	r3, #12
 80106c4:	602b      	str	r3, [r5, #0]
 80106c6:	e7d6      	b.n	8010676 <_free_r+0x22>
 80106c8:	6820      	ldr	r0, [r4, #0]
 80106ca:	1821      	adds	r1, r4, r0
 80106cc:	428b      	cmp	r3, r1
 80106ce:	bf04      	itt	eq
 80106d0:	6819      	ldreq	r1, [r3, #0]
 80106d2:	685b      	ldreq	r3, [r3, #4]
 80106d4:	6063      	str	r3, [r4, #4]
 80106d6:	bf04      	itt	eq
 80106d8:	1809      	addeq	r1, r1, r0
 80106da:	6021      	streq	r1, [r4, #0]
 80106dc:	6054      	str	r4, [r2, #4]
 80106de:	e7ca      	b.n	8010676 <_free_r+0x22>
 80106e0:	bd38      	pop	{r3, r4, r5, pc}
 80106e2:	bf00      	nop
 80106e4:	24000cd0 	.word	0x24000cd0

080106e8 <_Balloc>:
 80106e8:	b570      	push	{r4, r5, r6, lr}
 80106ea:	69c6      	ldr	r6, [r0, #28]
 80106ec:	4604      	mov	r4, r0
 80106ee:	460d      	mov	r5, r1
 80106f0:	b976      	cbnz	r6, 8010710 <_Balloc+0x28>
 80106f2:	2010      	movs	r0, #16
 80106f4:	f7fe fae6 	bl	800ecc4 <malloc>
 80106f8:	4602      	mov	r2, r0
 80106fa:	61e0      	str	r0, [r4, #28]
 80106fc:	b920      	cbnz	r0, 8010708 <_Balloc+0x20>
 80106fe:	4b18      	ldr	r3, [pc, #96]	@ (8010760 <_Balloc+0x78>)
 8010700:	4818      	ldr	r0, [pc, #96]	@ (8010764 <_Balloc+0x7c>)
 8010702:	216b      	movs	r1, #107	@ 0x6b
 8010704:	f000 ff5e 	bl	80115c4 <__assert_func>
 8010708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801070c:	6006      	str	r6, [r0, #0]
 801070e:	60c6      	str	r6, [r0, #12]
 8010710:	69e6      	ldr	r6, [r4, #28]
 8010712:	68f3      	ldr	r3, [r6, #12]
 8010714:	b183      	cbz	r3, 8010738 <_Balloc+0x50>
 8010716:	69e3      	ldr	r3, [r4, #28]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801071e:	b9b8      	cbnz	r0, 8010750 <_Balloc+0x68>
 8010720:	2101      	movs	r1, #1
 8010722:	fa01 f605 	lsl.w	r6, r1, r5
 8010726:	1d72      	adds	r2, r6, #5
 8010728:	0092      	lsls	r2, r2, #2
 801072a:	4620      	mov	r0, r4
 801072c:	f000 ff68 	bl	8011600 <_calloc_r>
 8010730:	b160      	cbz	r0, 801074c <_Balloc+0x64>
 8010732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010736:	e00e      	b.n	8010756 <_Balloc+0x6e>
 8010738:	2221      	movs	r2, #33	@ 0x21
 801073a:	2104      	movs	r1, #4
 801073c:	4620      	mov	r0, r4
 801073e:	f000 ff5f 	bl	8011600 <_calloc_r>
 8010742:	69e3      	ldr	r3, [r4, #28]
 8010744:	60f0      	str	r0, [r6, #12]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d1e4      	bne.n	8010716 <_Balloc+0x2e>
 801074c:	2000      	movs	r0, #0
 801074e:	bd70      	pop	{r4, r5, r6, pc}
 8010750:	6802      	ldr	r2, [r0, #0]
 8010752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010756:	2300      	movs	r3, #0
 8010758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801075c:	e7f7      	b.n	801074e <_Balloc+0x66>
 801075e:	bf00      	nop
 8010760:	08011d01 	.word	0x08011d01
 8010764:	08011d81 	.word	0x08011d81

08010768 <_Bfree>:
 8010768:	b570      	push	{r4, r5, r6, lr}
 801076a:	69c6      	ldr	r6, [r0, #28]
 801076c:	4605      	mov	r5, r0
 801076e:	460c      	mov	r4, r1
 8010770:	b976      	cbnz	r6, 8010790 <_Bfree+0x28>
 8010772:	2010      	movs	r0, #16
 8010774:	f7fe faa6 	bl	800ecc4 <malloc>
 8010778:	4602      	mov	r2, r0
 801077a:	61e8      	str	r0, [r5, #28]
 801077c:	b920      	cbnz	r0, 8010788 <_Bfree+0x20>
 801077e:	4b09      	ldr	r3, [pc, #36]	@ (80107a4 <_Bfree+0x3c>)
 8010780:	4809      	ldr	r0, [pc, #36]	@ (80107a8 <_Bfree+0x40>)
 8010782:	218f      	movs	r1, #143	@ 0x8f
 8010784:	f000 ff1e 	bl	80115c4 <__assert_func>
 8010788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801078c:	6006      	str	r6, [r0, #0]
 801078e:	60c6      	str	r6, [r0, #12]
 8010790:	b13c      	cbz	r4, 80107a2 <_Bfree+0x3a>
 8010792:	69eb      	ldr	r3, [r5, #28]
 8010794:	6862      	ldr	r2, [r4, #4]
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801079c:	6021      	str	r1, [r4, #0]
 801079e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80107a2:	bd70      	pop	{r4, r5, r6, pc}
 80107a4:	08011d01 	.word	0x08011d01
 80107a8:	08011d81 	.word	0x08011d81

080107ac <__multadd>:
 80107ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107b0:	690d      	ldr	r5, [r1, #16]
 80107b2:	4607      	mov	r7, r0
 80107b4:	460c      	mov	r4, r1
 80107b6:	461e      	mov	r6, r3
 80107b8:	f101 0c14 	add.w	ip, r1, #20
 80107bc:	2000      	movs	r0, #0
 80107be:	f8dc 3000 	ldr.w	r3, [ip]
 80107c2:	b299      	uxth	r1, r3
 80107c4:	fb02 6101 	mla	r1, r2, r1, r6
 80107c8:	0c1e      	lsrs	r6, r3, #16
 80107ca:	0c0b      	lsrs	r3, r1, #16
 80107cc:	fb02 3306 	mla	r3, r2, r6, r3
 80107d0:	b289      	uxth	r1, r1
 80107d2:	3001      	adds	r0, #1
 80107d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80107d8:	4285      	cmp	r5, r0
 80107da:	f84c 1b04 	str.w	r1, [ip], #4
 80107de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80107e2:	dcec      	bgt.n	80107be <__multadd+0x12>
 80107e4:	b30e      	cbz	r6, 801082a <__multadd+0x7e>
 80107e6:	68a3      	ldr	r3, [r4, #8]
 80107e8:	42ab      	cmp	r3, r5
 80107ea:	dc19      	bgt.n	8010820 <__multadd+0x74>
 80107ec:	6861      	ldr	r1, [r4, #4]
 80107ee:	4638      	mov	r0, r7
 80107f0:	3101      	adds	r1, #1
 80107f2:	f7ff ff79 	bl	80106e8 <_Balloc>
 80107f6:	4680      	mov	r8, r0
 80107f8:	b928      	cbnz	r0, 8010806 <__multadd+0x5a>
 80107fa:	4602      	mov	r2, r0
 80107fc:	4b0c      	ldr	r3, [pc, #48]	@ (8010830 <__multadd+0x84>)
 80107fe:	480d      	ldr	r0, [pc, #52]	@ (8010834 <__multadd+0x88>)
 8010800:	21ba      	movs	r1, #186	@ 0xba
 8010802:	f000 fedf 	bl	80115c4 <__assert_func>
 8010806:	6922      	ldr	r2, [r4, #16]
 8010808:	3202      	adds	r2, #2
 801080a:	f104 010c 	add.w	r1, r4, #12
 801080e:	0092      	lsls	r2, r2, #2
 8010810:	300c      	adds	r0, #12
 8010812:	f7ff f928 	bl	800fa66 <memcpy>
 8010816:	4621      	mov	r1, r4
 8010818:	4638      	mov	r0, r7
 801081a:	f7ff ffa5 	bl	8010768 <_Bfree>
 801081e:	4644      	mov	r4, r8
 8010820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010824:	3501      	adds	r5, #1
 8010826:	615e      	str	r6, [r3, #20]
 8010828:	6125      	str	r5, [r4, #16]
 801082a:	4620      	mov	r0, r4
 801082c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010830:	08011d70 	.word	0x08011d70
 8010834:	08011d81 	.word	0x08011d81

08010838 <__hi0bits>:
 8010838:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801083c:	4603      	mov	r3, r0
 801083e:	bf36      	itet	cc
 8010840:	0403      	lslcc	r3, r0, #16
 8010842:	2000      	movcs	r0, #0
 8010844:	2010      	movcc	r0, #16
 8010846:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801084a:	bf3c      	itt	cc
 801084c:	021b      	lslcc	r3, r3, #8
 801084e:	3008      	addcc	r0, #8
 8010850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010854:	bf3c      	itt	cc
 8010856:	011b      	lslcc	r3, r3, #4
 8010858:	3004      	addcc	r0, #4
 801085a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801085e:	bf3c      	itt	cc
 8010860:	009b      	lslcc	r3, r3, #2
 8010862:	3002      	addcc	r0, #2
 8010864:	2b00      	cmp	r3, #0
 8010866:	db05      	blt.n	8010874 <__hi0bits+0x3c>
 8010868:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801086c:	f100 0001 	add.w	r0, r0, #1
 8010870:	bf08      	it	eq
 8010872:	2020      	moveq	r0, #32
 8010874:	4770      	bx	lr

08010876 <__lo0bits>:
 8010876:	6803      	ldr	r3, [r0, #0]
 8010878:	4602      	mov	r2, r0
 801087a:	f013 0007 	ands.w	r0, r3, #7
 801087e:	d00b      	beq.n	8010898 <__lo0bits+0x22>
 8010880:	07d9      	lsls	r1, r3, #31
 8010882:	d421      	bmi.n	80108c8 <__lo0bits+0x52>
 8010884:	0798      	lsls	r0, r3, #30
 8010886:	bf49      	itett	mi
 8010888:	085b      	lsrmi	r3, r3, #1
 801088a:	089b      	lsrpl	r3, r3, #2
 801088c:	2001      	movmi	r0, #1
 801088e:	6013      	strmi	r3, [r2, #0]
 8010890:	bf5c      	itt	pl
 8010892:	6013      	strpl	r3, [r2, #0]
 8010894:	2002      	movpl	r0, #2
 8010896:	4770      	bx	lr
 8010898:	b299      	uxth	r1, r3
 801089a:	b909      	cbnz	r1, 80108a0 <__lo0bits+0x2a>
 801089c:	0c1b      	lsrs	r3, r3, #16
 801089e:	2010      	movs	r0, #16
 80108a0:	b2d9      	uxtb	r1, r3
 80108a2:	b909      	cbnz	r1, 80108a8 <__lo0bits+0x32>
 80108a4:	3008      	adds	r0, #8
 80108a6:	0a1b      	lsrs	r3, r3, #8
 80108a8:	0719      	lsls	r1, r3, #28
 80108aa:	bf04      	itt	eq
 80108ac:	091b      	lsreq	r3, r3, #4
 80108ae:	3004      	addeq	r0, #4
 80108b0:	0799      	lsls	r1, r3, #30
 80108b2:	bf04      	itt	eq
 80108b4:	089b      	lsreq	r3, r3, #2
 80108b6:	3002      	addeq	r0, #2
 80108b8:	07d9      	lsls	r1, r3, #31
 80108ba:	d403      	bmi.n	80108c4 <__lo0bits+0x4e>
 80108bc:	085b      	lsrs	r3, r3, #1
 80108be:	f100 0001 	add.w	r0, r0, #1
 80108c2:	d003      	beq.n	80108cc <__lo0bits+0x56>
 80108c4:	6013      	str	r3, [r2, #0]
 80108c6:	4770      	bx	lr
 80108c8:	2000      	movs	r0, #0
 80108ca:	4770      	bx	lr
 80108cc:	2020      	movs	r0, #32
 80108ce:	4770      	bx	lr

080108d0 <__i2b>:
 80108d0:	b510      	push	{r4, lr}
 80108d2:	460c      	mov	r4, r1
 80108d4:	2101      	movs	r1, #1
 80108d6:	f7ff ff07 	bl	80106e8 <_Balloc>
 80108da:	4602      	mov	r2, r0
 80108dc:	b928      	cbnz	r0, 80108ea <__i2b+0x1a>
 80108de:	4b05      	ldr	r3, [pc, #20]	@ (80108f4 <__i2b+0x24>)
 80108e0:	4805      	ldr	r0, [pc, #20]	@ (80108f8 <__i2b+0x28>)
 80108e2:	f240 1145 	movw	r1, #325	@ 0x145
 80108e6:	f000 fe6d 	bl	80115c4 <__assert_func>
 80108ea:	2301      	movs	r3, #1
 80108ec:	6144      	str	r4, [r0, #20]
 80108ee:	6103      	str	r3, [r0, #16]
 80108f0:	bd10      	pop	{r4, pc}
 80108f2:	bf00      	nop
 80108f4:	08011d70 	.word	0x08011d70
 80108f8:	08011d81 	.word	0x08011d81

080108fc <__multiply>:
 80108fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010900:	4617      	mov	r7, r2
 8010902:	690a      	ldr	r2, [r1, #16]
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	429a      	cmp	r2, r3
 8010908:	bfa8      	it	ge
 801090a:	463b      	movge	r3, r7
 801090c:	4689      	mov	r9, r1
 801090e:	bfa4      	itt	ge
 8010910:	460f      	movge	r7, r1
 8010912:	4699      	movge	r9, r3
 8010914:	693d      	ldr	r5, [r7, #16]
 8010916:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	6879      	ldr	r1, [r7, #4]
 801091e:	eb05 060a 	add.w	r6, r5, sl
 8010922:	42b3      	cmp	r3, r6
 8010924:	b085      	sub	sp, #20
 8010926:	bfb8      	it	lt
 8010928:	3101      	addlt	r1, #1
 801092a:	f7ff fedd 	bl	80106e8 <_Balloc>
 801092e:	b930      	cbnz	r0, 801093e <__multiply+0x42>
 8010930:	4602      	mov	r2, r0
 8010932:	4b41      	ldr	r3, [pc, #260]	@ (8010a38 <__multiply+0x13c>)
 8010934:	4841      	ldr	r0, [pc, #260]	@ (8010a3c <__multiply+0x140>)
 8010936:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801093a:	f000 fe43 	bl	80115c4 <__assert_func>
 801093e:	f100 0414 	add.w	r4, r0, #20
 8010942:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010946:	4623      	mov	r3, r4
 8010948:	2200      	movs	r2, #0
 801094a:	4573      	cmp	r3, lr
 801094c:	d320      	bcc.n	8010990 <__multiply+0x94>
 801094e:	f107 0814 	add.w	r8, r7, #20
 8010952:	f109 0114 	add.w	r1, r9, #20
 8010956:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801095a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801095e:	9302      	str	r3, [sp, #8]
 8010960:	1beb      	subs	r3, r5, r7
 8010962:	3b15      	subs	r3, #21
 8010964:	f023 0303 	bic.w	r3, r3, #3
 8010968:	3304      	adds	r3, #4
 801096a:	3715      	adds	r7, #21
 801096c:	42bd      	cmp	r5, r7
 801096e:	bf38      	it	cc
 8010970:	2304      	movcc	r3, #4
 8010972:	9301      	str	r3, [sp, #4]
 8010974:	9b02      	ldr	r3, [sp, #8]
 8010976:	9103      	str	r1, [sp, #12]
 8010978:	428b      	cmp	r3, r1
 801097a:	d80c      	bhi.n	8010996 <__multiply+0x9a>
 801097c:	2e00      	cmp	r6, #0
 801097e:	dd03      	ble.n	8010988 <__multiply+0x8c>
 8010980:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010984:	2b00      	cmp	r3, #0
 8010986:	d055      	beq.n	8010a34 <__multiply+0x138>
 8010988:	6106      	str	r6, [r0, #16]
 801098a:	b005      	add	sp, #20
 801098c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010990:	f843 2b04 	str.w	r2, [r3], #4
 8010994:	e7d9      	b.n	801094a <__multiply+0x4e>
 8010996:	f8b1 a000 	ldrh.w	sl, [r1]
 801099a:	f1ba 0f00 	cmp.w	sl, #0
 801099e:	d01f      	beq.n	80109e0 <__multiply+0xe4>
 80109a0:	46c4      	mov	ip, r8
 80109a2:	46a1      	mov	r9, r4
 80109a4:	2700      	movs	r7, #0
 80109a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80109aa:	f8d9 3000 	ldr.w	r3, [r9]
 80109ae:	fa1f fb82 	uxth.w	fp, r2
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80109b8:	443b      	add	r3, r7
 80109ba:	f8d9 7000 	ldr.w	r7, [r9]
 80109be:	0c12      	lsrs	r2, r2, #16
 80109c0:	0c3f      	lsrs	r7, r7, #16
 80109c2:	fb0a 7202 	mla	r2, sl, r2, r7
 80109c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109d0:	4565      	cmp	r5, ip
 80109d2:	f849 3b04 	str.w	r3, [r9], #4
 80109d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80109da:	d8e4      	bhi.n	80109a6 <__multiply+0xaa>
 80109dc:	9b01      	ldr	r3, [sp, #4]
 80109de:	50e7      	str	r7, [r4, r3]
 80109e0:	9b03      	ldr	r3, [sp, #12]
 80109e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80109e6:	3104      	adds	r1, #4
 80109e8:	f1b9 0f00 	cmp.w	r9, #0
 80109ec:	d020      	beq.n	8010a30 <__multiply+0x134>
 80109ee:	6823      	ldr	r3, [r4, #0]
 80109f0:	4647      	mov	r7, r8
 80109f2:	46a4      	mov	ip, r4
 80109f4:	f04f 0a00 	mov.w	sl, #0
 80109f8:	f8b7 b000 	ldrh.w	fp, [r7]
 80109fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010a00:	fb09 220b 	mla	r2, r9, fp, r2
 8010a04:	4452      	add	r2, sl
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a0c:	f84c 3b04 	str.w	r3, [ip], #4
 8010a10:	f857 3b04 	ldr.w	r3, [r7], #4
 8010a14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a18:	f8bc 3000 	ldrh.w	r3, [ip]
 8010a1c:	fb09 330a 	mla	r3, r9, sl, r3
 8010a20:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010a24:	42bd      	cmp	r5, r7
 8010a26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a2a:	d8e5      	bhi.n	80109f8 <__multiply+0xfc>
 8010a2c:	9a01      	ldr	r2, [sp, #4]
 8010a2e:	50a3      	str	r3, [r4, r2]
 8010a30:	3404      	adds	r4, #4
 8010a32:	e79f      	b.n	8010974 <__multiply+0x78>
 8010a34:	3e01      	subs	r6, #1
 8010a36:	e7a1      	b.n	801097c <__multiply+0x80>
 8010a38:	08011d70 	.word	0x08011d70
 8010a3c:	08011d81 	.word	0x08011d81

08010a40 <__pow5mult>:
 8010a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a44:	4615      	mov	r5, r2
 8010a46:	f012 0203 	ands.w	r2, r2, #3
 8010a4a:	4607      	mov	r7, r0
 8010a4c:	460e      	mov	r6, r1
 8010a4e:	d007      	beq.n	8010a60 <__pow5mult+0x20>
 8010a50:	4c25      	ldr	r4, [pc, #148]	@ (8010ae8 <__pow5mult+0xa8>)
 8010a52:	3a01      	subs	r2, #1
 8010a54:	2300      	movs	r3, #0
 8010a56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a5a:	f7ff fea7 	bl	80107ac <__multadd>
 8010a5e:	4606      	mov	r6, r0
 8010a60:	10ad      	asrs	r5, r5, #2
 8010a62:	d03d      	beq.n	8010ae0 <__pow5mult+0xa0>
 8010a64:	69fc      	ldr	r4, [r7, #28]
 8010a66:	b97c      	cbnz	r4, 8010a88 <__pow5mult+0x48>
 8010a68:	2010      	movs	r0, #16
 8010a6a:	f7fe f92b 	bl	800ecc4 <malloc>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	61f8      	str	r0, [r7, #28]
 8010a72:	b928      	cbnz	r0, 8010a80 <__pow5mult+0x40>
 8010a74:	4b1d      	ldr	r3, [pc, #116]	@ (8010aec <__pow5mult+0xac>)
 8010a76:	481e      	ldr	r0, [pc, #120]	@ (8010af0 <__pow5mult+0xb0>)
 8010a78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010a7c:	f000 fda2 	bl	80115c4 <__assert_func>
 8010a80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a84:	6004      	str	r4, [r0, #0]
 8010a86:	60c4      	str	r4, [r0, #12]
 8010a88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010a8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a90:	b94c      	cbnz	r4, 8010aa6 <__pow5mult+0x66>
 8010a92:	f240 2171 	movw	r1, #625	@ 0x271
 8010a96:	4638      	mov	r0, r7
 8010a98:	f7ff ff1a 	bl	80108d0 <__i2b>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	6003      	str	r3, [r0, #0]
 8010aa6:	f04f 0900 	mov.w	r9, #0
 8010aaa:	07eb      	lsls	r3, r5, #31
 8010aac:	d50a      	bpl.n	8010ac4 <__pow5mult+0x84>
 8010aae:	4631      	mov	r1, r6
 8010ab0:	4622      	mov	r2, r4
 8010ab2:	4638      	mov	r0, r7
 8010ab4:	f7ff ff22 	bl	80108fc <__multiply>
 8010ab8:	4631      	mov	r1, r6
 8010aba:	4680      	mov	r8, r0
 8010abc:	4638      	mov	r0, r7
 8010abe:	f7ff fe53 	bl	8010768 <_Bfree>
 8010ac2:	4646      	mov	r6, r8
 8010ac4:	106d      	asrs	r5, r5, #1
 8010ac6:	d00b      	beq.n	8010ae0 <__pow5mult+0xa0>
 8010ac8:	6820      	ldr	r0, [r4, #0]
 8010aca:	b938      	cbnz	r0, 8010adc <__pow5mult+0x9c>
 8010acc:	4622      	mov	r2, r4
 8010ace:	4621      	mov	r1, r4
 8010ad0:	4638      	mov	r0, r7
 8010ad2:	f7ff ff13 	bl	80108fc <__multiply>
 8010ad6:	6020      	str	r0, [r4, #0]
 8010ad8:	f8c0 9000 	str.w	r9, [r0]
 8010adc:	4604      	mov	r4, r0
 8010ade:	e7e4      	b.n	8010aaa <__pow5mult+0x6a>
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ae6:	bf00      	nop
 8010ae8:	08011e34 	.word	0x08011e34
 8010aec:	08011d01 	.word	0x08011d01
 8010af0:	08011d81 	.word	0x08011d81

08010af4 <__lshift>:
 8010af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010af8:	460c      	mov	r4, r1
 8010afa:	6849      	ldr	r1, [r1, #4]
 8010afc:	6923      	ldr	r3, [r4, #16]
 8010afe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b02:	68a3      	ldr	r3, [r4, #8]
 8010b04:	4607      	mov	r7, r0
 8010b06:	4691      	mov	r9, r2
 8010b08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b0c:	f108 0601 	add.w	r6, r8, #1
 8010b10:	42b3      	cmp	r3, r6
 8010b12:	db0b      	blt.n	8010b2c <__lshift+0x38>
 8010b14:	4638      	mov	r0, r7
 8010b16:	f7ff fde7 	bl	80106e8 <_Balloc>
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	b948      	cbnz	r0, 8010b32 <__lshift+0x3e>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	4b28      	ldr	r3, [pc, #160]	@ (8010bc4 <__lshift+0xd0>)
 8010b22:	4829      	ldr	r0, [pc, #164]	@ (8010bc8 <__lshift+0xd4>)
 8010b24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010b28:	f000 fd4c 	bl	80115c4 <__assert_func>
 8010b2c:	3101      	adds	r1, #1
 8010b2e:	005b      	lsls	r3, r3, #1
 8010b30:	e7ee      	b.n	8010b10 <__lshift+0x1c>
 8010b32:	2300      	movs	r3, #0
 8010b34:	f100 0114 	add.w	r1, r0, #20
 8010b38:	f100 0210 	add.w	r2, r0, #16
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	4553      	cmp	r3, sl
 8010b40:	db33      	blt.n	8010baa <__lshift+0xb6>
 8010b42:	6920      	ldr	r0, [r4, #16]
 8010b44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b48:	f104 0314 	add.w	r3, r4, #20
 8010b4c:	f019 091f 	ands.w	r9, r9, #31
 8010b50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b58:	d02b      	beq.n	8010bb2 <__lshift+0xbe>
 8010b5a:	f1c9 0e20 	rsb	lr, r9, #32
 8010b5e:	468a      	mov	sl, r1
 8010b60:	2200      	movs	r2, #0
 8010b62:	6818      	ldr	r0, [r3, #0]
 8010b64:	fa00 f009 	lsl.w	r0, r0, r9
 8010b68:	4310      	orrs	r0, r2
 8010b6a:	f84a 0b04 	str.w	r0, [sl], #4
 8010b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b72:	459c      	cmp	ip, r3
 8010b74:	fa22 f20e 	lsr.w	r2, r2, lr
 8010b78:	d8f3      	bhi.n	8010b62 <__lshift+0x6e>
 8010b7a:	ebac 0304 	sub.w	r3, ip, r4
 8010b7e:	3b15      	subs	r3, #21
 8010b80:	f023 0303 	bic.w	r3, r3, #3
 8010b84:	3304      	adds	r3, #4
 8010b86:	f104 0015 	add.w	r0, r4, #21
 8010b8a:	4560      	cmp	r0, ip
 8010b8c:	bf88      	it	hi
 8010b8e:	2304      	movhi	r3, #4
 8010b90:	50ca      	str	r2, [r1, r3]
 8010b92:	b10a      	cbz	r2, 8010b98 <__lshift+0xa4>
 8010b94:	f108 0602 	add.w	r6, r8, #2
 8010b98:	3e01      	subs	r6, #1
 8010b9a:	4638      	mov	r0, r7
 8010b9c:	612e      	str	r6, [r5, #16]
 8010b9e:	4621      	mov	r1, r4
 8010ba0:	f7ff fde2 	bl	8010768 <_Bfree>
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010baa:	f842 0f04 	str.w	r0, [r2, #4]!
 8010bae:	3301      	adds	r3, #1
 8010bb0:	e7c5      	b.n	8010b3e <__lshift+0x4a>
 8010bb2:	3904      	subs	r1, #4
 8010bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bbc:	459c      	cmp	ip, r3
 8010bbe:	d8f9      	bhi.n	8010bb4 <__lshift+0xc0>
 8010bc0:	e7ea      	b.n	8010b98 <__lshift+0xa4>
 8010bc2:	bf00      	nop
 8010bc4:	08011d70 	.word	0x08011d70
 8010bc8:	08011d81 	.word	0x08011d81

08010bcc <__mcmp>:
 8010bcc:	690a      	ldr	r2, [r1, #16]
 8010bce:	4603      	mov	r3, r0
 8010bd0:	6900      	ldr	r0, [r0, #16]
 8010bd2:	1a80      	subs	r0, r0, r2
 8010bd4:	b530      	push	{r4, r5, lr}
 8010bd6:	d10e      	bne.n	8010bf6 <__mcmp+0x2a>
 8010bd8:	3314      	adds	r3, #20
 8010bda:	3114      	adds	r1, #20
 8010bdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010be0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010be4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010be8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010bec:	4295      	cmp	r5, r2
 8010bee:	d003      	beq.n	8010bf8 <__mcmp+0x2c>
 8010bf0:	d205      	bcs.n	8010bfe <__mcmp+0x32>
 8010bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8010bf6:	bd30      	pop	{r4, r5, pc}
 8010bf8:	42a3      	cmp	r3, r4
 8010bfa:	d3f3      	bcc.n	8010be4 <__mcmp+0x18>
 8010bfc:	e7fb      	b.n	8010bf6 <__mcmp+0x2a>
 8010bfe:	2001      	movs	r0, #1
 8010c00:	e7f9      	b.n	8010bf6 <__mcmp+0x2a>
	...

08010c04 <__mdiff>:
 8010c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c08:	4689      	mov	r9, r1
 8010c0a:	4606      	mov	r6, r0
 8010c0c:	4611      	mov	r1, r2
 8010c0e:	4648      	mov	r0, r9
 8010c10:	4614      	mov	r4, r2
 8010c12:	f7ff ffdb 	bl	8010bcc <__mcmp>
 8010c16:	1e05      	subs	r5, r0, #0
 8010c18:	d112      	bne.n	8010c40 <__mdiff+0x3c>
 8010c1a:	4629      	mov	r1, r5
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	f7ff fd63 	bl	80106e8 <_Balloc>
 8010c22:	4602      	mov	r2, r0
 8010c24:	b928      	cbnz	r0, 8010c32 <__mdiff+0x2e>
 8010c26:	4b3f      	ldr	r3, [pc, #252]	@ (8010d24 <__mdiff+0x120>)
 8010c28:	f240 2137 	movw	r1, #567	@ 0x237
 8010c2c:	483e      	ldr	r0, [pc, #248]	@ (8010d28 <__mdiff+0x124>)
 8010c2e:	f000 fcc9 	bl	80115c4 <__assert_func>
 8010c32:	2301      	movs	r3, #1
 8010c34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c38:	4610      	mov	r0, r2
 8010c3a:	b003      	add	sp, #12
 8010c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c40:	bfbc      	itt	lt
 8010c42:	464b      	movlt	r3, r9
 8010c44:	46a1      	movlt	r9, r4
 8010c46:	4630      	mov	r0, r6
 8010c48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010c4c:	bfba      	itte	lt
 8010c4e:	461c      	movlt	r4, r3
 8010c50:	2501      	movlt	r5, #1
 8010c52:	2500      	movge	r5, #0
 8010c54:	f7ff fd48 	bl	80106e8 <_Balloc>
 8010c58:	4602      	mov	r2, r0
 8010c5a:	b918      	cbnz	r0, 8010c64 <__mdiff+0x60>
 8010c5c:	4b31      	ldr	r3, [pc, #196]	@ (8010d24 <__mdiff+0x120>)
 8010c5e:	f240 2145 	movw	r1, #581	@ 0x245
 8010c62:	e7e3      	b.n	8010c2c <__mdiff+0x28>
 8010c64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010c68:	6926      	ldr	r6, [r4, #16]
 8010c6a:	60c5      	str	r5, [r0, #12]
 8010c6c:	f109 0310 	add.w	r3, r9, #16
 8010c70:	f109 0514 	add.w	r5, r9, #20
 8010c74:	f104 0e14 	add.w	lr, r4, #20
 8010c78:	f100 0b14 	add.w	fp, r0, #20
 8010c7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010c80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010c84:	9301      	str	r3, [sp, #4]
 8010c86:	46d9      	mov	r9, fp
 8010c88:	f04f 0c00 	mov.w	ip, #0
 8010c8c:	9b01      	ldr	r3, [sp, #4]
 8010c8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010c92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010c96:	9301      	str	r3, [sp, #4]
 8010c98:	fa1f f38a 	uxth.w	r3, sl
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	b283      	uxth	r3, r0
 8010ca0:	1acb      	subs	r3, r1, r3
 8010ca2:	0c00      	lsrs	r0, r0, #16
 8010ca4:	4463      	add	r3, ip
 8010ca6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010caa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010cb4:	4576      	cmp	r6, lr
 8010cb6:	f849 3b04 	str.w	r3, [r9], #4
 8010cba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010cbe:	d8e5      	bhi.n	8010c8c <__mdiff+0x88>
 8010cc0:	1b33      	subs	r3, r6, r4
 8010cc2:	3b15      	subs	r3, #21
 8010cc4:	f023 0303 	bic.w	r3, r3, #3
 8010cc8:	3415      	adds	r4, #21
 8010cca:	3304      	adds	r3, #4
 8010ccc:	42a6      	cmp	r6, r4
 8010cce:	bf38      	it	cc
 8010cd0:	2304      	movcc	r3, #4
 8010cd2:	441d      	add	r5, r3
 8010cd4:	445b      	add	r3, fp
 8010cd6:	461e      	mov	r6, r3
 8010cd8:	462c      	mov	r4, r5
 8010cda:	4544      	cmp	r4, r8
 8010cdc:	d30e      	bcc.n	8010cfc <__mdiff+0xf8>
 8010cde:	f108 0103 	add.w	r1, r8, #3
 8010ce2:	1b49      	subs	r1, r1, r5
 8010ce4:	f021 0103 	bic.w	r1, r1, #3
 8010ce8:	3d03      	subs	r5, #3
 8010cea:	45a8      	cmp	r8, r5
 8010cec:	bf38      	it	cc
 8010cee:	2100      	movcc	r1, #0
 8010cf0:	440b      	add	r3, r1
 8010cf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010cf6:	b191      	cbz	r1, 8010d1e <__mdiff+0x11a>
 8010cf8:	6117      	str	r7, [r2, #16]
 8010cfa:	e79d      	b.n	8010c38 <__mdiff+0x34>
 8010cfc:	f854 1b04 	ldr.w	r1, [r4], #4
 8010d00:	46e6      	mov	lr, ip
 8010d02:	0c08      	lsrs	r0, r1, #16
 8010d04:	fa1c fc81 	uxtah	ip, ip, r1
 8010d08:	4471      	add	r1, lr
 8010d0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010d0e:	b289      	uxth	r1, r1
 8010d10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010d14:	f846 1b04 	str.w	r1, [r6], #4
 8010d18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010d1c:	e7dd      	b.n	8010cda <__mdiff+0xd6>
 8010d1e:	3f01      	subs	r7, #1
 8010d20:	e7e7      	b.n	8010cf2 <__mdiff+0xee>
 8010d22:	bf00      	nop
 8010d24:	08011d70 	.word	0x08011d70
 8010d28:	08011d81 	.word	0x08011d81

08010d2c <__d2b>:
 8010d2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d30:	460f      	mov	r7, r1
 8010d32:	2101      	movs	r1, #1
 8010d34:	ec59 8b10 	vmov	r8, r9, d0
 8010d38:	4616      	mov	r6, r2
 8010d3a:	f7ff fcd5 	bl	80106e8 <_Balloc>
 8010d3e:	4604      	mov	r4, r0
 8010d40:	b930      	cbnz	r0, 8010d50 <__d2b+0x24>
 8010d42:	4602      	mov	r2, r0
 8010d44:	4b23      	ldr	r3, [pc, #140]	@ (8010dd4 <__d2b+0xa8>)
 8010d46:	4824      	ldr	r0, [pc, #144]	@ (8010dd8 <__d2b+0xac>)
 8010d48:	f240 310f 	movw	r1, #783	@ 0x30f
 8010d4c:	f000 fc3a 	bl	80115c4 <__assert_func>
 8010d50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010d54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d58:	b10d      	cbz	r5, 8010d5e <__d2b+0x32>
 8010d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010d5e:	9301      	str	r3, [sp, #4]
 8010d60:	f1b8 0300 	subs.w	r3, r8, #0
 8010d64:	d023      	beq.n	8010dae <__d2b+0x82>
 8010d66:	4668      	mov	r0, sp
 8010d68:	9300      	str	r3, [sp, #0]
 8010d6a:	f7ff fd84 	bl	8010876 <__lo0bits>
 8010d6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010d72:	b1d0      	cbz	r0, 8010daa <__d2b+0x7e>
 8010d74:	f1c0 0320 	rsb	r3, r0, #32
 8010d78:	fa02 f303 	lsl.w	r3, r2, r3
 8010d7c:	430b      	orrs	r3, r1
 8010d7e:	40c2      	lsrs	r2, r0
 8010d80:	6163      	str	r3, [r4, #20]
 8010d82:	9201      	str	r2, [sp, #4]
 8010d84:	9b01      	ldr	r3, [sp, #4]
 8010d86:	61a3      	str	r3, [r4, #24]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	bf0c      	ite	eq
 8010d8c:	2201      	moveq	r2, #1
 8010d8e:	2202      	movne	r2, #2
 8010d90:	6122      	str	r2, [r4, #16]
 8010d92:	b1a5      	cbz	r5, 8010dbe <__d2b+0x92>
 8010d94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010d98:	4405      	add	r5, r0
 8010d9a:	603d      	str	r5, [r7, #0]
 8010d9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010da0:	6030      	str	r0, [r6, #0]
 8010da2:	4620      	mov	r0, r4
 8010da4:	b003      	add	sp, #12
 8010da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010daa:	6161      	str	r1, [r4, #20]
 8010dac:	e7ea      	b.n	8010d84 <__d2b+0x58>
 8010dae:	a801      	add	r0, sp, #4
 8010db0:	f7ff fd61 	bl	8010876 <__lo0bits>
 8010db4:	9b01      	ldr	r3, [sp, #4]
 8010db6:	6163      	str	r3, [r4, #20]
 8010db8:	3020      	adds	r0, #32
 8010dba:	2201      	movs	r2, #1
 8010dbc:	e7e8      	b.n	8010d90 <__d2b+0x64>
 8010dbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010dc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010dc6:	6038      	str	r0, [r7, #0]
 8010dc8:	6918      	ldr	r0, [r3, #16]
 8010dca:	f7ff fd35 	bl	8010838 <__hi0bits>
 8010dce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010dd2:	e7e5      	b.n	8010da0 <__d2b+0x74>
 8010dd4:	08011d70 	.word	0x08011d70
 8010dd8:	08011d81 	.word	0x08011d81

08010ddc <__ssputs_r>:
 8010ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010de0:	688e      	ldr	r6, [r1, #8]
 8010de2:	461f      	mov	r7, r3
 8010de4:	42be      	cmp	r6, r7
 8010de6:	680b      	ldr	r3, [r1, #0]
 8010de8:	4682      	mov	sl, r0
 8010dea:	460c      	mov	r4, r1
 8010dec:	4690      	mov	r8, r2
 8010dee:	d82d      	bhi.n	8010e4c <__ssputs_r+0x70>
 8010df0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010df4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010df8:	d026      	beq.n	8010e48 <__ssputs_r+0x6c>
 8010dfa:	6965      	ldr	r5, [r4, #20]
 8010dfc:	6909      	ldr	r1, [r1, #16]
 8010dfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e02:	eba3 0901 	sub.w	r9, r3, r1
 8010e06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e0a:	1c7b      	adds	r3, r7, #1
 8010e0c:	444b      	add	r3, r9
 8010e0e:	106d      	asrs	r5, r5, #1
 8010e10:	429d      	cmp	r5, r3
 8010e12:	bf38      	it	cc
 8010e14:	461d      	movcc	r5, r3
 8010e16:	0553      	lsls	r3, r2, #21
 8010e18:	d527      	bpl.n	8010e6a <__ssputs_r+0x8e>
 8010e1a:	4629      	mov	r1, r5
 8010e1c:	f7fd ff84 	bl	800ed28 <_malloc_r>
 8010e20:	4606      	mov	r6, r0
 8010e22:	b360      	cbz	r0, 8010e7e <__ssputs_r+0xa2>
 8010e24:	6921      	ldr	r1, [r4, #16]
 8010e26:	464a      	mov	r2, r9
 8010e28:	f7fe fe1d 	bl	800fa66 <memcpy>
 8010e2c:	89a3      	ldrh	r3, [r4, #12]
 8010e2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e36:	81a3      	strh	r3, [r4, #12]
 8010e38:	6126      	str	r6, [r4, #16]
 8010e3a:	6165      	str	r5, [r4, #20]
 8010e3c:	444e      	add	r6, r9
 8010e3e:	eba5 0509 	sub.w	r5, r5, r9
 8010e42:	6026      	str	r6, [r4, #0]
 8010e44:	60a5      	str	r5, [r4, #8]
 8010e46:	463e      	mov	r6, r7
 8010e48:	42be      	cmp	r6, r7
 8010e4a:	d900      	bls.n	8010e4e <__ssputs_r+0x72>
 8010e4c:	463e      	mov	r6, r7
 8010e4e:	6820      	ldr	r0, [r4, #0]
 8010e50:	4632      	mov	r2, r6
 8010e52:	4641      	mov	r1, r8
 8010e54:	f000 fb9c 	bl	8011590 <memmove>
 8010e58:	68a3      	ldr	r3, [r4, #8]
 8010e5a:	1b9b      	subs	r3, r3, r6
 8010e5c:	60a3      	str	r3, [r4, #8]
 8010e5e:	6823      	ldr	r3, [r4, #0]
 8010e60:	4433      	add	r3, r6
 8010e62:	6023      	str	r3, [r4, #0]
 8010e64:	2000      	movs	r0, #0
 8010e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e6a:	462a      	mov	r2, r5
 8010e6c:	f000 fbee 	bl	801164c <_realloc_r>
 8010e70:	4606      	mov	r6, r0
 8010e72:	2800      	cmp	r0, #0
 8010e74:	d1e0      	bne.n	8010e38 <__ssputs_r+0x5c>
 8010e76:	6921      	ldr	r1, [r4, #16]
 8010e78:	4650      	mov	r0, sl
 8010e7a:	f7ff fbeb 	bl	8010654 <_free_r>
 8010e7e:	230c      	movs	r3, #12
 8010e80:	f8ca 3000 	str.w	r3, [sl]
 8010e84:	89a3      	ldrh	r3, [r4, #12]
 8010e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e8a:	81a3      	strh	r3, [r4, #12]
 8010e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e90:	e7e9      	b.n	8010e66 <__ssputs_r+0x8a>
	...

08010e94 <_svfiprintf_r>:
 8010e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e98:	4698      	mov	r8, r3
 8010e9a:	898b      	ldrh	r3, [r1, #12]
 8010e9c:	061b      	lsls	r3, r3, #24
 8010e9e:	b09d      	sub	sp, #116	@ 0x74
 8010ea0:	4607      	mov	r7, r0
 8010ea2:	460d      	mov	r5, r1
 8010ea4:	4614      	mov	r4, r2
 8010ea6:	d510      	bpl.n	8010eca <_svfiprintf_r+0x36>
 8010ea8:	690b      	ldr	r3, [r1, #16]
 8010eaa:	b973      	cbnz	r3, 8010eca <_svfiprintf_r+0x36>
 8010eac:	2140      	movs	r1, #64	@ 0x40
 8010eae:	f7fd ff3b 	bl	800ed28 <_malloc_r>
 8010eb2:	6028      	str	r0, [r5, #0]
 8010eb4:	6128      	str	r0, [r5, #16]
 8010eb6:	b930      	cbnz	r0, 8010ec6 <_svfiprintf_r+0x32>
 8010eb8:	230c      	movs	r3, #12
 8010eba:	603b      	str	r3, [r7, #0]
 8010ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ec0:	b01d      	add	sp, #116	@ 0x74
 8010ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec6:	2340      	movs	r3, #64	@ 0x40
 8010ec8:	616b      	str	r3, [r5, #20]
 8010eca:	2300      	movs	r3, #0
 8010ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ece:	2320      	movs	r3, #32
 8010ed0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ed8:	2330      	movs	r3, #48	@ 0x30
 8010eda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011078 <_svfiprintf_r+0x1e4>
 8010ede:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ee2:	f04f 0901 	mov.w	r9, #1
 8010ee6:	4623      	mov	r3, r4
 8010ee8:	469a      	mov	sl, r3
 8010eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010eee:	b10a      	cbz	r2, 8010ef4 <_svfiprintf_r+0x60>
 8010ef0:	2a25      	cmp	r2, #37	@ 0x25
 8010ef2:	d1f9      	bne.n	8010ee8 <_svfiprintf_r+0x54>
 8010ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ef8:	d00b      	beq.n	8010f12 <_svfiprintf_r+0x7e>
 8010efa:	465b      	mov	r3, fp
 8010efc:	4622      	mov	r2, r4
 8010efe:	4629      	mov	r1, r5
 8010f00:	4638      	mov	r0, r7
 8010f02:	f7ff ff6b 	bl	8010ddc <__ssputs_r>
 8010f06:	3001      	adds	r0, #1
 8010f08:	f000 80a7 	beq.w	801105a <_svfiprintf_r+0x1c6>
 8010f0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f0e:	445a      	add	r2, fp
 8010f10:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f12:	f89a 3000 	ldrb.w	r3, [sl]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	f000 809f 	beq.w	801105a <_svfiprintf_r+0x1c6>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f26:	f10a 0a01 	add.w	sl, sl, #1
 8010f2a:	9304      	str	r3, [sp, #16]
 8010f2c:	9307      	str	r3, [sp, #28]
 8010f2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f32:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f34:	4654      	mov	r4, sl
 8010f36:	2205      	movs	r2, #5
 8010f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f3c:	484e      	ldr	r0, [pc, #312]	@ (8011078 <_svfiprintf_r+0x1e4>)
 8010f3e:	f7ef f9d7 	bl	80002f0 <memchr>
 8010f42:	9a04      	ldr	r2, [sp, #16]
 8010f44:	b9d8      	cbnz	r0, 8010f7e <_svfiprintf_r+0xea>
 8010f46:	06d0      	lsls	r0, r2, #27
 8010f48:	bf44      	itt	mi
 8010f4a:	2320      	movmi	r3, #32
 8010f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f50:	0711      	lsls	r1, r2, #28
 8010f52:	bf44      	itt	mi
 8010f54:	232b      	movmi	r3, #43	@ 0x2b
 8010f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8010f5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f60:	d015      	beq.n	8010f8e <_svfiprintf_r+0xfa>
 8010f62:	9a07      	ldr	r2, [sp, #28]
 8010f64:	4654      	mov	r4, sl
 8010f66:	2000      	movs	r0, #0
 8010f68:	f04f 0c0a 	mov.w	ip, #10
 8010f6c:	4621      	mov	r1, r4
 8010f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f72:	3b30      	subs	r3, #48	@ 0x30
 8010f74:	2b09      	cmp	r3, #9
 8010f76:	d94b      	bls.n	8011010 <_svfiprintf_r+0x17c>
 8010f78:	b1b0      	cbz	r0, 8010fa8 <_svfiprintf_r+0x114>
 8010f7a:	9207      	str	r2, [sp, #28]
 8010f7c:	e014      	b.n	8010fa8 <_svfiprintf_r+0x114>
 8010f7e:	eba0 0308 	sub.w	r3, r0, r8
 8010f82:	fa09 f303 	lsl.w	r3, r9, r3
 8010f86:	4313      	orrs	r3, r2
 8010f88:	9304      	str	r3, [sp, #16]
 8010f8a:	46a2      	mov	sl, r4
 8010f8c:	e7d2      	b.n	8010f34 <_svfiprintf_r+0xa0>
 8010f8e:	9b03      	ldr	r3, [sp, #12]
 8010f90:	1d19      	adds	r1, r3, #4
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	9103      	str	r1, [sp, #12]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	bfbb      	ittet	lt
 8010f9a:	425b      	neglt	r3, r3
 8010f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8010fa0:	9307      	strge	r3, [sp, #28]
 8010fa2:	9307      	strlt	r3, [sp, #28]
 8010fa4:	bfb8      	it	lt
 8010fa6:	9204      	strlt	r2, [sp, #16]
 8010fa8:	7823      	ldrb	r3, [r4, #0]
 8010faa:	2b2e      	cmp	r3, #46	@ 0x2e
 8010fac:	d10a      	bne.n	8010fc4 <_svfiprintf_r+0x130>
 8010fae:	7863      	ldrb	r3, [r4, #1]
 8010fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fb2:	d132      	bne.n	801101a <_svfiprintf_r+0x186>
 8010fb4:	9b03      	ldr	r3, [sp, #12]
 8010fb6:	1d1a      	adds	r2, r3, #4
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	9203      	str	r2, [sp, #12]
 8010fbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010fc0:	3402      	adds	r4, #2
 8010fc2:	9305      	str	r3, [sp, #20]
 8010fc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011088 <_svfiprintf_r+0x1f4>
 8010fc8:	7821      	ldrb	r1, [r4, #0]
 8010fca:	2203      	movs	r2, #3
 8010fcc:	4650      	mov	r0, sl
 8010fce:	f7ef f98f 	bl	80002f0 <memchr>
 8010fd2:	b138      	cbz	r0, 8010fe4 <_svfiprintf_r+0x150>
 8010fd4:	9b04      	ldr	r3, [sp, #16]
 8010fd6:	eba0 000a 	sub.w	r0, r0, sl
 8010fda:	2240      	movs	r2, #64	@ 0x40
 8010fdc:	4082      	lsls	r2, r0
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	3401      	adds	r4, #1
 8010fe2:	9304      	str	r3, [sp, #16]
 8010fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fe8:	4824      	ldr	r0, [pc, #144]	@ (801107c <_svfiprintf_r+0x1e8>)
 8010fea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010fee:	2206      	movs	r2, #6
 8010ff0:	f7ef f97e 	bl	80002f0 <memchr>
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	d036      	beq.n	8011066 <_svfiprintf_r+0x1d2>
 8010ff8:	4b21      	ldr	r3, [pc, #132]	@ (8011080 <_svfiprintf_r+0x1ec>)
 8010ffa:	bb1b      	cbnz	r3, 8011044 <_svfiprintf_r+0x1b0>
 8010ffc:	9b03      	ldr	r3, [sp, #12]
 8010ffe:	3307      	adds	r3, #7
 8011000:	f023 0307 	bic.w	r3, r3, #7
 8011004:	3308      	adds	r3, #8
 8011006:	9303      	str	r3, [sp, #12]
 8011008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801100a:	4433      	add	r3, r6
 801100c:	9309      	str	r3, [sp, #36]	@ 0x24
 801100e:	e76a      	b.n	8010ee6 <_svfiprintf_r+0x52>
 8011010:	fb0c 3202 	mla	r2, ip, r2, r3
 8011014:	460c      	mov	r4, r1
 8011016:	2001      	movs	r0, #1
 8011018:	e7a8      	b.n	8010f6c <_svfiprintf_r+0xd8>
 801101a:	2300      	movs	r3, #0
 801101c:	3401      	adds	r4, #1
 801101e:	9305      	str	r3, [sp, #20]
 8011020:	4619      	mov	r1, r3
 8011022:	f04f 0c0a 	mov.w	ip, #10
 8011026:	4620      	mov	r0, r4
 8011028:	f810 2b01 	ldrb.w	r2, [r0], #1
 801102c:	3a30      	subs	r2, #48	@ 0x30
 801102e:	2a09      	cmp	r2, #9
 8011030:	d903      	bls.n	801103a <_svfiprintf_r+0x1a6>
 8011032:	2b00      	cmp	r3, #0
 8011034:	d0c6      	beq.n	8010fc4 <_svfiprintf_r+0x130>
 8011036:	9105      	str	r1, [sp, #20]
 8011038:	e7c4      	b.n	8010fc4 <_svfiprintf_r+0x130>
 801103a:	fb0c 2101 	mla	r1, ip, r1, r2
 801103e:	4604      	mov	r4, r0
 8011040:	2301      	movs	r3, #1
 8011042:	e7f0      	b.n	8011026 <_svfiprintf_r+0x192>
 8011044:	ab03      	add	r3, sp, #12
 8011046:	9300      	str	r3, [sp, #0]
 8011048:	462a      	mov	r2, r5
 801104a:	4b0e      	ldr	r3, [pc, #56]	@ (8011084 <_svfiprintf_r+0x1f0>)
 801104c:	a904      	add	r1, sp, #16
 801104e:	4638      	mov	r0, r7
 8011050:	f7fd ff86 	bl	800ef60 <_printf_float>
 8011054:	1c42      	adds	r2, r0, #1
 8011056:	4606      	mov	r6, r0
 8011058:	d1d6      	bne.n	8011008 <_svfiprintf_r+0x174>
 801105a:	89ab      	ldrh	r3, [r5, #12]
 801105c:	065b      	lsls	r3, r3, #25
 801105e:	f53f af2d 	bmi.w	8010ebc <_svfiprintf_r+0x28>
 8011062:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011064:	e72c      	b.n	8010ec0 <_svfiprintf_r+0x2c>
 8011066:	ab03      	add	r3, sp, #12
 8011068:	9300      	str	r3, [sp, #0]
 801106a:	462a      	mov	r2, r5
 801106c:	4b05      	ldr	r3, [pc, #20]	@ (8011084 <_svfiprintf_r+0x1f0>)
 801106e:	a904      	add	r1, sp, #16
 8011070:	4638      	mov	r0, r7
 8011072:	f7fe f9fd 	bl	800f470 <_printf_i>
 8011076:	e7ed      	b.n	8011054 <_svfiprintf_r+0x1c0>
 8011078:	08011dda 	.word	0x08011dda
 801107c:	08011de4 	.word	0x08011de4
 8011080:	0800ef61 	.word	0x0800ef61
 8011084:	08010ddd 	.word	0x08010ddd
 8011088:	08011de0 	.word	0x08011de0

0801108c <__sfputc_r>:
 801108c:	6893      	ldr	r3, [r2, #8]
 801108e:	3b01      	subs	r3, #1
 8011090:	2b00      	cmp	r3, #0
 8011092:	b410      	push	{r4}
 8011094:	6093      	str	r3, [r2, #8]
 8011096:	da08      	bge.n	80110aa <__sfputc_r+0x1e>
 8011098:	6994      	ldr	r4, [r2, #24]
 801109a:	42a3      	cmp	r3, r4
 801109c:	db01      	blt.n	80110a2 <__sfputc_r+0x16>
 801109e:	290a      	cmp	r1, #10
 80110a0:	d103      	bne.n	80110aa <__sfputc_r+0x1e>
 80110a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110a6:	f000 b9df 	b.w	8011468 <__swbuf_r>
 80110aa:	6813      	ldr	r3, [r2, #0]
 80110ac:	1c58      	adds	r0, r3, #1
 80110ae:	6010      	str	r0, [r2, #0]
 80110b0:	7019      	strb	r1, [r3, #0]
 80110b2:	4608      	mov	r0, r1
 80110b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110b8:	4770      	bx	lr

080110ba <__sfputs_r>:
 80110ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110bc:	4606      	mov	r6, r0
 80110be:	460f      	mov	r7, r1
 80110c0:	4614      	mov	r4, r2
 80110c2:	18d5      	adds	r5, r2, r3
 80110c4:	42ac      	cmp	r4, r5
 80110c6:	d101      	bne.n	80110cc <__sfputs_r+0x12>
 80110c8:	2000      	movs	r0, #0
 80110ca:	e007      	b.n	80110dc <__sfputs_r+0x22>
 80110cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110d0:	463a      	mov	r2, r7
 80110d2:	4630      	mov	r0, r6
 80110d4:	f7ff ffda 	bl	801108c <__sfputc_r>
 80110d8:	1c43      	adds	r3, r0, #1
 80110da:	d1f3      	bne.n	80110c4 <__sfputs_r+0xa>
 80110dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110e0 <_vfiprintf_r>:
 80110e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e4:	460d      	mov	r5, r1
 80110e6:	b09d      	sub	sp, #116	@ 0x74
 80110e8:	4614      	mov	r4, r2
 80110ea:	4698      	mov	r8, r3
 80110ec:	4606      	mov	r6, r0
 80110ee:	b118      	cbz	r0, 80110f8 <_vfiprintf_r+0x18>
 80110f0:	6a03      	ldr	r3, [r0, #32]
 80110f2:	b90b      	cbnz	r3, 80110f8 <_vfiprintf_r+0x18>
 80110f4:	f7fe fb66 	bl	800f7c4 <__sinit>
 80110f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110fa:	07d9      	lsls	r1, r3, #31
 80110fc:	d405      	bmi.n	801110a <_vfiprintf_r+0x2a>
 80110fe:	89ab      	ldrh	r3, [r5, #12]
 8011100:	059a      	lsls	r2, r3, #22
 8011102:	d402      	bmi.n	801110a <_vfiprintf_r+0x2a>
 8011104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011106:	f7fe fcac 	bl	800fa62 <__retarget_lock_acquire_recursive>
 801110a:	89ab      	ldrh	r3, [r5, #12]
 801110c:	071b      	lsls	r3, r3, #28
 801110e:	d501      	bpl.n	8011114 <_vfiprintf_r+0x34>
 8011110:	692b      	ldr	r3, [r5, #16]
 8011112:	b99b      	cbnz	r3, 801113c <_vfiprintf_r+0x5c>
 8011114:	4629      	mov	r1, r5
 8011116:	4630      	mov	r0, r6
 8011118:	f000 f9e4 	bl	80114e4 <__swsetup_r>
 801111c:	b170      	cbz	r0, 801113c <_vfiprintf_r+0x5c>
 801111e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011120:	07dc      	lsls	r4, r3, #31
 8011122:	d504      	bpl.n	801112e <_vfiprintf_r+0x4e>
 8011124:	f04f 30ff 	mov.w	r0, #4294967295
 8011128:	b01d      	add	sp, #116	@ 0x74
 801112a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112e:	89ab      	ldrh	r3, [r5, #12]
 8011130:	0598      	lsls	r0, r3, #22
 8011132:	d4f7      	bmi.n	8011124 <_vfiprintf_r+0x44>
 8011134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011136:	f7fe fc95 	bl	800fa64 <__retarget_lock_release_recursive>
 801113a:	e7f3      	b.n	8011124 <_vfiprintf_r+0x44>
 801113c:	2300      	movs	r3, #0
 801113e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011140:	2320      	movs	r3, #32
 8011142:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011146:	f8cd 800c 	str.w	r8, [sp, #12]
 801114a:	2330      	movs	r3, #48	@ 0x30
 801114c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80112fc <_vfiprintf_r+0x21c>
 8011150:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011154:	f04f 0901 	mov.w	r9, #1
 8011158:	4623      	mov	r3, r4
 801115a:	469a      	mov	sl, r3
 801115c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011160:	b10a      	cbz	r2, 8011166 <_vfiprintf_r+0x86>
 8011162:	2a25      	cmp	r2, #37	@ 0x25
 8011164:	d1f9      	bne.n	801115a <_vfiprintf_r+0x7a>
 8011166:	ebba 0b04 	subs.w	fp, sl, r4
 801116a:	d00b      	beq.n	8011184 <_vfiprintf_r+0xa4>
 801116c:	465b      	mov	r3, fp
 801116e:	4622      	mov	r2, r4
 8011170:	4629      	mov	r1, r5
 8011172:	4630      	mov	r0, r6
 8011174:	f7ff ffa1 	bl	80110ba <__sfputs_r>
 8011178:	3001      	adds	r0, #1
 801117a:	f000 80a7 	beq.w	80112cc <_vfiprintf_r+0x1ec>
 801117e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011180:	445a      	add	r2, fp
 8011182:	9209      	str	r2, [sp, #36]	@ 0x24
 8011184:	f89a 3000 	ldrb.w	r3, [sl]
 8011188:	2b00      	cmp	r3, #0
 801118a:	f000 809f 	beq.w	80112cc <_vfiprintf_r+0x1ec>
 801118e:	2300      	movs	r3, #0
 8011190:	f04f 32ff 	mov.w	r2, #4294967295
 8011194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011198:	f10a 0a01 	add.w	sl, sl, #1
 801119c:	9304      	str	r3, [sp, #16]
 801119e:	9307      	str	r3, [sp, #28]
 80111a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80111a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80111a6:	4654      	mov	r4, sl
 80111a8:	2205      	movs	r2, #5
 80111aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111ae:	4853      	ldr	r0, [pc, #332]	@ (80112fc <_vfiprintf_r+0x21c>)
 80111b0:	f7ef f89e 	bl	80002f0 <memchr>
 80111b4:	9a04      	ldr	r2, [sp, #16]
 80111b6:	b9d8      	cbnz	r0, 80111f0 <_vfiprintf_r+0x110>
 80111b8:	06d1      	lsls	r1, r2, #27
 80111ba:	bf44      	itt	mi
 80111bc:	2320      	movmi	r3, #32
 80111be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111c2:	0713      	lsls	r3, r2, #28
 80111c4:	bf44      	itt	mi
 80111c6:	232b      	movmi	r3, #43	@ 0x2b
 80111c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111cc:	f89a 3000 	ldrb.w	r3, [sl]
 80111d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80111d2:	d015      	beq.n	8011200 <_vfiprintf_r+0x120>
 80111d4:	9a07      	ldr	r2, [sp, #28]
 80111d6:	4654      	mov	r4, sl
 80111d8:	2000      	movs	r0, #0
 80111da:	f04f 0c0a 	mov.w	ip, #10
 80111de:	4621      	mov	r1, r4
 80111e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111e4:	3b30      	subs	r3, #48	@ 0x30
 80111e6:	2b09      	cmp	r3, #9
 80111e8:	d94b      	bls.n	8011282 <_vfiprintf_r+0x1a2>
 80111ea:	b1b0      	cbz	r0, 801121a <_vfiprintf_r+0x13a>
 80111ec:	9207      	str	r2, [sp, #28]
 80111ee:	e014      	b.n	801121a <_vfiprintf_r+0x13a>
 80111f0:	eba0 0308 	sub.w	r3, r0, r8
 80111f4:	fa09 f303 	lsl.w	r3, r9, r3
 80111f8:	4313      	orrs	r3, r2
 80111fa:	9304      	str	r3, [sp, #16]
 80111fc:	46a2      	mov	sl, r4
 80111fe:	e7d2      	b.n	80111a6 <_vfiprintf_r+0xc6>
 8011200:	9b03      	ldr	r3, [sp, #12]
 8011202:	1d19      	adds	r1, r3, #4
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	9103      	str	r1, [sp, #12]
 8011208:	2b00      	cmp	r3, #0
 801120a:	bfbb      	ittet	lt
 801120c:	425b      	neglt	r3, r3
 801120e:	f042 0202 	orrlt.w	r2, r2, #2
 8011212:	9307      	strge	r3, [sp, #28]
 8011214:	9307      	strlt	r3, [sp, #28]
 8011216:	bfb8      	it	lt
 8011218:	9204      	strlt	r2, [sp, #16]
 801121a:	7823      	ldrb	r3, [r4, #0]
 801121c:	2b2e      	cmp	r3, #46	@ 0x2e
 801121e:	d10a      	bne.n	8011236 <_vfiprintf_r+0x156>
 8011220:	7863      	ldrb	r3, [r4, #1]
 8011222:	2b2a      	cmp	r3, #42	@ 0x2a
 8011224:	d132      	bne.n	801128c <_vfiprintf_r+0x1ac>
 8011226:	9b03      	ldr	r3, [sp, #12]
 8011228:	1d1a      	adds	r2, r3, #4
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	9203      	str	r2, [sp, #12]
 801122e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011232:	3402      	adds	r4, #2
 8011234:	9305      	str	r3, [sp, #20]
 8011236:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801130c <_vfiprintf_r+0x22c>
 801123a:	7821      	ldrb	r1, [r4, #0]
 801123c:	2203      	movs	r2, #3
 801123e:	4650      	mov	r0, sl
 8011240:	f7ef f856 	bl	80002f0 <memchr>
 8011244:	b138      	cbz	r0, 8011256 <_vfiprintf_r+0x176>
 8011246:	9b04      	ldr	r3, [sp, #16]
 8011248:	eba0 000a 	sub.w	r0, r0, sl
 801124c:	2240      	movs	r2, #64	@ 0x40
 801124e:	4082      	lsls	r2, r0
 8011250:	4313      	orrs	r3, r2
 8011252:	3401      	adds	r4, #1
 8011254:	9304      	str	r3, [sp, #16]
 8011256:	f814 1b01 	ldrb.w	r1, [r4], #1
 801125a:	4829      	ldr	r0, [pc, #164]	@ (8011300 <_vfiprintf_r+0x220>)
 801125c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011260:	2206      	movs	r2, #6
 8011262:	f7ef f845 	bl	80002f0 <memchr>
 8011266:	2800      	cmp	r0, #0
 8011268:	d03f      	beq.n	80112ea <_vfiprintf_r+0x20a>
 801126a:	4b26      	ldr	r3, [pc, #152]	@ (8011304 <_vfiprintf_r+0x224>)
 801126c:	bb1b      	cbnz	r3, 80112b6 <_vfiprintf_r+0x1d6>
 801126e:	9b03      	ldr	r3, [sp, #12]
 8011270:	3307      	adds	r3, #7
 8011272:	f023 0307 	bic.w	r3, r3, #7
 8011276:	3308      	adds	r3, #8
 8011278:	9303      	str	r3, [sp, #12]
 801127a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801127c:	443b      	add	r3, r7
 801127e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011280:	e76a      	b.n	8011158 <_vfiprintf_r+0x78>
 8011282:	fb0c 3202 	mla	r2, ip, r2, r3
 8011286:	460c      	mov	r4, r1
 8011288:	2001      	movs	r0, #1
 801128a:	e7a8      	b.n	80111de <_vfiprintf_r+0xfe>
 801128c:	2300      	movs	r3, #0
 801128e:	3401      	adds	r4, #1
 8011290:	9305      	str	r3, [sp, #20]
 8011292:	4619      	mov	r1, r3
 8011294:	f04f 0c0a 	mov.w	ip, #10
 8011298:	4620      	mov	r0, r4
 801129a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801129e:	3a30      	subs	r2, #48	@ 0x30
 80112a0:	2a09      	cmp	r2, #9
 80112a2:	d903      	bls.n	80112ac <_vfiprintf_r+0x1cc>
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d0c6      	beq.n	8011236 <_vfiprintf_r+0x156>
 80112a8:	9105      	str	r1, [sp, #20]
 80112aa:	e7c4      	b.n	8011236 <_vfiprintf_r+0x156>
 80112ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80112b0:	4604      	mov	r4, r0
 80112b2:	2301      	movs	r3, #1
 80112b4:	e7f0      	b.n	8011298 <_vfiprintf_r+0x1b8>
 80112b6:	ab03      	add	r3, sp, #12
 80112b8:	9300      	str	r3, [sp, #0]
 80112ba:	462a      	mov	r2, r5
 80112bc:	4b12      	ldr	r3, [pc, #72]	@ (8011308 <_vfiprintf_r+0x228>)
 80112be:	a904      	add	r1, sp, #16
 80112c0:	4630      	mov	r0, r6
 80112c2:	f7fd fe4d 	bl	800ef60 <_printf_float>
 80112c6:	4607      	mov	r7, r0
 80112c8:	1c78      	adds	r0, r7, #1
 80112ca:	d1d6      	bne.n	801127a <_vfiprintf_r+0x19a>
 80112cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112ce:	07d9      	lsls	r1, r3, #31
 80112d0:	d405      	bmi.n	80112de <_vfiprintf_r+0x1fe>
 80112d2:	89ab      	ldrh	r3, [r5, #12]
 80112d4:	059a      	lsls	r2, r3, #22
 80112d6:	d402      	bmi.n	80112de <_vfiprintf_r+0x1fe>
 80112d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112da:	f7fe fbc3 	bl	800fa64 <__retarget_lock_release_recursive>
 80112de:	89ab      	ldrh	r3, [r5, #12]
 80112e0:	065b      	lsls	r3, r3, #25
 80112e2:	f53f af1f 	bmi.w	8011124 <_vfiprintf_r+0x44>
 80112e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80112e8:	e71e      	b.n	8011128 <_vfiprintf_r+0x48>
 80112ea:	ab03      	add	r3, sp, #12
 80112ec:	9300      	str	r3, [sp, #0]
 80112ee:	462a      	mov	r2, r5
 80112f0:	4b05      	ldr	r3, [pc, #20]	@ (8011308 <_vfiprintf_r+0x228>)
 80112f2:	a904      	add	r1, sp, #16
 80112f4:	4630      	mov	r0, r6
 80112f6:	f7fe f8bb 	bl	800f470 <_printf_i>
 80112fa:	e7e4      	b.n	80112c6 <_vfiprintf_r+0x1e6>
 80112fc:	08011dda 	.word	0x08011dda
 8011300:	08011de4 	.word	0x08011de4
 8011304:	0800ef61 	.word	0x0800ef61
 8011308:	080110bb 	.word	0x080110bb
 801130c:	08011de0 	.word	0x08011de0

08011310 <__sflush_r>:
 8011310:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011318:	0716      	lsls	r6, r2, #28
 801131a:	4605      	mov	r5, r0
 801131c:	460c      	mov	r4, r1
 801131e:	d454      	bmi.n	80113ca <__sflush_r+0xba>
 8011320:	684b      	ldr	r3, [r1, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	dc02      	bgt.n	801132c <__sflush_r+0x1c>
 8011326:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011328:	2b00      	cmp	r3, #0
 801132a:	dd48      	ble.n	80113be <__sflush_r+0xae>
 801132c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801132e:	2e00      	cmp	r6, #0
 8011330:	d045      	beq.n	80113be <__sflush_r+0xae>
 8011332:	2300      	movs	r3, #0
 8011334:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011338:	682f      	ldr	r7, [r5, #0]
 801133a:	6a21      	ldr	r1, [r4, #32]
 801133c:	602b      	str	r3, [r5, #0]
 801133e:	d030      	beq.n	80113a2 <__sflush_r+0x92>
 8011340:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011342:	89a3      	ldrh	r3, [r4, #12]
 8011344:	0759      	lsls	r1, r3, #29
 8011346:	d505      	bpl.n	8011354 <__sflush_r+0x44>
 8011348:	6863      	ldr	r3, [r4, #4]
 801134a:	1ad2      	subs	r2, r2, r3
 801134c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801134e:	b10b      	cbz	r3, 8011354 <__sflush_r+0x44>
 8011350:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011352:	1ad2      	subs	r2, r2, r3
 8011354:	2300      	movs	r3, #0
 8011356:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011358:	6a21      	ldr	r1, [r4, #32]
 801135a:	4628      	mov	r0, r5
 801135c:	47b0      	blx	r6
 801135e:	1c43      	adds	r3, r0, #1
 8011360:	89a3      	ldrh	r3, [r4, #12]
 8011362:	d106      	bne.n	8011372 <__sflush_r+0x62>
 8011364:	6829      	ldr	r1, [r5, #0]
 8011366:	291d      	cmp	r1, #29
 8011368:	d82b      	bhi.n	80113c2 <__sflush_r+0xb2>
 801136a:	4a2a      	ldr	r2, [pc, #168]	@ (8011414 <__sflush_r+0x104>)
 801136c:	40ca      	lsrs	r2, r1
 801136e:	07d6      	lsls	r6, r2, #31
 8011370:	d527      	bpl.n	80113c2 <__sflush_r+0xb2>
 8011372:	2200      	movs	r2, #0
 8011374:	6062      	str	r2, [r4, #4]
 8011376:	04d9      	lsls	r1, r3, #19
 8011378:	6922      	ldr	r2, [r4, #16]
 801137a:	6022      	str	r2, [r4, #0]
 801137c:	d504      	bpl.n	8011388 <__sflush_r+0x78>
 801137e:	1c42      	adds	r2, r0, #1
 8011380:	d101      	bne.n	8011386 <__sflush_r+0x76>
 8011382:	682b      	ldr	r3, [r5, #0]
 8011384:	b903      	cbnz	r3, 8011388 <__sflush_r+0x78>
 8011386:	6560      	str	r0, [r4, #84]	@ 0x54
 8011388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801138a:	602f      	str	r7, [r5, #0]
 801138c:	b1b9      	cbz	r1, 80113be <__sflush_r+0xae>
 801138e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011392:	4299      	cmp	r1, r3
 8011394:	d002      	beq.n	801139c <__sflush_r+0x8c>
 8011396:	4628      	mov	r0, r5
 8011398:	f7ff f95c 	bl	8010654 <_free_r>
 801139c:	2300      	movs	r3, #0
 801139e:	6363      	str	r3, [r4, #52]	@ 0x34
 80113a0:	e00d      	b.n	80113be <__sflush_r+0xae>
 80113a2:	2301      	movs	r3, #1
 80113a4:	4628      	mov	r0, r5
 80113a6:	47b0      	blx	r6
 80113a8:	4602      	mov	r2, r0
 80113aa:	1c50      	adds	r0, r2, #1
 80113ac:	d1c9      	bne.n	8011342 <__sflush_r+0x32>
 80113ae:	682b      	ldr	r3, [r5, #0]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d0c6      	beq.n	8011342 <__sflush_r+0x32>
 80113b4:	2b1d      	cmp	r3, #29
 80113b6:	d001      	beq.n	80113bc <__sflush_r+0xac>
 80113b8:	2b16      	cmp	r3, #22
 80113ba:	d11e      	bne.n	80113fa <__sflush_r+0xea>
 80113bc:	602f      	str	r7, [r5, #0]
 80113be:	2000      	movs	r0, #0
 80113c0:	e022      	b.n	8011408 <__sflush_r+0xf8>
 80113c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113c6:	b21b      	sxth	r3, r3
 80113c8:	e01b      	b.n	8011402 <__sflush_r+0xf2>
 80113ca:	690f      	ldr	r7, [r1, #16]
 80113cc:	2f00      	cmp	r7, #0
 80113ce:	d0f6      	beq.n	80113be <__sflush_r+0xae>
 80113d0:	0793      	lsls	r3, r2, #30
 80113d2:	680e      	ldr	r6, [r1, #0]
 80113d4:	bf08      	it	eq
 80113d6:	694b      	ldreq	r3, [r1, #20]
 80113d8:	600f      	str	r7, [r1, #0]
 80113da:	bf18      	it	ne
 80113dc:	2300      	movne	r3, #0
 80113de:	eba6 0807 	sub.w	r8, r6, r7
 80113e2:	608b      	str	r3, [r1, #8]
 80113e4:	f1b8 0f00 	cmp.w	r8, #0
 80113e8:	dde9      	ble.n	80113be <__sflush_r+0xae>
 80113ea:	6a21      	ldr	r1, [r4, #32]
 80113ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80113ee:	4643      	mov	r3, r8
 80113f0:	463a      	mov	r2, r7
 80113f2:	4628      	mov	r0, r5
 80113f4:	47b0      	blx	r6
 80113f6:	2800      	cmp	r0, #0
 80113f8:	dc08      	bgt.n	801140c <__sflush_r+0xfc>
 80113fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011402:	81a3      	strh	r3, [r4, #12]
 8011404:	f04f 30ff 	mov.w	r0, #4294967295
 8011408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801140c:	4407      	add	r7, r0
 801140e:	eba8 0800 	sub.w	r8, r8, r0
 8011412:	e7e7      	b.n	80113e4 <__sflush_r+0xd4>
 8011414:	20400001 	.word	0x20400001

08011418 <_fflush_r>:
 8011418:	b538      	push	{r3, r4, r5, lr}
 801141a:	690b      	ldr	r3, [r1, #16]
 801141c:	4605      	mov	r5, r0
 801141e:	460c      	mov	r4, r1
 8011420:	b913      	cbnz	r3, 8011428 <_fflush_r+0x10>
 8011422:	2500      	movs	r5, #0
 8011424:	4628      	mov	r0, r5
 8011426:	bd38      	pop	{r3, r4, r5, pc}
 8011428:	b118      	cbz	r0, 8011432 <_fflush_r+0x1a>
 801142a:	6a03      	ldr	r3, [r0, #32]
 801142c:	b90b      	cbnz	r3, 8011432 <_fflush_r+0x1a>
 801142e:	f7fe f9c9 	bl	800f7c4 <__sinit>
 8011432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d0f3      	beq.n	8011422 <_fflush_r+0xa>
 801143a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801143c:	07d0      	lsls	r0, r2, #31
 801143e:	d404      	bmi.n	801144a <_fflush_r+0x32>
 8011440:	0599      	lsls	r1, r3, #22
 8011442:	d402      	bmi.n	801144a <_fflush_r+0x32>
 8011444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011446:	f7fe fb0c 	bl	800fa62 <__retarget_lock_acquire_recursive>
 801144a:	4628      	mov	r0, r5
 801144c:	4621      	mov	r1, r4
 801144e:	f7ff ff5f 	bl	8011310 <__sflush_r>
 8011452:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011454:	07da      	lsls	r2, r3, #31
 8011456:	4605      	mov	r5, r0
 8011458:	d4e4      	bmi.n	8011424 <_fflush_r+0xc>
 801145a:	89a3      	ldrh	r3, [r4, #12]
 801145c:	059b      	lsls	r3, r3, #22
 801145e:	d4e1      	bmi.n	8011424 <_fflush_r+0xc>
 8011460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011462:	f7fe faff 	bl	800fa64 <__retarget_lock_release_recursive>
 8011466:	e7dd      	b.n	8011424 <_fflush_r+0xc>

08011468 <__swbuf_r>:
 8011468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801146a:	460e      	mov	r6, r1
 801146c:	4614      	mov	r4, r2
 801146e:	4605      	mov	r5, r0
 8011470:	b118      	cbz	r0, 801147a <__swbuf_r+0x12>
 8011472:	6a03      	ldr	r3, [r0, #32]
 8011474:	b90b      	cbnz	r3, 801147a <__swbuf_r+0x12>
 8011476:	f7fe f9a5 	bl	800f7c4 <__sinit>
 801147a:	69a3      	ldr	r3, [r4, #24]
 801147c:	60a3      	str	r3, [r4, #8]
 801147e:	89a3      	ldrh	r3, [r4, #12]
 8011480:	071a      	lsls	r2, r3, #28
 8011482:	d501      	bpl.n	8011488 <__swbuf_r+0x20>
 8011484:	6923      	ldr	r3, [r4, #16]
 8011486:	b943      	cbnz	r3, 801149a <__swbuf_r+0x32>
 8011488:	4621      	mov	r1, r4
 801148a:	4628      	mov	r0, r5
 801148c:	f000 f82a 	bl	80114e4 <__swsetup_r>
 8011490:	b118      	cbz	r0, 801149a <__swbuf_r+0x32>
 8011492:	f04f 37ff 	mov.w	r7, #4294967295
 8011496:	4638      	mov	r0, r7
 8011498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801149a:	6823      	ldr	r3, [r4, #0]
 801149c:	6922      	ldr	r2, [r4, #16]
 801149e:	1a98      	subs	r0, r3, r2
 80114a0:	6963      	ldr	r3, [r4, #20]
 80114a2:	b2f6      	uxtb	r6, r6
 80114a4:	4283      	cmp	r3, r0
 80114a6:	4637      	mov	r7, r6
 80114a8:	dc05      	bgt.n	80114b6 <__swbuf_r+0x4e>
 80114aa:	4621      	mov	r1, r4
 80114ac:	4628      	mov	r0, r5
 80114ae:	f7ff ffb3 	bl	8011418 <_fflush_r>
 80114b2:	2800      	cmp	r0, #0
 80114b4:	d1ed      	bne.n	8011492 <__swbuf_r+0x2a>
 80114b6:	68a3      	ldr	r3, [r4, #8]
 80114b8:	3b01      	subs	r3, #1
 80114ba:	60a3      	str	r3, [r4, #8]
 80114bc:	6823      	ldr	r3, [r4, #0]
 80114be:	1c5a      	adds	r2, r3, #1
 80114c0:	6022      	str	r2, [r4, #0]
 80114c2:	701e      	strb	r6, [r3, #0]
 80114c4:	6962      	ldr	r2, [r4, #20]
 80114c6:	1c43      	adds	r3, r0, #1
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d004      	beq.n	80114d6 <__swbuf_r+0x6e>
 80114cc:	89a3      	ldrh	r3, [r4, #12]
 80114ce:	07db      	lsls	r3, r3, #31
 80114d0:	d5e1      	bpl.n	8011496 <__swbuf_r+0x2e>
 80114d2:	2e0a      	cmp	r6, #10
 80114d4:	d1df      	bne.n	8011496 <__swbuf_r+0x2e>
 80114d6:	4621      	mov	r1, r4
 80114d8:	4628      	mov	r0, r5
 80114da:	f7ff ff9d 	bl	8011418 <_fflush_r>
 80114de:	2800      	cmp	r0, #0
 80114e0:	d0d9      	beq.n	8011496 <__swbuf_r+0x2e>
 80114e2:	e7d6      	b.n	8011492 <__swbuf_r+0x2a>

080114e4 <__swsetup_r>:
 80114e4:	b538      	push	{r3, r4, r5, lr}
 80114e6:	4b29      	ldr	r3, [pc, #164]	@ (801158c <__swsetup_r+0xa8>)
 80114e8:	4605      	mov	r5, r0
 80114ea:	6818      	ldr	r0, [r3, #0]
 80114ec:	460c      	mov	r4, r1
 80114ee:	b118      	cbz	r0, 80114f8 <__swsetup_r+0x14>
 80114f0:	6a03      	ldr	r3, [r0, #32]
 80114f2:	b90b      	cbnz	r3, 80114f8 <__swsetup_r+0x14>
 80114f4:	f7fe f966 	bl	800f7c4 <__sinit>
 80114f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114fc:	0719      	lsls	r1, r3, #28
 80114fe:	d422      	bmi.n	8011546 <__swsetup_r+0x62>
 8011500:	06da      	lsls	r2, r3, #27
 8011502:	d407      	bmi.n	8011514 <__swsetup_r+0x30>
 8011504:	2209      	movs	r2, #9
 8011506:	602a      	str	r2, [r5, #0]
 8011508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801150c:	81a3      	strh	r3, [r4, #12]
 801150e:	f04f 30ff 	mov.w	r0, #4294967295
 8011512:	e033      	b.n	801157c <__swsetup_r+0x98>
 8011514:	0758      	lsls	r0, r3, #29
 8011516:	d512      	bpl.n	801153e <__swsetup_r+0x5a>
 8011518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801151a:	b141      	cbz	r1, 801152e <__swsetup_r+0x4a>
 801151c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011520:	4299      	cmp	r1, r3
 8011522:	d002      	beq.n	801152a <__swsetup_r+0x46>
 8011524:	4628      	mov	r0, r5
 8011526:	f7ff f895 	bl	8010654 <_free_r>
 801152a:	2300      	movs	r3, #0
 801152c:	6363      	str	r3, [r4, #52]	@ 0x34
 801152e:	89a3      	ldrh	r3, [r4, #12]
 8011530:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011534:	81a3      	strh	r3, [r4, #12]
 8011536:	2300      	movs	r3, #0
 8011538:	6063      	str	r3, [r4, #4]
 801153a:	6923      	ldr	r3, [r4, #16]
 801153c:	6023      	str	r3, [r4, #0]
 801153e:	89a3      	ldrh	r3, [r4, #12]
 8011540:	f043 0308 	orr.w	r3, r3, #8
 8011544:	81a3      	strh	r3, [r4, #12]
 8011546:	6923      	ldr	r3, [r4, #16]
 8011548:	b94b      	cbnz	r3, 801155e <__swsetup_r+0x7a>
 801154a:	89a3      	ldrh	r3, [r4, #12]
 801154c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011554:	d003      	beq.n	801155e <__swsetup_r+0x7a>
 8011556:	4621      	mov	r1, r4
 8011558:	4628      	mov	r0, r5
 801155a:	f000 f8eb 	bl	8011734 <__smakebuf_r>
 801155e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011562:	f013 0201 	ands.w	r2, r3, #1
 8011566:	d00a      	beq.n	801157e <__swsetup_r+0x9a>
 8011568:	2200      	movs	r2, #0
 801156a:	60a2      	str	r2, [r4, #8]
 801156c:	6962      	ldr	r2, [r4, #20]
 801156e:	4252      	negs	r2, r2
 8011570:	61a2      	str	r2, [r4, #24]
 8011572:	6922      	ldr	r2, [r4, #16]
 8011574:	b942      	cbnz	r2, 8011588 <__swsetup_r+0xa4>
 8011576:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801157a:	d1c5      	bne.n	8011508 <__swsetup_r+0x24>
 801157c:	bd38      	pop	{r3, r4, r5, pc}
 801157e:	0799      	lsls	r1, r3, #30
 8011580:	bf58      	it	pl
 8011582:	6962      	ldrpl	r2, [r4, #20]
 8011584:	60a2      	str	r2, [r4, #8]
 8011586:	e7f4      	b.n	8011572 <__swsetup_r+0x8e>
 8011588:	2000      	movs	r0, #0
 801158a:	e7f7      	b.n	801157c <__swsetup_r+0x98>
 801158c:	2400001c 	.word	0x2400001c

08011590 <memmove>:
 8011590:	4288      	cmp	r0, r1
 8011592:	b510      	push	{r4, lr}
 8011594:	eb01 0402 	add.w	r4, r1, r2
 8011598:	d902      	bls.n	80115a0 <memmove+0x10>
 801159a:	4284      	cmp	r4, r0
 801159c:	4623      	mov	r3, r4
 801159e:	d807      	bhi.n	80115b0 <memmove+0x20>
 80115a0:	1e43      	subs	r3, r0, #1
 80115a2:	42a1      	cmp	r1, r4
 80115a4:	d008      	beq.n	80115b8 <memmove+0x28>
 80115a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80115ae:	e7f8      	b.n	80115a2 <memmove+0x12>
 80115b0:	4402      	add	r2, r0
 80115b2:	4601      	mov	r1, r0
 80115b4:	428a      	cmp	r2, r1
 80115b6:	d100      	bne.n	80115ba <memmove+0x2a>
 80115b8:	bd10      	pop	{r4, pc}
 80115ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80115be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80115c2:	e7f7      	b.n	80115b4 <memmove+0x24>

080115c4 <__assert_func>:
 80115c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115c6:	4614      	mov	r4, r2
 80115c8:	461a      	mov	r2, r3
 80115ca:	4b09      	ldr	r3, [pc, #36]	@ (80115f0 <__assert_func+0x2c>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	4605      	mov	r5, r0
 80115d0:	68d8      	ldr	r0, [r3, #12]
 80115d2:	b14c      	cbz	r4, 80115e8 <__assert_func+0x24>
 80115d4:	4b07      	ldr	r3, [pc, #28]	@ (80115f4 <__assert_func+0x30>)
 80115d6:	9100      	str	r1, [sp, #0]
 80115d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80115dc:	4906      	ldr	r1, [pc, #24]	@ (80115f8 <__assert_func+0x34>)
 80115de:	462b      	mov	r3, r5
 80115e0:	f000 f870 	bl	80116c4 <fiprintf>
 80115e4:	f000 f904 	bl	80117f0 <abort>
 80115e8:	4b04      	ldr	r3, [pc, #16]	@ (80115fc <__assert_func+0x38>)
 80115ea:	461c      	mov	r4, r3
 80115ec:	e7f3      	b.n	80115d6 <__assert_func+0x12>
 80115ee:	bf00      	nop
 80115f0:	2400001c 	.word	0x2400001c
 80115f4:	08011df5 	.word	0x08011df5
 80115f8:	08011e02 	.word	0x08011e02
 80115fc:	08011e30 	.word	0x08011e30

08011600 <_calloc_r>:
 8011600:	b570      	push	{r4, r5, r6, lr}
 8011602:	fba1 5402 	umull	r5, r4, r1, r2
 8011606:	b934      	cbnz	r4, 8011616 <_calloc_r+0x16>
 8011608:	4629      	mov	r1, r5
 801160a:	f7fd fb8d 	bl	800ed28 <_malloc_r>
 801160e:	4606      	mov	r6, r0
 8011610:	b928      	cbnz	r0, 801161e <_calloc_r+0x1e>
 8011612:	4630      	mov	r0, r6
 8011614:	bd70      	pop	{r4, r5, r6, pc}
 8011616:	220c      	movs	r2, #12
 8011618:	6002      	str	r2, [r0, #0]
 801161a:	2600      	movs	r6, #0
 801161c:	e7f9      	b.n	8011612 <_calloc_r+0x12>
 801161e:	462a      	mov	r2, r5
 8011620:	4621      	mov	r1, r4
 8011622:	f7fe f990 	bl	800f946 <memset>
 8011626:	e7f4      	b.n	8011612 <_calloc_r+0x12>

08011628 <__ascii_mbtowc>:
 8011628:	b082      	sub	sp, #8
 801162a:	b901      	cbnz	r1, 801162e <__ascii_mbtowc+0x6>
 801162c:	a901      	add	r1, sp, #4
 801162e:	b142      	cbz	r2, 8011642 <__ascii_mbtowc+0x1a>
 8011630:	b14b      	cbz	r3, 8011646 <__ascii_mbtowc+0x1e>
 8011632:	7813      	ldrb	r3, [r2, #0]
 8011634:	600b      	str	r3, [r1, #0]
 8011636:	7812      	ldrb	r2, [r2, #0]
 8011638:	1e10      	subs	r0, r2, #0
 801163a:	bf18      	it	ne
 801163c:	2001      	movne	r0, #1
 801163e:	b002      	add	sp, #8
 8011640:	4770      	bx	lr
 8011642:	4610      	mov	r0, r2
 8011644:	e7fb      	b.n	801163e <__ascii_mbtowc+0x16>
 8011646:	f06f 0001 	mvn.w	r0, #1
 801164a:	e7f8      	b.n	801163e <__ascii_mbtowc+0x16>

0801164c <_realloc_r>:
 801164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011650:	4607      	mov	r7, r0
 8011652:	4614      	mov	r4, r2
 8011654:	460d      	mov	r5, r1
 8011656:	b921      	cbnz	r1, 8011662 <_realloc_r+0x16>
 8011658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801165c:	4611      	mov	r1, r2
 801165e:	f7fd bb63 	b.w	800ed28 <_malloc_r>
 8011662:	b92a      	cbnz	r2, 8011670 <_realloc_r+0x24>
 8011664:	f7fe fff6 	bl	8010654 <_free_r>
 8011668:	4625      	mov	r5, r4
 801166a:	4628      	mov	r0, r5
 801166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011670:	f000 f8c5 	bl	80117fe <_malloc_usable_size_r>
 8011674:	4284      	cmp	r4, r0
 8011676:	4606      	mov	r6, r0
 8011678:	d802      	bhi.n	8011680 <_realloc_r+0x34>
 801167a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801167e:	d8f4      	bhi.n	801166a <_realloc_r+0x1e>
 8011680:	4621      	mov	r1, r4
 8011682:	4638      	mov	r0, r7
 8011684:	f7fd fb50 	bl	800ed28 <_malloc_r>
 8011688:	4680      	mov	r8, r0
 801168a:	b908      	cbnz	r0, 8011690 <_realloc_r+0x44>
 801168c:	4645      	mov	r5, r8
 801168e:	e7ec      	b.n	801166a <_realloc_r+0x1e>
 8011690:	42b4      	cmp	r4, r6
 8011692:	4622      	mov	r2, r4
 8011694:	4629      	mov	r1, r5
 8011696:	bf28      	it	cs
 8011698:	4632      	movcs	r2, r6
 801169a:	f7fe f9e4 	bl	800fa66 <memcpy>
 801169e:	4629      	mov	r1, r5
 80116a0:	4638      	mov	r0, r7
 80116a2:	f7fe ffd7 	bl	8010654 <_free_r>
 80116a6:	e7f1      	b.n	801168c <_realloc_r+0x40>

080116a8 <__ascii_wctomb>:
 80116a8:	4603      	mov	r3, r0
 80116aa:	4608      	mov	r0, r1
 80116ac:	b141      	cbz	r1, 80116c0 <__ascii_wctomb+0x18>
 80116ae:	2aff      	cmp	r2, #255	@ 0xff
 80116b0:	d904      	bls.n	80116bc <__ascii_wctomb+0x14>
 80116b2:	228a      	movs	r2, #138	@ 0x8a
 80116b4:	601a      	str	r2, [r3, #0]
 80116b6:	f04f 30ff 	mov.w	r0, #4294967295
 80116ba:	4770      	bx	lr
 80116bc:	700a      	strb	r2, [r1, #0]
 80116be:	2001      	movs	r0, #1
 80116c0:	4770      	bx	lr
	...

080116c4 <fiprintf>:
 80116c4:	b40e      	push	{r1, r2, r3}
 80116c6:	b503      	push	{r0, r1, lr}
 80116c8:	4601      	mov	r1, r0
 80116ca:	ab03      	add	r3, sp, #12
 80116cc:	4805      	ldr	r0, [pc, #20]	@ (80116e4 <fiprintf+0x20>)
 80116ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80116d2:	6800      	ldr	r0, [r0, #0]
 80116d4:	9301      	str	r3, [sp, #4]
 80116d6:	f7ff fd03 	bl	80110e0 <_vfiprintf_r>
 80116da:	b002      	add	sp, #8
 80116dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80116e0:	b003      	add	sp, #12
 80116e2:	4770      	bx	lr
 80116e4:	2400001c 	.word	0x2400001c

080116e8 <__swhatbuf_r>:
 80116e8:	b570      	push	{r4, r5, r6, lr}
 80116ea:	460c      	mov	r4, r1
 80116ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116f0:	2900      	cmp	r1, #0
 80116f2:	b096      	sub	sp, #88	@ 0x58
 80116f4:	4615      	mov	r5, r2
 80116f6:	461e      	mov	r6, r3
 80116f8:	da0d      	bge.n	8011716 <__swhatbuf_r+0x2e>
 80116fa:	89a3      	ldrh	r3, [r4, #12]
 80116fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011700:	f04f 0100 	mov.w	r1, #0
 8011704:	bf14      	ite	ne
 8011706:	2340      	movne	r3, #64	@ 0x40
 8011708:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801170c:	2000      	movs	r0, #0
 801170e:	6031      	str	r1, [r6, #0]
 8011710:	602b      	str	r3, [r5, #0]
 8011712:	b016      	add	sp, #88	@ 0x58
 8011714:	bd70      	pop	{r4, r5, r6, pc}
 8011716:	466a      	mov	r2, sp
 8011718:	f000 f848 	bl	80117ac <_fstat_r>
 801171c:	2800      	cmp	r0, #0
 801171e:	dbec      	blt.n	80116fa <__swhatbuf_r+0x12>
 8011720:	9901      	ldr	r1, [sp, #4]
 8011722:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011726:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801172a:	4259      	negs	r1, r3
 801172c:	4159      	adcs	r1, r3
 801172e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011732:	e7eb      	b.n	801170c <__swhatbuf_r+0x24>

08011734 <__smakebuf_r>:
 8011734:	898b      	ldrh	r3, [r1, #12]
 8011736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011738:	079d      	lsls	r5, r3, #30
 801173a:	4606      	mov	r6, r0
 801173c:	460c      	mov	r4, r1
 801173e:	d507      	bpl.n	8011750 <__smakebuf_r+0x1c>
 8011740:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011744:	6023      	str	r3, [r4, #0]
 8011746:	6123      	str	r3, [r4, #16]
 8011748:	2301      	movs	r3, #1
 801174a:	6163      	str	r3, [r4, #20]
 801174c:	b003      	add	sp, #12
 801174e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011750:	ab01      	add	r3, sp, #4
 8011752:	466a      	mov	r2, sp
 8011754:	f7ff ffc8 	bl	80116e8 <__swhatbuf_r>
 8011758:	9f00      	ldr	r7, [sp, #0]
 801175a:	4605      	mov	r5, r0
 801175c:	4639      	mov	r1, r7
 801175e:	4630      	mov	r0, r6
 8011760:	f7fd fae2 	bl	800ed28 <_malloc_r>
 8011764:	b948      	cbnz	r0, 801177a <__smakebuf_r+0x46>
 8011766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801176a:	059a      	lsls	r2, r3, #22
 801176c:	d4ee      	bmi.n	801174c <__smakebuf_r+0x18>
 801176e:	f023 0303 	bic.w	r3, r3, #3
 8011772:	f043 0302 	orr.w	r3, r3, #2
 8011776:	81a3      	strh	r3, [r4, #12]
 8011778:	e7e2      	b.n	8011740 <__smakebuf_r+0xc>
 801177a:	89a3      	ldrh	r3, [r4, #12]
 801177c:	6020      	str	r0, [r4, #0]
 801177e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011782:	81a3      	strh	r3, [r4, #12]
 8011784:	9b01      	ldr	r3, [sp, #4]
 8011786:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801178a:	b15b      	cbz	r3, 80117a4 <__smakebuf_r+0x70>
 801178c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011790:	4630      	mov	r0, r6
 8011792:	f000 f81d 	bl	80117d0 <_isatty_r>
 8011796:	b128      	cbz	r0, 80117a4 <__smakebuf_r+0x70>
 8011798:	89a3      	ldrh	r3, [r4, #12]
 801179a:	f023 0303 	bic.w	r3, r3, #3
 801179e:	f043 0301 	orr.w	r3, r3, #1
 80117a2:	81a3      	strh	r3, [r4, #12]
 80117a4:	89a3      	ldrh	r3, [r4, #12]
 80117a6:	431d      	orrs	r5, r3
 80117a8:	81a5      	strh	r5, [r4, #12]
 80117aa:	e7cf      	b.n	801174c <__smakebuf_r+0x18>

080117ac <_fstat_r>:
 80117ac:	b538      	push	{r3, r4, r5, lr}
 80117ae:	4d07      	ldr	r5, [pc, #28]	@ (80117cc <_fstat_r+0x20>)
 80117b0:	2300      	movs	r3, #0
 80117b2:	4604      	mov	r4, r0
 80117b4:	4608      	mov	r0, r1
 80117b6:	4611      	mov	r1, r2
 80117b8:	602b      	str	r3, [r5, #0]
 80117ba:	f7ef ff27 	bl	800160c <_fstat>
 80117be:	1c43      	adds	r3, r0, #1
 80117c0:	d102      	bne.n	80117c8 <_fstat_r+0x1c>
 80117c2:	682b      	ldr	r3, [r5, #0]
 80117c4:	b103      	cbz	r3, 80117c8 <_fstat_r+0x1c>
 80117c6:	6023      	str	r3, [r4, #0]
 80117c8:	bd38      	pop	{r3, r4, r5, pc}
 80117ca:	bf00      	nop
 80117cc:	24000e10 	.word	0x24000e10

080117d0 <_isatty_r>:
 80117d0:	b538      	push	{r3, r4, r5, lr}
 80117d2:	4d06      	ldr	r5, [pc, #24]	@ (80117ec <_isatty_r+0x1c>)
 80117d4:	2300      	movs	r3, #0
 80117d6:	4604      	mov	r4, r0
 80117d8:	4608      	mov	r0, r1
 80117da:	602b      	str	r3, [r5, #0]
 80117dc:	f7ef ff26 	bl	800162c <_isatty>
 80117e0:	1c43      	adds	r3, r0, #1
 80117e2:	d102      	bne.n	80117ea <_isatty_r+0x1a>
 80117e4:	682b      	ldr	r3, [r5, #0]
 80117e6:	b103      	cbz	r3, 80117ea <_isatty_r+0x1a>
 80117e8:	6023      	str	r3, [r4, #0]
 80117ea:	bd38      	pop	{r3, r4, r5, pc}
 80117ec:	24000e10 	.word	0x24000e10

080117f0 <abort>:
 80117f0:	b508      	push	{r3, lr}
 80117f2:	2006      	movs	r0, #6
 80117f4:	f000 f834 	bl	8011860 <raise>
 80117f8:	2001      	movs	r0, #1
 80117fa:	f7ef feb7 	bl	800156c <_exit>

080117fe <_malloc_usable_size_r>:
 80117fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011802:	1f18      	subs	r0, r3, #4
 8011804:	2b00      	cmp	r3, #0
 8011806:	bfbc      	itt	lt
 8011808:	580b      	ldrlt	r3, [r1, r0]
 801180a:	18c0      	addlt	r0, r0, r3
 801180c:	4770      	bx	lr

0801180e <_raise_r>:
 801180e:	291f      	cmp	r1, #31
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	4605      	mov	r5, r0
 8011814:	460c      	mov	r4, r1
 8011816:	d904      	bls.n	8011822 <_raise_r+0x14>
 8011818:	2316      	movs	r3, #22
 801181a:	6003      	str	r3, [r0, #0]
 801181c:	f04f 30ff 	mov.w	r0, #4294967295
 8011820:	bd38      	pop	{r3, r4, r5, pc}
 8011822:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011824:	b112      	cbz	r2, 801182c <_raise_r+0x1e>
 8011826:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801182a:	b94b      	cbnz	r3, 8011840 <_raise_r+0x32>
 801182c:	4628      	mov	r0, r5
 801182e:	f000 f831 	bl	8011894 <_getpid_r>
 8011832:	4622      	mov	r2, r4
 8011834:	4601      	mov	r1, r0
 8011836:	4628      	mov	r0, r5
 8011838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801183c:	f000 b818 	b.w	8011870 <_kill_r>
 8011840:	2b01      	cmp	r3, #1
 8011842:	d00a      	beq.n	801185a <_raise_r+0x4c>
 8011844:	1c59      	adds	r1, r3, #1
 8011846:	d103      	bne.n	8011850 <_raise_r+0x42>
 8011848:	2316      	movs	r3, #22
 801184a:	6003      	str	r3, [r0, #0]
 801184c:	2001      	movs	r0, #1
 801184e:	e7e7      	b.n	8011820 <_raise_r+0x12>
 8011850:	2100      	movs	r1, #0
 8011852:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011856:	4620      	mov	r0, r4
 8011858:	4798      	blx	r3
 801185a:	2000      	movs	r0, #0
 801185c:	e7e0      	b.n	8011820 <_raise_r+0x12>
	...

08011860 <raise>:
 8011860:	4b02      	ldr	r3, [pc, #8]	@ (801186c <raise+0xc>)
 8011862:	4601      	mov	r1, r0
 8011864:	6818      	ldr	r0, [r3, #0]
 8011866:	f7ff bfd2 	b.w	801180e <_raise_r>
 801186a:	bf00      	nop
 801186c:	2400001c 	.word	0x2400001c

08011870 <_kill_r>:
 8011870:	b538      	push	{r3, r4, r5, lr}
 8011872:	4d07      	ldr	r5, [pc, #28]	@ (8011890 <_kill_r+0x20>)
 8011874:	2300      	movs	r3, #0
 8011876:	4604      	mov	r4, r0
 8011878:	4608      	mov	r0, r1
 801187a:	4611      	mov	r1, r2
 801187c:	602b      	str	r3, [r5, #0]
 801187e:	f7ef fe65 	bl	800154c <_kill>
 8011882:	1c43      	adds	r3, r0, #1
 8011884:	d102      	bne.n	801188c <_kill_r+0x1c>
 8011886:	682b      	ldr	r3, [r5, #0]
 8011888:	b103      	cbz	r3, 801188c <_kill_r+0x1c>
 801188a:	6023      	str	r3, [r4, #0]
 801188c:	bd38      	pop	{r3, r4, r5, pc}
 801188e:	bf00      	nop
 8011890:	24000e10 	.word	0x24000e10

08011894 <_getpid_r>:
 8011894:	f7ef be52 	b.w	800153c <_getpid>

08011898 <_init>:
 8011898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801189a:	bf00      	nop
 801189c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801189e:	bc08      	pop	{r3}
 80118a0:	469e      	mov	lr, r3
 80118a2:	4770      	bx	lr

080118a4 <_fini>:
 80118a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118a6:	bf00      	nop
 80118a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118aa:	bc08      	pop	{r3}
 80118ac:	469e      	mov	lr, r3
 80118ae:	4770      	bx	lr
