
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e784  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002641c  0800ea38  0800ea38  0000fa38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08034e54  08034e54  00035e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08034e5c  08034e5c  00035e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08034e60  08034e60  00035e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000268  24000000  08034e64  00036000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016fc  24000268  080350cc  00036268  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001964  080350cc  00036964  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00036268  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001dfbe  00000000  00000000  00036296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d60  00000000  00000000  00054254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001328  00000000  00000000  00057fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eaf  00000000  00000000  000592e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000334bc  00000000  00000000  0005a18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e7ec  00000000  00000000  0008d64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d77f  00000000  00000000  000abe37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e95b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d90  00000000  00000000  001e95fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  001ef38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000268 	.word	0x24000268
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ea1c 	.word	0x0800ea1c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400026c 	.word	0x2400026c
 80002ec:	0800ea1c 	.word	0x0800ea1c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200b      	movs	r0, #11
 80006f6:	f001 fc06 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 fc1d 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	200c      	movs	r0, #12
 8000706:	f001 fbfe 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800070a:	200c      	movs	r0, #12
 800070c:	f001 fc15 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	200d      	movs	r0, #13
 8000716:	f001 fbf6 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800071a:	200d      	movs	r0, #13
 800071c:	f001 fc0d 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200e      	movs	r0, #14
 8000726:	f001 fbee 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800072a:	200e      	movs	r0, #14
 800072c:	f001 fc05 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2010      	movs	r0, #16
 8000736:	f001 fbe6 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800073a:	2010      	movs	r0, #16
 800073c:	f001 fbfd 	bl	8001f3a <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b84      	ldr	r3, [pc, #528]	@ (8000974 <MX_GPIO_Init+0x228>)
 8000764:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000768:	4a82      	ldr	r2, [pc, #520]	@ (8000974 <MX_GPIO_Init+0x228>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000772:	4b80      	ldr	r3, [pc, #512]	@ (8000974 <MX_GPIO_Init+0x228>)
 8000774:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000780:	4b7c      	ldr	r3, [pc, #496]	@ (8000974 <MX_GPIO_Init+0x228>)
 8000782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000786:	4a7b      	ldr	r2, [pc, #492]	@ (8000974 <MX_GPIO_Init+0x228>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000790:	4b78      	ldr	r3, [pc, #480]	@ (8000974 <MX_GPIO_Init+0x228>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b75      	ldr	r3, [pc, #468]	@ (8000974 <MX_GPIO_Init+0x228>)
 80007a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a4:	4a73      	ldr	r2, [pc, #460]	@ (8000974 <MX_GPIO_Init+0x228>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ae:	4b71      	ldr	r3, [pc, #452]	@ (8000974 <MX_GPIO_Init+0x228>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b6d      	ldr	r3, [pc, #436]	@ (8000974 <MX_GPIO_Init+0x228>)
 80007be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c2:	4a6c      	ldr	r2, [pc, #432]	@ (8000974 <MX_GPIO_Init+0x228>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007cc:	4b69      	ldr	r3, [pc, #420]	@ (8000974 <MX_GPIO_Init+0x228>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	4b66      	ldr	r3, [pc, #408]	@ (8000974 <MX_GPIO_Init+0x228>)
 80007dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e0:	4a64      	ldr	r2, [pc, #400]	@ (8000974 <MX_GPIO_Init+0x228>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ea:	4b62      	ldr	r3, [pc, #392]	@ (8000974 <MX_GPIO_Init+0x228>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000974 <MX_GPIO_Init+0x228>)
 80007fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007fe:	4a5d      	ldr	r2, [pc, #372]	@ (8000974 <MX_GPIO_Init+0x228>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000808:	4b5a      	ldr	r3, [pc, #360]	@ (8000974 <MX_GPIO_Init+0x228>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b57      	ldr	r3, [pc, #348]	@ (8000974 <MX_GPIO_Init+0x228>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081c:	4a55      	ldr	r2, [pc, #340]	@ (8000974 <MX_GPIO_Init+0x228>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000822:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000826:	4b53      	ldr	r3, [pc, #332]	@ (8000974 <MX_GPIO_Init+0x228>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_AD0_GPIO_Port, MPU6500_AD0_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2108      	movs	r1, #8
 8000838:	484f      	ldr	r0, [pc, #316]	@ (8000978 <MX_GPIO_Init+0x22c>)
 800083a:	f004 fcab 	bl	8005194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000844:	484d      	ldr	r0, [pc, #308]	@ (800097c <MX_GPIO_Init+0x230>)
 8000846:	f004 fca5 	bl	8005194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000850:	484b      	ldr	r0, [pc, #300]	@ (8000980 <MX_GPIO_Init+0x234>)
 8000852:	f004 fc9f 	bl	8005194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085c:	4849      	ldr	r0, [pc, #292]	@ (8000984 <MX_GPIO_Init+0x238>)
 800085e:	f004 fc99 	bl	8005194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000868:	4846      	ldr	r0, [pc, #280]	@ (8000984 <MX_GPIO_Init+0x238>)
 800086a:	f004 fc93 	bl	8005194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000874:	4844      	ldr	r0, [pc, #272]	@ (8000988 <MX_GPIO_Init+0x23c>)
 8000876:	f004 fc8d 	bl	8005194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	483f      	ldr	r0, [pc, #252]	@ (800097c <MX_GPIO_Init+0x230>)
 8000880:	f004 fc88 	bl	8005194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	483d      	ldr	r0, [pc, #244]	@ (8000980 <MX_GPIO_Init+0x234>)
 800088a:	f004 fc83 	bl	8005194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : InputButton_Pin */
  GPIO_InitStruct.Pin = InputButton_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000894:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(InputButton_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4839      	ldr	r0, [pc, #228]	@ (800098c <MX_GPIO_Init+0x240>)
 80008a6:	f004 fac5 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_AD0_Pin */
  GPIO_InitStruct.Pin = MPU6500_AD0_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MPU6500_AD0_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	482d      	ldr	r0, [pc, #180]	@ (8000978 <MX_GPIO_Init+0x22c>)
 80008c2:	f004 fab7 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4;
 80008c6:	f244 0311 	movw	r3, #16401	@ 0x4011
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4827      	ldr	r0, [pc, #156]	@ (800097c <MX_GPIO_Init+0x230>)
 80008e0:	f004 faa8 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|LD2_Pin;
 80008e4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4820      	ldr	r0, [pc, #128]	@ (8000980 <MX_GPIO_Init+0x234>)
 80008fe:	f004 fa99 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 8000902:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	2302      	movs	r3, #2
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	481a      	ldr	r0, [pc, #104]	@ (8000984 <MX_GPIO_Init+0x238>)
 800091c:	f004 fa8a 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 8000920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4812      	ldr	r0, [pc, #72]	@ (8000984 <MX_GPIO_Init+0x238>)
 800093a:	f004 fa7b 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 800093e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	480c      	ldr	r0, [pc, #48]	@ (8000988 <MX_GPIO_Init+0x23c>)
 8000958:	f004 fa6c 	bl	8004e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2028      	movs	r0, #40	@ 0x28
 8000962:	f001 fad0 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000966:	2028      	movs	r0, #40	@ 0x28
 8000968:	f001 fae7 	bl	8001f3a <HAL_NVIC_EnableIRQ>

}
 800096c:	bf00      	nop
 800096e:	3730      	adds	r7, #48	@ 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	58024400 	.word	0x58024400
 8000978:	58020000 	.word	0x58020000
 800097c:	58020400 	.word	0x58020400
 8000980:	58021000 	.word	0x58021000
 8000984:	58020c00 	.word	0x58020c00
 8000988:	58021800 	.word	0x58021800
 800098c:	58020800 	.word	0x58020800

08000990 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <MX_I2C2_Init+0x74>)
 8000996:	4a1c      	ldr	r2, [pc, #112]	@ (8000a08 <MX_I2C2_Init+0x78>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_I2C2_Init+0x74>)
 800099c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a0c <MX_I2C2_Init+0x7c>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009a0:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <MX_I2C2_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a6:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <MX_I2C2_Init+0x74>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <MX_I2C2_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_I2C2_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <MX_I2C2_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_I2C2_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <MX_I2C2_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009ca:	480e      	ldr	r0, [pc, #56]	@ (8000a04 <MX_I2C2_Init+0x74>)
 80009cc:	f004 fc16 	bl	80051fc <HAL_I2C_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009d6:	f000 fb00 	bl	8000fda <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009da:	2100      	movs	r1, #0
 80009dc:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <MX_I2C2_Init+0x74>)
 80009de:	f004 fca9 	bl	8005334 <HAL_I2CEx_ConfigAnalogFilter>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009e8:	f000 faf7 	bl	8000fda <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <MX_I2C2_Init+0x74>)
 80009f0:	f004 fceb 	bl	80053ca <HAL_I2CEx_ConfigDigitalFilter>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 faee 	bl	8000fda <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	24000284 	.word	0x24000284
 8000a08:	40005800 	.word	0x40005800
 8000a0c:	20b0ccff 	.word	0x20b0ccff

08000a10 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a16:	4a1c      	ldr	r2, [pc, #112]	@ (8000a88 <MX_I2C4_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a8c <MX_I2C4_Init+0x7c>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a20:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a4a:	480e      	ldr	r0, [pc, #56]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a4c:	f004 fbd6 	bl	80051fc <HAL_I2C_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a56:	f000 fac0 	bl	8000fda <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4809      	ldr	r0, [pc, #36]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a5e:	f004 fc69 	bl	8005334 <HAL_I2CEx_ConfigAnalogFilter>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a68:	f000 fab7 	bl	8000fda <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_I2C4_Init+0x74>)
 8000a70:	f004 fcab 	bl	80053ca <HAL_I2CEx_ConfigDigitalFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 faae 	bl	8000fda <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	240002d8 	.word	0x240002d8
 8000a88:	58001c00 	.word	0x58001c00
 8000a8c:	20b0ccff 	.word	0x20b0ccff

08000a90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b0bc      	sub	sp, #240	@ 0xf0
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	22c0      	movs	r2, #192	@ 0xc0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f00b ff56 	bl	800c962 <memset>
  if(i2cHandle->Instance==I2C2)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a4d      	ldr	r2, [pc, #308]	@ (8000bf0 <HAL_I2C_MspInit+0x160>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d147      	bne.n	8000b50 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ac0:	f04f 0208 	mov.w	r2, #8
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f005 fcdc 	bl	8006494 <HAL_RCCEx_PeriphCLKConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ae2:	f000 fa7a 	bl	8000fda <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b43      	ldr	r3, [pc, #268]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000ae8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aec:	4a41      	ldr	r2, [pc, #260]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000af6:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000af8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0c:	2312      	movs	r3, #18
 8000b0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4833      	ldr	r0, [pc, #204]	@ (8000bf8 <HAL_I2C_MspInit+0x168>)
 8000b2c:	f004 f982 	bl	8004e34 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b30:	4b30      	ldr	r3, [pc, #192]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000b32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000b36:	4a2f      	ldr	r2, [pc, #188]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000b38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b3c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000b40:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000b42:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000b4e:	e04b      	b.n	8000be8 <HAL_I2C_MspInit+0x158>
  else if(i2cHandle->Instance==I2C4)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a29      	ldr	r2, [pc, #164]	@ (8000bfc <HAL_I2C_MspInit+0x16c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d146      	bne.n	8000be8 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000b5a:	f04f 0210 	mov.w	r2, #16
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	4618      	mov	r0, r3
 8000b72:	f005 fc8f 	bl	8006494 <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000b7c:	f000 fa2d 	bl	8000fda <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b80:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b86:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000b92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8000b9e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba6:	2312      	movs	r3, #18
 8000ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480e      	ldr	r0, [pc, #56]	@ (8000c00 <HAL_I2C_MspInit+0x170>)
 8000bc6:	f004 f935 	bl	8004e34 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000bcc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bd0:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_I2C_MspInit+0x164>)
 8000bdc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
}
 8000be8:	bf00      	nop
 8000bea:	37f0      	adds	r7, #240	@ 0xf0
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40005800 	.word	0x40005800
 8000bf4:	58024400 	.word	0x58024400
 8000bf8:	58020400 	.word	0x58020400
 8000bfc:	58001c00 	.word	0x58001c00
 8000c00:	58020c00 	.word	0x58020c00

08000c04 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000c0c:	1d39      	adds	r1, r7, #4
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	2201      	movs	r2, #1
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <__io_putchar+0x20>)
 8000c16:	f008 fa22 	bl	800905e <HAL_UART_Transmit>
	return chr;
 8000c1a:	687b      	ldr	r3, [r7, #4]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2400065c 	.word	0x2400065c

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c2c:	f000 f9a9 	bl	8000f82 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 ffd8 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f848 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f7ff fd88 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3c:	f7ff fd46 	bl	80006cc <MX_DMA_Init>
  MX_UART4_Init();
 8000c40:	f000 fcdc 	bl	80015fc <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000c44:	f000 fd72 	bl	800172c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000c48:	f7ff fea2 	bl	8000990 <MX_I2C2_Init>
  MX_UART5_Init();
 8000c4c:	f000 fd22 	bl	8001694 <MX_UART5_Init>
  MX_SPI1_Init();
 8000c50:	f000 f9ca 	bl	8000fe8 <MX_SPI1_Init>
  MX_I2C4_Init();
 8000c54:	f7ff fedc 	bl	8000a10 <MX_I2C4_Init>
    printf("mpu6500: WHO_AM_I = 0x%02X\r\n", id);

#endif

#ifdef SCREEN_TEST
	SmartWatchScreen_State = SCREEN_ENVIRONMENTAL;
 8000c58:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <main+0x98>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
	Display_Init(SmartWatchScreen_State);
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <main+0x98>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f00a fb58 	bl	800b318 <Display_Init>

//	    for (int i = 0; i < 100; ++i) {
//	    	SmartWatchData_handle.pressure = 100.0f + 10.0f * (i % 5); // 100, 110, 120, 130, 140, repeat
//	    	HAL_Delay(80);
//	    }
		SmartWatchData_handle.pressure += 1;
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <main+0x9c>)
 8000c6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c76:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <main+0x9c>)
 8000c78:	edc3 7a01 	vstr	s15, [r3, #4]
		SmartWatchData_handle.heart_rate += 1;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <main+0x9c>)
 8000c7e:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	@ 0x104
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	3301      	adds	r3, #1
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <main+0x9c>)
 8000c8c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
		SmartWatchData_handle.spo2 += 1;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <main+0x9c>)
 8000c92:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 8000c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <main+0x9c>)
 8000ca0:	edc3 7a42 	vstr	s15, [r3, #264]	@ 0x108
		SmartWatchScreen_State = SCREEN_HEART_RATE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <main+0x98>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	701a      	strb	r2, [r3, #0]
	    Display_Update(SmartWatchScreen_State, &SmartWatchData_handle);
 8000caa:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <main+0x98>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4905      	ldr	r1, [pc, #20]	@ (8000cc4 <main+0x9c>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f00a fd53 	bl	800b75c <Display_Update>
	    HAL_Delay(20);
 8000cb6:	2014      	movs	r0, #20
 8000cb8:	f001 f826 	bl	8001d08 <HAL_Delay>
		SmartWatchData_handle.pressure += 1;
 8000cbc:	bf00      	nop
 8000cbe:	e7d3      	b.n	8000c68 <main+0x40>
 8000cc0:	2400042d 	.word	0x2400042d
 8000cc4:	240009dc 	.word	0x240009dc

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09c      	sub	sp, #112	@ 0x70
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd2:	224c      	movs	r2, #76	@ 0x4c
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f00b fe43 	bl	800c962 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2220      	movs	r2, #32
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f00b fe3d 	bl	800c962 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8000da8 <SystemClock_Config+0xe0>)
 8000cea:	f04f 32ff 	mov.w	r2, #4294967295
 8000cee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cf2:	2004      	movs	r0, #4
 8000cf4:	f004 fbb6 	bl	8005464 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000dac <SystemClock_Config+0xe4>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a2a      	ldr	r2, [pc, #168]	@ (8000dac <SystemClock_Config+0xe4>)
 8000d02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <SystemClock_Config+0xe4>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d14:	bf00      	nop
 8000d16:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <SystemClock_Config+0xe4>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d22:	d1f8      	bne.n	8000d16 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d32:	2302      	movs	r3, #2
 8000d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000d3a:	2346      	movs	r3, #70	@ 0x46
 8000d3c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d42:	2304      	movs	r3, #4
 8000d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 fbdc 	bl	8005518 <HAL_RCC_OscConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d66:	f000 f938 	bl	8000fda <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	233f      	movs	r3, #63	@ 0x3f
 8000d6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d7a:	2340      	movs	r3, #64	@ 0x40
 8000d7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d7e:	2340      	movs	r3, #64	@ 0x40
 8000d80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d88:	2340      	movs	r3, #64	@ 0x40
 8000d8a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2106      	movs	r1, #6
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 fff3 	bl	8005d7c <HAL_RCC_ClockConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000d9c:	f000 f91d 	bl	8000fda <Error_Handler>
  }
}
 8000da0:	bf00      	nop
 8000da2:	3770      	adds	r7, #112	@ 0x70
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	58024400 	.word	0x58024400
 8000dac:	58024800 	.word	0x58024800

08000db0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a56      	ldr	r2, [pc, #344]	@ (8000f1c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f040 80a5 	bne.w	8000f12 <HAL_UARTEx_RxEventCallback+0x162>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4954      	ldr	r1, [pc, #336]	@ (8000f20 <HAL_UARTEx_RxEventCallback+0x170>)
 8000dce:	4855      	ldr	r0, [pc, #340]	@ (8000f24 <HAL_UARTEx_RxEventCallback+0x174>)
 8000dd0:	f00b fe47 	bl	800ca62 <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	4a53      	ldr	r2, [pc, #332]	@ (8000f24 <HAL_UARTEx_RxEventCallback+0x174>)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8000ddc:	4b52      	ldr	r3, [pc, #328]	@ (8000f28 <HAL_UARTEx_RxEventCallback+0x178>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f008 f9ca 	bl	800917c <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8000de8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dec:	2100      	movs	r1, #0
 8000dee:	484c      	ldr	r0, [pc, #304]	@ (8000f20 <HAL_UARTEx_RxEventCallback+0x170>)
 8000df0:	f00b fdb7 	bl	800c962 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000df8:	4949      	ldr	r1, [pc, #292]	@ (8000f20 <HAL_UARTEx_RxEventCallback+0x170>)
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f00a f9e9 	bl	800b1d2 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a48      	ldr	r2, [pc, #288]	@ (8000f2c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d068      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a46      	ldr	r2, [pc, #280]	@ (8000f30 <HAL_UARTEx_RxEventCallback+0x180>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d061      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a43      	ldr	r2, [pc, #268]	@ (8000f34 <HAL_UARTEx_RxEventCallback+0x184>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d05a      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a41      	ldr	r2, [pc, #260]	@ (8000f38 <HAL_UARTEx_RxEventCallback+0x188>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d053      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a3e      	ldr	r2, [pc, #248]	@ (8000f3c <HAL_UARTEx_RxEventCallback+0x18c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d04c      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f40 <HAL_UARTEx_RxEventCallback+0x190>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d045      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a39      	ldr	r2, [pc, #228]	@ (8000f44 <HAL_UARTEx_RxEventCallback+0x194>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d03e      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a37      	ldr	r2, [pc, #220]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x198>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d037      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a34      	ldr	r2, [pc, #208]	@ (8000f4c <HAL_UARTEx_RxEventCallback+0x19c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d030      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a32      	ldr	r2, [pc, #200]	@ (8000f50 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d029      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a2f      	ldr	r2, [pc, #188]	@ (8000f54 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d022      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f58 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d01b      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f5c <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d014      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a28      	ldr	r2, [pc, #160]	@ (8000f60 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d00d      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a25      	ldr	r2, [pc, #148]	@ (8000f64 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d006      	beq.n	8000ee0 <HAL_UARTEx_RxEventCallback+0x130>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a23      	ldr	r2, [pc, #140]	@ (8000f68 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d10c      	bne.n	8000efa <HAL_UARTEx_RxEventCallback+0x14a>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0208 	bic.w	r2, r2, #8
 8000ef6:	601a      	str	r2, [r3, #0]
    }
}
 8000ef8:	e00b      	b.n	8000f12 <HAL_UARTEx_RxEventCallback+0x162>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0204 	bic.w	r2, r2, #4
 8000f10:	601a      	str	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004c00 	.word	0x40004c00
 8000f20:	240008d4 	.word	0x240008d4
 8000f24:	2400032c 	.word	0x2400032c
 8000f28:	2400042c 	.word	0x2400042c
 8000f2c:	40020010 	.word	0x40020010
 8000f30:	40020028 	.word	0x40020028
 8000f34:	40020040 	.word	0x40020040
 8000f38:	40020058 	.word	0x40020058
 8000f3c:	40020070 	.word	0x40020070
 8000f40:	40020088 	.word	0x40020088
 8000f44:	400200a0 	.word	0x400200a0
 8000f48:	400200b8 	.word	0x400200b8
 8000f4c:	40020410 	.word	0x40020410
 8000f50:	40020428 	.word	0x40020428
 8000f54:	40020440 	.word	0x40020440
 8000f58:	40020458 	.word	0x40020458
 8000f5c:	40020470 	.word	0x40020470
 8000f60:	40020488 	.word	0x40020488
 8000f64:	400204a0 	.word	0x400204a0
 8000f68:	400204b8 	.word	0x400204b8

08000f6c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == InputButton_Pin)
    {

    }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f94:	f000 ffec 	bl	8001f70 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fa4:	231f      	movs	r3, #31
 8000fa6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fa8:	2387      	movs	r3, #135	@ 0x87
 8000faa:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 f80a 	bl	8001fe0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fcc:	2004      	movs	r0, #4
 8000fce:	f000 ffe7 	bl	8001fa0 <HAL_MPU_Enable>

}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fde:	b672      	cpsid	i
}
 8000fe0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fe2:	bf00      	nop
 8000fe4:	e7fd      	b.n	8000fe2 <Error_Handler+0x8>
	...

08000fe8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fec:	4b29      	ldr	r3, [pc, #164]	@ (8001094 <MX_SPI1_Init+0xac>)
 8000fee:	4a2a      	ldr	r2, [pc, #168]	@ (8001098 <MX_SPI1_Init+0xb0>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff2:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <MX_SPI1_Init+0xac>)
 8000ff4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ff8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <MX_SPI1_Init+0xac>)
 8000ffc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001000:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001002:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001004:	2207      	movs	r2, #7
 8001006:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <MX_SPI1_Init+0xac>)
 800100a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800100e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001010:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001012:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001016:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001018:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <MX_SPI1_Init+0xac>)
 800101a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800101e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001022:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001026:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001028:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <MX_SPI1_Init+0xac>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001030:	2200      	movs	r2, #0
 8001032:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001034:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001036:	2200      	movs	r2, #0
 8001038:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800103a:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <MX_SPI1_Init+0xac>)
 800103c:	2200      	movs	r2, #0
 800103e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001040:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001042:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001046:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <MX_SPI1_Init+0xac>)
 800104a:	2200      	movs	r2, #0
 800104c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001050:	2200      	movs	r2, #0
 8001052:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001056:	2200      	movs	r2, #0
 8001058:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_SPI1_Init+0xac>)
 800105c:	2200      	movs	r2, #0
 800105e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001062:	2200      	movs	r2, #0
 8001064:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001068:	2200      	movs	r2, #0
 800106a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <MX_SPI1_Init+0xac>)
 800106e:	2200      	movs	r2, #0
 8001070:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001074:	2200      	movs	r2, #0
 8001076:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_SPI1_Init+0xac>)
 800107a:	2200      	movs	r2, #0
 800107c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <MX_SPI1_Init+0xac>)
 8001080:	f006 ffe8 	bl	8008054 <HAL_SPI_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 800108a:	f7ff ffa6 	bl	8000fda <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	24000430 	.word	0x24000430
 8001098:	40013000 	.word	0x40013000

0800109c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0ba      	sub	sp, #232	@ 0xe8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	22c0      	movs	r2, #192	@ 0xc0
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f00b fc50 	bl	800c962 <memset>
  if(spiHandle->Instance==SPI1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a40      	ldr	r2, [pc, #256]	@ (80011c8 <HAL_SPI_MspInit+0x12c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d179      	bne.n	80011c0 <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80010d8:	2300      	movs	r3, #0
 80010da:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 f9d7 	bl	8006494 <HAL_RCCEx_PeriphCLKConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80010ec:	f7ff ff75 	bl	8000fda <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f0:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <HAL_SPI_MspInit+0x130>)
 80010f2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80010f6:	4a35      	ldr	r2, [pc, #212]	@ (80011cc <HAL_SPI_MspInit+0x130>)
 80010f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010fc:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001100:	4b32      	ldr	r3, [pc, #200]	@ (80011cc <HAL_SPI_MspInit+0x130>)
 8001102:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <HAL_SPI_MspInit+0x130>)
 8001110:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001114:	4a2d      	ldr	r2, [pc, #180]	@ (80011cc <HAL_SPI_MspInit+0x130>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800111e:	4b2b      	ldr	r3, [pc, #172]	@ (80011cc <HAL_SPI_MspInit+0x130>)
 8001120:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800112c:	23a0      	movs	r3, #160	@ 0xa0
 800112e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001144:	2305      	movs	r3, #5
 8001146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800114e:	4619      	mov	r1, r3
 8001150:	481f      	ldr	r0, [pc, #124]	@ (80011d0 <HAL_SPI_MspInit+0x134>)
 8001152:	f003 fe6f 	bl	8004e34 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8001156:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 8001158:	4a1f      	ldr	r2, [pc, #124]	@ (80011d8 <HAL_SPI_MspInit+0x13c>)
 800115a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 800115e:	2226      	movs	r2, #38	@ 0x26
 8001160:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001162:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 8001164:	2240      	movs	r2, #64	@ 0x40
 8001166:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 8001170:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001174:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 8001184:	2200      	movs	r2, #0
 8001186:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001194:	480f      	ldr	r0, [pc, #60]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 8001196:	f000 ff63 	bl	8002060 <HAL_DMA_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80011a0:	f7ff ff1b 	bl	8000fda <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a0b      	ldr	r2, [pc, #44]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 80011a8:	679a      	str	r2, [r3, #120]	@ 0x78
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <HAL_SPI_MspInit+0x138>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2023      	movs	r0, #35	@ 0x23
 80011b6:	f000 fea6 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011ba:	2023      	movs	r0, #35	@ 0x23
 80011bc:	f000 febd 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	37e8      	adds	r7, #232	@ 0xe8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40013000 	.word	0x40013000
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020000 	.word	0x58020000
 80011d4:	240004b8 	.word	0x240004b8
 80011d8:	40020088 	.word	0x40020088

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_MspInit+0x30>)
 80011e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80011e8:	4a08      	ldr	r2, [pc, #32]	@ (800120c <HAL_MspInit+0x30>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_MspInit+0x30>)
 80011f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	58024400 	.word	0x58024400

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <NMI_Handler+0x4>

08001218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <MemManage_Handler+0x4>

08001228 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <UsageFault_Handler+0x4>

08001238 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001266:	f000 fd2f 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <DMA1_Stream0_IRQHandler+0x10>)
 8001276:	f002 fa4f 	bl	8003718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	240007e0 	.word	0x240007e0

08001284 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <DMA1_Stream1_IRQHandler+0x10>)
 800128a:	f002 fa45 	bl	8003718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	24000858 	.word	0x24000858

08001298 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <DMA1_Stream2_IRQHandler+0x10>)
 800129e:	f002 fa3b 	bl	8003718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	240006f0 	.word	0x240006f0

080012ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <DMA1_Stream3_IRQHandler+0x10>)
 80012b2:	f002 fa31 	bl	8003718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	24000768 	.word	0x24000768

080012c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <DMA1_Stream5_IRQHandler+0x10>)
 80012c6:	f002 fa27 	bl	8003718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	240004b8 	.word	0x240004b8

080012d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <SPI1_IRQHandler+0x10>)
 80012da:	f007 fb0f 	bl	80088fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	24000430 	.word	0x24000430

080012e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(InputButton_Pin);
 80012ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012f0:	f003 ff69 	bl	80051c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <UART4_IRQHandler+0x10>)
 80012fe:	f007 fff3 	bl	80092e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	24000534 	.word	0x24000534

0800130c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <UART5_IRQHandler+0x10>)
 8001312:	f007 ffe9 	bl	80092e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	240005c8 	.word	0x240005c8

08001320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_kill>:

int _kill(int pid, int sig)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800133a:	f00b fb65 	bl	800ca08 <__errno>
 800133e:	4603      	mov	r3, r0
 8001340:	2216      	movs	r2, #22
 8001342:	601a      	str	r2, [r3, #0]
  return -1;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_exit>:

void _exit (int status)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ffe7 	bl	8001330 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001362:	bf00      	nop
 8001364:	e7fd      	b.n	8001362 <_exit+0x12>

08001366 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e00a      	b.n	800138e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001378:	f3af 8000 	nop.w
 800137c:	4601      	mov	r1, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	60ba      	str	r2, [r7, #8]
 8001384:	b2ca      	uxtb	r2, r1
 8001386:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbf0      	blt.n	8001378 <_read+0x12>
  }

  return len;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e009      	b.n	80013c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc22 	bl	8000c04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbf1      	blt.n	80013b2 <_write+0x12>
  }
  return len;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_close>:

int _close(int file)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001400:	605a      	str	r2, [r3, #4]
  return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_isatty>:

int _isatty(int file)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001418:	2301      	movs	r3, #1
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001426:	b480      	push	{r7}
 8001428:	b085      	sub	sp, #20
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	@ (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f00b faca 	bl	800ca08 <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	24100000 	.word	0x24100000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	24000530 	.word	0x24000530
 80014a8:	24001968 	.word	0x24001968

080014ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014b0:	4b3e      	ldr	r3, [pc, #248]	@ (80015ac <SystemInit+0x100>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b6:	4a3d      	ldr	r2, [pc, #244]	@ (80015ac <SystemInit+0x100>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014c0:	4b3b      	ldr	r3, [pc, #236]	@ (80015b0 <SystemInit+0x104>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d807      	bhi.n	80014dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014cc:	4b38      	ldr	r3, [pc, #224]	@ (80015b0 <SystemInit+0x104>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 030f 	bic.w	r3, r3, #15
 80014d4:	4a36      	ldr	r2, [pc, #216]	@ (80015b0 <SystemInit+0x104>)
 80014d6:	f043 0303 	orr.w	r3, r3, #3
 80014da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014dc:	4b35      	ldr	r3, [pc, #212]	@ (80015b4 <SystemInit+0x108>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a34      	ldr	r2, [pc, #208]	@ (80015b4 <SystemInit+0x108>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014e8:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <SystemInit+0x108>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ee:	4b31      	ldr	r3, [pc, #196]	@ (80015b4 <SystemInit+0x108>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4930      	ldr	r1, [pc, #192]	@ (80015b4 <SystemInit+0x108>)
 80014f4:	4b30      	ldr	r3, [pc, #192]	@ (80015b8 <SystemInit+0x10c>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014fa:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <SystemInit+0x104>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001506:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <SystemInit+0x104>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 030f 	bic.w	r3, r3, #15
 800150e:	4a28      	ldr	r2, [pc, #160]	@ (80015b0 <SystemInit+0x104>)
 8001510:	f043 0303 	orr.w	r3, r3, #3
 8001514:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001516:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <SystemInit+0x108>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <SystemInit+0x108>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001522:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <SystemInit+0x108>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001528:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <SystemInit+0x108>)
 800152a:	4a24      	ldr	r2, [pc, #144]	@ (80015bc <SystemInit+0x110>)
 800152c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <SystemInit+0x108>)
 8001530:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <SystemInit+0x114>)
 8001532:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <SystemInit+0x108>)
 8001536:	4a23      	ldr	r2, [pc, #140]	@ (80015c4 <SystemInit+0x118>)
 8001538:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800153a:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <SystemInit+0x108>)
 800153c:	2200      	movs	r2, #0
 800153e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <SystemInit+0x108>)
 8001542:	4a20      	ldr	r2, [pc, #128]	@ (80015c4 <SystemInit+0x118>)
 8001544:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <SystemInit+0x108>)
 8001548:	2200      	movs	r2, #0
 800154a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <SystemInit+0x108>)
 800154e:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <SystemInit+0x118>)
 8001550:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <SystemInit+0x108>)
 8001554:	2200      	movs	r2, #0
 8001556:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001558:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <SystemInit+0x108>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <SystemInit+0x108>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001562:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <SystemInit+0x108>)
 8001566:	2200      	movs	r2, #0
 8001568:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <SystemInit+0x108>)
 800156c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d113      	bne.n	80015a0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <SystemInit+0x108>)
 800157a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800157e:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <SystemInit+0x108>)
 8001580:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001584:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <SystemInit+0x11c>)
 800158a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800158e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <SystemInit+0x108>)
 8001592:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001596:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <SystemInit+0x108>)
 8001598:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800159c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	52002000 	.word	0x52002000
 80015b4:	58024400 	.word	0x58024400
 80015b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80015bc:	02020200 	.word	0x02020200
 80015c0:	01ff0000 	.word	0x01ff0000
 80015c4:	01010280 	.word	0x01010280
 80015c8:	52004000 	.word	0x52004000

080015cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <ExitRun0Mode+0x2c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4a08      	ldr	r2, [pc, #32]	@ (80015f8 <ExitRun0Mode+0x2c>)
 80015d6:	f023 0302 	bic.w	r3, r3, #2
 80015da:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80015dc:	bf00      	nop
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <ExitRun0Mode+0x2c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f9      	beq.n	80015de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	58024800 	.word	0x58024800

080015fc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001600:	4b22      	ldr	r3, [pc, #136]	@ (800168c <MX_UART4_Init+0x90>)
 8001602:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <MX_UART4_Init+0x94>)
 8001604:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <MX_UART4_Init+0x90>)
 8001608:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800160c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_UART4_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <MX_UART4_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_UART4_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_UART4_Init+0x90>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_UART4_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <MX_UART4_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001632:	4b16      	ldr	r3, [pc, #88]	@ (800168c <MX_UART4_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_UART4_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <MX_UART4_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001644:	4811      	ldr	r0, [pc, #68]	@ (800168c <MX_UART4_Init+0x90>)
 8001646:	f007 fcba 	bl	8008fbe <HAL_UART_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001650:	f7ff fcc3 	bl	8000fda <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_UART4_Init+0x90>)
 8001658:	f009 fd3f 	bl	800b0da <HAL_UARTEx_SetTxFifoThreshold>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001662:	f7ff fcba 	bl	8000fda <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4808      	ldr	r0, [pc, #32]	@ (800168c <MX_UART4_Init+0x90>)
 800166a:	f009 fd74 	bl	800b156 <HAL_UARTEx_SetRxFifoThreshold>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001674:	f7ff fcb1 	bl	8000fda <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	@ (800168c <MX_UART4_Init+0x90>)
 800167a:	f009 fcf5 	bl	800b068 <HAL_UARTEx_DisableFifoMode>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001684:	f7ff fca9 	bl	8000fda <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	24000534 	.word	0x24000534
 8001690:	40004c00 	.word	0x40004c00

08001694 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <MX_UART5_Init+0x90>)
 800169a:	4a23      	ldr	r2, [pc, #140]	@ (8001728 <MX_UART5_Init+0x94>)
 800169c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <MX_UART5_Init+0x90>)
 80016a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016a4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <MX_UART5_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <MX_UART5_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <MX_UART5_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <MX_UART5_Init+0x90>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <MX_UART5_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <MX_UART5_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <MX_UART5_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_UART5_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <MX_UART5_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016dc:	4811      	ldr	r0, [pc, #68]	@ (8001724 <MX_UART5_Init+0x90>)
 80016de:	f007 fc6e 	bl	8008fbe <HAL_UART_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80016e8:	f7ff fc77 	bl	8000fda <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	480d      	ldr	r0, [pc, #52]	@ (8001724 <MX_UART5_Init+0x90>)
 80016f0:	f009 fcf3 	bl	800b0da <HAL_UARTEx_SetTxFifoThreshold>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80016fa:	f7ff fc6e 	bl	8000fda <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fe:	2100      	movs	r1, #0
 8001700:	4808      	ldr	r0, [pc, #32]	@ (8001724 <MX_UART5_Init+0x90>)
 8001702:	f009 fd28 	bl	800b156 <HAL_UARTEx_SetRxFifoThreshold>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800170c:	f7ff fc65 	bl	8000fda <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	@ (8001724 <MX_UART5_Init+0x90>)
 8001712:	f009 fca9 	bl	800b068 <HAL_UARTEx_DisableFifoMode>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800171c:	f7ff fc5d 	bl	8000fda <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	240005c8 	.word	0x240005c8
 8001728:	40005000 	.word	0x40005000

0800172c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001730:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 8001732:	4a23      	ldr	r2, [pc, #140]	@ (80017c0 <MX_USART3_UART_Init+0x94>)
 8001734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001736:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b1d      	ldr	r3, [pc, #116]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174a:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176e:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001774:	4811      	ldr	r0, [pc, #68]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 8001776:	f007 fc22 	bl	8008fbe <HAL_UART_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001780:	f7ff fc2b 	bl	8000fda <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	480d      	ldr	r0, [pc, #52]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 8001788:	f009 fca7 	bl	800b0da <HAL_UARTEx_SetTxFifoThreshold>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001792:	f7ff fc22 	bl	8000fda <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4808      	ldr	r0, [pc, #32]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 800179a:	f009 fcdc 	bl	800b156 <HAL_UARTEx_SetRxFifoThreshold>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f7ff fc19 	bl	8000fda <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	@ (80017bc <MX_USART3_UART_Init+0x90>)
 80017aa:	f009 fc5d 	bl	800b068 <HAL_UARTEx_DisableFifoMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f7ff fc11 	bl	8000fda <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2400065c 	.word	0x2400065c
 80017c0:	40004800 	.word	0x40004800

080017c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0be      	sub	sp, #248	@ 0xf8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017dc:	f107 0320 	add.w	r3, r7, #32
 80017e0:	22c0      	movs	r2, #192	@ 0xc0
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00b f8bc 	bl	800c962 <memset>
  if(uartHandle->Instance==UART4)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4ab0      	ldr	r2, [pc, #704]	@ (8001ab0 <HAL_UART_MspInit+0x2ec>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	f040 80ac 	bne.w	800194e <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80017f6:	f04f 0202 	mov.w	r2, #2
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fe41 	bl	8006494 <HAL_RCCEx_PeriphCLKConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001818:	f7ff fbdf 	bl	8000fda <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800181c:	4ba5      	ldr	r3, [pc, #660]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 800181e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001822:	4aa4      	ldr	r2, [pc, #656]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 8001824:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001828:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800182c:	4ba1      	ldr	r3, [pc, #644]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 800182e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001832:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b9e      	ldr	r3, [pc, #632]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 800183c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001840:	4a9c      	ldr	r2, [pc, #624]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800184a:	4b9a      	ldr	r3, [pc, #616]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 800184c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001858:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800185c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001872:	2308      	movs	r3, #8
 8001874:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800187c:	4619      	mov	r1, r3
 800187e:	488e      	ldr	r0, [pc, #568]	@ (8001ab8 <HAL_UART_MspInit+0x2f4>)
 8001880:	f003 fad8 	bl	8004e34 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001884:	4b8d      	ldr	r3, [pc, #564]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 8001886:	4a8e      	ldr	r2, [pc, #568]	@ (8001ac0 <HAL_UART_MspInit+0x2fc>)
 8001888:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800188a:	4b8c      	ldr	r3, [pc, #560]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 800188c:	223f      	movs	r2, #63	@ 0x3f
 800188e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001890:	4b8a      	ldr	r3, [pc, #552]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001896:	4b89      	ldr	r3, [pc, #548]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800189c:	4b87      	ldr	r3, [pc, #540]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 800189e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018a2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a4:	4b85      	ldr	r3, [pc, #532]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018aa:	4b84      	ldr	r3, [pc, #528]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80018b0:	4b82      	ldr	r3, [pc, #520]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 80018b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018b6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018b8:	4b80      	ldr	r3, [pc, #512]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018be:	4b7f      	ldr	r3, [pc, #508]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80018c4:	487d      	ldr	r0, [pc, #500]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 80018c6:	f000 fbcb 	bl	8002060 <HAL_DMA_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80018d0:	f7ff fb83 	bl	8000fda <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a79      	ldr	r2, [pc, #484]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 80018d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80018dc:	4a77      	ldr	r2, [pc, #476]	@ (8001abc <HAL_UART_MspInit+0x2f8>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 80018e2:	4b78      	ldr	r3, [pc, #480]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 80018e4:	4a78      	ldr	r2, [pc, #480]	@ (8001ac8 <HAL_UART_MspInit+0x304>)
 80018e6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80018e8:	4b76      	ldr	r3, [pc, #472]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 80018ea:	2240      	movs	r2, #64	@ 0x40
 80018ec:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ee:	4b75      	ldr	r3, [pc, #468]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 80018f0:	2240      	movs	r2, #64	@ 0x40
 80018f2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f4:	4b73      	ldr	r3, [pc, #460]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018fa:	4b72      	ldr	r3, [pc, #456]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 80018fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001900:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001902:	4b70      	ldr	r3, [pc, #448]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001908:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800190e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001914:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800191a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001920:	4868      	ldr	r0, [pc, #416]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 8001922:	f000 fb9d 	bl	8002060 <HAL_DMA_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 800192c:	f7ff fb55 	bl	8000fda <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a64      	ldr	r2, [pc, #400]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 8001934:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001936:	4a63      	ldr	r2, [pc, #396]	@ (8001ac4 <HAL_UART_MspInit+0x300>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	2034      	movs	r0, #52	@ 0x34
 8001942:	f000 fae0 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001946:	2034      	movs	r0, #52	@ 0x34
 8001948:	f000 faf7 	bl	8001f3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800194c:	e114      	b.n	8001b78 <HAL_UART_MspInit+0x3b4>
  else if(uartHandle->Instance==UART5)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a5e      	ldr	r2, [pc, #376]	@ (8001acc <HAL_UART_MspInit+0x308>)
 8001954:	4293      	cmp	r3, r2
 8001956:	f040 80c3 	bne.w	8001ae0 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800195a:	f04f 0202 	mov.w	r2, #2
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4618      	mov	r0, r3
 8001972:	f004 fd8f 	bl	8006494 <HAL_RCCEx_PeriphCLKConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 800197c:	f7ff fb2d 	bl	8000fda <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001980:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 8001982:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001986:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 8001988:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800198c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001990:	4b48      	ldr	r3, [pc, #288]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 8001992:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b45      	ldr	r3, [pc, #276]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 80019a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019a4:	4a43      	ldr	r2, [pc, #268]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019ae:	4b41      	ldr	r3, [pc, #260]	@ (8001ab4 <HAL_UART_MspInit+0x2f0>)
 80019b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019bc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80019d6:	230e      	movs	r3, #14
 80019d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019e0:	4619      	mov	r1, r3
 80019e2:	4835      	ldr	r0, [pc, #212]	@ (8001ab8 <HAL_UART_MspInit+0x2f4>)
 80019e4:	f003 fa26 	bl	8004e34 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80019e8:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 80019ea:	4a3a      	ldr	r2, [pc, #232]	@ (8001ad4 <HAL_UART_MspInit+0x310>)
 80019ec:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80019ee:	4b38      	ldr	r3, [pc, #224]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 80019f0:	2241      	movs	r2, #65	@ 0x41
 80019f2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f4:	4b36      	ldr	r3, [pc, #216]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fa:	4b35      	ldr	r3, [pc, #212]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a00:	4b33      	ldr	r3, [pc, #204]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 8001a02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a06:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a08:	4b31      	ldr	r3, [pc, #196]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0e:	4b30      	ldr	r3, [pc, #192]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001a14:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a20:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001a26:	482a      	ldr	r0, [pc, #168]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 8001a28:	f000 fb1a 	bl	8002060 <HAL_DMA_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001a32:	f7ff fad2 	bl	8000fda <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a25      	ldr	r2, [pc, #148]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 8001a3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001a3e:	4a24      	ldr	r2, [pc, #144]	@ (8001ad0 <HAL_UART_MspInit+0x30c>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8001a44:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a46:	4a25      	ldr	r2, [pc, #148]	@ (8001adc <HAL_UART_MspInit+0x318>)
 8001a48:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a4c:	2242      	movs	r2, #66	@ 0x42
 8001a4e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a50:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a52:	2240      	movs	r2, #64	@ 0x40
 8001a54:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a56:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a62:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a64:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001a82:	4815      	ldr	r0, [pc, #84]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a84:	f000 faec 	bl	8002060 <HAL_DMA_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8001a8e:	f7ff faa4 	bl	8000fda <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a10      	ldr	r2, [pc, #64]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a96:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001a98:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad8 <HAL_UART_MspInit+0x314>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2035      	movs	r0, #53	@ 0x35
 8001aa4:	f000 fa2f 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001aa8:	2035      	movs	r0, #53	@ 0x35
 8001aaa:	f000 fa46 	bl	8001f3a <HAL_NVIC_EnableIRQ>
}
 8001aae:	e063      	b.n	8001b78 <HAL_UART_MspInit+0x3b4>
 8001ab0:	40004c00 	.word	0x40004c00
 8001ab4:	58024400 	.word	0x58024400
 8001ab8:	58020400 	.word	0x58020400
 8001abc:	240006f0 	.word	0x240006f0
 8001ac0:	40020040 	.word	0x40020040
 8001ac4:	24000768 	.word	0x24000768
 8001ac8:	40020058 	.word	0x40020058
 8001acc:	40005000 	.word	0x40005000
 8001ad0:	240007e0 	.word	0x240007e0
 8001ad4:	40020010 	.word	0x40020010
 8001ad8:	24000858 	.word	0x24000858
 8001adc:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a26      	ldr	r2, [pc, #152]	@ (8001b80 <HAL_UART_MspInit+0x3bc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d146      	bne.n	8001b78 <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001aea:	f04f 0202 	mov.w	r2, #2
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001afc:	f107 0320 	add.w	r3, r7, #32
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 fcc7 	bl	8006494 <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8001b0c:	f7ff fa65 	bl	8000fda <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b10:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <HAL_UART_MspInit+0x3c0>)
 8001b12:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b16:	4a1b      	ldr	r2, [pc, #108]	@ (8001b84 <HAL_UART_MspInit+0x3c0>)
 8001b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b1c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001b20:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <HAL_UART_MspInit+0x3c0>)
 8001b22:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <HAL_UART_MspInit+0x3c0>)
 8001b30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b34:	4a13      	ldr	r2, [pc, #76]	@ (8001b84 <HAL_UART_MspInit+0x3c0>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_UART_MspInit+0x3c0>)
 8001b40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b66:	2307      	movs	r3, #7
 8001b68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <HAL_UART_MspInit+0x3c4>)
 8001b74:	f003 f95e 	bl	8004e34 <HAL_GPIO_Init>
}
 8001b78:	bf00      	nop
 8001b7a:	37f8      	adds	r7, #248	@ 0xf8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40004800 	.word	0x40004800
 8001b84:	58024400 	.word	0x58024400
 8001b88:	58020c00 	.word	0x58020c00

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001bc8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001b90:	f7ff fd1c 	bl	80015cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b94:	f7ff fc8a 	bl	80014ac <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f00a ff29 	bl	800ca14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7ff f831 	bl	8000c28 <main>
  bx  lr
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001bcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bd0:	24000268 	.word	0x24000268
  ldr r2, =_sidata
 8001bd4:	08034e64 	.word	0x08034e64
  ldr r2, =_sbss
 8001bd8:	24000268 	.word	0x24000268
  ldr r4, =_ebss
 8001bdc:	24001964 	.word	0x24001964

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bea:	2003      	movs	r0, #3
 8001bec:	f000 f980 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001bf0:	f004 fa7a 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_Init+0x68>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	4913      	ldr	r1, [pc, #76]	@ (8001c50 <HAL_Init+0x6c>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <HAL_Init+0x68>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <HAL_Init+0x6c>)
 8001c18:	5cd3      	ldrb	r3, [r2, r3]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
 8001c24:	4a0b      	ldr	r2, [pc, #44]	@ (8001c54 <HAL_Init+0x70>)
 8001c26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c28:	4a0b      	ldr	r2, [pc, #44]	@ (8001c58 <HAL_Init+0x74>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f814 	bl	8001c5c <HAL_InitTick>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e002      	b.n	8001c44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c3e:	f7ff facd 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	0800eb30 	.word	0x0800eb30
 8001c54:	24000004 	.word	0x24000004
 8001c58:	24000000 	.word	0x24000000

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c64:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_InitTick+0x60>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e021      	b.n	8001cb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <HAL_InitTick+0x64>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <HAL_InitTick+0x60>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f965 	bl	8001f56 <HAL_SYSTICK_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00e      	b.n	8001cb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d80a      	bhi.n	8001cb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f000 f92f 	bl	8001f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca8:	4a06      	ldr	r2, [pc, #24]	@ (8001cc4 <HAL_InitTick+0x68>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2400000c 	.word	0x2400000c
 8001cc0:	24000000 	.word	0x24000000
 8001cc4:	24000008 	.word	0x24000008

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	@ (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	2400000c 	.word	0x2400000c
 8001cec:	240008d0 	.word	0x240008d0

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	240008d0 	.word	0x240008d0

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2400000c 	.word	0x2400000c

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x40>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x40>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00
 8001d94:	05fa0000 	.word	0x05fa0000

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	@ (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	@ (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff29 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff40 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff90 	bl	8001e44 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5f 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff33 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa4 	bl	8001eac <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f74:	f3bf 8f5f 	dmb	sy
}
 8001f78:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <HAL_MPU_Disable+0x28>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	4a06      	ldr	r2, [pc, #24]	@ (8001f98 <HAL_MPU_Disable+0x28>)
 8001f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f84:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_MPU_Disable+0x2c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00
 8001f9c:	e000ed90 	.word	0xe000ed90

08001fa0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd8 <HAL_MPU_Enable+0x38>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <HAL_MPU_Enable+0x3c>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	4a09      	ldr	r2, [pc, #36]	@ (8001fdc <HAL_MPU_Enable+0x3c>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fbc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001fbe:	f3bf 8f4f 	dsb	sy
}
 8001fc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fc4:	f3bf 8f6f 	isb	sy
}
 8001fc8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed90 	.word	0xe000ed90
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	785a      	ldrb	r2, [r3, #1]
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_MPU_ConfigRegion+0x7c>)
 8001fee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <HAL_MPU_ConfigRegion+0x7c>)
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	@ (800205c <HAL_MPU_ConfigRegion+0x7c>)
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ffc:	4a17      	ldr	r2, [pc, #92]	@ (800205c <HAL_MPU_ConfigRegion+0x7c>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7b1b      	ldrb	r3, [r3, #12]
 8002008:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7adb      	ldrb	r3, [r3, #11]
 800200e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7a9b      	ldrb	r3, [r3, #10]
 8002016:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002018:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7b5b      	ldrb	r3, [r3, #13]
 800201e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002020:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7b9b      	ldrb	r3, [r3, #14]
 8002026:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002028:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7bdb      	ldrb	r3, [r3, #15]
 800202e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7a5b      	ldrb	r3, [r3, #9]
 8002036:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002038:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7a1b      	ldrb	r3, [r3, #8]
 800203e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002040:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800204a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800204c:	6113      	str	r3, [r2, #16]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed90 	.word	0xe000ed90

08002060 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff fe42 	bl	8001cf0 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e37d      	b.n	8002774 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a66      	ldr	r2, [pc, #408]	@ (8002218 <HAL_DMA_Init+0x1b8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d04a      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a65      	ldr	r2, [pc, #404]	@ (800221c <HAL_DMA_Init+0x1bc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d045      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a63      	ldr	r2, [pc, #396]	@ (8002220 <HAL_DMA_Init+0x1c0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d040      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a62      	ldr	r2, [pc, #392]	@ (8002224 <HAL_DMA_Init+0x1c4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d03b      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a60      	ldr	r2, [pc, #384]	@ (8002228 <HAL_DMA_Init+0x1c8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d036      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a5f      	ldr	r2, [pc, #380]	@ (800222c <HAL_DMA_Init+0x1cc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d031      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002230 <HAL_DMA_Init+0x1d0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d02c      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002234 <HAL_DMA_Init+0x1d4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d027      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002238 <HAL_DMA_Init+0x1d8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d022      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a59      	ldr	r2, [pc, #356]	@ (800223c <HAL_DMA_Init+0x1dc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d01d      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a57      	ldr	r2, [pc, #348]	@ (8002240 <HAL_DMA_Init+0x1e0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d018      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a56      	ldr	r2, [pc, #344]	@ (8002244 <HAL_DMA_Init+0x1e4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a54      	ldr	r2, [pc, #336]	@ (8002248 <HAL_DMA_Init+0x1e8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00e      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a53      	ldr	r2, [pc, #332]	@ (800224c <HAL_DMA_Init+0x1ec>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d009      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a51      	ldr	r2, [pc, #324]	@ (8002250 <HAL_DMA_Init+0x1f0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_DMA_Init+0xb8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a50      	ldr	r2, [pc, #320]	@ (8002254 <HAL_DMA_Init+0x1f4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_DMA_Init+0xbc>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_DMA_Init+0xbe>
 800211c:	2300      	movs	r3, #0
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 813c 	beq.w	800239c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a37      	ldr	r2, [pc, #220]	@ (8002218 <HAL_DMA_Init+0x1b8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d04a      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a36      	ldr	r2, [pc, #216]	@ (800221c <HAL_DMA_Init+0x1bc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d045      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a34      	ldr	r2, [pc, #208]	@ (8002220 <HAL_DMA_Init+0x1c0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d040      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a33      	ldr	r2, [pc, #204]	@ (8002224 <HAL_DMA_Init+0x1c4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d03b      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a31      	ldr	r2, [pc, #196]	@ (8002228 <HAL_DMA_Init+0x1c8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d036      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a30      	ldr	r2, [pc, #192]	@ (800222c <HAL_DMA_Init+0x1cc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d031      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a2e      	ldr	r2, [pc, #184]	@ (8002230 <HAL_DMA_Init+0x1d0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02c      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a2d      	ldr	r2, [pc, #180]	@ (8002234 <HAL_DMA_Init+0x1d4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d027      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2b      	ldr	r2, [pc, #172]	@ (8002238 <HAL_DMA_Init+0x1d8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d022      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2a      	ldr	r2, [pc, #168]	@ (800223c <HAL_DMA_Init+0x1dc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d01d      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a28      	ldr	r2, [pc, #160]	@ (8002240 <HAL_DMA_Init+0x1e0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d018      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a27      	ldr	r2, [pc, #156]	@ (8002244 <HAL_DMA_Init+0x1e4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a25      	ldr	r2, [pc, #148]	@ (8002248 <HAL_DMA_Init+0x1e8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00e      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a24      	ldr	r2, [pc, #144]	@ (800224c <HAL_DMA_Init+0x1ec>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a22      	ldr	r2, [pc, #136]	@ (8002250 <HAL_DMA_Init+0x1f0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_Init+0x174>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a21      	ldr	r2, [pc, #132]	@ (8002254 <HAL_DMA_Init+0x1f4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d108      	bne.n	80021e6 <HAL_DMA_Init+0x186>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e007      	b.n	80021f6 <HAL_DMA_Init+0x196>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021f6:	e02f      	b.n	8002258 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f8:	f7ff fd7a 	bl	8001cf0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b05      	cmp	r3, #5
 8002204:	d928      	bls.n	8002258 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2203      	movs	r2, #3
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e2ad      	b.n	8002774 <HAL_DMA_Init+0x714>
 8002218:	40020010 	.word	0x40020010
 800221c:	40020028 	.word	0x40020028
 8002220:	40020040 	.word	0x40020040
 8002224:	40020058 	.word	0x40020058
 8002228:	40020070 	.word	0x40020070
 800222c:	40020088 	.word	0x40020088
 8002230:	400200a0 	.word	0x400200a0
 8002234:	400200b8 	.word	0x400200b8
 8002238:	40020410 	.word	0x40020410
 800223c:	40020428 	.word	0x40020428
 8002240:	40020440 	.word	0x40020440
 8002244:	40020458 	.word	0x40020458
 8002248:	40020470 	.word	0x40020470
 800224c:	40020488 	.word	0x40020488
 8002250:	400204a0 	.word	0x400204a0
 8002254:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1c8      	bne.n	80021f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4b73      	ldr	r3, [pc, #460]	@ (8002440 <HAL_DMA_Init+0x3e0>)
 8002272:	4013      	ands	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800227e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002296:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d107      	bne.n	80022bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	4313      	orrs	r3, r2
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b28      	cmp	r3, #40	@ 0x28
 80022c2:	d903      	bls.n	80022cc <HAL_DMA_Init+0x26c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80022ca:	d91f      	bls.n	800230c <HAL_DMA_Init+0x2ac>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80022d2:	d903      	bls.n	80022dc <HAL_DMA_Init+0x27c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b42      	cmp	r3, #66	@ 0x42
 80022da:	d917      	bls.n	800230c <HAL_DMA_Init+0x2ac>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b46      	cmp	r3, #70	@ 0x46
 80022e2:	d903      	bls.n	80022ec <HAL_DMA_Init+0x28c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b48      	cmp	r3, #72	@ 0x48
 80022ea:	d90f      	bls.n	800230c <HAL_DMA_Init+0x2ac>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80022f2:	d903      	bls.n	80022fc <HAL_DMA_Init+0x29c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b52      	cmp	r3, #82	@ 0x52
 80022fa:	d907      	bls.n	800230c <HAL_DMA_Init+0x2ac>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b73      	cmp	r3, #115	@ 0x73
 8002302:	d905      	bls.n	8002310 <HAL_DMA_Init+0x2b0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b77      	cmp	r3, #119	@ 0x77
 800230a:	d801      	bhi.n	8002310 <HAL_DMA_Init+0x2b0>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_DMA_Init+0x2b2>
 8002310:	2300      	movs	r3, #0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800231c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f023 0307 	bic.w	r3, r3, #7
 8002334:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	2b04      	cmp	r3, #4
 8002346:	d117      	bne.n	8002378 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00e      	beq.n	8002378 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f002 fbe0 	bl	8004b20 <DMA_CheckFifoParam>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2240      	movs	r2, #64	@ 0x40
 800236a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e1fd      	b.n	8002774 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f002 fb1b 	bl	80049bc <DMA_CalcBaseAndBitshift>
 8002386:	4603      	mov	r3, r0
 8002388:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	223f      	movs	r2, #63	@ 0x3f
 8002394:	409a      	lsls	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	e0fd      	b.n	8002598 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a28      	ldr	r2, [pc, #160]	@ (8002444 <HAL_DMA_Init+0x3e4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d04a      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a27      	ldr	r2, [pc, #156]	@ (8002448 <HAL_DMA_Init+0x3e8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d045      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a25      	ldr	r2, [pc, #148]	@ (800244c <HAL_DMA_Init+0x3ec>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d040      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a24      	ldr	r2, [pc, #144]	@ (8002450 <HAL_DMA_Init+0x3f0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d03b      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <HAL_DMA_Init+0x3f4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d036      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a21      	ldr	r2, [pc, #132]	@ (8002458 <HAL_DMA_Init+0x3f8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d031      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1f      	ldr	r2, [pc, #124]	@ (800245c <HAL_DMA_Init+0x3fc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02c      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002460 <HAL_DMA_Init+0x400>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d027      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002464 <HAL_DMA_Init+0x404>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d022      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002468 <HAL_DMA_Init+0x408>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d01d      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a19      	ldr	r2, [pc, #100]	@ (800246c <HAL_DMA_Init+0x40c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d018      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a18      	ldr	r2, [pc, #96]	@ (8002470 <HAL_DMA_Init+0x410>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a16      	ldr	r2, [pc, #88]	@ (8002474 <HAL_DMA_Init+0x414>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00e      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a15      	ldr	r2, [pc, #84]	@ (8002478 <HAL_DMA_Init+0x418>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d009      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a13      	ldr	r2, [pc, #76]	@ (800247c <HAL_DMA_Init+0x41c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d004      	beq.n	800243c <HAL_DMA_Init+0x3dc>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <HAL_DMA_Init+0x420>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d123      	bne.n	8002484 <HAL_DMA_Init+0x424>
 800243c:	2301      	movs	r3, #1
 800243e:	e022      	b.n	8002486 <HAL_DMA_Init+0x426>
 8002440:	fe10803f 	.word	0xfe10803f
 8002444:	48022c08 	.word	0x48022c08
 8002448:	48022c1c 	.word	0x48022c1c
 800244c:	48022c30 	.word	0x48022c30
 8002450:	48022c44 	.word	0x48022c44
 8002454:	48022c58 	.word	0x48022c58
 8002458:	48022c6c 	.word	0x48022c6c
 800245c:	48022c80 	.word	0x48022c80
 8002460:	48022c94 	.word	0x48022c94
 8002464:	58025408 	.word	0x58025408
 8002468:	5802541c 	.word	0x5802541c
 800246c:	58025430 	.word	0x58025430
 8002470:	58025444 	.word	0x58025444
 8002474:	58025458 	.word	0x58025458
 8002478:	5802546c 	.word	0x5802546c
 800247c:	58025480 	.word	0x58025480
 8002480:	58025494 	.word	0x58025494
 8002484:	2300      	movs	r3, #0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d07d      	beq.n	8002586 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a7f      	ldr	r2, [pc, #508]	@ (800268c <HAL_DMA_Init+0x62c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d021      	beq.n	80024d8 <HAL_DMA_Init+0x478>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a7d      	ldr	r2, [pc, #500]	@ (8002690 <HAL_DMA_Init+0x630>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01c      	beq.n	80024d8 <HAL_DMA_Init+0x478>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002694 <HAL_DMA_Init+0x634>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d017      	beq.n	80024d8 <HAL_DMA_Init+0x478>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a7a      	ldr	r2, [pc, #488]	@ (8002698 <HAL_DMA_Init+0x638>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d012      	beq.n	80024d8 <HAL_DMA_Init+0x478>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a79      	ldr	r2, [pc, #484]	@ (800269c <HAL_DMA_Init+0x63c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00d      	beq.n	80024d8 <HAL_DMA_Init+0x478>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a77      	ldr	r2, [pc, #476]	@ (80026a0 <HAL_DMA_Init+0x640>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d008      	beq.n	80024d8 <HAL_DMA_Init+0x478>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a76      	ldr	r2, [pc, #472]	@ (80026a4 <HAL_DMA_Init+0x644>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <HAL_DMA_Init+0x478>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a74      	ldr	r2, [pc, #464]	@ (80026a8 <HAL_DMA_Init+0x648>)
 80024d6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4b6e      	ldr	r3, [pc, #440]	@ (80026ac <HAL_DMA_Init+0x64c>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b40      	cmp	r3, #64	@ 0x40
 80024fe:	d008      	beq.n	8002512 <HAL_DMA_Init+0x4b2>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b80      	cmp	r3, #128	@ 0x80
 8002506:	d102      	bne.n	800250e <HAL_DMA_Init+0x4ae>
 8002508:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800250c:	e002      	b.n	8002514 <HAL_DMA_Init+0x4b4>
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_DMA_Init+0x4b4>
 8002512:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68d2      	ldr	r2, [r2, #12]
 8002518:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800251a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002522:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800252a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002532:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800253a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002542:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	4b55      	ldr	r3, [pc, #340]	@ (80026b0 <HAL_DMA_Init+0x650>)
 800255a:	4413      	add	r3, r2
 800255c:	4a55      	ldr	r2, [pc, #340]	@ (80026b4 <HAL_DMA_Init+0x654>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	009a      	lsls	r2, r3, #2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f002 fa26 	bl	80049bc <DMA_CalcBaseAndBitshift>
 8002570:	4603      	mov	r3, r0
 8002572:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2201      	movs	r2, #1
 800257e:	409a      	lsls	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	e008      	b.n	8002598 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2240      	movs	r2, #64	@ 0x40
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2203      	movs	r2, #3
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0ed      	b.n	8002774 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a46      	ldr	r2, [pc, #280]	@ (80026b8 <HAL_DMA_Init+0x658>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d072      	beq.n	8002688 <HAL_DMA_Init+0x628>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a45      	ldr	r2, [pc, #276]	@ (80026bc <HAL_DMA_Init+0x65c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d06d      	beq.n	8002688 <HAL_DMA_Init+0x628>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a43      	ldr	r2, [pc, #268]	@ (80026c0 <HAL_DMA_Init+0x660>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d068      	beq.n	8002688 <HAL_DMA_Init+0x628>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a42      	ldr	r2, [pc, #264]	@ (80026c4 <HAL_DMA_Init+0x664>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d063      	beq.n	8002688 <HAL_DMA_Init+0x628>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a40      	ldr	r2, [pc, #256]	@ (80026c8 <HAL_DMA_Init+0x668>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d05e      	beq.n	8002688 <HAL_DMA_Init+0x628>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a3f      	ldr	r2, [pc, #252]	@ (80026cc <HAL_DMA_Init+0x66c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d059      	beq.n	8002688 <HAL_DMA_Init+0x628>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a3d      	ldr	r2, [pc, #244]	@ (80026d0 <HAL_DMA_Init+0x670>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d054      	beq.n	8002688 <HAL_DMA_Init+0x628>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a3c      	ldr	r2, [pc, #240]	@ (80026d4 <HAL_DMA_Init+0x674>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d04f      	beq.n	8002688 <HAL_DMA_Init+0x628>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a3a      	ldr	r2, [pc, #232]	@ (80026d8 <HAL_DMA_Init+0x678>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d04a      	beq.n	8002688 <HAL_DMA_Init+0x628>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a39      	ldr	r2, [pc, #228]	@ (80026dc <HAL_DMA_Init+0x67c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_DMA_Init+0x628>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a37      	ldr	r2, [pc, #220]	@ (80026e0 <HAL_DMA_Init+0x680>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d040      	beq.n	8002688 <HAL_DMA_Init+0x628>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a36      	ldr	r2, [pc, #216]	@ (80026e4 <HAL_DMA_Init+0x684>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d03b      	beq.n	8002688 <HAL_DMA_Init+0x628>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a34      	ldr	r2, [pc, #208]	@ (80026e8 <HAL_DMA_Init+0x688>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d036      	beq.n	8002688 <HAL_DMA_Init+0x628>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a33      	ldr	r2, [pc, #204]	@ (80026ec <HAL_DMA_Init+0x68c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d031      	beq.n	8002688 <HAL_DMA_Init+0x628>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a31      	ldr	r2, [pc, #196]	@ (80026f0 <HAL_DMA_Init+0x690>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_Init+0x628>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a30      	ldr	r2, [pc, #192]	@ (80026f4 <HAL_DMA_Init+0x694>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d027      	beq.n	8002688 <HAL_DMA_Init+0x628>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a13      	ldr	r2, [pc, #76]	@ (800268c <HAL_DMA_Init+0x62c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Init+0x628>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a12      	ldr	r2, [pc, #72]	@ (8002690 <HAL_DMA_Init+0x630>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01d      	beq.n	8002688 <HAL_DMA_Init+0x628>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a10      	ldr	r2, [pc, #64]	@ (8002694 <HAL_DMA_Init+0x634>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_DMA_Init+0x628>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a0f      	ldr	r2, [pc, #60]	@ (8002698 <HAL_DMA_Init+0x638>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_DMA_Init+0x628>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0d      	ldr	r2, [pc, #52]	@ (800269c <HAL_DMA_Init+0x63c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Init+0x628>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a0c      	ldr	r2, [pc, #48]	@ (80026a0 <HAL_DMA_Init+0x640>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_DMA_Init+0x628>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <HAL_DMA_Init+0x644>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Init+0x628>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a09      	ldr	r2, [pc, #36]	@ (80026a8 <HAL_DMA_Init+0x648>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d137      	bne.n	80026f8 <HAL_DMA_Init+0x698>
 8002688:	2301      	movs	r3, #1
 800268a:	e036      	b.n	80026fa <HAL_DMA_Init+0x69a>
 800268c:	58025408 	.word	0x58025408
 8002690:	5802541c 	.word	0x5802541c
 8002694:	58025430 	.word	0x58025430
 8002698:	58025444 	.word	0x58025444
 800269c:	58025458 	.word	0x58025458
 80026a0:	5802546c 	.word	0x5802546c
 80026a4:	58025480 	.word	0x58025480
 80026a8:	58025494 	.word	0x58025494
 80026ac:	fffe000f 	.word	0xfffe000f
 80026b0:	a7fdabf8 	.word	0xa7fdabf8
 80026b4:	cccccccd 	.word	0xcccccccd
 80026b8:	40020010 	.word	0x40020010
 80026bc:	40020028 	.word	0x40020028
 80026c0:	40020040 	.word	0x40020040
 80026c4:	40020058 	.word	0x40020058
 80026c8:	40020070 	.word	0x40020070
 80026cc:	40020088 	.word	0x40020088
 80026d0:	400200a0 	.word	0x400200a0
 80026d4:	400200b8 	.word	0x400200b8
 80026d8:	40020410 	.word	0x40020410
 80026dc:	40020428 	.word	0x40020428
 80026e0:	40020440 	.word	0x40020440
 80026e4:	40020458 	.word	0x40020458
 80026e8:	40020470 	.word	0x40020470
 80026ec:	40020488 	.word	0x40020488
 80026f0:	400204a0 	.word	0x400204a0
 80026f4:	400204b8 	.word	0x400204b8
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d032      	beq.n	8002764 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f002 fa8a 	bl	8004c18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b80      	cmp	r3, #128	@ 0x80
 800270a:	d102      	bne.n	8002712 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002726:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d010      	beq.n	8002752 <HAL_DMA_Init+0x6f2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d80c      	bhi.n	8002752 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f002 fb07 	bl	8004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	e008      	b.n	8002764 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e226      	b.n	8002be6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_DMA_Start_IT+0x2a>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e21f      	b.n	8002be6 <HAL_DMA_Start_IT+0x46a>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	f040 820a 	bne.w	8002bd0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a68      	ldr	r2, [pc, #416]	@ (8002970 <HAL_DMA_Start_IT+0x1f4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d04a      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a66      	ldr	r2, [pc, #408]	@ (8002974 <HAL_DMA_Start_IT+0x1f8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d045      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a65      	ldr	r2, [pc, #404]	@ (8002978 <HAL_DMA_Start_IT+0x1fc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d040      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a63      	ldr	r2, [pc, #396]	@ (800297c <HAL_DMA_Start_IT+0x200>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d03b      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a62      	ldr	r2, [pc, #392]	@ (8002980 <HAL_DMA_Start_IT+0x204>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d036      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a60      	ldr	r2, [pc, #384]	@ (8002984 <HAL_DMA_Start_IT+0x208>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d031      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a5f      	ldr	r2, [pc, #380]	@ (8002988 <HAL_DMA_Start_IT+0x20c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d02c      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5d      	ldr	r2, [pc, #372]	@ (800298c <HAL_DMA_Start_IT+0x210>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d027      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a5c      	ldr	r2, [pc, #368]	@ (8002990 <HAL_DMA_Start_IT+0x214>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d022      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a5a      	ldr	r2, [pc, #360]	@ (8002994 <HAL_DMA_Start_IT+0x218>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01d      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a59      	ldr	r2, [pc, #356]	@ (8002998 <HAL_DMA_Start_IT+0x21c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d018      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a57      	ldr	r2, [pc, #348]	@ (800299c <HAL_DMA_Start_IT+0x220>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a56      	ldr	r2, [pc, #344]	@ (80029a0 <HAL_DMA_Start_IT+0x224>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00e      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a54      	ldr	r2, [pc, #336]	@ (80029a4 <HAL_DMA_Start_IT+0x228>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a53      	ldr	r2, [pc, #332]	@ (80029a8 <HAL_DMA_Start_IT+0x22c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_DMA_Start_IT+0xee>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a51      	ldr	r2, [pc, #324]	@ (80029ac <HAL_DMA_Start_IT+0x230>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d108      	bne.n	800287c <HAL_DMA_Start_IT+0x100>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e007      	b.n	800288c <HAL_DMA_Start_IT+0x110>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f001 feae 	bl	80045f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a34      	ldr	r2, [pc, #208]	@ (8002970 <HAL_DMA_Start_IT+0x1f4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d04a      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a33      	ldr	r2, [pc, #204]	@ (8002974 <HAL_DMA_Start_IT+0x1f8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d045      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a31      	ldr	r2, [pc, #196]	@ (8002978 <HAL_DMA_Start_IT+0x1fc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d040      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a30      	ldr	r2, [pc, #192]	@ (800297c <HAL_DMA_Start_IT+0x200>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d03b      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002980 <HAL_DMA_Start_IT+0x204>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d036      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002984 <HAL_DMA_Start_IT+0x208>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d031      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002988 <HAL_DMA_Start_IT+0x20c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d02c      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2a      	ldr	r2, [pc, #168]	@ (800298c <HAL_DMA_Start_IT+0x210>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d027      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a28      	ldr	r2, [pc, #160]	@ (8002990 <HAL_DMA_Start_IT+0x214>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d022      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a27      	ldr	r2, [pc, #156]	@ (8002994 <HAL_DMA_Start_IT+0x218>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d01d      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a25      	ldr	r2, [pc, #148]	@ (8002998 <HAL_DMA_Start_IT+0x21c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d018      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a24      	ldr	r2, [pc, #144]	@ (800299c <HAL_DMA_Start_IT+0x220>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a22      	ldr	r2, [pc, #136]	@ (80029a0 <HAL_DMA_Start_IT+0x224>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00e      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a21      	ldr	r2, [pc, #132]	@ (80029a4 <HAL_DMA_Start_IT+0x228>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d009      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	@ (80029a8 <HAL_DMA_Start_IT+0x22c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d004      	beq.n	8002938 <HAL_DMA_Start_IT+0x1bc>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1e      	ldr	r2, [pc, #120]	@ (80029ac <HAL_DMA_Start_IT+0x230>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d101      	bne.n	800293c <HAL_DMA_Start_IT+0x1c0>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_DMA_Start_IT+0x1c2>
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d036      	beq.n	80029b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 021e 	bic.w	r2, r3, #30
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0216 	orr.w	r2, r2, #22
 8002954:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03e      	beq.n	80029dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0208 	orr.w	r2, r2, #8
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e035      	b.n	80029dc <HAL_DMA_Start_IT+0x260>
 8002970:	40020010 	.word	0x40020010
 8002974:	40020028 	.word	0x40020028
 8002978:	40020040 	.word	0x40020040
 800297c:	40020058 	.word	0x40020058
 8002980:	40020070 	.word	0x40020070
 8002984:	40020088 	.word	0x40020088
 8002988:	400200a0 	.word	0x400200a0
 800298c:	400200b8 	.word	0x400200b8
 8002990:	40020410 	.word	0x40020410
 8002994:	40020428 	.word	0x40020428
 8002998:	40020440 	.word	0x40020440
 800299c:	40020458 	.word	0x40020458
 80029a0:	40020470 	.word	0x40020470
 80029a4:	40020488 	.word	0x40020488
 80029a8:	400204a0 	.word	0x400204a0
 80029ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 020e 	bic.w	r2, r3, #14
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 020a 	orr.w	r2, r2, #10
 80029c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0204 	orr.w	r2, r2, #4
 80029da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a83      	ldr	r2, [pc, #524]	@ (8002bf0 <HAL_DMA_Start_IT+0x474>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d072      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a82      	ldr	r2, [pc, #520]	@ (8002bf4 <HAL_DMA_Start_IT+0x478>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d06d      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a80      	ldr	r2, [pc, #512]	@ (8002bf8 <HAL_DMA_Start_IT+0x47c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d068      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7f      	ldr	r2, [pc, #508]	@ (8002bfc <HAL_DMA_Start_IT+0x480>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d063      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a7d      	ldr	r2, [pc, #500]	@ (8002c00 <HAL_DMA_Start_IT+0x484>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d05e      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7c      	ldr	r2, [pc, #496]	@ (8002c04 <HAL_DMA_Start_IT+0x488>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d059      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a7a      	ldr	r2, [pc, #488]	@ (8002c08 <HAL_DMA_Start_IT+0x48c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d054      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a79      	ldr	r2, [pc, #484]	@ (8002c0c <HAL_DMA_Start_IT+0x490>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04f      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a77      	ldr	r2, [pc, #476]	@ (8002c10 <HAL_DMA_Start_IT+0x494>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d04a      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a76      	ldr	r2, [pc, #472]	@ (8002c14 <HAL_DMA_Start_IT+0x498>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d045      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a74      	ldr	r2, [pc, #464]	@ (8002c18 <HAL_DMA_Start_IT+0x49c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d040      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a73      	ldr	r2, [pc, #460]	@ (8002c1c <HAL_DMA_Start_IT+0x4a0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d03b      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a71      	ldr	r2, [pc, #452]	@ (8002c20 <HAL_DMA_Start_IT+0x4a4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d036      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a70      	ldr	r2, [pc, #448]	@ (8002c24 <HAL_DMA_Start_IT+0x4a8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d031      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6e      	ldr	r2, [pc, #440]	@ (8002c28 <HAL_DMA_Start_IT+0x4ac>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d02c      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6d      	ldr	r2, [pc, #436]	@ (8002c2c <HAL_DMA_Start_IT+0x4b0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d027      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6b      	ldr	r2, [pc, #428]	@ (8002c30 <HAL_DMA_Start_IT+0x4b4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d022      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6a      	ldr	r2, [pc, #424]	@ (8002c34 <HAL_DMA_Start_IT+0x4b8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d01d      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a68      	ldr	r2, [pc, #416]	@ (8002c38 <HAL_DMA_Start_IT+0x4bc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d018      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a67      	ldr	r2, [pc, #412]	@ (8002c3c <HAL_DMA_Start_IT+0x4c0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a65      	ldr	r2, [pc, #404]	@ (8002c40 <HAL_DMA_Start_IT+0x4c4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00e      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a64      	ldr	r2, [pc, #400]	@ (8002c44 <HAL_DMA_Start_IT+0x4c8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d009      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a62      	ldr	r2, [pc, #392]	@ (8002c48 <HAL_DMA_Start_IT+0x4cc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_DMA_Start_IT+0x350>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a61      	ldr	r2, [pc, #388]	@ (8002c4c <HAL_DMA_Start_IT+0x4d0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d101      	bne.n	8002ad0 <HAL_DMA_Start_IT+0x354>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_DMA_Start_IT+0x356>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d01a      	beq.n	8002b0c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b0a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a37      	ldr	r2, [pc, #220]	@ (8002bf0 <HAL_DMA_Start_IT+0x474>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d04a      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a36      	ldr	r2, [pc, #216]	@ (8002bf4 <HAL_DMA_Start_IT+0x478>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d045      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a34      	ldr	r2, [pc, #208]	@ (8002bf8 <HAL_DMA_Start_IT+0x47c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d040      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a33      	ldr	r2, [pc, #204]	@ (8002bfc <HAL_DMA_Start_IT+0x480>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d03b      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a31      	ldr	r2, [pc, #196]	@ (8002c00 <HAL_DMA_Start_IT+0x484>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d036      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a30      	ldr	r2, [pc, #192]	@ (8002c04 <HAL_DMA_Start_IT+0x488>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d031      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c08 <HAL_DMA_Start_IT+0x48c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d02c      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a2d      	ldr	r2, [pc, #180]	@ (8002c0c <HAL_DMA_Start_IT+0x490>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d027      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2b      	ldr	r2, [pc, #172]	@ (8002c10 <HAL_DMA_Start_IT+0x494>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d022      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8002c14 <HAL_DMA_Start_IT+0x498>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d01d      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a28      	ldr	r2, [pc, #160]	@ (8002c18 <HAL_DMA_Start_IT+0x49c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d018      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a27      	ldr	r2, [pc, #156]	@ (8002c1c <HAL_DMA_Start_IT+0x4a0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d013      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a25      	ldr	r2, [pc, #148]	@ (8002c20 <HAL_DMA_Start_IT+0x4a4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a24      	ldr	r2, [pc, #144]	@ (8002c24 <HAL_DMA_Start_IT+0x4a8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d009      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a22      	ldr	r2, [pc, #136]	@ (8002c28 <HAL_DMA_Start_IT+0x4ac>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_DMA_Start_IT+0x430>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a21      	ldr	r2, [pc, #132]	@ (8002c2c <HAL_DMA_Start_IT+0x4b0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d108      	bne.n	8002bbe <HAL_DMA_Start_IT+0x442>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e012      	b.n	8002be4 <HAL_DMA_Start_IT+0x468>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0201 	orr.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e009      	b.n	8002be4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40020010 	.word	0x40020010
 8002bf4:	40020028 	.word	0x40020028
 8002bf8:	40020040 	.word	0x40020040
 8002bfc:	40020058 	.word	0x40020058
 8002c00:	40020070 	.word	0x40020070
 8002c04:	40020088 	.word	0x40020088
 8002c08:	400200a0 	.word	0x400200a0
 8002c0c:	400200b8 	.word	0x400200b8
 8002c10:	40020410 	.word	0x40020410
 8002c14:	40020428 	.word	0x40020428
 8002c18:	40020440 	.word	0x40020440
 8002c1c:	40020458 	.word	0x40020458
 8002c20:	40020470 	.word	0x40020470
 8002c24:	40020488 	.word	0x40020488
 8002c28:	400204a0 	.word	0x400204a0
 8002c2c:	400204b8 	.word	0x400204b8
 8002c30:	58025408 	.word	0x58025408
 8002c34:	5802541c 	.word	0x5802541c
 8002c38:	58025430 	.word	0x58025430
 8002c3c:	58025444 	.word	0x58025444
 8002c40:	58025458 	.word	0x58025458
 8002c44:	5802546c 	.word	0x5802546c
 8002c48:	58025480 	.word	0x58025480
 8002c4c:	58025494 	.word	0x58025494

08002c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7ff f84a 	bl	8001cf0 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e2dc      	b.n	8003222 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d008      	beq.n	8002c86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2280      	movs	r2, #128	@ 0x80
 8002c78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e2cd      	b.n	8003222 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a76      	ldr	r2, [pc, #472]	@ (8002e64 <HAL_DMA_Abort+0x214>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d04a      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a74      	ldr	r2, [pc, #464]	@ (8002e68 <HAL_DMA_Abort+0x218>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d045      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a73      	ldr	r2, [pc, #460]	@ (8002e6c <HAL_DMA_Abort+0x21c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d040      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a71      	ldr	r2, [pc, #452]	@ (8002e70 <HAL_DMA_Abort+0x220>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d03b      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a70      	ldr	r2, [pc, #448]	@ (8002e74 <HAL_DMA_Abort+0x224>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d036      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8002e78 <HAL_DMA_Abort+0x228>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d031      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6d      	ldr	r2, [pc, #436]	@ (8002e7c <HAL_DMA_Abort+0x22c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d02c      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a6b      	ldr	r2, [pc, #428]	@ (8002e80 <HAL_DMA_Abort+0x230>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d027      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a6a      	ldr	r2, [pc, #424]	@ (8002e84 <HAL_DMA_Abort+0x234>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d022      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a68      	ldr	r2, [pc, #416]	@ (8002e88 <HAL_DMA_Abort+0x238>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01d      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a67      	ldr	r2, [pc, #412]	@ (8002e8c <HAL_DMA_Abort+0x23c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a65      	ldr	r2, [pc, #404]	@ (8002e90 <HAL_DMA_Abort+0x240>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a64      	ldr	r2, [pc, #400]	@ (8002e94 <HAL_DMA_Abort+0x244>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a62      	ldr	r2, [pc, #392]	@ (8002e98 <HAL_DMA_Abort+0x248>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a61      	ldr	r2, [pc, #388]	@ (8002e9c <HAL_DMA_Abort+0x24c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_DMA_Abort+0xd6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea0 <HAL_DMA_Abort+0x250>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_DMA_Abort+0xda>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_DMA_Abort+0xdc>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 021e 	bic.w	r2, r2, #30
 8002d3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e00a      	b.n	8002d6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 020e 	bic.w	r2, r2, #14
 8002d66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a3c      	ldr	r2, [pc, #240]	@ (8002e64 <HAL_DMA_Abort+0x214>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d072      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e68 <HAL_DMA_Abort+0x218>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d06d      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a39      	ldr	r2, [pc, #228]	@ (8002e6c <HAL_DMA_Abort+0x21c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d068      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a37      	ldr	r2, [pc, #220]	@ (8002e70 <HAL_DMA_Abort+0x220>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d063      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a36      	ldr	r2, [pc, #216]	@ (8002e74 <HAL_DMA_Abort+0x224>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d05e      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a34      	ldr	r2, [pc, #208]	@ (8002e78 <HAL_DMA_Abort+0x228>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d059      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a33      	ldr	r2, [pc, #204]	@ (8002e7c <HAL_DMA_Abort+0x22c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d054      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a31      	ldr	r2, [pc, #196]	@ (8002e80 <HAL_DMA_Abort+0x230>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04f      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a30      	ldr	r2, [pc, #192]	@ (8002e84 <HAL_DMA_Abort+0x234>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04a      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8002e88 <HAL_DMA_Abort+0x238>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d045      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e8c <HAL_DMA_Abort+0x23c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d040      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e90 <HAL_DMA_Abort+0x240>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d03b      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2a      	ldr	r2, [pc, #168]	@ (8002e94 <HAL_DMA_Abort+0x244>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d036      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a28      	ldr	r2, [pc, #160]	@ (8002e98 <HAL_DMA_Abort+0x248>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d031      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a27      	ldr	r2, [pc, #156]	@ (8002e9c <HAL_DMA_Abort+0x24c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d02c      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a25      	ldr	r2, [pc, #148]	@ (8002ea0 <HAL_DMA_Abort+0x250>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d027      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a24      	ldr	r2, [pc, #144]	@ (8002ea4 <HAL_DMA_Abort+0x254>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a22      	ldr	r2, [pc, #136]	@ (8002ea8 <HAL_DMA_Abort+0x258>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01d      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a21      	ldr	r2, [pc, #132]	@ (8002eac <HAL_DMA_Abort+0x25c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb0 <HAL_DMA_Abort+0x260>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb4 <HAL_DMA_Abort+0x264>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb8 <HAL_DMA_Abort+0x268>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002ebc <HAL_DMA_Abort+0x26c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_Abort+0x20e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <HAL_DMA_Abort+0x270>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d132      	bne.n	8002ec4 <HAL_DMA_Abort+0x274>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e031      	b.n	8002ec6 <HAL_DMA_Abort+0x276>
 8002e62:	bf00      	nop
 8002e64:	40020010 	.word	0x40020010
 8002e68:	40020028 	.word	0x40020028
 8002e6c:	40020040 	.word	0x40020040
 8002e70:	40020058 	.word	0x40020058
 8002e74:	40020070 	.word	0x40020070
 8002e78:	40020088 	.word	0x40020088
 8002e7c:	400200a0 	.word	0x400200a0
 8002e80:	400200b8 	.word	0x400200b8
 8002e84:	40020410 	.word	0x40020410
 8002e88:	40020428 	.word	0x40020428
 8002e8c:	40020440 	.word	0x40020440
 8002e90:	40020458 	.word	0x40020458
 8002e94:	40020470 	.word	0x40020470
 8002e98:	40020488 	.word	0x40020488
 8002e9c:	400204a0 	.word	0x400204a0
 8002ea0:	400204b8 	.word	0x400204b8
 8002ea4:	58025408 	.word	0x58025408
 8002ea8:	5802541c 	.word	0x5802541c
 8002eac:	58025430 	.word	0x58025430
 8002eb0:	58025444 	.word	0x58025444
 8002eb4:	58025458 	.word	0x58025458
 8002eb8:	5802546c 	.word	0x5802546c
 8002ebc:	58025480 	.word	0x58025480
 8002ec0:	58025494 	.word	0x58025494
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6d      	ldr	r2, [pc, #436]	@ (8003094 <HAL_DMA_Abort+0x444>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d04a      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8003098 <HAL_DMA_Abort+0x448>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d045      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6a      	ldr	r2, [pc, #424]	@ (800309c <HAL_DMA_Abort+0x44c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d040      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a68      	ldr	r2, [pc, #416]	@ (80030a0 <HAL_DMA_Abort+0x450>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d03b      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a67      	ldr	r2, [pc, #412]	@ (80030a4 <HAL_DMA_Abort+0x454>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d036      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a65      	ldr	r2, [pc, #404]	@ (80030a8 <HAL_DMA_Abort+0x458>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d031      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a64      	ldr	r2, [pc, #400]	@ (80030ac <HAL_DMA_Abort+0x45c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d02c      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a62      	ldr	r2, [pc, #392]	@ (80030b0 <HAL_DMA_Abort+0x460>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d027      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a61      	ldr	r2, [pc, #388]	@ (80030b4 <HAL_DMA_Abort+0x464>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d022      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a5f      	ldr	r2, [pc, #380]	@ (80030b8 <HAL_DMA_Abort+0x468>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01d      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a5e      	ldr	r2, [pc, #376]	@ (80030bc <HAL_DMA_Abort+0x46c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d018      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80030c0 <HAL_DMA_Abort+0x470>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5b      	ldr	r2, [pc, #364]	@ (80030c4 <HAL_DMA_Abort+0x474>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a59      	ldr	r2, [pc, #356]	@ (80030c8 <HAL_DMA_Abort+0x478>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a58      	ldr	r2, [pc, #352]	@ (80030cc <HAL_DMA_Abort+0x47c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d004      	beq.n	8002f7a <HAL_DMA_Abort+0x32a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a56      	ldr	r2, [pc, #344]	@ (80030d0 <HAL_DMA_Abort+0x480>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <HAL_DMA_Abort+0x33c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e007      	b.n	8002f9c <HAL_DMA_Abort+0x34c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f9c:	e013      	b.n	8002fc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f9e:	f7fe fea7 	bl	8001cf0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d90c      	bls.n	8002fc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e12d      	b.n	8003222 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e5      	bne.n	8002f9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8003094 <HAL_DMA_Abort+0x444>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d04a      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8003098 <HAL_DMA_Abort+0x448>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d045      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	@ (800309c <HAL_DMA_Abort+0x44c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d040      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80030a0 <HAL_DMA_Abort+0x450>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d03b      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a29      	ldr	r2, [pc, #164]	@ (80030a4 <HAL_DMA_Abort+0x454>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d036      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a27      	ldr	r2, [pc, #156]	@ (80030a8 <HAL_DMA_Abort+0x458>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d031      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a26      	ldr	r2, [pc, #152]	@ (80030ac <HAL_DMA_Abort+0x45c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d02c      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a24      	ldr	r2, [pc, #144]	@ (80030b0 <HAL_DMA_Abort+0x460>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d027      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a23      	ldr	r2, [pc, #140]	@ (80030b4 <HAL_DMA_Abort+0x464>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a21      	ldr	r2, [pc, #132]	@ (80030b8 <HAL_DMA_Abort+0x468>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01d      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a20      	ldr	r2, [pc, #128]	@ (80030bc <HAL_DMA_Abort+0x46c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d018      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1e      	ldr	r2, [pc, #120]	@ (80030c0 <HAL_DMA_Abort+0x470>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1d      	ldr	r2, [pc, #116]	@ (80030c4 <HAL_DMA_Abort+0x474>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1b      	ldr	r2, [pc, #108]	@ (80030c8 <HAL_DMA_Abort+0x478>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d009      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1a      	ldr	r2, [pc, #104]	@ (80030cc <HAL_DMA_Abort+0x47c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_DMA_Abort+0x422>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a18      	ldr	r2, [pc, #96]	@ (80030d0 <HAL_DMA_Abort+0x480>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_DMA_Abort+0x426>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_DMA_Abort+0x428>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02b      	beq.n	80030d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003080:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	223f      	movs	r2, #63	@ 0x3f
 800308c:	409a      	lsls	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	e02a      	b.n	80030ea <HAL_DMA_Abort+0x49a>
 8003094:	40020010 	.word	0x40020010
 8003098:	40020028 	.word	0x40020028
 800309c:	40020040 	.word	0x40020040
 80030a0:	40020058 	.word	0x40020058
 80030a4:	40020070 	.word	0x40020070
 80030a8:	40020088 	.word	0x40020088
 80030ac:	400200a0 	.word	0x400200a0
 80030b0:	400200b8 	.word	0x400200b8
 80030b4:	40020410 	.word	0x40020410
 80030b8:	40020428 	.word	0x40020428
 80030bc:	40020440 	.word	0x40020440
 80030c0:	40020458 	.word	0x40020458
 80030c4:	40020470 	.word	0x40020470
 80030c8:	40020488 	.word	0x40020488
 80030cc:	400204a0 	.word	0x400204a0
 80030d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2201      	movs	r2, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a4f      	ldr	r2, [pc, #316]	@ (800322c <HAL_DMA_Abort+0x5dc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d072      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003230 <HAL_DMA_Abort+0x5e0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d06d      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a4c      	ldr	r2, [pc, #304]	@ (8003234 <HAL_DMA_Abort+0x5e4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d068      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a4a      	ldr	r2, [pc, #296]	@ (8003238 <HAL_DMA_Abort+0x5e8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d063      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a49      	ldr	r2, [pc, #292]	@ (800323c <HAL_DMA_Abort+0x5ec>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d05e      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a47      	ldr	r2, [pc, #284]	@ (8003240 <HAL_DMA_Abort+0x5f0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d059      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a46      	ldr	r2, [pc, #280]	@ (8003244 <HAL_DMA_Abort+0x5f4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d054      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a44      	ldr	r2, [pc, #272]	@ (8003248 <HAL_DMA_Abort+0x5f8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d04f      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a43      	ldr	r2, [pc, #268]	@ (800324c <HAL_DMA_Abort+0x5fc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d04a      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a41      	ldr	r2, [pc, #260]	@ (8003250 <HAL_DMA_Abort+0x600>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d045      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a40      	ldr	r2, [pc, #256]	@ (8003254 <HAL_DMA_Abort+0x604>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d040      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3e      	ldr	r2, [pc, #248]	@ (8003258 <HAL_DMA_Abort+0x608>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d03b      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3d      	ldr	r2, [pc, #244]	@ (800325c <HAL_DMA_Abort+0x60c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d036      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3b      	ldr	r2, [pc, #236]	@ (8003260 <HAL_DMA_Abort+0x610>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d031      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a3a      	ldr	r2, [pc, #232]	@ (8003264 <HAL_DMA_Abort+0x614>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d02c      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a38      	ldr	r2, [pc, #224]	@ (8003268 <HAL_DMA_Abort+0x618>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d027      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a37      	ldr	r2, [pc, #220]	@ (800326c <HAL_DMA_Abort+0x61c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d022      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a35      	ldr	r2, [pc, #212]	@ (8003270 <HAL_DMA_Abort+0x620>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01d      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a34      	ldr	r2, [pc, #208]	@ (8003274 <HAL_DMA_Abort+0x624>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d018      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a32      	ldr	r2, [pc, #200]	@ (8003278 <HAL_DMA_Abort+0x628>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a31      	ldr	r2, [pc, #196]	@ (800327c <HAL_DMA_Abort+0x62c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00e      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003280 <HAL_DMA_Abort+0x630>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d009      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003284 <HAL_DMA_Abort+0x634>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_DMA_Abort+0x58a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003288 <HAL_DMA_Abort+0x638>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_DMA_Abort+0x58e>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_DMA_Abort+0x590>
 80031de:	2300      	movs	r3, #0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003204:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800320e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40020010 	.word	0x40020010
 8003230:	40020028 	.word	0x40020028
 8003234:	40020040 	.word	0x40020040
 8003238:	40020058 	.word	0x40020058
 800323c:	40020070 	.word	0x40020070
 8003240:	40020088 	.word	0x40020088
 8003244:	400200a0 	.word	0x400200a0
 8003248:	400200b8 	.word	0x400200b8
 800324c:	40020410 	.word	0x40020410
 8003250:	40020428 	.word	0x40020428
 8003254:	40020440 	.word	0x40020440
 8003258:	40020458 	.word	0x40020458
 800325c:	40020470 	.word	0x40020470
 8003260:	40020488 	.word	0x40020488
 8003264:	400204a0 	.word	0x400204a0
 8003268:	400204b8 	.word	0x400204b8
 800326c:	58025408 	.word	0x58025408
 8003270:	5802541c 	.word	0x5802541c
 8003274:	58025430 	.word	0x58025430
 8003278:	58025444 	.word	0x58025444
 800327c:	58025458 	.word	0x58025458
 8003280:	5802546c 	.word	0x5802546c
 8003284:	58025480 	.word	0x58025480
 8003288:	58025494 	.word	0x58025494

0800328c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e237      	b.n	800370e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d004      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2280      	movs	r2, #128	@ 0x80
 80032ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e22c      	b.n	800370e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5c      	ldr	r2, [pc, #368]	@ (800342c <HAL_DMA_Abort_IT+0x1a0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d04a      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003430 <HAL_DMA_Abort_IT+0x1a4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d045      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a59      	ldr	r2, [pc, #356]	@ (8003434 <HAL_DMA_Abort_IT+0x1a8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d040      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a58      	ldr	r2, [pc, #352]	@ (8003438 <HAL_DMA_Abort_IT+0x1ac>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d03b      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a56      	ldr	r2, [pc, #344]	@ (800343c <HAL_DMA_Abort_IT+0x1b0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d036      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a55      	ldr	r2, [pc, #340]	@ (8003440 <HAL_DMA_Abort_IT+0x1b4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d031      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a53      	ldr	r2, [pc, #332]	@ (8003444 <HAL_DMA_Abort_IT+0x1b8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02c      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a52      	ldr	r2, [pc, #328]	@ (8003448 <HAL_DMA_Abort_IT+0x1bc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d027      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a50      	ldr	r2, [pc, #320]	@ (800344c <HAL_DMA_Abort_IT+0x1c0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d022      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4f      	ldr	r2, [pc, #316]	@ (8003450 <HAL_DMA_Abort_IT+0x1c4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d01d      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4d      	ldr	r2, [pc, #308]	@ (8003454 <HAL_DMA_Abort_IT+0x1c8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d018      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4c      	ldr	r2, [pc, #304]	@ (8003458 <HAL_DMA_Abort_IT+0x1cc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a4a      	ldr	r2, [pc, #296]	@ (800345c <HAL_DMA_Abort_IT+0x1d0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00e      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a49      	ldr	r2, [pc, #292]	@ (8003460 <HAL_DMA_Abort_IT+0x1d4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a47      	ldr	r2, [pc, #284]	@ (8003464 <HAL_DMA_Abort_IT+0x1d8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_DMA_Abort_IT+0xc8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a46      	ldr	r2, [pc, #280]	@ (8003468 <HAL_DMA_Abort_IT+0x1dc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_DMA_Abort_IT+0xcc>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_DMA_Abort_IT+0xce>
 8003358:	2300      	movs	r3, #0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8086 	beq.w	800346c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2204      	movs	r2, #4
 8003364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2f      	ldr	r2, [pc, #188]	@ (800342c <HAL_DMA_Abort_IT+0x1a0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04a      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2e      	ldr	r2, [pc, #184]	@ (8003430 <HAL_DMA_Abort_IT+0x1a4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d045      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2c      	ldr	r2, [pc, #176]	@ (8003434 <HAL_DMA_Abort_IT+0x1a8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d040      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2b      	ldr	r2, [pc, #172]	@ (8003438 <HAL_DMA_Abort_IT+0x1ac>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d03b      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a29      	ldr	r2, [pc, #164]	@ (800343c <HAL_DMA_Abort_IT+0x1b0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d036      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a28      	ldr	r2, [pc, #160]	@ (8003440 <HAL_DMA_Abort_IT+0x1b4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d031      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a26      	ldr	r2, [pc, #152]	@ (8003444 <HAL_DMA_Abort_IT+0x1b8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02c      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a25      	ldr	r2, [pc, #148]	@ (8003448 <HAL_DMA_Abort_IT+0x1bc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d027      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a23      	ldr	r2, [pc, #140]	@ (800344c <HAL_DMA_Abort_IT+0x1c0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d022      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a22      	ldr	r2, [pc, #136]	@ (8003450 <HAL_DMA_Abort_IT+0x1c4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d01d      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a20      	ldr	r2, [pc, #128]	@ (8003454 <HAL_DMA_Abort_IT+0x1c8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d018      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <HAL_DMA_Abort_IT+0x1cc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	@ (800345c <HAL_DMA_Abort_IT+0x1d0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <HAL_DMA_Abort_IT+0x1d4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d009      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003464 <HAL_DMA_Abort_IT+0x1d8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_DMA_Abort_IT+0x17c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a19      	ldr	r2, [pc, #100]	@ (8003468 <HAL_DMA_Abort_IT+0x1dc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <HAL_DMA_Abort_IT+0x18e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e178      	b.n	800370c <HAL_DMA_Abort_IT+0x480>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e16f      	b.n	800370c <HAL_DMA_Abort_IT+0x480>
 800342c:	40020010 	.word	0x40020010
 8003430:	40020028 	.word	0x40020028
 8003434:	40020040 	.word	0x40020040
 8003438:	40020058 	.word	0x40020058
 800343c:	40020070 	.word	0x40020070
 8003440:	40020088 	.word	0x40020088
 8003444:	400200a0 	.word	0x400200a0
 8003448:	400200b8 	.word	0x400200b8
 800344c:	40020410 	.word	0x40020410
 8003450:	40020428 	.word	0x40020428
 8003454:	40020440 	.word	0x40020440
 8003458:	40020458 	.word	0x40020458
 800345c:	40020470 	.word	0x40020470
 8003460:	40020488 	.word	0x40020488
 8003464:	400204a0 	.word	0x400204a0
 8003468:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 020e 	bic.w	r2, r2, #14
 800347a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a6c      	ldr	r2, [pc, #432]	@ (8003634 <HAL_DMA_Abort_IT+0x3a8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d04a      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a6b      	ldr	r2, [pc, #428]	@ (8003638 <HAL_DMA_Abort_IT+0x3ac>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d045      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a69      	ldr	r2, [pc, #420]	@ (800363c <HAL_DMA_Abort_IT+0x3b0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d040      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a68      	ldr	r2, [pc, #416]	@ (8003640 <HAL_DMA_Abort_IT+0x3b4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d03b      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a66      	ldr	r2, [pc, #408]	@ (8003644 <HAL_DMA_Abort_IT+0x3b8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d036      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a65      	ldr	r2, [pc, #404]	@ (8003648 <HAL_DMA_Abort_IT+0x3bc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d031      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a63      	ldr	r2, [pc, #396]	@ (800364c <HAL_DMA_Abort_IT+0x3c0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d02c      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a62      	ldr	r2, [pc, #392]	@ (8003650 <HAL_DMA_Abort_IT+0x3c4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d027      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a60      	ldr	r2, [pc, #384]	@ (8003654 <HAL_DMA_Abort_IT+0x3c8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d022      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a5f      	ldr	r2, [pc, #380]	@ (8003658 <HAL_DMA_Abort_IT+0x3cc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d01d      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a5d      	ldr	r2, [pc, #372]	@ (800365c <HAL_DMA_Abort_IT+0x3d0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d018      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003660 <HAL_DMA_Abort_IT+0x3d4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a5a      	ldr	r2, [pc, #360]	@ (8003664 <HAL_DMA_Abort_IT+0x3d8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00e      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a59      	ldr	r2, [pc, #356]	@ (8003668 <HAL_DMA_Abort_IT+0x3dc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a57      	ldr	r2, [pc, #348]	@ (800366c <HAL_DMA_Abort_IT+0x3e0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_DMA_Abort_IT+0x290>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a56      	ldr	r2, [pc, #344]	@ (8003670 <HAL_DMA_Abort_IT+0x3e4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d108      	bne.n	800352e <HAL_DMA_Abort_IT+0x2a2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e007      	b.n	800353e <HAL_DMA_Abort_IT+0x2b2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a3c      	ldr	r2, [pc, #240]	@ (8003634 <HAL_DMA_Abort_IT+0x3a8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d072      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a3a      	ldr	r2, [pc, #232]	@ (8003638 <HAL_DMA_Abort_IT+0x3ac>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d06d      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a39      	ldr	r2, [pc, #228]	@ (800363c <HAL_DMA_Abort_IT+0x3b0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d068      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a37      	ldr	r2, [pc, #220]	@ (8003640 <HAL_DMA_Abort_IT+0x3b4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d063      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a36      	ldr	r2, [pc, #216]	@ (8003644 <HAL_DMA_Abort_IT+0x3b8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d05e      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a34      	ldr	r2, [pc, #208]	@ (8003648 <HAL_DMA_Abort_IT+0x3bc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d059      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a33      	ldr	r2, [pc, #204]	@ (800364c <HAL_DMA_Abort_IT+0x3c0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d054      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a31      	ldr	r2, [pc, #196]	@ (8003650 <HAL_DMA_Abort_IT+0x3c4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d04f      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a30      	ldr	r2, [pc, #192]	@ (8003654 <HAL_DMA_Abort_IT+0x3c8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d04a      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2e      	ldr	r2, [pc, #184]	@ (8003658 <HAL_DMA_Abort_IT+0x3cc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d045      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2d      	ldr	r2, [pc, #180]	@ (800365c <HAL_DMA_Abort_IT+0x3d0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d040      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003660 <HAL_DMA_Abort_IT+0x3d4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d03b      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003664 <HAL_DMA_Abort_IT+0x3d8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d036      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a28      	ldr	r2, [pc, #160]	@ (8003668 <HAL_DMA_Abort_IT+0x3dc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a27      	ldr	r2, [pc, #156]	@ (800366c <HAL_DMA_Abort_IT+0x3e0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d02c      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a25      	ldr	r2, [pc, #148]	@ (8003670 <HAL_DMA_Abort_IT+0x3e4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d027      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a24      	ldr	r2, [pc, #144]	@ (8003674 <HAL_DMA_Abort_IT+0x3e8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <HAL_DMA_Abort_IT+0x3ec>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01d      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a21      	ldr	r2, [pc, #132]	@ (800367c <HAL_DMA_Abort_IT+0x3f0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d018      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1f      	ldr	r2, [pc, #124]	@ (8003680 <HAL_DMA_Abort_IT+0x3f4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1e      	ldr	r2, [pc, #120]	@ (8003684 <HAL_DMA_Abort_IT+0x3f8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1c      	ldr	r2, [pc, #112]	@ (8003688 <HAL_DMA_Abort_IT+0x3fc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1b      	ldr	r2, [pc, #108]	@ (800368c <HAL_DMA_Abort_IT+0x400>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_DMA_Abort_IT+0x3a2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a19      	ldr	r2, [pc, #100]	@ (8003690 <HAL_DMA_Abort_IT+0x404>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d132      	bne.n	8003694 <HAL_DMA_Abort_IT+0x408>
 800362e:	2301      	movs	r3, #1
 8003630:	e031      	b.n	8003696 <HAL_DMA_Abort_IT+0x40a>
 8003632:	bf00      	nop
 8003634:	40020010 	.word	0x40020010
 8003638:	40020028 	.word	0x40020028
 800363c:	40020040 	.word	0x40020040
 8003640:	40020058 	.word	0x40020058
 8003644:	40020070 	.word	0x40020070
 8003648:	40020088 	.word	0x40020088
 800364c:	400200a0 	.word	0x400200a0
 8003650:	400200b8 	.word	0x400200b8
 8003654:	40020410 	.word	0x40020410
 8003658:	40020428 	.word	0x40020428
 800365c:	40020440 	.word	0x40020440
 8003660:	40020458 	.word	0x40020458
 8003664:	40020470 	.word	0x40020470
 8003668:	40020488 	.word	0x40020488
 800366c:	400204a0 	.word	0x400204a0
 8003670:	400204b8 	.word	0x400204b8
 8003674:	58025408 	.word	0x58025408
 8003678:	5802541c 	.word	0x5802541c
 800367c:	58025430 	.word	0x58025430
 8003680:	58025444 	.word	0x58025444
 8003684:	58025458 	.word	0x58025458
 8003688:	5802546c 	.word	0x5802546c
 800368c:	58025480 	.word	0x58025480
 8003690:	58025494 	.word	0x58025494
 8003694:	2300      	movs	r3, #0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d028      	beq.n	80036ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2201      	movs	r2, #1
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80036c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop

08003718 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	@ 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003724:	4b67      	ldr	r3, [pc, #412]	@ (80038c4 <HAL_DMA_IRQHandler+0x1ac>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a67      	ldr	r2, [pc, #412]	@ (80038c8 <HAL_DMA_IRQHandler+0x1b0>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0a9b      	lsrs	r3, r3, #10
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a5f      	ldr	r2, [pc, #380]	@ (80038cc <HAL_DMA_IRQHandler+0x1b4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d04a      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5d      	ldr	r2, [pc, #372]	@ (80038d0 <HAL_DMA_IRQHandler+0x1b8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d045      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5c      	ldr	r2, [pc, #368]	@ (80038d4 <HAL_DMA_IRQHandler+0x1bc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d040      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a5a      	ldr	r2, [pc, #360]	@ (80038d8 <HAL_DMA_IRQHandler+0x1c0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d03b      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a59      	ldr	r2, [pc, #356]	@ (80038dc <HAL_DMA_IRQHandler+0x1c4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d036      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a57      	ldr	r2, [pc, #348]	@ (80038e0 <HAL_DMA_IRQHandler+0x1c8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d031      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a56      	ldr	r2, [pc, #344]	@ (80038e4 <HAL_DMA_IRQHandler+0x1cc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d02c      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a54      	ldr	r2, [pc, #336]	@ (80038e8 <HAL_DMA_IRQHandler+0x1d0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d027      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a53      	ldr	r2, [pc, #332]	@ (80038ec <HAL_DMA_IRQHandler+0x1d4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a51      	ldr	r2, [pc, #324]	@ (80038f0 <HAL_DMA_IRQHandler+0x1d8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01d      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a50      	ldr	r2, [pc, #320]	@ (80038f4 <HAL_DMA_IRQHandler+0x1dc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a4e      	ldr	r2, [pc, #312]	@ (80038f8 <HAL_DMA_IRQHandler+0x1e0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a4d      	ldr	r2, [pc, #308]	@ (80038fc <HAL_DMA_IRQHandler+0x1e4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003900 <HAL_DMA_IRQHandler+0x1e8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a4a      	ldr	r2, [pc, #296]	@ (8003904 <HAL_DMA_IRQHandler+0x1ec>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_DMA_IRQHandler+0xd2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a48      	ldr	r2, [pc, #288]	@ (8003908 <HAL_DMA_IRQHandler+0x1f0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_DMA_IRQHandler+0xd6>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_DMA_IRQHandler+0xd8>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 842b 	beq.w	800404c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2208      	movs	r2, #8
 8003800:	409a      	lsls	r2, r3
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80a2 	beq.w	8003950 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2e      	ldr	r2, [pc, #184]	@ (80038cc <HAL_DMA_IRQHandler+0x1b4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d04a      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2d      	ldr	r2, [pc, #180]	@ (80038d0 <HAL_DMA_IRQHandler+0x1b8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d045      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2b      	ldr	r2, [pc, #172]	@ (80038d4 <HAL_DMA_IRQHandler+0x1bc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d040      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2a      	ldr	r2, [pc, #168]	@ (80038d8 <HAL_DMA_IRQHandler+0x1c0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d03b      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a28      	ldr	r2, [pc, #160]	@ (80038dc <HAL_DMA_IRQHandler+0x1c4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d036      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a27      	ldr	r2, [pc, #156]	@ (80038e0 <HAL_DMA_IRQHandler+0x1c8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d031      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a25      	ldr	r2, [pc, #148]	@ (80038e4 <HAL_DMA_IRQHandler+0x1cc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02c      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a24      	ldr	r2, [pc, #144]	@ (80038e8 <HAL_DMA_IRQHandler+0x1d0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d027      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a22      	ldr	r2, [pc, #136]	@ (80038ec <HAL_DMA_IRQHandler+0x1d4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d022      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a21      	ldr	r2, [pc, #132]	@ (80038f0 <HAL_DMA_IRQHandler+0x1d8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d01d      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1f      	ldr	r2, [pc, #124]	@ (80038f4 <HAL_DMA_IRQHandler+0x1dc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1e      	ldr	r2, [pc, #120]	@ (80038f8 <HAL_DMA_IRQHandler+0x1e0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1c      	ldr	r2, [pc, #112]	@ (80038fc <HAL_DMA_IRQHandler+0x1e4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00e      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1b      	ldr	r2, [pc, #108]	@ (8003900 <HAL_DMA_IRQHandler+0x1e8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a19      	ldr	r2, [pc, #100]	@ (8003904 <HAL_DMA_IRQHandler+0x1ec>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_DMA_IRQHandler+0x194>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a18      	ldr	r2, [pc, #96]	@ (8003908 <HAL_DMA_IRQHandler+0x1f0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d12f      	bne.n	800390c <HAL_DMA_IRQHandler+0x1f4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf14      	ite	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	2300      	moveq	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	e02e      	b.n	8003920 <HAL_DMA_IRQHandler+0x208>
 80038c2:	bf00      	nop
 80038c4:	24000000 	.word	0x24000000
 80038c8:	1b4e81b5 	.word	0x1b4e81b5
 80038cc:	40020010 	.word	0x40020010
 80038d0:	40020028 	.word	0x40020028
 80038d4:	40020040 	.word	0x40020040
 80038d8:	40020058 	.word	0x40020058
 80038dc:	40020070 	.word	0x40020070
 80038e0:	40020088 	.word	0x40020088
 80038e4:	400200a0 	.word	0x400200a0
 80038e8:	400200b8 	.word	0x400200b8
 80038ec:	40020410 	.word	0x40020410
 80038f0:	40020428 	.word	0x40020428
 80038f4:	40020440 	.word	0x40020440
 80038f8:	40020458 	.word	0x40020458
 80038fc:	40020470 	.word	0x40020470
 8003900:	40020488 	.word	0x40020488
 8003904:	400204a0 	.word	0x400204a0
 8003908:	400204b8 	.word	0x400204b8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf14      	ite	ne
 800391a:	2301      	movne	r3, #1
 800391c:	2300      	moveq	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0204 	bic.w	r2, r2, #4
 8003932:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	2208      	movs	r2, #8
 800393e:	409a      	lsls	r2, r3
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	fa22 f303 	lsr.w	r3, r2, r3
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d06e      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a69      	ldr	r2, [pc, #420]	@ (8003b10 <HAL_DMA_IRQHandler+0x3f8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d04a      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a67      	ldr	r2, [pc, #412]	@ (8003b14 <HAL_DMA_IRQHandler+0x3fc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d045      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a66      	ldr	r2, [pc, #408]	@ (8003b18 <HAL_DMA_IRQHandler+0x400>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d040      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a64      	ldr	r2, [pc, #400]	@ (8003b1c <HAL_DMA_IRQHandler+0x404>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d03b      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a63      	ldr	r2, [pc, #396]	@ (8003b20 <HAL_DMA_IRQHandler+0x408>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d036      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a61      	ldr	r2, [pc, #388]	@ (8003b24 <HAL_DMA_IRQHandler+0x40c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d031      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a60      	ldr	r2, [pc, #384]	@ (8003b28 <HAL_DMA_IRQHandler+0x410>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d02c      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b2c <HAL_DMA_IRQHandler+0x414>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d027      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003b30 <HAL_DMA_IRQHandler+0x418>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d022      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a5b      	ldr	r2, [pc, #364]	@ (8003b34 <HAL_DMA_IRQHandler+0x41c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01d      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003b38 <HAL_DMA_IRQHandler+0x420>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d018      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a58      	ldr	r2, [pc, #352]	@ (8003b3c <HAL_DMA_IRQHandler+0x424>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a57      	ldr	r2, [pc, #348]	@ (8003b40 <HAL_DMA_IRQHandler+0x428>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00e      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a55      	ldr	r2, [pc, #340]	@ (8003b44 <HAL_DMA_IRQHandler+0x42c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d009      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a54      	ldr	r2, [pc, #336]	@ (8003b48 <HAL_DMA_IRQHandler+0x430>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x2ee>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a52      	ldr	r2, [pc, #328]	@ (8003b4c <HAL_DMA_IRQHandler+0x434>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10a      	bne.n	8003a1c <HAL_DMA_IRQHandler+0x304>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e003      	b.n	8003a24 <HAL_DMA_IRQHandler+0x30c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2201      	movs	r2, #1
 8003a32:	409a      	lsls	r2, r3
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3c:	f043 0202 	orr.w	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 808f 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b10 <HAL_DMA_IRQHandler+0x3f8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d04a      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2a      	ldr	r2, [pc, #168]	@ (8003b14 <HAL_DMA_IRQHandler+0x3fc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d045      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a29      	ldr	r2, [pc, #164]	@ (8003b18 <HAL_DMA_IRQHandler+0x400>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d040      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a27      	ldr	r2, [pc, #156]	@ (8003b1c <HAL_DMA_IRQHandler+0x404>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d03b      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a26      	ldr	r2, [pc, #152]	@ (8003b20 <HAL_DMA_IRQHandler+0x408>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d036      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a24      	ldr	r2, [pc, #144]	@ (8003b24 <HAL_DMA_IRQHandler+0x40c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d031      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a23      	ldr	r2, [pc, #140]	@ (8003b28 <HAL_DMA_IRQHandler+0x410>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d02c      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a21      	ldr	r2, [pc, #132]	@ (8003b2c <HAL_DMA_IRQHandler+0x414>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d027      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a20      	ldr	r2, [pc, #128]	@ (8003b30 <HAL_DMA_IRQHandler+0x418>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d022      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b34 <HAL_DMA_IRQHandler+0x41c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01d      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b38 <HAL_DMA_IRQHandler+0x420>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d018      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b3c <HAL_DMA_IRQHandler+0x424>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b40 <HAL_DMA_IRQHandler+0x428>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	@ (8003b44 <HAL_DMA_IRQHandler+0x42c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a17      	ldr	r2, [pc, #92]	@ (8003b48 <HAL_DMA_IRQHandler+0x430>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_DMA_IRQHandler+0x3e2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a15      	ldr	r2, [pc, #84]	@ (8003b4c <HAL_DMA_IRQHandler+0x434>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d12a      	bne.n	8003b50 <HAL_DMA_IRQHandler+0x438>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf14      	ite	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	2300      	moveq	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e023      	b.n	8003b58 <HAL_DMA_IRQHandler+0x440>
 8003b10:	40020010 	.word	0x40020010
 8003b14:	40020028 	.word	0x40020028
 8003b18:	40020040 	.word	0x40020040
 8003b1c:	40020058 	.word	0x40020058
 8003b20:	40020070 	.word	0x40020070
 8003b24:	40020088 	.word	0x40020088
 8003b28:	400200a0 	.word	0x400200a0
 8003b2c:	400200b8 	.word	0x400200b8
 8003b30:	40020410 	.word	0x40020410
 8003b34:	40020428 	.word	0x40020428
 8003b38:	40020440 	.word	0x40020440
 8003b3c:	40020458 	.word	0x40020458
 8003b40:	40020470 	.word	0x40020470
 8003b44:	40020488 	.word	0x40020488
 8003b48:	400204a0 	.word	0x400204a0
 8003b4c:	400204b8 	.word	0x400204b8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2204      	movs	r2, #4
 8003b66:	409a      	lsls	r2, r3
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b70:	f043 0204 	orr.w	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2210      	movs	r2, #16
 8003b82:	409a      	lsls	r2, r3
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80a6 	beq.w	8003cda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a85      	ldr	r2, [pc, #532]	@ (8003da8 <HAL_DMA_IRQHandler+0x690>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d04a      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a83      	ldr	r2, [pc, #524]	@ (8003dac <HAL_DMA_IRQHandler+0x694>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d045      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a82      	ldr	r2, [pc, #520]	@ (8003db0 <HAL_DMA_IRQHandler+0x698>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d040      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a80      	ldr	r2, [pc, #512]	@ (8003db4 <HAL_DMA_IRQHandler+0x69c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d03b      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7f      	ldr	r2, [pc, #508]	@ (8003db8 <HAL_DMA_IRQHandler+0x6a0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d036      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a7d      	ldr	r2, [pc, #500]	@ (8003dbc <HAL_DMA_IRQHandler+0x6a4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d031      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a7c      	ldr	r2, [pc, #496]	@ (8003dc0 <HAL_DMA_IRQHandler+0x6a8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d02c      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a7a      	ldr	r2, [pc, #488]	@ (8003dc4 <HAL_DMA_IRQHandler+0x6ac>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d027      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a79      	ldr	r2, [pc, #484]	@ (8003dc8 <HAL_DMA_IRQHandler+0x6b0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a77      	ldr	r2, [pc, #476]	@ (8003dcc <HAL_DMA_IRQHandler+0x6b4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01d      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a76      	ldr	r2, [pc, #472]	@ (8003dd0 <HAL_DMA_IRQHandler+0x6b8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a74      	ldr	r2, [pc, #464]	@ (8003dd4 <HAL_DMA_IRQHandler+0x6bc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a73      	ldr	r2, [pc, #460]	@ (8003dd8 <HAL_DMA_IRQHandler+0x6c0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a71      	ldr	r2, [pc, #452]	@ (8003ddc <HAL_DMA_IRQHandler+0x6c4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a70      	ldr	r2, [pc, #448]	@ (8003de0 <HAL_DMA_IRQHandler+0x6c8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x516>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6e      	ldr	r2, [pc, #440]	@ (8003de4 <HAL_DMA_IRQHandler+0x6cc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10a      	bne.n	8003c44 <HAL_DMA_IRQHandler+0x52c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e009      	b.n	8003c58 <HAL_DMA_IRQHandler+0x540>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bf14      	ite	ne
 8003c52:	2301      	movne	r3, #1
 8003c54:	2300      	moveq	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d03e      	beq.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2210      	movs	r2, #16
 8003c66:	409a      	lsls	r2, r3
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d108      	bne.n	8003c9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d024      	beq.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
 8003c98:	e01f      	b.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01b      	beq.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
 8003caa:	e016      	b.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d107      	bne.n	8003cca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0208 	bic.w	r2, r2, #8
 8003cc8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8110 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8003da8 <HAL_DMA_IRQHandler+0x690>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d04a      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8003dac <HAL_DMA_IRQHandler+0x694>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d045      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a29      	ldr	r2, [pc, #164]	@ (8003db0 <HAL_DMA_IRQHandler+0x698>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d040      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a28      	ldr	r2, [pc, #160]	@ (8003db4 <HAL_DMA_IRQHandler+0x69c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d03b      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a26      	ldr	r2, [pc, #152]	@ (8003db8 <HAL_DMA_IRQHandler+0x6a0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d036      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a25      	ldr	r2, [pc, #148]	@ (8003dbc <HAL_DMA_IRQHandler+0x6a4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d031      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a23      	ldr	r2, [pc, #140]	@ (8003dc0 <HAL_DMA_IRQHandler+0x6a8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02c      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a22      	ldr	r2, [pc, #136]	@ (8003dc4 <HAL_DMA_IRQHandler+0x6ac>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d027      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a20      	ldr	r2, [pc, #128]	@ (8003dc8 <HAL_DMA_IRQHandler+0x6b0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d022      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dcc <HAL_DMA_IRQHandler+0x6b4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d01d      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd0 <HAL_DMA_IRQHandler+0x6b8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d018      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd4 <HAL_DMA_IRQHandler+0x6bc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd8 <HAL_DMA_IRQHandler+0x6c0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00e      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a19      	ldr	r2, [pc, #100]	@ (8003ddc <HAL_DMA_IRQHandler+0x6c4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d009      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a17      	ldr	r2, [pc, #92]	@ (8003de0 <HAL_DMA_IRQHandler+0x6c8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x678>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a16      	ldr	r2, [pc, #88]	@ (8003de4 <HAL_DMA_IRQHandler+0x6cc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d12b      	bne.n	8003de8 <HAL_DMA_IRQHandler+0x6d0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e02a      	b.n	8003dfc <HAL_DMA_IRQHandler+0x6e4>
 8003da6:	bf00      	nop
 8003da8:	40020010 	.word	0x40020010
 8003dac:	40020028 	.word	0x40020028
 8003db0:	40020040 	.word	0x40020040
 8003db4:	40020058 	.word	0x40020058
 8003db8:	40020070 	.word	0x40020070
 8003dbc:	40020088 	.word	0x40020088
 8003dc0:	400200a0 	.word	0x400200a0
 8003dc4:	400200b8 	.word	0x400200b8
 8003dc8:	40020410 	.word	0x40020410
 8003dcc:	40020428 	.word	0x40020428
 8003dd0:	40020440 	.word	0x40020440
 8003dd4:	40020458 	.word	0x40020458
 8003dd8:	40020470 	.word	0x40020470
 8003ddc:	40020488 	.word	0x40020488
 8003de0:	400204a0 	.word	0x400204a0
 8003de4:	400204b8 	.word	0x400204b8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8087 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d139      	bne.n	8003e92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0216 	bic.w	r2, r2, #22
 8003e2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <HAL_DMA_IRQHandler+0x736>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0208 	bic.w	r2, r2, #8
 8003e5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	223f      	movs	r2, #63	@ 0x3f
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8382 	beq.w	800458c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
          }
          return;
 8003e90:	e37c      	b.n	800458c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d108      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d02c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	4798      	blx	r3
 8003ebe:	e027      	b.n	8003f10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d023      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	4798      	blx	r3
 8003ed0:	e01e      	b.n	8003f10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10f      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0210 	bic.w	r2, r2, #16
 8003eee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 833e 	beq.w	8004596 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8088 	beq.w	8004038 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a89      	ldr	r2, [pc, #548]	@ (800415c <HAL_DMA_IRQHandler+0xa44>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d04a      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a88      	ldr	r2, [pc, #544]	@ (8004160 <HAL_DMA_IRQHandler+0xa48>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d045      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a86      	ldr	r2, [pc, #536]	@ (8004164 <HAL_DMA_IRQHandler+0xa4c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d040      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a85      	ldr	r2, [pc, #532]	@ (8004168 <HAL_DMA_IRQHandler+0xa50>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d03b      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a83      	ldr	r2, [pc, #524]	@ (800416c <HAL_DMA_IRQHandler+0xa54>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d036      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a82      	ldr	r2, [pc, #520]	@ (8004170 <HAL_DMA_IRQHandler+0xa58>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d031      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a80      	ldr	r2, [pc, #512]	@ (8004174 <HAL_DMA_IRQHandler+0xa5c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d02c      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a7f      	ldr	r2, [pc, #508]	@ (8004178 <HAL_DMA_IRQHandler+0xa60>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d027      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a7d      	ldr	r2, [pc, #500]	@ (800417c <HAL_DMA_IRQHandler+0xa64>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d022      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a7c      	ldr	r2, [pc, #496]	@ (8004180 <HAL_DMA_IRQHandler+0xa68>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01d      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a7a      	ldr	r2, [pc, #488]	@ (8004184 <HAL_DMA_IRQHandler+0xa6c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d018      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a79      	ldr	r2, [pc, #484]	@ (8004188 <HAL_DMA_IRQHandler+0xa70>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a77      	ldr	r2, [pc, #476]	@ (800418c <HAL_DMA_IRQHandler+0xa74>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a76      	ldr	r2, [pc, #472]	@ (8004190 <HAL_DMA_IRQHandler+0xa78>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d009      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a74      	ldr	r2, [pc, #464]	@ (8004194 <HAL_DMA_IRQHandler+0xa7c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_DMA_IRQHandler+0x8b8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a73      	ldr	r2, [pc, #460]	@ (8004198 <HAL_DMA_IRQHandler+0xa80>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d108      	bne.n	8003fe2 <HAL_DMA_IRQHandler+0x8ca>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e007      	b.n	8003ff2 <HAL_DMA_IRQHandler+0x8da>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d307      	bcc.n	800400e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f2      	bne.n	8003ff2 <HAL_DMA_IRQHandler+0x8da>
 800400c:	e000      	b.n	8004010 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800400e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2203      	movs	r2, #3
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004026:	e003      	b.n	8004030 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 82aa 	beq.w	8004596 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
 800404a:	e2a4      	b.n	8004596 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a52      	ldr	r2, [pc, #328]	@ (800419c <HAL_DMA_IRQHandler+0xa84>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d04a      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a51      	ldr	r2, [pc, #324]	@ (80041a0 <HAL_DMA_IRQHandler+0xa88>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d045      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a4f      	ldr	r2, [pc, #316]	@ (80041a4 <HAL_DMA_IRQHandler+0xa8c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d040      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a4e      	ldr	r2, [pc, #312]	@ (80041a8 <HAL_DMA_IRQHandler+0xa90>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d03b      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a4c      	ldr	r2, [pc, #304]	@ (80041ac <HAL_DMA_IRQHandler+0xa94>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d036      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a4b      	ldr	r2, [pc, #300]	@ (80041b0 <HAL_DMA_IRQHandler+0xa98>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d031      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a49      	ldr	r2, [pc, #292]	@ (80041b4 <HAL_DMA_IRQHandler+0xa9c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d02c      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a48      	ldr	r2, [pc, #288]	@ (80041b8 <HAL_DMA_IRQHandler+0xaa0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d027      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a46      	ldr	r2, [pc, #280]	@ (80041bc <HAL_DMA_IRQHandler+0xaa4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d022      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a45      	ldr	r2, [pc, #276]	@ (80041c0 <HAL_DMA_IRQHandler+0xaa8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d01d      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a43      	ldr	r2, [pc, #268]	@ (80041c4 <HAL_DMA_IRQHandler+0xaac>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d018      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a42      	ldr	r2, [pc, #264]	@ (80041c8 <HAL_DMA_IRQHandler+0xab0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a40      	ldr	r2, [pc, #256]	@ (80041cc <HAL_DMA_IRQHandler+0xab4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00e      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a3f      	ldr	r2, [pc, #252]	@ (80041d0 <HAL_DMA_IRQHandler+0xab8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d009      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a3d      	ldr	r2, [pc, #244]	@ (80041d4 <HAL_DMA_IRQHandler+0xabc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d004      	beq.n	80040ec <HAL_DMA_IRQHandler+0x9d4>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a3c      	ldr	r2, [pc, #240]	@ (80041d8 <HAL_DMA_IRQHandler+0xac0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d101      	bne.n	80040f0 <HAL_DMA_IRQHandler+0x9d8>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <HAL_DMA_IRQHandler+0x9da>
 80040f0:	2300      	movs	r3, #0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 824f 	beq.w	8004596 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	2204      	movs	r2, #4
 800410a:	409a      	lsls	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80dd 	beq.w	80042d0 <HAL_DMA_IRQHandler+0xbb8>
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80d7 	beq.w	80042d0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2204      	movs	r2, #4
 800412c:	409a      	lsls	r2, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d059      	beq.n	80041f0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d14a      	bne.n	80041dc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8220 	beq.w	8004590 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004158:	e21a      	b.n	8004590 <HAL_DMA_IRQHandler+0xe78>
 800415a:	bf00      	nop
 800415c:	40020010 	.word	0x40020010
 8004160:	40020028 	.word	0x40020028
 8004164:	40020040 	.word	0x40020040
 8004168:	40020058 	.word	0x40020058
 800416c:	40020070 	.word	0x40020070
 8004170:	40020088 	.word	0x40020088
 8004174:	400200a0 	.word	0x400200a0
 8004178:	400200b8 	.word	0x400200b8
 800417c:	40020410 	.word	0x40020410
 8004180:	40020428 	.word	0x40020428
 8004184:	40020440 	.word	0x40020440
 8004188:	40020458 	.word	0x40020458
 800418c:	40020470 	.word	0x40020470
 8004190:	40020488 	.word	0x40020488
 8004194:	400204a0 	.word	0x400204a0
 8004198:	400204b8 	.word	0x400204b8
 800419c:	48022c08 	.word	0x48022c08
 80041a0:	48022c1c 	.word	0x48022c1c
 80041a4:	48022c30 	.word	0x48022c30
 80041a8:	48022c44 	.word	0x48022c44
 80041ac:	48022c58 	.word	0x48022c58
 80041b0:	48022c6c 	.word	0x48022c6c
 80041b4:	48022c80 	.word	0x48022c80
 80041b8:	48022c94 	.word	0x48022c94
 80041bc:	58025408 	.word	0x58025408
 80041c0:	5802541c 	.word	0x5802541c
 80041c4:	58025430 	.word	0x58025430
 80041c8:	58025444 	.word	0x58025444
 80041cc:	58025458 	.word	0x58025458
 80041d0:	5802546c 	.word	0x5802546c
 80041d4:	58025480 	.word	0x58025480
 80041d8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 81d5 	beq.w	8004590 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ee:	e1cf      	b.n	8004590 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d160      	bne.n	80042bc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a7f      	ldr	r2, [pc, #508]	@ (80043fc <HAL_DMA_IRQHandler+0xce4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d04a      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7d      	ldr	r2, [pc, #500]	@ (8004400 <HAL_DMA_IRQHandler+0xce8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d045      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a7c      	ldr	r2, [pc, #496]	@ (8004404 <HAL_DMA_IRQHandler+0xcec>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d040      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a7a      	ldr	r2, [pc, #488]	@ (8004408 <HAL_DMA_IRQHandler+0xcf0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d03b      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a79      	ldr	r2, [pc, #484]	@ (800440c <HAL_DMA_IRQHandler+0xcf4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d036      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a77      	ldr	r2, [pc, #476]	@ (8004410 <HAL_DMA_IRQHandler+0xcf8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d031      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a76      	ldr	r2, [pc, #472]	@ (8004414 <HAL_DMA_IRQHandler+0xcfc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d02c      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a74      	ldr	r2, [pc, #464]	@ (8004418 <HAL_DMA_IRQHandler+0xd00>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d027      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a73      	ldr	r2, [pc, #460]	@ (800441c <HAL_DMA_IRQHandler+0xd04>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d022      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a71      	ldr	r2, [pc, #452]	@ (8004420 <HAL_DMA_IRQHandler+0xd08>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01d      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a70      	ldr	r2, [pc, #448]	@ (8004424 <HAL_DMA_IRQHandler+0xd0c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d018      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a6e      	ldr	r2, [pc, #440]	@ (8004428 <HAL_DMA_IRQHandler+0xd10>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6d      	ldr	r2, [pc, #436]	@ (800442c <HAL_DMA_IRQHandler+0xd14>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00e      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a6b      	ldr	r2, [pc, #428]	@ (8004430 <HAL_DMA_IRQHandler+0xd18>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6a      	ldr	r2, [pc, #424]	@ (8004434 <HAL_DMA_IRQHandler+0xd1c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_DMA_IRQHandler+0xb82>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a68      	ldr	r2, [pc, #416]	@ (8004438 <HAL_DMA_IRQHandler+0xd20>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <HAL_DMA_IRQHandler+0xb94>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0208 	bic.w	r2, r2, #8
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e007      	b.n	80042bc <HAL_DMA_IRQHandler+0xba4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0204 	bic.w	r2, r2, #4
 80042ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8165 	beq.w	8004590 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ce:	e15f      	b.n	8004590 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2202      	movs	r2, #2
 80042da:	409a      	lsls	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80c5 	beq.w	8004470 <HAL_DMA_IRQHandler+0xd58>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80bf 	beq.w	8004470 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2202      	movs	r2, #2
 80042fc:	409a      	lsls	r2, r3
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d018      	beq.n	800433e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 813a 	beq.w	8004594 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004328:	e134      	b.n	8004594 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8130 	beq.w	8004594 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800433c:	e12a      	b.n	8004594 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	f040 8089 	bne.w	800445c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2b      	ldr	r2, [pc, #172]	@ (80043fc <HAL_DMA_IRQHandler+0xce4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d04a      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a29      	ldr	r2, [pc, #164]	@ (8004400 <HAL_DMA_IRQHandler+0xce8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d045      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a28      	ldr	r2, [pc, #160]	@ (8004404 <HAL_DMA_IRQHandler+0xcec>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d040      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a26      	ldr	r2, [pc, #152]	@ (8004408 <HAL_DMA_IRQHandler+0xcf0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d03b      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a25      	ldr	r2, [pc, #148]	@ (800440c <HAL_DMA_IRQHandler+0xcf4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d036      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a23      	ldr	r2, [pc, #140]	@ (8004410 <HAL_DMA_IRQHandler+0xcf8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d031      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a22      	ldr	r2, [pc, #136]	@ (8004414 <HAL_DMA_IRQHandler+0xcfc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d02c      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a20      	ldr	r2, [pc, #128]	@ (8004418 <HAL_DMA_IRQHandler+0xd00>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d027      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <HAL_DMA_IRQHandler+0xd04>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d022      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004420 <HAL_DMA_IRQHandler+0xd08>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01d      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004424 <HAL_DMA_IRQHandler+0xd0c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d018      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004428 <HAL_DMA_IRQHandler+0xd10>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d013      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a19      	ldr	r2, [pc, #100]	@ (800442c <HAL_DMA_IRQHandler+0xd14>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00e      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a17      	ldr	r2, [pc, #92]	@ (8004430 <HAL_DMA_IRQHandler+0xd18>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d009      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a16      	ldr	r2, [pc, #88]	@ (8004434 <HAL_DMA_IRQHandler+0xd1c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_DMA_IRQHandler+0xcd2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a14      	ldr	r2, [pc, #80]	@ (8004438 <HAL_DMA_IRQHandler+0xd20>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d128      	bne.n	800443c <HAL_DMA_IRQHandler+0xd24>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0214 	bic.w	r2, r2, #20
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e027      	b.n	800444c <HAL_DMA_IRQHandler+0xd34>
 80043fc:	40020010 	.word	0x40020010
 8004400:	40020028 	.word	0x40020028
 8004404:	40020040 	.word	0x40020040
 8004408:	40020058 	.word	0x40020058
 800440c:	40020070 	.word	0x40020070
 8004410:	40020088 	.word	0x40020088
 8004414:	400200a0 	.word	0x400200a0
 8004418:	400200b8 	.word	0x400200b8
 800441c:	40020410 	.word	0x40020410
 8004420:	40020428 	.word	0x40020428
 8004424:	40020440 	.word	0x40020440
 8004428:	40020458 	.word	0x40020458
 800442c:	40020470 	.word	0x40020470
 8004430:	40020488 	.word	0x40020488
 8004434:	400204a0 	.word	0x400204a0
 8004438:	400204b8 	.word	0x400204b8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 020a 	bic.w	r2, r2, #10
 800444a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8097 	beq.w	8004594 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800446e:	e091      	b.n	8004594 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	2208      	movs	r2, #8
 800447a:	409a      	lsls	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4013      	ands	r3, r2
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8088 	beq.w	8004596 <HAL_DMA_IRQHandler+0xe7e>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8082 	beq.w	8004596 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a41      	ldr	r2, [pc, #260]	@ (800459c <HAL_DMA_IRQHandler+0xe84>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d04a      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3f      	ldr	r2, [pc, #252]	@ (80045a0 <HAL_DMA_IRQHandler+0xe88>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d045      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3e      	ldr	r2, [pc, #248]	@ (80045a4 <HAL_DMA_IRQHandler+0xe8c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d040      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a3c      	ldr	r2, [pc, #240]	@ (80045a8 <HAL_DMA_IRQHandler+0xe90>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d03b      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3b      	ldr	r2, [pc, #236]	@ (80045ac <HAL_DMA_IRQHandler+0xe94>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d036      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a39      	ldr	r2, [pc, #228]	@ (80045b0 <HAL_DMA_IRQHandler+0xe98>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d031      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a38      	ldr	r2, [pc, #224]	@ (80045b4 <HAL_DMA_IRQHandler+0xe9c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d02c      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a36      	ldr	r2, [pc, #216]	@ (80045b8 <HAL_DMA_IRQHandler+0xea0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d027      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a35      	ldr	r2, [pc, #212]	@ (80045bc <HAL_DMA_IRQHandler+0xea4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d022      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a33      	ldr	r2, [pc, #204]	@ (80045c0 <HAL_DMA_IRQHandler+0xea8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01d      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a32      	ldr	r2, [pc, #200]	@ (80045c4 <HAL_DMA_IRQHandler+0xeac>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d018      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a30      	ldr	r2, [pc, #192]	@ (80045c8 <HAL_DMA_IRQHandler+0xeb0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2f      	ldr	r2, [pc, #188]	@ (80045cc <HAL_DMA_IRQHandler+0xeb4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00e      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2d      	ldr	r2, [pc, #180]	@ (80045d0 <HAL_DMA_IRQHandler+0xeb8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d009      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2c      	ldr	r2, [pc, #176]	@ (80045d4 <HAL_DMA_IRQHandler+0xebc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_DMA_IRQHandler+0xe1a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2a      	ldr	r2, [pc, #168]	@ (80045d8 <HAL_DMA_IRQHandler+0xec0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <HAL_DMA_IRQHandler+0xe2c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 021c 	bic.w	r2, r2, #28
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e007      	b.n	8004554 <HAL_DMA_IRQHandler+0xe3c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 020e 	bic.w	r2, r2, #14
 8004552:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2201      	movs	r2, #1
 800455e:	409a      	lsls	r2, r3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
 800458a:	e004      	b.n	8004596 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800458c:	bf00      	nop
 800458e:	e002      	b.n	8004596 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004590:	bf00      	nop
 8004592:	e000      	b.n	8004596 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004594:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004596:	3728      	adds	r7, #40	@ 0x28
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40020010 	.word	0x40020010
 80045a0:	40020028 	.word	0x40020028
 80045a4:	40020040 	.word	0x40020040
 80045a8:	40020058 	.word	0x40020058
 80045ac:	40020070 	.word	0x40020070
 80045b0:	40020088 	.word	0x40020088
 80045b4:	400200a0 	.word	0x400200a0
 80045b8:	400200b8 	.word	0x400200b8
 80045bc:	40020410 	.word	0x40020410
 80045c0:	40020428 	.word	0x40020428
 80045c4:	40020440 	.word	0x40020440
 80045c8:	40020458 	.word	0x40020458
 80045cc:	40020470 	.word	0x40020470
 80045d0:	40020488 	.word	0x40020488
 80045d4:	400204a0 	.word	0x400204a0
 80045d8:	400204b8 	.word	0x400204b8

080045dc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a7f      	ldr	r2, [pc, #508]	@ (8004810 <DMA_SetConfig+0x21c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d072      	beq.n	80046fe <DMA_SetConfig+0x10a>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a7d      	ldr	r2, [pc, #500]	@ (8004814 <DMA_SetConfig+0x220>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d06d      	beq.n	80046fe <DMA_SetConfig+0x10a>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a7c      	ldr	r2, [pc, #496]	@ (8004818 <DMA_SetConfig+0x224>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d068      	beq.n	80046fe <DMA_SetConfig+0x10a>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a7a      	ldr	r2, [pc, #488]	@ (800481c <DMA_SetConfig+0x228>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d063      	beq.n	80046fe <DMA_SetConfig+0x10a>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a79      	ldr	r2, [pc, #484]	@ (8004820 <DMA_SetConfig+0x22c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d05e      	beq.n	80046fe <DMA_SetConfig+0x10a>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a77      	ldr	r2, [pc, #476]	@ (8004824 <DMA_SetConfig+0x230>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d059      	beq.n	80046fe <DMA_SetConfig+0x10a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a76      	ldr	r2, [pc, #472]	@ (8004828 <DMA_SetConfig+0x234>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d054      	beq.n	80046fe <DMA_SetConfig+0x10a>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a74      	ldr	r2, [pc, #464]	@ (800482c <DMA_SetConfig+0x238>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d04f      	beq.n	80046fe <DMA_SetConfig+0x10a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a73      	ldr	r2, [pc, #460]	@ (8004830 <DMA_SetConfig+0x23c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d04a      	beq.n	80046fe <DMA_SetConfig+0x10a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a71      	ldr	r2, [pc, #452]	@ (8004834 <DMA_SetConfig+0x240>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d045      	beq.n	80046fe <DMA_SetConfig+0x10a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a70      	ldr	r2, [pc, #448]	@ (8004838 <DMA_SetConfig+0x244>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d040      	beq.n	80046fe <DMA_SetConfig+0x10a>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a6e      	ldr	r2, [pc, #440]	@ (800483c <DMA_SetConfig+0x248>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d03b      	beq.n	80046fe <DMA_SetConfig+0x10a>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a6d      	ldr	r2, [pc, #436]	@ (8004840 <DMA_SetConfig+0x24c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d036      	beq.n	80046fe <DMA_SetConfig+0x10a>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a6b      	ldr	r2, [pc, #428]	@ (8004844 <DMA_SetConfig+0x250>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d031      	beq.n	80046fe <DMA_SetConfig+0x10a>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6a      	ldr	r2, [pc, #424]	@ (8004848 <DMA_SetConfig+0x254>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d02c      	beq.n	80046fe <DMA_SetConfig+0x10a>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a68      	ldr	r2, [pc, #416]	@ (800484c <DMA_SetConfig+0x258>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d027      	beq.n	80046fe <DMA_SetConfig+0x10a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a67      	ldr	r2, [pc, #412]	@ (8004850 <DMA_SetConfig+0x25c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d022      	beq.n	80046fe <DMA_SetConfig+0x10a>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a65      	ldr	r2, [pc, #404]	@ (8004854 <DMA_SetConfig+0x260>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01d      	beq.n	80046fe <DMA_SetConfig+0x10a>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a64      	ldr	r2, [pc, #400]	@ (8004858 <DMA_SetConfig+0x264>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d018      	beq.n	80046fe <DMA_SetConfig+0x10a>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a62      	ldr	r2, [pc, #392]	@ (800485c <DMA_SetConfig+0x268>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <DMA_SetConfig+0x10a>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a61      	ldr	r2, [pc, #388]	@ (8004860 <DMA_SetConfig+0x26c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <DMA_SetConfig+0x10a>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004864 <DMA_SetConfig+0x270>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d009      	beq.n	80046fe <DMA_SetConfig+0x10a>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a5e      	ldr	r2, [pc, #376]	@ (8004868 <DMA_SetConfig+0x274>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <DMA_SetConfig+0x10a>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a5c      	ldr	r2, [pc, #368]	@ (800486c <DMA_SetConfig+0x278>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <DMA_SetConfig+0x10e>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <DMA_SetConfig+0x110>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004710:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d004      	beq.n	8004724 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004722:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a39      	ldr	r2, [pc, #228]	@ (8004810 <DMA_SetConfig+0x21c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d04a      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a38      	ldr	r2, [pc, #224]	@ (8004814 <DMA_SetConfig+0x220>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d045      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a36      	ldr	r2, [pc, #216]	@ (8004818 <DMA_SetConfig+0x224>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d040      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a35      	ldr	r2, [pc, #212]	@ (800481c <DMA_SetConfig+0x228>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d03b      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a33      	ldr	r2, [pc, #204]	@ (8004820 <DMA_SetConfig+0x22c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d036      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a32      	ldr	r2, [pc, #200]	@ (8004824 <DMA_SetConfig+0x230>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d031      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a30      	ldr	r2, [pc, #192]	@ (8004828 <DMA_SetConfig+0x234>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d02c      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2f      	ldr	r2, [pc, #188]	@ (800482c <DMA_SetConfig+0x238>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d027      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a2d      	ldr	r2, [pc, #180]	@ (8004830 <DMA_SetConfig+0x23c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d022      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a2c      	ldr	r2, [pc, #176]	@ (8004834 <DMA_SetConfig+0x240>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d01d      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a2a      	ldr	r2, [pc, #168]	@ (8004838 <DMA_SetConfig+0x244>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a29      	ldr	r2, [pc, #164]	@ (800483c <DMA_SetConfig+0x248>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a27      	ldr	r2, [pc, #156]	@ (8004840 <DMA_SetConfig+0x24c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a26      	ldr	r2, [pc, #152]	@ (8004844 <DMA_SetConfig+0x250>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a24      	ldr	r2, [pc, #144]	@ (8004848 <DMA_SetConfig+0x254>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <DMA_SetConfig+0x1d0>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a23      	ldr	r2, [pc, #140]	@ (800484c <DMA_SetConfig+0x258>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <DMA_SetConfig+0x1d4>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <DMA_SetConfig+0x1d6>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d059      	beq.n	8004882 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	223f      	movs	r2, #63	@ 0x3f
 80047d8:	409a      	lsls	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b40      	cmp	r3, #64	@ 0x40
 80047fc:	d138      	bne.n	8004870 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800480e:	e0ae      	b.n	800496e <DMA_SetConfig+0x37a>
 8004810:	40020010 	.word	0x40020010
 8004814:	40020028 	.word	0x40020028
 8004818:	40020040 	.word	0x40020040
 800481c:	40020058 	.word	0x40020058
 8004820:	40020070 	.word	0x40020070
 8004824:	40020088 	.word	0x40020088
 8004828:	400200a0 	.word	0x400200a0
 800482c:	400200b8 	.word	0x400200b8
 8004830:	40020410 	.word	0x40020410
 8004834:	40020428 	.word	0x40020428
 8004838:	40020440 	.word	0x40020440
 800483c:	40020458 	.word	0x40020458
 8004840:	40020470 	.word	0x40020470
 8004844:	40020488 	.word	0x40020488
 8004848:	400204a0 	.word	0x400204a0
 800484c:	400204b8 	.word	0x400204b8
 8004850:	58025408 	.word	0x58025408
 8004854:	5802541c 	.word	0x5802541c
 8004858:	58025430 	.word	0x58025430
 800485c:	58025444 	.word	0x58025444
 8004860:	58025458 	.word	0x58025458
 8004864:	5802546c 	.word	0x5802546c
 8004868:	58025480 	.word	0x58025480
 800486c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	60da      	str	r2, [r3, #12]
}
 8004880:	e075      	b.n	800496e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a3d      	ldr	r2, [pc, #244]	@ (800497c <DMA_SetConfig+0x388>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d04a      	beq.n	8004922 <DMA_SetConfig+0x32e>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a3b      	ldr	r2, [pc, #236]	@ (8004980 <DMA_SetConfig+0x38c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d045      	beq.n	8004922 <DMA_SetConfig+0x32e>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a3a      	ldr	r2, [pc, #232]	@ (8004984 <DMA_SetConfig+0x390>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d040      	beq.n	8004922 <DMA_SetConfig+0x32e>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a38      	ldr	r2, [pc, #224]	@ (8004988 <DMA_SetConfig+0x394>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d03b      	beq.n	8004922 <DMA_SetConfig+0x32e>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a37      	ldr	r2, [pc, #220]	@ (800498c <DMA_SetConfig+0x398>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d036      	beq.n	8004922 <DMA_SetConfig+0x32e>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a35      	ldr	r2, [pc, #212]	@ (8004990 <DMA_SetConfig+0x39c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d031      	beq.n	8004922 <DMA_SetConfig+0x32e>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a34      	ldr	r2, [pc, #208]	@ (8004994 <DMA_SetConfig+0x3a0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d02c      	beq.n	8004922 <DMA_SetConfig+0x32e>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a32      	ldr	r2, [pc, #200]	@ (8004998 <DMA_SetConfig+0x3a4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d027      	beq.n	8004922 <DMA_SetConfig+0x32e>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a31      	ldr	r2, [pc, #196]	@ (800499c <DMA_SetConfig+0x3a8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d022      	beq.n	8004922 <DMA_SetConfig+0x32e>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2f      	ldr	r2, [pc, #188]	@ (80049a0 <DMA_SetConfig+0x3ac>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01d      	beq.n	8004922 <DMA_SetConfig+0x32e>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2e      	ldr	r2, [pc, #184]	@ (80049a4 <DMA_SetConfig+0x3b0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d018      	beq.n	8004922 <DMA_SetConfig+0x32e>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2c      	ldr	r2, [pc, #176]	@ (80049a8 <DMA_SetConfig+0x3b4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <DMA_SetConfig+0x32e>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a2b      	ldr	r2, [pc, #172]	@ (80049ac <DMA_SetConfig+0x3b8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <DMA_SetConfig+0x32e>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a29      	ldr	r2, [pc, #164]	@ (80049b0 <DMA_SetConfig+0x3bc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <DMA_SetConfig+0x32e>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a28      	ldr	r2, [pc, #160]	@ (80049b4 <DMA_SetConfig+0x3c0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <DMA_SetConfig+0x32e>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a26      	ldr	r2, [pc, #152]	@ (80049b8 <DMA_SetConfig+0x3c4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <DMA_SetConfig+0x332>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <DMA_SetConfig+0x334>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d020      	beq.n	800496e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b40      	cmp	r3, #64	@ 0x40
 800494a:	d108      	bne.n	800495e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	60da      	str	r2, [r3, #12]
}
 800495c:	e007      	b.n	800496e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	60da      	str	r2, [r3, #12]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	48022c08 	.word	0x48022c08
 8004980:	48022c1c 	.word	0x48022c1c
 8004984:	48022c30 	.word	0x48022c30
 8004988:	48022c44 	.word	0x48022c44
 800498c:	48022c58 	.word	0x48022c58
 8004990:	48022c6c 	.word	0x48022c6c
 8004994:	48022c80 	.word	0x48022c80
 8004998:	48022c94 	.word	0x48022c94
 800499c:	58025408 	.word	0x58025408
 80049a0:	5802541c 	.word	0x5802541c
 80049a4:	58025430 	.word	0x58025430
 80049a8:	58025444 	.word	0x58025444
 80049ac:	58025458 	.word	0x58025458
 80049b0:	5802546c 	.word	0x5802546c
 80049b4:	58025480 	.word	0x58025480
 80049b8:	58025494 	.word	0x58025494

080049bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a42      	ldr	r2, [pc, #264]	@ (8004ad4 <DMA_CalcBaseAndBitshift+0x118>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d04a      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a41      	ldr	r2, [pc, #260]	@ (8004ad8 <DMA_CalcBaseAndBitshift+0x11c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d045      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a3f      	ldr	r2, [pc, #252]	@ (8004adc <DMA_CalcBaseAndBitshift+0x120>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d040      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ae0 <DMA_CalcBaseAndBitshift+0x124>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d03b      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ae4 <DMA_CalcBaseAndBitshift+0x128>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d036      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3b      	ldr	r2, [pc, #236]	@ (8004ae8 <DMA_CalcBaseAndBitshift+0x12c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d031      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a39      	ldr	r2, [pc, #228]	@ (8004aec <DMA_CalcBaseAndBitshift+0x130>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d02c      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a38      	ldr	r2, [pc, #224]	@ (8004af0 <DMA_CalcBaseAndBitshift+0x134>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d027      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a36      	ldr	r2, [pc, #216]	@ (8004af4 <DMA_CalcBaseAndBitshift+0x138>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d022      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a35      	ldr	r2, [pc, #212]	@ (8004af8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d01d      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a33      	ldr	r2, [pc, #204]	@ (8004afc <DMA_CalcBaseAndBitshift+0x140>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d018      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a32      	ldr	r2, [pc, #200]	@ (8004b00 <DMA_CalcBaseAndBitshift+0x144>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d013      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a30      	ldr	r2, [pc, #192]	@ (8004b04 <DMA_CalcBaseAndBitshift+0x148>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00e      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2f      	ldr	r2, [pc, #188]	@ (8004b08 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a2d      	ldr	r2, [pc, #180]	@ (8004b0c <DMA_CalcBaseAndBitshift+0x150>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <DMA_CalcBaseAndBitshift+0xa8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b10 <DMA_CalcBaseAndBitshift+0x154>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d101      	bne.n	8004a68 <DMA_CalcBaseAndBitshift+0xac>
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <DMA_CalcBaseAndBitshift+0xae>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d024      	beq.n	8004ab8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	3b10      	subs	r3, #16
 8004a76:	4a27      	ldr	r2, [pc, #156]	@ (8004b14 <DMA_CalcBaseAndBitshift+0x158>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	4a24      	ldr	r2, [pc, #144]	@ (8004b18 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a88:	5cd3      	ldrb	r3, [r2, r3]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d908      	bls.n	8004aa8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8004b1c <DMA_CalcBaseAndBitshift+0x160>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	1d1a      	adds	r2, r3, #4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004aa6:	e00d      	b.n	8004ac4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	4b1b      	ldr	r3, [pc, #108]	@ (8004b1c <DMA_CalcBaseAndBitshift+0x160>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ab6:	e005      	b.n	8004ac4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40020010 	.word	0x40020010
 8004ad8:	40020028 	.word	0x40020028
 8004adc:	40020040 	.word	0x40020040
 8004ae0:	40020058 	.word	0x40020058
 8004ae4:	40020070 	.word	0x40020070
 8004ae8:	40020088 	.word	0x40020088
 8004aec:	400200a0 	.word	0x400200a0
 8004af0:	400200b8 	.word	0x400200b8
 8004af4:	40020410 	.word	0x40020410
 8004af8:	40020428 	.word	0x40020428
 8004afc:	40020440 	.word	0x40020440
 8004b00:	40020458 	.word	0x40020458
 8004b04:	40020470 	.word	0x40020470
 8004b08:	40020488 	.word	0x40020488
 8004b0c:	400204a0 	.word	0x400204a0
 8004b10:	400204b8 	.word	0x400204b8
 8004b14:	aaaaaaab 	.word	0xaaaaaaab
 8004b18:	0800eb40 	.word	0x0800eb40
 8004b1c:	fffffc00 	.word	0xfffffc00

08004b20 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d120      	bne.n	8004b76 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d858      	bhi.n	8004bee <DMA_CheckFifoParam+0xce>
 8004b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b44 <DMA_CheckFifoParam+0x24>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b67 	.word	0x08004b67
 8004b4c:	08004b55 	.word	0x08004b55
 8004b50:	08004bef 	.word	0x08004bef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d048      	beq.n	8004bf2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b64:	e045      	b.n	8004bf2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b6e:	d142      	bne.n	8004bf6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b74:	e03f      	b.n	8004bf6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b7e:	d123      	bne.n	8004bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d838      	bhi.n	8004bfa <DMA_CheckFifoParam+0xda>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <DMA_CheckFifoParam+0x70>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004ba7 	.word	0x08004ba7
 8004b98:	08004ba1 	.word	0x08004ba1
 8004b9c:	08004bb9 	.word	0x08004bb9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ba4:	e030      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d025      	beq.n	8004bfe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bb6:	e022      	b.n	8004bfe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bc0:	d11f      	bne.n	8004c02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bc6:	e01c      	b.n	8004c02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d902      	bls.n	8004bd6 <DMA_CheckFifoParam+0xb6>
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d003      	beq.n	8004bdc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004bd4:	e018      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bda:	e015      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00e      	beq.n	8004c06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
    break;
 8004bec:	e00b      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
        break;
 8004bee:	bf00      	nop
 8004bf0:	e00a      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        break;
 8004bf2:	bf00      	nop
 8004bf4:	e008      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        break;
 8004bf6:	bf00      	nop
 8004bf8:	e006      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        break;
 8004bfa:	bf00      	nop
 8004bfc:	e004      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        break;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
        break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <DMA_CheckFifoParam+0xe8>
    break;
 8004c06:	bf00      	nop
    }
  }

  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop

08004c18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a38      	ldr	r2, [pc, #224]	@ (8004d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d022      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a36      	ldr	r2, [pc, #216]	@ (8004d10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01d      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a35      	ldr	r2, [pc, #212]	@ (8004d14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d018      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a33      	ldr	r2, [pc, #204]	@ (8004d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a32      	ldr	r2, [pc, #200]	@ (8004d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00e      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a30      	ldr	r2, [pc, #192]	@ (8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d009      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2f      	ldr	r2, [pc, #188]	@ (8004d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a2d      	ldr	r2, [pc, #180]	@ (8004d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01a      	beq.n	8004cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	3b08      	subs	r3, #8
 8004c88:	4a28      	ldr	r2, [pc, #160]	@ (8004d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4b26      	ldr	r3, [pc, #152]	@ (8004d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a24      	ldr	r2, [pc, #144]	@ (8004d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ca4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	2201      	movs	r2, #1
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004cb4:	e024      	b.n	8004d00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	3b10      	subs	r3, #16
 8004cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4a1c      	ldr	r2, [pc, #112]	@ (8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d806      	bhi.n	8004cde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d902      	bls.n	8004cde <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4b18      	ldr	r3, [pc, #96]	@ (8004d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a16      	ldr	r2, [pc, #88]	@ (8004d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004cf0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	58025408 	.word	0x58025408
 8004d10:	5802541c 	.word	0x5802541c
 8004d14:	58025430 	.word	0x58025430
 8004d18:	58025444 	.word	0x58025444
 8004d1c:	58025458 	.word	0x58025458
 8004d20:	5802546c 	.word	0x5802546c
 8004d24:	58025480 	.word	0x58025480
 8004d28:	58025494 	.word	0x58025494
 8004d2c:	cccccccd 	.word	0xcccccccd
 8004d30:	16009600 	.word	0x16009600
 8004d34:	58025880 	.word	0x58025880
 8004d38:	aaaaaaab 	.word	0xaaaaaaab
 8004d3c:	400204b8 	.word	0x400204b8
 8004d40:	4002040f 	.word	0x4002040f
 8004d44:	10008200 	.word	0x10008200
 8004d48:	40020880 	.word	0x40020880

08004d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d04a      	beq.n	8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d847      	bhi.n	8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a25      	ldr	r2, [pc, #148]	@ (8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d022      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a24      	ldr	r2, [pc, #144]	@ (8004e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01d      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a22      	ldr	r2, [pc, #136]	@ (8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d018      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a21      	ldr	r2, [pc, #132]	@ (8004e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1f      	ldr	r2, [pc, #124]	@ (8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00e      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4b17      	ldr	r3, [pc, #92]	@ (8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a15      	ldr	r2, [pc, #84]	@ (8004e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004dd4:	671a      	str	r2, [r3, #112]	@ 0x70
 8004dd6:	e009      	b.n	8004dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4b14      	ldr	r3, [pc, #80]	@ (8004e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	461a      	mov	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a11      	ldr	r2, [pc, #68]	@ (8004e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004dea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	2201      	movs	r2, #1
 8004df2:	409a      	lsls	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	58025408 	.word	0x58025408
 8004e08:	5802541c 	.word	0x5802541c
 8004e0c:	58025430 	.word	0x58025430
 8004e10:	58025444 	.word	0x58025444
 8004e14:	58025458 	.word	0x58025458
 8004e18:	5802546c 	.word	0x5802546c
 8004e1c:	58025480 	.word	0x58025480
 8004e20:	58025494 	.word	0x58025494
 8004e24:	1600963f 	.word	0x1600963f
 8004e28:	58025940 	.word	0x58025940
 8004e2c:	1000823f 	.word	0x1000823f
 8004e30:	40020940 	.word	0x40020940

08004e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b089      	sub	sp, #36	@ 0x24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e42:	4b89      	ldr	r3, [pc, #548]	@ (8005068 <HAL_GPIO_Init+0x234>)
 8004e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e46:	e194      	b.n	8005172 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	4013      	ands	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8186 	beq.w	800516c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d005      	beq.n	8004e78 <HAL_GPIO_Init+0x44>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d130      	bne.n	8004eda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	2203      	movs	r2, #3
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eae:	2201      	movs	r2, #1
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	f003 0201 	and.w	r2, r3, #1
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d017      	beq.n	8004f16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4013      	ands	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d123      	bne.n	8004f6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	08da      	lsrs	r2, r3, #3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3208      	adds	r2, #8
 8004f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	220f      	movs	r2, #15
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4013      	ands	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	08da      	lsrs	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3208      	adds	r2, #8
 8004f64:	69b9      	ldr	r1, [r7, #24]
 8004f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	2203      	movs	r2, #3
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f003 0203 	and.w	r2, r3, #3
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80e0 	beq.w	800516c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fac:	4b2f      	ldr	r3, [pc, #188]	@ (800506c <HAL_GPIO_Init+0x238>)
 8004fae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004fb2:	4a2e      	ldr	r2, [pc, #184]	@ (800506c <HAL_GPIO_Init+0x238>)
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800506c <HAL_GPIO_Init+0x238>)
 8004fbe:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fca:	4a29      	ldr	r2, [pc, #164]	@ (8005070 <HAL_GPIO_Init+0x23c>)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	220f      	movs	r2, #15
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a20      	ldr	r2, [pc, #128]	@ (8005074 <HAL_GPIO_Init+0x240>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d052      	beq.n	800509c <HAL_GPIO_Init+0x268>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8005078 <HAL_GPIO_Init+0x244>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d031      	beq.n	8005062 <HAL_GPIO_Init+0x22e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a1e      	ldr	r2, [pc, #120]	@ (800507c <HAL_GPIO_Init+0x248>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d02b      	beq.n	800505e <HAL_GPIO_Init+0x22a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a1d      	ldr	r2, [pc, #116]	@ (8005080 <HAL_GPIO_Init+0x24c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d025      	beq.n	800505a <HAL_GPIO_Init+0x226>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1c      	ldr	r2, [pc, #112]	@ (8005084 <HAL_GPIO_Init+0x250>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01f      	beq.n	8005056 <HAL_GPIO_Init+0x222>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1b      	ldr	r2, [pc, #108]	@ (8005088 <HAL_GPIO_Init+0x254>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d019      	beq.n	8005052 <HAL_GPIO_Init+0x21e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1a      	ldr	r2, [pc, #104]	@ (800508c <HAL_GPIO_Init+0x258>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_GPIO_Init+0x21a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a19      	ldr	r2, [pc, #100]	@ (8005090 <HAL_GPIO_Init+0x25c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00d      	beq.n	800504a <HAL_GPIO_Init+0x216>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a18      	ldr	r2, [pc, #96]	@ (8005094 <HAL_GPIO_Init+0x260>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d007      	beq.n	8005046 <HAL_GPIO_Init+0x212>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a17      	ldr	r2, [pc, #92]	@ (8005098 <HAL_GPIO_Init+0x264>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d101      	bne.n	8005042 <HAL_GPIO_Init+0x20e>
 800503e:	2309      	movs	r3, #9
 8005040:	e02d      	b.n	800509e <HAL_GPIO_Init+0x26a>
 8005042:	230a      	movs	r3, #10
 8005044:	e02b      	b.n	800509e <HAL_GPIO_Init+0x26a>
 8005046:	2308      	movs	r3, #8
 8005048:	e029      	b.n	800509e <HAL_GPIO_Init+0x26a>
 800504a:	2307      	movs	r3, #7
 800504c:	e027      	b.n	800509e <HAL_GPIO_Init+0x26a>
 800504e:	2306      	movs	r3, #6
 8005050:	e025      	b.n	800509e <HAL_GPIO_Init+0x26a>
 8005052:	2305      	movs	r3, #5
 8005054:	e023      	b.n	800509e <HAL_GPIO_Init+0x26a>
 8005056:	2304      	movs	r3, #4
 8005058:	e021      	b.n	800509e <HAL_GPIO_Init+0x26a>
 800505a:	2303      	movs	r3, #3
 800505c:	e01f      	b.n	800509e <HAL_GPIO_Init+0x26a>
 800505e:	2302      	movs	r3, #2
 8005060:	e01d      	b.n	800509e <HAL_GPIO_Init+0x26a>
 8005062:	2301      	movs	r3, #1
 8005064:	e01b      	b.n	800509e <HAL_GPIO_Init+0x26a>
 8005066:	bf00      	nop
 8005068:	58000080 	.word	0x58000080
 800506c:	58024400 	.word	0x58024400
 8005070:	58000400 	.word	0x58000400
 8005074:	58020000 	.word	0x58020000
 8005078:	58020400 	.word	0x58020400
 800507c:	58020800 	.word	0x58020800
 8005080:	58020c00 	.word	0x58020c00
 8005084:	58021000 	.word	0x58021000
 8005088:	58021400 	.word	0x58021400
 800508c:	58021800 	.word	0x58021800
 8005090:	58021c00 	.word	0x58021c00
 8005094:	58022000 	.word	0x58022000
 8005098:	58022400 	.word	0x58022400
 800509c:	2300      	movs	r3, #0
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	f002 0203 	and.w	r2, r2, #3
 80050a4:	0092      	lsls	r2, r2, #2
 80050a6:	4093      	lsls	r3, r2
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050ae:	4938      	ldr	r1, [pc, #224]	@ (8005190 <HAL_GPIO_Init+0x35c>)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	3302      	adds	r3, #2
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	43db      	mvns	r3, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4013      	ands	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80050e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4013      	ands	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005110:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	43db      	mvns	r3, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	43db      	mvns	r3, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4013      	ands	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	3301      	adds	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	f47f ae63 	bne.w	8004e48 <HAL_GPIO_Init+0x14>
  }
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	3724      	adds	r7, #36	@ 0x24
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	58000400 	.word	0x58000400

08005194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	807b      	strh	r3, [r7, #2]
 80051a0:	4613      	mov	r3, r2
 80051a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051a4:	787b      	ldrb	r3, [r7, #1]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051aa:	887a      	ldrh	r2, [r7, #2]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051b0:	e003      	b.n	80051ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	041a      	lsls	r2, r3, #16
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	619a      	str	r2, [r3, #24]
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	4603      	mov	r3, r0
 80051ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80051d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	4013      	ands	r3, r2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fb febd 	bl	8000f6c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e08b      	b.n	8005326 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fb fc34 	bl	8000a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2224      	movs	r2, #36	@ 0x24
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800524c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800525c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d107      	bne.n	8005276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	e006      	b.n	8005284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d108      	bne.n	800529e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800529a:	605a      	str	r2, [r3, #4]
 800529c:	e007      	b.n	80052ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6859      	ldr	r1, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005330 <HAL_I2C_Init+0x134>)
 80052ba:	430b      	orrs	r3, r1
 80052bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69d9      	ldr	r1, [r3, #28]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	02008000 	.word	0x02008000

08005334 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b20      	cmp	r3, #32
 8005348:	d138      	bne.n	80053bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005354:	2302      	movs	r3, #2
 8005356:	e032      	b.n	80053be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2224      	movs	r2, #36	@ 0x24
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005386:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6819      	ldr	r1, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e000      	b.n	80053be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d139      	bne.n	8005454 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e033      	b.n	8005456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2224      	movs	r2, #36	@ 0x24
 80053fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800541c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	e000      	b.n	8005456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005454:	2302      	movs	r3, #2
  }
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800546c:	4b29      	ldr	r3, [pc, #164]	@ (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	2b06      	cmp	r3, #6
 8005476:	d00a      	beq.n	800548e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005478:	4b26      	ldr	r3, [pc, #152]	@ (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	429a      	cmp	r2, r3
 8005484:	d001      	beq.n	800548a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e040      	b.n	800550c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	e03e      	b.n	800550c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800548e:	4b21      	ldr	r3, [pc, #132]	@ (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005496:	491f      	ldr	r1, [pc, #124]	@ (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4313      	orrs	r3, r2
 800549c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800549e:	f7fc fc27 	bl	8001cf0 <HAL_GetTick>
 80054a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054a4:	e009      	b.n	80054ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054a6:	f7fc fc23 	bl	8001cf0 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054b4:	d901      	bls.n	80054ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e028      	b.n	800550c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054ba:	4b16      	ldr	r3, [pc, #88]	@ (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054c6:	d1ee      	bne.n	80054a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b1e      	cmp	r3, #30
 80054cc:	d008      	beq.n	80054e0 <HAL_PWREx_ConfigSupply+0x7c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80054d2:	d005      	beq.n	80054e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b1d      	cmp	r3, #29
 80054d8:	d002      	beq.n	80054e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80054de:	d114      	bne.n	800550a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80054e0:	f7fc fc06 	bl	8001cf0 <HAL_GetTick>
 80054e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80054e6:	e009      	b.n	80054fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054e8:	f7fc fc02 	bl	8001cf0 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054f6:	d901      	bls.n	80054fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e007      	b.n	800550c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80054fc:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_PWREx_ConfigSupply+0xb0>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005508:	d1ee      	bne.n	80054e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	58024800 	.word	0x58024800

08005518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08c      	sub	sp, #48	@ 0x30
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d102      	bne.n	800552c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f000 bc1f 	b.w	8005d6a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80b3 	beq.w	80056a0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800553a:	4b95      	ldr	r3, [pc, #596]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005544:	4b92      	ldr	r3, [pc, #584]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800554a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554c:	2b10      	cmp	r3, #16
 800554e:	d007      	beq.n	8005560 <HAL_RCC_OscConfig+0x48>
 8005550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005552:	2b18      	cmp	r3, #24
 8005554:	d112      	bne.n	800557c <HAL_RCC_OscConfig+0x64>
 8005556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d10d      	bne.n	800557c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005560:	4b8b      	ldr	r3, [pc, #556]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8098 	beq.w	800569e <HAL_RCC_OscConfig+0x186>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	f040 8093 	bne.w	800569e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e3f6      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005584:	d106      	bne.n	8005594 <HAL_RCC_OscConfig+0x7c>
 8005586:	4b82      	ldr	r3, [pc, #520]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a81      	ldr	r2, [pc, #516]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e058      	b.n	8005646 <HAL_RCC_OscConfig+0x12e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d112      	bne.n	80055c2 <HAL_RCC_OscConfig+0xaa>
 800559c:	4b7c      	ldr	r3, [pc, #496]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a7b      	ldr	r2, [pc, #492]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	4b79      	ldr	r3, [pc, #484]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a78      	ldr	r2, [pc, #480]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	4b76      	ldr	r3, [pc, #472]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a75      	ldr	r2, [pc, #468]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	e041      	b.n	8005646 <HAL_RCC_OscConfig+0x12e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055ca:	d112      	bne.n	80055f2 <HAL_RCC_OscConfig+0xda>
 80055cc:	4b70      	ldr	r3, [pc, #448]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a6f      	ldr	r2, [pc, #444]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	4b6d      	ldr	r3, [pc, #436]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a6c      	ldr	r2, [pc, #432]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a69      	ldr	r2, [pc, #420]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e029      	b.n	8005646 <HAL_RCC_OscConfig+0x12e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80055fa:	d112      	bne.n	8005622 <HAL_RCC_OscConfig+0x10a>
 80055fc:	4b64      	ldr	r3, [pc, #400]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a63      	ldr	r2, [pc, #396]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005602:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	4b61      	ldr	r3, [pc, #388]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a60      	ldr	r2, [pc, #384]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800560e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	4b5e      	ldr	r3, [pc, #376]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a5d      	ldr	r2, [pc, #372]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800561a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e011      	b.n	8005646 <HAL_RCC_OscConfig+0x12e>
 8005622:	4b5b      	ldr	r3, [pc, #364]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5a      	ldr	r2, [pc, #360]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	4b58      	ldr	r3, [pc, #352]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a57      	ldr	r2, [pc, #348]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005634:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	4b55      	ldr	r3, [pc, #340]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a54      	ldr	r2, [pc, #336]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005640:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005644:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d013      	beq.n	8005676 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564e:	f7fc fb4f 	bl	8001cf0 <HAL_GetTick>
 8005652:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005656:	f7fc fb4b 	bl	8001cf0 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b64      	cmp	r3, #100	@ 0x64
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e380      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005668:	4b49      	ldr	r3, [pc, #292]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f0      	beq.n	8005656 <HAL_RCC_OscConfig+0x13e>
 8005674:	e014      	b.n	80056a0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005676:	f7fc fb3b 	bl	8001cf0 <HAL_GetTick>
 800567a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800567e:	f7fc fb37 	bl	8001cf0 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b64      	cmp	r3, #100	@ 0x64
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e36c      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005690:	4b3f      	ldr	r3, [pc, #252]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f0      	bne.n	800567e <HAL_RCC_OscConfig+0x166>
 800569c:	e000      	b.n	80056a0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800569e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 808c 	beq.w	80057c6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ae:	4b38      	ldr	r3, [pc, #224]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056b8:	4b35      	ldr	r3, [pc, #212]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80056ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056bc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <HAL_RCC_OscConfig+0x1bc>
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	2b18      	cmp	r3, #24
 80056c8:	d137      	bne.n	800573a <HAL_RCC_OscConfig+0x222>
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f003 0303 	and.w	r3, r3, #3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d132      	bne.n	800573a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_OscConfig+0x1d4>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e33e      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056ec:	4b28      	ldr	r3, [pc, #160]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f023 0219 	bic.w	r2, r3, #25
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4925      	ldr	r1, [pc, #148]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7fc faf7 	bl	8001cf0 <HAL_GetTick>
 8005702:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005706:	f7fc faf3 	bl	8001cf0 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e328      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005718:	4b1d      	ldr	r3, [pc, #116]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f0      	beq.n	8005706 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005724:	4b1a      	ldr	r3, [pc, #104]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	061b      	lsls	r3, r3, #24
 8005732:	4917      	ldr	r1, [pc, #92]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005734:	4313      	orrs	r3, r2
 8005736:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005738:	e045      	b.n	80057c6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d028      	beq.n	8005794 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005742:	4b13      	ldr	r3, [pc, #76]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 0219 	bic.w	r2, r3, #25
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	4910      	ldr	r1, [pc, #64]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005750:	4313      	orrs	r3, r2
 8005752:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fc facc 	bl	8001cf0 <HAL_GetTick>
 8005758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800575c:	f7fc fac8 	bl	8001cf0 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e2fd      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800576e:	4b08      	ldr	r3, [pc, #32]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577a:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	061b      	lsls	r3, r3, #24
 8005788:	4901      	ldr	r1, [pc, #4]	@ (8005790 <HAL_RCC_OscConfig+0x278>)
 800578a:	4313      	orrs	r3, r2
 800578c:	604b      	str	r3, [r1, #4]
 800578e:	e01a      	b.n	80057c6 <HAL_RCC_OscConfig+0x2ae>
 8005790:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005794:	4b97      	ldr	r3, [pc, #604]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a96      	ldr	r2, [pc, #600]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fc faa6 	bl	8001cf0 <HAL_GetTick>
 80057a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a8:	f7fc faa2 	bl	8001cf0 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e2d7      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057ba:	4b8e      	ldr	r3, [pc, #568]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d06a      	beq.n	80058a8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057d2:	4b88      	ldr	r3, [pc, #544]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057dc:	4b85      	ldr	r3, [pc, #532]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80057de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d007      	beq.n	80057f8 <HAL_RCC_OscConfig+0x2e0>
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2b18      	cmp	r3, #24
 80057ec:	d11b      	bne.n	8005826 <HAL_RCC_OscConfig+0x30e>
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d116      	bne.n	8005826 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057f8:	4b7e      	ldr	r3, [pc, #504]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_RCC_OscConfig+0x2f8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	2b80      	cmp	r3, #128	@ 0x80
 800580a:	d001      	beq.n	8005810 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e2ac      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005810:	4b78      	ldr	r3, [pc, #480]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	061b      	lsls	r3, r3, #24
 800581e:	4975      	ldr	r1, [pc, #468]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005820:	4313      	orrs	r3, r2
 8005822:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005824:	e040      	b.n	80058a8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d023      	beq.n	8005876 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800582e:	4b71      	ldr	r3, [pc, #452]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a70      	ldr	r2, [pc, #448]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583a:	f7fc fa59 	bl	8001cf0 <HAL_GetTick>
 800583e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005842:	f7fc fa55 	bl	8001cf0 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e28a      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005854:	4b67      	ldr	r3, [pc, #412]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f0      	beq.n	8005842 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005860:	4b64      	ldr	r3, [pc, #400]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	061b      	lsls	r3, r3, #24
 800586e:	4961      	ldr	r1, [pc, #388]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005870:	4313      	orrs	r3, r2
 8005872:	60cb      	str	r3, [r1, #12]
 8005874:	e018      	b.n	80058a8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005876:	4b5f      	ldr	r3, [pc, #380]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a5e      	ldr	r2, [pc, #376]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 800587c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005882:	f7fc fa35 	bl	8001cf0 <HAL_GetTick>
 8005886:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800588a:	f7fc fa31 	bl	8001cf0 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e266      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800589c:	4b55      	ldr	r3, [pc, #340]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f0      	bne.n	800588a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d036      	beq.n	8005922 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d019      	beq.n	80058f0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058bc:	4b4d      	ldr	r3, [pc, #308]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80058be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058c0:	4a4c      	ldr	r2, [pc, #304]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c8:	f7fc fa12 	bl	8001cf0 <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d0:	f7fc fa0e 	bl	8001cf0 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e243      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058e2:	4b44      	ldr	r3, [pc, #272]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80058e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0x3b8>
 80058ee:	e018      	b.n	8005922 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f0:	4b40      	ldr	r3, [pc, #256]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80058f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f4:	4a3f      	ldr	r2, [pc, #252]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fc f9f8 	bl	8001cf0 <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005904:	f7fc f9f4 	bl	8001cf0 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e229      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005916:	4b37      	ldr	r3, [pc, #220]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d036      	beq.n	800599c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d019      	beq.n	800596a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005936:	4b2f      	ldr	r3, [pc, #188]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2e      	ldr	r2, [pc, #184]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 800593c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005940:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005942:	f7fc f9d5 	bl	8001cf0 <HAL_GetTick>
 8005946:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800594a:	f7fc f9d1 	bl	8001cf0 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e206      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800595c:	4b25      	ldr	r3, [pc, #148]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f0      	beq.n	800594a <HAL_RCC_OscConfig+0x432>
 8005968:	e018      	b.n	800599c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800596a:	4b22      	ldr	r3, [pc, #136]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a21      	ldr	r2, [pc, #132]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005970:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005974:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005976:	f7fc f9bb 	bl	8001cf0 <HAL_GetTick>
 800597a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800597e:	f7fc f9b7 	bl	8001cf0 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e1ec      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005990:	4b18      	ldr	r3, [pc, #96]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1f0      	bne.n	800597e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80af 	beq.w	8005b08 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059aa:	4b13      	ldr	r3, [pc, #76]	@ (80059f8 <HAL_RCC_OscConfig+0x4e0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a12      	ldr	r2, [pc, #72]	@ (80059f8 <HAL_RCC_OscConfig+0x4e0>)
 80059b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059b6:	f7fc f99b 	bl	8001cf0 <HAL_GetTick>
 80059ba:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059be:	f7fc f997 	bl	8001cf0 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b64      	cmp	r3, #100	@ 0x64
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e1cc      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059d0:	4b09      	ldr	r3, [pc, #36]	@ (80059f8 <HAL_RCC_OscConfig+0x4e0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d10b      	bne.n	80059fc <HAL_RCC_OscConfig+0x4e4>
 80059e4:	4b03      	ldr	r3, [pc, #12]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80059e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e8:	4a02      	ldr	r2, [pc, #8]	@ (80059f4 <HAL_RCC_OscConfig+0x4dc>)
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80059f0:	e05b      	b.n	8005aaa <HAL_RCC_OscConfig+0x592>
 80059f2:	bf00      	nop
 80059f4:	58024400 	.word	0x58024400
 80059f8:	58024800 	.word	0x58024800
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d112      	bne.n	8005a2a <HAL_RCC_OscConfig+0x512>
 8005a04:	4b9d      	ldr	r3, [pc, #628]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a08:	4a9c      	ldr	r2, [pc, #624]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a10:	4b9a      	ldr	r3, [pc, #616]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a14:	4a99      	ldr	r2, [pc, #612]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a1c:	4b97      	ldr	r3, [pc, #604]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a20:	4a96      	ldr	r2, [pc, #600]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a22:	f023 0304 	bic.w	r3, r3, #4
 8005a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a28:	e03f      	b.n	8005aaa <HAL_RCC_OscConfig+0x592>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d112      	bne.n	8005a58 <HAL_RCC_OscConfig+0x540>
 8005a32:	4b92      	ldr	r3, [pc, #584]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a36:	4a91      	ldr	r2, [pc, #580]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a38:	f043 0304 	orr.w	r3, r3, #4
 8005a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a3e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a42:	4a8e      	ldr	r2, [pc, #568]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a4a:	4b8c      	ldr	r3, [pc, #560]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a4e:	4a8b      	ldr	r2, [pc, #556]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a56:	e028      	b.n	8005aaa <HAL_RCC_OscConfig+0x592>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b85      	cmp	r3, #133	@ 0x85
 8005a5e:	d112      	bne.n	8005a86 <HAL_RCC_OscConfig+0x56e>
 8005a60:	4b86      	ldr	r3, [pc, #536]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a64:	4a85      	ldr	r2, [pc, #532]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a66:	f043 0304 	orr.w	r3, r3, #4
 8005a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a6c:	4b83      	ldr	r3, [pc, #524]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a70:	4a82      	ldr	r2, [pc, #520]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a78:	4b80      	ldr	r3, [pc, #512]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a7c:	4a7f      	ldr	r2, [pc, #508]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a7e:	f043 0301 	orr.w	r3, r3, #1
 8005a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a84:	e011      	b.n	8005aaa <HAL_RCC_OscConfig+0x592>
 8005a86:	4b7d      	ldr	r3, [pc, #500]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a92:	4b7a      	ldr	r3, [pc, #488]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a96:	4a79      	ldr	r2, [pc, #484]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005a98:	f023 0304 	bic.w	r3, r3, #4
 8005a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a9e:	4b77      	ldr	r3, [pc, #476]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa2:	4a76      	ldr	r2, [pc, #472]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d015      	beq.n	8005ade <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab2:	f7fc f91d 	bl	8001cf0 <HAL_GetTick>
 8005ab6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ab8:	e00a      	b.n	8005ad0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aba:	f7fc f919 	bl	8001cf0 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e14c      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0ee      	beq.n	8005aba <HAL_RCC_OscConfig+0x5a2>
 8005adc:	e014      	b.n	8005b08 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ade:	f7fc f907 	bl	8001cf0 <HAL_GetTick>
 8005ae2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ae4:	e00a      	b.n	8005afc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae6:	f7fc f903 	bl	8001cf0 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e136      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005afc:	4b5f      	ldr	r3, [pc, #380]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1ee      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 812b 	beq.w	8005d68 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b12:	4b5a      	ldr	r3, [pc, #360]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b1a:	2b18      	cmp	r3, #24
 8005b1c:	f000 80bb 	beq.w	8005c96 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	f040 8095 	bne.w	8005c54 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2a:	4b54      	ldr	r3, [pc, #336]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a53      	ldr	r2, [pc, #332]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005b30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b36:	f7fc f8db 	bl	8001cf0 <HAL_GetTick>
 8005b3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b3e:	f7fc f8d7 	bl	8001cf0 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e10c      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b50:	4b4a      	ldr	r3, [pc, #296]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f0      	bne.n	8005b3e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b5c:	4b47      	ldr	r3, [pc, #284]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005b5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b60:	4b47      	ldr	r3, [pc, #284]	@ (8005c80 <HAL_RCC_OscConfig+0x768>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b6c:	0112      	lsls	r2, r2, #4
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	4942      	ldr	r1, [pc, #264]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b84:	3b01      	subs	r3, #1
 8005b86:	025b      	lsls	r3, r3, #9
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	3b01      	subs	r3, #1
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	061b      	lsls	r3, r3, #24
 8005ba2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005ba6:	4935      	ldr	r1, [pc, #212]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005bac:	4b33      	ldr	r3, [pc, #204]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb0:	4a32      	ldr	r2, [pc, #200]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005bb2:	f023 0301 	bic.w	r3, r3, #1
 8005bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005bb8:	4b30      	ldr	r3, [pc, #192]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bbc:	4b31      	ldr	r3, [pc, #196]	@ (8005c84 <HAL_RCC_OscConfig+0x76c>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005bc4:	00d2      	lsls	r2, r2, #3
 8005bc6:	492d      	ldr	r1, [pc, #180]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	f023 020c 	bic.w	r2, r3, #12
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd8:	4928      	ldr	r1, [pc, #160]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bde:	4b27      	ldr	r3, [pc, #156]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be2:	f023 0202 	bic.w	r2, r3, #2
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bea:	4924      	ldr	r1, [pc, #144]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bf0:	4b22      	ldr	r3, [pc, #136]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf4:	4a21      	ldr	r2, [pc, #132]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	4a1e      	ldr	r2, [pc, #120]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c08:	4b1c      	ldr	r3, [pc, #112]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005c0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c14:	4b19      	ldr	r3, [pc, #100]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	4a18      	ldr	r2, [pc, #96]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c20:	4b16      	ldr	r3, [pc, #88]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a15      	ldr	r2, [pc, #84]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fc f860 	bl	8001cf0 <HAL_GetTick>
 8005c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c34:	f7fc f85c 	bl	8001cf0 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e091      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c46:	4b0d      	ldr	r3, [pc, #52]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x71c>
 8005c52:	e089      	b.n	8005d68 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c54:	4b09      	ldr	r3, [pc, #36]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a08      	ldr	r2, [pc, #32]	@ (8005c7c <HAL_RCC_OscConfig+0x764>)
 8005c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fc f846 	bl	8001cf0 <HAL_GetTick>
 8005c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c66:	e00f      	b.n	8005c88 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c68:	f7fc f842 	bl	8001cf0 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d908      	bls.n	8005c88 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e077      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
 8005c7a:	bf00      	nop
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	fffffc0c 	.word	0xfffffc0c
 8005c84:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c88:	4b3a      	ldr	r3, [pc, #232]	@ (8005d74 <HAL_RCC_OscConfig+0x85c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e9      	bne.n	8005c68 <HAL_RCC_OscConfig+0x750>
 8005c94:	e068      	b.n	8005d68 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c96:	4b37      	ldr	r3, [pc, #220]	@ (8005d74 <HAL_RCC_OscConfig+0x85c>)
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c9c:	4b35      	ldr	r3, [pc, #212]	@ (8005d74 <HAL_RCC_OscConfig+0x85c>)
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d031      	beq.n	8005d0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f003 0203 	and.w	r2, r3, #3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d12a      	bne.n	8005d0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d122      	bne.n	8005d0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d11a      	bne.n	8005d0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	0a5b      	lsrs	r3, r3, #9
 8005cdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d111      	bne.n	8005d0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d108      	bne.n	8005d0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	0e1b      	lsrs	r3, r3, #24
 8005d00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d001      	beq.n	8005d12 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e02b      	b.n	8005d6a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005d12:	4b18      	ldr	r3, [pc, #96]	@ (8005d74 <HAL_RCC_OscConfig+0x85c>)
 8005d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d16:	08db      	lsrs	r3, r3, #3
 8005d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d1c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d01f      	beq.n	8005d68 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005d28:	4b12      	ldr	r3, [pc, #72]	@ (8005d74 <HAL_RCC_OscConfig+0x85c>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	4a11      	ldr	r2, [pc, #68]	@ (8005d74 <HAL_RCC_OscConfig+0x85c>)
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d34:	f7fb ffdc 	bl	8001cf0 <HAL_GetTick>
 8005d38:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005d3a:	bf00      	nop
 8005d3c:	f7fb ffd8 	bl	8001cf0 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d0f9      	beq.n	8005d3c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d48:	4b0a      	ldr	r3, [pc, #40]	@ (8005d74 <HAL_RCC_OscConfig+0x85c>)
 8005d4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d78 <HAL_RCC_OscConfig+0x860>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d54:	00d2      	lsls	r2, r2, #3
 8005d56:	4907      	ldr	r1, [pc, #28]	@ (8005d74 <HAL_RCC_OscConfig+0x85c>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005d5c:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <HAL_RCC_OscConfig+0x85c>)
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	4a04      	ldr	r2, [pc, #16]	@ (8005d74 <HAL_RCC_OscConfig+0x85c>)
 8005d62:	f043 0301 	orr.w	r3, r3, #1
 8005d66:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3730      	adds	r7, #48	@ 0x30
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	58024400 	.word	0x58024400
 8005d78:	ffff0007 	.word	0xffff0007

08005d7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e19c      	b.n	80060ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d90:	4b8a      	ldr	r3, [pc, #552]	@ (8005fbc <HAL_RCC_ClockConfig+0x240>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d910      	bls.n	8005dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9e:	4b87      	ldr	r3, [pc, #540]	@ (8005fbc <HAL_RCC_ClockConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f023 020f 	bic.w	r2, r3, #15
 8005da6:	4985      	ldr	r1, [pc, #532]	@ (8005fbc <HAL_RCC_ClockConfig+0x240>)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b83      	ldr	r3, [pc, #524]	@ (8005fbc <HAL_RCC_ClockConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e184      	b.n	80060ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d010      	beq.n	8005dee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	4b7b      	ldr	r3, [pc, #492]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d908      	bls.n	8005dee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ddc:	4b78      	ldr	r3, [pc, #480]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	4975      	ldr	r1, [pc, #468]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d010      	beq.n	8005e1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	4b70      	ldr	r3, [pc, #448]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d908      	bls.n	8005e1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	496a      	ldr	r1, [pc, #424]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d010      	beq.n	8005e4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	4b64      	ldr	r3, [pc, #400]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d908      	bls.n	8005e4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e38:	4b61      	ldr	r3, [pc, #388]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	495e      	ldr	r1, [pc, #376]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d010      	beq.n	8005e78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69da      	ldr	r2, [r3, #28]
 8005e5a:	4b59      	ldr	r3, [pc, #356]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d908      	bls.n	8005e78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e66:	4b56      	ldr	r3, [pc, #344]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	4953      	ldr	r1, [pc, #332]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d010      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	4b4d      	ldr	r3, [pc, #308]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d908      	bls.n	8005ea6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e94:	4b4a      	ldr	r3, [pc, #296]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	f023 020f 	bic.w	r2, r3, #15
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	4947      	ldr	r1, [pc, #284]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d055      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005eb2:	4b43      	ldr	r3, [pc, #268]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	4940      	ldr	r1, [pc, #256]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d107      	bne.n	8005edc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d121      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0f6      	b.n	80060ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d107      	bne.n	8005ef4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ee4:	4b36      	ldr	r3, [pc, #216]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d115      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0ea      	b.n	80060ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d107      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005efc:	4b30      	ldr	r3, [pc, #192]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0de      	b.n	80060ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0d6      	b.n	80060ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f1c:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f023 0207 	bic.w	r2, r3, #7
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4925      	ldr	r1, [pc, #148]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f2e:	f7fb fedf 	bl	8001cf0 <HAL_GetTick>
 8005f32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f34:	e00a      	b.n	8005f4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f36:	f7fb fedb 	bl	8001cf0 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e0be      	b.n	80060ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d1eb      	bne.n	8005f36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d010      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	4b14      	ldr	r3, [pc, #80]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d208      	bcs.n	8005f8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f7a:	4b11      	ldr	r3, [pc, #68]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f023 020f 	bic.w	r2, r3, #15
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	490e      	ldr	r1, [pc, #56]	@ (8005fc0 <HAL_RCC_ClockConfig+0x244>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fbc <HAL_RCC_ClockConfig+0x240>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d214      	bcs.n	8005fc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f9a:	4b08      	ldr	r3, [pc, #32]	@ (8005fbc <HAL_RCC_ClockConfig+0x240>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 020f 	bic.w	r2, r3, #15
 8005fa2:	4906      	ldr	r1, [pc, #24]	@ (8005fbc <HAL_RCC_ClockConfig+0x240>)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005faa:	4b04      	ldr	r3, [pc, #16]	@ (8005fbc <HAL_RCC_ClockConfig+0x240>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d005      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e086      	b.n	80060ca <HAL_RCC_ClockConfig+0x34e>
 8005fbc:	52002000 	.word	0x52002000
 8005fc0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d010      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d208      	bcs.n	8005ff2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	4939      	ldr	r1, [pc, #228]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d010      	beq.n	8006020 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	4b34      	ldr	r3, [pc, #208]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800600a:	429a      	cmp	r2, r3
 800600c:	d208      	bcs.n	8006020 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800600e:	4b31      	ldr	r3, [pc, #196]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	492e      	ldr	r1, [pc, #184]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 800601c:	4313      	orrs	r3, r2
 800601e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699a      	ldr	r2, [r3, #24]
 8006030:	4b28      	ldr	r3, [pc, #160]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006038:	429a      	cmp	r2, r3
 800603a:	d208      	bcs.n	800604e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800603c:	4b25      	ldr	r3, [pc, #148]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	4922      	ldr	r1, [pc, #136]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 800604a:	4313      	orrs	r3, r2
 800604c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d010      	beq.n	800607c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69da      	ldr	r2, [r3, #28]
 800605e:	4b1d      	ldr	r3, [pc, #116]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006066:	429a      	cmp	r2, r3
 8006068:	d208      	bcs.n	800607c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800606a:	4b1a      	ldr	r3, [pc, #104]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	4917      	ldr	r1, [pc, #92]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 8006078:	4313      	orrs	r3, r2
 800607a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800607c:	f000 f834 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 8006080:	4602      	mov	r2, r0
 8006082:	4b14      	ldr	r3, [pc, #80]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	4912      	ldr	r1, [pc, #72]	@ (80060d8 <HAL_RCC_ClockConfig+0x35c>)
 800608e:	5ccb      	ldrb	r3, [r1, r3]
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	fa22 f303 	lsr.w	r3, r2, r3
 8006098:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800609a:	4b0e      	ldr	r3, [pc, #56]	@ (80060d4 <HAL_RCC_ClockConfig+0x358>)
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	4a0d      	ldr	r2, [pc, #52]	@ (80060d8 <HAL_RCC_ClockConfig+0x35c>)
 80060a4:	5cd3      	ldrb	r3, [r2, r3]
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	fa22 f303 	lsr.w	r3, r2, r3
 80060b0:	4a0a      	ldr	r2, [pc, #40]	@ (80060dc <HAL_RCC_ClockConfig+0x360>)
 80060b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060b4:	4a0a      	ldr	r2, [pc, #40]	@ (80060e0 <HAL_RCC_ClockConfig+0x364>)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80060ba:	4b0a      	ldr	r3, [pc, #40]	@ (80060e4 <HAL_RCC_ClockConfig+0x368>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fb fdcc 	bl	8001c5c <HAL_InitTick>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	58024400 	.word	0x58024400
 80060d8:	0800eb30 	.word	0x0800eb30
 80060dc:	24000004 	.word	0x24000004
 80060e0:	24000000 	.word	0x24000000
 80060e4:	24000008 	.word	0x24000008

080060e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b089      	sub	sp, #36	@ 0x24
 80060ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060ee:	4bb3      	ldr	r3, [pc, #716]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060f6:	2b18      	cmp	r3, #24
 80060f8:	f200 8155 	bhi.w	80063a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80060fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006104 <HAL_RCC_GetSysClockFreq+0x1c>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006169 	.word	0x08006169
 8006108:	080063a7 	.word	0x080063a7
 800610c:	080063a7 	.word	0x080063a7
 8006110:	080063a7 	.word	0x080063a7
 8006114:	080063a7 	.word	0x080063a7
 8006118:	080063a7 	.word	0x080063a7
 800611c:	080063a7 	.word	0x080063a7
 8006120:	080063a7 	.word	0x080063a7
 8006124:	0800618f 	.word	0x0800618f
 8006128:	080063a7 	.word	0x080063a7
 800612c:	080063a7 	.word	0x080063a7
 8006130:	080063a7 	.word	0x080063a7
 8006134:	080063a7 	.word	0x080063a7
 8006138:	080063a7 	.word	0x080063a7
 800613c:	080063a7 	.word	0x080063a7
 8006140:	080063a7 	.word	0x080063a7
 8006144:	08006195 	.word	0x08006195
 8006148:	080063a7 	.word	0x080063a7
 800614c:	080063a7 	.word	0x080063a7
 8006150:	080063a7 	.word	0x080063a7
 8006154:	080063a7 	.word	0x080063a7
 8006158:	080063a7 	.word	0x080063a7
 800615c:	080063a7 	.word	0x080063a7
 8006160:	080063a7 	.word	0x080063a7
 8006164:	0800619b 	.word	0x0800619b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006168:	4b94      	ldr	r3, [pc, #592]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006174:	4b91      	ldr	r3, [pc, #580]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	08db      	lsrs	r3, r3, #3
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	4a90      	ldr	r2, [pc, #576]	@ (80063c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006180:	fa22 f303 	lsr.w	r3, r2, r3
 8006184:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006186:	e111      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006188:	4b8d      	ldr	r3, [pc, #564]	@ (80063c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800618a:	61bb      	str	r3, [r7, #24]
      break;
 800618c:	e10e      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800618e:	4b8d      	ldr	r3, [pc, #564]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006190:	61bb      	str	r3, [r7, #24]
      break;
 8006192:	e10b      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006194:	4b8c      	ldr	r3, [pc, #560]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006196:	61bb      	str	r3, [r7, #24]
      break;
 8006198:	e108      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800619a:	4b88      	ldr	r3, [pc, #544]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800619c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80061a4:	4b85      	ldr	r3, [pc, #532]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	091b      	lsrs	r3, r3, #4
 80061aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80061b0:	4b82      	ldr	r3, [pc, #520]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80061ba:	4b80      	ldr	r3, [pc, #512]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061be:	08db      	lsrs	r3, r3, #3
 80061c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 80e1 	beq.w	80063a0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	f000 8083 	beq.w	80062ec <HAL_RCC_GetSysClockFreq+0x204>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	f200 80a1 	bhi.w	8006330 <HAL_RCC_GetSysClockFreq+0x248>
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x114>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d056      	beq.n	80062a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80061fa:	e099      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061fc:	4b6f      	ldr	r3, [pc, #444]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d02d      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006208:	4b6c      	ldr	r3, [pc, #432]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	08db      	lsrs	r3, r3, #3
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	4a6b      	ldr	r2, [pc, #428]	@ (80063c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006214:	fa22 f303 	lsr.w	r3, r2, r3
 8006218:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	ee07 3a90 	vmov	s15, r3
 8006220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006232:	4b62      	ldr	r3, [pc, #392]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006242:	ed97 6a02 	vldr	s12, [r7, #8]
 8006246:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80063cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800624a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006262:	e087      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80063d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006276:	4b51      	ldr	r3, [pc, #324]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006286:	ed97 6a02 	vldr	s12, [r7, #8]
 800628a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80063cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800628e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800629a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062a6:	e065      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80063d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ba:	4b40      	ldr	r3, [pc, #256]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80063cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80062d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062ea:	e043      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80063d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80062fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fe:	4b2f      	ldr	r3, [pc, #188]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006312:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80063cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800632e:	e021      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80063d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800633e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006342:	4b1e      	ldr	r3, [pc, #120]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006352:	ed97 6a02 	vldr	s12, [r7, #8]
 8006356:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80063cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800635a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800635e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006372:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006374:	4b11      	ldr	r3, [pc, #68]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006378:	0a5b      	lsrs	r3, r3, #9
 800637a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800637e:	3301      	adds	r3, #1
 8006380:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	ee07 3a90 	vmov	s15, r3
 8006388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800638c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006398:	ee17 3a90 	vmov	r3, s15
 800639c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800639e:	e005      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61bb      	str	r3, [r7, #24]
      break;
 80063a4:	e002      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80063a6:	4b07      	ldr	r3, [pc, #28]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063a8:	61bb      	str	r3, [r7, #24]
      break;
 80063aa:	bf00      	nop
  }

  return sysclockfreq;
 80063ac:	69bb      	ldr	r3, [r7, #24]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3724      	adds	r7, #36	@ 0x24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	58024400 	.word	0x58024400
 80063c0:	03d09000 	.word	0x03d09000
 80063c4:	003d0900 	.word	0x003d0900
 80063c8:	007a1200 	.word	0x007a1200
 80063cc:	46000000 	.word	0x46000000
 80063d0:	4c742400 	.word	0x4c742400
 80063d4:	4a742400 	.word	0x4a742400
 80063d8:	4af42400 	.word	0x4af42400

080063dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80063e2:	f7ff fe81 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 80063e6:	4602      	mov	r2, r0
 80063e8:	4b10      	ldr	r3, [pc, #64]	@ (800642c <HAL_RCC_GetHCLKFreq+0x50>)
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	0a1b      	lsrs	r3, r3, #8
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	490f      	ldr	r1, [pc, #60]	@ (8006430 <HAL_RCC_GetHCLKFreq+0x54>)
 80063f4:	5ccb      	ldrb	r3, [r1, r3]
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	fa22 f303 	lsr.w	r3, r2, r3
 80063fe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006400:	4b0a      	ldr	r3, [pc, #40]	@ (800642c <HAL_RCC_GetHCLKFreq+0x50>)
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	4a09      	ldr	r2, [pc, #36]	@ (8006430 <HAL_RCC_GetHCLKFreq+0x54>)
 800640a:	5cd3      	ldrb	r3, [r2, r3]
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	fa22 f303 	lsr.w	r3, r2, r3
 8006416:	4a07      	ldr	r2, [pc, #28]	@ (8006434 <HAL_RCC_GetHCLKFreq+0x58>)
 8006418:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800641a:	4a07      	ldr	r2, [pc, #28]	@ (8006438 <HAL_RCC_GetHCLKFreq+0x5c>)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006420:	4b04      	ldr	r3, [pc, #16]	@ (8006434 <HAL_RCC_GetHCLKFreq+0x58>)
 8006422:	681b      	ldr	r3, [r3, #0]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	58024400 	.word	0x58024400
 8006430:	0800eb30 	.word	0x0800eb30
 8006434:	24000004 	.word	0x24000004
 8006438:	24000000 	.word	0x24000000

0800643c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006440:	f7ff ffcc 	bl	80063dc <HAL_RCC_GetHCLKFreq>
 8006444:	4602      	mov	r2, r0
 8006446:	4b06      	ldr	r3, [pc, #24]	@ (8006460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	091b      	lsrs	r3, r3, #4
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	4904      	ldr	r1, [pc, #16]	@ (8006464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006452:	5ccb      	ldrb	r3, [r1, r3]
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800645c:	4618      	mov	r0, r3
 800645e:	bd80      	pop	{r7, pc}
 8006460:	58024400 	.word	0x58024400
 8006464:	0800eb30 	.word	0x0800eb30

08006468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800646c:	f7ff ffb6 	bl	80063dc <HAL_RCC_GetHCLKFreq>
 8006470:	4602      	mov	r2, r0
 8006472:	4b06      	ldr	r3, [pc, #24]	@ (800648c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	4904      	ldr	r1, [pc, #16]	@ (8006490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800647e:	5ccb      	ldrb	r3, [r1, r3]
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006488:	4618      	mov	r0, r3
 800648a:	bd80      	pop	{r7, pc}
 800648c:	58024400 	.word	0x58024400
 8006490:	0800eb30 	.word	0x0800eb30

08006494 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006498:	b0c8      	sub	sp, #288	@ 0x120
 800649a:	af00      	add	r7, sp, #0
 800649c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064a6:	2300      	movs	r3, #0
 80064a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80064b8:	2500      	movs	r5, #0
 80064ba:	ea54 0305 	orrs.w	r3, r4, r5
 80064be:	d049      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80064c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064ca:	d02f      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80064cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064d0:	d828      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80064d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064d6:	d01a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064dc:	d822      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80064e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064e6:	d007      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064e8:	e01c      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ea:	4ba7      	ldr	r3, [pc, #668]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ee:	4aa6      	ldr	r2, [pc, #664]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064f6:	e01a      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064fc:	3308      	adds	r3, #8
 80064fe:	2102      	movs	r1, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f001 fc43 	bl	8007d8c <RCCEx_PLL2_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800650c:	e00f      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800650e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006512:	3328      	adds	r3, #40	@ 0x28
 8006514:	2102      	movs	r1, #2
 8006516:	4618      	mov	r0, r3
 8006518:	f001 fcea 	bl	8007ef0 <RCCEx_PLL3_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006522:	e004      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800652a:	e000      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800652c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800652e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006536:	4b94      	ldr	r3, [pc, #592]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800653a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800653e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006544:	4a90      	ldr	r2, [pc, #576]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006546:	430b      	orrs	r3, r1
 8006548:	6513      	str	r3, [r2, #80]	@ 0x50
 800654a:	e003      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006550:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006560:	f04f 0900 	mov.w	r9, #0
 8006564:	ea58 0309 	orrs.w	r3, r8, r9
 8006568:	d047      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800656a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800656e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006570:	2b04      	cmp	r3, #4
 8006572:	d82a      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006574:	a201      	add	r2, pc, #4	@ (adr r2, 800657c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	08006591 	.word	0x08006591
 8006580:	0800659f 	.word	0x0800659f
 8006584:	080065b5 	.word	0x080065b5
 8006588:	080065d3 	.word	0x080065d3
 800658c:	080065d3 	.word	0x080065d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006590:	4b7d      	ldr	r3, [pc, #500]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	4a7c      	ldr	r2, [pc, #496]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800659a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800659c:	e01a      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800659e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a2:	3308      	adds	r3, #8
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 fbf0 	bl	8007d8c <RCCEx_PLL2_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065b2:	e00f      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b8:	3328      	adds	r3, #40	@ 0x28
 80065ba:	2100      	movs	r1, #0
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fc97 	bl	8007ef0 <RCCEx_PLL3_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065c8:	e004      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065d0:	e000      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80065d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065dc:	4b6a      	ldr	r3, [pc, #424]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e0:	f023 0107 	bic.w	r1, r3, #7
 80065e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ea:	4a67      	ldr	r2, [pc, #412]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80065f0:	e003      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80065fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006606:	f04f 0b00 	mov.w	fp, #0
 800660a:	ea5a 030b 	orrs.w	r3, sl, fp
 800660e:	d054      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006616:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800661a:	d036      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800661c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006620:	d82f      	bhi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006626:	d032      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800662c:	d829      	bhi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800662e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006630:	d02f      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006632:	2bc0      	cmp	r3, #192	@ 0xc0
 8006634:	d825      	bhi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006636:	2b80      	cmp	r3, #128	@ 0x80
 8006638:	d018      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800663a:	2b80      	cmp	r3, #128	@ 0x80
 800663c:	d821      	bhi.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006642:	2b40      	cmp	r3, #64	@ 0x40
 8006644:	d007      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006646:	e01c      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006648:	4b4f      	ldr	r3, [pc, #316]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	4a4e      	ldr	r2, [pc, #312]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800664e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006654:	e01e      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800665a:	3308      	adds	r3, #8
 800665c:	2100      	movs	r1, #0
 800665e:	4618      	mov	r0, r3
 8006660:	f001 fb94 	bl	8007d8c <RCCEx_PLL2_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800666a:	e013      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800666c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006670:	3328      	adds	r3, #40	@ 0x28
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f001 fc3b 	bl	8007ef0 <RCCEx_PLL3_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006680:	e008      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006688:	e004      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800668a:	bf00      	nop
 800668c:	e002      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006694:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800669c:	4b3a      	ldr	r3, [pc, #232]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800669e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80066a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066aa:	4a37      	ldr	r2, [pc, #220]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066ac:	430b      	orrs	r3, r1
 80066ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80066b0:	e003      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80066ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80066c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80066ca:	2300      	movs	r3, #0
 80066cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80066d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80066d4:	460b      	mov	r3, r1
 80066d6:	4313      	orrs	r3, r2
 80066d8:	d05c      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80066da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80066e4:	d03b      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066e6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80066ea:	d834      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80066ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f0:	d037      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80066f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f6:	d82e      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80066f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066fc:	d033      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80066fe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006702:	d828      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006708:	d01a      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800670a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800670e:	d822      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006718:	d007      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800671a:	e01c      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800671c:	4b1a      	ldr	r3, [pc, #104]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	4a19      	ldr	r2, [pc, #100]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006728:	e01e      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800672a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800672e:	3308      	adds	r3, #8
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f001 fb2a 	bl	8007d8c <RCCEx_PLL2_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800673e:	e013      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006744:	3328      	adds	r3, #40	@ 0x28
 8006746:	2100      	movs	r1, #0
 8006748:	4618      	mov	r0, r3
 800674a:	f001 fbd1 	bl	8007ef0 <RCCEx_PLL3_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006754:	e008      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800675c:	e004      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800675e:	bf00      	nop
 8006760:	e002      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006768:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10d      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006770:	4b05      	ldr	r3, [pc, #20]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006774:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800677c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800677e:	4a02      	ldr	r2, [pc, #8]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006780:	430b      	orrs	r3, r1
 8006782:	6513      	str	r3, [r2, #80]	@ 0x50
 8006784:	e006      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006786:	bf00      	nop
 8006788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006790:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80067a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80067a4:	2300      	movs	r3, #0
 80067a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80067ae:	460b      	mov	r3, r1
 80067b0:	4313      	orrs	r3, r2
 80067b2:	d03a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80067b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ba:	2b30      	cmp	r3, #48	@ 0x30
 80067bc:	d01f      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80067be:	2b30      	cmp	r3, #48	@ 0x30
 80067c0:	d819      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	d00c      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80067c6:	2b20      	cmp	r3, #32
 80067c8:	d815      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d019      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80067ce:	2b10      	cmp	r3, #16
 80067d0:	d111      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d2:	4bae      	ldr	r3, [pc, #696]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	4aad      	ldr	r2, [pc, #692]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80067de:	e011      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067e4:	3308      	adds	r3, #8
 80067e6:	2102      	movs	r1, #2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 facf 	bl	8007d8c <RCCEx_PLL2_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006804:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800680c:	4b9f      	ldr	r3, [pc, #636]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800680e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006810:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681a:	4a9c      	ldr	r2, [pc, #624]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800681c:	430b      	orrs	r3, r1
 800681e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006820:	e003      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006822:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006826:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800682a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006836:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800683a:	2300      	movs	r3, #0
 800683c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006840:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006844:	460b      	mov	r3, r1
 8006846:	4313      	orrs	r3, r2
 8006848:	d051      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800684a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800684e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006854:	d035      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006856:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800685a:	d82e      	bhi.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 800685c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006860:	d031      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006862:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006866:	d828      	bhi.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800686c:	d01a      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800686e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006872:	d822      	bhi.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800687c:	d007      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800687e:	e01c      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006880:	4b82      	ldr	r3, [pc, #520]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	4a81      	ldr	r2, [pc, #516]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800688a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800688c:	e01c      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800688e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006892:	3308      	adds	r3, #8
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f001 fa78 	bl	8007d8c <RCCEx_PLL2_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068a2:	e011      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068a8:	3328      	adds	r3, #40	@ 0x28
 80068aa:	2100      	movs	r1, #0
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fb1f 	bl	8007ef0 <RCCEx_PLL3_Config>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068b8:	e006      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80068c0:	e002      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80068c2:	bf00      	nop
 80068c4:	e000      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80068c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80068d0:	4b6e      	ldr	r3, [pc, #440]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80068d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068de:	4a6b      	ldr	r2, [pc, #428]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80068e4:	e003      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80068ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80068fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006904:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006908:	460b      	mov	r3, r1
 800690a:	4313      	orrs	r3, r2
 800690c:	d053      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800690e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006912:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006918:	d033      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800691a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800691e:	d82c      	bhi.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006920:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006924:	d02f      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006926:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800692a:	d826      	bhi.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800692c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006930:	d02b      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006932:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006936:	d820      	bhi.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800693c:	d012      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800693e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006942:	d81a      	bhi.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d022      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694c:	d115      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800694e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006952:	3308      	adds	r3, #8
 8006954:	2101      	movs	r1, #1
 8006956:	4618      	mov	r0, r3
 8006958:	f001 fa18 	bl	8007d8c <RCCEx_PLL2_Config>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006962:	e015      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006968:	3328      	adds	r3, #40	@ 0x28
 800696a:	2101      	movs	r1, #1
 800696c:	4618      	mov	r0, r3
 800696e:	f001 fabf 	bl	8007ef0 <RCCEx_PLL3_Config>
 8006972:	4603      	mov	r3, r0
 8006974:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006978:	e00a      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006980:	e006      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006982:	bf00      	nop
 8006984:	e004      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006986:	bf00      	nop
 8006988:	e002      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800698a:	bf00      	nop
 800698c:	e000      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800698e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006990:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006998:	4b3c      	ldr	r3, [pc, #240]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800699a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80069a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069a6:	4a39      	ldr	r2, [pc, #228]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80069c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069c6:	2300      	movs	r3, #0
 80069c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4313      	orrs	r3, r2
 80069d4:	d060      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80069d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069de:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80069e2:	d039      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80069e4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80069e8:	d832      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80069ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069ee:	d035      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80069f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069f4:	d82c      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80069f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069fa:	d031      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a00:	d826      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a06:	d02d      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006a08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a0c:	d820      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a12:	d012      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a18:	d81a      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d024      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a22:	d115      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a28:	3308      	adds	r3, #8
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 f9ad 	bl	8007d8c <RCCEx_PLL2_Config>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a38:	e017      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a3e:	3328      	adds	r3, #40	@ 0x28
 8006a40:	2101      	movs	r1, #1
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 fa54 	bl	8007ef0 <RCCEx_PLL3_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a4e:	e00c      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a56:	e008      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a58:	bf00      	nop
 8006a5a:	e006      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a5c:	bf00      	nop
 8006a5e:	e004      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a60:	bf00      	nop
 8006a62:	e002      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a64:	bf00      	nop
 8006a66:	e000      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10e      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a72:	4b06      	ldr	r3, [pc, #24]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a82:	4a02      	ldr	r2, [pc, #8]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a84:	430b      	orrs	r3, r1
 8006a86:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a88:	e006      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006a8a:	bf00      	nop
 8006a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	d037      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ac2:	d00e      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ac8:	d816      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d018      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ad2:	d111      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad4:	4bc4      	ldr	r3, [pc, #784]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	4ac3      	ldr	r2, [pc, #780]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ae0:	e00f      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	2101      	movs	r1, #1
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 f94e 	bl	8007d8c <RCCEx_PLL2_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006af6:	e004      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006afe:	e000      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b0a:	4bb7      	ldr	r3, [pc, #732]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b18:	4ab3      	ldr	r2, [pc, #716]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b1a:	430b      	orrs	r3, r1
 8006b1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b1e:	e003      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006b34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4313      	orrs	r3, r2
 8006b46:	d039      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d81c      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006b52:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006b95 	.word	0x08006b95
 8006b5c:	08006b69 	.word	0x08006b69
 8006b60:	08006b77 	.word	0x08006b77
 8006b64:	08006b95 	.word	0x08006b95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b68:	4b9f      	ldr	r3, [pc, #636]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	4a9e      	ldr	r2, [pc, #632]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b74:	e00f      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	2102      	movs	r1, #2
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 f904 	bl	8007d8c <RCCEx_PLL2_Config>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b8a:	e004      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b92:	e000      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b9e:	4b92      	ldr	r3, [pc, #584]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba2:	f023 0103 	bic.w	r1, r3, #3
 8006ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bac:	4a8e      	ldr	r2, [pc, #568]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bb2:	e003      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006bd2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f000 8099 	beq.w	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bde:	4b83      	ldr	r3, [pc, #524]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a82      	ldr	r2, [pc, #520]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006be8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bea:	f7fb f881 	bl	8001cf0 <HAL_GetTick>
 8006bee:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bf2:	e00b      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf4:	f7fb f87c 	bl	8001cf0 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b64      	cmp	r3, #100	@ 0x64
 8006c02:	d903      	bls.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c0a:	e005      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c0c:	4b77      	ldr	r3, [pc, #476]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0ed      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006c18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d173      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c20:	4b71      	ldr	r3, [pc, #452]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c2c:	4053      	eors	r3, r2
 8006c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d015      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c36:	4b6c      	ldr	r3, [pc, #432]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c3e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c42:	4b69      	ldr	r3, [pc, #420]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c46:	4a68      	ldr	r2, [pc, #416]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c4c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c4e:	4b66      	ldr	r3, [pc, #408]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c52:	4a65      	ldr	r2, [pc, #404]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c58:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c5a:	4a63      	ldr	r2, [pc, #396]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c60:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c6e:	d118      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fb f83e 	bl	8001cf0 <HAL_GetTick>
 8006c74:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c78:	e00d      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c7a:	f7fb f839 	bl	8001cf0 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006c84:	1ad2      	subs	r2, r2, r3
 8006c86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d903      	bls.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006c94:	e005      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c96:	4b54      	ldr	r3, [pc, #336]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0eb      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006ca2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d129      	bne.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cba:	d10e      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ccc:	091a      	lsrs	r2, r3, #4
 8006cce:	4b48      	ldr	r3, [pc, #288]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	4a45      	ldr	r2, [pc, #276]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	6113      	str	r3, [r2, #16]
 8006cd8:	e005      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006cda:	4b43      	ldr	r3, [pc, #268]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	4a42      	ldr	r2, [pc, #264]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ce4:	6113      	str	r3, [r2, #16]
 8006ce6:	4b40      	ldr	r3, [pc, #256]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cfc:	e008      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006d06:	e003      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	f002 0301 	and.w	r3, r2, #1
 8006d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d20:	2300      	movs	r3, #0
 8006d22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f000 8090 	beq.w	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d3a:	2b28      	cmp	r3, #40	@ 0x28
 8006d3c:	d870      	bhi.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006e29 	.word	0x08006e29
 8006d48:	08006e21 	.word	0x08006e21
 8006d4c:	08006e21 	.word	0x08006e21
 8006d50:	08006e21 	.word	0x08006e21
 8006d54:	08006e21 	.word	0x08006e21
 8006d58:	08006e21 	.word	0x08006e21
 8006d5c:	08006e21 	.word	0x08006e21
 8006d60:	08006e21 	.word	0x08006e21
 8006d64:	08006df5 	.word	0x08006df5
 8006d68:	08006e21 	.word	0x08006e21
 8006d6c:	08006e21 	.word	0x08006e21
 8006d70:	08006e21 	.word	0x08006e21
 8006d74:	08006e21 	.word	0x08006e21
 8006d78:	08006e21 	.word	0x08006e21
 8006d7c:	08006e21 	.word	0x08006e21
 8006d80:	08006e21 	.word	0x08006e21
 8006d84:	08006e0b 	.word	0x08006e0b
 8006d88:	08006e21 	.word	0x08006e21
 8006d8c:	08006e21 	.word	0x08006e21
 8006d90:	08006e21 	.word	0x08006e21
 8006d94:	08006e21 	.word	0x08006e21
 8006d98:	08006e21 	.word	0x08006e21
 8006d9c:	08006e21 	.word	0x08006e21
 8006da0:	08006e21 	.word	0x08006e21
 8006da4:	08006e29 	.word	0x08006e29
 8006da8:	08006e21 	.word	0x08006e21
 8006dac:	08006e21 	.word	0x08006e21
 8006db0:	08006e21 	.word	0x08006e21
 8006db4:	08006e21 	.word	0x08006e21
 8006db8:	08006e21 	.word	0x08006e21
 8006dbc:	08006e21 	.word	0x08006e21
 8006dc0:	08006e21 	.word	0x08006e21
 8006dc4:	08006e29 	.word	0x08006e29
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	08006e21 	.word	0x08006e21
 8006dd0:	08006e21 	.word	0x08006e21
 8006dd4:	08006e21 	.word	0x08006e21
 8006dd8:	08006e21 	.word	0x08006e21
 8006ddc:	08006e21 	.word	0x08006e21
 8006de0:	08006e21 	.word	0x08006e21
 8006de4:	08006e29 	.word	0x08006e29
 8006de8:	58024400 	.word	0x58024400
 8006dec:	58024800 	.word	0x58024800
 8006df0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006df8:	3308      	adds	r3, #8
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 ffc5 	bl	8007d8c <RCCEx_PLL2_Config>
 8006e02:	4603      	mov	r3, r0
 8006e04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e08:	e00f      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e0e:	3328      	adds	r3, #40	@ 0x28
 8006e10:	2101      	movs	r1, #1
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 f86c 	bl	8007ef0 <RCCEx_PLL3_Config>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e1e:	e004      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e26:	e000      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10b      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e32:	4bc0      	ldr	r3, [pc, #768]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e36:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e42:	4abc      	ldr	r2, [pc, #752]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006e44:	430b      	orrs	r3, r1
 8006e46:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e48:	e003      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f002 0302 	and.w	r3, r2, #2
 8006e5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e62:	2300      	movs	r3, #0
 8006e64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e68:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	d043      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	d824      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006ed1 	.word	0x08006ed1
 8006e88:	08006e9d 	.word	0x08006e9d
 8006e8c:	08006eb3 	.word	0x08006eb3
 8006e90:	08006ed1 	.word	0x08006ed1
 8006e94:	08006ed1 	.word	0x08006ed1
 8006e98:	08006ed1 	.word	0x08006ed1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 ff71 	bl	8007d8c <RCCEx_PLL2_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006eb0:	e00f      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eb6:	3328      	adds	r3, #40	@ 0x28
 8006eb8:	2101      	movs	r1, #1
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 f818 	bl	8007ef0 <RCCEx_PLL3_Config>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ec6:	e004      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ece:	e000      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006eda:	4b96      	ldr	r3, [pc, #600]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ede:	f023 0107 	bic.w	r1, r3, #7
 8006ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eea:	4a92      	ldr	r2, [pc, #584]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ef0:	e003      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ef6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f002 0304 	and.w	r3, r2, #4
 8006f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f10:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4313      	orrs	r3, r2
 8006f18:	d043      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d824      	bhi.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006f26:	a201      	add	r2, pc, #4	@ (adr r2, 8006f2c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f79 	.word	0x08006f79
 8006f30:	08006f45 	.word	0x08006f45
 8006f34:	08006f5b 	.word	0x08006f5b
 8006f38:	08006f79 	.word	0x08006f79
 8006f3c:	08006f79 	.word	0x08006f79
 8006f40:	08006f79 	.word	0x08006f79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f48:	3308      	adds	r3, #8
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 ff1d 	bl	8007d8c <RCCEx_PLL2_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f58:	e00f      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f5e:	3328      	adds	r3, #40	@ 0x28
 8006f60:	2101      	movs	r1, #1
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 ffc4 	bl	8007ef0 <RCCEx_PLL3_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f6e:	e004      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f76:	e000      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10b      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f82:	4b6c      	ldr	r3, [pc, #432]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f86:	f023 0107 	bic.w	r1, r3, #7
 8006f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f92:	4a68      	ldr	r2, [pc, #416]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f94:	430b      	orrs	r3, r1
 8006f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f98:	e003      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f9e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	f002 0320 	and.w	r3, r2, #32
 8006fae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	d055      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fce:	d033      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fd4:	d82c      	bhi.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fda:	d02f      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe0:	d826      	bhi.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006fe2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fe6:	d02b      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006fe8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fec:	d820      	bhi.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff2:	d012      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff8:	d81a      	bhi.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d022      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007002:	d115      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007004:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007008:	3308      	adds	r3, #8
 800700a:	2100      	movs	r1, #0
 800700c:	4618      	mov	r0, r3
 800700e:	f000 febd 	bl	8007d8c <RCCEx_PLL2_Config>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007018:	e015      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800701a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800701e:	3328      	adds	r3, #40	@ 0x28
 8007020:	2102      	movs	r1, #2
 8007022:	4618      	mov	r0, r3
 8007024:	f000 ff64 	bl	8007ef0 <RCCEx_PLL3_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800702e:	e00a      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007036:	e006      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007038:	bf00      	nop
 800703a:	e004      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800703c:	bf00      	nop
 800703e:	e002      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007040:	bf00      	nop
 8007042:	e000      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007046:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10b      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800704e:	4b39      	ldr	r3, [pc, #228]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007052:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800705a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800705e:	4a35      	ldr	r2, [pc, #212]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007060:	430b      	orrs	r3, r1
 8007062:	6553      	str	r3, [r2, #84]	@ 0x54
 8007064:	e003      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007066:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800706a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800706e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007076:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800707a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800707e:	2300      	movs	r3, #0
 8007080:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007084:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007088:	460b      	mov	r3, r1
 800708a:	4313      	orrs	r3, r2
 800708c:	d058      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800708e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007092:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007096:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800709a:	d033      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800709c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80070a0:	d82c      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80070a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070a6:	d02f      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80070a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ac:	d826      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80070ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070b2:	d02b      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80070b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070b8:	d820      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80070ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070be:	d012      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80070c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070c4:	d81a      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d022      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80070ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ce:	d115      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d4:	3308      	adds	r3, #8
 80070d6:	2100      	movs	r1, #0
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 fe57 	bl	8007d8c <RCCEx_PLL2_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80070e4:	e015      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ea:	3328      	adds	r3, #40	@ 0x28
 80070ec:	2102      	movs	r1, #2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fefe 	bl	8007ef0 <RCCEx_PLL3_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80070fa:	e00a      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007102:	e006      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007104:	bf00      	nop
 8007106:	e004      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007108:	bf00      	nop
 800710a:	e002      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007112:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10e      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800711a:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800711c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800711e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007126:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800712a:	4a02      	ldr	r2, [pc, #8]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800712c:	430b      	orrs	r3, r1
 800712e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007130:	e006      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007132:	bf00      	nop
 8007134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007138:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800713c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800714c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007150:	2300      	movs	r3, #0
 8007152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007156:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800715a:	460b      	mov	r3, r1
 800715c:	4313      	orrs	r3, r2
 800715e:	d055      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007164:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007168:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800716c:	d033      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800716e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007172:	d82c      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007178:	d02f      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800717a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800717e:	d826      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007180:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007184:	d02b      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007186:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800718a:	d820      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800718c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007190:	d012      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007196:	d81a      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d022      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800719c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a0:	d115      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071a6:	3308      	adds	r3, #8
 80071a8:	2100      	movs	r1, #0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fdee 	bl	8007d8c <RCCEx_PLL2_Config>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071b6:	e015      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071bc:	3328      	adds	r3, #40	@ 0x28
 80071be:	2102      	movs	r1, #2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fe95 	bl	8007ef0 <RCCEx_PLL3_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071cc:	e00a      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071d4:	e006      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80071d6:	bf00      	nop
 80071d8:	e004      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80071da:	bf00      	nop
 80071dc:	e002      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80071de:	bf00      	nop
 80071e0:	e000      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80071e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10b      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071ec:	4ba1      	ldr	r3, [pc, #644]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80071f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071fc:	4a9d      	ldr	r2, [pc, #628]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071fe:	430b      	orrs	r3, r1
 8007200:	6593      	str	r3, [r2, #88]	@ 0x58
 8007202:	e003      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007204:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007208:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800720c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f002 0308 	and.w	r3, r2, #8
 8007218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800721c:	2300      	movs	r3, #0
 800721e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007222:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007226:	460b      	mov	r3, r1
 8007228:	4313      	orrs	r3, r2
 800722a:	d01e      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800722c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007238:	d10c      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800723a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800723e:	3328      	adds	r3, #40	@ 0x28
 8007240:	2102      	movs	r1, #2
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fe54 	bl	8007ef0 <RCCEx_PLL3_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007254:	4b87      	ldr	r3, [pc, #540]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007258:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800725c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007264:	4a83      	ldr	r2, [pc, #524]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007266:	430b      	orrs	r3, r1
 8007268:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800726a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007272:	f002 0310 	and.w	r3, r2, #16
 8007276:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800727a:	2300      	movs	r3, #0
 800727c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007280:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007284:	460b      	mov	r3, r1
 8007286:	4313      	orrs	r3, r2
 8007288:	d01e      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800728a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800728e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007296:	d10c      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800729c:	3328      	adds	r3, #40	@ 0x28
 800729e:	2102      	movs	r1, #2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fe25 	bl	8007ef0 <RCCEx_PLL3_Config>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072b2:	4b70      	ldr	r3, [pc, #448]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80072c2:	4a6c      	ldr	r2, [pc, #432]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80072d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072d8:	2300      	movs	r3, #0
 80072da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80072e2:	460b      	mov	r3, r1
 80072e4:	4313      	orrs	r3, r2
 80072e6:	d03e      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80072e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80072f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072f4:	d022      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80072f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072fa:	d81b      	bhi.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007304:	d00b      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007306:	e015      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800730c:	3308      	adds	r3, #8
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fd3b 	bl	8007d8c <RCCEx_PLL2_Config>
 8007316:	4603      	mov	r3, r0
 8007318:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800731c:	e00f      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800731e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007322:	3328      	adds	r3, #40	@ 0x28
 8007324:	2102      	movs	r1, #2
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fde2 	bl	8007ef0 <RCCEx_PLL3_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007332:	e004      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800733a:	e000      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800733c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800733e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10b      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007346:	4b4b      	ldr	r3, [pc, #300]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800734a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800734e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007352:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007356:	4a47      	ldr	r2, [pc, #284]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007358:	430b      	orrs	r3, r1
 800735a:	6593      	str	r3, [r2, #88]	@ 0x58
 800735c:	e003      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007362:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007372:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007374:	2300      	movs	r3, #0
 8007376:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007378:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800737c:	460b      	mov	r3, r1
 800737e:	4313      	orrs	r3, r2
 8007380:	d03b      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800738a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800738e:	d01f      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007390:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007394:	d818      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800739a:	d003      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800739c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073a0:	d007      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80073a2:	e011      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073a4:	4b33      	ldr	r3, [pc, #204]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a8:	4a32      	ldr	r2, [pc, #200]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80073b0:	e00f      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073b6:	3328      	adds	r3, #40	@ 0x28
 80073b8:	2101      	movs	r1, #1
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fd98 	bl	8007ef0 <RCCEx_PLL3_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80073c6:	e004      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073ce:	e000      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80073d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10b      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073da:	4b26      	ldr	r3, [pc, #152]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ea:	4a22      	ldr	r2, [pc, #136]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80073f0:	e003      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80073fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007406:	673b      	str	r3, [r7, #112]	@ 0x70
 8007408:	2300      	movs	r3, #0
 800740a:	677b      	str	r3, [r7, #116]	@ 0x74
 800740c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007410:	460b      	mov	r3, r1
 8007412:	4313      	orrs	r3, r2
 8007414:	d034      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800741a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007424:	d007      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007426:	e011      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007428:	4b12      	ldr	r3, [pc, #72]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800742a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742c:	4a11      	ldr	r2, [pc, #68]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800742e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007434:	e00e      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800743a:	3308      	adds	r3, #8
 800743c:	2102      	movs	r1, #2
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fca4 	bl	8007d8c <RCCEx_PLL2_Config>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800744a:	e003      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007454:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800745c:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800745e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007460:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800746a:	4a02      	ldr	r2, [pc, #8]	@ (8007474 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800746c:	430b      	orrs	r3, r1
 800746e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007470:	e006      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007472:	bf00      	nop
 8007474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007478:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800747c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800748c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800748e:	2300      	movs	r3, #0
 8007490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007492:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007496:	460b      	mov	r3, r1
 8007498:	4313      	orrs	r3, r2
 800749a:	d00c      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800749c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074a0:	3328      	adds	r3, #40	@ 0x28
 80074a2:	2102      	movs	r1, #2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fd23 	bl	8007ef0 <RCCEx_PLL3_Config>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80074b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80074c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80074c4:	2300      	movs	r3, #0
 80074c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80074c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80074cc:	460b      	mov	r3, r1
 80074ce:	4313      	orrs	r3, r2
 80074d0:	d038      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80074d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074de:	d018      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80074e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074e4:	d811      	bhi.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80074e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ea:	d014      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f0:	d80b      	bhi.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d011      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80074f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074fa:	d106      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fc:	4bc3      	ldr	r3, [pc, #780]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007500:	4ac2      	ldr	r2, [pc, #776]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007508:	e008      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007510:	e004      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007512:	bf00      	nop
 8007514:	e002      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007516:	bf00      	nop
 8007518:	e000      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800751a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10b      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007524:	4bb9      	ldr	r3, [pc, #740]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007528:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800752c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007534:	4ab5      	ldr	r2, [pc, #724]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007536:	430b      	orrs	r3, r1
 8007538:	6553      	str	r3, [r2, #84]	@ 0x54
 800753a:	e003      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007540:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007550:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007552:	2300      	movs	r3, #0
 8007554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007556:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800755a:	460b      	mov	r3, r1
 800755c:	4313      	orrs	r3, r2
 800755e:	d009      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007560:	4baa      	ldr	r3, [pc, #680]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007564:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800756c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800756e:	4aa7      	ldr	r2, [pc, #668]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007570:	430b      	orrs	r3, r1
 8007572:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007580:	653b      	str	r3, [r7, #80]	@ 0x50
 8007582:	2300      	movs	r3, #0
 8007584:	657b      	str	r3, [r7, #84]	@ 0x54
 8007586:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800758a:	460b      	mov	r3, r1
 800758c:	4313      	orrs	r3, r2
 800758e:	d009      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007590:	4b9e      	ldr	r3, [pc, #632]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007594:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800759c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800759e:	4a9b      	ldr	r2, [pc, #620]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075a0:	430b      	orrs	r3, r1
 80075a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80075a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80075b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075b2:	2300      	movs	r3, #0
 80075b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80075ba:	460b      	mov	r3, r1
 80075bc:	4313      	orrs	r3, r2
 80075be:	d009      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80075c0:	4b92      	ldr	r3, [pc, #584]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80075c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ce:	4a8f      	ldr	r2, [pc, #572]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075d0:	430b      	orrs	r3, r1
 80075d2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80075d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80075e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075e2:	2300      	movs	r3, #0
 80075e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80075e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80075ea:	460b      	mov	r3, r1
 80075ec:	4313      	orrs	r3, r2
 80075ee:	d00e      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075f0:	4b86      	ldr	r3, [pc, #536]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	4a85      	ldr	r2, [pc, #532]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075fa:	6113      	str	r3, [r2, #16]
 80075fc:	4b83      	ldr	r3, [pc, #524]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075fe:	6919      	ldr	r1, [r3, #16]
 8007600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007604:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007608:	4a80      	ldr	r2, [pc, #512]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800760a:	430b      	orrs	r3, r1
 800760c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800760e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800761a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800761c:	2300      	movs	r3, #0
 800761e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007620:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007624:	460b      	mov	r3, r1
 8007626:	4313      	orrs	r3, r2
 8007628:	d009      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800762a:	4b78      	ldr	r3, [pc, #480]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800762c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800762e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007638:	4a74      	ldr	r2, [pc, #464]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800763a:	430b      	orrs	r3, r1
 800763c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800763e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800764a:	633b      	str	r3, [r7, #48]	@ 0x30
 800764c:	2300      	movs	r3, #0
 800764e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007650:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007654:	460b      	mov	r3, r1
 8007656:	4313      	orrs	r3, r2
 8007658:	d00a      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800765a:	4b6c      	ldr	r3, [pc, #432]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800765c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800766a:	4a68      	ldr	r2, [pc, #416]	@ (800780c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800766c:	430b      	orrs	r3, r1
 800766e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	2100      	movs	r1, #0
 800767a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007682:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007686:	460b      	mov	r3, r1
 8007688:	4313      	orrs	r3, r2
 800768a:	d011      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800768c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007690:	3308      	adds	r3, #8
 8007692:	2100      	movs	r1, #0
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fb79 	bl	8007d8c <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80076a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80076b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	2100      	movs	r1, #0
 80076ba:	6239      	str	r1, [r7, #32]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80076c6:	460b      	mov	r3, r1
 80076c8:	4313      	orrs	r3, r2
 80076ca:	d011      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076d0:	3308      	adds	r3, #8
 80076d2:	2101      	movs	r1, #1
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fb59 	bl	8007d8c <RCCEx_PLL2_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80076e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80076f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	2100      	movs	r1, #0
 80076fa:	61b9      	str	r1, [r7, #24]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007706:	460b      	mov	r3, r1
 8007708:	4313      	orrs	r3, r2
 800770a:	d011      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800770c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007710:	3308      	adds	r3, #8
 8007712:	2102      	movs	r1, #2
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fb39 	bl	8007d8c <RCCEx_PLL2_Config>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007720:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800772c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	2100      	movs	r1, #0
 800773a:	6139      	str	r1, [r7, #16]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007746:	460b      	mov	r3, r1
 8007748:	4313      	orrs	r3, r2
 800774a:	d011      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800774c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007750:	3328      	adds	r3, #40	@ 0x28
 8007752:	2100      	movs	r1, #0
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fbcb 	bl	8007ef0 <RCCEx_PLL3_Config>
 800775a:	4603      	mov	r3, r0
 800775c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8007760:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007768:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800776c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	2100      	movs	r1, #0
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	f003 0310 	and.w	r3, r3, #16
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007786:	460b      	mov	r3, r1
 8007788:	4313      	orrs	r3, r2
 800778a:	d011      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800778c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007790:	3328      	adds	r3, #40	@ 0x28
 8007792:	2101      	movs	r1, #1
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fbab 	bl	8007ef0 <RCCEx_PLL3_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80077a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d003      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80077b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	2100      	movs	r1, #0
 80077ba:	6039      	str	r1, [r7, #0]
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80077c6:	460b      	mov	r3, r1
 80077c8:	4313      	orrs	r3, r2
 80077ca:	d011      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077d0:	3328      	adds	r3, #40	@ 0x28
 80077d2:	2102      	movs	r1, #2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fb8b 	bl	8007ef0 <RCCEx_PLL3_Config>
 80077da:	4603      	mov	r3, r0
 80077dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80077e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80077f0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e000      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
}
 80077fe:	4618      	mov	r0, r3
 8007800:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007804:	46bd      	mov	sp, r7
 8007806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800780a:	bf00      	nop
 800780c:	58024400 	.word	0x58024400

08007810 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007814:	f7fe fde2 	bl	80063dc <HAL_RCC_GetHCLKFreq>
 8007818:	4602      	mov	r2, r0
 800781a:	4b06      	ldr	r3, [pc, #24]	@ (8007834 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	091b      	lsrs	r3, r3, #4
 8007820:	f003 0307 	and.w	r3, r3, #7
 8007824:	4904      	ldr	r1, [pc, #16]	@ (8007838 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007826:	5ccb      	ldrb	r3, [r1, r3]
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007830:	4618      	mov	r0, r3
 8007832:	bd80      	pop	{r7, pc}
 8007834:	58024400 	.word	0x58024400
 8007838:	0800eb30 	.word	0x0800eb30

0800783c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800783c:	b480      	push	{r7}
 800783e:	b089      	sub	sp, #36	@ 0x24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007844:	4ba1      	ldr	r3, [pc, #644]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007848:	f003 0303 	and.w	r3, r3, #3
 800784c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800784e:	4b9f      	ldr	r3, [pc, #636]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007852:	0b1b      	lsrs	r3, r3, #12
 8007854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007858:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800785a:	4b9c      	ldr	r3, [pc, #624]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	091b      	lsrs	r3, r3, #4
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007866:	4b99      	ldr	r3, [pc, #612]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786a:	08db      	lsrs	r3, r3, #3
 800786c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	fb02 f303 	mul.w	r3, r2, r3
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8111 	beq.w	8007aac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2b02      	cmp	r3, #2
 800788e:	f000 8083 	beq.w	8007998 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b02      	cmp	r3, #2
 8007896:	f200 80a1 	bhi.w	80079dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d056      	beq.n	8007954 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80078a6:	e099      	b.n	80079dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078a8:	4b88      	ldr	r3, [pc, #544]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d02d      	beq.n	8007910 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078b4:	4b85      	ldr	r3, [pc, #532]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	08db      	lsrs	r3, r3, #3
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	4a84      	ldr	r2, [pc, #528]	@ (8007ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80078c0:	fa22 f303 	lsr.w	r3, r2, r3
 80078c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	ee07 3a90 	vmov	s15, r3
 80078cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078de:	4b7b      	ldr	r3, [pc, #492]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800790e:	e087      	b.n	8007a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800791e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007922:	4b6a      	ldr	r3, [pc, #424]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007932:	ed97 6a03 	vldr	s12, [r7, #12]
 8007936:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800793a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007952:	e065      	b.n	8007a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800795e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007966:	4b59      	ldr	r3, [pc, #356]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007976:	ed97 6a03 	vldr	s12, [r7, #12]
 800797a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800797e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800798a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007996:	e043      	b.n	8007a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80079a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079aa:	4b48      	ldr	r3, [pc, #288]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b2:	ee07 3a90 	vmov	s15, r3
 80079b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80079be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079da:	e021      	b.n	8007a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ee:	4b37      	ldr	r3, [pc, #220]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007a20:	4b2a      	ldr	r3, [pc, #168]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a24:	0a5b      	lsrs	r3, r3, #9
 8007a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a46:	ee17 2a90 	vmov	r2, s15
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a52:	0c1b      	lsrs	r3, r3, #16
 8007a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a58:	ee07 3a90 	vmov	s15, r3
 8007a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a74:	ee17 2a90 	vmov	r2, s15
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007a7c:	4b13      	ldr	r3, [pc, #76]	@ (8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a80:	0e1b      	lsrs	r3, r3, #24
 8007a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aa2:	ee17 2a90 	vmov	r2, s15
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007aaa:	e008      	b.n	8007abe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	609a      	str	r2, [r3, #8]
}
 8007abe:	bf00      	nop
 8007ac0:	3724      	adds	r7, #36	@ 0x24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	58024400 	.word	0x58024400
 8007ad0:	03d09000 	.word	0x03d09000
 8007ad4:	46000000 	.word	0x46000000
 8007ad8:	4c742400 	.word	0x4c742400
 8007adc:	4a742400 	.word	0x4a742400
 8007ae0:	4af42400 	.word	0x4af42400

08007ae4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b089      	sub	sp, #36	@ 0x24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007aec:	4ba1      	ldr	r3, [pc, #644]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af0:	f003 0303 	and.w	r3, r3, #3
 8007af4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007af6:	4b9f      	ldr	r3, [pc, #636]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afa:	0d1b      	lsrs	r3, r3, #20
 8007afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b02:	4b9c      	ldr	r3, [pc, #624]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b06:	0a1b      	lsrs	r3, r3, #8
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007b0e:	4b99      	ldr	r3, [pc, #612]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b12:	08db      	lsrs	r3, r3, #3
 8007b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	fb02 f303 	mul.w	r3, r2, r3
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8111 	beq.w	8007d54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	f000 8083 	beq.w	8007c40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	f200 80a1 	bhi.w	8007c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d056      	beq.n	8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007b4e:	e099      	b.n	8007c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b50:	4b88      	ldr	r3, [pc, #544]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0320 	and.w	r3, r3, #32
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d02d      	beq.n	8007bb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b5c:	4b85      	ldr	r3, [pc, #532]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	08db      	lsrs	r3, r3, #3
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	4a84      	ldr	r2, [pc, #528]	@ (8007d78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007b68:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	ee07 3a90 	vmov	s15, r3
 8007b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b86:	4b7b      	ldr	r3, [pc, #492]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8e:	ee07 3a90 	vmov	s15, r3
 8007b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007bb6:	e087      	b.n	8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007d80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bca:	4b6a      	ldr	r3, [pc, #424]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd2:	ee07 3a90 	vmov	s15, r3
 8007bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bfa:	e065      	b.n	8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0e:	4b59      	ldr	r3, [pc, #356]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c3e:	e043      	b.n	8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c52:	4b48      	ldr	r3, [pc, #288]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c82:	e021      	b.n	8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c96:	4b37      	ldr	r3, [pc, #220]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007caa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ccc:	0a5b      	lsrs	r3, r3, #9
 8007cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cee:	ee17 2a90 	vmov	r2, s15
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfa:	0c1b      	lsrs	r3, r3, #16
 8007cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d00:	ee07 3a90 	vmov	s15, r3
 8007d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d1c:	ee17 2a90 	vmov	r2, s15
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007d24:	4b13      	ldr	r3, [pc, #76]	@ (8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d28:	0e1b      	lsrs	r3, r3, #24
 8007d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d4a:	ee17 2a90 	vmov	r2, s15
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007d52:	e008      	b.n	8007d66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	609a      	str	r2, [r3, #8]
}
 8007d66:	bf00      	nop
 8007d68:	3724      	adds	r7, #36	@ 0x24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	58024400 	.word	0x58024400
 8007d78:	03d09000 	.word	0x03d09000
 8007d7c:	46000000 	.word	0x46000000
 8007d80:	4c742400 	.word	0x4c742400
 8007d84:	4a742400 	.word	0x4a742400
 8007d88:	4af42400 	.word	0x4af42400

08007d8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d9a:	4b53      	ldr	r3, [pc, #332]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d101      	bne.n	8007daa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e099      	b.n	8007ede <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007daa:	4b4f      	ldr	r3, [pc, #316]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a4e      	ldr	r2, [pc, #312]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007db0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db6:	f7f9 ff9b 	bl	8001cf0 <HAL_GetTick>
 8007dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dbc:	e008      	b.n	8007dd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dbe:	f7f9 ff97 	bl	8001cf0 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d901      	bls.n	8007dd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e086      	b.n	8007ede <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dd0:	4b45      	ldr	r3, [pc, #276]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1f0      	bne.n	8007dbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ddc:	4b42      	ldr	r3, [pc, #264]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	031b      	lsls	r3, r3, #12
 8007dea:	493f      	ldr	r1, [pc, #252]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	628b      	str	r3, [r1, #40]	@ 0x28
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	025b      	lsls	r3, r3, #9
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	041b      	lsls	r3, r3, #16
 8007e0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	061b      	lsls	r3, r3, #24
 8007e1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007e20:	4931      	ldr	r1, [pc, #196]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e26:	4b30      	ldr	r3, [pc, #192]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	492d      	ldr	r1, [pc, #180]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e38:	4b2b      	ldr	r3, [pc, #172]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3c:	f023 0220 	bic.w	r2, r3, #32
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	4928      	ldr	r1, [pc, #160]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e4a:	4b27      	ldr	r3, [pc, #156]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4e:	4a26      	ldr	r2, [pc, #152]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e50:	f023 0310 	bic.w	r3, r3, #16
 8007e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e56:	4b24      	ldr	r3, [pc, #144]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e5a:	4b24      	ldr	r3, [pc, #144]	@ (8007eec <RCCEx_PLL2_Config+0x160>)
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	69d2      	ldr	r2, [r2, #28]
 8007e62:	00d2      	lsls	r2, r2, #3
 8007e64:	4920      	ldr	r1, [pc, #128]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e70:	f043 0310 	orr.w	r3, r3, #16
 8007e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d106      	bne.n	8007e8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e80:	4a19      	ldr	r2, [pc, #100]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e88:	e00f      	b.n	8007eaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d106      	bne.n	8007e9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e90:	4b15      	ldr	r3, [pc, #84]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e94:	4a14      	ldr	r2, [pc, #80]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e9c:	e005      	b.n	8007eaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e9e:	4b12      	ldr	r3, [pc, #72]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea2:	4a11      	ldr	r2, [pc, #68]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007ea4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a0e      	ldr	r2, [pc, #56]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007eb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eb6:	f7f9 ff1b 	bl	8001cf0 <HAL_GetTick>
 8007eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ebc:	e008      	b.n	8007ed0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ebe:	f7f9 ff17 	bl	8001cf0 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d901      	bls.n	8007ed0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e006      	b.n	8007ede <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ed0:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <RCCEx_PLL2_Config+0x15c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d0f0      	beq.n	8007ebe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	58024400 	.word	0x58024400
 8007eec:	ffff0007 	.word	0xffff0007

08007ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007efe:	4b53      	ldr	r3, [pc, #332]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d101      	bne.n	8007f0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e099      	b.n	8008042 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f0e:	4b4f      	ldr	r3, [pc, #316]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a4e      	ldr	r2, [pc, #312]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f1a:	f7f9 fee9 	bl	8001cf0 <HAL_GetTick>
 8007f1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f20:	e008      	b.n	8007f34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f22:	f7f9 fee5 	bl	8001cf0 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d901      	bls.n	8007f34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e086      	b.n	8008042 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f34:	4b45      	ldr	r3, [pc, #276]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1f0      	bne.n	8007f22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f40:	4b42      	ldr	r3, [pc, #264]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	051b      	lsls	r3, r3, #20
 8007f4e:	493f      	ldr	r1, [pc, #252]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	025b      	lsls	r3, r3, #9
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	041b      	lsls	r3, r3, #16
 8007f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	061b      	lsls	r3, r3, #24
 8007f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f84:	4931      	ldr	r1, [pc, #196]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f8a:	4b30      	ldr	r3, [pc, #192]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	492d      	ldr	r1, [pc, #180]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	4928      	ldr	r1, [pc, #160]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007fae:	4b27      	ldr	r3, [pc, #156]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb2:	4a26      	ldr	r2, [pc, #152]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007fba:	4b24      	ldr	r3, [pc, #144]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fbe:	4b24      	ldr	r3, [pc, #144]	@ (8008050 <RCCEx_PLL3_Config+0x160>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	69d2      	ldr	r2, [r2, #28]
 8007fc6:	00d2      	lsls	r2, r2, #3
 8007fc8:	4920      	ldr	r1, [pc, #128]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007fce:	4b1f      	ldr	r3, [pc, #124]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d106      	bne.n	8007fee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe4:	4a19      	ldr	r2, [pc, #100]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007fe6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007fea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fec:	e00f      	b.n	800800e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d106      	bne.n	8008002 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ff4:	4b15      	ldr	r3, [pc, #84]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff8:	4a14      	ldr	r2, [pc, #80]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8007ffa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008000:	e005      	b.n	800800e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008002:	4b12      	ldr	r3, [pc, #72]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8008004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008006:	4a11      	ldr	r2, [pc, #68]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8008008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800800c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800800e:	4b0f      	ldr	r3, [pc, #60]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a0e      	ldr	r2, [pc, #56]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8008014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800801a:	f7f9 fe69 	bl	8001cf0 <HAL_GetTick>
 800801e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008020:	e008      	b.n	8008034 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008022:	f7f9 fe65 	bl	8001cf0 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e006      	b.n	8008042 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008034:	4b05      	ldr	r3, [pc, #20]	@ (800804c <RCCEx_PLL3_Config+0x15c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0f0      	beq.n	8008022 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	58024400 	.word	0x58024400
 8008050:	ffff0007 	.word	0xffff0007

08008054 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e10f      	b.n	8008286 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a87      	ldr	r2, [pc, #540]	@ (8008290 <HAL_SPI_Init+0x23c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d00f      	beq.n	8008096 <HAL_SPI_Init+0x42>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a86      	ldr	r2, [pc, #536]	@ (8008294 <HAL_SPI_Init+0x240>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00a      	beq.n	8008096 <HAL_SPI_Init+0x42>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a84      	ldr	r2, [pc, #528]	@ (8008298 <HAL_SPI_Init+0x244>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d005      	beq.n	8008096 <HAL_SPI_Init+0x42>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	2b0f      	cmp	r3, #15
 8008090:	d901      	bls.n	8008096 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e0f7      	b.n	8008286 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 ff76 	bl	8008f88 <SPI_GetPacketSize>
 800809c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a7b      	ldr	r2, [pc, #492]	@ (8008290 <HAL_SPI_Init+0x23c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d00c      	beq.n	80080c2 <HAL_SPI_Init+0x6e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a79      	ldr	r2, [pc, #484]	@ (8008294 <HAL_SPI_Init+0x240>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d007      	beq.n	80080c2 <HAL_SPI_Init+0x6e>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a78      	ldr	r2, [pc, #480]	@ (8008298 <HAL_SPI_Init+0x244>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d002      	beq.n	80080c2 <HAL_SPI_Init+0x6e>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b08      	cmp	r3, #8
 80080c0:	d811      	bhi.n	80080e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80080c6:	4a72      	ldr	r2, [pc, #456]	@ (8008290 <HAL_SPI_Init+0x23c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d009      	beq.n	80080e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a70      	ldr	r2, [pc, #448]	@ (8008294 <HAL_SPI_Init+0x240>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d004      	beq.n	80080e0 <HAL_SPI_Init+0x8c>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a6f      	ldr	r2, [pc, #444]	@ (8008298 <HAL_SPI_Init+0x244>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d104      	bne.n	80080ea <HAL_SPI_Init+0x96>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2b10      	cmp	r3, #16
 80080e4:	d901      	bls.n	80080ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e0cd      	b.n	8008286 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d106      	bne.n	8008104 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7f8 ffcc 	bl	800109c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2202      	movs	r2, #2
 8008108:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0201 	bic.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008126:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008130:	d119      	bne.n	8008166 <HAL_SPI_Init+0x112>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800813a:	d103      	bne.n	8008144 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008140:	2b00      	cmp	r3, #0
 8008142:	d008      	beq.n	8008156 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10c      	bne.n	8008166 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008154:	d107      	bne.n	8008166 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008164:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00f      	beq.n	8008192 <HAL_SPI_Init+0x13e>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	2b06      	cmp	r3, #6
 8008178:	d90b      	bls.n	8008192 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	e007      	b.n	80081a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80081a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69da      	ldr	r2, [r3, #28]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081aa:	431a      	orrs	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b4:	ea42 0103 	orr.w	r1, r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68da      	ldr	r2, [r3, #12]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081cc:	431a      	orrs	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	431a      	orrs	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	431a      	orrs	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	431a      	orrs	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008202:	ea42 0103 	orr.w	r1, r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d113      	bne.n	8008242 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800822c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008240:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40013000 	.word	0x40013000
 8008294:	40003800 	.word	0x40003800
 8008298:	40003c00 	.word	0x40003c00

0800829c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af02      	add	r7, sp, #8
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	603b      	str	r3, [r7, #0]
 80082a8:	4613      	mov	r3, r2
 80082aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3320      	adds	r3, #32
 80082b2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082b4:	f7f9 fd1c 	bl	8001cf0 <HAL_GetTick>
 80082b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d001      	beq.n	80082ca <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80082c6:	2302      	movs	r3, #2
 80082c8:	e1d1      	b.n	800866e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <HAL_SPI_Transmit+0x3a>
 80082d0:	88fb      	ldrh	r3, [r7, #6]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e1c9      	b.n	800866e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_SPI_Transmit+0x4c>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e1c2      	b.n	800866e <HAL_SPI_Transmit+0x3d2>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2203      	movs	r2, #3
 80082f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	88fa      	ldrh	r2, [r7, #6]
 800830a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	88fa      	ldrh	r2, [r7, #6]
 8008312:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008340:	d108      	bne.n	8008354 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	e009      	b.n	8008368 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008366:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	4b96      	ldr	r3, [pc, #600]	@ (80085c8 <HAL_SPI_Transmit+0x32c>)
 8008370:	4013      	ands	r3, r2
 8008372:	88f9      	ldrh	r1, [r7, #6]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	6812      	ldr	r2, [r2, #0]
 8008378:	430b      	orrs	r3, r1
 800837a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008394:	d107      	bne.n	80083a6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	2b0f      	cmp	r3, #15
 80083ac:	d947      	bls.n	800843e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80083ae:	e03f      	b.n	8008430 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d114      	bne.n	80083e8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6812      	ldr	r2, [r2, #0]
 80083c8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ce:	1d1a      	adds	r2, r3, #4
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80083da:	b29b      	uxth	r3, r3
 80083dc:	3b01      	subs	r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80083e6:	e023      	b.n	8008430 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083e8:	f7f9 fc82 	bl	8001cf0 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d803      	bhi.n	8008400 <HAL_SPI_Transmit+0x164>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fe:	d102      	bne.n	8008406 <HAL_SPI_Transmit+0x16a>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d114      	bne.n	8008430 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 fcf0 	bl	8008dec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008412:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e11e      	b.n	800866e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008436:	b29b      	uxth	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1b9      	bne.n	80083b0 <HAL_SPI_Transmit+0x114>
 800843c:	e0f1      	b.n	8008622 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	2b07      	cmp	r3, #7
 8008444:	f240 80e6 	bls.w	8008614 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008448:	e05d      	b.n	8008506 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b02      	cmp	r3, #2
 8008456:	d132      	bne.n	80084be <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b01      	cmp	r3, #1
 8008462:	d918      	bls.n	8008496 <HAL_SPI_Transmit+0x1fa>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d014      	beq.n	8008496 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800847c:	1d1a      	adds	r2, r3, #4
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008488:	b29b      	uxth	r3, r3
 800848a:	3b02      	subs	r3, #2
 800848c:	b29a      	uxth	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008494:	e037      	b.n	8008506 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800849a:	881a      	ldrh	r2, [r3, #0]
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084a4:	1c9a      	adds	r2, r3, #2
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	3b01      	subs	r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80084bc:	e023      	b.n	8008506 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084be:	f7f9 fc17 	bl	8001cf0 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d803      	bhi.n	80084d6 <HAL_SPI_Transmit+0x23a>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d4:	d102      	bne.n	80084dc <HAL_SPI_Transmit+0x240>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d114      	bne.n	8008506 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 fc85 	bl	8008dec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e0b3      	b.n	800866e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800850c:	b29b      	uxth	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d19b      	bne.n	800844a <HAL_SPI_Transmit+0x1ae>
 8008512:	e086      	b.n	8008622 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b02      	cmp	r3, #2
 8008520:	d154      	bne.n	80085cc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b03      	cmp	r3, #3
 800852c:	d918      	bls.n	8008560 <HAL_SPI_Transmit+0x2c4>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008532:	2b40      	cmp	r3, #64	@ 0x40
 8008534:	d914      	bls.n	8008560 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008546:	1d1a      	adds	r2, r3, #4
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b04      	subs	r3, #4
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800855e:	e059      	b.n	8008614 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008566:	b29b      	uxth	r3, r3
 8008568:	2b01      	cmp	r3, #1
 800856a:	d917      	bls.n	800859c <HAL_SPI_Transmit+0x300>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008570:	2b00      	cmp	r3, #0
 8008572:	d013      	beq.n	800859c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008578:	881a      	ldrh	r2, [r3, #0]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008582:	1c9a      	adds	r2, r3, #2
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b02      	subs	r3, #2
 8008592:	b29a      	uxth	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800859a:	e03b      	b.n	8008614 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3320      	adds	r3, #32
 80085a6:	7812      	ldrb	r2, [r2, #0]
 80085a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b01      	subs	r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80085c6:	e025      	b.n	8008614 <HAL_SPI_Transmit+0x378>
 80085c8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085cc:	f7f9 fb90 	bl	8001cf0 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d803      	bhi.n	80085e4 <HAL_SPI_Transmit+0x348>
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e2:	d102      	bne.n	80085ea <HAL_SPI_Transmit+0x34e>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d114      	bne.n	8008614 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 fbfe 	bl	8008dec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e02c      	b.n	800866e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800861a:	b29b      	uxth	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	f47f af79 	bne.w	8008514 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2200      	movs	r2, #0
 800862a:	2108      	movs	r1, #8
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 fc7d 	bl	8008f2c <SPI_WaitOnFlagUntilTimeout>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d007      	beq.n	8008648 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 fbcf 	bl	8008dec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e000      	b.n	800866e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800866c:	2300      	movs	r3, #0
  }
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop

08008678 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	4613      	mov	r3, r2
 8008684:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b01      	cmp	r3, #1
 8008690:	d001      	beq.n	8008696 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008692:	2302      	movs	r3, #2
 8008694:	e126      	b.n	80088e4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <HAL_SPI_Transmit_DMA+0x2a>
 800869c:	88fb      	ldrh	r3, [r7, #6]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e11e      	b.n	80088e4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <HAL_SPI_Transmit_DMA+0x3c>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e117      	b.n	80088e4 <HAL_SPI_Transmit_DMA+0x26c>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2203      	movs	r2, #3
 80086c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	88fa      	ldrh	r2, [r7, #6]
 80086d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	88fa      	ldrh	r2, [r7, #6]
 80086de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800870c:	d108      	bne.n	8008720 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	e009      	b.n	8008734 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008732:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	2b0f      	cmp	r3, #15
 800873a:	d905      	bls.n	8008748 <HAL_SPI_Transmit_DMA+0xd0>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008746:	d10f      	bne.n	8008768 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800874c:	2b07      	cmp	r3, #7
 800874e:	d911      	bls.n	8008774 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800875a:	d00b      	beq.n	8008774 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008760:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008766:	d005      	beq.n	8008774 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e0b7      	b.n	80088e4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	2b07      	cmp	r3, #7
 800877a:	d820      	bhi.n	80087be <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008786:	d109      	bne.n	800879c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800878e:	b29b      	uxth	r3, r3
 8008790:	3301      	adds	r3, #1
 8008792:	105b      	asrs	r3, r3, #1
 8008794:	b29a      	uxth	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087a6:	d11e      	bne.n	80087e6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	3303      	adds	r3, #3
 80087b2:	109b      	asrs	r3, r3, #2
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087bc:	e013      	b.n	80087e6 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	2b0f      	cmp	r3, #15
 80087c4:	d80f      	bhi.n	80087e6 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087d0:	d109      	bne.n	80087e6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087d8:	b29b      	uxth	r3, r3
 80087da:	3301      	adds	r3, #1
 80087dc:	105b      	asrs	r3, r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087ea:	4a40      	ldr	r2, [pc, #256]	@ (80088ec <HAL_SPI_Transmit_DMA+0x274>)
 80087ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087f2:	4a3f      	ldr	r2, [pc, #252]	@ (80088f0 <HAL_SPI_Transmit_DMA+0x278>)
 80087f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087fa:	4a3e      	ldr	r2, [pc, #248]	@ (80088f4 <HAL_SPI_Transmit_DMA+0x27c>)
 80087fc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008802:	2200      	movs	r2, #0
 8008804:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008814:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800881e:	4619      	mov	r1, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3320      	adds	r3, #32
 8008826:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800882e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008830:	f7f9 ffa4 	bl	800277c <HAL_DMA_Start_IT>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d011      	beq.n	800885e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008840:	f043 0210 	orr.w	r2, r3, #16
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e042      	b.n	80088e4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008868:	d108      	bne.n	800887c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6859      	ldr	r1, [r3, #4]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	4b20      	ldr	r3, [pc, #128]	@ (80088f8 <HAL_SPI_Transmit_DMA+0x280>)
 8008876:	400b      	ands	r3, r1
 8008878:	6053      	str	r3, [r2, #4]
 800887a:	e009      	b.n	8008890 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	4b1d      	ldr	r3, [pc, #116]	@ (80088f8 <HAL_SPI_Transmit_DMA+0x280>)
 8008884:	4013      	ands	r3, r2
 8008886:	88f9      	ldrh	r1, [r7, #6]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	6812      	ldr	r2, [r2, #0]
 800888c:	430b      	orrs	r3, r1
 800888e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689a      	ldr	r2, [r3, #8]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800889e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691a      	ldr	r2, [r3, #16]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80088ae:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f042 0201 	orr.w	r2, r2, #1
 80088be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088c8:	d107      	bne.n	80088da <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088d8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	08008d57 	.word	0x08008d57
 80088f0:	08008d11 	.word	0x08008d11
 80088f4:	08008d73 	.word	0x08008d73
 80088f8:	ffff0000 	.word	0xffff0000

080088fc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	@ 0x28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008914:	6a3a      	ldr	r2, [r7, #32]
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	4013      	ands	r3, r2
 800891a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008924:	2300      	movs	r3, #0
 8008926:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800892e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3330      	adds	r3, #48	@ 0x30
 8008936:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800893e:	2b00      	cmp	r3, #0
 8008940:	d010      	beq.n	8008964 <HAL_SPI_IRQHandler+0x68>
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	f003 0308 	and.w	r3, r3, #8
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800895a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f9cd 	bl	8008cfc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008962:	e192      	b.n	8008c8a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	d113      	bne.n	8008996 <HAL_SPI_IRQHandler+0x9a>
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10e      	bne.n	8008996 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
    hspi->RxISR(hspi);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	4798      	blx	r3
    handled = 1UL;
 8008992:	2301      	movs	r3, #1
 8008994:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10f      	bne.n	80089c0 <HAL_SPI_IRQHandler+0xc4>
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	4798      	blx	r3
    handled = 1UL;
 80089bc:	2301      	movs	r3, #1
 80089be:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	f003 0320 	and.w	r3, r3, #32
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10f      	bne.n	80089ea <HAL_SPI_IRQHandler+0xee>
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00a      	beq.n	80089ea <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d105      	bne.n	80089ea <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
    handled = 1UL;
 80089e6:	2301      	movs	r3, #1
 80089e8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f040 8147 	bne.w	8008c80 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	f003 0308 	and.w	r3, r3, #8
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 808b 	beq.w	8008b14 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	699a      	ldr	r2, [r3, #24]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f042 0208 	orr.w	r2, r2, #8
 8008a0c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	699a      	ldr	r2, [r3, #24]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0210 	orr.w	r2, r2, #16
 8008a1c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	699a      	ldr	r2, [r3, #24]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a2c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	691a      	ldr	r2, [r3, #16]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 0208 	bic.w	r2, r2, #8
 8008a3c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d13d      	bne.n	8008ac8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008a4c:	e036      	b.n	8008abc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	2b0f      	cmp	r3, #15
 8008a54:	d90b      	bls.n	8008a6e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008a60:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a66:	1d1a      	adds	r2, r3, #4
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	665a      	str	r2, [r3, #100]	@ 0x64
 8008a6c:	e01d      	b.n	8008aaa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b07      	cmp	r3, #7
 8008a74:	d90b      	bls.n	8008a8e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	8812      	ldrh	r2, [r2, #0]
 8008a7e:	b292      	uxth	r2, r2
 8008a80:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a86:	1c9a      	adds	r2, r3, #2
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	665a      	str	r2, [r3, #100]	@ 0x64
 8008a8c:	e00d      	b.n	8008aaa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a9a:	7812      	ldrb	r2, [r2, #0]
 8008a9c:	b2d2      	uxtb	r2, r2
 8008a9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1c2      	bne.n	8008a4e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f98f 	bl	8008dec <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f901 	bl	8008ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008ae6:	e0d0      	b.n	8008c8a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008ae8:	7cfb      	ldrb	r3, [r7, #19]
 8008aea:	2b05      	cmp	r3, #5
 8008aec:	d103      	bne.n	8008af6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8e6 	bl	8008cc0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008af4:	e0c6      	b.n	8008c84 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008af6:	7cfb      	ldrb	r3, [r7, #19]
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	d103      	bne.n	8008b04 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f8d5 	bl	8008cac <HAL_SPI_RxCpltCallback>
    return;
 8008b02:	e0bf      	b.n	8008c84 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008b04:	7cfb      	ldrb	r3, [r7, #19]
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	f040 80bc 	bne.w	8008c84 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f8c3 	bl	8008c98 <HAL_SPI_TxCpltCallback>
    return;
 8008b12:	e0b7      	b.n	8008c84 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 80b5 	beq.w	8008c8a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00f      	beq.n	8008b4a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b30:	f043 0204 	orr.w	r2, r3, #4
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b48:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00f      	beq.n	8008b74 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b5a:	f043 0201 	orr.w	r2, r3, #1
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699a      	ldr	r2, [r3, #24]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b72:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00f      	beq.n	8008b9e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b84:	f043 0208 	orr.w	r2, r3, #8
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b9c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00f      	beq.n	8008bc8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0220 	orr.w	r2, r2, #32
 8008bc6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d05a      	beq.n	8008c88 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0201 	bic.w	r2, r2, #1
 8008be0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6919      	ldr	r1, [r3, #16]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	4b28      	ldr	r3, [pc, #160]	@ (8008c90 <HAL_SPI_IRQHandler+0x394>)
 8008bee:	400b      	ands	r3, r1
 8008bf0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008bf8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008bfc:	d138      	bne.n	8008c70 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008c0c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d013      	beq.n	8008c3e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008c94 <HAL_SPI_IRQHandler+0x398>)
 8008c1c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fa fb32 	bl	800328c <HAL_DMA_Abort_IT>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d007      	beq.n	8008c3e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d020      	beq.n	8008c88 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c4a:	4a12      	ldr	r2, [pc, #72]	@ (8008c94 <HAL_SPI_IRQHandler+0x398>)
 8008c4c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fa fb1a 	bl	800328c <HAL_DMA_Abort_IT>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d014      	beq.n	8008c88 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008c6e:	e00b      	b.n	8008c88 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f835 	bl	8008ce8 <HAL_SPI_ErrorCallback>
    return;
 8008c7e:	e003      	b.n	8008c88 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008c80:	bf00      	nop
 8008c82:	e002      	b.n	8008c8a <HAL_SPI_IRQHandler+0x38e>
    return;
 8008c84:	bf00      	nop
 8008c86:	e000      	b.n	8008c8a <HAL_SPI_IRQHandler+0x38e>
    return;
 8008c88:	bf00      	nop
  }
}
 8008c8a:	3728      	adds	r7, #40	@ 0x28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	fffffc94 	.word	0xfffffc94
 8008c94:	08008db9 	.word	0x08008db9

08008c98 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b07      	cmp	r3, #7
 8008d28:	d011      	beq.n	8008d4e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d34:	d103      	bne.n	8008d3e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f7ff ffae 	bl	8008c98 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008d3c:	e007      	b.n	8008d4e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691a      	ldr	r2, [r3, #16]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0208 	orr.w	r2, r2, #8
 8008d4c:	611a      	str	r2, [r3, #16]
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d62:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f7ff ffb5 	bl	8008cd4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008d6a:	bf00      	nop
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7fb fc2b 	bl	80045dc <HAL_DMA_GetError>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d011      	beq.n	8008db0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 f82d 	bl	8008dec <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d98:	f043 0210 	orr.w	r2, r3, #16
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff ff9c 	bl	8008ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f7ff ff82 	bl	8008ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008de4:	bf00      	nop
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699a      	ldr	r2, [r3, #24]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0208 	orr.w	r2, r2, #8
 8008e0a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699a      	ldr	r2, [r3, #24]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f042 0210 	orr.w	r2, r2, #16
 8008e1a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 0201 	bic.w	r2, r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6919      	ldr	r1, [r3, #16]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	4b3c      	ldr	r3, [pc, #240]	@ (8008f28 <SPI_CloseTransfer+0x13c>)
 8008e38:	400b      	ands	r3, r1
 8008e3a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689a      	ldr	r2, [r3, #8]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008e4a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b04      	cmp	r3, #4
 8008e56:	d014      	beq.n	8008e82 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f003 0320 	and.w	r3, r3, #32
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00f      	beq.n	8008e82 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f042 0220 	orr.w	r2, r2, #32
 8008e80:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d014      	beq.n	8008eb8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00f      	beq.n	8008eb8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e9e:	f043 0204 	orr.w	r2, r3, #4
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699a      	ldr	r2, [r3, #24]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008eb6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00f      	beq.n	8008ee2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ec8:	f043 0201 	orr.w	r2, r3, #1
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699a      	ldr	r2, [r3, #24]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ee0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00f      	beq.n	8008f0c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ef2:	f043 0208 	orr.w	r2, r3, #8
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	699a      	ldr	r2, [r3, #24]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f0a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008f1c:	bf00      	nop
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	fffffc90 	.word	0xfffffc90

08008f2c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008f3c:	e010      	b.n	8008f60 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f3e:	f7f8 fed7 	bl	8001cf0 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d803      	bhi.n	8008f56 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f54:	d102      	bne.n	8008f5c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e00f      	b.n	8008f80 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695a      	ldr	r2, [r3, #20]
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	bf0c      	ite	eq
 8008f70:	2301      	moveq	r3, #1
 8008f72:	2300      	movne	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	461a      	mov	r2, r3
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d0df      	beq.n	8008f3e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f94:	095b      	lsrs	r3, r3, #5
 8008f96:	3301      	adds	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	3307      	adds	r3, #7
 8008fa6:	08db      	lsrs	r3, r3, #3
 8008fa8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	fb02 f303 	mul.w	r3, r2, r3
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e042      	b.n	8009056 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d106      	bne.n	8008fe8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7f8 fbee 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2224      	movs	r2, #36	@ 0x24
 8008fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0201 	bic.w	r2, r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 fbd7 	bl	800a7bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fd68 	bl	8009ae4 <UART_SetConfig>
 8009014:	4603      	mov	r3, r0
 8009016:	2b01      	cmp	r3, #1
 8009018:	d101      	bne.n	800901e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e01b      	b.n	8009056 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800902c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689a      	ldr	r2, [r3, #8]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800903c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f042 0201 	orr.w	r2, r2, #1
 800904c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 fc56 	bl	800a900 <UART_CheckIdleState>
 8009054:	4603      	mov	r3, r0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b08a      	sub	sp, #40	@ 0x28
 8009062:	af02      	add	r7, sp, #8
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	603b      	str	r3, [r7, #0]
 800906a:	4613      	mov	r3, r2
 800906c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009074:	2b20      	cmp	r3, #32
 8009076:	d17b      	bne.n	8009170 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <HAL_UART_Transmit+0x26>
 800907e:	88fb      	ldrh	r3, [r7, #6]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d101      	bne.n	8009088 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e074      	b.n	8009172 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2221      	movs	r2, #33	@ 0x21
 8009094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009098:	f7f8 fe2a 	bl	8001cf0 <HAL_GetTick>
 800909c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	88fa      	ldrh	r2, [r7, #6]
 80090a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	88fa      	ldrh	r2, [r7, #6]
 80090aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090b6:	d108      	bne.n	80090ca <HAL_UART_Transmit+0x6c>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d104      	bne.n	80090ca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80090c0:	2300      	movs	r3, #0
 80090c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	61bb      	str	r3, [r7, #24]
 80090c8:	e003      	b.n	80090d2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80090d2:	e030      	b.n	8009136 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2200      	movs	r2, #0
 80090dc:	2180      	movs	r1, #128	@ 0x80
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f001 fcb8 	bl	800aa54 <UART_WaitOnFlagUntilTimeout>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d005      	beq.n	80090f6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e03d      	b.n	8009172 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10b      	bne.n	8009114 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	461a      	mov	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800910a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	3302      	adds	r3, #2
 8009110:	61bb      	str	r3, [r7, #24]
 8009112:	e007      	b.n	8009124 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	781a      	ldrb	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	3301      	adds	r3, #1
 8009122:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800913c:	b29b      	uxth	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1c8      	bne.n	80090d4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2200      	movs	r2, #0
 800914a:	2140      	movs	r1, #64	@ 0x40
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f001 fc81 	bl	800aa54 <UART_WaitOnFlagUntilTimeout>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2220      	movs	r2, #32
 800915c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e006      	b.n	8009172 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2220      	movs	r2, #32
 8009168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	e000      	b.n	8009172 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009170:	2302      	movs	r3, #2
  }
}
 8009172:	4618      	mov	r0, r3
 8009174:	3720      	adds	r7, #32
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b09a      	sub	sp, #104	@ 0x68
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009194:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009198:	667b      	str	r3, [r7, #100]	@ 0x64
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80091a4:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80091b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e6      	bne.n	8009184 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c8:	4b46      	ldr	r3, [pc, #280]	@ (80092e4 <HAL_UART_AbortReceive+0x168>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3308      	adds	r3, #8
 80091d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80091d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80091d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e5      	bne.n	80091b6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d118      	bne.n	8009224 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	f023 0310 	bic.w	r3, r3, #16
 8009206:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009212:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800921e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e6      	bne.n	80091f2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800922e:	2b40      	cmp	r3, #64	@ 0x40
 8009230:	d13b      	bne.n	80092aa <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3308      	adds	r3, #8
 8009238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	60bb      	str	r3, [r7, #8]
   return(result);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009248:	65bb      	str	r3, [r7, #88]	@ 0x58
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009252:	61ba      	str	r2, [r7, #24]
 8009254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6979      	ldr	r1, [r7, #20]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	613b      	str	r3, [r7, #16]
   return(result);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e5      	bne.n	8009232 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01c      	beq.n	80092aa <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009276:	2200      	movs	r2, #0
 8009278:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009280:	4618      	mov	r0, r3
 8009282:	f7f9 fce5 	bl	8002c50 <HAL_DMA_Abort>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00e      	beq.n	80092aa <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009292:	4618      	mov	r0, r3
 8009294:	f7fb f9a2 	bl	80045dc <HAL_DMA_GetError>
 8009298:	4603      	mov	r3, r0
 800929a:	2b20      	cmp	r3, #32
 800929c:	d105      	bne.n	80092aa <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2210      	movs	r2, #16
 80092a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e017      	b.n	80092da <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	220f      	movs	r2, #15
 80092b8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699a      	ldr	r2, [r3, #24]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f042 0208 	orr.w	r2, r2, #8
 80092c8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3768      	adds	r7, #104	@ 0x68
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	effffffe 	.word	0xeffffffe

080092e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b0ba      	sub	sp, #232	@ 0xe8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800930e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009312:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009316:	4013      	ands	r3, r2
 8009318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800931c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009320:	2b00      	cmp	r3, #0
 8009322:	d11b      	bne.n	800935c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b00      	cmp	r3, #0
 800932e:	d015      	beq.n	800935c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009334:	f003 0320 	and.w	r3, r3, #32
 8009338:	2b00      	cmp	r3, #0
 800933a:	d105      	bne.n	8009348 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800933c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d009      	beq.n	800935c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 8393 	beq.w	8009a78 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
      }
      return;
 800935a:	e38d      	b.n	8009a78 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800935c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 8123 	beq.w	80095ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009366:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800936a:	4b8d      	ldr	r3, [pc, #564]	@ (80095a0 <HAL_UART_IRQHandler+0x2b8>)
 800936c:	4013      	ands	r3, r2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d106      	bne.n	8009380 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009372:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009376:	4b8b      	ldr	r3, [pc, #556]	@ (80095a4 <HAL_UART_IRQHandler+0x2bc>)
 8009378:	4013      	ands	r3, r2
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 8116 	beq.w	80095ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d011      	beq.n	80093b0 <HAL_UART_IRQHandler+0xc8>
 800938c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2201      	movs	r2, #1
 800939e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a6:	f043 0201 	orr.w	r2, r3, #1
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b4:	f003 0302 	and.w	r3, r3, #2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d011      	beq.n	80093e0 <HAL_UART_IRQHandler+0xf8>
 80093bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00b      	beq.n	80093e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2202      	movs	r2, #2
 80093ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d6:	f043 0204 	orr.w	r2, r3, #4
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d011      	beq.n	8009410 <HAL_UART_IRQHandler+0x128>
 80093ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2204      	movs	r2, #4
 80093fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009406:	f043 0202 	orr.w	r2, r3, #2
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009414:	f003 0308 	and.w	r3, r3, #8
 8009418:	2b00      	cmp	r3, #0
 800941a:	d017      	beq.n	800944c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800941c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009420:	f003 0320 	and.w	r3, r3, #32
 8009424:	2b00      	cmp	r3, #0
 8009426:	d105      	bne.n	8009434 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009428:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800942c:	4b5c      	ldr	r3, [pc, #368]	@ (80095a0 <HAL_UART_IRQHandler+0x2b8>)
 800942e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2208      	movs	r2, #8
 800943a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009442:	f043 0208 	orr.w	r2, r3, #8
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800944c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009450:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009454:	2b00      	cmp	r3, #0
 8009456:	d012      	beq.n	800947e <HAL_UART_IRQHandler+0x196>
 8009458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800945c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00c      	beq.n	800947e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800946c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009474:	f043 0220 	orr.w	r2, r3, #32
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 82f9 	beq.w	8009a7c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800948a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800948e:	f003 0320 	and.w	r3, r3, #32
 8009492:	2b00      	cmp	r3, #0
 8009494:	d013      	beq.n	80094be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d105      	bne.n	80094ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d007      	beq.n	80094be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d2:	2b40      	cmp	r3, #64	@ 0x40
 80094d4:	d005      	beq.n	80094e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80094da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d054      	beq.n	800958c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 fc0c 	bl	800ad00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094f2:	2b40      	cmp	r3, #64	@ 0x40
 80094f4:	d146      	bne.n	8009584 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3308      	adds	r3, #8
 80094fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800950c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3308      	adds	r3, #8
 800951e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009522:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800952e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800953a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1d9      	bne.n	80094f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009548:	2b00      	cmp	r3, #0
 800954a:	d017      	beq.n	800957c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009552:	4a15      	ldr	r2, [pc, #84]	@ (80095a8 <HAL_UART_IRQHandler+0x2c0>)
 8009554:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800955c:	4618      	mov	r0, r3
 800955e:	f7f9 fe95 	bl	800328c <HAL_DMA_Abort_IT>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d019      	beq.n	800959c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800956e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009576:	4610      	mov	r0, r2
 8009578:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800957a:	e00f      	b.n	800959c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 faa7 	bl	8009ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009582:	e00b      	b.n	800959c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 faa3 	bl	8009ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800958a:	e007      	b.n	800959c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fa9f 	bl	8009ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800959a:	e26f      	b.n	8009a7c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800959c:	bf00      	nop
    return;
 800959e:	e26d      	b.n	8009a7c <HAL_UART_IRQHandler+0x794>
 80095a0:	10000001 	.word	0x10000001
 80095a4:	04000120 	.word	0x04000120
 80095a8:	0800afb3 	.word	0x0800afb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	f040 8203 	bne.w	80099bc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ba:	f003 0310 	and.w	r3, r3, #16
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 81fc 	beq.w	80099bc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c8:	f003 0310 	and.w	r3, r3, #16
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 81f5 	beq.w	80099bc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2210      	movs	r2, #16
 80095d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e4:	2b40      	cmp	r3, #64	@ 0x40
 80095e6:	f040 816d 	bne.w	80098c4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4aa4      	ldr	r2, [pc, #656]	@ (8009884 <HAL_UART_IRQHandler+0x59c>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d068      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4aa1      	ldr	r2, [pc, #644]	@ (8009888 <HAL_UART_IRQHandler+0x5a0>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d061      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a9f      	ldr	r2, [pc, #636]	@ (800988c <HAL_UART_IRQHandler+0x5a4>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d05a      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a9c      	ldr	r2, [pc, #624]	@ (8009890 <HAL_UART_IRQHandler+0x5a8>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d053      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a9a      	ldr	r2, [pc, #616]	@ (8009894 <HAL_UART_IRQHandler+0x5ac>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d04c      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a97      	ldr	r2, [pc, #604]	@ (8009898 <HAL_UART_IRQHandler+0x5b0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d045      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a95      	ldr	r2, [pc, #596]	@ (800989c <HAL_UART_IRQHandler+0x5b4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d03e      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a92      	ldr	r2, [pc, #584]	@ (80098a0 <HAL_UART_IRQHandler+0x5b8>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d037      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a90      	ldr	r2, [pc, #576]	@ (80098a4 <HAL_UART_IRQHandler+0x5bc>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d030      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a8d      	ldr	r2, [pc, #564]	@ (80098a8 <HAL_UART_IRQHandler+0x5c0>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d029      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a8b      	ldr	r2, [pc, #556]	@ (80098ac <HAL_UART_IRQHandler+0x5c4>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d022      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a88      	ldr	r2, [pc, #544]	@ (80098b0 <HAL_UART_IRQHandler+0x5c8>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d01b      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a86      	ldr	r2, [pc, #536]	@ (80098b4 <HAL_UART_IRQHandler+0x5cc>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d014      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a83      	ldr	r2, [pc, #524]	@ (80098b8 <HAL_UART_IRQHandler+0x5d0>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00d      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a81      	ldr	r2, [pc, #516]	@ (80098bc <HAL_UART_IRQHandler+0x5d4>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d006      	beq.n	80096ca <HAL_UART_IRQHandler+0x3e2>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a7e      	ldr	r2, [pc, #504]	@ (80098c0 <HAL_UART_IRQHandler+0x5d8>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d106      	bne.n	80096d8 <HAL_UART_IRQHandler+0x3f0>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	e005      	b.n	80096e4 <HAL_UART_IRQHandler+0x3fc>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 80ad 	beq.w	800984c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096fc:	429a      	cmp	r2, r3
 80096fe:	f080 80a5 	bcs.w	800984c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009708:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009718:	f000 8087 	beq.w	800982a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009728:	e853 3f00 	ldrex	r3, [r3]
 800972c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009746:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800974a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009752:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009756:	e841 2300 	strex	r3, r2, [r1]
 800975a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800975e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1da      	bne.n	800971c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3308      	adds	r3, #8
 800976c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009770:	e853 3f00 	ldrex	r3, [r3]
 8009774:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009776:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009778:	f023 0301 	bic.w	r3, r3, #1
 800977c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3308      	adds	r3, #8
 8009786:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800978a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800978e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009790:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009792:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800979c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e1      	bne.n	8009766 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3308      	adds	r3, #8
 80097a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80097b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3308      	adds	r3, #8
 80097c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80097c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80097d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1e3      	bne.n	80097a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2220      	movs	r2, #32
 80097de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097f8:	f023 0310 	bic.w	r3, r3, #16
 80097fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800980a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800980c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009810:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009812:	e841 2300 	strex	r3, r2, [r1]
 8009816:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1e4      	bne.n	80097e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009824:	4618      	mov	r0, r3
 8009826:	f7f9 fa13 	bl	8002c50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2202      	movs	r2, #2
 800982e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800983c:	b29b      	uxth	r3, r3
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	b29b      	uxth	r3, r3
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7f7 fab3 	bl	8000db0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800984a:	e119      	b.n	8009a80 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009856:	429a      	cmp	r2, r3
 8009858:	f040 8112 	bne.w	8009a80 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009868:	f040 810a 	bne.w	8009a80 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7f7 fa98 	bl	8000db0 <HAL_UARTEx_RxEventCallback>
      return;
 8009880:	e0fe      	b.n	8009a80 <HAL_UART_IRQHandler+0x798>
 8009882:	bf00      	nop
 8009884:	40020010 	.word	0x40020010
 8009888:	40020028 	.word	0x40020028
 800988c:	40020040 	.word	0x40020040
 8009890:	40020058 	.word	0x40020058
 8009894:	40020070 	.word	0x40020070
 8009898:	40020088 	.word	0x40020088
 800989c:	400200a0 	.word	0x400200a0
 80098a0:	400200b8 	.word	0x400200b8
 80098a4:	40020410 	.word	0x40020410
 80098a8:	40020428 	.word	0x40020428
 80098ac:	40020440 	.word	0x40020440
 80098b0:	40020458 	.word	0x40020458
 80098b4:	40020470 	.word	0x40020470
 80098b8:	40020488 	.word	0x40020488
 80098bc:	400204a0 	.word	0x400204a0
 80098c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098de:	b29b      	uxth	r3, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 80cf 	beq.w	8009a84 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80098e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 80ca 	beq.w	8009a84 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f8:	e853 3f00 	ldrex	r3, [r3]
 80098fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009904:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	461a      	mov	r2, r3
 800990e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009912:	647b      	str	r3, [r7, #68]	@ 0x44
 8009914:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009916:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009918:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800991a:	e841 2300 	strex	r3, r2, [r1]
 800991e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e4      	bne.n	80098f0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3308      	adds	r3, #8
 800992c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	623b      	str	r3, [r7, #32]
   return(result);
 8009936:	6a3a      	ldr	r2, [r7, #32]
 8009938:	4b55      	ldr	r3, [pc, #340]	@ (8009a90 <HAL_UART_IRQHandler+0x7a8>)
 800993a:	4013      	ands	r3, r2
 800993c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3308      	adds	r3, #8
 8009946:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800994a:	633a      	str	r2, [r7, #48]	@ 0x30
 800994c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e3      	bne.n	8009926 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2220      	movs	r2, #32
 8009962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	e853 3f00 	ldrex	r3, [r3]
 800997e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f023 0310 	bic.w	r3, r3, #16
 8009986:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	69b9      	ldr	r1, [r7, #24]
 800999a:	69fa      	ldr	r2, [r7, #28]
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	617b      	str	r3, [r7, #20]
   return(result);
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e4      	bne.n	8009972 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2202      	movs	r2, #2
 80099ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7f7 f9fb 	bl	8000db0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099ba:	e063      	b.n	8009a84 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80099bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00e      	beq.n	80099e6 <HAL_UART_IRQHandler+0x6fe>
 80099c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d008      	beq.n	80099e6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80099dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 fb24 	bl	800b02c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099e4:	e051      	b.n	8009a8a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80099e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d014      	beq.n	8009a1c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80099f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d105      	bne.n	8009a0a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80099fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d008      	beq.n	8009a1c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d03a      	beq.n	8009a88 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	4798      	blx	r3
    }
    return;
 8009a1a:	e035      	b.n	8009a88 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d009      	beq.n	8009a3c <HAL_UART_IRQHandler+0x754>
 8009a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d003      	beq.n	8009a3c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 face 	bl	800afd6 <UART_EndTransmit_IT>
    return;
 8009a3a:	e026      	b.n	8009a8a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d009      	beq.n	8009a5c <HAL_UART_IRQHandler+0x774>
 8009a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d003      	beq.n	8009a5c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 fafd 	bl	800b054 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a5a:	e016      	b.n	8009a8a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d010      	beq.n	8009a8a <HAL_UART_IRQHandler+0x7a2>
 8009a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	da0c      	bge.n	8009a8a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 fae5 	bl	800b040 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a76:	e008      	b.n	8009a8a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009a78:	bf00      	nop
 8009a7a:	e006      	b.n	8009a8a <HAL_UART_IRQHandler+0x7a2>
    return;
 8009a7c:	bf00      	nop
 8009a7e:	e004      	b.n	8009a8a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009a80:	bf00      	nop
 8009a82:	e002      	b.n	8009a8a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009a84:	bf00      	nop
 8009a86:	e000      	b.n	8009a8a <HAL_UART_IRQHandler+0x7a2>
    return;
 8009a88:	bf00      	nop
  }
}
 8009a8a:	37e8      	adds	r7, #232	@ 0xe8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	effffffe 	.word	0xeffffffe

08009a94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ae8:	b092      	sub	sp, #72	@ 0x48
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	431a      	orrs	r2, r3
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	431a      	orrs	r2, r3
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	69db      	ldr	r3, [r3, #28]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	4bbe      	ldr	r3, [pc, #760]	@ (8009e0c <UART_SetConfig+0x328>)
 8009b14:	4013      	ands	r3, r2
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	6812      	ldr	r2, [r2, #0]
 8009b1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4ab3      	ldr	r2, [pc, #716]	@ (8009e10 <UART_SetConfig+0x32c>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d004      	beq.n	8009b50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689a      	ldr	r2, [r3, #8]
 8009b56:	4baf      	ldr	r3, [pc, #700]	@ (8009e14 <UART_SetConfig+0x330>)
 8009b58:	4013      	ands	r3, r2
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	6812      	ldr	r2, [r2, #0]
 8009b5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b60:	430b      	orrs	r3, r1
 8009b62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b6a:	f023 010f 	bic.w	r1, r3, #15
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	430a      	orrs	r2, r1
 8009b78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4aa6      	ldr	r2, [pc, #664]	@ (8009e18 <UART_SetConfig+0x334>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d177      	bne.n	8009c74 <UART_SetConfig+0x190>
 8009b84:	4ba5      	ldr	r3, [pc, #660]	@ (8009e1c <UART_SetConfig+0x338>)
 8009b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b8c:	2b28      	cmp	r3, #40	@ 0x28
 8009b8e:	d86d      	bhi.n	8009c6c <UART_SetConfig+0x188>
 8009b90:	a201      	add	r2, pc, #4	@ (adr r2, 8009b98 <UART_SetConfig+0xb4>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009c3d 	.word	0x08009c3d
 8009b9c:	08009c6d 	.word	0x08009c6d
 8009ba0:	08009c6d 	.word	0x08009c6d
 8009ba4:	08009c6d 	.word	0x08009c6d
 8009ba8:	08009c6d 	.word	0x08009c6d
 8009bac:	08009c6d 	.word	0x08009c6d
 8009bb0:	08009c6d 	.word	0x08009c6d
 8009bb4:	08009c6d 	.word	0x08009c6d
 8009bb8:	08009c45 	.word	0x08009c45
 8009bbc:	08009c6d 	.word	0x08009c6d
 8009bc0:	08009c6d 	.word	0x08009c6d
 8009bc4:	08009c6d 	.word	0x08009c6d
 8009bc8:	08009c6d 	.word	0x08009c6d
 8009bcc:	08009c6d 	.word	0x08009c6d
 8009bd0:	08009c6d 	.word	0x08009c6d
 8009bd4:	08009c6d 	.word	0x08009c6d
 8009bd8:	08009c4d 	.word	0x08009c4d
 8009bdc:	08009c6d 	.word	0x08009c6d
 8009be0:	08009c6d 	.word	0x08009c6d
 8009be4:	08009c6d 	.word	0x08009c6d
 8009be8:	08009c6d 	.word	0x08009c6d
 8009bec:	08009c6d 	.word	0x08009c6d
 8009bf0:	08009c6d 	.word	0x08009c6d
 8009bf4:	08009c6d 	.word	0x08009c6d
 8009bf8:	08009c55 	.word	0x08009c55
 8009bfc:	08009c6d 	.word	0x08009c6d
 8009c00:	08009c6d 	.word	0x08009c6d
 8009c04:	08009c6d 	.word	0x08009c6d
 8009c08:	08009c6d 	.word	0x08009c6d
 8009c0c:	08009c6d 	.word	0x08009c6d
 8009c10:	08009c6d 	.word	0x08009c6d
 8009c14:	08009c6d 	.word	0x08009c6d
 8009c18:	08009c5d 	.word	0x08009c5d
 8009c1c:	08009c6d 	.word	0x08009c6d
 8009c20:	08009c6d 	.word	0x08009c6d
 8009c24:	08009c6d 	.word	0x08009c6d
 8009c28:	08009c6d 	.word	0x08009c6d
 8009c2c:	08009c6d 	.word	0x08009c6d
 8009c30:	08009c6d 	.word	0x08009c6d
 8009c34:	08009c6d 	.word	0x08009c6d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e326      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4a:	e322      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c52:	e31e      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	e31a      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c62:	e316      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009c64:	2340      	movs	r3, #64	@ 0x40
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6a:	e312      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009c6c:	2380      	movs	r3, #128	@ 0x80
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e30e      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a69      	ldr	r2, [pc, #420]	@ (8009e20 <UART_SetConfig+0x33c>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d130      	bne.n	8009ce0 <UART_SetConfig+0x1fc>
 8009c7e:	4b67      	ldr	r3, [pc, #412]	@ (8009e1c <UART_SetConfig+0x338>)
 8009c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b05      	cmp	r3, #5
 8009c88:	d826      	bhi.n	8009cd8 <UART_SetConfig+0x1f4>
 8009c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c90 <UART_SetConfig+0x1ac>)
 8009c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c90:	08009ca9 	.word	0x08009ca9
 8009c94:	08009cb1 	.word	0x08009cb1
 8009c98:	08009cb9 	.word	0x08009cb9
 8009c9c:	08009cc1 	.word	0x08009cc1
 8009ca0:	08009cc9 	.word	0x08009cc9
 8009ca4:	08009cd1 	.word	0x08009cd1
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cae:	e2f0      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009cb0:	2304      	movs	r3, #4
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb6:	e2ec      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009cb8:	2308      	movs	r3, #8
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cbe:	e2e8      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009cc0:	2310      	movs	r3, #16
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc6:	e2e4      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009cc8:	2320      	movs	r3, #32
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cce:	e2e0      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009cd0:	2340      	movs	r3, #64	@ 0x40
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cd6:	e2dc      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009cd8:	2380      	movs	r3, #128	@ 0x80
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cde:	e2d8      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8009e24 <UART_SetConfig+0x340>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d130      	bne.n	8009d4c <UART_SetConfig+0x268>
 8009cea:	4b4c      	ldr	r3, [pc, #304]	@ (8009e1c <UART_SetConfig+0x338>)
 8009cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cee:	f003 0307 	and.w	r3, r3, #7
 8009cf2:	2b05      	cmp	r3, #5
 8009cf4:	d826      	bhi.n	8009d44 <UART_SetConfig+0x260>
 8009cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cfc <UART_SetConfig+0x218>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009d15 	.word	0x08009d15
 8009d00:	08009d1d 	.word	0x08009d1d
 8009d04:	08009d25 	.word	0x08009d25
 8009d08:	08009d2d 	.word	0x08009d2d
 8009d0c:	08009d35 	.word	0x08009d35
 8009d10:	08009d3d 	.word	0x08009d3d
 8009d14:	2300      	movs	r3, #0
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1a:	e2ba      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009d1c:	2304      	movs	r3, #4
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d22:	e2b6      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009d24:	2308      	movs	r3, #8
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2a:	e2b2      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d32:	e2ae      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009d34:	2320      	movs	r3, #32
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3a:	e2aa      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009d3c:	2340      	movs	r3, #64	@ 0x40
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d42:	e2a6      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009d44:	2380      	movs	r3, #128	@ 0x80
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4a:	e2a2      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a35      	ldr	r2, [pc, #212]	@ (8009e28 <UART_SetConfig+0x344>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d130      	bne.n	8009db8 <UART_SetConfig+0x2d4>
 8009d56:	4b31      	ldr	r3, [pc, #196]	@ (8009e1c <UART_SetConfig+0x338>)
 8009d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d5a:	f003 0307 	and.w	r3, r3, #7
 8009d5e:	2b05      	cmp	r3, #5
 8009d60:	d826      	bhi.n	8009db0 <UART_SetConfig+0x2cc>
 8009d62:	a201      	add	r2, pc, #4	@ (adr r2, 8009d68 <UART_SetConfig+0x284>)
 8009d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d68:	08009d81 	.word	0x08009d81
 8009d6c:	08009d89 	.word	0x08009d89
 8009d70:	08009d91 	.word	0x08009d91
 8009d74:	08009d99 	.word	0x08009d99
 8009d78:	08009da1 	.word	0x08009da1
 8009d7c:	08009da9 	.word	0x08009da9
 8009d80:	2300      	movs	r3, #0
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d86:	e284      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009d88:	2304      	movs	r3, #4
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e280      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009d90:	2308      	movs	r3, #8
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d96:	e27c      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009d98:	2310      	movs	r3, #16
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9e:	e278      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009da0:	2320      	movs	r3, #32
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da6:	e274      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009da8:	2340      	movs	r3, #64	@ 0x40
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dae:	e270      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009db0:	2380      	movs	r3, #128	@ 0x80
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db6:	e26c      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8009e2c <UART_SetConfig+0x348>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d142      	bne.n	8009e48 <UART_SetConfig+0x364>
 8009dc2:	4b16      	ldr	r3, [pc, #88]	@ (8009e1c <UART_SetConfig+0x338>)
 8009dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dc6:	f003 0307 	and.w	r3, r3, #7
 8009dca:	2b05      	cmp	r3, #5
 8009dcc:	d838      	bhi.n	8009e40 <UART_SetConfig+0x35c>
 8009dce:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd4 <UART_SetConfig+0x2f0>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009ded 	.word	0x08009ded
 8009dd8:	08009df5 	.word	0x08009df5
 8009ddc:	08009dfd 	.word	0x08009dfd
 8009de0:	08009e05 	.word	0x08009e05
 8009de4:	08009e31 	.word	0x08009e31
 8009de8:	08009e39 	.word	0x08009e39
 8009dec:	2300      	movs	r3, #0
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e24e      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009df4:	2304      	movs	r3, #4
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e24a      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009dfc:	2308      	movs	r3, #8
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e02:	e246      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009e04:	2310      	movs	r3, #16
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0a:	e242      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009e0c:	cfff69f3 	.word	0xcfff69f3
 8009e10:	58000c00 	.word	0x58000c00
 8009e14:	11fff4ff 	.word	0x11fff4ff
 8009e18:	40011000 	.word	0x40011000
 8009e1c:	58024400 	.word	0x58024400
 8009e20:	40004400 	.word	0x40004400
 8009e24:	40004800 	.word	0x40004800
 8009e28:	40004c00 	.word	0x40004c00
 8009e2c:	40005000 	.word	0x40005000
 8009e30:	2320      	movs	r3, #32
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e22c      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009e38:	2340      	movs	r3, #64	@ 0x40
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e228      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009e40:	2380      	movs	r3, #128	@ 0x80
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e224      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4ab1      	ldr	r2, [pc, #708]	@ (800a114 <UART_SetConfig+0x630>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d176      	bne.n	8009f40 <UART_SetConfig+0x45c>
 8009e52:	4bb1      	ldr	r3, [pc, #708]	@ (800a118 <UART_SetConfig+0x634>)
 8009e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e5a:	2b28      	cmp	r3, #40	@ 0x28
 8009e5c:	d86c      	bhi.n	8009f38 <UART_SetConfig+0x454>
 8009e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e64 <UART_SetConfig+0x380>)
 8009e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e64:	08009f09 	.word	0x08009f09
 8009e68:	08009f39 	.word	0x08009f39
 8009e6c:	08009f39 	.word	0x08009f39
 8009e70:	08009f39 	.word	0x08009f39
 8009e74:	08009f39 	.word	0x08009f39
 8009e78:	08009f39 	.word	0x08009f39
 8009e7c:	08009f39 	.word	0x08009f39
 8009e80:	08009f39 	.word	0x08009f39
 8009e84:	08009f11 	.word	0x08009f11
 8009e88:	08009f39 	.word	0x08009f39
 8009e8c:	08009f39 	.word	0x08009f39
 8009e90:	08009f39 	.word	0x08009f39
 8009e94:	08009f39 	.word	0x08009f39
 8009e98:	08009f39 	.word	0x08009f39
 8009e9c:	08009f39 	.word	0x08009f39
 8009ea0:	08009f39 	.word	0x08009f39
 8009ea4:	08009f19 	.word	0x08009f19
 8009ea8:	08009f39 	.word	0x08009f39
 8009eac:	08009f39 	.word	0x08009f39
 8009eb0:	08009f39 	.word	0x08009f39
 8009eb4:	08009f39 	.word	0x08009f39
 8009eb8:	08009f39 	.word	0x08009f39
 8009ebc:	08009f39 	.word	0x08009f39
 8009ec0:	08009f39 	.word	0x08009f39
 8009ec4:	08009f21 	.word	0x08009f21
 8009ec8:	08009f39 	.word	0x08009f39
 8009ecc:	08009f39 	.word	0x08009f39
 8009ed0:	08009f39 	.word	0x08009f39
 8009ed4:	08009f39 	.word	0x08009f39
 8009ed8:	08009f39 	.word	0x08009f39
 8009edc:	08009f39 	.word	0x08009f39
 8009ee0:	08009f39 	.word	0x08009f39
 8009ee4:	08009f29 	.word	0x08009f29
 8009ee8:	08009f39 	.word	0x08009f39
 8009eec:	08009f39 	.word	0x08009f39
 8009ef0:	08009f39 	.word	0x08009f39
 8009ef4:	08009f39 	.word	0x08009f39
 8009ef8:	08009f39 	.word	0x08009f39
 8009efc:	08009f39 	.word	0x08009f39
 8009f00:	08009f39 	.word	0x08009f39
 8009f04:	08009f31 	.word	0x08009f31
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0e:	e1c0      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f10:	2304      	movs	r3, #4
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f16:	e1bc      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f18:	2308      	movs	r3, #8
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e1b8      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f20:	2310      	movs	r3, #16
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e1b4      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f28:	2320      	movs	r3, #32
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2e:	e1b0      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f30:	2340      	movs	r3, #64	@ 0x40
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f36:	e1ac      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f38:	2380      	movs	r3, #128	@ 0x80
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3e:	e1a8      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a75      	ldr	r2, [pc, #468]	@ (800a11c <UART_SetConfig+0x638>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d130      	bne.n	8009fac <UART_SetConfig+0x4c8>
 8009f4a:	4b73      	ldr	r3, [pc, #460]	@ (800a118 <UART_SetConfig+0x634>)
 8009f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	2b05      	cmp	r3, #5
 8009f54:	d826      	bhi.n	8009fa4 <UART_SetConfig+0x4c0>
 8009f56:	a201      	add	r2, pc, #4	@ (adr r2, 8009f5c <UART_SetConfig+0x478>)
 8009f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5c:	08009f75 	.word	0x08009f75
 8009f60:	08009f7d 	.word	0x08009f7d
 8009f64:	08009f85 	.word	0x08009f85
 8009f68:	08009f8d 	.word	0x08009f8d
 8009f6c:	08009f95 	.word	0x08009f95
 8009f70:	08009f9d 	.word	0x08009f9d
 8009f74:	2300      	movs	r3, #0
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7a:	e18a      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f7c:	2304      	movs	r3, #4
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f82:	e186      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f84:	2308      	movs	r3, #8
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8a:	e182      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f8c:	2310      	movs	r3, #16
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f92:	e17e      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f94:	2320      	movs	r3, #32
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9a:	e17a      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009f9c:	2340      	movs	r3, #64	@ 0x40
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa2:	e176      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009fa4:	2380      	movs	r3, #128	@ 0x80
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009faa:	e172      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a5b      	ldr	r2, [pc, #364]	@ (800a120 <UART_SetConfig+0x63c>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d130      	bne.n	800a018 <UART_SetConfig+0x534>
 8009fb6:	4b58      	ldr	r3, [pc, #352]	@ (800a118 <UART_SetConfig+0x634>)
 8009fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fba:	f003 0307 	and.w	r3, r3, #7
 8009fbe:	2b05      	cmp	r3, #5
 8009fc0:	d826      	bhi.n	800a010 <UART_SetConfig+0x52c>
 8009fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc8 <UART_SetConfig+0x4e4>)
 8009fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc8:	08009fe1 	.word	0x08009fe1
 8009fcc:	08009fe9 	.word	0x08009fe9
 8009fd0:	08009ff1 	.word	0x08009ff1
 8009fd4:	08009ff9 	.word	0x08009ff9
 8009fd8:	0800a001 	.word	0x0800a001
 8009fdc:	0800a009 	.word	0x0800a009
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe6:	e154      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009fe8:	2304      	movs	r3, #4
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fee:	e150      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009ff0:	2308      	movs	r3, #8
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff6:	e14c      	b.n	800a292 <UART_SetConfig+0x7ae>
 8009ff8:	2310      	movs	r3, #16
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffe:	e148      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a000:	2320      	movs	r3, #32
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a006:	e144      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a008:	2340      	movs	r3, #64	@ 0x40
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00e:	e140      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a010:	2380      	movs	r3, #128	@ 0x80
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a016:	e13c      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a41      	ldr	r2, [pc, #260]	@ (800a124 <UART_SetConfig+0x640>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	f040 8082 	bne.w	800a128 <UART_SetConfig+0x644>
 800a024:	4b3c      	ldr	r3, [pc, #240]	@ (800a118 <UART_SetConfig+0x634>)
 800a026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a02c:	2b28      	cmp	r3, #40	@ 0x28
 800a02e:	d86d      	bhi.n	800a10c <UART_SetConfig+0x628>
 800a030:	a201      	add	r2, pc, #4	@ (adr r2, 800a038 <UART_SetConfig+0x554>)
 800a032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a036:	bf00      	nop
 800a038:	0800a0dd 	.word	0x0800a0dd
 800a03c:	0800a10d 	.word	0x0800a10d
 800a040:	0800a10d 	.word	0x0800a10d
 800a044:	0800a10d 	.word	0x0800a10d
 800a048:	0800a10d 	.word	0x0800a10d
 800a04c:	0800a10d 	.word	0x0800a10d
 800a050:	0800a10d 	.word	0x0800a10d
 800a054:	0800a10d 	.word	0x0800a10d
 800a058:	0800a0e5 	.word	0x0800a0e5
 800a05c:	0800a10d 	.word	0x0800a10d
 800a060:	0800a10d 	.word	0x0800a10d
 800a064:	0800a10d 	.word	0x0800a10d
 800a068:	0800a10d 	.word	0x0800a10d
 800a06c:	0800a10d 	.word	0x0800a10d
 800a070:	0800a10d 	.word	0x0800a10d
 800a074:	0800a10d 	.word	0x0800a10d
 800a078:	0800a0ed 	.word	0x0800a0ed
 800a07c:	0800a10d 	.word	0x0800a10d
 800a080:	0800a10d 	.word	0x0800a10d
 800a084:	0800a10d 	.word	0x0800a10d
 800a088:	0800a10d 	.word	0x0800a10d
 800a08c:	0800a10d 	.word	0x0800a10d
 800a090:	0800a10d 	.word	0x0800a10d
 800a094:	0800a10d 	.word	0x0800a10d
 800a098:	0800a0f5 	.word	0x0800a0f5
 800a09c:	0800a10d 	.word	0x0800a10d
 800a0a0:	0800a10d 	.word	0x0800a10d
 800a0a4:	0800a10d 	.word	0x0800a10d
 800a0a8:	0800a10d 	.word	0x0800a10d
 800a0ac:	0800a10d 	.word	0x0800a10d
 800a0b0:	0800a10d 	.word	0x0800a10d
 800a0b4:	0800a10d 	.word	0x0800a10d
 800a0b8:	0800a0fd 	.word	0x0800a0fd
 800a0bc:	0800a10d 	.word	0x0800a10d
 800a0c0:	0800a10d 	.word	0x0800a10d
 800a0c4:	0800a10d 	.word	0x0800a10d
 800a0c8:	0800a10d 	.word	0x0800a10d
 800a0cc:	0800a10d 	.word	0x0800a10d
 800a0d0:	0800a10d 	.word	0x0800a10d
 800a0d4:	0800a10d 	.word	0x0800a10d
 800a0d8:	0800a105 	.word	0x0800a105
 800a0dc:	2301      	movs	r3, #1
 800a0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e2:	e0d6      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a0e4:	2304      	movs	r3, #4
 800a0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ea:	e0d2      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a0ec:	2308      	movs	r3, #8
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f2:	e0ce      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fa:	e0ca      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a0fc:	2320      	movs	r3, #32
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a102:	e0c6      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a104:	2340      	movs	r3, #64	@ 0x40
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e0c2      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a10c:	2380      	movs	r3, #128	@ 0x80
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e0be      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a114:	40011400 	.word	0x40011400
 800a118:	58024400 	.word	0x58024400
 800a11c:	40007800 	.word	0x40007800
 800a120:	40007c00 	.word	0x40007c00
 800a124:	40011800 	.word	0x40011800
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4aad      	ldr	r2, [pc, #692]	@ (800a3e4 <UART_SetConfig+0x900>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d176      	bne.n	800a220 <UART_SetConfig+0x73c>
 800a132:	4bad      	ldr	r3, [pc, #692]	@ (800a3e8 <UART_SetConfig+0x904>)
 800a134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a13a:	2b28      	cmp	r3, #40	@ 0x28
 800a13c:	d86c      	bhi.n	800a218 <UART_SetConfig+0x734>
 800a13e:	a201      	add	r2, pc, #4	@ (adr r2, 800a144 <UART_SetConfig+0x660>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a1e9 	.word	0x0800a1e9
 800a148:	0800a219 	.word	0x0800a219
 800a14c:	0800a219 	.word	0x0800a219
 800a150:	0800a219 	.word	0x0800a219
 800a154:	0800a219 	.word	0x0800a219
 800a158:	0800a219 	.word	0x0800a219
 800a15c:	0800a219 	.word	0x0800a219
 800a160:	0800a219 	.word	0x0800a219
 800a164:	0800a1f1 	.word	0x0800a1f1
 800a168:	0800a219 	.word	0x0800a219
 800a16c:	0800a219 	.word	0x0800a219
 800a170:	0800a219 	.word	0x0800a219
 800a174:	0800a219 	.word	0x0800a219
 800a178:	0800a219 	.word	0x0800a219
 800a17c:	0800a219 	.word	0x0800a219
 800a180:	0800a219 	.word	0x0800a219
 800a184:	0800a1f9 	.word	0x0800a1f9
 800a188:	0800a219 	.word	0x0800a219
 800a18c:	0800a219 	.word	0x0800a219
 800a190:	0800a219 	.word	0x0800a219
 800a194:	0800a219 	.word	0x0800a219
 800a198:	0800a219 	.word	0x0800a219
 800a19c:	0800a219 	.word	0x0800a219
 800a1a0:	0800a219 	.word	0x0800a219
 800a1a4:	0800a201 	.word	0x0800a201
 800a1a8:	0800a219 	.word	0x0800a219
 800a1ac:	0800a219 	.word	0x0800a219
 800a1b0:	0800a219 	.word	0x0800a219
 800a1b4:	0800a219 	.word	0x0800a219
 800a1b8:	0800a219 	.word	0x0800a219
 800a1bc:	0800a219 	.word	0x0800a219
 800a1c0:	0800a219 	.word	0x0800a219
 800a1c4:	0800a209 	.word	0x0800a209
 800a1c8:	0800a219 	.word	0x0800a219
 800a1cc:	0800a219 	.word	0x0800a219
 800a1d0:	0800a219 	.word	0x0800a219
 800a1d4:	0800a219 	.word	0x0800a219
 800a1d8:	0800a219 	.word	0x0800a219
 800a1dc:	0800a219 	.word	0x0800a219
 800a1e0:	0800a219 	.word	0x0800a219
 800a1e4:	0800a211 	.word	0x0800a211
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ee:	e050      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a1f0:	2304      	movs	r3, #4
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f6:	e04c      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a1f8:	2308      	movs	r3, #8
 800a1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fe:	e048      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a200:	2310      	movs	r3, #16
 800a202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a206:	e044      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a208:	2320      	movs	r3, #32
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20e:	e040      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a210:	2340      	movs	r3, #64	@ 0x40
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a216:	e03c      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a218:	2380      	movs	r3, #128	@ 0x80
 800a21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21e:	e038      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a71      	ldr	r2, [pc, #452]	@ (800a3ec <UART_SetConfig+0x908>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d130      	bne.n	800a28c <UART_SetConfig+0x7a8>
 800a22a:	4b6f      	ldr	r3, [pc, #444]	@ (800a3e8 <UART_SetConfig+0x904>)
 800a22c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a22e:	f003 0307 	and.w	r3, r3, #7
 800a232:	2b05      	cmp	r3, #5
 800a234:	d826      	bhi.n	800a284 <UART_SetConfig+0x7a0>
 800a236:	a201      	add	r2, pc, #4	@ (adr r2, 800a23c <UART_SetConfig+0x758>)
 800a238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23c:	0800a255 	.word	0x0800a255
 800a240:	0800a25d 	.word	0x0800a25d
 800a244:	0800a265 	.word	0x0800a265
 800a248:	0800a26d 	.word	0x0800a26d
 800a24c:	0800a275 	.word	0x0800a275
 800a250:	0800a27d 	.word	0x0800a27d
 800a254:	2302      	movs	r3, #2
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25a:	e01a      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a25c:	2304      	movs	r3, #4
 800a25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a262:	e016      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a264:	2308      	movs	r3, #8
 800a266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26a:	e012      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a26c:	2310      	movs	r3, #16
 800a26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a272:	e00e      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a274:	2320      	movs	r3, #32
 800a276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27a:	e00a      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a27c:	2340      	movs	r3, #64	@ 0x40
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a282:	e006      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a284:	2380      	movs	r3, #128	@ 0x80
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a28a:	e002      	b.n	800a292 <UART_SetConfig+0x7ae>
 800a28c:	2380      	movs	r3, #128	@ 0x80
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a55      	ldr	r2, [pc, #340]	@ (800a3ec <UART_SetConfig+0x908>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	f040 80f8 	bne.w	800a48e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a29e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a2a2:	2b20      	cmp	r3, #32
 800a2a4:	dc46      	bgt.n	800a334 <UART_SetConfig+0x850>
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	db75      	blt.n	800a396 <UART_SetConfig+0x8b2>
 800a2aa:	3b02      	subs	r3, #2
 800a2ac:	2b1e      	cmp	r3, #30
 800a2ae:	d872      	bhi.n	800a396 <UART_SetConfig+0x8b2>
 800a2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b8 <UART_SetConfig+0x7d4>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a33b 	.word	0x0800a33b
 800a2bc:	0800a397 	.word	0x0800a397
 800a2c0:	0800a343 	.word	0x0800a343
 800a2c4:	0800a397 	.word	0x0800a397
 800a2c8:	0800a397 	.word	0x0800a397
 800a2cc:	0800a397 	.word	0x0800a397
 800a2d0:	0800a353 	.word	0x0800a353
 800a2d4:	0800a397 	.word	0x0800a397
 800a2d8:	0800a397 	.word	0x0800a397
 800a2dc:	0800a397 	.word	0x0800a397
 800a2e0:	0800a397 	.word	0x0800a397
 800a2e4:	0800a397 	.word	0x0800a397
 800a2e8:	0800a397 	.word	0x0800a397
 800a2ec:	0800a397 	.word	0x0800a397
 800a2f0:	0800a363 	.word	0x0800a363
 800a2f4:	0800a397 	.word	0x0800a397
 800a2f8:	0800a397 	.word	0x0800a397
 800a2fc:	0800a397 	.word	0x0800a397
 800a300:	0800a397 	.word	0x0800a397
 800a304:	0800a397 	.word	0x0800a397
 800a308:	0800a397 	.word	0x0800a397
 800a30c:	0800a397 	.word	0x0800a397
 800a310:	0800a397 	.word	0x0800a397
 800a314:	0800a397 	.word	0x0800a397
 800a318:	0800a397 	.word	0x0800a397
 800a31c:	0800a397 	.word	0x0800a397
 800a320:	0800a397 	.word	0x0800a397
 800a324:	0800a397 	.word	0x0800a397
 800a328:	0800a397 	.word	0x0800a397
 800a32c:	0800a397 	.word	0x0800a397
 800a330:	0800a389 	.word	0x0800a389
 800a334:	2b40      	cmp	r3, #64	@ 0x40
 800a336:	d02a      	beq.n	800a38e <UART_SetConfig+0x8aa>
 800a338:	e02d      	b.n	800a396 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a33a:	f7fd fa69 	bl	8007810 <HAL_RCCEx_GetD3PCLK1Freq>
 800a33e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a340:	e02f      	b.n	800a3a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a346:	4618      	mov	r0, r3
 800a348:	f7fd fa78 	bl	800783c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a350:	e027      	b.n	800a3a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a352:	f107 0318 	add.w	r3, r7, #24
 800a356:	4618      	mov	r0, r3
 800a358:	f7fd fbc4 	bl	8007ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a360:	e01f      	b.n	800a3a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a362:	4b21      	ldr	r3, [pc, #132]	@ (800a3e8 <UART_SetConfig+0x904>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0320 	and.w	r3, r3, #32
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d009      	beq.n	800a382 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a36e:	4b1e      	ldr	r3, [pc, #120]	@ (800a3e8 <UART_SetConfig+0x904>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	08db      	lsrs	r3, r3, #3
 800a374:	f003 0303 	and.w	r3, r3, #3
 800a378:	4a1d      	ldr	r2, [pc, #116]	@ (800a3f0 <UART_SetConfig+0x90c>)
 800a37a:	fa22 f303 	lsr.w	r3, r2, r3
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a380:	e00f      	b.n	800a3a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a382:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f0 <UART_SetConfig+0x90c>)
 800a384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a386:	e00c      	b.n	800a3a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a388:	4b1a      	ldr	r3, [pc, #104]	@ (800a3f4 <UART_SetConfig+0x910>)
 800a38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a38c:	e009      	b.n	800a3a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a38e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a394:	e005      	b.n	800a3a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a396:	2300      	movs	r3, #0
 800a398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a3a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 81ee 	beq.w	800a786 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ae:	4a12      	ldr	r2, [pc, #72]	@ (800a3f8 <UART_SetConfig+0x914>)
 800a3b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3bc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	685a      	ldr	r2, [r3, #4]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	4413      	add	r3, r2
 800a3c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d305      	bcc.n	800a3da <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d910      	bls.n	800a3fc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a3e0:	e1d1      	b.n	800a786 <UART_SetConfig+0xca2>
 800a3e2:	bf00      	nop
 800a3e4:	40011c00 	.word	0x40011c00
 800a3e8:	58024400 	.word	0x58024400
 800a3ec:	58000c00 	.word	0x58000c00
 800a3f0:	03d09000 	.word	0x03d09000
 800a3f4:	003d0900 	.word	0x003d0900
 800a3f8:	0800eb48 	.word	0x0800eb48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3fe:	2200      	movs	r2, #0
 800a400:	60bb      	str	r3, [r7, #8]
 800a402:	60fa      	str	r2, [r7, #12]
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a408:	4ac0      	ldr	r2, [pc, #768]	@ (800a70c <UART_SetConfig+0xc28>)
 800a40a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	2200      	movs	r2, #0
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	607a      	str	r2, [r7, #4]
 800a416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a41a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a41e:	f7f5 ffbf 	bl	80003a0 <__aeabi_uldivmod>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4610      	mov	r0, r2
 800a428:	4619      	mov	r1, r3
 800a42a:	f04f 0200 	mov.w	r2, #0
 800a42e:	f04f 0300 	mov.w	r3, #0
 800a432:	020b      	lsls	r3, r1, #8
 800a434:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a438:	0202      	lsls	r2, r0, #8
 800a43a:	6979      	ldr	r1, [r7, #20]
 800a43c:	6849      	ldr	r1, [r1, #4]
 800a43e:	0849      	lsrs	r1, r1, #1
 800a440:	2000      	movs	r0, #0
 800a442:	460c      	mov	r4, r1
 800a444:	4605      	mov	r5, r0
 800a446:	eb12 0804 	adds.w	r8, r2, r4
 800a44a:	eb43 0905 	adc.w	r9, r3, r5
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	469a      	mov	sl, r3
 800a456:	4693      	mov	fp, r2
 800a458:	4652      	mov	r2, sl
 800a45a:	465b      	mov	r3, fp
 800a45c:	4640      	mov	r0, r8
 800a45e:	4649      	mov	r1, r9
 800a460:	f7f5 ff9e 	bl	80003a0 <__aeabi_uldivmod>
 800a464:	4602      	mov	r2, r0
 800a466:	460b      	mov	r3, r1
 800a468:	4613      	mov	r3, r2
 800a46a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a472:	d308      	bcc.n	800a486 <UART_SetConfig+0x9a2>
 800a474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a47a:	d204      	bcs.n	800a486 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a482:	60da      	str	r2, [r3, #12]
 800a484:	e17f      	b.n	800a786 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a48c:	e17b      	b.n	800a786 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a496:	f040 80bd 	bne.w	800a614 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a49a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a49e:	2b20      	cmp	r3, #32
 800a4a0:	dc48      	bgt.n	800a534 <UART_SetConfig+0xa50>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	db7b      	blt.n	800a59e <UART_SetConfig+0xaba>
 800a4a6:	2b20      	cmp	r3, #32
 800a4a8:	d879      	bhi.n	800a59e <UART_SetConfig+0xaba>
 800a4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b0 <UART_SetConfig+0x9cc>)
 800a4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b0:	0800a53b 	.word	0x0800a53b
 800a4b4:	0800a543 	.word	0x0800a543
 800a4b8:	0800a59f 	.word	0x0800a59f
 800a4bc:	0800a59f 	.word	0x0800a59f
 800a4c0:	0800a54b 	.word	0x0800a54b
 800a4c4:	0800a59f 	.word	0x0800a59f
 800a4c8:	0800a59f 	.word	0x0800a59f
 800a4cc:	0800a59f 	.word	0x0800a59f
 800a4d0:	0800a55b 	.word	0x0800a55b
 800a4d4:	0800a59f 	.word	0x0800a59f
 800a4d8:	0800a59f 	.word	0x0800a59f
 800a4dc:	0800a59f 	.word	0x0800a59f
 800a4e0:	0800a59f 	.word	0x0800a59f
 800a4e4:	0800a59f 	.word	0x0800a59f
 800a4e8:	0800a59f 	.word	0x0800a59f
 800a4ec:	0800a59f 	.word	0x0800a59f
 800a4f0:	0800a56b 	.word	0x0800a56b
 800a4f4:	0800a59f 	.word	0x0800a59f
 800a4f8:	0800a59f 	.word	0x0800a59f
 800a4fc:	0800a59f 	.word	0x0800a59f
 800a500:	0800a59f 	.word	0x0800a59f
 800a504:	0800a59f 	.word	0x0800a59f
 800a508:	0800a59f 	.word	0x0800a59f
 800a50c:	0800a59f 	.word	0x0800a59f
 800a510:	0800a59f 	.word	0x0800a59f
 800a514:	0800a59f 	.word	0x0800a59f
 800a518:	0800a59f 	.word	0x0800a59f
 800a51c:	0800a59f 	.word	0x0800a59f
 800a520:	0800a59f 	.word	0x0800a59f
 800a524:	0800a59f 	.word	0x0800a59f
 800a528:	0800a59f 	.word	0x0800a59f
 800a52c:	0800a59f 	.word	0x0800a59f
 800a530:	0800a591 	.word	0x0800a591
 800a534:	2b40      	cmp	r3, #64	@ 0x40
 800a536:	d02e      	beq.n	800a596 <UART_SetConfig+0xab2>
 800a538:	e031      	b.n	800a59e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a53a:	f7fb ff7f 	bl	800643c <HAL_RCC_GetPCLK1Freq>
 800a53e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a540:	e033      	b.n	800a5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a542:	f7fb ff91 	bl	8006468 <HAL_RCC_GetPCLK2Freq>
 800a546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a548:	e02f      	b.n	800a5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a54a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fd f974 	bl	800783c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a558:	e027      	b.n	800a5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a55a:	f107 0318 	add.w	r3, r7, #24
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fd fac0 	bl	8007ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a568:	e01f      	b.n	800a5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a56a:	4b69      	ldr	r3, [pc, #420]	@ (800a710 <UART_SetConfig+0xc2c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0320 	and.w	r3, r3, #32
 800a572:	2b00      	cmp	r3, #0
 800a574:	d009      	beq.n	800a58a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a576:	4b66      	ldr	r3, [pc, #408]	@ (800a710 <UART_SetConfig+0xc2c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	08db      	lsrs	r3, r3, #3
 800a57c:	f003 0303 	and.w	r3, r3, #3
 800a580:	4a64      	ldr	r2, [pc, #400]	@ (800a714 <UART_SetConfig+0xc30>)
 800a582:	fa22 f303 	lsr.w	r3, r2, r3
 800a586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a588:	e00f      	b.n	800a5aa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a58a:	4b62      	ldr	r3, [pc, #392]	@ (800a714 <UART_SetConfig+0xc30>)
 800a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a58e:	e00c      	b.n	800a5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a590:	4b61      	ldr	r3, [pc, #388]	@ (800a718 <UART_SetConfig+0xc34>)
 800a592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a594:	e009      	b.n	800a5aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a59c:	e005      	b.n	800a5aa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a5a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 80ea 	beq.w	800a786 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b6:	4a55      	ldr	r2, [pc, #340]	@ (800a70c <UART_SetConfig+0xc28>)
 800a5b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5c4:	005a      	lsls	r2, r3, #1
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	085b      	lsrs	r3, r3, #1
 800a5cc:	441a      	add	r2, r3
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5da:	2b0f      	cmp	r3, #15
 800a5dc:	d916      	bls.n	800a60c <UART_SetConfig+0xb28>
 800a5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5e4:	d212      	bcs.n	800a60c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	f023 030f 	bic.w	r3, r3, #15
 800a5ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f2:	085b      	lsrs	r3, r3, #1
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	f003 0307 	and.w	r3, r3, #7
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a5fe:	4313      	orrs	r3, r2
 800a600:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a608:	60da      	str	r2, [r3, #12]
 800a60a:	e0bc      	b.n	800a786 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a612:	e0b8      	b.n	800a786 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a614:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a618:	2b20      	cmp	r3, #32
 800a61a:	dc4b      	bgt.n	800a6b4 <UART_SetConfig+0xbd0>
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f2c0 8087 	blt.w	800a730 <UART_SetConfig+0xc4c>
 800a622:	2b20      	cmp	r3, #32
 800a624:	f200 8084 	bhi.w	800a730 <UART_SetConfig+0xc4c>
 800a628:	a201      	add	r2, pc, #4	@ (adr r2, 800a630 <UART_SetConfig+0xb4c>)
 800a62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62e:	bf00      	nop
 800a630:	0800a6bb 	.word	0x0800a6bb
 800a634:	0800a6c3 	.word	0x0800a6c3
 800a638:	0800a731 	.word	0x0800a731
 800a63c:	0800a731 	.word	0x0800a731
 800a640:	0800a6cb 	.word	0x0800a6cb
 800a644:	0800a731 	.word	0x0800a731
 800a648:	0800a731 	.word	0x0800a731
 800a64c:	0800a731 	.word	0x0800a731
 800a650:	0800a6db 	.word	0x0800a6db
 800a654:	0800a731 	.word	0x0800a731
 800a658:	0800a731 	.word	0x0800a731
 800a65c:	0800a731 	.word	0x0800a731
 800a660:	0800a731 	.word	0x0800a731
 800a664:	0800a731 	.word	0x0800a731
 800a668:	0800a731 	.word	0x0800a731
 800a66c:	0800a731 	.word	0x0800a731
 800a670:	0800a6eb 	.word	0x0800a6eb
 800a674:	0800a731 	.word	0x0800a731
 800a678:	0800a731 	.word	0x0800a731
 800a67c:	0800a731 	.word	0x0800a731
 800a680:	0800a731 	.word	0x0800a731
 800a684:	0800a731 	.word	0x0800a731
 800a688:	0800a731 	.word	0x0800a731
 800a68c:	0800a731 	.word	0x0800a731
 800a690:	0800a731 	.word	0x0800a731
 800a694:	0800a731 	.word	0x0800a731
 800a698:	0800a731 	.word	0x0800a731
 800a69c:	0800a731 	.word	0x0800a731
 800a6a0:	0800a731 	.word	0x0800a731
 800a6a4:	0800a731 	.word	0x0800a731
 800a6a8:	0800a731 	.word	0x0800a731
 800a6ac:	0800a731 	.word	0x0800a731
 800a6b0:	0800a723 	.word	0x0800a723
 800a6b4:	2b40      	cmp	r3, #64	@ 0x40
 800a6b6:	d037      	beq.n	800a728 <UART_SetConfig+0xc44>
 800a6b8:	e03a      	b.n	800a730 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6ba:	f7fb febf 	bl	800643c <HAL_RCC_GetPCLK1Freq>
 800a6be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6c0:	e03c      	b.n	800a73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6c2:	f7fb fed1 	bl	8006468 <HAL_RCC_GetPCLK2Freq>
 800a6c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6c8:	e038      	b.n	800a73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fd f8b4 	bl	800783c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d8:	e030      	b.n	800a73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6da:	f107 0318 	add.w	r3, r7, #24
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fd fa00 	bl	8007ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e8:	e028      	b.n	800a73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6ea:	4b09      	ldr	r3, [pc, #36]	@ (800a710 <UART_SetConfig+0xc2c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0320 	and.w	r3, r3, #32
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d012      	beq.n	800a71c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6f6:	4b06      	ldr	r3, [pc, #24]	@ (800a710 <UART_SetConfig+0xc2c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	08db      	lsrs	r3, r3, #3
 800a6fc:	f003 0303 	and.w	r3, r3, #3
 800a700:	4a04      	ldr	r2, [pc, #16]	@ (800a714 <UART_SetConfig+0xc30>)
 800a702:	fa22 f303 	lsr.w	r3, r2, r3
 800a706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a708:	e018      	b.n	800a73c <UART_SetConfig+0xc58>
 800a70a:	bf00      	nop
 800a70c:	0800eb48 	.word	0x0800eb48
 800a710:	58024400 	.word	0x58024400
 800a714:	03d09000 	.word	0x03d09000
 800a718:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a71c:	4b24      	ldr	r3, [pc, #144]	@ (800a7b0 <UART_SetConfig+0xccc>)
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a720:	e00c      	b.n	800a73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a722:	4b24      	ldr	r3, [pc, #144]	@ (800a7b4 <UART_SetConfig+0xcd0>)
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a726:	e009      	b.n	800a73c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a72e:	e005      	b.n	800a73c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a730:	2300      	movs	r3, #0
 800a732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a73a:	bf00      	nop
    }

    if (pclk != 0U)
 800a73c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d021      	beq.n	800a786 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a746:	4a1c      	ldr	r2, [pc, #112]	@ (800a7b8 <UART_SetConfig+0xcd4>)
 800a748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a74c:	461a      	mov	r2, r3
 800a74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a750:	fbb3 f2f2 	udiv	r2, r3, r2
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	085b      	lsrs	r3, r3, #1
 800a75a:	441a      	add	r2, r3
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	fbb2 f3f3 	udiv	r3, r2, r3
 800a764:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a768:	2b0f      	cmp	r3, #15
 800a76a:	d909      	bls.n	800a780 <UART_SetConfig+0xc9c>
 800a76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a772:	d205      	bcs.n	800a780 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a776:	b29a      	uxth	r2, r3
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	60da      	str	r2, [r3, #12]
 800a77e:	e002      	b.n	800a786 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2201      	movs	r2, #1
 800a78a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2201      	movs	r2, #1
 800a792:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	2200      	movs	r2, #0
 800a79a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a7a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3748      	adds	r7, #72	@ 0x48
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7b0:	03d09000 	.word	0x03d09000
 800a7b4:	003d0900 	.word	0x003d0900
 800a7b8:	0800eb48 	.word	0x0800eb48

0800a7bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c8:	f003 0308 	and.w	r3, r3, #8
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00a      	beq.n	800a7e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	430a      	orrs	r2, r1
 800a7e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00a      	beq.n	800a808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	430a      	orrs	r2, r1
 800a806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a80c:	f003 0302 	and.w	r3, r3, #2
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00a      	beq.n	800a82a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	430a      	orrs	r2, r1
 800a828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a82e:	f003 0304 	and.w	r3, r3, #4
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00a      	beq.n	800a84c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	430a      	orrs	r2, r1
 800a84a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a850:	f003 0310 	and.w	r3, r3, #16
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00a      	beq.n	800a86e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a872:	f003 0320 	and.w	r3, r3, #32
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00a      	beq.n	800a890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	430a      	orrs	r2, r1
 800a88e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01a      	beq.n	800a8d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8ba:	d10a      	bne.n	800a8d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00a      	beq.n	800a8f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	430a      	orrs	r2, r1
 800a8f2:	605a      	str	r2, [r3, #4]
  }
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b098      	sub	sp, #96	@ 0x60
 800a904:	af02      	add	r7, sp, #8
 800a906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a910:	f7f7 f9ee 	bl	8001cf0 <HAL_GetTick>
 800a914:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0308 	and.w	r3, r3, #8
 800a920:	2b08      	cmp	r3, #8
 800a922:	d12f      	bne.n	800a984 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a924:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a92c:	2200      	movs	r2, #0
 800a92e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f88e 	bl	800aa54 <UART_WaitOnFlagUntilTimeout>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d022      	beq.n	800a984 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a946:	e853 3f00 	ldrex	r3, [r3]
 800a94a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a952:	653b      	str	r3, [r7, #80]	@ 0x50
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	461a      	mov	r2, r3
 800a95a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a95c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a95e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a960:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a964:	e841 2300 	strex	r3, r2, [r1]
 800a968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a96a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1e6      	bne.n	800a93e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2220      	movs	r2, #32
 800a974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a980:	2303      	movs	r3, #3
 800a982:	e063      	b.n	800aa4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 0304 	and.w	r3, r3, #4
 800a98e:	2b04      	cmp	r3, #4
 800a990:	d149      	bne.n	800aa26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a992:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a99a:	2200      	movs	r2, #0
 800a99c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f857 	bl	800aa54 <UART_WaitOnFlagUntilTimeout>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d03c      	beq.n	800aa26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	623b      	str	r3, [r7, #32]
   return(result);
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9d2:	e841 2300 	strex	r3, r2, [r1]
 800a9d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e6      	bne.n	800a9ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3308      	adds	r3, #8
 800a9e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f023 0301 	bic.w	r3, r3, #1
 800a9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9fe:	61fa      	str	r2, [r7, #28]
 800aa00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	69b9      	ldr	r1, [r7, #24]
 800aa04:	69fa      	ldr	r2, [r7, #28]
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e5      	bne.n	800a9de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2220      	movs	r2, #32
 800aa16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e012      	b.n	800aa4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2220      	movs	r2, #32
 800aa32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3758      	adds	r7, #88	@ 0x58
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	603b      	str	r3, [r7, #0]
 800aa60:	4613      	mov	r3, r2
 800aa62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa64:	e04f      	b.n	800ab06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6c:	d04b      	beq.n	800ab06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa6e:	f7f7 f93f 	bl	8001cf0 <HAL_GetTick>
 800aa72:	4602      	mov	r2, r0
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	69ba      	ldr	r2, [r7, #24]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d302      	bcc.n	800aa84 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e04e      	b.n	800ab26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 0304 	and.w	r3, r3, #4
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d037      	beq.n	800ab06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2b80      	cmp	r3, #128	@ 0x80
 800aa9a:	d034      	beq.n	800ab06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b40      	cmp	r3, #64	@ 0x40
 800aaa0:	d031      	beq.n	800ab06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	f003 0308 	and.w	r3, r3, #8
 800aaac:	2b08      	cmp	r3, #8
 800aaae:	d110      	bne.n	800aad2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2208      	movs	r2, #8
 800aab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 f921 	bl	800ad00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2208      	movs	r2, #8
 800aac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e029      	b.n	800ab26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	69db      	ldr	r3, [r3, #28]
 800aad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aadc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aae0:	d111      	bne.n	800ab06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aaea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 f907 	bl	800ad00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2220      	movs	r2, #32
 800aaf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e00f      	b.n	800ab26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	69da      	ldr	r2, [r3, #28]
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	4013      	ands	r3, r2
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	bf0c      	ite	eq
 800ab16:	2301      	moveq	r3, #1
 800ab18:	2300      	movne	r3, #0
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	79fb      	ldrb	r3, [r7, #7]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d0a0      	beq.n	800aa66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
	...

0800ab30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b096      	sub	sp, #88	@ 0x58
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	88fa      	ldrh	r2, [r7, #6]
 800ab48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2222      	movs	r2, #34	@ 0x22
 800ab58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d02d      	beq.n	800abc2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab6c:	4a40      	ldr	r2, [pc, #256]	@ (800ac70 <UART_Start_Receive_DMA+0x140>)
 800ab6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab76:	4a3f      	ldr	r2, [pc, #252]	@ (800ac74 <UART_Start_Receive_DMA+0x144>)
 800ab78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab80:	4a3d      	ldr	r2, [pc, #244]	@ (800ac78 <UART_Start_Receive_DMA+0x148>)
 800ab82:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3324      	adds	r3, #36	@ 0x24
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aba0:	461a      	mov	r2, r3
 800aba2:	88fb      	ldrh	r3, [r7, #6]
 800aba4:	f7f7 fdea 	bl	800277c <HAL_DMA_Start_IT>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d009      	beq.n	800abc2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2210      	movs	r2, #16
 800abb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2220      	movs	r2, #32
 800abba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e051      	b.n	800ac66 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d018      	beq.n	800abfc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abd2:	e853 3f00 	ldrex	r3, [r3]
 800abd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abde:	657b      	str	r3, [r7, #84]	@ 0x54
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	461a      	mov	r2, r3
 800abe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abe8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abea:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800abee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800abf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e6      	bne.n	800abca <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3308      	adds	r3, #8
 800ac02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac06:	e853 3f00 	ldrex	r3, [r3]
 800ac0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0e:	f043 0301 	orr.w	r3, r3, #1
 800ac12:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac1c:	637a      	str	r2, [r7, #52]	@ 0x34
 800ac1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac24:	e841 2300 	strex	r3, r2, [r1]
 800ac28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ac2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1e5      	bne.n	800abfc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3308      	adds	r3, #8
 800ac36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	e853 3f00 	ldrex	r3, [r3]
 800ac3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac50:	623a      	str	r2, [r7, #32]
 800ac52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac54:	69f9      	ldr	r1, [r7, #28]
 800ac56:	6a3a      	ldr	r2, [r7, #32]
 800ac58:	e841 2300 	strex	r3, r2, [r1]
 800ac5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1e5      	bne.n	800ac30 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3758      	adds	r7, #88	@ 0x58
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	0800adcd 	.word	0x0800adcd
 800ac74:	0800aef5 	.word	0x0800aef5
 800ac78:	0800af33 	.word	0x0800af33

0800ac7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b08f      	sub	sp, #60	@ 0x3c
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ac98:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aca4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e6      	bne.n	800ac84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3308      	adds	r3, #8
 800acbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	e853 3f00 	ldrex	r3, [r3]
 800acc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800accc:	633b      	str	r3, [r7, #48]	@ 0x30
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3308      	adds	r3, #8
 800acd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acd6:	61ba      	str	r2, [r7, #24]
 800acd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acda:	6979      	ldr	r1, [r7, #20]
 800acdc:	69ba      	ldr	r2, [r7, #24]
 800acde:	e841 2300 	strex	r3, r2, [r1]
 800ace2:	613b      	str	r3, [r7, #16]
   return(result);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1e5      	bne.n	800acb6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2220      	movs	r2, #32
 800acee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800acf2:	bf00      	nop
 800acf4:	373c      	adds	r7, #60	@ 0x3c
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
	...

0800ad00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b095      	sub	sp, #84	@ 0x54
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad10:	e853 3f00 	ldrex	r3, [r3]
 800ad14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad26:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad2e:	e841 2300 	strex	r3, r2, [r1]
 800ad32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1e6      	bne.n	800ad08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3308      	adds	r3, #8
 800ad40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	e853 3f00 	ldrex	r3, [r3]
 800ad48:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad4a:	69fa      	ldr	r2, [r7, #28]
 800ad4c:	4b1e      	ldr	r3, [pc, #120]	@ (800adc8 <UART_EndRxTransfer+0xc8>)
 800ad4e:	4013      	ands	r3, r2
 800ad50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3308      	adds	r3, #8
 800ad58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad62:	e841 2300 	strex	r3, r2, [r1]
 800ad66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1e5      	bne.n	800ad3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d118      	bne.n	800ada8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f023 0310 	bic.w	r3, r3, #16
 800ad8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	461a      	mov	r2, r3
 800ad92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad94:	61bb      	str	r3, [r7, #24]
 800ad96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	6979      	ldr	r1, [r7, #20]
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	613b      	str	r3, [r7, #16]
   return(result);
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e6      	bne.n	800ad76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2220      	movs	r2, #32
 800adac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800adbc:	bf00      	nop
 800adbe:	3754      	adds	r7, #84	@ 0x54
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	effffffe 	.word	0xeffffffe

0800adcc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b09c      	sub	sp, #112	@ 0x70
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	69db      	ldr	r3, [r3, #28]
 800adde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ade2:	d071      	beq.n	800aec8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ade4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ade6:	2200      	movs	r2, #0
 800ade8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800adfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ae0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1e6      	bne.n	800adec <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3308      	adds	r3, #8
 800ae24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae28:	e853 3f00 	ldrex	r3, [r3]
 800ae2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae30:	f023 0301 	bic.w	r3, r3, #1
 800ae34:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ae3e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ae40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae46:	e841 2300 	strex	r3, r2, [r1]
 800ae4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1e5      	bne.n	800ae1e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3308      	adds	r3, #8
 800ae58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5c:	e853 3f00 	ldrex	r3, [r3]
 800ae60:	623b      	str	r3, [r7, #32]
   return(result);
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae68:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3308      	adds	r3, #8
 800ae70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae72:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae7a:	e841 2300 	strex	r3, r2, [r1]
 800ae7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1e5      	bne.n	800ae52 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d118      	bne.n	800aec8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	e853 3f00 	ldrex	r3, [r3]
 800aea2:	60fb      	str	r3, [r7, #12]
   return(result);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f023 0310 	bic.w	r3, r3, #16
 800aeaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aeac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aeb4:	61fb      	str	r3, [r7, #28]
 800aeb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb8:	69b9      	ldr	r1, [r7, #24]
 800aeba:	69fa      	ldr	r2, [r7, #28]
 800aebc:	e841 2300 	strex	r3, r2, [r1]
 800aec0:	617b      	str	r3, [r7, #20]
   return(result);
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1e6      	bne.n	800ae96 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeca:	2200      	movs	r2, #0
 800aecc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d107      	bne.n	800aee6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aedc:	4619      	mov	r1, r3
 800aede:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aee0:	f7f5 ff66 	bl	8000db0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aee4:	e002      	b.n	800aeec <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800aee6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aee8:	f7fe fdde 	bl	8009aa8 <HAL_UART_RxCpltCallback>
}
 800aeec:	bf00      	nop
 800aeee:	3770      	adds	r7, #112	@ 0x70
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2201      	movs	r2, #1
 800af06:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d109      	bne.n	800af24 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af16:	085b      	lsrs	r3, r3, #1
 800af18:	b29b      	uxth	r3, r3
 800af1a:	4619      	mov	r1, r3
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f7f5 ff47 	bl	8000db0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af22:	e002      	b.n	800af2a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7fe fdc9 	bl	8009abc <HAL_UART_RxHalfCpltCallback>
}
 800af2a:	bf00      	nop
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b086      	sub	sp, #24
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af5a:	2b80      	cmp	r3, #128	@ 0x80
 800af5c:	d109      	bne.n	800af72 <UART_DMAError+0x40>
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	2b21      	cmp	r3, #33	@ 0x21
 800af62:	d106      	bne.n	800af72 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	2200      	movs	r2, #0
 800af68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800af6c:	6978      	ldr	r0, [r7, #20]
 800af6e:	f7ff fe85 	bl	800ac7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af7c:	2b40      	cmp	r3, #64	@ 0x40
 800af7e:	d109      	bne.n	800af94 <UART_DMAError+0x62>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b22      	cmp	r3, #34	@ 0x22
 800af84:	d106      	bne.n	800af94 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2200      	movs	r2, #0
 800af8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800af8e:	6978      	ldr	r0, [r7, #20]
 800af90:	f7ff feb6 	bl	800ad00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af9a:	f043 0210 	orr.w	r2, r3, #16
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afa4:	6978      	ldr	r0, [r7, #20]
 800afa6:	f7fe fd93 	bl	8009ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afaa:	bf00      	nop
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f7fe fd81 	bl	8009ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afce:	bf00      	nop
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b088      	sub	sp, #32
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	e853 3f00 	ldrex	r3, [r3]
 800afea:	60bb      	str	r3, [r7, #8]
   return(result);
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aff2:	61fb      	str	r3, [r7, #28]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	461a      	mov	r2, r3
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	61bb      	str	r3, [r7, #24]
 800affe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b000:	6979      	ldr	r1, [r7, #20]
 800b002:	69ba      	ldr	r2, [r7, #24]
 800b004:	e841 2300 	strex	r3, r2, [r1]
 800b008:	613b      	str	r3, [r7, #16]
   return(result);
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e6      	bne.n	800afde <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2220      	movs	r2, #32
 800b014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7fe fd38 	bl	8009a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b024:	bf00      	nop
 800b026:	3720      	adds	r7, #32
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b076:	2b01      	cmp	r3, #1
 800b078:	d101      	bne.n	800b07e <HAL_UARTEx_DisableFifoMode+0x16>
 800b07a:	2302      	movs	r3, #2
 800b07c:	e027      	b.n	800b0ce <HAL_UARTEx_DisableFifoMode+0x66>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2224      	movs	r2, #36	@ 0x24
 800b08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f022 0201 	bic.w	r2, r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b0ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d101      	bne.n	800b0f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	e02d      	b.n	800b14e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2224      	movs	r2, #36	@ 0x24
 800b0fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f022 0201 	bic.w	r2, r2, #1
 800b118:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f8a4 	bl	800b27c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2220      	movs	r2, #32
 800b140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b16a:	2302      	movs	r3, #2
 800b16c:	e02d      	b.n	800b1ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2224      	movs	r2, #36	@ 0x24
 800b17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f022 0201 	bic.w	r2, r2, #1
 800b194:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f866 	bl	800b27c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b08c      	sub	sp, #48	@ 0x30
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1e6:	2b20      	cmp	r3, #32
 800b1e8:	d142      	bne.n	800b270 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b1f0:	88fb      	ldrh	r3, [r7, #6]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e03b      	b.n	800b272 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b206:	88fb      	ldrh	r3, [r7, #6]
 800b208:	461a      	mov	r2, r3
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f7ff fc8f 	bl	800ab30 <UART_Start_Receive_DMA>
 800b212:	4603      	mov	r3, r0
 800b214:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b218:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d124      	bne.n	800b26a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b224:	2b01      	cmp	r3, #1
 800b226:	d11d      	bne.n	800b264 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2210      	movs	r2, #16
 800b22e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	617b      	str	r3, [r7, #20]
   return(result);
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	f043 0310 	orr.w	r3, r3, #16
 800b244:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b250:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	6a39      	ldr	r1, [r7, #32]
 800b254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b256:	e841 2300 	strex	r3, r2, [r1]
 800b25a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e6      	bne.n	800b230 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b262:	e002      	b.n	800b26a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b26a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b26e:	e000      	b.n	800b272 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b270:	2302      	movs	r3, #2
  }
}
 800b272:	4618      	mov	r0, r3
 800b274:	3730      	adds	r7, #48	@ 0x30
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d108      	bne.n	800b29e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b29c:	e031      	b.n	800b302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b29e:	2310      	movs	r3, #16
 800b2a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b2a2:	2310      	movs	r3, #16
 800b2a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	0e5b      	lsrs	r3, r3, #25
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	f003 0307 	and.w	r3, r3, #7
 800b2b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	0f5b      	lsrs	r3, r3, #29
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	f003 0307 	and.w	r3, r3, #7
 800b2c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	7b3a      	ldrb	r2, [r7, #12]
 800b2ca:	4911      	ldr	r1, [pc, #68]	@ (800b310 <UARTEx_SetNbDataToProcess+0x94>)
 800b2cc:	5c8a      	ldrb	r2, [r1, r2]
 800b2ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2d2:	7b3a      	ldrb	r2, [r7, #12]
 800b2d4:	490f      	ldr	r1, [pc, #60]	@ (800b314 <UARTEx_SetNbDataToProcess+0x98>)
 800b2d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
 800b2e6:	7b7a      	ldrb	r2, [r7, #13]
 800b2e8:	4909      	ldr	r1, [pc, #36]	@ (800b310 <UARTEx_SetNbDataToProcess+0x94>)
 800b2ea:	5c8a      	ldrb	r2, [r1, r2]
 800b2ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2f0:	7b7a      	ldrb	r2, [r7, #13]
 800b2f2:	4908      	ldr	r1, [pc, #32]	@ (800b314 <UARTEx_SetNbDataToProcess+0x98>)
 800b2f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b302:	bf00      	nop
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	0800eb60 	.word	0x0800eb60
 800b314:	0800eb68 	.word	0x0800eb68

0800b318 <Display_Init>:
static uint8_t  s_animation_current_frame = 0;
static uint32_t s_animation_last_update_tick = 0;
#define ANIMATION_FRAME_DELAY_MS 80 // Adjust for desired speed (milliseconds)

void Display_Init(UI_Screen_State_t screenState)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	4603      	mov	r3, r0
 800b320:	71fb      	strb	r3, [r7, #7]
	ST7789_Init();
 800b322:	f000 fba7 	bl	800ba74 <ST7789_Init>
	previous_screenState = screenState;
 800b326:	4a05      	ldr	r2, [pc, #20]	@ (800b33c <Display_Init+0x24>)
 800b328:	79fb      	ldrb	r3, [r7, #7]
 800b32a:	7013      	strb	r3, [r2, #0]
	current_screenState = screenState;
 800b32c:	4a04      	ldr	r2, [pc, #16]	@ (800b340 <Display_Init+0x28>)
 800b32e:	79fb      	ldrb	r3, [r7, #7]
 800b330:	7013      	strb	r3, [r2, #0]
}
 800b332:	bf00      	nop
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	240009d4 	.word	0x240009d4
 800b340:	240009d5 	.word	0x240009d5

0800b344 <split_color_array>:

//this shit is need to have the output image with the right color
void split_color_array(const uint16_t *input, uint8_t *output, size_t length)
{
 800b344:	b480      	push	{r7}
 800b346:	b087      	sub	sp, #28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
	for (size_t i = 0; i < length; ++i)
 800b350:	2300      	movs	r3, #0
 800b352:	617b      	str	r3, [r7, #20]
 800b354:	e01b      	b.n	800b38e <split_color_array+0x4a>
	{
		output[2 * i] = COLOR_HIGH_BYTE(input[i]);  // High byte first
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	005b      	lsls	r3, r3, #1
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	4413      	add	r3, r2
 800b35e:	881b      	ldrh	r3, [r3, #0]
 800b360:	0a1b      	lsrs	r3, r3, #8
 800b362:	b299      	uxth	r1, r3
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	4413      	add	r3, r2
 800b36c:	b2ca      	uxtb	r2, r1
 800b36e:	701a      	strb	r2, [r3, #0]
		output[2 * i + 1] = COLOR_LOW_BYTE(input[i]);   // Then low byte
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	005b      	lsls	r3, r3, #1
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	4413      	add	r3, r2
 800b378:	8819      	ldrh	r1, [r3, #0]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	005b      	lsls	r3, r3, #1
 800b37e:	3301      	adds	r3, #1
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	4413      	add	r3, r2
 800b384:	b2ca      	uxtb	r2, r1
 800b386:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; ++i)
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	3301      	adds	r3, #1
 800b38c:	617b      	str	r3, [r7, #20]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	429a      	cmp	r2, r3
 800b394:	d3df      	bcc.n	800b356 <split_color_array+0x12>
	}
}
 800b396:	bf00      	nop
 800b398:	bf00      	nop
 800b39a:	371c      	adds	r7, #28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <Display_Image>:

void Display_Image(uint16_t x_center, uint16_t y_center,uint16_t x_width, uint16_t y_width,const uint16_t *img,size_t pixel_count)
{
 800b3a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3a8:	b089      	sub	sp, #36	@ 0x24
 800b3aa:	af02      	add	r7, sp, #8
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	4608      	mov	r0, r1
 800b3b0:	4611      	mov	r1, r2
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4633      	mov	r3, r6
 800b3b6:	80fb      	strh	r3, [r7, #6]
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	80bb      	strh	r3, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	807b      	strh	r3, [r7, #2]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	803b      	strh	r3, [r7, #0]
 800b3c4:	466b      	mov	r3, sp
 800b3c6:	461e      	mov	r6, r3
	// We use the fixed size from the image data now
	uint16_t img_x = x_center - (x_width / 2);
 800b3c8:	887b      	ldrh	r3, [r7, #2]
 800b3ca:	085b      	lsrs	r3, r3, #1
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	88fa      	ldrh	r2, [r7, #6]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	82fb      	strh	r3, [r7, #22]
	uint16_t img_y = y_center - (y_width / 2);
 800b3d4:	883b      	ldrh	r3, [r7, #0]
 800b3d6:	085b      	lsrs	r3, r3, #1
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	88ba      	ldrh	r2, [r7, #4]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	82bb      	strh	r3, [r7, #20]

	uint8_t result[pixel_count * 2];
 800b3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3e2:	0059      	lsls	r1, r3, #1
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	613b      	str	r3, [r7, #16]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	4688      	mov	r8, r1
 800b3ee:	4699      	mov	r9, r3
 800b3f0:	f04f 0200 	mov.w	r2, #0
 800b3f4:	f04f 0300 	mov.w	r3, #0
 800b3f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b3fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b400:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b404:	2300      	movs	r3, #0
 800b406:	460c      	mov	r4, r1
 800b408:	461d      	mov	r5, r3
 800b40a:	f04f 0200 	mov.w	r2, #0
 800b40e:	f04f 0300 	mov.w	r3, #0
 800b412:	00eb      	lsls	r3, r5, #3
 800b414:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b418:	00e2      	lsls	r2, r4, #3
 800b41a:	1dcb      	adds	r3, r1, #7
 800b41c:	08db      	lsrs	r3, r3, #3
 800b41e:	00db      	lsls	r3, r3, #3
 800b420:	ebad 0d03 	sub.w	sp, sp, r3
 800b424:	ab02      	add	r3, sp, #8
 800b426:	3300      	adds	r3, #0
 800b428:	60fb      	str	r3, [r7, #12]

	//lenght of the array
	split_color_array(img, result,
 800b42a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b42c:	085b      	lsrs	r3, r3, #1
 800b42e:	461a      	mov	r2, r3
 800b430:	68f9      	ldr	r1, [r7, #12]
 800b432:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b434:	f7ff ff86 	bl	800b344 <split_color_array>
			pixel_count/ sizeof(uint16_t));

	ST7789_DrawImage(img_x, img_y, x_width, y_width, result);
 800b438:	883c      	ldrh	r4, [r7, #0]
 800b43a:	887a      	ldrh	r2, [r7, #2]
 800b43c:	8ab9      	ldrh	r1, [r7, #20]
 800b43e:	8af8      	ldrh	r0, [r7, #22]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	4623      	mov	r3, r4
 800b446:	f000 fbf5 	bl	800bc34 <ST7789_DrawImage>
 800b44a:	46b5      	mov	sp, r6
}
 800b44c:	bf00      	nop
 800b44e:	371c      	adds	r7, #28
 800b450:	46bd      	mov	sp, r7
 800b452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800b458 <Display_HeartRate>:
{
	Display_Image(x_center,y_center,thermometer_icon_width,thermometer_icon_height,thermometer_icon_data,sizeof(thermometer_icon_data) );
}

void Display_HeartRate(uint16_t x_center, uint16_t y_center,const SmartWatchData_t* pData)
{
 800b458:	b5b0      	push	{r4, r5, r7, lr}
 800b45a:	b098      	sub	sp, #96	@ 0x60
 800b45c:	af04      	add	r7, sp, #16
 800b45e:	4603      	mov	r3, r0
 800b460:	603a      	str	r2, [r7, #0]
 800b462:	80fb      	strh	r3, [r7, #6]
 800b464:	460b      	mov	r3, r1
 800b466:	80bb      	strh	r3, [r7, #4]
	uint8_t hr = SmartWatchData_handle.heart_rate;
 800b468:	4b2c      	ldr	r3, [pc, #176]	@ (800b51c <Display_HeartRate+0xc4>)
 800b46a:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	@ 0x104
 800b46e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint16_t spo2 = SmartWatchData_handle.spo2;
 800b472:	4b2a      	ldr	r3, [pc, #168]	@ (800b51c <Display_HeartRate+0xc4>)
 800b474:	edd3 7a42 	vldr	s15, [r3, #264]	@ 0x108
 800b478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b47c:	ee17 3a90 	vmov	r3, s15
 800b480:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

	char hr_buf[32];
	char spo2_buf[32];

	snprintf(hr_buf, sizeof(hr_buf), " HeartRate : %u", (unsigned) hr);
 800b484:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b488:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800b48c:	4a24      	ldr	r2, [pc, #144]	@ (800b520 <Display_HeartRate+0xc8>)
 800b48e:	2120      	movs	r1, #32
 800b490:	f001 f9ee 	bl	800c870 <sniprintf>
	snprintf(spo2_buf, sizeof(spo2_buf), " SPO2 : %u", (unsigned) spo2);
 800b494:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b498:	f107 0008 	add.w	r0, r7, #8
 800b49c:	4a21      	ldr	r2, [pc, #132]	@ (800b524 <Display_HeartRate+0xcc>)
 800b49e:	2120      	movs	r1, #32
 800b4a0:	f001 f9e6 	bl	800c870 <sniprintf>

	//space between lines of text
	int text_y_offset = 30;
 800b4a4:	231e      	movs	r3, #30
 800b4a6:	64bb      	str	r3, [r7, #72]	@ 0x48

	ST7789_WriteString(x_center, y_center , hr_buf, Font_11x18, RED, BLACK);
 800b4a8:	4b1f      	ldr	r3, [pc, #124]	@ (800b528 <Display_HeartRate+0xd0>)
 800b4aa:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b4ae:	88b9      	ldrh	r1, [r7, #4]
 800b4b0:	88f8      	ldrh	r0, [r7, #6]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	9202      	str	r2, [sp, #8]
 800b4b6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b4ba:	9201      	str	r2, [sp, #4]
 800b4bc:	685a      	ldr	r2, [r3, #4]
 800b4be:	9200      	str	r2, [sp, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	f000 fc88 	bl	800bdd8 <ST7789_WriteString>
	ST7789_WriteString(x_center, y_center + text_y_offset, spo2_buf, Font_11x18, RED, BLACK);
 800b4c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	88bb      	ldrh	r3, [r7, #4]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	b299      	uxth	r1, r3
 800b4d2:	4b15      	ldr	r3, [pc, #84]	@ (800b528 <Display_HeartRate+0xd0>)
 800b4d4:	f107 0408 	add.w	r4, r7, #8
 800b4d8:	88f8      	ldrh	r0, [r7, #6]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	9202      	str	r2, [sp, #8]
 800b4de:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b4e2:	9201      	str	r2, [sp, #4]
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	9200      	str	r2, [sp, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	f000 fc74 	bl	800bdd8 <ST7789_WriteString>


	Display_RenderAnimation(gif_center_x,gif_center_y,heart_animation_width,heart_animation_height,heart_gif_array,heart_gif_array_LEN,heart_gif_frame_pixel_count);
 800b4f0:	20a0      	movs	r0, #160	@ 0xa0
 800b4f2:	211e      	movs	r1, #30
 800b4f4:	2430      	movs	r4, #48	@ 0x30
 800b4f6:	2530      	movs	r5, #48	@ 0x30
 800b4f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b52c <Display_HeartRate+0xd4>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b530 <Display_HeartRate+0xd8>)
 800b500:	6812      	ldr	r2, [r2, #0]
 800b502:	9202      	str	r2, [sp, #8]
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	4b0b      	ldr	r3, [pc, #44]	@ (800b534 <Display_HeartRate+0xdc>)
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	462b      	mov	r3, r5
 800b50c:	4622      	mov	r2, r4
 800b50e:	f000 f8b3 	bl	800b678 <Display_RenderAnimation>
}
 800b512:	bf00      	nop
 800b514:	3750      	adds	r7, #80	@ 0x50
 800b516:	46bd      	mov	sp, r7
 800b518:	bdb0      	pop	{r4, r5, r7, pc}
 800b51a:	bf00      	nop
 800b51c:	240009dc 	.word	0x240009dc
 800b520:	0800ea38 	.word	0x0800ea38
 800b524:	0800ea48 	.word	0x0800ea48
 800b528:	24000094 	.word	0x24000094
 800b52c:	08034ad4 	.word	0x08034ad4
 800b530:	08034ad8 	.word	0x08034ad8
 800b534:	2400005c 	.word	0x2400005c

0800b538 <Display_EnvironnementData>:

void Display_EnvironnementData(uint16_t x, uint16_t y,const SmartWatchData_t* pData)
{
 800b538:	b5b0      	push	{r4, r5, r7, lr}
 800b53a:	b0a2      	sub	sp, #136	@ 0x88
 800b53c:	af04      	add	r7, sp, #16
 800b53e:	4603      	mov	r3, r0
 800b540:	603a      	str	r2, [r7, #0]
 800b542:	80fb      	strh	r3, [r7, #6]
 800b544:	460b      	mov	r3, r1
 800b546:	80bb      	strh	r3, [r7, #4]


	//uint8_t hr = SmartWatchData_handle.heart_rate;
	uint16_t temp = pData->temperature;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	edd3 7a00 	vldr	s15, [r3]
 800b54e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b552:	ee17 3a90 	vmov	r3, s15
 800b556:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint16_t pressure = pData->pressure;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b564:	ee17 3a90 	vmov	r3, s15
 800b568:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
	uint16_t humidity = pData->humidity;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b576:	ee17 3a90 	vmov	r3, s15
 800b57a:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72


	temp = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	//pressure = 0;
	humidity = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

	char buf_temp[32];
	char buf_pressure[32];
	char buf_humidity[32];

	snprintf(buf_temp, sizeof(buf_temp), " Temperature : %d", temp);
 800b58a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800b58e:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800b592:	4a32      	ldr	r2, [pc, #200]	@ (800b65c <Display_EnvironnementData+0x124>)
 800b594:	2120      	movs	r1, #32
 800b596:	f001 f96b 	bl	800c870 <sniprintf>
	snprintf(buf_pressure, sizeof(buf_pressure), " Pressure : %d", pressure);
 800b59a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800b59e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800b5a2:	4a2f      	ldr	r2, [pc, #188]	@ (800b660 <Display_EnvironnementData+0x128>)
 800b5a4:	2120      	movs	r1, #32
 800b5a6:	f001 f963 	bl	800c870 <sniprintf>
	snprintf(buf_humidity, sizeof(buf_humidity), " Humidity : %d", humidity);
 800b5aa:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800b5ae:	f107 000c 	add.w	r0, r7, #12
 800b5b2:	4a2c      	ldr	r2, [pc, #176]	@ (800b664 <Display_EnvironnementData+0x12c>)
 800b5b4:	2120      	movs	r1, #32
 800b5b6:	f001 f95b 	bl	800c870 <sniprintf>

	//space between lines of text
	int text_y_offset = 30;
 800b5ba:	231e      	movs	r3, #30
 800b5bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

	// no border checking so be careful when calling this
	ST7789_WriteString(x , y , buf_temp, Font_11x18, GREEN, BLACK);
 800b5be:	4b2a      	ldr	r3, [pc, #168]	@ (800b668 <Display_EnvironnementData+0x130>)
 800b5c0:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800b5c4:	88b9      	ldrh	r1, [r7, #4]
 800b5c6:	88f8      	ldrh	r0, [r7, #6]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	9202      	str	r2, [sp, #8]
 800b5cc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b5d0:	9201      	str	r2, [sp, #4]
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	9200      	str	r2, [sp, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4622      	mov	r2, r4
 800b5da:	f000 fbfd 	bl	800bdd8 <ST7789_WriteString>
	ST7789_WriteString(x , y + text_y_offset , buf_pressure, Font_11x18, GREEN, BLACK);
 800b5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	88bb      	ldrh	r3, [r7, #4]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	b299      	uxth	r1, r3
 800b5e8:	4b1f      	ldr	r3, [pc, #124]	@ (800b668 <Display_EnvironnementData+0x130>)
 800b5ea:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800b5ee:	88f8      	ldrh	r0, [r7, #6]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	9202      	str	r2, [sp, #8]
 800b5f4:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b5f8:	9201      	str	r2, [sp, #4]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	9200      	str	r2, [sp, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4622      	mov	r2, r4
 800b602:	f000 fbe9 	bl	800bdd8 <ST7789_WriteString>
	ST7789_WriteString(x , y + 2 * text_y_offset , buf_humidity, Font_11x18, GREEN, BLACK);
 800b606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b608:	b29b      	uxth	r3, r3
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	88bb      	ldrh	r3, [r7, #4]
 800b610:	4413      	add	r3, r2
 800b612:	b299      	uxth	r1, r3
 800b614:	4b14      	ldr	r3, [pc, #80]	@ (800b668 <Display_EnvironnementData+0x130>)
 800b616:	f107 040c 	add.w	r4, r7, #12
 800b61a:	88f8      	ldrh	r0, [r7, #6]
 800b61c:	2200      	movs	r2, #0
 800b61e:	9202      	str	r2, [sp, #8]
 800b620:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800b624:	9201      	str	r2, [sp, #4]
 800b626:	685a      	ldr	r2, [r3, #4]
 800b628:	9200      	str	r2, [sp, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4622      	mov	r2, r4
 800b62e:	f000 fbd3 	bl	800bdd8 <ST7789_WriteString>

//	Display_DrawThermo(x,y);
	Display_RenderAnimation(gif_center_x,gif_center_y,weather_animation_width,weather_animation_height,weather_gif_array,weather_gif_array_LEN,weather_gif_frame_pixel_count);
 800b632:	20a0      	movs	r0, #160	@ 0xa0
 800b634:	211e      	movs	r1, #30
 800b636:	2430      	movs	r4, #48	@ 0x30
 800b638:	2530      	movs	r5, #48	@ 0x30
 800b63a:	4b0c      	ldr	r3, [pc, #48]	@ (800b66c <Display_EnvironnementData+0x134>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	4a0b      	ldr	r2, [pc, #44]	@ (800b670 <Display_EnvironnementData+0x138>)
 800b642:	6812      	ldr	r2, [r2, #0]
 800b644:	9202      	str	r2, [sp, #8]
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	4b0a      	ldr	r3, [pc, #40]	@ (800b674 <Display_EnvironnementData+0x13c>)
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	462b      	mov	r3, r5
 800b64e:	4622      	mov	r2, r4
 800b650:	f000 f812 	bl	800b678 <Display_RenderAnimation>

}
 800b654:	bf00      	nop
 800b656:	3778      	adds	r7, #120	@ 0x78
 800b658:	46bd      	mov	sp, r7
 800b65a:	bdb0      	pop	{r4, r5, r7, pc}
 800b65c:	0800ea54 	.word	0x0800ea54
 800b660:	0800ea68 	.word	0x0800ea68
 800b664:	0800ea78 	.word	0x0800ea78
 800b668:	24000094 	.word	0x24000094
 800b66c:	08024ecc 	.word	0x08024ecc
 800b670:	08024ed0 	.word	0x08024ed0
 800b674:	24000010 	.word	0x24000010

0800b678 <Display_RenderAnimation>:

// --- Animation Function ---
// This function should be called repeatedly (e.g., from the main loop or Display_Update)
// when the animation needs to be displayed.
void Display_RenderAnimation(uint16_t x_center, uint16_t y_center,uint16_t x_width, uint16_t y_width,const uint16_t **frame_array,uint8_t animation_frame_array_len,size_t pixel_count)
{
 800b678:	b590      	push	{r4, r7, lr}
 800b67a:	b087      	sub	sp, #28
 800b67c:	af02      	add	r7, sp, #8
 800b67e:	4604      	mov	r4, r0
 800b680:	4608      	mov	r0, r1
 800b682:	4611      	mov	r1, r2
 800b684:	461a      	mov	r2, r3
 800b686:	4623      	mov	r3, r4
 800b688:	80fb      	strh	r3, [r7, #6]
 800b68a:	4603      	mov	r3, r0
 800b68c:	80bb      	strh	r3, [r7, #4]
 800b68e:	460b      	mov	r3, r1
 800b690:	807b      	strh	r3, [r7, #2]
 800b692:	4613      	mov	r3, r2
 800b694:	803b      	strh	r3, [r7, #0]
    uint32_t current_tick = HAL_GetTick();
 800b696:	f7f6 fb2b 	bl	8001cf0 <HAL_GetTick>
 800b69a:	60f8      	str	r0, [r7, #12]

    // Check if it's time to update the frame
    if (current_tick - s_animation_last_update_tick >= ANIMATION_FRAME_DELAY_MS) {
 800b69c:	4b16      	ldr	r3, [pc, #88]	@ (800b6f8 <Display_RenderAnimation+0x80>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b4f      	cmp	r3, #79	@ 0x4f
 800b6a6:	d923      	bls.n	800b6f0 <Display_RenderAnimation+0x78>
        s_animation_last_update_tick = current_tick;
 800b6a8:	4a13      	ldr	r2, [pc, #76]	@ (800b6f8 <Display_RenderAnimation+0x80>)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6013      	str	r3, [r2, #0]

        // Get the pointer to the current frame data
        const uint16_t* frame_data = frame_array[s_animation_current_frame];
 800b6ae:	4b13      	ldr	r3, [pc, #76]	@ (800b6fc <Display_RenderAnimation+0x84>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	6a3a      	ldr	r2, [r7, #32]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	60bb      	str	r3, [r7, #8]
    	Display_Image(x_center,y_center,x_width,y_width,frame_data,pixel_count );
 800b6bc:	883c      	ldrh	r4, [r7, #0]
 800b6be:	887a      	ldrh	r2, [r7, #2]
 800b6c0:	88b9      	ldrh	r1, [r7, #4]
 800b6c2:	88f8      	ldrh	r0, [r7, #6]
 800b6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c6:	9301      	str	r3, [sp, #4]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	4623      	mov	r3, r4
 800b6ce:	f7ff fe69 	bl	800b3a4 <Display_Image>

        // Advance to the next frame
        s_animation_current_frame++;
 800b6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6fc <Display_RenderAnimation+0x84>)
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	4b08      	ldr	r3, [pc, #32]	@ (800b6fc <Display_RenderAnimation+0x84>)
 800b6dc:	701a      	strb	r2, [r3, #0]
        if (s_animation_current_frame >= animation_frame_array_len) {
 800b6de:	4b07      	ldr	r3, [pc, #28]	@ (800b6fc <Display_RenderAnimation+0x84>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d802      	bhi.n	800b6f0 <Display_RenderAnimation+0x78>
            s_animation_current_frame = 0; // Loop back to the beginning
 800b6ea:	4b04      	ldr	r3, [pc, #16]	@ (800b6fc <Display_RenderAnimation+0x84>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	701a      	strb	r2, [r3, #0]
        }
    }
    // If not enough time has passed, do nothing, the previous frame remains displayed.
}
 800b6f0:	bf00      	nop
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd90      	pop	{r4, r7, pc}
 800b6f8:	240009d8 	.word	0x240009d8
 800b6fc:	240009d6 	.word	0x240009d6

0800b700 <Display_RenderClock>:


void Display_RenderClock(const SmartWatchData_t* pData)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]

}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <Display_RenderEnvironmental>:

void Display_RenderEnvironmental(const SmartWatchData_t* pData)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	Display_EnvironnementData(40,60,pData);
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	213c      	movs	r1, #60	@ 0x3c
 800b720:	2028      	movs	r0, #40	@ 0x28
 800b722:	f7ff ff09 	bl	800b538 <Display_EnvironnementData>
}
 800b726:	bf00      	nop
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <Display_RenderHeartRate>:


void Display_RenderHeartRate(const SmartWatchData_t* pData)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
	Display_HeartRate(40, 60, pData);
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	213c      	movs	r1, #60	@ 0x3c
 800b73a:	2028      	movs	r0, #40	@ 0x28
 800b73c:	f7ff fe8c 	bl	800b458 <Display_HeartRate>

}
 800b740:	bf00      	nop
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <Display_RenderGPS>:

void Display_RenderGPS(const SmartWatchData_t* pData)
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]

}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <Display_Update>:


// --- Update the main Display_Update function ---
void Display_Update(UI_Screen_State_t screen, const SmartWatchData_t* pData) {
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af04      	add	r7, sp, #16
 800b762:	4603      	mov	r3, r0
 800b764:	6039      	str	r1, [r7, #0]
 800b766:	71fb      	strb	r3, [r7, #7]

	previous_screenState = current_screenState;
 800b768:	4b25      	ldr	r3, [pc, #148]	@ (800b800 <Display_Update+0xa4>)
 800b76a:	781a      	ldrb	r2, [r3, #0]
 800b76c:	4b25      	ldr	r3, [pc, #148]	@ (800b804 <Display_Update+0xa8>)
 800b76e:	701a      	strb	r2, [r3, #0]
	current_screenState = screen;
 800b770:	4a23      	ldr	r2, [pc, #140]	@ (800b800 <Display_Update+0xa4>)
 800b772:	79fb      	ldrb	r3, [r7, #7]
 800b774:	7013      	strb	r3, [r2, #0]
    // OPTIONAL: Clear screen only when changing screen state, not every frame of animation.
    if (current_screenState != previous_screenState) {
 800b776:	4b22      	ldr	r3, [pc, #136]	@ (800b800 <Display_Update+0xa4>)
 800b778:	781a      	ldrb	r2, [r3, #0]
 800b77a:	4b22      	ldr	r3, [pc, #136]	@ (800b804 <Display_Update+0xa8>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d00a      	beq.n	800b798 <Display_Update+0x3c>
        ST7789_Fill_Color(BLACK); // Clear only when screen changes
 800b782:	2000      	movs	r0, #0
 800b784:	f000 fa20 	bl	800bbc8 <ST7789_Fill_Color>
        s_animation_current_frame = 0; // Reset animation frame when switching to it
 800b788:	4b1f      	ldr	r3, [pc, #124]	@ (800b808 <Display_Update+0xac>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	701a      	strb	r2, [r3, #0]
        s_animation_last_update_tick = HAL_GetTick(); // Reset timer to draw first frame immediately
 800b78e:	f7f6 faaf 	bl	8001cf0 <HAL_GetTick>
 800b792:	4603      	mov	r3, r0
 800b794:	4a1d      	ldr	r2, [pc, #116]	@ (800b80c <Display_Update+0xb0>)
 800b796:	6013      	str	r3, [r2, #0]
    }

    switch (screen) {
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d81c      	bhi.n	800b7d8 <Display_Update+0x7c>
 800b79e:	a201      	add	r2, pc, #4	@ (adr r2, 800b7a4 <Display_Update+0x48>)
 800b7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a4:	0800b7b9 	.word	0x0800b7b9
 800b7a8:	0800b7c1 	.word	0x0800b7c1
 800b7ac:	0800b7d9 	.word	0x0800b7d9
 800b7b0:	0800b7c9 	.word	0x0800b7c9
 800b7b4:	0800b7d1 	.word	0x0800b7d1
        case SCREEN_CLOCK:
            Display_RenderClock(pData);
 800b7b8:	6838      	ldr	r0, [r7, #0]
 800b7ba:	f7ff ffa1 	bl	800b700 <Display_RenderClock>
            break;
 800b7be:	e01a      	b.n	800b7f6 <Display_Update+0x9a>
        case SCREEN_ENVIRONMENTAL:
            Display_RenderEnvironmental(pData);
 800b7c0:	6838      	ldr	r0, [r7, #0]
 800b7c2:	f7ff ffa7 	bl	800b714 <Display_RenderEnvironmental>
            break;
 800b7c6:	e016      	b.n	800b7f6 <Display_Update+0x9a>
        case SCREEN_HEART_RATE: // Example: Show static heart + text here
             Display_RenderHeartRate(pData); // Assuming this renders text + static heart
 800b7c8:	6838      	ldr	r0, [r7, #0]
 800b7ca:	f7ff ffb0 	bl	800b72e <Display_RenderHeartRate>
             break;
 800b7ce:	e012      	b.n	800b7f6 <Display_Update+0x9a>
        case SCREEN_GPS_STATUS:
            Display_RenderGPS(pData);
 800b7d0:	6838      	ldr	r0, [r7, #0]
 800b7d2:	f7ff ffb9 	bl	800b748 <Display_RenderGPS>
            break;
 800b7d6:	e00e      	b.n	800b7f6 <Display_Update+0x9a>

        // ... other cases ...
        default:
            ST7789_WriteString(30, 20, "Unknown Screen", Font_11x18, RED, BLACK);
 800b7d8:	4b0d      	ldr	r3, [pc, #52]	@ (800b810 <Display_Update+0xb4>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	9202      	str	r2, [sp, #8]
 800b7de:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800b7e2:	9201      	str	r2, [sp, #4]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	9200      	str	r2, [sp, #0]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a0a      	ldr	r2, [pc, #40]	@ (800b814 <Display_Update+0xb8>)
 800b7ec:	2114      	movs	r1, #20
 800b7ee:	201e      	movs	r0, #30
 800b7f0:	f000 faf2 	bl	800bdd8 <ST7789_WriteString>
            break;
 800b7f4:	bf00      	nop
    }
}
 800b7f6:	bf00      	nop
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	240009d5 	.word	0x240009d5
 800b804:	240009d4 	.word	0x240009d4
 800b808:	240009d6 	.word	0x240009d6
 800b80c:	240009d8 	.word	0x240009d8
 800b810:	24000094 	.word	0x24000094
 800b814:	0800ea88 	.word	0x0800ea88

0800b818 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800b822:	2200      	movs	r2, #0
 800b824:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b828:	480c      	ldr	r0, [pc, #48]	@ (800b85c <ST7789_WriteCommand+0x44>)
 800b82a:	f7f9 fcb3 	bl	8005194 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 800b82e:	2200      	movs	r2, #0
 800b830:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b834:	480a      	ldr	r0, [pc, #40]	@ (800b860 <ST7789_WriteCommand+0x48>)
 800b836:	f7f9 fcad 	bl	8005194 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800b83a:	1df9      	adds	r1, r7, #7
 800b83c:	f04f 33ff 	mov.w	r3, #4294967295
 800b840:	2201      	movs	r2, #1
 800b842:	4808      	ldr	r0, [pc, #32]	@ (800b864 <ST7789_WriteCommand+0x4c>)
 800b844:	f7fc fd2a 	bl	800829c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800b848:	2201      	movs	r2, #1
 800b84a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b84e:	4803      	ldr	r0, [pc, #12]	@ (800b85c <ST7789_WriteCommand+0x44>)
 800b850:	f7f9 fca0 	bl	8005194 <HAL_GPIO_WritePin>
}
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	58021800 	.word	0x58021800
 800b860:	58020c00 	.word	0x58020c00
 800b864:	24000430 	.word	0x24000430

0800b868 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 800b872:	2200      	movs	r2, #0
 800b874:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b878:	4820      	ldr	r0, [pc, #128]	@ (800b8fc <ST7789_WriteData+0x94>)
 800b87a:	f7f9 fc8b 	bl	8005194 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800b87e:	2201      	movs	r2, #1
 800b880:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b884:	481e      	ldr	r0, [pc, #120]	@ (800b900 <ST7789_WriteData+0x98>)
 800b886:	f7f9 fc85 	bl	8005194 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800b88a:	e02a      	b.n	800b8e2 <ST7789_WriteData+0x7a>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b892:	4293      	cmp	r3, r2
 800b894:	bf28      	it	cs
 800b896:	4613      	movcs	r3, r2
 800b898:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 800b89a:	4b1a      	ldr	r3, [pc, #104]	@ (800b904 <ST7789_WriteData+0x9c>)
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d30e      	bcc.n	800b8c4 <ST7789_WriteData+0x5c>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 800b8a6:	89fb      	ldrh	r3, [r7, #14]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	6879      	ldr	r1, [r7, #4]
 800b8ac:	4816      	ldr	r0, [pc, #88]	@ (800b908 <ST7789_WriteData+0xa0>)
 800b8ae:	f7fc fee3 	bl	8008678 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 800b8b2:	bf00      	nop
 800b8b4:	4b14      	ldr	r3, [pc, #80]	@ (800b908 <ST7789_WriteData+0xa0>)
 800b8b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d1f8      	bne.n	800b8b4 <ST7789_WriteData+0x4c>
 800b8c2:	e006      	b.n	800b8d2 <ST7789_WriteData+0x6a>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800b8c4:	89fa      	ldrh	r2, [r7, #14]
 800b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ca:	6879      	ldr	r1, [r7, #4]
 800b8cc:	480e      	ldr	r0, [pc, #56]	@ (800b908 <ST7789_WriteData+0xa0>)
 800b8ce:	f7fc fce5 	bl	800829c <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 800b8d2:	89fb      	ldrh	r3, [r7, #14]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800b8da:	89fb      	ldrh	r3, [r7, #14]
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1d1      	bne.n	800b88c <ST7789_WriteData+0x24>
	}

	ST7789_UnSelect();
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b8ee:	4803      	ldr	r0, [pc, #12]	@ (800b8fc <ST7789_WriteData+0x94>)
 800b8f0:	f7f9 fc50 	bl	8005194 <HAL_GPIO_WritePin>
}
 800b8f4:	bf00      	nop
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	58021800 	.word	0x58021800
 800b900:	58020c00 	.word	0x58020c00
 800b904:	2400009c 	.word	0x2400009c
 800b908:	24000430 	.word	0x24000430

0800b90c <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	4603      	mov	r3, r0
 800b914:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800b916:	2200      	movs	r2, #0
 800b918:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b91c:	480c      	ldr	r0, [pc, #48]	@ (800b950 <ST7789_WriteSmallData+0x44>)
 800b91e:	f7f9 fc39 	bl	8005194 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800b922:	2201      	movs	r2, #1
 800b924:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b928:	480a      	ldr	r0, [pc, #40]	@ (800b954 <ST7789_WriteSmallData+0x48>)
 800b92a:	f7f9 fc33 	bl	8005194 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800b92e:	1df9      	adds	r1, r7, #7
 800b930:	f04f 33ff 	mov.w	r3, #4294967295
 800b934:	2201      	movs	r2, #1
 800b936:	4808      	ldr	r0, [pc, #32]	@ (800b958 <ST7789_WriteSmallData+0x4c>)
 800b938:	f7fc fcb0 	bl	800829c <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800b93c:	2201      	movs	r2, #1
 800b93e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b942:	4803      	ldr	r0, [pc, #12]	@ (800b950 <ST7789_WriteSmallData+0x44>)
 800b944:	f7f9 fc26 	bl	8005194 <HAL_GPIO_WritePin>
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	58021800 	.word	0x58021800
 800b954:	58020c00 	.word	0x58020c00
 800b958:	24000430 	.word	0x24000430

0800b95c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800b966:	2036      	movs	r0, #54	@ 0x36
 800b968:	f7ff ff56 	bl	800b818 <ST7789_WriteCommand>
	switch (m) {
 800b96c:	79fb      	ldrb	r3, [r7, #7]
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d81a      	bhi.n	800b9a8 <ST7789_SetRotation+0x4c>
 800b972:	a201      	add	r2, pc, #4	@ (adr r2, 800b978 <ST7789_SetRotation+0x1c>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b989 	.word	0x0800b989
 800b97c:	0800b991 	.word	0x0800b991
 800b980:	0800b999 	.word	0x0800b999
 800b984:	0800b9a1 	.word	0x0800b9a1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 800b988:	20c0      	movs	r0, #192	@ 0xc0
 800b98a:	f7ff ffbf 	bl	800b90c <ST7789_WriteSmallData>
		break;
 800b98e:	e00c      	b.n	800b9aa <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800b990:	20a0      	movs	r0, #160	@ 0xa0
 800b992:	f7ff ffbb 	bl	800b90c <ST7789_WriteSmallData>
		break;
 800b996:	e008      	b.n	800b9aa <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 800b998:	2000      	movs	r0, #0
 800b99a:	f7ff ffb7 	bl	800b90c <ST7789_WriteSmallData>
		break;
 800b99e:	e004      	b.n	800b9aa <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800b9a0:	2060      	movs	r0, #96	@ 0x60
 800b9a2:	f7ff ffb3 	bl	800b90c <ST7789_WriteSmallData>
		break;
 800b9a6:	e000      	b.n	800b9aa <ST7789_SetRotation+0x4e>
	default:
		break;
 800b9a8:	bf00      	nop
	}
}
 800b9aa:	bf00      	nop
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop

0800b9b4 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800b9b4:	b590      	push	{r4, r7, lr}
 800b9b6:	b087      	sub	sp, #28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	4611      	mov	r1, r2
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	4623      	mov	r3, r4
 800b9c4:	80fb      	strh	r3, [r7, #6]
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	80bb      	strh	r3, [r7, #4]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	807b      	strh	r3, [r7, #2]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b9d8:	4825      	ldr	r0, [pc, #148]	@ (800ba70 <ST7789_SetAddressWindow+0xbc>)
 800b9da:	f7f9 fbdb 	bl	8005194 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800b9de:	88fb      	ldrh	r3, [r7, #6]
 800b9e0:	82fb      	strh	r3, [r7, #22]
 800b9e2:	887b      	ldrh	r3, [r7, #2]
 800b9e4:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800b9e6:	88bb      	ldrh	r3, [r7, #4]
 800b9e8:	3323      	adds	r3, #35	@ 0x23
 800b9ea:	827b      	strh	r3, [r7, #18]
 800b9ec:	883b      	ldrh	r3, [r7, #0]
 800b9ee:	3323      	adds	r3, #35	@ 0x23
 800b9f0:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800b9f2:	202a      	movs	r0, #42	@ 0x2a
 800b9f4:	f7ff ff10 	bl	800b818 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800b9f8:	8afb      	ldrh	r3, [r7, #22]
 800b9fa:	0a1b      	lsrs	r3, r3, #8
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	733b      	strb	r3, [r7, #12]
 800ba02:	8afb      	ldrh	r3, [r7, #22]
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	737b      	strb	r3, [r7, #13]
 800ba08:	8abb      	ldrh	r3, [r7, #20]
 800ba0a:	0a1b      	lsrs	r3, r3, #8
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	73bb      	strb	r3, [r7, #14]
 800ba12:	8abb      	ldrh	r3, [r7, #20]
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800ba18:	f107 030c 	add.w	r3, r7, #12
 800ba1c:	2104      	movs	r1, #4
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff ff22 	bl	800b868 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800ba24:	202b      	movs	r0, #43	@ 0x2b
 800ba26:	f7ff fef7 	bl	800b818 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800ba2a:	8a7b      	ldrh	r3, [r7, #18]
 800ba2c:	0a1b      	lsrs	r3, r3, #8
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	723b      	strb	r3, [r7, #8]
 800ba34:	8a7b      	ldrh	r3, [r7, #18]
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	727b      	strb	r3, [r7, #9]
 800ba3a:	8a3b      	ldrh	r3, [r7, #16]
 800ba3c:	0a1b      	lsrs	r3, r3, #8
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	72bb      	strb	r3, [r7, #10]
 800ba44:	8a3b      	ldrh	r3, [r7, #16]
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800ba4a:	f107 0308 	add.w	r3, r7, #8
 800ba4e:	2104      	movs	r1, #4
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff ff09 	bl	800b868 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800ba56:	202c      	movs	r0, #44	@ 0x2c
 800ba58:	f7ff fede 	bl	800b818 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ba62:	4803      	ldr	r0, [pc, #12]	@ (800ba70 <ST7789_SetAddressWindow+0xbc>)
 800ba64:	f7f9 fb96 	bl	8005194 <HAL_GPIO_WritePin>
}
 800ba68:	bf00      	nop
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd90      	pop	{r4, r7, pc}
 800ba70:	58021800 	.word	0x58021800

0800ba74 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 800ba74:	b590      	push	{r4, r7, lr}
 800ba76:	b08b      	sub	sp, #44	@ 0x2c
 800ba78:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 800ba7a:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800ba7e:	2100      	movs	r1, #0
 800ba80:	484c      	ldr	r0, [pc, #304]	@ (800bbb4 <ST7789_Init+0x140>)
 800ba82:	f000 ff6e 	bl	800c962 <memset>
	#endif
	HAL_Delay(10);
 800ba86:	200a      	movs	r0, #10
 800ba88:	f7f6 f93e 	bl	8001d08 <HAL_Delay>
    ST7789_RST_Clr();
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ba92:	4849      	ldr	r0, [pc, #292]	@ (800bbb8 <ST7789_Init+0x144>)
 800ba94:	f7f9 fb7e 	bl	8005194 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800ba98:	200a      	movs	r0, #10
 800ba9a:	f7f6 f935 	bl	8001d08 <HAL_Delay>
    ST7789_RST_Set();
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800baa4:	4844      	ldr	r0, [pc, #272]	@ (800bbb8 <ST7789_Init+0x144>)
 800baa6:	f7f9 fb75 	bl	8005194 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800baaa:	2014      	movs	r0, #20
 800baac:	f7f6 f92c 	bl	8001d08 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 800bab0:	203a      	movs	r0, #58	@ 0x3a
 800bab2:	f7ff feb1 	bl	800b818 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800bab6:	2055      	movs	r0, #85	@ 0x55
 800bab8:	f7ff ff28 	bl	800b90c <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800babc:	20b2      	movs	r0, #178	@ 0xb2
 800babe:	f7ff feab 	bl	800b818 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800bac2:	4a3e      	ldr	r2, [pc, #248]	@ (800bbbc <ST7789_Init+0x148>)
 800bac4:	f107 0320 	add.w	r3, r7, #32
 800bac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bacc:	6018      	str	r0, [r3, #0]
 800bace:	3304      	adds	r3, #4
 800bad0:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800bad2:	f107 0320 	add.w	r3, r7, #32
 800bad6:	2105      	movs	r1, #5
 800bad8:	4618      	mov	r0, r3
 800bada:	f7ff fec5 	bl	800b868 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 800bade:	2003      	movs	r0, #3
 800bae0:	f7ff ff3c 	bl	800b95c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 800bae4:	20b7      	movs	r0, #183	@ 0xb7
 800bae6:	f7ff fe97 	bl	800b818 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800baea:	2035      	movs	r0, #53	@ 0x35
 800baec:	f7ff ff0e 	bl	800b90c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 800baf0:	20bb      	movs	r0, #187	@ 0xbb
 800baf2:	f7ff fe91 	bl	800b818 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800baf6:	2019      	movs	r0, #25
 800baf8:	f7ff ff08 	bl	800b90c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800bafc:	20c0      	movs	r0, #192	@ 0xc0
 800bafe:	f7ff fe8b 	bl	800b818 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800bb02:	202c      	movs	r0, #44	@ 0x2c
 800bb04:	f7ff ff02 	bl	800b90c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 800bb08:	20c2      	movs	r0, #194	@ 0xc2
 800bb0a:	f7ff fe85 	bl	800b818 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 800bb0e:	2001      	movs	r0, #1
 800bb10:	f7ff fefc 	bl	800b90c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 800bb14:	20c3      	movs	r0, #195	@ 0xc3
 800bb16:	f7ff fe7f 	bl	800b818 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800bb1a:	2012      	movs	r0, #18
 800bb1c:	f7ff fef6 	bl	800b90c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 800bb20:	20c4      	movs	r0, #196	@ 0xc4
 800bb22:	f7ff fe79 	bl	800b818 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800bb26:	2020      	movs	r0, #32
 800bb28:	f7ff fef0 	bl	800b90c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 800bb2c:	20c6      	movs	r0, #198	@ 0xc6
 800bb2e:	f7ff fe73 	bl	800b818 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800bb32:	200f      	movs	r0, #15
 800bb34:	f7ff feea 	bl	800b90c <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 800bb38:	20d0      	movs	r0, #208	@ 0xd0
 800bb3a:	f7ff fe6d 	bl	800b818 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 800bb3e:	20a4      	movs	r0, #164	@ 0xa4
 800bb40:	f7ff fee4 	bl	800b90c <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 800bb44:	20a1      	movs	r0, #161	@ 0xa1
 800bb46:	f7ff fee1 	bl	800b90c <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800bb4a:	20e0      	movs	r0, #224	@ 0xe0
 800bb4c:	f7ff fe64 	bl	800b818 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 800bb50:	4b1b      	ldr	r3, [pc, #108]	@ (800bbc0 <ST7789_Init+0x14c>)
 800bb52:	f107 0410 	add.w	r4, r7, #16
 800bb56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb58:	c407      	stmia	r4!, {r0, r1, r2}
 800bb5a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800bb5c:	f107 0310 	add.w	r3, r7, #16
 800bb60:	210e      	movs	r1, #14
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff fe80 	bl	800b868 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800bb68:	20e1      	movs	r0, #225	@ 0xe1
 800bb6a:	f7ff fe55 	bl	800b818 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 800bb6e:	4b15      	ldr	r3, [pc, #84]	@ (800bbc4 <ST7789_Init+0x150>)
 800bb70:	463c      	mov	r4, r7
 800bb72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb74:	c407      	stmia	r4!, {r0, r1, r2}
 800bb76:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800bb78:	463b      	mov	r3, r7
 800bb7a:	210e      	movs	r1, #14
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7ff fe73 	bl	800b868 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800bb82:	2021      	movs	r0, #33	@ 0x21
 800bb84:	f7ff fe48 	bl	800b818 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 800bb88:	2011      	movs	r0, #17
 800bb8a:	f7ff fe45 	bl	800b818 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 800bb8e:	2013      	movs	r0, #19
 800bb90:	f7ff fe42 	bl	800b818 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 800bb94:	2029      	movs	r0, #41	@ 0x29
 800bb96:	f7ff fe3f 	bl	800b818 <ST7789_WriteCommand>

	HAL_Delay(50);
 800bb9a:	2032      	movs	r0, #50	@ 0x32
 800bb9c:	f7f6 f8b4 	bl	8001d08 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 800bba0:	2000      	movs	r0, #0
 800bba2:	f000 f811 	bl	800bbc8 <ST7789_Fill_Color>
	HAL_Delay(50);
 800bba6:	2032      	movs	r0, #50	@ 0x32
 800bba8:	f7f6 f8ae 	bl	8001d08 <HAL_Delay>

}
 800bbac:	bf00      	nop
 800bbae:	372c      	adds	r7, #44	@ 0x2c
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd90      	pop	{r4, r7, pc}
 800bbb4:	24000b98 	.word	0x24000b98
 800bbb8:	58020c00 	.word	0x58020c00
 800bbbc:	0800ea98 	.word	0x0800ea98
 800bbc0:	0800eaa0 	.word	0x0800eaa0
 800bbc4:	0800eab0 	.word	0x0800eab0

0800bbc8 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 800bbd2:	23a9      	movs	r3, #169	@ 0xa9
 800bbd4:	f240 123f 	movw	r2, #319	@ 0x13f
 800bbd8:	2100      	movs	r1, #0
 800bbda:	2000      	movs	r0, #0
 800bbdc:	f7ff feea 	bl	800b9b4 <ST7789_SetAddressWindow>
	ST7789_Select();
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bbe6:	4811      	ldr	r0, [pc, #68]	@ (800bc2c <ST7789_Fill_Color+0x64>)
 800bbe8:	f7f9 fad4 	bl	8005194 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800bbec:	2300      	movs	r3, #0
 800bbee:	81fb      	strh	r3, [r7, #14]
 800bbf0:	e00e      	b.n	800bc10 <ST7789_Fill_Color+0x48>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 800bbf2:	88fb      	ldrh	r3, [r7, #6]
 800bbf4:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	480d      	ldr	r0, [pc, #52]	@ (800bc30 <ST7789_Fill_Color+0x68>)
 800bbfc:	f000 feb1 	bl	800c962 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 800bc00:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 800bc04:	480a      	ldr	r0, [pc, #40]	@ (800bc30 <ST7789_Fill_Color+0x68>)
 800bc06:	f7ff fe2f 	bl	800b868 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800bc0a:	89fb      	ldrh	r3, [r7, #14]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	81fb      	strh	r3, [r7, #14]
 800bc10:	89fb      	ldrh	r3, [r7, #14]
 800bc12:	2b21      	cmp	r3, #33	@ 0x21
 800bc14:	d9ed      	bls.n	800bbf2 <ST7789_Fill_Color+0x2a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 800bc16:	2201      	movs	r2, #1
 800bc18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc1c:	4803      	ldr	r0, [pc, #12]	@ (800bc2c <ST7789_Fill_Color+0x64>)
 800bc1e:	f7f9 fab9 	bl	8005194 <HAL_GPIO_WritePin>
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	58021800 	.word	0x58021800
 800bc30:	24000b98 	.word	0x24000b98

0800bc34 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 800bc34:	b590      	push	{r4, r7, lr}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	4608      	mov	r0, r1
 800bc3e:	4611      	mov	r1, r2
 800bc40:	461a      	mov	r2, r3
 800bc42:	4623      	mov	r3, r4
 800bc44:	80fb      	strh	r3, [r7, #6]
 800bc46:	4603      	mov	r3, r0
 800bc48:	80bb      	strh	r3, [r7, #4]
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	807b      	strh	r3, [r7, #2]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 800bc52:	88fb      	ldrh	r3, [r7, #6]
 800bc54:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800bc58:	d234      	bcs.n	800bcc4 <ST7789_DrawImage+0x90>
 800bc5a:	88bb      	ldrh	r3, [r7, #4]
 800bc5c:	2ba9      	cmp	r3, #169	@ 0xa9
 800bc5e:	d831      	bhi.n	800bcc4 <ST7789_DrawImage+0x90>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 800bc60:	88fa      	ldrh	r2, [r7, #6]
 800bc62:	887b      	ldrh	r3, [r7, #2]
 800bc64:	4413      	add	r3, r2
 800bc66:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800bc6a:	dc2d      	bgt.n	800bcc8 <ST7789_DrawImage+0x94>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 800bc6c:	88ba      	ldrh	r2, [r7, #4]
 800bc6e:	883b      	ldrh	r3, [r7, #0]
 800bc70:	4413      	add	r3, r2
 800bc72:	2baa      	cmp	r3, #170	@ 0xaa
 800bc74:	dc2a      	bgt.n	800bccc <ST7789_DrawImage+0x98>
		return;

	ST7789_Select();
 800bc76:	2200      	movs	r2, #0
 800bc78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc7c:	4815      	ldr	r0, [pc, #84]	@ (800bcd4 <ST7789_DrawImage+0xa0>)
 800bc7e:	f7f9 fa89 	bl	8005194 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800bc82:	88fa      	ldrh	r2, [r7, #6]
 800bc84:	887b      	ldrh	r3, [r7, #2]
 800bc86:	4413      	add	r3, r2
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b29c      	uxth	r4, r3
 800bc8e:	88ba      	ldrh	r2, [r7, #4]
 800bc90:	883b      	ldrh	r3, [r7, #0]
 800bc92:	4413      	add	r3, r2
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	3b01      	subs	r3, #1
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	88b9      	ldrh	r1, [r7, #4]
 800bc9c:	88f8      	ldrh	r0, [r7, #6]
 800bc9e:	4622      	mov	r2, r4
 800bca0:	f7ff fe88 	bl	800b9b4 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 800bca4:	887b      	ldrh	r3, [r7, #2]
 800bca6:	883a      	ldrh	r2, [r7, #0]
 800bca8:	fb02 f303 	mul.w	r3, r2, r3
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	4619      	mov	r1, r3
 800bcb0:	69b8      	ldr	r0, [r7, #24]
 800bcb2:	f7ff fdd9 	bl	800b868 <ST7789_WriteData>
	ST7789_UnSelect();
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bcbc:	4805      	ldr	r0, [pc, #20]	@ (800bcd4 <ST7789_DrawImage+0xa0>)
 800bcbe:	f7f9 fa69 	bl	8005194 <HAL_GPIO_WritePin>
 800bcc2:	e004      	b.n	800bcce <ST7789_DrawImage+0x9a>
		return;
 800bcc4:	bf00      	nop
 800bcc6:	e002      	b.n	800bcce <ST7789_DrawImage+0x9a>
		return;
 800bcc8:	bf00      	nop
 800bcca:	e000      	b.n	800bcce <ST7789_DrawImage+0x9a>
		return;
 800bccc:	bf00      	nop
}
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd90      	pop	{r4, r7, pc}
 800bcd4:	58021800 	.word	0x58021800

0800bcd8 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800bcd8:	b082      	sub	sp, #8
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b088      	sub	sp, #32
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bce2:	4603      	mov	r3, r0
 800bce4:	80fb      	strh	r3, [r7, #6]
 800bce6:	460b      	mov	r3, r1
 800bce8:	80bb      	strh	r3, [r7, #4]
 800bcea:	4613      	mov	r3, r2
 800bcec:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bcf4:	4837      	ldr	r0, [pc, #220]	@ (800bdd4 <ST7789_WriteChar+0xfc>)
 800bcf6:	f7f9 fa4d 	bl	8005194 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800bcfa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bcfe:	461a      	mov	r2, r3
 800bd00:	88fb      	ldrh	r3, [r7, #6]
 800bd02:	4413      	add	r3, r2
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	3b01      	subs	r3, #1
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800bd0e:	4619      	mov	r1, r3
 800bd10:	88bb      	ldrh	r3, [r7, #4]
 800bd12:	440b      	add	r3, r1
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	3b01      	subs	r3, #1
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	88b9      	ldrh	r1, [r7, #4]
 800bd1c:	88f8      	ldrh	r0, [r7, #6]
 800bd1e:	f7ff fe49 	bl	800b9b4 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800bd22:	2300      	movs	r3, #0
 800bd24:	61fb      	str	r3, [r7, #28]
 800bd26:	e041      	b.n	800bdac <ST7789_WriteChar+0xd4>
		b = font.data[(ch - 32) * font.height + i];
 800bd28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd2a:	78fb      	ldrb	r3, [r7, #3]
 800bd2c:	3b20      	subs	r3, #32
 800bd2e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800bd32:	fb01 f303 	mul.w	r3, r1, r3
 800bd36:	4619      	mov	r1, r3
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	440b      	add	r3, r1
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	4413      	add	r3, r2
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800bd44:	2300      	movs	r3, #0
 800bd46:	61bb      	str	r3, [r7, #24]
 800bd48:	e027      	b.n	800bd9a <ST7789_WriteChar+0xc2>
			if ((b << j) & 0x8000) {
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00e      	beq.n	800bd78 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 800bd5a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bd5c:	0a1b      	lsrs	r3, r3, #8
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	743b      	strb	r3, [r7, #16]
 800bd64:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 800bd6a:	f107 0310 	add.w	r3, r7, #16
 800bd6e:	2102      	movs	r1, #2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fd79 	bl	800b868 <ST7789_WriteData>
 800bd76:	e00d      	b.n	800bd94 <ST7789_WriteChar+0xbc>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 800bd78:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800bd7a:	0a1b      	lsrs	r3, r3, #8
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	733b      	strb	r3, [r7, #12]
 800bd82:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 800bd88:	f107 030c 	add.w	r3, r7, #12
 800bd8c:	2102      	movs	r1, #2
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff fd6a 	bl	800b868 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	3301      	adds	r3, #1
 800bd98:	61bb      	str	r3, [r7, #24]
 800bd9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bd9e:	461a      	mov	r2, r3
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d3d1      	bcc.n	800bd4a <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	61fb      	str	r3, [r7, #28]
 800bdac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d3b7      	bcc.n	800bd28 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bdbe:	4805      	ldr	r0, [pc, #20]	@ (800bdd4 <ST7789_WriteChar+0xfc>)
 800bdc0:	f7f9 f9e8 	bl	8005194 <HAL_GPIO_WritePin>
}
 800bdc4:	bf00      	nop
 800bdc6:	3720      	adds	r7, #32
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdce:	b002      	add	sp, #8
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	58021800 	.word	0x58021800

0800bdd8 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800bdd8:	b082      	sub	sp, #8
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b086      	sub	sp, #24
 800bdde:	af04      	add	r7, sp, #16
 800bde0:	603a      	str	r2, [r7, #0]
 800bde2:	617b      	str	r3, [r7, #20]
 800bde4:	4603      	mov	r3, r0
 800bde6:	80fb      	strh	r3, [r7, #6]
 800bde8:	460b      	mov	r3, r1
 800bdea:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 800bdec:	2200      	movs	r2, #0
 800bdee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bdf2:	4823      	ldr	r0, [pc, #140]	@ (800be80 <ST7789_WriteString+0xa8>)
 800bdf4:	f7f9 f9ce 	bl	8005194 <HAL_GPIO_WritePin>
	while (*str) {
 800bdf8:	e02e      	b.n	800be58 <ST7789_WriteString+0x80>
		if (x + font.width >= ST7789_WIDTH) {
 800bdfa:	88fb      	ldrh	r3, [r7, #6]
 800bdfc:	7d3a      	ldrb	r2, [r7, #20]
 800bdfe:	4413      	add	r3, r2
 800be00:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800be04:	db13      	blt.n	800be2e <ST7789_WriteString+0x56>
			x = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800be0a:	7d7b      	ldrb	r3, [r7, #21]
 800be0c:	461a      	mov	r2, r3
 800be0e:	88bb      	ldrh	r3, [r7, #4]
 800be10:	4413      	add	r3, r2
 800be12:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 800be14:	88bb      	ldrh	r3, [r7, #4]
 800be16:	7d7a      	ldrb	r2, [r7, #21]
 800be18:	4413      	add	r3, r2
 800be1a:	2ba9      	cmp	r3, #169	@ 0xa9
 800be1c:	dc21      	bgt.n	800be62 <ST7789_WriteString+0x8a>
				break;
			}

			if (*str == ' ') {
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	2b20      	cmp	r3, #32
 800be24:	d103      	bne.n	800be2e <ST7789_WriteString+0x56>
				// skip spaces in the beginning of the new line
				str++;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	3301      	adds	r3, #1
 800be2a:	603b      	str	r3, [r7, #0]
				continue;
 800be2c:	e014      	b.n	800be58 <ST7789_WriteString+0x80>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	781a      	ldrb	r2, [r3, #0]
 800be32:	88b9      	ldrh	r1, [r7, #4]
 800be34:	88f8      	ldrh	r0, [r7, #6]
 800be36:	8c3b      	ldrh	r3, [r7, #32]
 800be38:	9302      	str	r3, [sp, #8]
 800be3a:	8bbb      	ldrh	r3, [r7, #28]
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f7ff ff48 	bl	800bcd8 <ST7789_WriteChar>
		x += font.width;
 800be48:	7d3b      	ldrb	r3, [r7, #20]
 800be4a:	461a      	mov	r2, r3
 800be4c:	88fb      	ldrh	r3, [r7, #6]
 800be4e:	4413      	add	r3, r2
 800be50:	80fb      	strh	r3, [r7, #6]
		str++;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	3301      	adds	r3, #1
 800be56:	603b      	str	r3, [r7, #0]
	while (*str) {
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1cc      	bne.n	800bdfa <ST7789_WriteString+0x22>
 800be60:	e000      	b.n	800be64 <ST7789_WriteString+0x8c>
				break;
 800be62:	bf00      	nop
	}
	ST7789_UnSelect();
 800be64:	2201      	movs	r2, #1
 800be66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800be6a:	4805      	ldr	r0, [pc, #20]	@ (800be80 <ST7789_WriteString+0xa8>)
 800be6c:	f7f9 f992 	bl	8005194 <HAL_GPIO_WritePin>
}
 800be70:	bf00      	nop
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be7a:	b002      	add	sp, #8
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	58021800 	.word	0x58021800

0800be84 <__cvt>:
 800be84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be86:	ed2d 8b02 	vpush	{d8}
 800be8a:	eeb0 8b40 	vmov.f64	d8, d0
 800be8e:	b085      	sub	sp, #20
 800be90:	4617      	mov	r7, r2
 800be92:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800be94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be96:	ee18 2a90 	vmov	r2, s17
 800be9a:	f025 0520 	bic.w	r5, r5, #32
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	bfb6      	itet	lt
 800bea2:	222d      	movlt	r2, #45	@ 0x2d
 800bea4:	2200      	movge	r2, #0
 800bea6:	eeb1 8b40 	vneglt.f64	d8, d0
 800beaa:	2d46      	cmp	r5, #70	@ 0x46
 800beac:	460c      	mov	r4, r1
 800beae:	701a      	strb	r2, [r3, #0]
 800beb0:	d004      	beq.n	800bebc <__cvt+0x38>
 800beb2:	2d45      	cmp	r5, #69	@ 0x45
 800beb4:	d100      	bne.n	800beb8 <__cvt+0x34>
 800beb6:	3401      	adds	r4, #1
 800beb8:	2102      	movs	r1, #2
 800beba:	e000      	b.n	800bebe <__cvt+0x3a>
 800bebc:	2103      	movs	r1, #3
 800bebe:	ab03      	add	r3, sp, #12
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	ab02      	add	r3, sp, #8
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	4622      	mov	r2, r4
 800bec8:	4633      	mov	r3, r6
 800beca:	eeb0 0b48 	vmov.f64	d0, d8
 800bece:	f000 fe5f 	bl	800cb90 <_dtoa_r>
 800bed2:	2d47      	cmp	r5, #71	@ 0x47
 800bed4:	d114      	bne.n	800bf00 <__cvt+0x7c>
 800bed6:	07fb      	lsls	r3, r7, #31
 800bed8:	d50a      	bpl.n	800bef0 <__cvt+0x6c>
 800beda:	1902      	adds	r2, r0, r4
 800bedc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee4:	bf08      	it	eq
 800bee6:	9203      	streq	r2, [sp, #12]
 800bee8:	2130      	movs	r1, #48	@ 0x30
 800beea:	9b03      	ldr	r3, [sp, #12]
 800beec:	4293      	cmp	r3, r2
 800beee:	d319      	bcc.n	800bf24 <__cvt+0xa0>
 800bef0:	9b03      	ldr	r3, [sp, #12]
 800bef2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bef4:	1a1b      	subs	r3, r3, r0
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	b005      	add	sp, #20
 800befa:	ecbd 8b02 	vpop	{d8}
 800befe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf00:	2d46      	cmp	r5, #70	@ 0x46
 800bf02:	eb00 0204 	add.w	r2, r0, r4
 800bf06:	d1e9      	bne.n	800bedc <__cvt+0x58>
 800bf08:	7803      	ldrb	r3, [r0, #0]
 800bf0a:	2b30      	cmp	r3, #48	@ 0x30
 800bf0c:	d107      	bne.n	800bf1e <__cvt+0x9a>
 800bf0e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf16:	bf1c      	itt	ne
 800bf18:	f1c4 0401 	rsbne	r4, r4, #1
 800bf1c:	6034      	strne	r4, [r6, #0]
 800bf1e:	6833      	ldr	r3, [r6, #0]
 800bf20:	441a      	add	r2, r3
 800bf22:	e7db      	b.n	800bedc <__cvt+0x58>
 800bf24:	1c5c      	adds	r4, r3, #1
 800bf26:	9403      	str	r4, [sp, #12]
 800bf28:	7019      	strb	r1, [r3, #0]
 800bf2a:	e7de      	b.n	800beea <__cvt+0x66>

0800bf2c <__exponent>:
 800bf2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf2e:	2900      	cmp	r1, #0
 800bf30:	bfba      	itte	lt
 800bf32:	4249      	neglt	r1, r1
 800bf34:	232d      	movlt	r3, #45	@ 0x2d
 800bf36:	232b      	movge	r3, #43	@ 0x2b
 800bf38:	2909      	cmp	r1, #9
 800bf3a:	7002      	strb	r2, [r0, #0]
 800bf3c:	7043      	strb	r3, [r0, #1]
 800bf3e:	dd29      	ble.n	800bf94 <__exponent+0x68>
 800bf40:	f10d 0307 	add.w	r3, sp, #7
 800bf44:	461d      	mov	r5, r3
 800bf46:	270a      	movs	r7, #10
 800bf48:	461a      	mov	r2, r3
 800bf4a:	fbb1 f6f7 	udiv	r6, r1, r7
 800bf4e:	fb07 1416 	mls	r4, r7, r6, r1
 800bf52:	3430      	adds	r4, #48	@ 0x30
 800bf54:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bf58:	460c      	mov	r4, r1
 800bf5a:	2c63      	cmp	r4, #99	@ 0x63
 800bf5c:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf60:	4631      	mov	r1, r6
 800bf62:	dcf1      	bgt.n	800bf48 <__exponent+0x1c>
 800bf64:	3130      	adds	r1, #48	@ 0x30
 800bf66:	1e94      	subs	r4, r2, #2
 800bf68:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bf6c:	1c41      	adds	r1, r0, #1
 800bf6e:	4623      	mov	r3, r4
 800bf70:	42ab      	cmp	r3, r5
 800bf72:	d30a      	bcc.n	800bf8a <__exponent+0x5e>
 800bf74:	f10d 0309 	add.w	r3, sp, #9
 800bf78:	1a9b      	subs	r3, r3, r2
 800bf7a:	42ac      	cmp	r4, r5
 800bf7c:	bf88      	it	hi
 800bf7e:	2300      	movhi	r3, #0
 800bf80:	3302      	adds	r3, #2
 800bf82:	4403      	add	r3, r0
 800bf84:	1a18      	subs	r0, r3, r0
 800bf86:	b003      	add	sp, #12
 800bf88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bf8e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bf92:	e7ed      	b.n	800bf70 <__exponent+0x44>
 800bf94:	2330      	movs	r3, #48	@ 0x30
 800bf96:	3130      	adds	r1, #48	@ 0x30
 800bf98:	7083      	strb	r3, [r0, #2]
 800bf9a:	70c1      	strb	r1, [r0, #3]
 800bf9c:	1d03      	adds	r3, r0, #4
 800bf9e:	e7f1      	b.n	800bf84 <__exponent+0x58>

0800bfa0 <_printf_float>:
 800bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa4:	b08d      	sub	sp, #52	@ 0x34
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bfac:	4616      	mov	r6, r2
 800bfae:	461f      	mov	r7, r3
 800bfb0:	4605      	mov	r5, r0
 800bfb2:	f000 fcdf 	bl	800c974 <_localeconv_r>
 800bfb6:	f8d0 b000 	ldr.w	fp, [r0]
 800bfba:	4658      	mov	r0, fp
 800bfbc:	f7f4 f9e8 	bl	8000390 <strlen>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfc4:	f8d8 3000 	ldr.w	r3, [r8]
 800bfc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bfcc:	6822      	ldr	r2, [r4, #0]
 800bfce:	9005      	str	r0, [sp, #20]
 800bfd0:	3307      	adds	r3, #7
 800bfd2:	f023 0307 	bic.w	r3, r3, #7
 800bfd6:	f103 0108 	add.w	r1, r3, #8
 800bfda:	f8c8 1000 	str.w	r1, [r8]
 800bfde:	ed93 0b00 	vldr	d0, [r3]
 800bfe2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c240 <_printf_float+0x2a0>
 800bfe6:	eeb0 7bc0 	vabs.f64	d7, d0
 800bfea:	eeb4 7b46 	vcmp.f64	d7, d6
 800bfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800bff6:	dd24      	ble.n	800c042 <_printf_float+0xa2>
 800bff8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c000:	d502      	bpl.n	800c008 <_printf_float+0x68>
 800c002:	232d      	movs	r3, #45	@ 0x2d
 800c004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c008:	498f      	ldr	r1, [pc, #572]	@ (800c248 <_printf_float+0x2a8>)
 800c00a:	4b90      	ldr	r3, [pc, #576]	@ (800c24c <_printf_float+0x2ac>)
 800c00c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c010:	bf8c      	ite	hi
 800c012:	4688      	movhi	r8, r1
 800c014:	4698      	movls	r8, r3
 800c016:	f022 0204 	bic.w	r2, r2, #4
 800c01a:	2303      	movs	r3, #3
 800c01c:	6123      	str	r3, [r4, #16]
 800c01e:	6022      	str	r2, [r4, #0]
 800c020:	f04f 0a00 	mov.w	sl, #0
 800c024:	9700      	str	r7, [sp, #0]
 800c026:	4633      	mov	r3, r6
 800c028:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c02a:	4621      	mov	r1, r4
 800c02c:	4628      	mov	r0, r5
 800c02e:	f000 f9d1 	bl	800c3d4 <_printf_common>
 800c032:	3001      	adds	r0, #1
 800c034:	f040 8089 	bne.w	800c14a <_printf_float+0x1aa>
 800c038:	f04f 30ff 	mov.w	r0, #4294967295
 800c03c:	b00d      	add	sp, #52	@ 0x34
 800c03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c042:	eeb4 0b40 	vcmp.f64	d0, d0
 800c046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04a:	d709      	bvc.n	800c060 <_printf_float+0xc0>
 800c04c:	ee10 3a90 	vmov	r3, s1
 800c050:	2b00      	cmp	r3, #0
 800c052:	bfbc      	itt	lt
 800c054:	232d      	movlt	r3, #45	@ 0x2d
 800c056:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c05a:	497d      	ldr	r1, [pc, #500]	@ (800c250 <_printf_float+0x2b0>)
 800c05c:	4b7d      	ldr	r3, [pc, #500]	@ (800c254 <_printf_float+0x2b4>)
 800c05e:	e7d5      	b.n	800c00c <_printf_float+0x6c>
 800c060:	6863      	ldr	r3, [r4, #4]
 800c062:	1c59      	adds	r1, r3, #1
 800c064:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c068:	d139      	bne.n	800c0de <_printf_float+0x13e>
 800c06a:	2306      	movs	r3, #6
 800c06c:	6063      	str	r3, [r4, #4]
 800c06e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c072:	2300      	movs	r3, #0
 800c074:	6022      	str	r2, [r4, #0]
 800c076:	9303      	str	r3, [sp, #12]
 800c078:	ab0a      	add	r3, sp, #40	@ 0x28
 800c07a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c07e:	ab09      	add	r3, sp, #36	@ 0x24
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	6861      	ldr	r1, [r4, #4]
 800c084:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c088:	4628      	mov	r0, r5
 800c08a:	f7ff fefb 	bl	800be84 <__cvt>
 800c08e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c092:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c094:	4680      	mov	r8, r0
 800c096:	d129      	bne.n	800c0ec <_printf_float+0x14c>
 800c098:	1cc8      	adds	r0, r1, #3
 800c09a:	db02      	blt.n	800c0a2 <_printf_float+0x102>
 800c09c:	6863      	ldr	r3, [r4, #4]
 800c09e:	4299      	cmp	r1, r3
 800c0a0:	dd41      	ble.n	800c126 <_printf_float+0x186>
 800c0a2:	f1a9 0902 	sub.w	r9, r9, #2
 800c0a6:	fa5f f989 	uxtb.w	r9, r9
 800c0aa:	3901      	subs	r1, #1
 800c0ac:	464a      	mov	r2, r9
 800c0ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c0b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0b4:	f7ff ff3a 	bl	800bf2c <__exponent>
 800c0b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0ba:	1813      	adds	r3, r2, r0
 800c0bc:	2a01      	cmp	r2, #1
 800c0be:	4682      	mov	sl, r0
 800c0c0:	6123      	str	r3, [r4, #16]
 800c0c2:	dc02      	bgt.n	800c0ca <_printf_float+0x12a>
 800c0c4:	6822      	ldr	r2, [r4, #0]
 800c0c6:	07d2      	lsls	r2, r2, #31
 800c0c8:	d501      	bpl.n	800c0ce <_printf_float+0x12e>
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	6123      	str	r3, [r4, #16]
 800c0ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d0a6      	beq.n	800c024 <_printf_float+0x84>
 800c0d6:	232d      	movs	r3, #45	@ 0x2d
 800c0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0dc:	e7a2      	b.n	800c024 <_printf_float+0x84>
 800c0de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c0e2:	d1c4      	bne.n	800c06e <_printf_float+0xce>
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1c2      	bne.n	800c06e <_printf_float+0xce>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e7bf      	b.n	800c06c <_printf_float+0xcc>
 800c0ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c0f0:	d9db      	bls.n	800c0aa <_printf_float+0x10a>
 800c0f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c0f6:	d118      	bne.n	800c12a <_printf_float+0x18a>
 800c0f8:	2900      	cmp	r1, #0
 800c0fa:	6863      	ldr	r3, [r4, #4]
 800c0fc:	dd0b      	ble.n	800c116 <_printf_float+0x176>
 800c0fe:	6121      	str	r1, [r4, #16]
 800c100:	b913      	cbnz	r3, 800c108 <_printf_float+0x168>
 800c102:	6822      	ldr	r2, [r4, #0]
 800c104:	07d0      	lsls	r0, r2, #31
 800c106:	d502      	bpl.n	800c10e <_printf_float+0x16e>
 800c108:	3301      	adds	r3, #1
 800c10a:	440b      	add	r3, r1
 800c10c:	6123      	str	r3, [r4, #16]
 800c10e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c110:	f04f 0a00 	mov.w	sl, #0
 800c114:	e7db      	b.n	800c0ce <_printf_float+0x12e>
 800c116:	b913      	cbnz	r3, 800c11e <_printf_float+0x17e>
 800c118:	6822      	ldr	r2, [r4, #0]
 800c11a:	07d2      	lsls	r2, r2, #31
 800c11c:	d501      	bpl.n	800c122 <_printf_float+0x182>
 800c11e:	3302      	adds	r3, #2
 800c120:	e7f4      	b.n	800c10c <_printf_float+0x16c>
 800c122:	2301      	movs	r3, #1
 800c124:	e7f2      	b.n	800c10c <_printf_float+0x16c>
 800c126:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c12a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c12c:	4299      	cmp	r1, r3
 800c12e:	db05      	blt.n	800c13c <_printf_float+0x19c>
 800c130:	6823      	ldr	r3, [r4, #0]
 800c132:	6121      	str	r1, [r4, #16]
 800c134:	07d8      	lsls	r0, r3, #31
 800c136:	d5ea      	bpl.n	800c10e <_printf_float+0x16e>
 800c138:	1c4b      	adds	r3, r1, #1
 800c13a:	e7e7      	b.n	800c10c <_printf_float+0x16c>
 800c13c:	2900      	cmp	r1, #0
 800c13e:	bfd4      	ite	le
 800c140:	f1c1 0202 	rsble	r2, r1, #2
 800c144:	2201      	movgt	r2, #1
 800c146:	4413      	add	r3, r2
 800c148:	e7e0      	b.n	800c10c <_printf_float+0x16c>
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	055a      	lsls	r2, r3, #21
 800c14e:	d407      	bmi.n	800c160 <_printf_float+0x1c0>
 800c150:	6923      	ldr	r3, [r4, #16]
 800c152:	4642      	mov	r2, r8
 800c154:	4631      	mov	r1, r6
 800c156:	4628      	mov	r0, r5
 800c158:	47b8      	blx	r7
 800c15a:	3001      	adds	r0, #1
 800c15c:	d12a      	bne.n	800c1b4 <_printf_float+0x214>
 800c15e:	e76b      	b.n	800c038 <_printf_float+0x98>
 800c160:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c164:	f240 80e0 	bls.w	800c328 <_printf_float+0x388>
 800c168:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c16c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c174:	d133      	bne.n	800c1de <_printf_float+0x23e>
 800c176:	4a38      	ldr	r2, [pc, #224]	@ (800c258 <_printf_float+0x2b8>)
 800c178:	2301      	movs	r3, #1
 800c17a:	4631      	mov	r1, r6
 800c17c:	4628      	mov	r0, r5
 800c17e:	47b8      	blx	r7
 800c180:	3001      	adds	r0, #1
 800c182:	f43f af59 	beq.w	800c038 <_printf_float+0x98>
 800c186:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c18a:	4543      	cmp	r3, r8
 800c18c:	db02      	blt.n	800c194 <_printf_float+0x1f4>
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	07d8      	lsls	r0, r3, #31
 800c192:	d50f      	bpl.n	800c1b4 <_printf_float+0x214>
 800c194:	9b05      	ldr	r3, [sp, #20]
 800c196:	465a      	mov	r2, fp
 800c198:	4631      	mov	r1, r6
 800c19a:	4628      	mov	r0, r5
 800c19c:	47b8      	blx	r7
 800c19e:	3001      	adds	r0, #1
 800c1a0:	f43f af4a 	beq.w	800c038 <_printf_float+0x98>
 800c1a4:	f04f 0900 	mov.w	r9, #0
 800c1a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c1ac:	f104 0a1a 	add.w	sl, r4, #26
 800c1b0:	45c8      	cmp	r8, r9
 800c1b2:	dc09      	bgt.n	800c1c8 <_printf_float+0x228>
 800c1b4:	6823      	ldr	r3, [r4, #0]
 800c1b6:	079b      	lsls	r3, r3, #30
 800c1b8:	f100 8107 	bmi.w	800c3ca <_printf_float+0x42a>
 800c1bc:	68e0      	ldr	r0, [r4, #12]
 800c1be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1c0:	4298      	cmp	r0, r3
 800c1c2:	bfb8      	it	lt
 800c1c4:	4618      	movlt	r0, r3
 800c1c6:	e739      	b.n	800c03c <_printf_float+0x9c>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	4652      	mov	r2, sl
 800c1cc:	4631      	mov	r1, r6
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	47b8      	blx	r7
 800c1d2:	3001      	adds	r0, #1
 800c1d4:	f43f af30 	beq.w	800c038 <_printf_float+0x98>
 800c1d8:	f109 0901 	add.w	r9, r9, #1
 800c1dc:	e7e8      	b.n	800c1b0 <_printf_float+0x210>
 800c1de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	dc3b      	bgt.n	800c25c <_printf_float+0x2bc>
 800c1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c258 <_printf_float+0x2b8>)
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	47b8      	blx	r7
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	f43f af22 	beq.w	800c038 <_printf_float+0x98>
 800c1f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c1f8:	ea59 0303 	orrs.w	r3, r9, r3
 800c1fc:	d102      	bne.n	800c204 <_printf_float+0x264>
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	07d9      	lsls	r1, r3, #31
 800c202:	d5d7      	bpl.n	800c1b4 <_printf_float+0x214>
 800c204:	9b05      	ldr	r3, [sp, #20]
 800c206:	465a      	mov	r2, fp
 800c208:	4631      	mov	r1, r6
 800c20a:	4628      	mov	r0, r5
 800c20c:	47b8      	blx	r7
 800c20e:	3001      	adds	r0, #1
 800c210:	f43f af12 	beq.w	800c038 <_printf_float+0x98>
 800c214:	f04f 0a00 	mov.w	sl, #0
 800c218:	f104 0b1a 	add.w	fp, r4, #26
 800c21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c21e:	425b      	negs	r3, r3
 800c220:	4553      	cmp	r3, sl
 800c222:	dc01      	bgt.n	800c228 <_printf_float+0x288>
 800c224:	464b      	mov	r3, r9
 800c226:	e794      	b.n	800c152 <_printf_float+0x1b2>
 800c228:	2301      	movs	r3, #1
 800c22a:	465a      	mov	r2, fp
 800c22c:	4631      	mov	r1, r6
 800c22e:	4628      	mov	r0, r5
 800c230:	47b8      	blx	r7
 800c232:	3001      	adds	r0, #1
 800c234:	f43f af00 	beq.w	800c038 <_printf_float+0x98>
 800c238:	f10a 0a01 	add.w	sl, sl, #1
 800c23c:	e7ee      	b.n	800c21c <_printf_float+0x27c>
 800c23e:	bf00      	nop
 800c240:	ffffffff 	.word	0xffffffff
 800c244:	7fefffff 	.word	0x7fefffff
 800c248:	08034ae0 	.word	0x08034ae0
 800c24c:	08034adc 	.word	0x08034adc
 800c250:	08034ae8 	.word	0x08034ae8
 800c254:	08034ae4 	.word	0x08034ae4
 800c258:	08034aec 	.word	0x08034aec
 800c25c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c25e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c262:	4553      	cmp	r3, sl
 800c264:	bfa8      	it	ge
 800c266:	4653      	movge	r3, sl
 800c268:	2b00      	cmp	r3, #0
 800c26a:	4699      	mov	r9, r3
 800c26c:	dc37      	bgt.n	800c2de <_printf_float+0x33e>
 800c26e:	2300      	movs	r3, #0
 800c270:	9307      	str	r3, [sp, #28]
 800c272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c276:	f104 021a 	add.w	r2, r4, #26
 800c27a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c27c:	9907      	ldr	r1, [sp, #28]
 800c27e:	9306      	str	r3, [sp, #24]
 800c280:	eba3 0309 	sub.w	r3, r3, r9
 800c284:	428b      	cmp	r3, r1
 800c286:	dc31      	bgt.n	800c2ec <_printf_float+0x34c>
 800c288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c28a:	459a      	cmp	sl, r3
 800c28c:	dc3b      	bgt.n	800c306 <_printf_float+0x366>
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	07da      	lsls	r2, r3, #31
 800c292:	d438      	bmi.n	800c306 <_printf_float+0x366>
 800c294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c296:	ebaa 0903 	sub.w	r9, sl, r3
 800c29a:	9b06      	ldr	r3, [sp, #24]
 800c29c:	ebaa 0303 	sub.w	r3, sl, r3
 800c2a0:	4599      	cmp	r9, r3
 800c2a2:	bfa8      	it	ge
 800c2a4:	4699      	movge	r9, r3
 800c2a6:	f1b9 0f00 	cmp.w	r9, #0
 800c2aa:	dc34      	bgt.n	800c316 <_printf_float+0x376>
 800c2ac:	f04f 0800 	mov.w	r8, #0
 800c2b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2b4:	f104 0b1a 	add.w	fp, r4, #26
 800c2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ba:	ebaa 0303 	sub.w	r3, sl, r3
 800c2be:	eba3 0309 	sub.w	r3, r3, r9
 800c2c2:	4543      	cmp	r3, r8
 800c2c4:	f77f af76 	ble.w	800c1b4 <_printf_float+0x214>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	465a      	mov	r2, fp
 800c2cc:	4631      	mov	r1, r6
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	47b8      	blx	r7
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	f43f aeb0 	beq.w	800c038 <_printf_float+0x98>
 800c2d8:	f108 0801 	add.w	r8, r8, #1
 800c2dc:	e7ec      	b.n	800c2b8 <_printf_float+0x318>
 800c2de:	4642      	mov	r2, r8
 800c2e0:	4631      	mov	r1, r6
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	47b8      	blx	r7
 800c2e6:	3001      	adds	r0, #1
 800c2e8:	d1c1      	bne.n	800c26e <_printf_float+0x2ce>
 800c2ea:	e6a5      	b.n	800c038 <_printf_float+0x98>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	9206      	str	r2, [sp, #24]
 800c2f4:	47b8      	blx	r7
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	f43f ae9e 	beq.w	800c038 <_printf_float+0x98>
 800c2fc:	9b07      	ldr	r3, [sp, #28]
 800c2fe:	9a06      	ldr	r2, [sp, #24]
 800c300:	3301      	adds	r3, #1
 800c302:	9307      	str	r3, [sp, #28]
 800c304:	e7b9      	b.n	800c27a <_printf_float+0x2da>
 800c306:	9b05      	ldr	r3, [sp, #20]
 800c308:	465a      	mov	r2, fp
 800c30a:	4631      	mov	r1, r6
 800c30c:	4628      	mov	r0, r5
 800c30e:	47b8      	blx	r7
 800c310:	3001      	adds	r0, #1
 800c312:	d1bf      	bne.n	800c294 <_printf_float+0x2f4>
 800c314:	e690      	b.n	800c038 <_printf_float+0x98>
 800c316:	9a06      	ldr	r2, [sp, #24]
 800c318:	464b      	mov	r3, r9
 800c31a:	4442      	add	r2, r8
 800c31c:	4631      	mov	r1, r6
 800c31e:	4628      	mov	r0, r5
 800c320:	47b8      	blx	r7
 800c322:	3001      	adds	r0, #1
 800c324:	d1c2      	bne.n	800c2ac <_printf_float+0x30c>
 800c326:	e687      	b.n	800c038 <_printf_float+0x98>
 800c328:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c32c:	f1b9 0f01 	cmp.w	r9, #1
 800c330:	dc01      	bgt.n	800c336 <_printf_float+0x396>
 800c332:	07db      	lsls	r3, r3, #31
 800c334:	d536      	bpl.n	800c3a4 <_printf_float+0x404>
 800c336:	2301      	movs	r3, #1
 800c338:	4642      	mov	r2, r8
 800c33a:	4631      	mov	r1, r6
 800c33c:	4628      	mov	r0, r5
 800c33e:	47b8      	blx	r7
 800c340:	3001      	adds	r0, #1
 800c342:	f43f ae79 	beq.w	800c038 <_printf_float+0x98>
 800c346:	9b05      	ldr	r3, [sp, #20]
 800c348:	465a      	mov	r2, fp
 800c34a:	4631      	mov	r1, r6
 800c34c:	4628      	mov	r0, r5
 800c34e:	47b8      	blx	r7
 800c350:	3001      	adds	r0, #1
 800c352:	f43f ae71 	beq.w	800c038 <_printf_float+0x98>
 800c356:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c35a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c362:	f109 39ff 	add.w	r9, r9, #4294967295
 800c366:	d018      	beq.n	800c39a <_printf_float+0x3fa>
 800c368:	464b      	mov	r3, r9
 800c36a:	f108 0201 	add.w	r2, r8, #1
 800c36e:	4631      	mov	r1, r6
 800c370:	4628      	mov	r0, r5
 800c372:	47b8      	blx	r7
 800c374:	3001      	adds	r0, #1
 800c376:	d10c      	bne.n	800c392 <_printf_float+0x3f2>
 800c378:	e65e      	b.n	800c038 <_printf_float+0x98>
 800c37a:	2301      	movs	r3, #1
 800c37c:	465a      	mov	r2, fp
 800c37e:	4631      	mov	r1, r6
 800c380:	4628      	mov	r0, r5
 800c382:	47b8      	blx	r7
 800c384:	3001      	adds	r0, #1
 800c386:	f43f ae57 	beq.w	800c038 <_printf_float+0x98>
 800c38a:	f108 0801 	add.w	r8, r8, #1
 800c38e:	45c8      	cmp	r8, r9
 800c390:	dbf3      	blt.n	800c37a <_printf_float+0x3da>
 800c392:	4653      	mov	r3, sl
 800c394:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c398:	e6dc      	b.n	800c154 <_printf_float+0x1b4>
 800c39a:	f04f 0800 	mov.w	r8, #0
 800c39e:	f104 0b1a 	add.w	fp, r4, #26
 800c3a2:	e7f4      	b.n	800c38e <_printf_float+0x3ee>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	4642      	mov	r2, r8
 800c3a8:	e7e1      	b.n	800c36e <_printf_float+0x3ce>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	464a      	mov	r2, r9
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	47b8      	blx	r7
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	f43f ae3f 	beq.w	800c038 <_printf_float+0x98>
 800c3ba:	f108 0801 	add.w	r8, r8, #1
 800c3be:	68e3      	ldr	r3, [r4, #12]
 800c3c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3c2:	1a5b      	subs	r3, r3, r1
 800c3c4:	4543      	cmp	r3, r8
 800c3c6:	dcf0      	bgt.n	800c3aa <_printf_float+0x40a>
 800c3c8:	e6f8      	b.n	800c1bc <_printf_float+0x21c>
 800c3ca:	f04f 0800 	mov.w	r8, #0
 800c3ce:	f104 0919 	add.w	r9, r4, #25
 800c3d2:	e7f4      	b.n	800c3be <_printf_float+0x41e>

0800c3d4 <_printf_common>:
 800c3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d8:	4616      	mov	r6, r2
 800c3da:	4698      	mov	r8, r3
 800c3dc:	688a      	ldr	r2, [r1, #8]
 800c3de:	690b      	ldr	r3, [r1, #16]
 800c3e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	bfb8      	it	lt
 800c3e8:	4613      	movlt	r3, r2
 800c3ea:	6033      	str	r3, [r6, #0]
 800c3ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	b10a      	cbz	r2, 800c3fa <_printf_common+0x26>
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	6033      	str	r3, [r6, #0]
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	0699      	lsls	r1, r3, #26
 800c3fe:	bf42      	ittt	mi
 800c400:	6833      	ldrmi	r3, [r6, #0]
 800c402:	3302      	addmi	r3, #2
 800c404:	6033      	strmi	r3, [r6, #0]
 800c406:	6825      	ldr	r5, [r4, #0]
 800c408:	f015 0506 	ands.w	r5, r5, #6
 800c40c:	d106      	bne.n	800c41c <_printf_common+0x48>
 800c40e:	f104 0a19 	add.w	sl, r4, #25
 800c412:	68e3      	ldr	r3, [r4, #12]
 800c414:	6832      	ldr	r2, [r6, #0]
 800c416:	1a9b      	subs	r3, r3, r2
 800c418:	42ab      	cmp	r3, r5
 800c41a:	dc26      	bgt.n	800c46a <_printf_common+0x96>
 800c41c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c420:	6822      	ldr	r2, [r4, #0]
 800c422:	3b00      	subs	r3, #0
 800c424:	bf18      	it	ne
 800c426:	2301      	movne	r3, #1
 800c428:	0692      	lsls	r2, r2, #26
 800c42a:	d42b      	bmi.n	800c484 <_printf_common+0xb0>
 800c42c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c430:	4641      	mov	r1, r8
 800c432:	4638      	mov	r0, r7
 800c434:	47c8      	blx	r9
 800c436:	3001      	adds	r0, #1
 800c438:	d01e      	beq.n	800c478 <_printf_common+0xa4>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	6922      	ldr	r2, [r4, #16]
 800c43e:	f003 0306 	and.w	r3, r3, #6
 800c442:	2b04      	cmp	r3, #4
 800c444:	bf02      	ittt	eq
 800c446:	68e5      	ldreq	r5, [r4, #12]
 800c448:	6833      	ldreq	r3, [r6, #0]
 800c44a:	1aed      	subeq	r5, r5, r3
 800c44c:	68a3      	ldr	r3, [r4, #8]
 800c44e:	bf0c      	ite	eq
 800c450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c454:	2500      	movne	r5, #0
 800c456:	4293      	cmp	r3, r2
 800c458:	bfc4      	itt	gt
 800c45a:	1a9b      	subgt	r3, r3, r2
 800c45c:	18ed      	addgt	r5, r5, r3
 800c45e:	2600      	movs	r6, #0
 800c460:	341a      	adds	r4, #26
 800c462:	42b5      	cmp	r5, r6
 800c464:	d11a      	bne.n	800c49c <_printf_common+0xc8>
 800c466:	2000      	movs	r0, #0
 800c468:	e008      	b.n	800c47c <_printf_common+0xa8>
 800c46a:	2301      	movs	r3, #1
 800c46c:	4652      	mov	r2, sl
 800c46e:	4641      	mov	r1, r8
 800c470:	4638      	mov	r0, r7
 800c472:	47c8      	blx	r9
 800c474:	3001      	adds	r0, #1
 800c476:	d103      	bne.n	800c480 <_printf_common+0xac>
 800c478:	f04f 30ff 	mov.w	r0, #4294967295
 800c47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c480:	3501      	adds	r5, #1
 800c482:	e7c6      	b.n	800c412 <_printf_common+0x3e>
 800c484:	18e1      	adds	r1, r4, r3
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	2030      	movs	r0, #48	@ 0x30
 800c48a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c48e:	4422      	add	r2, r4
 800c490:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c494:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c498:	3302      	adds	r3, #2
 800c49a:	e7c7      	b.n	800c42c <_printf_common+0x58>
 800c49c:	2301      	movs	r3, #1
 800c49e:	4622      	mov	r2, r4
 800c4a0:	4641      	mov	r1, r8
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	47c8      	blx	r9
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	d0e6      	beq.n	800c478 <_printf_common+0xa4>
 800c4aa:	3601      	adds	r6, #1
 800c4ac:	e7d9      	b.n	800c462 <_printf_common+0x8e>
	...

0800c4b0 <_printf_i>:
 800c4b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b4:	7e0f      	ldrb	r7, [r1, #24]
 800c4b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c4b8:	2f78      	cmp	r7, #120	@ 0x78
 800c4ba:	4691      	mov	r9, r2
 800c4bc:	4680      	mov	r8, r0
 800c4be:	460c      	mov	r4, r1
 800c4c0:	469a      	mov	sl, r3
 800c4c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c4c6:	d807      	bhi.n	800c4d8 <_printf_i+0x28>
 800c4c8:	2f62      	cmp	r7, #98	@ 0x62
 800c4ca:	d80a      	bhi.n	800c4e2 <_printf_i+0x32>
 800c4cc:	2f00      	cmp	r7, #0
 800c4ce:	f000 80d1 	beq.w	800c674 <_printf_i+0x1c4>
 800c4d2:	2f58      	cmp	r7, #88	@ 0x58
 800c4d4:	f000 80b8 	beq.w	800c648 <_printf_i+0x198>
 800c4d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c4e0:	e03a      	b.n	800c558 <_printf_i+0xa8>
 800c4e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c4e6:	2b15      	cmp	r3, #21
 800c4e8:	d8f6      	bhi.n	800c4d8 <_printf_i+0x28>
 800c4ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c4f0 <_printf_i+0x40>)
 800c4ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4f0:	0800c549 	.word	0x0800c549
 800c4f4:	0800c55d 	.word	0x0800c55d
 800c4f8:	0800c4d9 	.word	0x0800c4d9
 800c4fc:	0800c4d9 	.word	0x0800c4d9
 800c500:	0800c4d9 	.word	0x0800c4d9
 800c504:	0800c4d9 	.word	0x0800c4d9
 800c508:	0800c55d 	.word	0x0800c55d
 800c50c:	0800c4d9 	.word	0x0800c4d9
 800c510:	0800c4d9 	.word	0x0800c4d9
 800c514:	0800c4d9 	.word	0x0800c4d9
 800c518:	0800c4d9 	.word	0x0800c4d9
 800c51c:	0800c65b 	.word	0x0800c65b
 800c520:	0800c587 	.word	0x0800c587
 800c524:	0800c615 	.word	0x0800c615
 800c528:	0800c4d9 	.word	0x0800c4d9
 800c52c:	0800c4d9 	.word	0x0800c4d9
 800c530:	0800c67d 	.word	0x0800c67d
 800c534:	0800c4d9 	.word	0x0800c4d9
 800c538:	0800c587 	.word	0x0800c587
 800c53c:	0800c4d9 	.word	0x0800c4d9
 800c540:	0800c4d9 	.word	0x0800c4d9
 800c544:	0800c61d 	.word	0x0800c61d
 800c548:	6833      	ldr	r3, [r6, #0]
 800c54a:	1d1a      	adds	r2, r3, #4
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6032      	str	r2, [r6, #0]
 800c550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c554:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c558:	2301      	movs	r3, #1
 800c55a:	e09c      	b.n	800c696 <_printf_i+0x1e6>
 800c55c:	6833      	ldr	r3, [r6, #0]
 800c55e:	6820      	ldr	r0, [r4, #0]
 800c560:	1d19      	adds	r1, r3, #4
 800c562:	6031      	str	r1, [r6, #0]
 800c564:	0606      	lsls	r6, r0, #24
 800c566:	d501      	bpl.n	800c56c <_printf_i+0xbc>
 800c568:	681d      	ldr	r5, [r3, #0]
 800c56a:	e003      	b.n	800c574 <_printf_i+0xc4>
 800c56c:	0645      	lsls	r5, r0, #25
 800c56e:	d5fb      	bpl.n	800c568 <_printf_i+0xb8>
 800c570:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c574:	2d00      	cmp	r5, #0
 800c576:	da03      	bge.n	800c580 <_printf_i+0xd0>
 800c578:	232d      	movs	r3, #45	@ 0x2d
 800c57a:	426d      	negs	r5, r5
 800c57c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c580:	4858      	ldr	r0, [pc, #352]	@ (800c6e4 <_printf_i+0x234>)
 800c582:	230a      	movs	r3, #10
 800c584:	e011      	b.n	800c5aa <_printf_i+0xfa>
 800c586:	6821      	ldr	r1, [r4, #0]
 800c588:	6833      	ldr	r3, [r6, #0]
 800c58a:	0608      	lsls	r0, r1, #24
 800c58c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c590:	d402      	bmi.n	800c598 <_printf_i+0xe8>
 800c592:	0649      	lsls	r1, r1, #25
 800c594:	bf48      	it	mi
 800c596:	b2ad      	uxthmi	r5, r5
 800c598:	2f6f      	cmp	r7, #111	@ 0x6f
 800c59a:	4852      	ldr	r0, [pc, #328]	@ (800c6e4 <_printf_i+0x234>)
 800c59c:	6033      	str	r3, [r6, #0]
 800c59e:	bf14      	ite	ne
 800c5a0:	230a      	movne	r3, #10
 800c5a2:	2308      	moveq	r3, #8
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c5aa:	6866      	ldr	r6, [r4, #4]
 800c5ac:	60a6      	str	r6, [r4, #8]
 800c5ae:	2e00      	cmp	r6, #0
 800c5b0:	db05      	blt.n	800c5be <_printf_i+0x10e>
 800c5b2:	6821      	ldr	r1, [r4, #0]
 800c5b4:	432e      	orrs	r6, r5
 800c5b6:	f021 0104 	bic.w	r1, r1, #4
 800c5ba:	6021      	str	r1, [r4, #0]
 800c5bc:	d04b      	beq.n	800c656 <_printf_i+0x1a6>
 800c5be:	4616      	mov	r6, r2
 800c5c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5c4:	fb03 5711 	mls	r7, r3, r1, r5
 800c5c8:	5dc7      	ldrb	r7, [r0, r7]
 800c5ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c5ce:	462f      	mov	r7, r5
 800c5d0:	42bb      	cmp	r3, r7
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	d9f4      	bls.n	800c5c0 <_printf_i+0x110>
 800c5d6:	2b08      	cmp	r3, #8
 800c5d8:	d10b      	bne.n	800c5f2 <_printf_i+0x142>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	07df      	lsls	r7, r3, #31
 800c5de:	d508      	bpl.n	800c5f2 <_printf_i+0x142>
 800c5e0:	6923      	ldr	r3, [r4, #16]
 800c5e2:	6861      	ldr	r1, [r4, #4]
 800c5e4:	4299      	cmp	r1, r3
 800c5e6:	bfde      	ittt	le
 800c5e8:	2330      	movle	r3, #48	@ 0x30
 800c5ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5f2:	1b92      	subs	r2, r2, r6
 800c5f4:	6122      	str	r2, [r4, #16]
 800c5f6:	f8cd a000 	str.w	sl, [sp]
 800c5fa:	464b      	mov	r3, r9
 800c5fc:	aa03      	add	r2, sp, #12
 800c5fe:	4621      	mov	r1, r4
 800c600:	4640      	mov	r0, r8
 800c602:	f7ff fee7 	bl	800c3d4 <_printf_common>
 800c606:	3001      	adds	r0, #1
 800c608:	d14a      	bne.n	800c6a0 <_printf_i+0x1f0>
 800c60a:	f04f 30ff 	mov.w	r0, #4294967295
 800c60e:	b004      	add	sp, #16
 800c610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c614:	6823      	ldr	r3, [r4, #0]
 800c616:	f043 0320 	orr.w	r3, r3, #32
 800c61a:	6023      	str	r3, [r4, #0]
 800c61c:	4832      	ldr	r0, [pc, #200]	@ (800c6e8 <_printf_i+0x238>)
 800c61e:	2778      	movs	r7, #120	@ 0x78
 800c620:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	6831      	ldr	r1, [r6, #0]
 800c628:	061f      	lsls	r7, r3, #24
 800c62a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c62e:	d402      	bmi.n	800c636 <_printf_i+0x186>
 800c630:	065f      	lsls	r7, r3, #25
 800c632:	bf48      	it	mi
 800c634:	b2ad      	uxthmi	r5, r5
 800c636:	6031      	str	r1, [r6, #0]
 800c638:	07d9      	lsls	r1, r3, #31
 800c63a:	bf44      	itt	mi
 800c63c:	f043 0320 	orrmi.w	r3, r3, #32
 800c640:	6023      	strmi	r3, [r4, #0]
 800c642:	b11d      	cbz	r5, 800c64c <_printf_i+0x19c>
 800c644:	2310      	movs	r3, #16
 800c646:	e7ad      	b.n	800c5a4 <_printf_i+0xf4>
 800c648:	4826      	ldr	r0, [pc, #152]	@ (800c6e4 <_printf_i+0x234>)
 800c64a:	e7e9      	b.n	800c620 <_printf_i+0x170>
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	f023 0320 	bic.w	r3, r3, #32
 800c652:	6023      	str	r3, [r4, #0]
 800c654:	e7f6      	b.n	800c644 <_printf_i+0x194>
 800c656:	4616      	mov	r6, r2
 800c658:	e7bd      	b.n	800c5d6 <_printf_i+0x126>
 800c65a:	6833      	ldr	r3, [r6, #0]
 800c65c:	6825      	ldr	r5, [r4, #0]
 800c65e:	6961      	ldr	r1, [r4, #20]
 800c660:	1d18      	adds	r0, r3, #4
 800c662:	6030      	str	r0, [r6, #0]
 800c664:	062e      	lsls	r6, r5, #24
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	d501      	bpl.n	800c66e <_printf_i+0x1be>
 800c66a:	6019      	str	r1, [r3, #0]
 800c66c:	e002      	b.n	800c674 <_printf_i+0x1c4>
 800c66e:	0668      	lsls	r0, r5, #25
 800c670:	d5fb      	bpl.n	800c66a <_printf_i+0x1ba>
 800c672:	8019      	strh	r1, [r3, #0]
 800c674:	2300      	movs	r3, #0
 800c676:	6123      	str	r3, [r4, #16]
 800c678:	4616      	mov	r6, r2
 800c67a:	e7bc      	b.n	800c5f6 <_printf_i+0x146>
 800c67c:	6833      	ldr	r3, [r6, #0]
 800c67e:	1d1a      	adds	r2, r3, #4
 800c680:	6032      	str	r2, [r6, #0]
 800c682:	681e      	ldr	r6, [r3, #0]
 800c684:	6862      	ldr	r2, [r4, #4]
 800c686:	2100      	movs	r1, #0
 800c688:	4630      	mov	r0, r6
 800c68a:	f7f3 fe31 	bl	80002f0 <memchr>
 800c68e:	b108      	cbz	r0, 800c694 <_printf_i+0x1e4>
 800c690:	1b80      	subs	r0, r0, r6
 800c692:	6060      	str	r0, [r4, #4]
 800c694:	6863      	ldr	r3, [r4, #4]
 800c696:	6123      	str	r3, [r4, #16]
 800c698:	2300      	movs	r3, #0
 800c69a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c69e:	e7aa      	b.n	800c5f6 <_printf_i+0x146>
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	4632      	mov	r2, r6
 800c6a4:	4649      	mov	r1, r9
 800c6a6:	4640      	mov	r0, r8
 800c6a8:	47d0      	blx	sl
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	d0ad      	beq.n	800c60a <_printf_i+0x15a>
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	079b      	lsls	r3, r3, #30
 800c6b2:	d413      	bmi.n	800c6dc <_printf_i+0x22c>
 800c6b4:	68e0      	ldr	r0, [r4, #12]
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	4298      	cmp	r0, r3
 800c6ba:	bfb8      	it	lt
 800c6bc:	4618      	movlt	r0, r3
 800c6be:	e7a6      	b.n	800c60e <_printf_i+0x15e>
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	4632      	mov	r2, r6
 800c6c4:	4649      	mov	r1, r9
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	47d0      	blx	sl
 800c6ca:	3001      	adds	r0, #1
 800c6cc:	d09d      	beq.n	800c60a <_printf_i+0x15a>
 800c6ce:	3501      	adds	r5, #1
 800c6d0:	68e3      	ldr	r3, [r4, #12]
 800c6d2:	9903      	ldr	r1, [sp, #12]
 800c6d4:	1a5b      	subs	r3, r3, r1
 800c6d6:	42ab      	cmp	r3, r5
 800c6d8:	dcf2      	bgt.n	800c6c0 <_printf_i+0x210>
 800c6da:	e7eb      	b.n	800c6b4 <_printf_i+0x204>
 800c6dc:	2500      	movs	r5, #0
 800c6de:	f104 0619 	add.w	r6, r4, #25
 800c6e2:	e7f5      	b.n	800c6d0 <_printf_i+0x220>
 800c6e4:	08034aee 	.word	0x08034aee
 800c6e8:	08034aff 	.word	0x08034aff

0800c6ec <std>:
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	b510      	push	{r4, lr}
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c6f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6fa:	6083      	str	r3, [r0, #8]
 800c6fc:	8181      	strh	r1, [r0, #12]
 800c6fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800c700:	81c2      	strh	r2, [r0, #14]
 800c702:	6183      	str	r3, [r0, #24]
 800c704:	4619      	mov	r1, r3
 800c706:	2208      	movs	r2, #8
 800c708:	305c      	adds	r0, #92	@ 0x5c
 800c70a:	f000 f92a 	bl	800c962 <memset>
 800c70e:	4b0d      	ldr	r3, [pc, #52]	@ (800c744 <std+0x58>)
 800c710:	6263      	str	r3, [r4, #36]	@ 0x24
 800c712:	4b0d      	ldr	r3, [pc, #52]	@ (800c748 <std+0x5c>)
 800c714:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c716:	4b0d      	ldr	r3, [pc, #52]	@ (800c74c <std+0x60>)
 800c718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c71a:	4b0d      	ldr	r3, [pc, #52]	@ (800c750 <std+0x64>)
 800c71c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c71e:	4b0d      	ldr	r3, [pc, #52]	@ (800c754 <std+0x68>)
 800c720:	6224      	str	r4, [r4, #32]
 800c722:	429c      	cmp	r4, r3
 800c724:	d006      	beq.n	800c734 <std+0x48>
 800c726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c72a:	4294      	cmp	r4, r2
 800c72c:	d002      	beq.n	800c734 <std+0x48>
 800c72e:	33d0      	adds	r3, #208	@ 0xd0
 800c730:	429c      	cmp	r4, r3
 800c732:	d105      	bne.n	800c740 <std+0x54>
 800c734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c73c:	f000 b98e 	b.w	800ca5c <__retarget_lock_init_recursive>
 800c740:	bd10      	pop	{r4, pc}
 800c742:	bf00      	nop
 800c744:	0800c8dd 	.word	0x0800c8dd
 800c748:	0800c8ff 	.word	0x0800c8ff
 800c74c:	0800c937 	.word	0x0800c937
 800c750:	0800c95b 	.word	0x0800c95b
 800c754:	24001818 	.word	0x24001818

0800c758 <stdio_exit_handler>:
 800c758:	4a02      	ldr	r2, [pc, #8]	@ (800c764 <stdio_exit_handler+0xc>)
 800c75a:	4903      	ldr	r1, [pc, #12]	@ (800c768 <stdio_exit_handler+0x10>)
 800c75c:	4803      	ldr	r0, [pc, #12]	@ (800c76c <stdio_exit_handler+0x14>)
 800c75e:	f000 b869 	b.w	800c834 <_fwalk_sglue>
 800c762:	bf00      	nop
 800c764:	240000a0 	.word	0x240000a0
 800c768:	0800e57d 	.word	0x0800e57d
 800c76c:	240000b0 	.word	0x240000b0

0800c770 <cleanup_stdio>:
 800c770:	6841      	ldr	r1, [r0, #4]
 800c772:	4b0c      	ldr	r3, [pc, #48]	@ (800c7a4 <cleanup_stdio+0x34>)
 800c774:	4299      	cmp	r1, r3
 800c776:	b510      	push	{r4, lr}
 800c778:	4604      	mov	r4, r0
 800c77a:	d001      	beq.n	800c780 <cleanup_stdio+0x10>
 800c77c:	f001 fefe 	bl	800e57c <_fflush_r>
 800c780:	68a1      	ldr	r1, [r4, #8]
 800c782:	4b09      	ldr	r3, [pc, #36]	@ (800c7a8 <cleanup_stdio+0x38>)
 800c784:	4299      	cmp	r1, r3
 800c786:	d002      	beq.n	800c78e <cleanup_stdio+0x1e>
 800c788:	4620      	mov	r0, r4
 800c78a:	f001 fef7 	bl	800e57c <_fflush_r>
 800c78e:	68e1      	ldr	r1, [r4, #12]
 800c790:	4b06      	ldr	r3, [pc, #24]	@ (800c7ac <cleanup_stdio+0x3c>)
 800c792:	4299      	cmp	r1, r3
 800c794:	d004      	beq.n	800c7a0 <cleanup_stdio+0x30>
 800c796:	4620      	mov	r0, r4
 800c798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c79c:	f001 beee 	b.w	800e57c <_fflush_r>
 800c7a0:	bd10      	pop	{r4, pc}
 800c7a2:	bf00      	nop
 800c7a4:	24001818 	.word	0x24001818
 800c7a8:	24001880 	.word	0x24001880
 800c7ac:	240018e8 	.word	0x240018e8

0800c7b0 <global_stdio_init.part.0>:
 800c7b0:	b510      	push	{r4, lr}
 800c7b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c7e0 <global_stdio_init.part.0+0x30>)
 800c7b4:	4c0b      	ldr	r4, [pc, #44]	@ (800c7e4 <global_stdio_init.part.0+0x34>)
 800c7b6:	4a0c      	ldr	r2, [pc, #48]	@ (800c7e8 <global_stdio_init.part.0+0x38>)
 800c7b8:	601a      	str	r2, [r3, #0]
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	2200      	movs	r2, #0
 800c7be:	2104      	movs	r1, #4
 800c7c0:	f7ff ff94 	bl	800c6ec <std>
 800c7c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	2109      	movs	r1, #9
 800c7cc:	f7ff ff8e 	bl	800c6ec <std>
 800c7d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c7d4:	2202      	movs	r2, #2
 800c7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7da:	2112      	movs	r1, #18
 800c7dc:	f7ff bf86 	b.w	800c6ec <std>
 800c7e0:	24001950 	.word	0x24001950
 800c7e4:	24001818 	.word	0x24001818
 800c7e8:	0800c759 	.word	0x0800c759

0800c7ec <__sfp_lock_acquire>:
 800c7ec:	4801      	ldr	r0, [pc, #4]	@ (800c7f4 <__sfp_lock_acquire+0x8>)
 800c7ee:	f000 b936 	b.w	800ca5e <__retarget_lock_acquire_recursive>
 800c7f2:	bf00      	nop
 800c7f4:	24001959 	.word	0x24001959

0800c7f8 <__sfp_lock_release>:
 800c7f8:	4801      	ldr	r0, [pc, #4]	@ (800c800 <__sfp_lock_release+0x8>)
 800c7fa:	f000 b931 	b.w	800ca60 <__retarget_lock_release_recursive>
 800c7fe:	bf00      	nop
 800c800:	24001959 	.word	0x24001959

0800c804 <__sinit>:
 800c804:	b510      	push	{r4, lr}
 800c806:	4604      	mov	r4, r0
 800c808:	f7ff fff0 	bl	800c7ec <__sfp_lock_acquire>
 800c80c:	6a23      	ldr	r3, [r4, #32]
 800c80e:	b11b      	cbz	r3, 800c818 <__sinit+0x14>
 800c810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c814:	f7ff bff0 	b.w	800c7f8 <__sfp_lock_release>
 800c818:	4b04      	ldr	r3, [pc, #16]	@ (800c82c <__sinit+0x28>)
 800c81a:	6223      	str	r3, [r4, #32]
 800c81c:	4b04      	ldr	r3, [pc, #16]	@ (800c830 <__sinit+0x2c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1f5      	bne.n	800c810 <__sinit+0xc>
 800c824:	f7ff ffc4 	bl	800c7b0 <global_stdio_init.part.0>
 800c828:	e7f2      	b.n	800c810 <__sinit+0xc>
 800c82a:	bf00      	nop
 800c82c:	0800c771 	.word	0x0800c771
 800c830:	24001950 	.word	0x24001950

0800c834 <_fwalk_sglue>:
 800c834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c838:	4607      	mov	r7, r0
 800c83a:	4688      	mov	r8, r1
 800c83c:	4614      	mov	r4, r2
 800c83e:	2600      	movs	r6, #0
 800c840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c844:	f1b9 0901 	subs.w	r9, r9, #1
 800c848:	d505      	bpl.n	800c856 <_fwalk_sglue+0x22>
 800c84a:	6824      	ldr	r4, [r4, #0]
 800c84c:	2c00      	cmp	r4, #0
 800c84e:	d1f7      	bne.n	800c840 <_fwalk_sglue+0xc>
 800c850:	4630      	mov	r0, r6
 800c852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c856:	89ab      	ldrh	r3, [r5, #12]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d907      	bls.n	800c86c <_fwalk_sglue+0x38>
 800c85c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c860:	3301      	adds	r3, #1
 800c862:	d003      	beq.n	800c86c <_fwalk_sglue+0x38>
 800c864:	4629      	mov	r1, r5
 800c866:	4638      	mov	r0, r7
 800c868:	47c0      	blx	r8
 800c86a:	4306      	orrs	r6, r0
 800c86c:	3568      	adds	r5, #104	@ 0x68
 800c86e:	e7e9      	b.n	800c844 <_fwalk_sglue+0x10>

0800c870 <sniprintf>:
 800c870:	b40c      	push	{r2, r3}
 800c872:	b530      	push	{r4, r5, lr}
 800c874:	4b18      	ldr	r3, [pc, #96]	@ (800c8d8 <sniprintf+0x68>)
 800c876:	1e0c      	subs	r4, r1, #0
 800c878:	681d      	ldr	r5, [r3, #0]
 800c87a:	b09d      	sub	sp, #116	@ 0x74
 800c87c:	da08      	bge.n	800c890 <sniprintf+0x20>
 800c87e:	238b      	movs	r3, #139	@ 0x8b
 800c880:	602b      	str	r3, [r5, #0]
 800c882:	f04f 30ff 	mov.w	r0, #4294967295
 800c886:	b01d      	add	sp, #116	@ 0x74
 800c888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c88c:	b002      	add	sp, #8
 800c88e:	4770      	bx	lr
 800c890:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c894:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c898:	f04f 0300 	mov.w	r3, #0
 800c89c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c89e:	bf14      	ite	ne
 800c8a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c8a4:	4623      	moveq	r3, r4
 800c8a6:	9304      	str	r3, [sp, #16]
 800c8a8:	9307      	str	r3, [sp, #28]
 800c8aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c8ae:	9002      	str	r0, [sp, #8]
 800c8b0:	9006      	str	r0, [sp, #24]
 800c8b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c8b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c8b8:	ab21      	add	r3, sp, #132	@ 0x84
 800c8ba:	a902      	add	r1, sp, #8
 800c8bc:	4628      	mov	r0, r5
 800c8be:	9301      	str	r3, [sp, #4]
 800c8c0:	f001 fb9a 	bl	800dff8 <_svfiprintf_r>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	bfbc      	itt	lt
 800c8c8:	238b      	movlt	r3, #139	@ 0x8b
 800c8ca:	602b      	strlt	r3, [r5, #0]
 800c8cc:	2c00      	cmp	r4, #0
 800c8ce:	d0da      	beq.n	800c886 <sniprintf+0x16>
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	701a      	strb	r2, [r3, #0]
 800c8d6:	e7d6      	b.n	800c886 <sniprintf+0x16>
 800c8d8:	240000ac 	.word	0x240000ac

0800c8dc <__sread>:
 800c8dc:	b510      	push	{r4, lr}
 800c8de:	460c      	mov	r4, r1
 800c8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e4:	f000 f86c 	bl	800c9c0 <_read_r>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	bfab      	itete	ge
 800c8ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c8ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c8f0:	181b      	addge	r3, r3, r0
 800c8f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c8f6:	bfac      	ite	ge
 800c8f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c8fa:	81a3      	strhlt	r3, [r4, #12]
 800c8fc:	bd10      	pop	{r4, pc}

0800c8fe <__swrite>:
 800c8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c902:	461f      	mov	r7, r3
 800c904:	898b      	ldrh	r3, [r1, #12]
 800c906:	05db      	lsls	r3, r3, #23
 800c908:	4605      	mov	r5, r0
 800c90a:	460c      	mov	r4, r1
 800c90c:	4616      	mov	r6, r2
 800c90e:	d505      	bpl.n	800c91c <__swrite+0x1e>
 800c910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c914:	2302      	movs	r3, #2
 800c916:	2200      	movs	r2, #0
 800c918:	f000 f840 	bl	800c99c <_lseek_r>
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c922:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c926:	81a3      	strh	r3, [r4, #12]
 800c928:	4632      	mov	r2, r6
 800c92a:	463b      	mov	r3, r7
 800c92c:	4628      	mov	r0, r5
 800c92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c932:	f000 b857 	b.w	800c9e4 <_write_r>

0800c936 <__sseek>:
 800c936:	b510      	push	{r4, lr}
 800c938:	460c      	mov	r4, r1
 800c93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93e:	f000 f82d 	bl	800c99c <_lseek_r>
 800c942:	1c43      	adds	r3, r0, #1
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	bf15      	itete	ne
 800c948:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c94a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c94e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c952:	81a3      	strheq	r3, [r4, #12]
 800c954:	bf18      	it	ne
 800c956:	81a3      	strhne	r3, [r4, #12]
 800c958:	bd10      	pop	{r4, pc}

0800c95a <__sclose>:
 800c95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c95e:	f000 b80d 	b.w	800c97c <_close_r>

0800c962 <memset>:
 800c962:	4402      	add	r2, r0
 800c964:	4603      	mov	r3, r0
 800c966:	4293      	cmp	r3, r2
 800c968:	d100      	bne.n	800c96c <memset+0xa>
 800c96a:	4770      	bx	lr
 800c96c:	f803 1b01 	strb.w	r1, [r3], #1
 800c970:	e7f9      	b.n	800c966 <memset+0x4>
	...

0800c974 <_localeconv_r>:
 800c974:	4800      	ldr	r0, [pc, #0]	@ (800c978 <_localeconv_r+0x4>)
 800c976:	4770      	bx	lr
 800c978:	240001ec 	.word	0x240001ec

0800c97c <_close_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	4d06      	ldr	r5, [pc, #24]	@ (800c998 <_close_r+0x1c>)
 800c980:	2300      	movs	r3, #0
 800c982:	4604      	mov	r4, r0
 800c984:	4608      	mov	r0, r1
 800c986:	602b      	str	r3, [r5, #0]
 800c988:	f7f4 fd26 	bl	80013d8 <_close>
 800c98c:	1c43      	adds	r3, r0, #1
 800c98e:	d102      	bne.n	800c996 <_close_r+0x1a>
 800c990:	682b      	ldr	r3, [r5, #0]
 800c992:	b103      	cbz	r3, 800c996 <_close_r+0x1a>
 800c994:	6023      	str	r3, [r4, #0]
 800c996:	bd38      	pop	{r3, r4, r5, pc}
 800c998:	24001954 	.word	0x24001954

0800c99c <_lseek_r>:
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4d07      	ldr	r5, [pc, #28]	@ (800c9bc <_lseek_r+0x20>)
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	4608      	mov	r0, r1
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	602a      	str	r2, [r5, #0]
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	f7f4 fd3b 	bl	8001426 <_lseek>
 800c9b0:	1c43      	adds	r3, r0, #1
 800c9b2:	d102      	bne.n	800c9ba <_lseek_r+0x1e>
 800c9b4:	682b      	ldr	r3, [r5, #0]
 800c9b6:	b103      	cbz	r3, 800c9ba <_lseek_r+0x1e>
 800c9b8:	6023      	str	r3, [r4, #0]
 800c9ba:	bd38      	pop	{r3, r4, r5, pc}
 800c9bc:	24001954 	.word	0x24001954

0800c9c0 <_read_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4d07      	ldr	r5, [pc, #28]	@ (800c9e0 <_read_r+0x20>)
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	4608      	mov	r0, r1
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	602a      	str	r2, [r5, #0]
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	f7f4 fcc9 	bl	8001366 <_read>
 800c9d4:	1c43      	adds	r3, r0, #1
 800c9d6:	d102      	bne.n	800c9de <_read_r+0x1e>
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	b103      	cbz	r3, 800c9de <_read_r+0x1e>
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	24001954 	.word	0x24001954

0800c9e4 <_write_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4d07      	ldr	r5, [pc, #28]	@ (800ca04 <_write_r+0x20>)
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	4608      	mov	r0, r1
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	602a      	str	r2, [r5, #0]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	f7f4 fcd4 	bl	80013a0 <_write>
 800c9f8:	1c43      	adds	r3, r0, #1
 800c9fa:	d102      	bne.n	800ca02 <_write_r+0x1e>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	b103      	cbz	r3, 800ca02 <_write_r+0x1e>
 800ca00:	6023      	str	r3, [r4, #0]
 800ca02:	bd38      	pop	{r3, r4, r5, pc}
 800ca04:	24001954 	.word	0x24001954

0800ca08 <__errno>:
 800ca08:	4b01      	ldr	r3, [pc, #4]	@ (800ca10 <__errno+0x8>)
 800ca0a:	6818      	ldr	r0, [r3, #0]
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	240000ac 	.word	0x240000ac

0800ca14 <__libc_init_array>:
 800ca14:	b570      	push	{r4, r5, r6, lr}
 800ca16:	4d0d      	ldr	r5, [pc, #52]	@ (800ca4c <__libc_init_array+0x38>)
 800ca18:	4c0d      	ldr	r4, [pc, #52]	@ (800ca50 <__libc_init_array+0x3c>)
 800ca1a:	1b64      	subs	r4, r4, r5
 800ca1c:	10a4      	asrs	r4, r4, #2
 800ca1e:	2600      	movs	r6, #0
 800ca20:	42a6      	cmp	r6, r4
 800ca22:	d109      	bne.n	800ca38 <__libc_init_array+0x24>
 800ca24:	4d0b      	ldr	r5, [pc, #44]	@ (800ca54 <__libc_init_array+0x40>)
 800ca26:	4c0c      	ldr	r4, [pc, #48]	@ (800ca58 <__libc_init_array+0x44>)
 800ca28:	f001 fff8 	bl	800ea1c <_init>
 800ca2c:	1b64      	subs	r4, r4, r5
 800ca2e:	10a4      	asrs	r4, r4, #2
 800ca30:	2600      	movs	r6, #0
 800ca32:	42a6      	cmp	r6, r4
 800ca34:	d105      	bne.n	800ca42 <__libc_init_array+0x2e>
 800ca36:	bd70      	pop	{r4, r5, r6, pc}
 800ca38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca3c:	4798      	blx	r3
 800ca3e:	3601      	adds	r6, #1
 800ca40:	e7ee      	b.n	800ca20 <__libc_init_array+0xc>
 800ca42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca46:	4798      	blx	r3
 800ca48:	3601      	adds	r6, #1
 800ca4a:	e7f2      	b.n	800ca32 <__libc_init_array+0x1e>
 800ca4c:	08034e5c 	.word	0x08034e5c
 800ca50:	08034e5c 	.word	0x08034e5c
 800ca54:	08034e5c 	.word	0x08034e5c
 800ca58:	08034e60 	.word	0x08034e60

0800ca5c <__retarget_lock_init_recursive>:
 800ca5c:	4770      	bx	lr

0800ca5e <__retarget_lock_acquire_recursive>:
 800ca5e:	4770      	bx	lr

0800ca60 <__retarget_lock_release_recursive>:
 800ca60:	4770      	bx	lr

0800ca62 <memcpy>:
 800ca62:	440a      	add	r2, r1
 800ca64:	4291      	cmp	r1, r2
 800ca66:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca6a:	d100      	bne.n	800ca6e <memcpy+0xc>
 800ca6c:	4770      	bx	lr
 800ca6e:	b510      	push	{r4, lr}
 800ca70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca78:	4291      	cmp	r1, r2
 800ca7a:	d1f9      	bne.n	800ca70 <memcpy+0xe>
 800ca7c:	bd10      	pop	{r4, pc}

0800ca7e <quorem>:
 800ca7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca82:	6903      	ldr	r3, [r0, #16]
 800ca84:	690c      	ldr	r4, [r1, #16]
 800ca86:	42a3      	cmp	r3, r4
 800ca88:	4607      	mov	r7, r0
 800ca8a:	db7e      	blt.n	800cb8a <quorem+0x10c>
 800ca8c:	3c01      	subs	r4, #1
 800ca8e:	f101 0814 	add.w	r8, r1, #20
 800ca92:	00a3      	lsls	r3, r4, #2
 800ca94:	f100 0514 	add.w	r5, r0, #20
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca9e:	9301      	str	r3, [sp, #4]
 800caa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800caa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800caa8:	3301      	adds	r3, #1
 800caaa:	429a      	cmp	r2, r3
 800caac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cab0:	fbb2 f6f3 	udiv	r6, r2, r3
 800cab4:	d32e      	bcc.n	800cb14 <quorem+0x96>
 800cab6:	f04f 0a00 	mov.w	sl, #0
 800caba:	46c4      	mov	ip, r8
 800cabc:	46ae      	mov	lr, r5
 800cabe:	46d3      	mov	fp, sl
 800cac0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cac4:	b298      	uxth	r0, r3
 800cac6:	fb06 a000 	mla	r0, r6, r0, sl
 800caca:	0c02      	lsrs	r2, r0, #16
 800cacc:	0c1b      	lsrs	r3, r3, #16
 800cace:	fb06 2303 	mla	r3, r6, r3, r2
 800cad2:	f8de 2000 	ldr.w	r2, [lr]
 800cad6:	b280      	uxth	r0, r0
 800cad8:	b292      	uxth	r2, r2
 800cada:	1a12      	subs	r2, r2, r0
 800cadc:	445a      	add	r2, fp
 800cade:	f8de 0000 	ldr.w	r0, [lr]
 800cae2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800caec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800caf0:	b292      	uxth	r2, r2
 800caf2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800caf6:	45e1      	cmp	r9, ip
 800caf8:	f84e 2b04 	str.w	r2, [lr], #4
 800cafc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cb00:	d2de      	bcs.n	800cac0 <quorem+0x42>
 800cb02:	9b00      	ldr	r3, [sp, #0]
 800cb04:	58eb      	ldr	r3, [r5, r3]
 800cb06:	b92b      	cbnz	r3, 800cb14 <quorem+0x96>
 800cb08:	9b01      	ldr	r3, [sp, #4]
 800cb0a:	3b04      	subs	r3, #4
 800cb0c:	429d      	cmp	r5, r3
 800cb0e:	461a      	mov	r2, r3
 800cb10:	d32f      	bcc.n	800cb72 <quorem+0xf4>
 800cb12:	613c      	str	r4, [r7, #16]
 800cb14:	4638      	mov	r0, r7
 800cb16:	f001 f90b 	bl	800dd30 <__mcmp>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	db25      	blt.n	800cb6a <quorem+0xec>
 800cb1e:	4629      	mov	r1, r5
 800cb20:	2000      	movs	r0, #0
 800cb22:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb26:	f8d1 c000 	ldr.w	ip, [r1]
 800cb2a:	fa1f fe82 	uxth.w	lr, r2
 800cb2e:	fa1f f38c 	uxth.w	r3, ip
 800cb32:	eba3 030e 	sub.w	r3, r3, lr
 800cb36:	4403      	add	r3, r0
 800cb38:	0c12      	lsrs	r2, r2, #16
 800cb3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cb3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb48:	45c1      	cmp	r9, r8
 800cb4a:	f841 3b04 	str.w	r3, [r1], #4
 800cb4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cb52:	d2e6      	bcs.n	800cb22 <quorem+0xa4>
 800cb54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb5c:	b922      	cbnz	r2, 800cb68 <quorem+0xea>
 800cb5e:	3b04      	subs	r3, #4
 800cb60:	429d      	cmp	r5, r3
 800cb62:	461a      	mov	r2, r3
 800cb64:	d30b      	bcc.n	800cb7e <quorem+0x100>
 800cb66:	613c      	str	r4, [r7, #16]
 800cb68:	3601      	adds	r6, #1
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	b003      	add	sp, #12
 800cb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb72:	6812      	ldr	r2, [r2, #0]
 800cb74:	3b04      	subs	r3, #4
 800cb76:	2a00      	cmp	r2, #0
 800cb78:	d1cb      	bne.n	800cb12 <quorem+0x94>
 800cb7a:	3c01      	subs	r4, #1
 800cb7c:	e7c6      	b.n	800cb0c <quorem+0x8e>
 800cb7e:	6812      	ldr	r2, [r2, #0]
 800cb80:	3b04      	subs	r3, #4
 800cb82:	2a00      	cmp	r2, #0
 800cb84:	d1ef      	bne.n	800cb66 <quorem+0xe8>
 800cb86:	3c01      	subs	r4, #1
 800cb88:	e7ea      	b.n	800cb60 <quorem+0xe2>
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	e7ee      	b.n	800cb6c <quorem+0xee>
	...

0800cb90 <_dtoa_r>:
 800cb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	ed2d 8b02 	vpush	{d8}
 800cb98:	69c7      	ldr	r7, [r0, #28]
 800cb9a:	b091      	sub	sp, #68	@ 0x44
 800cb9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cba0:	ec55 4b10 	vmov	r4, r5, d0
 800cba4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800cba6:	9107      	str	r1, [sp, #28]
 800cba8:	4681      	mov	r9, r0
 800cbaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbac:	930d      	str	r3, [sp, #52]	@ 0x34
 800cbae:	b97f      	cbnz	r7, 800cbd0 <_dtoa_r+0x40>
 800cbb0:	2010      	movs	r0, #16
 800cbb2:	f000 fd95 	bl	800d6e0 <malloc>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	f8c9 001c 	str.w	r0, [r9, #28]
 800cbbc:	b920      	cbnz	r0, 800cbc8 <_dtoa_r+0x38>
 800cbbe:	4ba0      	ldr	r3, [pc, #640]	@ (800ce40 <_dtoa_r+0x2b0>)
 800cbc0:	21ef      	movs	r1, #239	@ 0xef
 800cbc2:	48a0      	ldr	r0, [pc, #640]	@ (800ce44 <_dtoa_r+0x2b4>)
 800cbc4:	f001 fdc0 	bl	800e748 <__assert_func>
 800cbc8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cbcc:	6007      	str	r7, [r0, #0]
 800cbce:	60c7      	str	r7, [r0, #12]
 800cbd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cbd4:	6819      	ldr	r1, [r3, #0]
 800cbd6:	b159      	cbz	r1, 800cbf0 <_dtoa_r+0x60>
 800cbd8:	685a      	ldr	r2, [r3, #4]
 800cbda:	604a      	str	r2, [r1, #4]
 800cbdc:	2301      	movs	r3, #1
 800cbde:	4093      	lsls	r3, r2
 800cbe0:	608b      	str	r3, [r1, #8]
 800cbe2:	4648      	mov	r0, r9
 800cbe4:	f000 fe72 	bl	800d8cc <_Bfree>
 800cbe8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cbec:	2200      	movs	r2, #0
 800cbee:	601a      	str	r2, [r3, #0]
 800cbf0:	1e2b      	subs	r3, r5, #0
 800cbf2:	bfbb      	ittet	lt
 800cbf4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cbf8:	9303      	strlt	r3, [sp, #12]
 800cbfa:	2300      	movge	r3, #0
 800cbfc:	2201      	movlt	r2, #1
 800cbfe:	bfac      	ite	ge
 800cc00:	6033      	strge	r3, [r6, #0]
 800cc02:	6032      	strlt	r2, [r6, #0]
 800cc04:	4b90      	ldr	r3, [pc, #576]	@ (800ce48 <_dtoa_r+0x2b8>)
 800cc06:	9e03      	ldr	r6, [sp, #12]
 800cc08:	43b3      	bics	r3, r6
 800cc0a:	d110      	bne.n	800cc2e <_dtoa_r+0x9e>
 800cc0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc0e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cc18:	4323      	orrs	r3, r4
 800cc1a:	f000 84e6 	beq.w	800d5ea <_dtoa_r+0xa5a>
 800cc1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc20:	4f8a      	ldr	r7, [pc, #552]	@ (800ce4c <_dtoa_r+0x2bc>)
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f000 84e8 	beq.w	800d5f8 <_dtoa_r+0xa68>
 800cc28:	1cfb      	adds	r3, r7, #3
 800cc2a:	f000 bce3 	b.w	800d5f4 <_dtoa_r+0xa64>
 800cc2e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cc32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3a:	d10a      	bne.n	800cc52 <_dtoa_r+0xc2>
 800cc3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc3e:	2301      	movs	r3, #1
 800cc40:	6013      	str	r3, [r2, #0]
 800cc42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc44:	b113      	cbz	r3, 800cc4c <_dtoa_r+0xbc>
 800cc46:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cc48:	4b81      	ldr	r3, [pc, #516]	@ (800ce50 <_dtoa_r+0x2c0>)
 800cc4a:	6013      	str	r3, [r2, #0]
 800cc4c:	4f81      	ldr	r7, [pc, #516]	@ (800ce54 <_dtoa_r+0x2c4>)
 800cc4e:	f000 bcd3 	b.w	800d5f8 <_dtoa_r+0xa68>
 800cc52:	aa0e      	add	r2, sp, #56	@ 0x38
 800cc54:	a90f      	add	r1, sp, #60	@ 0x3c
 800cc56:	4648      	mov	r0, r9
 800cc58:	eeb0 0b48 	vmov.f64	d0, d8
 800cc5c:	f001 f918 	bl	800de90 <__d2b>
 800cc60:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cc64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc66:	9001      	str	r0, [sp, #4]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d045      	beq.n	800ccf8 <_dtoa_r+0x168>
 800cc6c:	eeb0 7b48 	vmov.f64	d7, d8
 800cc70:	ee18 1a90 	vmov	r1, s17
 800cc74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cc78:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cc7c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cc80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cc84:	2500      	movs	r5, #0
 800cc86:	ee07 1a90 	vmov	s15, r1
 800cc8a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cc8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ce28 <_dtoa_r+0x298>
 800cc92:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cc96:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ce30 <_dtoa_r+0x2a0>
 800cc9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cc9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ce38 <_dtoa_r+0x2a8>
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ccaa:	eeb0 7b46 	vmov.f64	d7, d6
 800ccae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ccb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ccb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ccba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccbe:	ee16 8a90 	vmov	r8, s13
 800ccc2:	d508      	bpl.n	800ccd6 <_dtoa_r+0x146>
 800ccc4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ccc8:	eeb4 6b47 	vcmp.f64	d6, d7
 800cccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd0:	bf18      	it	ne
 800ccd2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800ccd6:	f1b8 0f16 	cmp.w	r8, #22
 800ccda:	d82b      	bhi.n	800cd34 <_dtoa_r+0x1a4>
 800ccdc:	495e      	ldr	r1, [pc, #376]	@ (800ce58 <_dtoa_r+0x2c8>)
 800ccde:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800cce2:	ed91 7b00 	vldr	d7, [r1]
 800cce6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ccea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccee:	d501      	bpl.n	800ccf4 <_dtoa_r+0x164>
 800ccf0:	f108 38ff 	add.w	r8, r8, #4294967295
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	e01e      	b.n	800cd36 <_dtoa_r+0x1a6>
 800ccf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccfa:	4413      	add	r3, r2
 800ccfc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800cd00:	2920      	cmp	r1, #32
 800cd02:	bfc1      	itttt	gt
 800cd04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800cd08:	408e      	lslgt	r6, r1
 800cd0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800cd0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800cd12:	bfd6      	itet	le
 800cd14:	f1c1 0120 	rsble	r1, r1, #32
 800cd18:	4331      	orrgt	r1, r6
 800cd1a:	fa04 f101 	lslle.w	r1, r4, r1
 800cd1e:	ee07 1a90 	vmov	s15, r1
 800cd22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cd26:	3b01      	subs	r3, #1
 800cd28:	ee17 1a90 	vmov	r1, s15
 800cd2c:	2501      	movs	r5, #1
 800cd2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800cd32:	e7a8      	b.n	800cc86 <_dtoa_r+0xf6>
 800cd34:	2101      	movs	r1, #1
 800cd36:	1ad2      	subs	r2, r2, r3
 800cd38:	1e53      	subs	r3, r2, #1
 800cd3a:	9306      	str	r3, [sp, #24]
 800cd3c:	bf45      	ittet	mi
 800cd3e:	f1c2 0301 	rsbmi	r3, r2, #1
 800cd42:	9304      	strmi	r3, [sp, #16]
 800cd44:	2300      	movpl	r3, #0
 800cd46:	2300      	movmi	r3, #0
 800cd48:	bf4c      	ite	mi
 800cd4a:	9306      	strmi	r3, [sp, #24]
 800cd4c:	9304      	strpl	r3, [sp, #16]
 800cd4e:	f1b8 0f00 	cmp.w	r8, #0
 800cd52:	910c      	str	r1, [sp, #48]	@ 0x30
 800cd54:	db18      	blt.n	800cd88 <_dtoa_r+0x1f8>
 800cd56:	9b06      	ldr	r3, [sp, #24]
 800cd58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800cd5c:	4443      	add	r3, r8
 800cd5e:	9306      	str	r3, [sp, #24]
 800cd60:	2300      	movs	r3, #0
 800cd62:	9a07      	ldr	r2, [sp, #28]
 800cd64:	2a09      	cmp	r2, #9
 800cd66:	d845      	bhi.n	800cdf4 <_dtoa_r+0x264>
 800cd68:	2a05      	cmp	r2, #5
 800cd6a:	bfc4      	itt	gt
 800cd6c:	3a04      	subgt	r2, #4
 800cd6e:	9207      	strgt	r2, [sp, #28]
 800cd70:	9a07      	ldr	r2, [sp, #28]
 800cd72:	f1a2 0202 	sub.w	r2, r2, #2
 800cd76:	bfcc      	ite	gt
 800cd78:	2400      	movgt	r4, #0
 800cd7a:	2401      	movle	r4, #1
 800cd7c:	2a03      	cmp	r2, #3
 800cd7e:	d844      	bhi.n	800ce0a <_dtoa_r+0x27a>
 800cd80:	e8df f002 	tbb	[pc, r2]
 800cd84:	0b173634 	.word	0x0b173634
 800cd88:	9b04      	ldr	r3, [sp, #16]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	eba3 0308 	sub.w	r3, r3, r8
 800cd90:	9304      	str	r3, [sp, #16]
 800cd92:	920a      	str	r2, [sp, #40]	@ 0x28
 800cd94:	f1c8 0300 	rsb	r3, r8, #0
 800cd98:	e7e3      	b.n	800cd62 <_dtoa_r+0x1d2>
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	9208      	str	r2, [sp, #32]
 800cd9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cda0:	eb08 0b02 	add.w	fp, r8, r2
 800cda4:	f10b 0a01 	add.w	sl, fp, #1
 800cda8:	4652      	mov	r2, sl
 800cdaa:	2a01      	cmp	r2, #1
 800cdac:	bfb8      	it	lt
 800cdae:	2201      	movlt	r2, #1
 800cdb0:	e006      	b.n	800cdc0 <_dtoa_r+0x230>
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	9208      	str	r2, [sp, #32]
 800cdb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdb8:	2a00      	cmp	r2, #0
 800cdba:	dd29      	ble.n	800ce10 <_dtoa_r+0x280>
 800cdbc:	4693      	mov	fp, r2
 800cdbe:	4692      	mov	sl, r2
 800cdc0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	2004      	movs	r0, #4
 800cdc8:	f100 0614 	add.w	r6, r0, #20
 800cdcc:	4296      	cmp	r6, r2
 800cdce:	d926      	bls.n	800ce1e <_dtoa_r+0x28e>
 800cdd0:	6079      	str	r1, [r7, #4]
 800cdd2:	4648      	mov	r0, r9
 800cdd4:	9305      	str	r3, [sp, #20]
 800cdd6:	f000 fd39 	bl	800d84c <_Balloc>
 800cdda:	9b05      	ldr	r3, [sp, #20]
 800cddc:	4607      	mov	r7, r0
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d13e      	bne.n	800ce60 <_dtoa_r+0x2d0>
 800cde2:	4b1e      	ldr	r3, [pc, #120]	@ (800ce5c <_dtoa_r+0x2cc>)
 800cde4:	4602      	mov	r2, r0
 800cde6:	f240 11af 	movw	r1, #431	@ 0x1af
 800cdea:	e6ea      	b.n	800cbc2 <_dtoa_r+0x32>
 800cdec:	2200      	movs	r2, #0
 800cdee:	e7e1      	b.n	800cdb4 <_dtoa_r+0x224>
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	e7d3      	b.n	800cd9c <_dtoa_r+0x20c>
 800cdf4:	2401      	movs	r4, #1
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cdfc:	f04f 3bff 	mov.w	fp, #4294967295
 800ce00:	2100      	movs	r1, #0
 800ce02:	46da      	mov	sl, fp
 800ce04:	2212      	movs	r2, #18
 800ce06:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce08:	e7da      	b.n	800cdc0 <_dtoa_r+0x230>
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	9208      	str	r2, [sp, #32]
 800ce0e:	e7f5      	b.n	800cdfc <_dtoa_r+0x26c>
 800ce10:	f04f 0b01 	mov.w	fp, #1
 800ce14:	46da      	mov	sl, fp
 800ce16:	465a      	mov	r2, fp
 800ce18:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ce1c:	e7d0      	b.n	800cdc0 <_dtoa_r+0x230>
 800ce1e:	3101      	adds	r1, #1
 800ce20:	0040      	lsls	r0, r0, #1
 800ce22:	e7d1      	b.n	800cdc8 <_dtoa_r+0x238>
 800ce24:	f3af 8000 	nop.w
 800ce28:	636f4361 	.word	0x636f4361
 800ce2c:	3fd287a7 	.word	0x3fd287a7
 800ce30:	8b60c8b3 	.word	0x8b60c8b3
 800ce34:	3fc68a28 	.word	0x3fc68a28
 800ce38:	509f79fb 	.word	0x509f79fb
 800ce3c:	3fd34413 	.word	0x3fd34413
 800ce40:	08034b1d 	.word	0x08034b1d
 800ce44:	08034b34 	.word	0x08034b34
 800ce48:	7ff00000 	.word	0x7ff00000
 800ce4c:	08034b19 	.word	0x08034b19
 800ce50:	08034aed 	.word	0x08034aed
 800ce54:	08034aec 	.word	0x08034aec
 800ce58:	08034c88 	.word	0x08034c88
 800ce5c:	08034b8c 	.word	0x08034b8c
 800ce60:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ce64:	f1ba 0f0e 	cmp.w	sl, #14
 800ce68:	6010      	str	r0, [r2, #0]
 800ce6a:	d86e      	bhi.n	800cf4a <_dtoa_r+0x3ba>
 800ce6c:	2c00      	cmp	r4, #0
 800ce6e:	d06c      	beq.n	800cf4a <_dtoa_r+0x3ba>
 800ce70:	f1b8 0f00 	cmp.w	r8, #0
 800ce74:	f340 80b4 	ble.w	800cfe0 <_dtoa_r+0x450>
 800ce78:	4ac8      	ldr	r2, [pc, #800]	@ (800d19c <_dtoa_r+0x60c>)
 800ce7a:	f008 010f 	and.w	r1, r8, #15
 800ce7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ce82:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ce86:	ed92 7b00 	vldr	d7, [r2]
 800ce8a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ce8e:	f000 809b 	beq.w	800cfc8 <_dtoa_r+0x438>
 800ce92:	4ac3      	ldr	r2, [pc, #780]	@ (800d1a0 <_dtoa_r+0x610>)
 800ce94:	ed92 6b08 	vldr	d6, [r2, #32]
 800ce98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ce9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cea0:	f001 010f 	and.w	r1, r1, #15
 800cea4:	2203      	movs	r2, #3
 800cea6:	48be      	ldr	r0, [pc, #760]	@ (800d1a0 <_dtoa_r+0x610>)
 800cea8:	2900      	cmp	r1, #0
 800ceaa:	f040 808f 	bne.w	800cfcc <_dtoa_r+0x43c>
 800ceae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ceb2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ceb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ceba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cebc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cec0:	2900      	cmp	r1, #0
 800cec2:	f000 80b3 	beq.w	800d02c <_dtoa_r+0x49c>
 800cec6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ceca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ced2:	f140 80ab 	bpl.w	800d02c <_dtoa_r+0x49c>
 800ced6:	f1ba 0f00 	cmp.w	sl, #0
 800ceda:	f000 80a7 	beq.w	800d02c <_dtoa_r+0x49c>
 800cede:	f1bb 0f00 	cmp.w	fp, #0
 800cee2:	dd30      	ble.n	800cf46 <_dtoa_r+0x3b6>
 800cee4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800cee8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ceec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cef0:	f108 31ff 	add.w	r1, r8, #4294967295
 800cef4:	9105      	str	r1, [sp, #20]
 800cef6:	3201      	adds	r2, #1
 800cef8:	465c      	mov	r4, fp
 800cefa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cefe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800cf02:	ee07 2a90 	vmov	s15, r2
 800cf06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cf0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cf0e:	ee15 2a90 	vmov	r2, s11
 800cf12:	ec51 0b15 	vmov	r0, r1, d5
 800cf16:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800cf1a:	2c00      	cmp	r4, #0
 800cf1c:	f040 808a 	bne.w	800d034 <_dtoa_r+0x4a4>
 800cf20:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cf24:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cf28:	ec41 0b17 	vmov	d7, r0, r1
 800cf2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf34:	f300 826a 	bgt.w	800d40c <_dtoa_r+0x87c>
 800cf38:	eeb1 7b47 	vneg.f64	d7, d7
 800cf3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf44:	d423      	bmi.n	800cf8e <_dtoa_r+0x3fe>
 800cf46:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cf4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	f2c0 8129 	blt.w	800d1a4 <_dtoa_r+0x614>
 800cf52:	f1b8 0f0e 	cmp.w	r8, #14
 800cf56:	f300 8125 	bgt.w	800d1a4 <_dtoa_r+0x614>
 800cf5a:	4b90      	ldr	r3, [pc, #576]	@ (800d19c <_dtoa_r+0x60c>)
 800cf5c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cf60:	ed93 6b00 	vldr	d6, [r3]
 800cf64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f280 80c8 	bge.w	800d0fc <_dtoa_r+0x56c>
 800cf6c:	f1ba 0f00 	cmp.w	sl, #0
 800cf70:	f300 80c4 	bgt.w	800d0fc <_dtoa_r+0x56c>
 800cf74:	d10b      	bne.n	800cf8e <_dtoa_r+0x3fe>
 800cf76:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cf7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cf7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8a:	f2c0 823c 	blt.w	800d406 <_dtoa_r+0x876>
 800cf8e:	2400      	movs	r4, #0
 800cf90:	4625      	mov	r5, r4
 800cf92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf94:	43db      	mvns	r3, r3
 800cf96:	9305      	str	r3, [sp, #20]
 800cf98:	463e      	mov	r6, r7
 800cf9a:	f04f 0800 	mov.w	r8, #0
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	4648      	mov	r0, r9
 800cfa2:	f000 fc93 	bl	800d8cc <_Bfree>
 800cfa6:	2d00      	cmp	r5, #0
 800cfa8:	f000 80a2 	beq.w	800d0f0 <_dtoa_r+0x560>
 800cfac:	f1b8 0f00 	cmp.w	r8, #0
 800cfb0:	d005      	beq.n	800cfbe <_dtoa_r+0x42e>
 800cfb2:	45a8      	cmp	r8, r5
 800cfb4:	d003      	beq.n	800cfbe <_dtoa_r+0x42e>
 800cfb6:	4641      	mov	r1, r8
 800cfb8:	4648      	mov	r0, r9
 800cfba:	f000 fc87 	bl	800d8cc <_Bfree>
 800cfbe:	4629      	mov	r1, r5
 800cfc0:	4648      	mov	r0, r9
 800cfc2:	f000 fc83 	bl	800d8cc <_Bfree>
 800cfc6:	e093      	b.n	800d0f0 <_dtoa_r+0x560>
 800cfc8:	2202      	movs	r2, #2
 800cfca:	e76c      	b.n	800cea6 <_dtoa_r+0x316>
 800cfcc:	07cc      	lsls	r4, r1, #31
 800cfce:	d504      	bpl.n	800cfda <_dtoa_r+0x44a>
 800cfd0:	ed90 6b00 	vldr	d6, [r0]
 800cfd4:	3201      	adds	r2, #1
 800cfd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cfda:	1049      	asrs	r1, r1, #1
 800cfdc:	3008      	adds	r0, #8
 800cfde:	e763      	b.n	800cea8 <_dtoa_r+0x318>
 800cfe0:	d022      	beq.n	800d028 <_dtoa_r+0x498>
 800cfe2:	f1c8 0100 	rsb	r1, r8, #0
 800cfe6:	4a6d      	ldr	r2, [pc, #436]	@ (800d19c <_dtoa_r+0x60c>)
 800cfe8:	f001 000f 	and.w	r0, r1, #15
 800cfec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cff0:	ed92 7b00 	vldr	d7, [r2]
 800cff4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cff8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cffc:	4868      	ldr	r0, [pc, #416]	@ (800d1a0 <_dtoa_r+0x610>)
 800cffe:	1109      	asrs	r1, r1, #4
 800d000:	2400      	movs	r4, #0
 800d002:	2202      	movs	r2, #2
 800d004:	b929      	cbnz	r1, 800d012 <_dtoa_r+0x482>
 800d006:	2c00      	cmp	r4, #0
 800d008:	f43f af57 	beq.w	800ceba <_dtoa_r+0x32a>
 800d00c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d010:	e753      	b.n	800ceba <_dtoa_r+0x32a>
 800d012:	07ce      	lsls	r6, r1, #31
 800d014:	d505      	bpl.n	800d022 <_dtoa_r+0x492>
 800d016:	ed90 6b00 	vldr	d6, [r0]
 800d01a:	3201      	adds	r2, #1
 800d01c:	2401      	movs	r4, #1
 800d01e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d022:	1049      	asrs	r1, r1, #1
 800d024:	3008      	adds	r0, #8
 800d026:	e7ed      	b.n	800d004 <_dtoa_r+0x474>
 800d028:	2202      	movs	r2, #2
 800d02a:	e746      	b.n	800ceba <_dtoa_r+0x32a>
 800d02c:	f8cd 8014 	str.w	r8, [sp, #20]
 800d030:	4654      	mov	r4, sl
 800d032:	e762      	b.n	800cefa <_dtoa_r+0x36a>
 800d034:	4a59      	ldr	r2, [pc, #356]	@ (800d19c <_dtoa_r+0x60c>)
 800d036:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d03a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d03e:	9a08      	ldr	r2, [sp, #32]
 800d040:	ec41 0b17 	vmov	d7, r0, r1
 800d044:	443c      	add	r4, r7
 800d046:	b34a      	cbz	r2, 800d09c <_dtoa_r+0x50c>
 800d048:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d04c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d050:	463e      	mov	r6, r7
 800d052:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d056:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d05a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d05e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d062:	ee14 2a90 	vmov	r2, s9
 800d066:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d06a:	3230      	adds	r2, #48	@ 0x30
 800d06c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d070:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d078:	f806 2b01 	strb.w	r2, [r6], #1
 800d07c:	d438      	bmi.n	800d0f0 <_dtoa_r+0x560>
 800d07e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d082:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08a:	d46e      	bmi.n	800d16a <_dtoa_r+0x5da>
 800d08c:	42a6      	cmp	r6, r4
 800d08e:	f43f af5a 	beq.w	800cf46 <_dtoa_r+0x3b6>
 800d092:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d096:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d09a:	e7e0      	b.n	800d05e <_dtoa_r+0x4ce>
 800d09c:	4621      	mov	r1, r4
 800d09e:	463e      	mov	r6, r7
 800d0a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d0a4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d0a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d0ac:	ee14 2a90 	vmov	r2, s9
 800d0b0:	3230      	adds	r2, #48	@ 0x30
 800d0b2:	f806 2b01 	strb.w	r2, [r6], #1
 800d0b6:	42a6      	cmp	r6, r4
 800d0b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d0bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d0c0:	d119      	bne.n	800d0f6 <_dtoa_r+0x566>
 800d0c2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d0c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d0ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d2:	dc4a      	bgt.n	800d16a <_dtoa_r+0x5da>
 800d0d4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d0d8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e0:	f57f af31 	bpl.w	800cf46 <_dtoa_r+0x3b6>
 800d0e4:	460e      	mov	r6, r1
 800d0e6:	3901      	subs	r1, #1
 800d0e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0ec:	2b30      	cmp	r3, #48	@ 0x30
 800d0ee:	d0f9      	beq.n	800d0e4 <_dtoa_r+0x554>
 800d0f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d0f4:	e027      	b.n	800d146 <_dtoa_r+0x5b6>
 800d0f6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d0fa:	e7d5      	b.n	800d0a8 <_dtoa_r+0x518>
 800d0fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d100:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d104:	463e      	mov	r6, r7
 800d106:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d10a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d10e:	ee15 3a10 	vmov	r3, s10
 800d112:	3330      	adds	r3, #48	@ 0x30
 800d114:	f806 3b01 	strb.w	r3, [r6], #1
 800d118:	1bf3      	subs	r3, r6, r7
 800d11a:	459a      	cmp	sl, r3
 800d11c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d120:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d124:	d132      	bne.n	800d18c <_dtoa_r+0x5fc>
 800d126:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d12a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d132:	dc18      	bgt.n	800d166 <_dtoa_r+0x5d6>
 800d134:	eeb4 7b46 	vcmp.f64	d7, d6
 800d138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d13c:	d103      	bne.n	800d146 <_dtoa_r+0x5b6>
 800d13e:	ee15 3a10 	vmov	r3, s10
 800d142:	07db      	lsls	r3, r3, #31
 800d144:	d40f      	bmi.n	800d166 <_dtoa_r+0x5d6>
 800d146:	9901      	ldr	r1, [sp, #4]
 800d148:	4648      	mov	r0, r9
 800d14a:	f000 fbbf 	bl	800d8cc <_Bfree>
 800d14e:	2300      	movs	r3, #0
 800d150:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d152:	7033      	strb	r3, [r6, #0]
 800d154:	f108 0301 	add.w	r3, r8, #1
 800d158:	6013      	str	r3, [r2, #0]
 800d15a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f000 824b 	beq.w	800d5f8 <_dtoa_r+0xa68>
 800d162:	601e      	str	r6, [r3, #0]
 800d164:	e248      	b.n	800d5f8 <_dtoa_r+0xa68>
 800d166:	f8cd 8014 	str.w	r8, [sp, #20]
 800d16a:	4633      	mov	r3, r6
 800d16c:	461e      	mov	r6, r3
 800d16e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d172:	2a39      	cmp	r2, #57	@ 0x39
 800d174:	d106      	bne.n	800d184 <_dtoa_r+0x5f4>
 800d176:	429f      	cmp	r7, r3
 800d178:	d1f8      	bne.n	800d16c <_dtoa_r+0x5dc>
 800d17a:	9a05      	ldr	r2, [sp, #20]
 800d17c:	3201      	adds	r2, #1
 800d17e:	9205      	str	r2, [sp, #20]
 800d180:	2230      	movs	r2, #48	@ 0x30
 800d182:	703a      	strb	r2, [r7, #0]
 800d184:	781a      	ldrb	r2, [r3, #0]
 800d186:	3201      	adds	r2, #1
 800d188:	701a      	strb	r2, [r3, #0]
 800d18a:	e7b1      	b.n	800d0f0 <_dtoa_r+0x560>
 800d18c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d190:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d198:	d1b5      	bne.n	800d106 <_dtoa_r+0x576>
 800d19a:	e7d4      	b.n	800d146 <_dtoa_r+0x5b6>
 800d19c:	08034c88 	.word	0x08034c88
 800d1a0:	08034c60 	.word	0x08034c60
 800d1a4:	9908      	ldr	r1, [sp, #32]
 800d1a6:	2900      	cmp	r1, #0
 800d1a8:	f000 80e9 	beq.w	800d37e <_dtoa_r+0x7ee>
 800d1ac:	9907      	ldr	r1, [sp, #28]
 800d1ae:	2901      	cmp	r1, #1
 800d1b0:	f300 80cb 	bgt.w	800d34a <_dtoa_r+0x7ba>
 800d1b4:	2d00      	cmp	r5, #0
 800d1b6:	f000 80c4 	beq.w	800d342 <_dtoa_r+0x7b2>
 800d1ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d1be:	9e04      	ldr	r6, [sp, #16]
 800d1c0:	461c      	mov	r4, r3
 800d1c2:	9305      	str	r3, [sp, #20]
 800d1c4:	9b04      	ldr	r3, [sp, #16]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	9b06      	ldr	r3, [sp, #24]
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	4413      	add	r3, r2
 800d1d0:	4648      	mov	r0, r9
 800d1d2:	9306      	str	r3, [sp, #24]
 800d1d4:	f000 fc2e 	bl	800da34 <__i2b>
 800d1d8:	9b05      	ldr	r3, [sp, #20]
 800d1da:	4605      	mov	r5, r0
 800d1dc:	b166      	cbz	r6, 800d1f8 <_dtoa_r+0x668>
 800d1de:	9a06      	ldr	r2, [sp, #24]
 800d1e0:	2a00      	cmp	r2, #0
 800d1e2:	dd09      	ble.n	800d1f8 <_dtoa_r+0x668>
 800d1e4:	42b2      	cmp	r2, r6
 800d1e6:	9904      	ldr	r1, [sp, #16]
 800d1e8:	bfa8      	it	ge
 800d1ea:	4632      	movge	r2, r6
 800d1ec:	1a89      	subs	r1, r1, r2
 800d1ee:	9104      	str	r1, [sp, #16]
 800d1f0:	9906      	ldr	r1, [sp, #24]
 800d1f2:	1ab6      	subs	r6, r6, r2
 800d1f4:	1a8a      	subs	r2, r1, r2
 800d1f6:	9206      	str	r2, [sp, #24]
 800d1f8:	b30b      	cbz	r3, 800d23e <_dtoa_r+0x6ae>
 800d1fa:	9a08      	ldr	r2, [sp, #32]
 800d1fc:	2a00      	cmp	r2, #0
 800d1fe:	f000 80c5 	beq.w	800d38c <_dtoa_r+0x7fc>
 800d202:	2c00      	cmp	r4, #0
 800d204:	f000 80bf 	beq.w	800d386 <_dtoa_r+0x7f6>
 800d208:	4629      	mov	r1, r5
 800d20a:	4622      	mov	r2, r4
 800d20c:	4648      	mov	r0, r9
 800d20e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d210:	f000 fcc8 	bl	800dba4 <__pow5mult>
 800d214:	9a01      	ldr	r2, [sp, #4]
 800d216:	4601      	mov	r1, r0
 800d218:	4605      	mov	r5, r0
 800d21a:	4648      	mov	r0, r9
 800d21c:	f000 fc20 	bl	800da60 <__multiply>
 800d220:	9901      	ldr	r1, [sp, #4]
 800d222:	9005      	str	r0, [sp, #20]
 800d224:	4648      	mov	r0, r9
 800d226:	f000 fb51 	bl	800d8cc <_Bfree>
 800d22a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d22c:	1b1b      	subs	r3, r3, r4
 800d22e:	f000 80b0 	beq.w	800d392 <_dtoa_r+0x802>
 800d232:	9905      	ldr	r1, [sp, #20]
 800d234:	461a      	mov	r2, r3
 800d236:	4648      	mov	r0, r9
 800d238:	f000 fcb4 	bl	800dba4 <__pow5mult>
 800d23c:	9001      	str	r0, [sp, #4]
 800d23e:	2101      	movs	r1, #1
 800d240:	4648      	mov	r0, r9
 800d242:	f000 fbf7 	bl	800da34 <__i2b>
 800d246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d248:	4604      	mov	r4, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f000 81da 	beq.w	800d604 <_dtoa_r+0xa74>
 800d250:	461a      	mov	r2, r3
 800d252:	4601      	mov	r1, r0
 800d254:	4648      	mov	r0, r9
 800d256:	f000 fca5 	bl	800dba4 <__pow5mult>
 800d25a:	9b07      	ldr	r3, [sp, #28]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	4604      	mov	r4, r0
 800d260:	f300 80a0 	bgt.w	800d3a4 <_dtoa_r+0x814>
 800d264:	9b02      	ldr	r3, [sp, #8]
 800d266:	2b00      	cmp	r3, #0
 800d268:	f040 8096 	bne.w	800d398 <_dtoa_r+0x808>
 800d26c:	9b03      	ldr	r3, [sp, #12]
 800d26e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d272:	2a00      	cmp	r2, #0
 800d274:	f040 8092 	bne.w	800d39c <_dtoa_r+0x80c>
 800d278:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d27c:	0d12      	lsrs	r2, r2, #20
 800d27e:	0512      	lsls	r2, r2, #20
 800d280:	2a00      	cmp	r2, #0
 800d282:	f000 808d 	beq.w	800d3a0 <_dtoa_r+0x810>
 800d286:	9b04      	ldr	r3, [sp, #16]
 800d288:	3301      	adds	r3, #1
 800d28a:	9304      	str	r3, [sp, #16]
 800d28c:	9b06      	ldr	r3, [sp, #24]
 800d28e:	3301      	adds	r3, #1
 800d290:	9306      	str	r3, [sp, #24]
 800d292:	2301      	movs	r3, #1
 800d294:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d296:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 81b9 	beq.w	800d610 <_dtoa_r+0xa80>
 800d29e:	6922      	ldr	r2, [r4, #16]
 800d2a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d2a4:	6910      	ldr	r0, [r2, #16]
 800d2a6:	f000 fb79 	bl	800d99c <__hi0bits>
 800d2aa:	f1c0 0020 	rsb	r0, r0, #32
 800d2ae:	9b06      	ldr	r3, [sp, #24]
 800d2b0:	4418      	add	r0, r3
 800d2b2:	f010 001f 	ands.w	r0, r0, #31
 800d2b6:	f000 8081 	beq.w	800d3bc <_dtoa_r+0x82c>
 800d2ba:	f1c0 0220 	rsb	r2, r0, #32
 800d2be:	2a04      	cmp	r2, #4
 800d2c0:	dd73      	ble.n	800d3aa <_dtoa_r+0x81a>
 800d2c2:	9b04      	ldr	r3, [sp, #16]
 800d2c4:	f1c0 001c 	rsb	r0, r0, #28
 800d2c8:	4403      	add	r3, r0
 800d2ca:	9304      	str	r3, [sp, #16]
 800d2cc:	9b06      	ldr	r3, [sp, #24]
 800d2ce:	4406      	add	r6, r0
 800d2d0:	4403      	add	r3, r0
 800d2d2:	9306      	str	r3, [sp, #24]
 800d2d4:	9b04      	ldr	r3, [sp, #16]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	dd05      	ble.n	800d2e6 <_dtoa_r+0x756>
 800d2da:	9901      	ldr	r1, [sp, #4]
 800d2dc:	461a      	mov	r2, r3
 800d2de:	4648      	mov	r0, r9
 800d2e0:	f000 fcba 	bl	800dc58 <__lshift>
 800d2e4:	9001      	str	r0, [sp, #4]
 800d2e6:	9b06      	ldr	r3, [sp, #24]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	dd05      	ble.n	800d2f8 <_dtoa_r+0x768>
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	4648      	mov	r0, r9
 800d2f2:	f000 fcb1 	bl	800dc58 <__lshift>
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d060      	beq.n	800d3c0 <_dtoa_r+0x830>
 800d2fe:	9801      	ldr	r0, [sp, #4]
 800d300:	4621      	mov	r1, r4
 800d302:	f000 fd15 	bl	800dd30 <__mcmp>
 800d306:	2800      	cmp	r0, #0
 800d308:	da5a      	bge.n	800d3c0 <_dtoa_r+0x830>
 800d30a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d30e:	9305      	str	r3, [sp, #20]
 800d310:	9901      	ldr	r1, [sp, #4]
 800d312:	2300      	movs	r3, #0
 800d314:	220a      	movs	r2, #10
 800d316:	4648      	mov	r0, r9
 800d318:	f000 fafa 	bl	800d910 <__multadd>
 800d31c:	9b08      	ldr	r3, [sp, #32]
 800d31e:	9001      	str	r0, [sp, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	f000 8177 	beq.w	800d614 <_dtoa_r+0xa84>
 800d326:	4629      	mov	r1, r5
 800d328:	2300      	movs	r3, #0
 800d32a:	220a      	movs	r2, #10
 800d32c:	4648      	mov	r0, r9
 800d32e:	f000 faef 	bl	800d910 <__multadd>
 800d332:	f1bb 0f00 	cmp.w	fp, #0
 800d336:	4605      	mov	r5, r0
 800d338:	dc6e      	bgt.n	800d418 <_dtoa_r+0x888>
 800d33a:	9b07      	ldr	r3, [sp, #28]
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	dc48      	bgt.n	800d3d2 <_dtoa_r+0x842>
 800d340:	e06a      	b.n	800d418 <_dtoa_r+0x888>
 800d342:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d344:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d348:	e739      	b.n	800d1be <_dtoa_r+0x62e>
 800d34a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d34e:	42a3      	cmp	r3, r4
 800d350:	db07      	blt.n	800d362 <_dtoa_r+0x7d2>
 800d352:	f1ba 0f00 	cmp.w	sl, #0
 800d356:	eba3 0404 	sub.w	r4, r3, r4
 800d35a:	db0b      	blt.n	800d374 <_dtoa_r+0x7e4>
 800d35c:	9e04      	ldr	r6, [sp, #16]
 800d35e:	4652      	mov	r2, sl
 800d360:	e72f      	b.n	800d1c2 <_dtoa_r+0x632>
 800d362:	1ae2      	subs	r2, r4, r3
 800d364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d366:	9e04      	ldr	r6, [sp, #16]
 800d368:	4413      	add	r3, r2
 800d36a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d36c:	4652      	mov	r2, sl
 800d36e:	4623      	mov	r3, r4
 800d370:	2400      	movs	r4, #0
 800d372:	e726      	b.n	800d1c2 <_dtoa_r+0x632>
 800d374:	9a04      	ldr	r2, [sp, #16]
 800d376:	eba2 060a 	sub.w	r6, r2, sl
 800d37a:	2200      	movs	r2, #0
 800d37c:	e721      	b.n	800d1c2 <_dtoa_r+0x632>
 800d37e:	9e04      	ldr	r6, [sp, #16]
 800d380:	9d08      	ldr	r5, [sp, #32]
 800d382:	461c      	mov	r4, r3
 800d384:	e72a      	b.n	800d1dc <_dtoa_r+0x64c>
 800d386:	9a01      	ldr	r2, [sp, #4]
 800d388:	9205      	str	r2, [sp, #20]
 800d38a:	e752      	b.n	800d232 <_dtoa_r+0x6a2>
 800d38c:	9901      	ldr	r1, [sp, #4]
 800d38e:	461a      	mov	r2, r3
 800d390:	e751      	b.n	800d236 <_dtoa_r+0x6a6>
 800d392:	9b05      	ldr	r3, [sp, #20]
 800d394:	9301      	str	r3, [sp, #4]
 800d396:	e752      	b.n	800d23e <_dtoa_r+0x6ae>
 800d398:	2300      	movs	r3, #0
 800d39a:	e77b      	b.n	800d294 <_dtoa_r+0x704>
 800d39c:	9b02      	ldr	r3, [sp, #8]
 800d39e:	e779      	b.n	800d294 <_dtoa_r+0x704>
 800d3a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d3a2:	e778      	b.n	800d296 <_dtoa_r+0x706>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3a8:	e779      	b.n	800d29e <_dtoa_r+0x70e>
 800d3aa:	d093      	beq.n	800d2d4 <_dtoa_r+0x744>
 800d3ac:	9b04      	ldr	r3, [sp, #16]
 800d3ae:	321c      	adds	r2, #28
 800d3b0:	4413      	add	r3, r2
 800d3b2:	9304      	str	r3, [sp, #16]
 800d3b4:	9b06      	ldr	r3, [sp, #24]
 800d3b6:	4416      	add	r6, r2
 800d3b8:	4413      	add	r3, r2
 800d3ba:	e78a      	b.n	800d2d2 <_dtoa_r+0x742>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	e7f5      	b.n	800d3ac <_dtoa_r+0x81c>
 800d3c0:	f1ba 0f00 	cmp.w	sl, #0
 800d3c4:	f8cd 8014 	str.w	r8, [sp, #20]
 800d3c8:	46d3      	mov	fp, sl
 800d3ca:	dc21      	bgt.n	800d410 <_dtoa_r+0x880>
 800d3cc:	9b07      	ldr	r3, [sp, #28]
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	dd1e      	ble.n	800d410 <_dtoa_r+0x880>
 800d3d2:	f1bb 0f00 	cmp.w	fp, #0
 800d3d6:	f47f addc 	bne.w	800cf92 <_dtoa_r+0x402>
 800d3da:	4621      	mov	r1, r4
 800d3dc:	465b      	mov	r3, fp
 800d3de:	2205      	movs	r2, #5
 800d3e0:	4648      	mov	r0, r9
 800d3e2:	f000 fa95 	bl	800d910 <__multadd>
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	9801      	ldr	r0, [sp, #4]
 800d3ec:	f000 fca0 	bl	800dd30 <__mcmp>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	f77f adce 	ble.w	800cf92 <_dtoa_r+0x402>
 800d3f6:	463e      	mov	r6, r7
 800d3f8:	2331      	movs	r3, #49	@ 0x31
 800d3fa:	f806 3b01 	strb.w	r3, [r6], #1
 800d3fe:	9b05      	ldr	r3, [sp, #20]
 800d400:	3301      	adds	r3, #1
 800d402:	9305      	str	r3, [sp, #20]
 800d404:	e5c9      	b.n	800cf9a <_dtoa_r+0x40a>
 800d406:	f8cd 8014 	str.w	r8, [sp, #20]
 800d40a:	4654      	mov	r4, sl
 800d40c:	4625      	mov	r5, r4
 800d40e:	e7f2      	b.n	800d3f6 <_dtoa_r+0x866>
 800d410:	9b08      	ldr	r3, [sp, #32]
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 8102 	beq.w	800d61c <_dtoa_r+0xa8c>
 800d418:	2e00      	cmp	r6, #0
 800d41a:	dd05      	ble.n	800d428 <_dtoa_r+0x898>
 800d41c:	4629      	mov	r1, r5
 800d41e:	4632      	mov	r2, r6
 800d420:	4648      	mov	r0, r9
 800d422:	f000 fc19 	bl	800dc58 <__lshift>
 800d426:	4605      	mov	r5, r0
 800d428:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d058      	beq.n	800d4e0 <_dtoa_r+0x950>
 800d42e:	6869      	ldr	r1, [r5, #4]
 800d430:	4648      	mov	r0, r9
 800d432:	f000 fa0b 	bl	800d84c <_Balloc>
 800d436:	4606      	mov	r6, r0
 800d438:	b928      	cbnz	r0, 800d446 <_dtoa_r+0x8b6>
 800d43a:	4b82      	ldr	r3, [pc, #520]	@ (800d644 <_dtoa_r+0xab4>)
 800d43c:	4602      	mov	r2, r0
 800d43e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d442:	f7ff bbbe 	b.w	800cbc2 <_dtoa_r+0x32>
 800d446:	692a      	ldr	r2, [r5, #16]
 800d448:	3202      	adds	r2, #2
 800d44a:	0092      	lsls	r2, r2, #2
 800d44c:	f105 010c 	add.w	r1, r5, #12
 800d450:	300c      	adds	r0, #12
 800d452:	f7ff fb06 	bl	800ca62 <memcpy>
 800d456:	2201      	movs	r2, #1
 800d458:	4631      	mov	r1, r6
 800d45a:	4648      	mov	r0, r9
 800d45c:	f000 fbfc 	bl	800dc58 <__lshift>
 800d460:	1c7b      	adds	r3, r7, #1
 800d462:	9304      	str	r3, [sp, #16]
 800d464:	eb07 030b 	add.w	r3, r7, fp
 800d468:	9309      	str	r3, [sp, #36]	@ 0x24
 800d46a:	9b02      	ldr	r3, [sp, #8]
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	46a8      	mov	r8, r5
 800d472:	9308      	str	r3, [sp, #32]
 800d474:	4605      	mov	r5, r0
 800d476:	9b04      	ldr	r3, [sp, #16]
 800d478:	9801      	ldr	r0, [sp, #4]
 800d47a:	4621      	mov	r1, r4
 800d47c:	f103 3bff 	add.w	fp, r3, #4294967295
 800d480:	f7ff fafd 	bl	800ca7e <quorem>
 800d484:	4641      	mov	r1, r8
 800d486:	9002      	str	r0, [sp, #8]
 800d488:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d48c:	9801      	ldr	r0, [sp, #4]
 800d48e:	f000 fc4f 	bl	800dd30 <__mcmp>
 800d492:	462a      	mov	r2, r5
 800d494:	9006      	str	r0, [sp, #24]
 800d496:	4621      	mov	r1, r4
 800d498:	4648      	mov	r0, r9
 800d49a:	f000 fc65 	bl	800dd68 <__mdiff>
 800d49e:	68c2      	ldr	r2, [r0, #12]
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	b9fa      	cbnz	r2, 800d4e4 <_dtoa_r+0x954>
 800d4a4:	4601      	mov	r1, r0
 800d4a6:	9801      	ldr	r0, [sp, #4]
 800d4a8:	f000 fc42 	bl	800dd30 <__mcmp>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4648      	mov	r0, r9
 800d4b2:	920a      	str	r2, [sp, #40]	@ 0x28
 800d4b4:	f000 fa0a 	bl	800d8cc <_Bfree>
 800d4b8:	9b07      	ldr	r3, [sp, #28]
 800d4ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4bc:	9e04      	ldr	r6, [sp, #16]
 800d4be:	ea42 0103 	orr.w	r1, r2, r3
 800d4c2:	9b08      	ldr	r3, [sp, #32]
 800d4c4:	4319      	orrs	r1, r3
 800d4c6:	d10f      	bne.n	800d4e8 <_dtoa_r+0x958>
 800d4c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d4cc:	d028      	beq.n	800d520 <_dtoa_r+0x990>
 800d4ce:	9b06      	ldr	r3, [sp, #24]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	dd02      	ble.n	800d4da <_dtoa_r+0x94a>
 800d4d4:	9b02      	ldr	r3, [sp, #8]
 800d4d6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d4da:	f88b a000 	strb.w	sl, [fp]
 800d4de:	e55e      	b.n	800cf9e <_dtoa_r+0x40e>
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	e7bd      	b.n	800d460 <_dtoa_r+0x8d0>
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	e7e2      	b.n	800d4ae <_dtoa_r+0x91e>
 800d4e8:	9b06      	ldr	r3, [sp, #24]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	db04      	blt.n	800d4f8 <_dtoa_r+0x968>
 800d4ee:	9907      	ldr	r1, [sp, #28]
 800d4f0:	430b      	orrs	r3, r1
 800d4f2:	9908      	ldr	r1, [sp, #32]
 800d4f4:	430b      	orrs	r3, r1
 800d4f6:	d120      	bne.n	800d53a <_dtoa_r+0x9aa>
 800d4f8:	2a00      	cmp	r2, #0
 800d4fa:	ddee      	ble.n	800d4da <_dtoa_r+0x94a>
 800d4fc:	9901      	ldr	r1, [sp, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	4648      	mov	r0, r9
 800d502:	f000 fba9 	bl	800dc58 <__lshift>
 800d506:	4621      	mov	r1, r4
 800d508:	9001      	str	r0, [sp, #4]
 800d50a:	f000 fc11 	bl	800dd30 <__mcmp>
 800d50e:	2800      	cmp	r0, #0
 800d510:	dc03      	bgt.n	800d51a <_dtoa_r+0x98a>
 800d512:	d1e2      	bne.n	800d4da <_dtoa_r+0x94a>
 800d514:	f01a 0f01 	tst.w	sl, #1
 800d518:	d0df      	beq.n	800d4da <_dtoa_r+0x94a>
 800d51a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d51e:	d1d9      	bne.n	800d4d4 <_dtoa_r+0x944>
 800d520:	2339      	movs	r3, #57	@ 0x39
 800d522:	f88b 3000 	strb.w	r3, [fp]
 800d526:	4633      	mov	r3, r6
 800d528:	461e      	mov	r6, r3
 800d52a:	3b01      	subs	r3, #1
 800d52c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d530:	2a39      	cmp	r2, #57	@ 0x39
 800d532:	d052      	beq.n	800d5da <_dtoa_r+0xa4a>
 800d534:	3201      	adds	r2, #1
 800d536:	701a      	strb	r2, [r3, #0]
 800d538:	e531      	b.n	800cf9e <_dtoa_r+0x40e>
 800d53a:	2a00      	cmp	r2, #0
 800d53c:	dd07      	ble.n	800d54e <_dtoa_r+0x9be>
 800d53e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d542:	d0ed      	beq.n	800d520 <_dtoa_r+0x990>
 800d544:	f10a 0301 	add.w	r3, sl, #1
 800d548:	f88b 3000 	strb.w	r3, [fp]
 800d54c:	e527      	b.n	800cf9e <_dtoa_r+0x40e>
 800d54e:	9b04      	ldr	r3, [sp, #16]
 800d550:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d552:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d556:	4293      	cmp	r3, r2
 800d558:	d029      	beq.n	800d5ae <_dtoa_r+0xa1e>
 800d55a:	9901      	ldr	r1, [sp, #4]
 800d55c:	2300      	movs	r3, #0
 800d55e:	220a      	movs	r2, #10
 800d560:	4648      	mov	r0, r9
 800d562:	f000 f9d5 	bl	800d910 <__multadd>
 800d566:	45a8      	cmp	r8, r5
 800d568:	9001      	str	r0, [sp, #4]
 800d56a:	f04f 0300 	mov.w	r3, #0
 800d56e:	f04f 020a 	mov.w	r2, #10
 800d572:	4641      	mov	r1, r8
 800d574:	4648      	mov	r0, r9
 800d576:	d107      	bne.n	800d588 <_dtoa_r+0x9f8>
 800d578:	f000 f9ca 	bl	800d910 <__multadd>
 800d57c:	4680      	mov	r8, r0
 800d57e:	4605      	mov	r5, r0
 800d580:	9b04      	ldr	r3, [sp, #16]
 800d582:	3301      	adds	r3, #1
 800d584:	9304      	str	r3, [sp, #16]
 800d586:	e776      	b.n	800d476 <_dtoa_r+0x8e6>
 800d588:	f000 f9c2 	bl	800d910 <__multadd>
 800d58c:	4629      	mov	r1, r5
 800d58e:	4680      	mov	r8, r0
 800d590:	2300      	movs	r3, #0
 800d592:	220a      	movs	r2, #10
 800d594:	4648      	mov	r0, r9
 800d596:	f000 f9bb 	bl	800d910 <__multadd>
 800d59a:	4605      	mov	r5, r0
 800d59c:	e7f0      	b.n	800d580 <_dtoa_r+0x9f0>
 800d59e:	f1bb 0f00 	cmp.w	fp, #0
 800d5a2:	bfcc      	ite	gt
 800d5a4:	465e      	movgt	r6, fp
 800d5a6:	2601      	movle	r6, #1
 800d5a8:	443e      	add	r6, r7
 800d5aa:	f04f 0800 	mov.w	r8, #0
 800d5ae:	9901      	ldr	r1, [sp, #4]
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	4648      	mov	r0, r9
 800d5b4:	f000 fb50 	bl	800dc58 <__lshift>
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	9001      	str	r0, [sp, #4]
 800d5bc:	f000 fbb8 	bl	800dd30 <__mcmp>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	dcb0      	bgt.n	800d526 <_dtoa_r+0x996>
 800d5c4:	d102      	bne.n	800d5cc <_dtoa_r+0xa3c>
 800d5c6:	f01a 0f01 	tst.w	sl, #1
 800d5ca:	d1ac      	bne.n	800d526 <_dtoa_r+0x996>
 800d5cc:	4633      	mov	r3, r6
 800d5ce:	461e      	mov	r6, r3
 800d5d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5d4:	2a30      	cmp	r2, #48	@ 0x30
 800d5d6:	d0fa      	beq.n	800d5ce <_dtoa_r+0xa3e>
 800d5d8:	e4e1      	b.n	800cf9e <_dtoa_r+0x40e>
 800d5da:	429f      	cmp	r7, r3
 800d5dc:	d1a4      	bne.n	800d528 <_dtoa_r+0x998>
 800d5de:	9b05      	ldr	r3, [sp, #20]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	9305      	str	r3, [sp, #20]
 800d5e4:	2331      	movs	r3, #49	@ 0x31
 800d5e6:	703b      	strb	r3, [r7, #0]
 800d5e8:	e4d9      	b.n	800cf9e <_dtoa_r+0x40e>
 800d5ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d5ec:	4f16      	ldr	r7, [pc, #88]	@ (800d648 <_dtoa_r+0xab8>)
 800d5ee:	b11b      	cbz	r3, 800d5f8 <_dtoa_r+0xa68>
 800d5f0:	f107 0308 	add.w	r3, r7, #8
 800d5f4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d5f6:	6013      	str	r3, [r2, #0]
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	b011      	add	sp, #68	@ 0x44
 800d5fc:	ecbd 8b02 	vpop	{d8}
 800d600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d604:	9b07      	ldr	r3, [sp, #28]
 800d606:	2b01      	cmp	r3, #1
 800d608:	f77f ae2c 	ble.w	800d264 <_dtoa_r+0x6d4>
 800d60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d60e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d610:	2001      	movs	r0, #1
 800d612:	e64c      	b.n	800d2ae <_dtoa_r+0x71e>
 800d614:	f1bb 0f00 	cmp.w	fp, #0
 800d618:	f77f aed8 	ble.w	800d3cc <_dtoa_r+0x83c>
 800d61c:	463e      	mov	r6, r7
 800d61e:	9801      	ldr	r0, [sp, #4]
 800d620:	4621      	mov	r1, r4
 800d622:	f7ff fa2c 	bl	800ca7e <quorem>
 800d626:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d62a:	f806 ab01 	strb.w	sl, [r6], #1
 800d62e:	1bf2      	subs	r2, r6, r7
 800d630:	4593      	cmp	fp, r2
 800d632:	ddb4      	ble.n	800d59e <_dtoa_r+0xa0e>
 800d634:	9901      	ldr	r1, [sp, #4]
 800d636:	2300      	movs	r3, #0
 800d638:	220a      	movs	r2, #10
 800d63a:	4648      	mov	r0, r9
 800d63c:	f000 f968 	bl	800d910 <__multadd>
 800d640:	9001      	str	r0, [sp, #4]
 800d642:	e7ec      	b.n	800d61e <_dtoa_r+0xa8e>
 800d644:	08034b8c 	.word	0x08034b8c
 800d648:	08034b10 	.word	0x08034b10

0800d64c <_free_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	4605      	mov	r5, r0
 800d650:	2900      	cmp	r1, #0
 800d652:	d041      	beq.n	800d6d8 <_free_r+0x8c>
 800d654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d658:	1f0c      	subs	r4, r1, #4
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	bfb8      	it	lt
 800d65e:	18e4      	addlt	r4, r4, r3
 800d660:	f000 f8e8 	bl	800d834 <__malloc_lock>
 800d664:	4a1d      	ldr	r2, [pc, #116]	@ (800d6dc <_free_r+0x90>)
 800d666:	6813      	ldr	r3, [r2, #0]
 800d668:	b933      	cbnz	r3, 800d678 <_free_r+0x2c>
 800d66a:	6063      	str	r3, [r4, #4]
 800d66c:	6014      	str	r4, [r2, #0]
 800d66e:	4628      	mov	r0, r5
 800d670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d674:	f000 b8e4 	b.w	800d840 <__malloc_unlock>
 800d678:	42a3      	cmp	r3, r4
 800d67a:	d908      	bls.n	800d68e <_free_r+0x42>
 800d67c:	6820      	ldr	r0, [r4, #0]
 800d67e:	1821      	adds	r1, r4, r0
 800d680:	428b      	cmp	r3, r1
 800d682:	bf01      	itttt	eq
 800d684:	6819      	ldreq	r1, [r3, #0]
 800d686:	685b      	ldreq	r3, [r3, #4]
 800d688:	1809      	addeq	r1, r1, r0
 800d68a:	6021      	streq	r1, [r4, #0]
 800d68c:	e7ed      	b.n	800d66a <_free_r+0x1e>
 800d68e:	461a      	mov	r2, r3
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	b10b      	cbz	r3, 800d698 <_free_r+0x4c>
 800d694:	42a3      	cmp	r3, r4
 800d696:	d9fa      	bls.n	800d68e <_free_r+0x42>
 800d698:	6811      	ldr	r1, [r2, #0]
 800d69a:	1850      	adds	r0, r2, r1
 800d69c:	42a0      	cmp	r0, r4
 800d69e:	d10b      	bne.n	800d6b8 <_free_r+0x6c>
 800d6a0:	6820      	ldr	r0, [r4, #0]
 800d6a2:	4401      	add	r1, r0
 800d6a4:	1850      	adds	r0, r2, r1
 800d6a6:	4283      	cmp	r3, r0
 800d6a8:	6011      	str	r1, [r2, #0]
 800d6aa:	d1e0      	bne.n	800d66e <_free_r+0x22>
 800d6ac:	6818      	ldr	r0, [r3, #0]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	6053      	str	r3, [r2, #4]
 800d6b2:	4408      	add	r0, r1
 800d6b4:	6010      	str	r0, [r2, #0]
 800d6b6:	e7da      	b.n	800d66e <_free_r+0x22>
 800d6b8:	d902      	bls.n	800d6c0 <_free_r+0x74>
 800d6ba:	230c      	movs	r3, #12
 800d6bc:	602b      	str	r3, [r5, #0]
 800d6be:	e7d6      	b.n	800d66e <_free_r+0x22>
 800d6c0:	6820      	ldr	r0, [r4, #0]
 800d6c2:	1821      	adds	r1, r4, r0
 800d6c4:	428b      	cmp	r3, r1
 800d6c6:	bf04      	itt	eq
 800d6c8:	6819      	ldreq	r1, [r3, #0]
 800d6ca:	685b      	ldreq	r3, [r3, #4]
 800d6cc:	6063      	str	r3, [r4, #4]
 800d6ce:	bf04      	itt	eq
 800d6d0:	1809      	addeq	r1, r1, r0
 800d6d2:	6021      	streq	r1, [r4, #0]
 800d6d4:	6054      	str	r4, [r2, #4]
 800d6d6:	e7ca      	b.n	800d66e <_free_r+0x22>
 800d6d8:	bd38      	pop	{r3, r4, r5, pc}
 800d6da:	bf00      	nop
 800d6dc:	24001960 	.word	0x24001960

0800d6e0 <malloc>:
 800d6e0:	4b02      	ldr	r3, [pc, #8]	@ (800d6ec <malloc+0xc>)
 800d6e2:	4601      	mov	r1, r0
 800d6e4:	6818      	ldr	r0, [r3, #0]
 800d6e6:	f000 b825 	b.w	800d734 <_malloc_r>
 800d6ea:	bf00      	nop
 800d6ec:	240000ac 	.word	0x240000ac

0800d6f0 <sbrk_aligned>:
 800d6f0:	b570      	push	{r4, r5, r6, lr}
 800d6f2:	4e0f      	ldr	r6, [pc, #60]	@ (800d730 <sbrk_aligned+0x40>)
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	6831      	ldr	r1, [r6, #0]
 800d6f8:	4605      	mov	r5, r0
 800d6fa:	b911      	cbnz	r1, 800d702 <sbrk_aligned+0x12>
 800d6fc:	f001 f814 	bl	800e728 <_sbrk_r>
 800d700:	6030      	str	r0, [r6, #0]
 800d702:	4621      	mov	r1, r4
 800d704:	4628      	mov	r0, r5
 800d706:	f001 f80f 	bl	800e728 <_sbrk_r>
 800d70a:	1c43      	adds	r3, r0, #1
 800d70c:	d103      	bne.n	800d716 <sbrk_aligned+0x26>
 800d70e:	f04f 34ff 	mov.w	r4, #4294967295
 800d712:	4620      	mov	r0, r4
 800d714:	bd70      	pop	{r4, r5, r6, pc}
 800d716:	1cc4      	adds	r4, r0, #3
 800d718:	f024 0403 	bic.w	r4, r4, #3
 800d71c:	42a0      	cmp	r0, r4
 800d71e:	d0f8      	beq.n	800d712 <sbrk_aligned+0x22>
 800d720:	1a21      	subs	r1, r4, r0
 800d722:	4628      	mov	r0, r5
 800d724:	f001 f800 	bl	800e728 <_sbrk_r>
 800d728:	3001      	adds	r0, #1
 800d72a:	d1f2      	bne.n	800d712 <sbrk_aligned+0x22>
 800d72c:	e7ef      	b.n	800d70e <sbrk_aligned+0x1e>
 800d72e:	bf00      	nop
 800d730:	2400195c 	.word	0x2400195c

0800d734 <_malloc_r>:
 800d734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d738:	1ccd      	adds	r5, r1, #3
 800d73a:	f025 0503 	bic.w	r5, r5, #3
 800d73e:	3508      	adds	r5, #8
 800d740:	2d0c      	cmp	r5, #12
 800d742:	bf38      	it	cc
 800d744:	250c      	movcc	r5, #12
 800d746:	2d00      	cmp	r5, #0
 800d748:	4606      	mov	r6, r0
 800d74a:	db01      	blt.n	800d750 <_malloc_r+0x1c>
 800d74c:	42a9      	cmp	r1, r5
 800d74e:	d904      	bls.n	800d75a <_malloc_r+0x26>
 800d750:	230c      	movs	r3, #12
 800d752:	6033      	str	r3, [r6, #0]
 800d754:	2000      	movs	r0, #0
 800d756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d75a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d830 <_malloc_r+0xfc>
 800d75e:	f000 f869 	bl	800d834 <__malloc_lock>
 800d762:	f8d8 3000 	ldr.w	r3, [r8]
 800d766:	461c      	mov	r4, r3
 800d768:	bb44      	cbnz	r4, 800d7bc <_malloc_r+0x88>
 800d76a:	4629      	mov	r1, r5
 800d76c:	4630      	mov	r0, r6
 800d76e:	f7ff ffbf 	bl	800d6f0 <sbrk_aligned>
 800d772:	1c43      	adds	r3, r0, #1
 800d774:	4604      	mov	r4, r0
 800d776:	d158      	bne.n	800d82a <_malloc_r+0xf6>
 800d778:	f8d8 4000 	ldr.w	r4, [r8]
 800d77c:	4627      	mov	r7, r4
 800d77e:	2f00      	cmp	r7, #0
 800d780:	d143      	bne.n	800d80a <_malloc_r+0xd6>
 800d782:	2c00      	cmp	r4, #0
 800d784:	d04b      	beq.n	800d81e <_malloc_r+0xea>
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	4639      	mov	r1, r7
 800d78a:	4630      	mov	r0, r6
 800d78c:	eb04 0903 	add.w	r9, r4, r3
 800d790:	f000 ffca 	bl	800e728 <_sbrk_r>
 800d794:	4581      	cmp	r9, r0
 800d796:	d142      	bne.n	800d81e <_malloc_r+0xea>
 800d798:	6821      	ldr	r1, [r4, #0]
 800d79a:	1a6d      	subs	r5, r5, r1
 800d79c:	4629      	mov	r1, r5
 800d79e:	4630      	mov	r0, r6
 800d7a0:	f7ff ffa6 	bl	800d6f0 <sbrk_aligned>
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	d03a      	beq.n	800d81e <_malloc_r+0xea>
 800d7a8:	6823      	ldr	r3, [r4, #0]
 800d7aa:	442b      	add	r3, r5
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d7b2:	685a      	ldr	r2, [r3, #4]
 800d7b4:	bb62      	cbnz	r2, 800d810 <_malloc_r+0xdc>
 800d7b6:	f8c8 7000 	str.w	r7, [r8]
 800d7ba:	e00f      	b.n	800d7dc <_malloc_r+0xa8>
 800d7bc:	6822      	ldr	r2, [r4, #0]
 800d7be:	1b52      	subs	r2, r2, r5
 800d7c0:	d420      	bmi.n	800d804 <_malloc_r+0xd0>
 800d7c2:	2a0b      	cmp	r2, #11
 800d7c4:	d917      	bls.n	800d7f6 <_malloc_r+0xc2>
 800d7c6:	1961      	adds	r1, r4, r5
 800d7c8:	42a3      	cmp	r3, r4
 800d7ca:	6025      	str	r5, [r4, #0]
 800d7cc:	bf18      	it	ne
 800d7ce:	6059      	strne	r1, [r3, #4]
 800d7d0:	6863      	ldr	r3, [r4, #4]
 800d7d2:	bf08      	it	eq
 800d7d4:	f8c8 1000 	streq.w	r1, [r8]
 800d7d8:	5162      	str	r2, [r4, r5]
 800d7da:	604b      	str	r3, [r1, #4]
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f000 f82f 	bl	800d840 <__malloc_unlock>
 800d7e2:	f104 000b 	add.w	r0, r4, #11
 800d7e6:	1d23      	adds	r3, r4, #4
 800d7e8:	f020 0007 	bic.w	r0, r0, #7
 800d7ec:	1ac2      	subs	r2, r0, r3
 800d7ee:	bf1c      	itt	ne
 800d7f0:	1a1b      	subne	r3, r3, r0
 800d7f2:	50a3      	strne	r3, [r4, r2]
 800d7f4:	e7af      	b.n	800d756 <_malloc_r+0x22>
 800d7f6:	6862      	ldr	r2, [r4, #4]
 800d7f8:	42a3      	cmp	r3, r4
 800d7fa:	bf0c      	ite	eq
 800d7fc:	f8c8 2000 	streq.w	r2, [r8]
 800d800:	605a      	strne	r2, [r3, #4]
 800d802:	e7eb      	b.n	800d7dc <_malloc_r+0xa8>
 800d804:	4623      	mov	r3, r4
 800d806:	6864      	ldr	r4, [r4, #4]
 800d808:	e7ae      	b.n	800d768 <_malloc_r+0x34>
 800d80a:	463c      	mov	r4, r7
 800d80c:	687f      	ldr	r7, [r7, #4]
 800d80e:	e7b6      	b.n	800d77e <_malloc_r+0x4a>
 800d810:	461a      	mov	r2, r3
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	42a3      	cmp	r3, r4
 800d816:	d1fb      	bne.n	800d810 <_malloc_r+0xdc>
 800d818:	2300      	movs	r3, #0
 800d81a:	6053      	str	r3, [r2, #4]
 800d81c:	e7de      	b.n	800d7dc <_malloc_r+0xa8>
 800d81e:	230c      	movs	r3, #12
 800d820:	6033      	str	r3, [r6, #0]
 800d822:	4630      	mov	r0, r6
 800d824:	f000 f80c 	bl	800d840 <__malloc_unlock>
 800d828:	e794      	b.n	800d754 <_malloc_r+0x20>
 800d82a:	6005      	str	r5, [r0, #0]
 800d82c:	e7d6      	b.n	800d7dc <_malloc_r+0xa8>
 800d82e:	bf00      	nop
 800d830:	24001960 	.word	0x24001960

0800d834 <__malloc_lock>:
 800d834:	4801      	ldr	r0, [pc, #4]	@ (800d83c <__malloc_lock+0x8>)
 800d836:	f7ff b912 	b.w	800ca5e <__retarget_lock_acquire_recursive>
 800d83a:	bf00      	nop
 800d83c:	24001958 	.word	0x24001958

0800d840 <__malloc_unlock>:
 800d840:	4801      	ldr	r0, [pc, #4]	@ (800d848 <__malloc_unlock+0x8>)
 800d842:	f7ff b90d 	b.w	800ca60 <__retarget_lock_release_recursive>
 800d846:	bf00      	nop
 800d848:	24001958 	.word	0x24001958

0800d84c <_Balloc>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	69c6      	ldr	r6, [r0, #28]
 800d850:	4604      	mov	r4, r0
 800d852:	460d      	mov	r5, r1
 800d854:	b976      	cbnz	r6, 800d874 <_Balloc+0x28>
 800d856:	2010      	movs	r0, #16
 800d858:	f7ff ff42 	bl	800d6e0 <malloc>
 800d85c:	4602      	mov	r2, r0
 800d85e:	61e0      	str	r0, [r4, #28]
 800d860:	b920      	cbnz	r0, 800d86c <_Balloc+0x20>
 800d862:	4b18      	ldr	r3, [pc, #96]	@ (800d8c4 <_Balloc+0x78>)
 800d864:	4818      	ldr	r0, [pc, #96]	@ (800d8c8 <_Balloc+0x7c>)
 800d866:	216b      	movs	r1, #107	@ 0x6b
 800d868:	f000 ff6e 	bl	800e748 <__assert_func>
 800d86c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d870:	6006      	str	r6, [r0, #0]
 800d872:	60c6      	str	r6, [r0, #12]
 800d874:	69e6      	ldr	r6, [r4, #28]
 800d876:	68f3      	ldr	r3, [r6, #12]
 800d878:	b183      	cbz	r3, 800d89c <_Balloc+0x50>
 800d87a:	69e3      	ldr	r3, [r4, #28]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d882:	b9b8      	cbnz	r0, 800d8b4 <_Balloc+0x68>
 800d884:	2101      	movs	r1, #1
 800d886:	fa01 f605 	lsl.w	r6, r1, r5
 800d88a:	1d72      	adds	r2, r6, #5
 800d88c:	0092      	lsls	r2, r2, #2
 800d88e:	4620      	mov	r0, r4
 800d890:	f000 ff78 	bl	800e784 <_calloc_r>
 800d894:	b160      	cbz	r0, 800d8b0 <_Balloc+0x64>
 800d896:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d89a:	e00e      	b.n	800d8ba <_Balloc+0x6e>
 800d89c:	2221      	movs	r2, #33	@ 0x21
 800d89e:	2104      	movs	r1, #4
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f000 ff6f 	bl	800e784 <_calloc_r>
 800d8a6:	69e3      	ldr	r3, [r4, #28]
 800d8a8:	60f0      	str	r0, [r6, #12]
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1e4      	bne.n	800d87a <_Balloc+0x2e>
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	6802      	ldr	r2, [r0, #0]
 800d8b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8c0:	e7f7      	b.n	800d8b2 <_Balloc+0x66>
 800d8c2:	bf00      	nop
 800d8c4:	08034b1d 	.word	0x08034b1d
 800d8c8:	08034b9d 	.word	0x08034b9d

0800d8cc <_Bfree>:
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	69c6      	ldr	r6, [r0, #28]
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	b976      	cbnz	r6, 800d8f4 <_Bfree+0x28>
 800d8d6:	2010      	movs	r0, #16
 800d8d8:	f7ff ff02 	bl	800d6e0 <malloc>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	61e8      	str	r0, [r5, #28]
 800d8e0:	b920      	cbnz	r0, 800d8ec <_Bfree+0x20>
 800d8e2:	4b09      	ldr	r3, [pc, #36]	@ (800d908 <_Bfree+0x3c>)
 800d8e4:	4809      	ldr	r0, [pc, #36]	@ (800d90c <_Bfree+0x40>)
 800d8e6:	218f      	movs	r1, #143	@ 0x8f
 800d8e8:	f000 ff2e 	bl	800e748 <__assert_func>
 800d8ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8f0:	6006      	str	r6, [r0, #0]
 800d8f2:	60c6      	str	r6, [r0, #12]
 800d8f4:	b13c      	cbz	r4, 800d906 <_Bfree+0x3a>
 800d8f6:	69eb      	ldr	r3, [r5, #28]
 800d8f8:	6862      	ldr	r2, [r4, #4]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d900:	6021      	str	r1, [r4, #0]
 800d902:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d906:	bd70      	pop	{r4, r5, r6, pc}
 800d908:	08034b1d 	.word	0x08034b1d
 800d90c:	08034b9d 	.word	0x08034b9d

0800d910 <__multadd>:
 800d910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d914:	690d      	ldr	r5, [r1, #16]
 800d916:	4607      	mov	r7, r0
 800d918:	460c      	mov	r4, r1
 800d91a:	461e      	mov	r6, r3
 800d91c:	f101 0c14 	add.w	ip, r1, #20
 800d920:	2000      	movs	r0, #0
 800d922:	f8dc 3000 	ldr.w	r3, [ip]
 800d926:	b299      	uxth	r1, r3
 800d928:	fb02 6101 	mla	r1, r2, r1, r6
 800d92c:	0c1e      	lsrs	r6, r3, #16
 800d92e:	0c0b      	lsrs	r3, r1, #16
 800d930:	fb02 3306 	mla	r3, r2, r6, r3
 800d934:	b289      	uxth	r1, r1
 800d936:	3001      	adds	r0, #1
 800d938:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d93c:	4285      	cmp	r5, r0
 800d93e:	f84c 1b04 	str.w	r1, [ip], #4
 800d942:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d946:	dcec      	bgt.n	800d922 <__multadd+0x12>
 800d948:	b30e      	cbz	r6, 800d98e <__multadd+0x7e>
 800d94a:	68a3      	ldr	r3, [r4, #8]
 800d94c:	42ab      	cmp	r3, r5
 800d94e:	dc19      	bgt.n	800d984 <__multadd+0x74>
 800d950:	6861      	ldr	r1, [r4, #4]
 800d952:	4638      	mov	r0, r7
 800d954:	3101      	adds	r1, #1
 800d956:	f7ff ff79 	bl	800d84c <_Balloc>
 800d95a:	4680      	mov	r8, r0
 800d95c:	b928      	cbnz	r0, 800d96a <__multadd+0x5a>
 800d95e:	4602      	mov	r2, r0
 800d960:	4b0c      	ldr	r3, [pc, #48]	@ (800d994 <__multadd+0x84>)
 800d962:	480d      	ldr	r0, [pc, #52]	@ (800d998 <__multadd+0x88>)
 800d964:	21ba      	movs	r1, #186	@ 0xba
 800d966:	f000 feef 	bl	800e748 <__assert_func>
 800d96a:	6922      	ldr	r2, [r4, #16]
 800d96c:	3202      	adds	r2, #2
 800d96e:	f104 010c 	add.w	r1, r4, #12
 800d972:	0092      	lsls	r2, r2, #2
 800d974:	300c      	adds	r0, #12
 800d976:	f7ff f874 	bl	800ca62 <memcpy>
 800d97a:	4621      	mov	r1, r4
 800d97c:	4638      	mov	r0, r7
 800d97e:	f7ff ffa5 	bl	800d8cc <_Bfree>
 800d982:	4644      	mov	r4, r8
 800d984:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d988:	3501      	adds	r5, #1
 800d98a:	615e      	str	r6, [r3, #20]
 800d98c:	6125      	str	r5, [r4, #16]
 800d98e:	4620      	mov	r0, r4
 800d990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d994:	08034b8c 	.word	0x08034b8c
 800d998:	08034b9d 	.word	0x08034b9d

0800d99c <__hi0bits>:
 800d99c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	bf36      	itet	cc
 800d9a4:	0403      	lslcc	r3, r0, #16
 800d9a6:	2000      	movcs	r0, #0
 800d9a8:	2010      	movcc	r0, #16
 800d9aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d9ae:	bf3c      	itt	cc
 800d9b0:	021b      	lslcc	r3, r3, #8
 800d9b2:	3008      	addcc	r0, #8
 800d9b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d9b8:	bf3c      	itt	cc
 800d9ba:	011b      	lslcc	r3, r3, #4
 800d9bc:	3004      	addcc	r0, #4
 800d9be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9c2:	bf3c      	itt	cc
 800d9c4:	009b      	lslcc	r3, r3, #2
 800d9c6:	3002      	addcc	r0, #2
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	db05      	blt.n	800d9d8 <__hi0bits+0x3c>
 800d9cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d9d0:	f100 0001 	add.w	r0, r0, #1
 800d9d4:	bf08      	it	eq
 800d9d6:	2020      	moveq	r0, #32
 800d9d8:	4770      	bx	lr

0800d9da <__lo0bits>:
 800d9da:	6803      	ldr	r3, [r0, #0]
 800d9dc:	4602      	mov	r2, r0
 800d9de:	f013 0007 	ands.w	r0, r3, #7
 800d9e2:	d00b      	beq.n	800d9fc <__lo0bits+0x22>
 800d9e4:	07d9      	lsls	r1, r3, #31
 800d9e6:	d421      	bmi.n	800da2c <__lo0bits+0x52>
 800d9e8:	0798      	lsls	r0, r3, #30
 800d9ea:	bf49      	itett	mi
 800d9ec:	085b      	lsrmi	r3, r3, #1
 800d9ee:	089b      	lsrpl	r3, r3, #2
 800d9f0:	2001      	movmi	r0, #1
 800d9f2:	6013      	strmi	r3, [r2, #0]
 800d9f4:	bf5c      	itt	pl
 800d9f6:	6013      	strpl	r3, [r2, #0]
 800d9f8:	2002      	movpl	r0, #2
 800d9fa:	4770      	bx	lr
 800d9fc:	b299      	uxth	r1, r3
 800d9fe:	b909      	cbnz	r1, 800da04 <__lo0bits+0x2a>
 800da00:	0c1b      	lsrs	r3, r3, #16
 800da02:	2010      	movs	r0, #16
 800da04:	b2d9      	uxtb	r1, r3
 800da06:	b909      	cbnz	r1, 800da0c <__lo0bits+0x32>
 800da08:	3008      	adds	r0, #8
 800da0a:	0a1b      	lsrs	r3, r3, #8
 800da0c:	0719      	lsls	r1, r3, #28
 800da0e:	bf04      	itt	eq
 800da10:	091b      	lsreq	r3, r3, #4
 800da12:	3004      	addeq	r0, #4
 800da14:	0799      	lsls	r1, r3, #30
 800da16:	bf04      	itt	eq
 800da18:	089b      	lsreq	r3, r3, #2
 800da1a:	3002      	addeq	r0, #2
 800da1c:	07d9      	lsls	r1, r3, #31
 800da1e:	d403      	bmi.n	800da28 <__lo0bits+0x4e>
 800da20:	085b      	lsrs	r3, r3, #1
 800da22:	f100 0001 	add.w	r0, r0, #1
 800da26:	d003      	beq.n	800da30 <__lo0bits+0x56>
 800da28:	6013      	str	r3, [r2, #0]
 800da2a:	4770      	bx	lr
 800da2c:	2000      	movs	r0, #0
 800da2e:	4770      	bx	lr
 800da30:	2020      	movs	r0, #32
 800da32:	4770      	bx	lr

0800da34 <__i2b>:
 800da34:	b510      	push	{r4, lr}
 800da36:	460c      	mov	r4, r1
 800da38:	2101      	movs	r1, #1
 800da3a:	f7ff ff07 	bl	800d84c <_Balloc>
 800da3e:	4602      	mov	r2, r0
 800da40:	b928      	cbnz	r0, 800da4e <__i2b+0x1a>
 800da42:	4b05      	ldr	r3, [pc, #20]	@ (800da58 <__i2b+0x24>)
 800da44:	4805      	ldr	r0, [pc, #20]	@ (800da5c <__i2b+0x28>)
 800da46:	f240 1145 	movw	r1, #325	@ 0x145
 800da4a:	f000 fe7d 	bl	800e748 <__assert_func>
 800da4e:	2301      	movs	r3, #1
 800da50:	6144      	str	r4, [r0, #20]
 800da52:	6103      	str	r3, [r0, #16]
 800da54:	bd10      	pop	{r4, pc}
 800da56:	bf00      	nop
 800da58:	08034b8c 	.word	0x08034b8c
 800da5c:	08034b9d 	.word	0x08034b9d

0800da60 <__multiply>:
 800da60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da64:	4617      	mov	r7, r2
 800da66:	690a      	ldr	r2, [r1, #16]
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	bfa8      	it	ge
 800da6e:	463b      	movge	r3, r7
 800da70:	4689      	mov	r9, r1
 800da72:	bfa4      	itt	ge
 800da74:	460f      	movge	r7, r1
 800da76:	4699      	movge	r9, r3
 800da78:	693d      	ldr	r5, [r7, #16]
 800da7a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	6879      	ldr	r1, [r7, #4]
 800da82:	eb05 060a 	add.w	r6, r5, sl
 800da86:	42b3      	cmp	r3, r6
 800da88:	b085      	sub	sp, #20
 800da8a:	bfb8      	it	lt
 800da8c:	3101      	addlt	r1, #1
 800da8e:	f7ff fedd 	bl	800d84c <_Balloc>
 800da92:	b930      	cbnz	r0, 800daa2 <__multiply+0x42>
 800da94:	4602      	mov	r2, r0
 800da96:	4b41      	ldr	r3, [pc, #260]	@ (800db9c <__multiply+0x13c>)
 800da98:	4841      	ldr	r0, [pc, #260]	@ (800dba0 <__multiply+0x140>)
 800da9a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800da9e:	f000 fe53 	bl	800e748 <__assert_func>
 800daa2:	f100 0414 	add.w	r4, r0, #20
 800daa6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800daaa:	4623      	mov	r3, r4
 800daac:	2200      	movs	r2, #0
 800daae:	4573      	cmp	r3, lr
 800dab0:	d320      	bcc.n	800daf4 <__multiply+0x94>
 800dab2:	f107 0814 	add.w	r8, r7, #20
 800dab6:	f109 0114 	add.w	r1, r9, #20
 800daba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dabe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dac2:	9302      	str	r3, [sp, #8]
 800dac4:	1beb      	subs	r3, r5, r7
 800dac6:	3b15      	subs	r3, #21
 800dac8:	f023 0303 	bic.w	r3, r3, #3
 800dacc:	3304      	adds	r3, #4
 800dace:	3715      	adds	r7, #21
 800dad0:	42bd      	cmp	r5, r7
 800dad2:	bf38      	it	cc
 800dad4:	2304      	movcc	r3, #4
 800dad6:	9301      	str	r3, [sp, #4]
 800dad8:	9b02      	ldr	r3, [sp, #8]
 800dada:	9103      	str	r1, [sp, #12]
 800dadc:	428b      	cmp	r3, r1
 800dade:	d80c      	bhi.n	800dafa <__multiply+0x9a>
 800dae0:	2e00      	cmp	r6, #0
 800dae2:	dd03      	ble.n	800daec <__multiply+0x8c>
 800dae4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d055      	beq.n	800db98 <__multiply+0x138>
 800daec:	6106      	str	r6, [r0, #16]
 800daee:	b005      	add	sp, #20
 800daf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf4:	f843 2b04 	str.w	r2, [r3], #4
 800daf8:	e7d9      	b.n	800daae <__multiply+0x4e>
 800dafa:	f8b1 a000 	ldrh.w	sl, [r1]
 800dafe:	f1ba 0f00 	cmp.w	sl, #0
 800db02:	d01f      	beq.n	800db44 <__multiply+0xe4>
 800db04:	46c4      	mov	ip, r8
 800db06:	46a1      	mov	r9, r4
 800db08:	2700      	movs	r7, #0
 800db0a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800db0e:	f8d9 3000 	ldr.w	r3, [r9]
 800db12:	fa1f fb82 	uxth.w	fp, r2
 800db16:	b29b      	uxth	r3, r3
 800db18:	fb0a 330b 	mla	r3, sl, fp, r3
 800db1c:	443b      	add	r3, r7
 800db1e:	f8d9 7000 	ldr.w	r7, [r9]
 800db22:	0c12      	lsrs	r2, r2, #16
 800db24:	0c3f      	lsrs	r7, r7, #16
 800db26:	fb0a 7202 	mla	r2, sl, r2, r7
 800db2a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800db2e:	b29b      	uxth	r3, r3
 800db30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db34:	4565      	cmp	r5, ip
 800db36:	f849 3b04 	str.w	r3, [r9], #4
 800db3a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800db3e:	d8e4      	bhi.n	800db0a <__multiply+0xaa>
 800db40:	9b01      	ldr	r3, [sp, #4]
 800db42:	50e7      	str	r7, [r4, r3]
 800db44:	9b03      	ldr	r3, [sp, #12]
 800db46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800db4a:	3104      	adds	r1, #4
 800db4c:	f1b9 0f00 	cmp.w	r9, #0
 800db50:	d020      	beq.n	800db94 <__multiply+0x134>
 800db52:	6823      	ldr	r3, [r4, #0]
 800db54:	4647      	mov	r7, r8
 800db56:	46a4      	mov	ip, r4
 800db58:	f04f 0a00 	mov.w	sl, #0
 800db5c:	f8b7 b000 	ldrh.w	fp, [r7]
 800db60:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800db64:	fb09 220b 	mla	r2, r9, fp, r2
 800db68:	4452      	add	r2, sl
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db70:	f84c 3b04 	str.w	r3, [ip], #4
 800db74:	f857 3b04 	ldr.w	r3, [r7], #4
 800db78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db7c:	f8bc 3000 	ldrh.w	r3, [ip]
 800db80:	fb09 330a 	mla	r3, r9, sl, r3
 800db84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800db88:	42bd      	cmp	r5, r7
 800db8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db8e:	d8e5      	bhi.n	800db5c <__multiply+0xfc>
 800db90:	9a01      	ldr	r2, [sp, #4]
 800db92:	50a3      	str	r3, [r4, r2]
 800db94:	3404      	adds	r4, #4
 800db96:	e79f      	b.n	800dad8 <__multiply+0x78>
 800db98:	3e01      	subs	r6, #1
 800db9a:	e7a1      	b.n	800dae0 <__multiply+0x80>
 800db9c:	08034b8c 	.word	0x08034b8c
 800dba0:	08034b9d 	.word	0x08034b9d

0800dba4 <__pow5mult>:
 800dba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dba8:	4615      	mov	r5, r2
 800dbaa:	f012 0203 	ands.w	r2, r2, #3
 800dbae:	4607      	mov	r7, r0
 800dbb0:	460e      	mov	r6, r1
 800dbb2:	d007      	beq.n	800dbc4 <__pow5mult+0x20>
 800dbb4:	4c25      	ldr	r4, [pc, #148]	@ (800dc4c <__pow5mult+0xa8>)
 800dbb6:	3a01      	subs	r2, #1
 800dbb8:	2300      	movs	r3, #0
 800dbba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dbbe:	f7ff fea7 	bl	800d910 <__multadd>
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	10ad      	asrs	r5, r5, #2
 800dbc6:	d03d      	beq.n	800dc44 <__pow5mult+0xa0>
 800dbc8:	69fc      	ldr	r4, [r7, #28]
 800dbca:	b97c      	cbnz	r4, 800dbec <__pow5mult+0x48>
 800dbcc:	2010      	movs	r0, #16
 800dbce:	f7ff fd87 	bl	800d6e0 <malloc>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	61f8      	str	r0, [r7, #28]
 800dbd6:	b928      	cbnz	r0, 800dbe4 <__pow5mult+0x40>
 800dbd8:	4b1d      	ldr	r3, [pc, #116]	@ (800dc50 <__pow5mult+0xac>)
 800dbda:	481e      	ldr	r0, [pc, #120]	@ (800dc54 <__pow5mult+0xb0>)
 800dbdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dbe0:	f000 fdb2 	bl	800e748 <__assert_func>
 800dbe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbe8:	6004      	str	r4, [r0, #0]
 800dbea:	60c4      	str	r4, [r0, #12]
 800dbec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dbf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dbf4:	b94c      	cbnz	r4, 800dc0a <__pow5mult+0x66>
 800dbf6:	f240 2171 	movw	r1, #625	@ 0x271
 800dbfa:	4638      	mov	r0, r7
 800dbfc:	f7ff ff1a 	bl	800da34 <__i2b>
 800dc00:	2300      	movs	r3, #0
 800dc02:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc06:	4604      	mov	r4, r0
 800dc08:	6003      	str	r3, [r0, #0]
 800dc0a:	f04f 0900 	mov.w	r9, #0
 800dc0e:	07eb      	lsls	r3, r5, #31
 800dc10:	d50a      	bpl.n	800dc28 <__pow5mult+0x84>
 800dc12:	4631      	mov	r1, r6
 800dc14:	4622      	mov	r2, r4
 800dc16:	4638      	mov	r0, r7
 800dc18:	f7ff ff22 	bl	800da60 <__multiply>
 800dc1c:	4631      	mov	r1, r6
 800dc1e:	4680      	mov	r8, r0
 800dc20:	4638      	mov	r0, r7
 800dc22:	f7ff fe53 	bl	800d8cc <_Bfree>
 800dc26:	4646      	mov	r6, r8
 800dc28:	106d      	asrs	r5, r5, #1
 800dc2a:	d00b      	beq.n	800dc44 <__pow5mult+0xa0>
 800dc2c:	6820      	ldr	r0, [r4, #0]
 800dc2e:	b938      	cbnz	r0, 800dc40 <__pow5mult+0x9c>
 800dc30:	4622      	mov	r2, r4
 800dc32:	4621      	mov	r1, r4
 800dc34:	4638      	mov	r0, r7
 800dc36:	f7ff ff13 	bl	800da60 <__multiply>
 800dc3a:	6020      	str	r0, [r4, #0]
 800dc3c:	f8c0 9000 	str.w	r9, [r0]
 800dc40:	4604      	mov	r4, r0
 800dc42:	e7e4      	b.n	800dc0e <__pow5mult+0x6a>
 800dc44:	4630      	mov	r0, r6
 800dc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc4a:	bf00      	nop
 800dc4c:	08034c50 	.word	0x08034c50
 800dc50:	08034b1d 	.word	0x08034b1d
 800dc54:	08034b9d 	.word	0x08034b9d

0800dc58 <__lshift>:
 800dc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc5c:	460c      	mov	r4, r1
 800dc5e:	6849      	ldr	r1, [r1, #4]
 800dc60:	6923      	ldr	r3, [r4, #16]
 800dc62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc66:	68a3      	ldr	r3, [r4, #8]
 800dc68:	4607      	mov	r7, r0
 800dc6a:	4691      	mov	r9, r2
 800dc6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc70:	f108 0601 	add.w	r6, r8, #1
 800dc74:	42b3      	cmp	r3, r6
 800dc76:	db0b      	blt.n	800dc90 <__lshift+0x38>
 800dc78:	4638      	mov	r0, r7
 800dc7a:	f7ff fde7 	bl	800d84c <_Balloc>
 800dc7e:	4605      	mov	r5, r0
 800dc80:	b948      	cbnz	r0, 800dc96 <__lshift+0x3e>
 800dc82:	4602      	mov	r2, r0
 800dc84:	4b28      	ldr	r3, [pc, #160]	@ (800dd28 <__lshift+0xd0>)
 800dc86:	4829      	ldr	r0, [pc, #164]	@ (800dd2c <__lshift+0xd4>)
 800dc88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dc8c:	f000 fd5c 	bl	800e748 <__assert_func>
 800dc90:	3101      	adds	r1, #1
 800dc92:	005b      	lsls	r3, r3, #1
 800dc94:	e7ee      	b.n	800dc74 <__lshift+0x1c>
 800dc96:	2300      	movs	r3, #0
 800dc98:	f100 0114 	add.w	r1, r0, #20
 800dc9c:	f100 0210 	add.w	r2, r0, #16
 800dca0:	4618      	mov	r0, r3
 800dca2:	4553      	cmp	r3, sl
 800dca4:	db33      	blt.n	800dd0e <__lshift+0xb6>
 800dca6:	6920      	ldr	r0, [r4, #16]
 800dca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dcac:	f104 0314 	add.w	r3, r4, #20
 800dcb0:	f019 091f 	ands.w	r9, r9, #31
 800dcb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dcb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dcbc:	d02b      	beq.n	800dd16 <__lshift+0xbe>
 800dcbe:	f1c9 0e20 	rsb	lr, r9, #32
 800dcc2:	468a      	mov	sl, r1
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	6818      	ldr	r0, [r3, #0]
 800dcc8:	fa00 f009 	lsl.w	r0, r0, r9
 800dccc:	4310      	orrs	r0, r2
 800dcce:	f84a 0b04 	str.w	r0, [sl], #4
 800dcd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcd6:	459c      	cmp	ip, r3
 800dcd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dcdc:	d8f3      	bhi.n	800dcc6 <__lshift+0x6e>
 800dcde:	ebac 0304 	sub.w	r3, ip, r4
 800dce2:	3b15      	subs	r3, #21
 800dce4:	f023 0303 	bic.w	r3, r3, #3
 800dce8:	3304      	adds	r3, #4
 800dcea:	f104 0015 	add.w	r0, r4, #21
 800dcee:	4560      	cmp	r0, ip
 800dcf0:	bf88      	it	hi
 800dcf2:	2304      	movhi	r3, #4
 800dcf4:	50ca      	str	r2, [r1, r3]
 800dcf6:	b10a      	cbz	r2, 800dcfc <__lshift+0xa4>
 800dcf8:	f108 0602 	add.w	r6, r8, #2
 800dcfc:	3e01      	subs	r6, #1
 800dcfe:	4638      	mov	r0, r7
 800dd00:	612e      	str	r6, [r5, #16]
 800dd02:	4621      	mov	r1, r4
 800dd04:	f7ff fde2 	bl	800d8cc <_Bfree>
 800dd08:	4628      	mov	r0, r5
 800dd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd12:	3301      	adds	r3, #1
 800dd14:	e7c5      	b.n	800dca2 <__lshift+0x4a>
 800dd16:	3904      	subs	r1, #4
 800dd18:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd20:	459c      	cmp	ip, r3
 800dd22:	d8f9      	bhi.n	800dd18 <__lshift+0xc0>
 800dd24:	e7ea      	b.n	800dcfc <__lshift+0xa4>
 800dd26:	bf00      	nop
 800dd28:	08034b8c 	.word	0x08034b8c
 800dd2c:	08034b9d 	.word	0x08034b9d

0800dd30 <__mcmp>:
 800dd30:	690a      	ldr	r2, [r1, #16]
 800dd32:	4603      	mov	r3, r0
 800dd34:	6900      	ldr	r0, [r0, #16]
 800dd36:	1a80      	subs	r0, r0, r2
 800dd38:	b530      	push	{r4, r5, lr}
 800dd3a:	d10e      	bne.n	800dd5a <__mcmp+0x2a>
 800dd3c:	3314      	adds	r3, #20
 800dd3e:	3114      	adds	r1, #20
 800dd40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dd44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dd48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dd4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dd50:	4295      	cmp	r5, r2
 800dd52:	d003      	beq.n	800dd5c <__mcmp+0x2c>
 800dd54:	d205      	bcs.n	800dd62 <__mcmp+0x32>
 800dd56:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5a:	bd30      	pop	{r4, r5, pc}
 800dd5c:	42a3      	cmp	r3, r4
 800dd5e:	d3f3      	bcc.n	800dd48 <__mcmp+0x18>
 800dd60:	e7fb      	b.n	800dd5a <__mcmp+0x2a>
 800dd62:	2001      	movs	r0, #1
 800dd64:	e7f9      	b.n	800dd5a <__mcmp+0x2a>
	...

0800dd68 <__mdiff>:
 800dd68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6c:	4689      	mov	r9, r1
 800dd6e:	4606      	mov	r6, r0
 800dd70:	4611      	mov	r1, r2
 800dd72:	4648      	mov	r0, r9
 800dd74:	4614      	mov	r4, r2
 800dd76:	f7ff ffdb 	bl	800dd30 <__mcmp>
 800dd7a:	1e05      	subs	r5, r0, #0
 800dd7c:	d112      	bne.n	800dda4 <__mdiff+0x3c>
 800dd7e:	4629      	mov	r1, r5
 800dd80:	4630      	mov	r0, r6
 800dd82:	f7ff fd63 	bl	800d84c <_Balloc>
 800dd86:	4602      	mov	r2, r0
 800dd88:	b928      	cbnz	r0, 800dd96 <__mdiff+0x2e>
 800dd8a:	4b3f      	ldr	r3, [pc, #252]	@ (800de88 <__mdiff+0x120>)
 800dd8c:	f240 2137 	movw	r1, #567	@ 0x237
 800dd90:	483e      	ldr	r0, [pc, #248]	@ (800de8c <__mdiff+0x124>)
 800dd92:	f000 fcd9 	bl	800e748 <__assert_func>
 800dd96:	2301      	movs	r3, #1
 800dd98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	b003      	add	sp, #12
 800dda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda4:	bfbc      	itt	lt
 800dda6:	464b      	movlt	r3, r9
 800dda8:	46a1      	movlt	r9, r4
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ddb0:	bfba      	itte	lt
 800ddb2:	461c      	movlt	r4, r3
 800ddb4:	2501      	movlt	r5, #1
 800ddb6:	2500      	movge	r5, #0
 800ddb8:	f7ff fd48 	bl	800d84c <_Balloc>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	b918      	cbnz	r0, 800ddc8 <__mdiff+0x60>
 800ddc0:	4b31      	ldr	r3, [pc, #196]	@ (800de88 <__mdiff+0x120>)
 800ddc2:	f240 2145 	movw	r1, #581	@ 0x245
 800ddc6:	e7e3      	b.n	800dd90 <__mdiff+0x28>
 800ddc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ddcc:	6926      	ldr	r6, [r4, #16]
 800ddce:	60c5      	str	r5, [r0, #12]
 800ddd0:	f109 0310 	add.w	r3, r9, #16
 800ddd4:	f109 0514 	add.w	r5, r9, #20
 800ddd8:	f104 0e14 	add.w	lr, r4, #20
 800dddc:	f100 0b14 	add.w	fp, r0, #20
 800dde0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dde4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dde8:	9301      	str	r3, [sp, #4]
 800ddea:	46d9      	mov	r9, fp
 800ddec:	f04f 0c00 	mov.w	ip, #0
 800ddf0:	9b01      	ldr	r3, [sp, #4]
 800ddf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ddf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ddfa:	9301      	str	r3, [sp, #4]
 800ddfc:	fa1f f38a 	uxth.w	r3, sl
 800de00:	4619      	mov	r1, r3
 800de02:	b283      	uxth	r3, r0
 800de04:	1acb      	subs	r3, r1, r3
 800de06:	0c00      	lsrs	r0, r0, #16
 800de08:	4463      	add	r3, ip
 800de0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800de0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800de12:	b29b      	uxth	r3, r3
 800de14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800de18:	4576      	cmp	r6, lr
 800de1a:	f849 3b04 	str.w	r3, [r9], #4
 800de1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800de22:	d8e5      	bhi.n	800ddf0 <__mdiff+0x88>
 800de24:	1b33      	subs	r3, r6, r4
 800de26:	3b15      	subs	r3, #21
 800de28:	f023 0303 	bic.w	r3, r3, #3
 800de2c:	3415      	adds	r4, #21
 800de2e:	3304      	adds	r3, #4
 800de30:	42a6      	cmp	r6, r4
 800de32:	bf38      	it	cc
 800de34:	2304      	movcc	r3, #4
 800de36:	441d      	add	r5, r3
 800de38:	445b      	add	r3, fp
 800de3a:	461e      	mov	r6, r3
 800de3c:	462c      	mov	r4, r5
 800de3e:	4544      	cmp	r4, r8
 800de40:	d30e      	bcc.n	800de60 <__mdiff+0xf8>
 800de42:	f108 0103 	add.w	r1, r8, #3
 800de46:	1b49      	subs	r1, r1, r5
 800de48:	f021 0103 	bic.w	r1, r1, #3
 800de4c:	3d03      	subs	r5, #3
 800de4e:	45a8      	cmp	r8, r5
 800de50:	bf38      	it	cc
 800de52:	2100      	movcc	r1, #0
 800de54:	440b      	add	r3, r1
 800de56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800de5a:	b191      	cbz	r1, 800de82 <__mdiff+0x11a>
 800de5c:	6117      	str	r7, [r2, #16]
 800de5e:	e79d      	b.n	800dd9c <__mdiff+0x34>
 800de60:	f854 1b04 	ldr.w	r1, [r4], #4
 800de64:	46e6      	mov	lr, ip
 800de66:	0c08      	lsrs	r0, r1, #16
 800de68:	fa1c fc81 	uxtah	ip, ip, r1
 800de6c:	4471      	add	r1, lr
 800de6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800de72:	b289      	uxth	r1, r1
 800de74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800de78:	f846 1b04 	str.w	r1, [r6], #4
 800de7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800de80:	e7dd      	b.n	800de3e <__mdiff+0xd6>
 800de82:	3f01      	subs	r7, #1
 800de84:	e7e7      	b.n	800de56 <__mdiff+0xee>
 800de86:	bf00      	nop
 800de88:	08034b8c 	.word	0x08034b8c
 800de8c:	08034b9d 	.word	0x08034b9d

0800de90 <__d2b>:
 800de90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de94:	460f      	mov	r7, r1
 800de96:	2101      	movs	r1, #1
 800de98:	ec59 8b10 	vmov	r8, r9, d0
 800de9c:	4616      	mov	r6, r2
 800de9e:	f7ff fcd5 	bl	800d84c <_Balloc>
 800dea2:	4604      	mov	r4, r0
 800dea4:	b930      	cbnz	r0, 800deb4 <__d2b+0x24>
 800dea6:	4602      	mov	r2, r0
 800dea8:	4b23      	ldr	r3, [pc, #140]	@ (800df38 <__d2b+0xa8>)
 800deaa:	4824      	ldr	r0, [pc, #144]	@ (800df3c <__d2b+0xac>)
 800deac:	f240 310f 	movw	r1, #783	@ 0x30f
 800deb0:	f000 fc4a 	bl	800e748 <__assert_func>
 800deb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800deb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800debc:	b10d      	cbz	r5, 800dec2 <__d2b+0x32>
 800debe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dec2:	9301      	str	r3, [sp, #4]
 800dec4:	f1b8 0300 	subs.w	r3, r8, #0
 800dec8:	d023      	beq.n	800df12 <__d2b+0x82>
 800deca:	4668      	mov	r0, sp
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	f7ff fd84 	bl	800d9da <__lo0bits>
 800ded2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ded6:	b1d0      	cbz	r0, 800df0e <__d2b+0x7e>
 800ded8:	f1c0 0320 	rsb	r3, r0, #32
 800dedc:	fa02 f303 	lsl.w	r3, r2, r3
 800dee0:	430b      	orrs	r3, r1
 800dee2:	40c2      	lsrs	r2, r0
 800dee4:	6163      	str	r3, [r4, #20]
 800dee6:	9201      	str	r2, [sp, #4]
 800dee8:	9b01      	ldr	r3, [sp, #4]
 800deea:	61a3      	str	r3, [r4, #24]
 800deec:	2b00      	cmp	r3, #0
 800deee:	bf0c      	ite	eq
 800def0:	2201      	moveq	r2, #1
 800def2:	2202      	movne	r2, #2
 800def4:	6122      	str	r2, [r4, #16]
 800def6:	b1a5      	cbz	r5, 800df22 <__d2b+0x92>
 800def8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800defc:	4405      	add	r5, r0
 800defe:	603d      	str	r5, [r7, #0]
 800df00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800df04:	6030      	str	r0, [r6, #0]
 800df06:	4620      	mov	r0, r4
 800df08:	b003      	add	sp, #12
 800df0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df0e:	6161      	str	r1, [r4, #20]
 800df10:	e7ea      	b.n	800dee8 <__d2b+0x58>
 800df12:	a801      	add	r0, sp, #4
 800df14:	f7ff fd61 	bl	800d9da <__lo0bits>
 800df18:	9b01      	ldr	r3, [sp, #4]
 800df1a:	6163      	str	r3, [r4, #20]
 800df1c:	3020      	adds	r0, #32
 800df1e:	2201      	movs	r2, #1
 800df20:	e7e8      	b.n	800def4 <__d2b+0x64>
 800df22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800df2a:	6038      	str	r0, [r7, #0]
 800df2c:	6918      	ldr	r0, [r3, #16]
 800df2e:	f7ff fd35 	bl	800d99c <__hi0bits>
 800df32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df36:	e7e5      	b.n	800df04 <__d2b+0x74>
 800df38:	08034b8c 	.word	0x08034b8c
 800df3c:	08034b9d 	.word	0x08034b9d

0800df40 <__ssputs_r>:
 800df40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df44:	688e      	ldr	r6, [r1, #8]
 800df46:	461f      	mov	r7, r3
 800df48:	42be      	cmp	r6, r7
 800df4a:	680b      	ldr	r3, [r1, #0]
 800df4c:	4682      	mov	sl, r0
 800df4e:	460c      	mov	r4, r1
 800df50:	4690      	mov	r8, r2
 800df52:	d82d      	bhi.n	800dfb0 <__ssputs_r+0x70>
 800df54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800df5c:	d026      	beq.n	800dfac <__ssputs_r+0x6c>
 800df5e:	6965      	ldr	r5, [r4, #20]
 800df60:	6909      	ldr	r1, [r1, #16]
 800df62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df66:	eba3 0901 	sub.w	r9, r3, r1
 800df6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df6e:	1c7b      	adds	r3, r7, #1
 800df70:	444b      	add	r3, r9
 800df72:	106d      	asrs	r5, r5, #1
 800df74:	429d      	cmp	r5, r3
 800df76:	bf38      	it	cc
 800df78:	461d      	movcc	r5, r3
 800df7a:	0553      	lsls	r3, r2, #21
 800df7c:	d527      	bpl.n	800dfce <__ssputs_r+0x8e>
 800df7e:	4629      	mov	r1, r5
 800df80:	f7ff fbd8 	bl	800d734 <_malloc_r>
 800df84:	4606      	mov	r6, r0
 800df86:	b360      	cbz	r0, 800dfe2 <__ssputs_r+0xa2>
 800df88:	6921      	ldr	r1, [r4, #16]
 800df8a:	464a      	mov	r2, r9
 800df8c:	f7fe fd69 	bl	800ca62 <memcpy>
 800df90:	89a3      	ldrh	r3, [r4, #12]
 800df92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800df96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df9a:	81a3      	strh	r3, [r4, #12]
 800df9c:	6126      	str	r6, [r4, #16]
 800df9e:	6165      	str	r5, [r4, #20]
 800dfa0:	444e      	add	r6, r9
 800dfa2:	eba5 0509 	sub.w	r5, r5, r9
 800dfa6:	6026      	str	r6, [r4, #0]
 800dfa8:	60a5      	str	r5, [r4, #8]
 800dfaa:	463e      	mov	r6, r7
 800dfac:	42be      	cmp	r6, r7
 800dfae:	d900      	bls.n	800dfb2 <__ssputs_r+0x72>
 800dfb0:	463e      	mov	r6, r7
 800dfb2:	6820      	ldr	r0, [r4, #0]
 800dfb4:	4632      	mov	r2, r6
 800dfb6:	4641      	mov	r1, r8
 800dfb8:	f000 fb9c 	bl	800e6f4 <memmove>
 800dfbc:	68a3      	ldr	r3, [r4, #8]
 800dfbe:	1b9b      	subs	r3, r3, r6
 800dfc0:	60a3      	str	r3, [r4, #8]
 800dfc2:	6823      	ldr	r3, [r4, #0]
 800dfc4:	4433      	add	r3, r6
 800dfc6:	6023      	str	r3, [r4, #0]
 800dfc8:	2000      	movs	r0, #0
 800dfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfce:	462a      	mov	r2, r5
 800dfd0:	f000 fbfe 	bl	800e7d0 <_realloc_r>
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d1e0      	bne.n	800df9c <__ssputs_r+0x5c>
 800dfda:	6921      	ldr	r1, [r4, #16]
 800dfdc:	4650      	mov	r0, sl
 800dfde:	f7ff fb35 	bl	800d64c <_free_r>
 800dfe2:	230c      	movs	r3, #12
 800dfe4:	f8ca 3000 	str.w	r3, [sl]
 800dfe8:	89a3      	ldrh	r3, [r4, #12]
 800dfea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfee:	81a3      	strh	r3, [r4, #12]
 800dff0:	f04f 30ff 	mov.w	r0, #4294967295
 800dff4:	e7e9      	b.n	800dfca <__ssputs_r+0x8a>
	...

0800dff8 <_svfiprintf_r>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	4698      	mov	r8, r3
 800dffe:	898b      	ldrh	r3, [r1, #12]
 800e000:	061b      	lsls	r3, r3, #24
 800e002:	b09d      	sub	sp, #116	@ 0x74
 800e004:	4607      	mov	r7, r0
 800e006:	460d      	mov	r5, r1
 800e008:	4614      	mov	r4, r2
 800e00a:	d510      	bpl.n	800e02e <_svfiprintf_r+0x36>
 800e00c:	690b      	ldr	r3, [r1, #16]
 800e00e:	b973      	cbnz	r3, 800e02e <_svfiprintf_r+0x36>
 800e010:	2140      	movs	r1, #64	@ 0x40
 800e012:	f7ff fb8f 	bl	800d734 <_malloc_r>
 800e016:	6028      	str	r0, [r5, #0]
 800e018:	6128      	str	r0, [r5, #16]
 800e01a:	b930      	cbnz	r0, 800e02a <_svfiprintf_r+0x32>
 800e01c:	230c      	movs	r3, #12
 800e01e:	603b      	str	r3, [r7, #0]
 800e020:	f04f 30ff 	mov.w	r0, #4294967295
 800e024:	b01d      	add	sp, #116	@ 0x74
 800e026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e02a:	2340      	movs	r3, #64	@ 0x40
 800e02c:	616b      	str	r3, [r5, #20]
 800e02e:	2300      	movs	r3, #0
 800e030:	9309      	str	r3, [sp, #36]	@ 0x24
 800e032:	2320      	movs	r3, #32
 800e034:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e038:	f8cd 800c 	str.w	r8, [sp, #12]
 800e03c:	2330      	movs	r3, #48	@ 0x30
 800e03e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e1dc <_svfiprintf_r+0x1e4>
 800e042:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e046:	f04f 0901 	mov.w	r9, #1
 800e04a:	4623      	mov	r3, r4
 800e04c:	469a      	mov	sl, r3
 800e04e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e052:	b10a      	cbz	r2, 800e058 <_svfiprintf_r+0x60>
 800e054:	2a25      	cmp	r2, #37	@ 0x25
 800e056:	d1f9      	bne.n	800e04c <_svfiprintf_r+0x54>
 800e058:	ebba 0b04 	subs.w	fp, sl, r4
 800e05c:	d00b      	beq.n	800e076 <_svfiprintf_r+0x7e>
 800e05e:	465b      	mov	r3, fp
 800e060:	4622      	mov	r2, r4
 800e062:	4629      	mov	r1, r5
 800e064:	4638      	mov	r0, r7
 800e066:	f7ff ff6b 	bl	800df40 <__ssputs_r>
 800e06a:	3001      	adds	r0, #1
 800e06c:	f000 80a7 	beq.w	800e1be <_svfiprintf_r+0x1c6>
 800e070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e072:	445a      	add	r2, fp
 800e074:	9209      	str	r2, [sp, #36]	@ 0x24
 800e076:	f89a 3000 	ldrb.w	r3, [sl]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 809f 	beq.w	800e1be <_svfiprintf_r+0x1c6>
 800e080:	2300      	movs	r3, #0
 800e082:	f04f 32ff 	mov.w	r2, #4294967295
 800e086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e08a:	f10a 0a01 	add.w	sl, sl, #1
 800e08e:	9304      	str	r3, [sp, #16]
 800e090:	9307      	str	r3, [sp, #28]
 800e092:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e096:	931a      	str	r3, [sp, #104]	@ 0x68
 800e098:	4654      	mov	r4, sl
 800e09a:	2205      	movs	r2, #5
 800e09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a0:	484e      	ldr	r0, [pc, #312]	@ (800e1dc <_svfiprintf_r+0x1e4>)
 800e0a2:	f7f2 f925 	bl	80002f0 <memchr>
 800e0a6:	9a04      	ldr	r2, [sp, #16]
 800e0a8:	b9d8      	cbnz	r0, 800e0e2 <_svfiprintf_r+0xea>
 800e0aa:	06d0      	lsls	r0, r2, #27
 800e0ac:	bf44      	itt	mi
 800e0ae:	2320      	movmi	r3, #32
 800e0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0b4:	0711      	lsls	r1, r2, #28
 800e0b6:	bf44      	itt	mi
 800e0b8:	232b      	movmi	r3, #43	@ 0x2b
 800e0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0be:	f89a 3000 	ldrb.w	r3, [sl]
 800e0c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0c4:	d015      	beq.n	800e0f2 <_svfiprintf_r+0xfa>
 800e0c6:	9a07      	ldr	r2, [sp, #28]
 800e0c8:	4654      	mov	r4, sl
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	f04f 0c0a 	mov.w	ip, #10
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0d6:	3b30      	subs	r3, #48	@ 0x30
 800e0d8:	2b09      	cmp	r3, #9
 800e0da:	d94b      	bls.n	800e174 <_svfiprintf_r+0x17c>
 800e0dc:	b1b0      	cbz	r0, 800e10c <_svfiprintf_r+0x114>
 800e0de:	9207      	str	r2, [sp, #28]
 800e0e0:	e014      	b.n	800e10c <_svfiprintf_r+0x114>
 800e0e2:	eba0 0308 	sub.w	r3, r0, r8
 800e0e6:	fa09 f303 	lsl.w	r3, r9, r3
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	9304      	str	r3, [sp, #16]
 800e0ee:	46a2      	mov	sl, r4
 800e0f0:	e7d2      	b.n	800e098 <_svfiprintf_r+0xa0>
 800e0f2:	9b03      	ldr	r3, [sp, #12]
 800e0f4:	1d19      	adds	r1, r3, #4
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	9103      	str	r1, [sp, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	bfbb      	ittet	lt
 800e0fe:	425b      	neglt	r3, r3
 800e100:	f042 0202 	orrlt.w	r2, r2, #2
 800e104:	9307      	strge	r3, [sp, #28]
 800e106:	9307      	strlt	r3, [sp, #28]
 800e108:	bfb8      	it	lt
 800e10a:	9204      	strlt	r2, [sp, #16]
 800e10c:	7823      	ldrb	r3, [r4, #0]
 800e10e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e110:	d10a      	bne.n	800e128 <_svfiprintf_r+0x130>
 800e112:	7863      	ldrb	r3, [r4, #1]
 800e114:	2b2a      	cmp	r3, #42	@ 0x2a
 800e116:	d132      	bne.n	800e17e <_svfiprintf_r+0x186>
 800e118:	9b03      	ldr	r3, [sp, #12]
 800e11a:	1d1a      	adds	r2, r3, #4
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	9203      	str	r2, [sp, #12]
 800e120:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e124:	3402      	adds	r4, #2
 800e126:	9305      	str	r3, [sp, #20]
 800e128:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e1ec <_svfiprintf_r+0x1f4>
 800e12c:	7821      	ldrb	r1, [r4, #0]
 800e12e:	2203      	movs	r2, #3
 800e130:	4650      	mov	r0, sl
 800e132:	f7f2 f8dd 	bl	80002f0 <memchr>
 800e136:	b138      	cbz	r0, 800e148 <_svfiprintf_r+0x150>
 800e138:	9b04      	ldr	r3, [sp, #16]
 800e13a:	eba0 000a 	sub.w	r0, r0, sl
 800e13e:	2240      	movs	r2, #64	@ 0x40
 800e140:	4082      	lsls	r2, r0
 800e142:	4313      	orrs	r3, r2
 800e144:	3401      	adds	r4, #1
 800e146:	9304      	str	r3, [sp, #16]
 800e148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e14c:	4824      	ldr	r0, [pc, #144]	@ (800e1e0 <_svfiprintf_r+0x1e8>)
 800e14e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e152:	2206      	movs	r2, #6
 800e154:	f7f2 f8cc 	bl	80002f0 <memchr>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d036      	beq.n	800e1ca <_svfiprintf_r+0x1d2>
 800e15c:	4b21      	ldr	r3, [pc, #132]	@ (800e1e4 <_svfiprintf_r+0x1ec>)
 800e15e:	bb1b      	cbnz	r3, 800e1a8 <_svfiprintf_r+0x1b0>
 800e160:	9b03      	ldr	r3, [sp, #12]
 800e162:	3307      	adds	r3, #7
 800e164:	f023 0307 	bic.w	r3, r3, #7
 800e168:	3308      	adds	r3, #8
 800e16a:	9303      	str	r3, [sp, #12]
 800e16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e16e:	4433      	add	r3, r6
 800e170:	9309      	str	r3, [sp, #36]	@ 0x24
 800e172:	e76a      	b.n	800e04a <_svfiprintf_r+0x52>
 800e174:	fb0c 3202 	mla	r2, ip, r2, r3
 800e178:	460c      	mov	r4, r1
 800e17a:	2001      	movs	r0, #1
 800e17c:	e7a8      	b.n	800e0d0 <_svfiprintf_r+0xd8>
 800e17e:	2300      	movs	r3, #0
 800e180:	3401      	adds	r4, #1
 800e182:	9305      	str	r3, [sp, #20]
 800e184:	4619      	mov	r1, r3
 800e186:	f04f 0c0a 	mov.w	ip, #10
 800e18a:	4620      	mov	r0, r4
 800e18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e190:	3a30      	subs	r2, #48	@ 0x30
 800e192:	2a09      	cmp	r2, #9
 800e194:	d903      	bls.n	800e19e <_svfiprintf_r+0x1a6>
 800e196:	2b00      	cmp	r3, #0
 800e198:	d0c6      	beq.n	800e128 <_svfiprintf_r+0x130>
 800e19a:	9105      	str	r1, [sp, #20]
 800e19c:	e7c4      	b.n	800e128 <_svfiprintf_r+0x130>
 800e19e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e7f0      	b.n	800e18a <_svfiprintf_r+0x192>
 800e1a8:	ab03      	add	r3, sp, #12
 800e1aa:	9300      	str	r3, [sp, #0]
 800e1ac:	462a      	mov	r2, r5
 800e1ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e1e8 <_svfiprintf_r+0x1f0>)
 800e1b0:	a904      	add	r1, sp, #16
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	f7fd fef4 	bl	800bfa0 <_printf_float>
 800e1b8:	1c42      	adds	r2, r0, #1
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	d1d6      	bne.n	800e16c <_svfiprintf_r+0x174>
 800e1be:	89ab      	ldrh	r3, [r5, #12]
 800e1c0:	065b      	lsls	r3, r3, #25
 800e1c2:	f53f af2d 	bmi.w	800e020 <_svfiprintf_r+0x28>
 800e1c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1c8:	e72c      	b.n	800e024 <_svfiprintf_r+0x2c>
 800e1ca:	ab03      	add	r3, sp, #12
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	462a      	mov	r2, r5
 800e1d0:	4b05      	ldr	r3, [pc, #20]	@ (800e1e8 <_svfiprintf_r+0x1f0>)
 800e1d2:	a904      	add	r1, sp, #16
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	f7fe f96b 	bl	800c4b0 <_printf_i>
 800e1da:	e7ed      	b.n	800e1b8 <_svfiprintf_r+0x1c0>
 800e1dc:	08034bf6 	.word	0x08034bf6
 800e1e0:	08034c00 	.word	0x08034c00
 800e1e4:	0800bfa1 	.word	0x0800bfa1
 800e1e8:	0800df41 	.word	0x0800df41
 800e1ec:	08034bfc 	.word	0x08034bfc

0800e1f0 <__sfputc_r>:
 800e1f0:	6893      	ldr	r3, [r2, #8]
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	b410      	push	{r4}
 800e1f8:	6093      	str	r3, [r2, #8]
 800e1fa:	da08      	bge.n	800e20e <__sfputc_r+0x1e>
 800e1fc:	6994      	ldr	r4, [r2, #24]
 800e1fe:	42a3      	cmp	r3, r4
 800e200:	db01      	blt.n	800e206 <__sfputc_r+0x16>
 800e202:	290a      	cmp	r1, #10
 800e204:	d103      	bne.n	800e20e <__sfputc_r+0x1e>
 800e206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e20a:	f000 b9df 	b.w	800e5cc <__swbuf_r>
 800e20e:	6813      	ldr	r3, [r2, #0]
 800e210:	1c58      	adds	r0, r3, #1
 800e212:	6010      	str	r0, [r2, #0]
 800e214:	7019      	strb	r1, [r3, #0]
 800e216:	4608      	mov	r0, r1
 800e218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <__sfputs_r>:
 800e21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e220:	4606      	mov	r6, r0
 800e222:	460f      	mov	r7, r1
 800e224:	4614      	mov	r4, r2
 800e226:	18d5      	adds	r5, r2, r3
 800e228:	42ac      	cmp	r4, r5
 800e22a:	d101      	bne.n	800e230 <__sfputs_r+0x12>
 800e22c:	2000      	movs	r0, #0
 800e22e:	e007      	b.n	800e240 <__sfputs_r+0x22>
 800e230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e234:	463a      	mov	r2, r7
 800e236:	4630      	mov	r0, r6
 800e238:	f7ff ffda 	bl	800e1f0 <__sfputc_r>
 800e23c:	1c43      	adds	r3, r0, #1
 800e23e:	d1f3      	bne.n	800e228 <__sfputs_r+0xa>
 800e240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e244 <_vfiprintf_r>:
 800e244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e248:	460d      	mov	r5, r1
 800e24a:	b09d      	sub	sp, #116	@ 0x74
 800e24c:	4614      	mov	r4, r2
 800e24e:	4698      	mov	r8, r3
 800e250:	4606      	mov	r6, r0
 800e252:	b118      	cbz	r0, 800e25c <_vfiprintf_r+0x18>
 800e254:	6a03      	ldr	r3, [r0, #32]
 800e256:	b90b      	cbnz	r3, 800e25c <_vfiprintf_r+0x18>
 800e258:	f7fe fad4 	bl	800c804 <__sinit>
 800e25c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e25e:	07d9      	lsls	r1, r3, #31
 800e260:	d405      	bmi.n	800e26e <_vfiprintf_r+0x2a>
 800e262:	89ab      	ldrh	r3, [r5, #12]
 800e264:	059a      	lsls	r2, r3, #22
 800e266:	d402      	bmi.n	800e26e <_vfiprintf_r+0x2a>
 800e268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e26a:	f7fe fbf8 	bl	800ca5e <__retarget_lock_acquire_recursive>
 800e26e:	89ab      	ldrh	r3, [r5, #12]
 800e270:	071b      	lsls	r3, r3, #28
 800e272:	d501      	bpl.n	800e278 <_vfiprintf_r+0x34>
 800e274:	692b      	ldr	r3, [r5, #16]
 800e276:	b99b      	cbnz	r3, 800e2a0 <_vfiprintf_r+0x5c>
 800e278:	4629      	mov	r1, r5
 800e27a:	4630      	mov	r0, r6
 800e27c:	f000 f9e4 	bl	800e648 <__swsetup_r>
 800e280:	b170      	cbz	r0, 800e2a0 <_vfiprintf_r+0x5c>
 800e282:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e284:	07dc      	lsls	r4, r3, #31
 800e286:	d504      	bpl.n	800e292 <_vfiprintf_r+0x4e>
 800e288:	f04f 30ff 	mov.w	r0, #4294967295
 800e28c:	b01d      	add	sp, #116	@ 0x74
 800e28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e292:	89ab      	ldrh	r3, [r5, #12]
 800e294:	0598      	lsls	r0, r3, #22
 800e296:	d4f7      	bmi.n	800e288 <_vfiprintf_r+0x44>
 800e298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e29a:	f7fe fbe1 	bl	800ca60 <__retarget_lock_release_recursive>
 800e29e:	e7f3      	b.n	800e288 <_vfiprintf_r+0x44>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2a4:	2320      	movs	r3, #32
 800e2a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2ae:	2330      	movs	r3, #48	@ 0x30
 800e2b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e460 <_vfiprintf_r+0x21c>
 800e2b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e2b8:	f04f 0901 	mov.w	r9, #1
 800e2bc:	4623      	mov	r3, r4
 800e2be:	469a      	mov	sl, r3
 800e2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2c4:	b10a      	cbz	r2, 800e2ca <_vfiprintf_r+0x86>
 800e2c6:	2a25      	cmp	r2, #37	@ 0x25
 800e2c8:	d1f9      	bne.n	800e2be <_vfiprintf_r+0x7a>
 800e2ca:	ebba 0b04 	subs.w	fp, sl, r4
 800e2ce:	d00b      	beq.n	800e2e8 <_vfiprintf_r+0xa4>
 800e2d0:	465b      	mov	r3, fp
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	4629      	mov	r1, r5
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	f7ff ffa1 	bl	800e21e <__sfputs_r>
 800e2dc:	3001      	adds	r0, #1
 800e2de:	f000 80a7 	beq.w	800e430 <_vfiprintf_r+0x1ec>
 800e2e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2e4:	445a      	add	r2, fp
 800e2e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f000 809f 	beq.w	800e430 <_vfiprintf_r+0x1ec>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2fc:	f10a 0a01 	add.w	sl, sl, #1
 800e300:	9304      	str	r3, [sp, #16]
 800e302:	9307      	str	r3, [sp, #28]
 800e304:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e308:	931a      	str	r3, [sp, #104]	@ 0x68
 800e30a:	4654      	mov	r4, sl
 800e30c:	2205      	movs	r2, #5
 800e30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e312:	4853      	ldr	r0, [pc, #332]	@ (800e460 <_vfiprintf_r+0x21c>)
 800e314:	f7f1 ffec 	bl	80002f0 <memchr>
 800e318:	9a04      	ldr	r2, [sp, #16]
 800e31a:	b9d8      	cbnz	r0, 800e354 <_vfiprintf_r+0x110>
 800e31c:	06d1      	lsls	r1, r2, #27
 800e31e:	bf44      	itt	mi
 800e320:	2320      	movmi	r3, #32
 800e322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e326:	0713      	lsls	r3, r2, #28
 800e328:	bf44      	itt	mi
 800e32a:	232b      	movmi	r3, #43	@ 0x2b
 800e32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e330:	f89a 3000 	ldrb.w	r3, [sl]
 800e334:	2b2a      	cmp	r3, #42	@ 0x2a
 800e336:	d015      	beq.n	800e364 <_vfiprintf_r+0x120>
 800e338:	9a07      	ldr	r2, [sp, #28]
 800e33a:	4654      	mov	r4, sl
 800e33c:	2000      	movs	r0, #0
 800e33e:	f04f 0c0a 	mov.w	ip, #10
 800e342:	4621      	mov	r1, r4
 800e344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e348:	3b30      	subs	r3, #48	@ 0x30
 800e34a:	2b09      	cmp	r3, #9
 800e34c:	d94b      	bls.n	800e3e6 <_vfiprintf_r+0x1a2>
 800e34e:	b1b0      	cbz	r0, 800e37e <_vfiprintf_r+0x13a>
 800e350:	9207      	str	r2, [sp, #28]
 800e352:	e014      	b.n	800e37e <_vfiprintf_r+0x13a>
 800e354:	eba0 0308 	sub.w	r3, r0, r8
 800e358:	fa09 f303 	lsl.w	r3, r9, r3
 800e35c:	4313      	orrs	r3, r2
 800e35e:	9304      	str	r3, [sp, #16]
 800e360:	46a2      	mov	sl, r4
 800e362:	e7d2      	b.n	800e30a <_vfiprintf_r+0xc6>
 800e364:	9b03      	ldr	r3, [sp, #12]
 800e366:	1d19      	adds	r1, r3, #4
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	9103      	str	r1, [sp, #12]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	bfbb      	ittet	lt
 800e370:	425b      	neglt	r3, r3
 800e372:	f042 0202 	orrlt.w	r2, r2, #2
 800e376:	9307      	strge	r3, [sp, #28]
 800e378:	9307      	strlt	r3, [sp, #28]
 800e37a:	bfb8      	it	lt
 800e37c:	9204      	strlt	r2, [sp, #16]
 800e37e:	7823      	ldrb	r3, [r4, #0]
 800e380:	2b2e      	cmp	r3, #46	@ 0x2e
 800e382:	d10a      	bne.n	800e39a <_vfiprintf_r+0x156>
 800e384:	7863      	ldrb	r3, [r4, #1]
 800e386:	2b2a      	cmp	r3, #42	@ 0x2a
 800e388:	d132      	bne.n	800e3f0 <_vfiprintf_r+0x1ac>
 800e38a:	9b03      	ldr	r3, [sp, #12]
 800e38c:	1d1a      	adds	r2, r3, #4
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	9203      	str	r2, [sp, #12]
 800e392:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e396:	3402      	adds	r4, #2
 800e398:	9305      	str	r3, [sp, #20]
 800e39a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e470 <_vfiprintf_r+0x22c>
 800e39e:	7821      	ldrb	r1, [r4, #0]
 800e3a0:	2203      	movs	r2, #3
 800e3a2:	4650      	mov	r0, sl
 800e3a4:	f7f1 ffa4 	bl	80002f0 <memchr>
 800e3a8:	b138      	cbz	r0, 800e3ba <_vfiprintf_r+0x176>
 800e3aa:	9b04      	ldr	r3, [sp, #16]
 800e3ac:	eba0 000a 	sub.w	r0, r0, sl
 800e3b0:	2240      	movs	r2, #64	@ 0x40
 800e3b2:	4082      	lsls	r2, r0
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	3401      	adds	r4, #1
 800e3b8:	9304      	str	r3, [sp, #16]
 800e3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3be:	4829      	ldr	r0, [pc, #164]	@ (800e464 <_vfiprintf_r+0x220>)
 800e3c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e3c4:	2206      	movs	r2, #6
 800e3c6:	f7f1 ff93 	bl	80002f0 <memchr>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d03f      	beq.n	800e44e <_vfiprintf_r+0x20a>
 800e3ce:	4b26      	ldr	r3, [pc, #152]	@ (800e468 <_vfiprintf_r+0x224>)
 800e3d0:	bb1b      	cbnz	r3, 800e41a <_vfiprintf_r+0x1d6>
 800e3d2:	9b03      	ldr	r3, [sp, #12]
 800e3d4:	3307      	adds	r3, #7
 800e3d6:	f023 0307 	bic.w	r3, r3, #7
 800e3da:	3308      	adds	r3, #8
 800e3dc:	9303      	str	r3, [sp, #12]
 800e3de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3e0:	443b      	add	r3, r7
 800e3e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3e4:	e76a      	b.n	800e2bc <_vfiprintf_r+0x78>
 800e3e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	2001      	movs	r0, #1
 800e3ee:	e7a8      	b.n	800e342 <_vfiprintf_r+0xfe>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	3401      	adds	r4, #1
 800e3f4:	9305      	str	r3, [sp, #20]
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	f04f 0c0a 	mov.w	ip, #10
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e402:	3a30      	subs	r2, #48	@ 0x30
 800e404:	2a09      	cmp	r2, #9
 800e406:	d903      	bls.n	800e410 <_vfiprintf_r+0x1cc>
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d0c6      	beq.n	800e39a <_vfiprintf_r+0x156>
 800e40c:	9105      	str	r1, [sp, #20]
 800e40e:	e7c4      	b.n	800e39a <_vfiprintf_r+0x156>
 800e410:	fb0c 2101 	mla	r1, ip, r1, r2
 800e414:	4604      	mov	r4, r0
 800e416:	2301      	movs	r3, #1
 800e418:	e7f0      	b.n	800e3fc <_vfiprintf_r+0x1b8>
 800e41a:	ab03      	add	r3, sp, #12
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	462a      	mov	r2, r5
 800e420:	4b12      	ldr	r3, [pc, #72]	@ (800e46c <_vfiprintf_r+0x228>)
 800e422:	a904      	add	r1, sp, #16
 800e424:	4630      	mov	r0, r6
 800e426:	f7fd fdbb 	bl	800bfa0 <_printf_float>
 800e42a:	4607      	mov	r7, r0
 800e42c:	1c78      	adds	r0, r7, #1
 800e42e:	d1d6      	bne.n	800e3de <_vfiprintf_r+0x19a>
 800e430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e432:	07d9      	lsls	r1, r3, #31
 800e434:	d405      	bmi.n	800e442 <_vfiprintf_r+0x1fe>
 800e436:	89ab      	ldrh	r3, [r5, #12]
 800e438:	059a      	lsls	r2, r3, #22
 800e43a:	d402      	bmi.n	800e442 <_vfiprintf_r+0x1fe>
 800e43c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e43e:	f7fe fb0f 	bl	800ca60 <__retarget_lock_release_recursive>
 800e442:	89ab      	ldrh	r3, [r5, #12]
 800e444:	065b      	lsls	r3, r3, #25
 800e446:	f53f af1f 	bmi.w	800e288 <_vfiprintf_r+0x44>
 800e44a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e44c:	e71e      	b.n	800e28c <_vfiprintf_r+0x48>
 800e44e:	ab03      	add	r3, sp, #12
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	462a      	mov	r2, r5
 800e454:	4b05      	ldr	r3, [pc, #20]	@ (800e46c <_vfiprintf_r+0x228>)
 800e456:	a904      	add	r1, sp, #16
 800e458:	4630      	mov	r0, r6
 800e45a:	f7fe f829 	bl	800c4b0 <_printf_i>
 800e45e:	e7e4      	b.n	800e42a <_vfiprintf_r+0x1e6>
 800e460:	08034bf6 	.word	0x08034bf6
 800e464:	08034c00 	.word	0x08034c00
 800e468:	0800bfa1 	.word	0x0800bfa1
 800e46c:	0800e21f 	.word	0x0800e21f
 800e470:	08034bfc 	.word	0x08034bfc

0800e474 <__sflush_r>:
 800e474:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e47c:	0716      	lsls	r6, r2, #28
 800e47e:	4605      	mov	r5, r0
 800e480:	460c      	mov	r4, r1
 800e482:	d454      	bmi.n	800e52e <__sflush_r+0xba>
 800e484:	684b      	ldr	r3, [r1, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	dc02      	bgt.n	800e490 <__sflush_r+0x1c>
 800e48a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	dd48      	ble.n	800e522 <__sflush_r+0xae>
 800e490:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e492:	2e00      	cmp	r6, #0
 800e494:	d045      	beq.n	800e522 <__sflush_r+0xae>
 800e496:	2300      	movs	r3, #0
 800e498:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e49c:	682f      	ldr	r7, [r5, #0]
 800e49e:	6a21      	ldr	r1, [r4, #32]
 800e4a0:	602b      	str	r3, [r5, #0]
 800e4a2:	d030      	beq.n	800e506 <__sflush_r+0x92>
 800e4a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e4a6:	89a3      	ldrh	r3, [r4, #12]
 800e4a8:	0759      	lsls	r1, r3, #29
 800e4aa:	d505      	bpl.n	800e4b8 <__sflush_r+0x44>
 800e4ac:	6863      	ldr	r3, [r4, #4]
 800e4ae:	1ad2      	subs	r2, r2, r3
 800e4b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e4b2:	b10b      	cbz	r3, 800e4b8 <__sflush_r+0x44>
 800e4b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e4b6:	1ad2      	subs	r2, r2, r3
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4bc:	6a21      	ldr	r1, [r4, #32]
 800e4be:	4628      	mov	r0, r5
 800e4c0:	47b0      	blx	r6
 800e4c2:	1c43      	adds	r3, r0, #1
 800e4c4:	89a3      	ldrh	r3, [r4, #12]
 800e4c6:	d106      	bne.n	800e4d6 <__sflush_r+0x62>
 800e4c8:	6829      	ldr	r1, [r5, #0]
 800e4ca:	291d      	cmp	r1, #29
 800e4cc:	d82b      	bhi.n	800e526 <__sflush_r+0xb2>
 800e4ce:	4a2a      	ldr	r2, [pc, #168]	@ (800e578 <__sflush_r+0x104>)
 800e4d0:	40ca      	lsrs	r2, r1
 800e4d2:	07d6      	lsls	r6, r2, #31
 800e4d4:	d527      	bpl.n	800e526 <__sflush_r+0xb2>
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	6062      	str	r2, [r4, #4]
 800e4da:	04d9      	lsls	r1, r3, #19
 800e4dc:	6922      	ldr	r2, [r4, #16]
 800e4de:	6022      	str	r2, [r4, #0]
 800e4e0:	d504      	bpl.n	800e4ec <__sflush_r+0x78>
 800e4e2:	1c42      	adds	r2, r0, #1
 800e4e4:	d101      	bne.n	800e4ea <__sflush_r+0x76>
 800e4e6:	682b      	ldr	r3, [r5, #0]
 800e4e8:	b903      	cbnz	r3, 800e4ec <__sflush_r+0x78>
 800e4ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800e4ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4ee:	602f      	str	r7, [r5, #0]
 800e4f0:	b1b9      	cbz	r1, 800e522 <__sflush_r+0xae>
 800e4f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4f6:	4299      	cmp	r1, r3
 800e4f8:	d002      	beq.n	800e500 <__sflush_r+0x8c>
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	f7ff f8a6 	bl	800d64c <_free_r>
 800e500:	2300      	movs	r3, #0
 800e502:	6363      	str	r3, [r4, #52]	@ 0x34
 800e504:	e00d      	b.n	800e522 <__sflush_r+0xae>
 800e506:	2301      	movs	r3, #1
 800e508:	4628      	mov	r0, r5
 800e50a:	47b0      	blx	r6
 800e50c:	4602      	mov	r2, r0
 800e50e:	1c50      	adds	r0, r2, #1
 800e510:	d1c9      	bne.n	800e4a6 <__sflush_r+0x32>
 800e512:	682b      	ldr	r3, [r5, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d0c6      	beq.n	800e4a6 <__sflush_r+0x32>
 800e518:	2b1d      	cmp	r3, #29
 800e51a:	d001      	beq.n	800e520 <__sflush_r+0xac>
 800e51c:	2b16      	cmp	r3, #22
 800e51e:	d11e      	bne.n	800e55e <__sflush_r+0xea>
 800e520:	602f      	str	r7, [r5, #0]
 800e522:	2000      	movs	r0, #0
 800e524:	e022      	b.n	800e56c <__sflush_r+0xf8>
 800e526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e52a:	b21b      	sxth	r3, r3
 800e52c:	e01b      	b.n	800e566 <__sflush_r+0xf2>
 800e52e:	690f      	ldr	r7, [r1, #16]
 800e530:	2f00      	cmp	r7, #0
 800e532:	d0f6      	beq.n	800e522 <__sflush_r+0xae>
 800e534:	0793      	lsls	r3, r2, #30
 800e536:	680e      	ldr	r6, [r1, #0]
 800e538:	bf08      	it	eq
 800e53a:	694b      	ldreq	r3, [r1, #20]
 800e53c:	600f      	str	r7, [r1, #0]
 800e53e:	bf18      	it	ne
 800e540:	2300      	movne	r3, #0
 800e542:	eba6 0807 	sub.w	r8, r6, r7
 800e546:	608b      	str	r3, [r1, #8]
 800e548:	f1b8 0f00 	cmp.w	r8, #0
 800e54c:	dde9      	ble.n	800e522 <__sflush_r+0xae>
 800e54e:	6a21      	ldr	r1, [r4, #32]
 800e550:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e552:	4643      	mov	r3, r8
 800e554:	463a      	mov	r2, r7
 800e556:	4628      	mov	r0, r5
 800e558:	47b0      	blx	r6
 800e55a:	2800      	cmp	r0, #0
 800e55c:	dc08      	bgt.n	800e570 <__sflush_r+0xfc>
 800e55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e566:	81a3      	strh	r3, [r4, #12]
 800e568:	f04f 30ff 	mov.w	r0, #4294967295
 800e56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e570:	4407      	add	r7, r0
 800e572:	eba8 0800 	sub.w	r8, r8, r0
 800e576:	e7e7      	b.n	800e548 <__sflush_r+0xd4>
 800e578:	20400001 	.word	0x20400001

0800e57c <_fflush_r>:
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	690b      	ldr	r3, [r1, #16]
 800e580:	4605      	mov	r5, r0
 800e582:	460c      	mov	r4, r1
 800e584:	b913      	cbnz	r3, 800e58c <_fflush_r+0x10>
 800e586:	2500      	movs	r5, #0
 800e588:	4628      	mov	r0, r5
 800e58a:	bd38      	pop	{r3, r4, r5, pc}
 800e58c:	b118      	cbz	r0, 800e596 <_fflush_r+0x1a>
 800e58e:	6a03      	ldr	r3, [r0, #32]
 800e590:	b90b      	cbnz	r3, 800e596 <_fflush_r+0x1a>
 800e592:	f7fe f937 	bl	800c804 <__sinit>
 800e596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d0f3      	beq.n	800e586 <_fflush_r+0xa>
 800e59e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5a0:	07d0      	lsls	r0, r2, #31
 800e5a2:	d404      	bmi.n	800e5ae <_fflush_r+0x32>
 800e5a4:	0599      	lsls	r1, r3, #22
 800e5a6:	d402      	bmi.n	800e5ae <_fflush_r+0x32>
 800e5a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5aa:	f7fe fa58 	bl	800ca5e <__retarget_lock_acquire_recursive>
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	4621      	mov	r1, r4
 800e5b2:	f7ff ff5f 	bl	800e474 <__sflush_r>
 800e5b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5b8:	07da      	lsls	r2, r3, #31
 800e5ba:	4605      	mov	r5, r0
 800e5bc:	d4e4      	bmi.n	800e588 <_fflush_r+0xc>
 800e5be:	89a3      	ldrh	r3, [r4, #12]
 800e5c0:	059b      	lsls	r3, r3, #22
 800e5c2:	d4e1      	bmi.n	800e588 <_fflush_r+0xc>
 800e5c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5c6:	f7fe fa4b 	bl	800ca60 <__retarget_lock_release_recursive>
 800e5ca:	e7dd      	b.n	800e588 <_fflush_r+0xc>

0800e5cc <__swbuf_r>:
 800e5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ce:	460e      	mov	r6, r1
 800e5d0:	4614      	mov	r4, r2
 800e5d2:	4605      	mov	r5, r0
 800e5d4:	b118      	cbz	r0, 800e5de <__swbuf_r+0x12>
 800e5d6:	6a03      	ldr	r3, [r0, #32]
 800e5d8:	b90b      	cbnz	r3, 800e5de <__swbuf_r+0x12>
 800e5da:	f7fe f913 	bl	800c804 <__sinit>
 800e5de:	69a3      	ldr	r3, [r4, #24]
 800e5e0:	60a3      	str	r3, [r4, #8]
 800e5e2:	89a3      	ldrh	r3, [r4, #12]
 800e5e4:	071a      	lsls	r2, r3, #28
 800e5e6:	d501      	bpl.n	800e5ec <__swbuf_r+0x20>
 800e5e8:	6923      	ldr	r3, [r4, #16]
 800e5ea:	b943      	cbnz	r3, 800e5fe <__swbuf_r+0x32>
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	f000 f82a 	bl	800e648 <__swsetup_r>
 800e5f4:	b118      	cbz	r0, 800e5fe <__swbuf_r+0x32>
 800e5f6:	f04f 37ff 	mov.w	r7, #4294967295
 800e5fa:	4638      	mov	r0, r7
 800e5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	6922      	ldr	r2, [r4, #16]
 800e602:	1a98      	subs	r0, r3, r2
 800e604:	6963      	ldr	r3, [r4, #20]
 800e606:	b2f6      	uxtb	r6, r6
 800e608:	4283      	cmp	r3, r0
 800e60a:	4637      	mov	r7, r6
 800e60c:	dc05      	bgt.n	800e61a <__swbuf_r+0x4e>
 800e60e:	4621      	mov	r1, r4
 800e610:	4628      	mov	r0, r5
 800e612:	f7ff ffb3 	bl	800e57c <_fflush_r>
 800e616:	2800      	cmp	r0, #0
 800e618:	d1ed      	bne.n	800e5f6 <__swbuf_r+0x2a>
 800e61a:	68a3      	ldr	r3, [r4, #8]
 800e61c:	3b01      	subs	r3, #1
 800e61e:	60a3      	str	r3, [r4, #8]
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	6022      	str	r2, [r4, #0]
 800e626:	701e      	strb	r6, [r3, #0]
 800e628:	6962      	ldr	r2, [r4, #20]
 800e62a:	1c43      	adds	r3, r0, #1
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d004      	beq.n	800e63a <__swbuf_r+0x6e>
 800e630:	89a3      	ldrh	r3, [r4, #12]
 800e632:	07db      	lsls	r3, r3, #31
 800e634:	d5e1      	bpl.n	800e5fa <__swbuf_r+0x2e>
 800e636:	2e0a      	cmp	r6, #10
 800e638:	d1df      	bne.n	800e5fa <__swbuf_r+0x2e>
 800e63a:	4621      	mov	r1, r4
 800e63c:	4628      	mov	r0, r5
 800e63e:	f7ff ff9d 	bl	800e57c <_fflush_r>
 800e642:	2800      	cmp	r0, #0
 800e644:	d0d9      	beq.n	800e5fa <__swbuf_r+0x2e>
 800e646:	e7d6      	b.n	800e5f6 <__swbuf_r+0x2a>

0800e648 <__swsetup_r>:
 800e648:	b538      	push	{r3, r4, r5, lr}
 800e64a:	4b29      	ldr	r3, [pc, #164]	@ (800e6f0 <__swsetup_r+0xa8>)
 800e64c:	4605      	mov	r5, r0
 800e64e:	6818      	ldr	r0, [r3, #0]
 800e650:	460c      	mov	r4, r1
 800e652:	b118      	cbz	r0, 800e65c <__swsetup_r+0x14>
 800e654:	6a03      	ldr	r3, [r0, #32]
 800e656:	b90b      	cbnz	r3, 800e65c <__swsetup_r+0x14>
 800e658:	f7fe f8d4 	bl	800c804 <__sinit>
 800e65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e660:	0719      	lsls	r1, r3, #28
 800e662:	d422      	bmi.n	800e6aa <__swsetup_r+0x62>
 800e664:	06da      	lsls	r2, r3, #27
 800e666:	d407      	bmi.n	800e678 <__swsetup_r+0x30>
 800e668:	2209      	movs	r2, #9
 800e66a:	602a      	str	r2, [r5, #0]
 800e66c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e670:	81a3      	strh	r3, [r4, #12]
 800e672:	f04f 30ff 	mov.w	r0, #4294967295
 800e676:	e033      	b.n	800e6e0 <__swsetup_r+0x98>
 800e678:	0758      	lsls	r0, r3, #29
 800e67a:	d512      	bpl.n	800e6a2 <__swsetup_r+0x5a>
 800e67c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e67e:	b141      	cbz	r1, 800e692 <__swsetup_r+0x4a>
 800e680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e684:	4299      	cmp	r1, r3
 800e686:	d002      	beq.n	800e68e <__swsetup_r+0x46>
 800e688:	4628      	mov	r0, r5
 800e68a:	f7fe ffdf 	bl	800d64c <_free_r>
 800e68e:	2300      	movs	r3, #0
 800e690:	6363      	str	r3, [r4, #52]	@ 0x34
 800e692:	89a3      	ldrh	r3, [r4, #12]
 800e694:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e698:	81a3      	strh	r3, [r4, #12]
 800e69a:	2300      	movs	r3, #0
 800e69c:	6063      	str	r3, [r4, #4]
 800e69e:	6923      	ldr	r3, [r4, #16]
 800e6a0:	6023      	str	r3, [r4, #0]
 800e6a2:	89a3      	ldrh	r3, [r4, #12]
 800e6a4:	f043 0308 	orr.w	r3, r3, #8
 800e6a8:	81a3      	strh	r3, [r4, #12]
 800e6aa:	6923      	ldr	r3, [r4, #16]
 800e6ac:	b94b      	cbnz	r3, 800e6c2 <__swsetup_r+0x7a>
 800e6ae:	89a3      	ldrh	r3, [r4, #12]
 800e6b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6b8:	d003      	beq.n	800e6c2 <__swsetup_r+0x7a>
 800e6ba:	4621      	mov	r1, r4
 800e6bc:	4628      	mov	r0, r5
 800e6be:	f000 f8fb 	bl	800e8b8 <__smakebuf_r>
 800e6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6c6:	f013 0201 	ands.w	r2, r3, #1
 800e6ca:	d00a      	beq.n	800e6e2 <__swsetup_r+0x9a>
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	60a2      	str	r2, [r4, #8]
 800e6d0:	6962      	ldr	r2, [r4, #20]
 800e6d2:	4252      	negs	r2, r2
 800e6d4:	61a2      	str	r2, [r4, #24]
 800e6d6:	6922      	ldr	r2, [r4, #16]
 800e6d8:	b942      	cbnz	r2, 800e6ec <__swsetup_r+0xa4>
 800e6da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6de:	d1c5      	bne.n	800e66c <__swsetup_r+0x24>
 800e6e0:	bd38      	pop	{r3, r4, r5, pc}
 800e6e2:	0799      	lsls	r1, r3, #30
 800e6e4:	bf58      	it	pl
 800e6e6:	6962      	ldrpl	r2, [r4, #20]
 800e6e8:	60a2      	str	r2, [r4, #8]
 800e6ea:	e7f4      	b.n	800e6d6 <__swsetup_r+0x8e>
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	e7f7      	b.n	800e6e0 <__swsetup_r+0x98>
 800e6f0:	240000ac 	.word	0x240000ac

0800e6f4 <memmove>:
 800e6f4:	4288      	cmp	r0, r1
 800e6f6:	b510      	push	{r4, lr}
 800e6f8:	eb01 0402 	add.w	r4, r1, r2
 800e6fc:	d902      	bls.n	800e704 <memmove+0x10>
 800e6fe:	4284      	cmp	r4, r0
 800e700:	4623      	mov	r3, r4
 800e702:	d807      	bhi.n	800e714 <memmove+0x20>
 800e704:	1e43      	subs	r3, r0, #1
 800e706:	42a1      	cmp	r1, r4
 800e708:	d008      	beq.n	800e71c <memmove+0x28>
 800e70a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e70e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e712:	e7f8      	b.n	800e706 <memmove+0x12>
 800e714:	4402      	add	r2, r0
 800e716:	4601      	mov	r1, r0
 800e718:	428a      	cmp	r2, r1
 800e71a:	d100      	bne.n	800e71e <memmove+0x2a>
 800e71c:	bd10      	pop	{r4, pc}
 800e71e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e726:	e7f7      	b.n	800e718 <memmove+0x24>

0800e728 <_sbrk_r>:
 800e728:	b538      	push	{r3, r4, r5, lr}
 800e72a:	4d06      	ldr	r5, [pc, #24]	@ (800e744 <_sbrk_r+0x1c>)
 800e72c:	2300      	movs	r3, #0
 800e72e:	4604      	mov	r4, r0
 800e730:	4608      	mov	r0, r1
 800e732:	602b      	str	r3, [r5, #0]
 800e734:	f7f2 fe84 	bl	8001440 <_sbrk>
 800e738:	1c43      	adds	r3, r0, #1
 800e73a:	d102      	bne.n	800e742 <_sbrk_r+0x1a>
 800e73c:	682b      	ldr	r3, [r5, #0]
 800e73e:	b103      	cbz	r3, 800e742 <_sbrk_r+0x1a>
 800e740:	6023      	str	r3, [r4, #0]
 800e742:	bd38      	pop	{r3, r4, r5, pc}
 800e744:	24001954 	.word	0x24001954

0800e748 <__assert_func>:
 800e748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e74a:	4614      	mov	r4, r2
 800e74c:	461a      	mov	r2, r3
 800e74e:	4b09      	ldr	r3, [pc, #36]	@ (800e774 <__assert_func+0x2c>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4605      	mov	r5, r0
 800e754:	68d8      	ldr	r0, [r3, #12]
 800e756:	b14c      	cbz	r4, 800e76c <__assert_func+0x24>
 800e758:	4b07      	ldr	r3, [pc, #28]	@ (800e778 <__assert_func+0x30>)
 800e75a:	9100      	str	r1, [sp, #0]
 800e75c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e760:	4906      	ldr	r1, [pc, #24]	@ (800e77c <__assert_func+0x34>)
 800e762:	462b      	mov	r3, r5
 800e764:	f000 f870 	bl	800e848 <fiprintf>
 800e768:	f000 f904 	bl	800e974 <abort>
 800e76c:	4b04      	ldr	r3, [pc, #16]	@ (800e780 <__assert_func+0x38>)
 800e76e:	461c      	mov	r4, r3
 800e770:	e7f3      	b.n	800e75a <__assert_func+0x12>
 800e772:	bf00      	nop
 800e774:	240000ac 	.word	0x240000ac
 800e778:	08034c11 	.word	0x08034c11
 800e77c:	08034c1e 	.word	0x08034c1e
 800e780:	08034c4c 	.word	0x08034c4c

0800e784 <_calloc_r>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	fba1 5402 	umull	r5, r4, r1, r2
 800e78a:	b934      	cbnz	r4, 800e79a <_calloc_r+0x16>
 800e78c:	4629      	mov	r1, r5
 800e78e:	f7fe ffd1 	bl	800d734 <_malloc_r>
 800e792:	4606      	mov	r6, r0
 800e794:	b928      	cbnz	r0, 800e7a2 <_calloc_r+0x1e>
 800e796:	4630      	mov	r0, r6
 800e798:	bd70      	pop	{r4, r5, r6, pc}
 800e79a:	220c      	movs	r2, #12
 800e79c:	6002      	str	r2, [r0, #0]
 800e79e:	2600      	movs	r6, #0
 800e7a0:	e7f9      	b.n	800e796 <_calloc_r+0x12>
 800e7a2:	462a      	mov	r2, r5
 800e7a4:	4621      	mov	r1, r4
 800e7a6:	f7fe f8dc 	bl	800c962 <memset>
 800e7aa:	e7f4      	b.n	800e796 <_calloc_r+0x12>

0800e7ac <__ascii_mbtowc>:
 800e7ac:	b082      	sub	sp, #8
 800e7ae:	b901      	cbnz	r1, 800e7b2 <__ascii_mbtowc+0x6>
 800e7b0:	a901      	add	r1, sp, #4
 800e7b2:	b142      	cbz	r2, 800e7c6 <__ascii_mbtowc+0x1a>
 800e7b4:	b14b      	cbz	r3, 800e7ca <__ascii_mbtowc+0x1e>
 800e7b6:	7813      	ldrb	r3, [r2, #0]
 800e7b8:	600b      	str	r3, [r1, #0]
 800e7ba:	7812      	ldrb	r2, [r2, #0]
 800e7bc:	1e10      	subs	r0, r2, #0
 800e7be:	bf18      	it	ne
 800e7c0:	2001      	movne	r0, #1
 800e7c2:	b002      	add	sp, #8
 800e7c4:	4770      	bx	lr
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	e7fb      	b.n	800e7c2 <__ascii_mbtowc+0x16>
 800e7ca:	f06f 0001 	mvn.w	r0, #1
 800e7ce:	e7f8      	b.n	800e7c2 <__ascii_mbtowc+0x16>

0800e7d0 <_realloc_r>:
 800e7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d4:	4607      	mov	r7, r0
 800e7d6:	4614      	mov	r4, r2
 800e7d8:	460d      	mov	r5, r1
 800e7da:	b921      	cbnz	r1, 800e7e6 <_realloc_r+0x16>
 800e7dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e0:	4611      	mov	r1, r2
 800e7e2:	f7fe bfa7 	b.w	800d734 <_malloc_r>
 800e7e6:	b92a      	cbnz	r2, 800e7f4 <_realloc_r+0x24>
 800e7e8:	f7fe ff30 	bl	800d64c <_free_r>
 800e7ec:	4625      	mov	r5, r4
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f4:	f000 f8c5 	bl	800e982 <_malloc_usable_size_r>
 800e7f8:	4284      	cmp	r4, r0
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	d802      	bhi.n	800e804 <_realloc_r+0x34>
 800e7fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e802:	d8f4      	bhi.n	800e7ee <_realloc_r+0x1e>
 800e804:	4621      	mov	r1, r4
 800e806:	4638      	mov	r0, r7
 800e808:	f7fe ff94 	bl	800d734 <_malloc_r>
 800e80c:	4680      	mov	r8, r0
 800e80e:	b908      	cbnz	r0, 800e814 <_realloc_r+0x44>
 800e810:	4645      	mov	r5, r8
 800e812:	e7ec      	b.n	800e7ee <_realloc_r+0x1e>
 800e814:	42b4      	cmp	r4, r6
 800e816:	4622      	mov	r2, r4
 800e818:	4629      	mov	r1, r5
 800e81a:	bf28      	it	cs
 800e81c:	4632      	movcs	r2, r6
 800e81e:	f7fe f920 	bl	800ca62 <memcpy>
 800e822:	4629      	mov	r1, r5
 800e824:	4638      	mov	r0, r7
 800e826:	f7fe ff11 	bl	800d64c <_free_r>
 800e82a:	e7f1      	b.n	800e810 <_realloc_r+0x40>

0800e82c <__ascii_wctomb>:
 800e82c:	4603      	mov	r3, r0
 800e82e:	4608      	mov	r0, r1
 800e830:	b141      	cbz	r1, 800e844 <__ascii_wctomb+0x18>
 800e832:	2aff      	cmp	r2, #255	@ 0xff
 800e834:	d904      	bls.n	800e840 <__ascii_wctomb+0x14>
 800e836:	228a      	movs	r2, #138	@ 0x8a
 800e838:	601a      	str	r2, [r3, #0]
 800e83a:	f04f 30ff 	mov.w	r0, #4294967295
 800e83e:	4770      	bx	lr
 800e840:	700a      	strb	r2, [r1, #0]
 800e842:	2001      	movs	r0, #1
 800e844:	4770      	bx	lr
	...

0800e848 <fiprintf>:
 800e848:	b40e      	push	{r1, r2, r3}
 800e84a:	b503      	push	{r0, r1, lr}
 800e84c:	4601      	mov	r1, r0
 800e84e:	ab03      	add	r3, sp, #12
 800e850:	4805      	ldr	r0, [pc, #20]	@ (800e868 <fiprintf+0x20>)
 800e852:	f853 2b04 	ldr.w	r2, [r3], #4
 800e856:	6800      	ldr	r0, [r0, #0]
 800e858:	9301      	str	r3, [sp, #4]
 800e85a:	f7ff fcf3 	bl	800e244 <_vfiprintf_r>
 800e85e:	b002      	add	sp, #8
 800e860:	f85d eb04 	ldr.w	lr, [sp], #4
 800e864:	b003      	add	sp, #12
 800e866:	4770      	bx	lr
 800e868:	240000ac 	.word	0x240000ac

0800e86c <__swhatbuf_r>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	460c      	mov	r4, r1
 800e870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e874:	2900      	cmp	r1, #0
 800e876:	b096      	sub	sp, #88	@ 0x58
 800e878:	4615      	mov	r5, r2
 800e87a:	461e      	mov	r6, r3
 800e87c:	da0d      	bge.n	800e89a <__swhatbuf_r+0x2e>
 800e87e:	89a3      	ldrh	r3, [r4, #12]
 800e880:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e884:	f04f 0100 	mov.w	r1, #0
 800e888:	bf14      	ite	ne
 800e88a:	2340      	movne	r3, #64	@ 0x40
 800e88c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e890:	2000      	movs	r0, #0
 800e892:	6031      	str	r1, [r6, #0]
 800e894:	602b      	str	r3, [r5, #0]
 800e896:	b016      	add	sp, #88	@ 0x58
 800e898:	bd70      	pop	{r4, r5, r6, pc}
 800e89a:	466a      	mov	r2, sp
 800e89c:	f000 f848 	bl	800e930 <_fstat_r>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	dbec      	blt.n	800e87e <__swhatbuf_r+0x12>
 800e8a4:	9901      	ldr	r1, [sp, #4]
 800e8a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e8aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e8ae:	4259      	negs	r1, r3
 800e8b0:	4159      	adcs	r1, r3
 800e8b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8b6:	e7eb      	b.n	800e890 <__swhatbuf_r+0x24>

0800e8b8 <__smakebuf_r>:
 800e8b8:	898b      	ldrh	r3, [r1, #12]
 800e8ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8bc:	079d      	lsls	r5, r3, #30
 800e8be:	4606      	mov	r6, r0
 800e8c0:	460c      	mov	r4, r1
 800e8c2:	d507      	bpl.n	800e8d4 <__smakebuf_r+0x1c>
 800e8c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e8c8:	6023      	str	r3, [r4, #0]
 800e8ca:	6123      	str	r3, [r4, #16]
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	6163      	str	r3, [r4, #20]
 800e8d0:	b003      	add	sp, #12
 800e8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8d4:	ab01      	add	r3, sp, #4
 800e8d6:	466a      	mov	r2, sp
 800e8d8:	f7ff ffc8 	bl	800e86c <__swhatbuf_r>
 800e8dc:	9f00      	ldr	r7, [sp, #0]
 800e8de:	4605      	mov	r5, r0
 800e8e0:	4639      	mov	r1, r7
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	f7fe ff26 	bl	800d734 <_malloc_r>
 800e8e8:	b948      	cbnz	r0, 800e8fe <__smakebuf_r+0x46>
 800e8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8ee:	059a      	lsls	r2, r3, #22
 800e8f0:	d4ee      	bmi.n	800e8d0 <__smakebuf_r+0x18>
 800e8f2:	f023 0303 	bic.w	r3, r3, #3
 800e8f6:	f043 0302 	orr.w	r3, r3, #2
 800e8fa:	81a3      	strh	r3, [r4, #12]
 800e8fc:	e7e2      	b.n	800e8c4 <__smakebuf_r+0xc>
 800e8fe:	89a3      	ldrh	r3, [r4, #12]
 800e900:	6020      	str	r0, [r4, #0]
 800e902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e906:	81a3      	strh	r3, [r4, #12]
 800e908:	9b01      	ldr	r3, [sp, #4]
 800e90a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e90e:	b15b      	cbz	r3, 800e928 <__smakebuf_r+0x70>
 800e910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e914:	4630      	mov	r0, r6
 800e916:	f000 f81d 	bl	800e954 <_isatty_r>
 800e91a:	b128      	cbz	r0, 800e928 <__smakebuf_r+0x70>
 800e91c:	89a3      	ldrh	r3, [r4, #12]
 800e91e:	f023 0303 	bic.w	r3, r3, #3
 800e922:	f043 0301 	orr.w	r3, r3, #1
 800e926:	81a3      	strh	r3, [r4, #12]
 800e928:	89a3      	ldrh	r3, [r4, #12]
 800e92a:	431d      	orrs	r5, r3
 800e92c:	81a5      	strh	r5, [r4, #12]
 800e92e:	e7cf      	b.n	800e8d0 <__smakebuf_r+0x18>

0800e930 <_fstat_r>:
 800e930:	b538      	push	{r3, r4, r5, lr}
 800e932:	4d07      	ldr	r5, [pc, #28]	@ (800e950 <_fstat_r+0x20>)
 800e934:	2300      	movs	r3, #0
 800e936:	4604      	mov	r4, r0
 800e938:	4608      	mov	r0, r1
 800e93a:	4611      	mov	r1, r2
 800e93c:	602b      	str	r3, [r5, #0]
 800e93e:	f7f2 fd57 	bl	80013f0 <_fstat>
 800e942:	1c43      	adds	r3, r0, #1
 800e944:	d102      	bne.n	800e94c <_fstat_r+0x1c>
 800e946:	682b      	ldr	r3, [r5, #0]
 800e948:	b103      	cbz	r3, 800e94c <_fstat_r+0x1c>
 800e94a:	6023      	str	r3, [r4, #0]
 800e94c:	bd38      	pop	{r3, r4, r5, pc}
 800e94e:	bf00      	nop
 800e950:	24001954 	.word	0x24001954

0800e954 <_isatty_r>:
 800e954:	b538      	push	{r3, r4, r5, lr}
 800e956:	4d06      	ldr	r5, [pc, #24]	@ (800e970 <_isatty_r+0x1c>)
 800e958:	2300      	movs	r3, #0
 800e95a:	4604      	mov	r4, r0
 800e95c:	4608      	mov	r0, r1
 800e95e:	602b      	str	r3, [r5, #0]
 800e960:	f7f2 fd56 	bl	8001410 <_isatty>
 800e964:	1c43      	adds	r3, r0, #1
 800e966:	d102      	bne.n	800e96e <_isatty_r+0x1a>
 800e968:	682b      	ldr	r3, [r5, #0]
 800e96a:	b103      	cbz	r3, 800e96e <_isatty_r+0x1a>
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
 800e970:	24001954 	.word	0x24001954

0800e974 <abort>:
 800e974:	b508      	push	{r3, lr}
 800e976:	2006      	movs	r0, #6
 800e978:	f000 f834 	bl	800e9e4 <raise>
 800e97c:	2001      	movs	r0, #1
 800e97e:	f7f2 fce7 	bl	8001350 <_exit>

0800e982 <_malloc_usable_size_r>:
 800e982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e986:	1f18      	subs	r0, r3, #4
 800e988:	2b00      	cmp	r3, #0
 800e98a:	bfbc      	itt	lt
 800e98c:	580b      	ldrlt	r3, [r1, r0]
 800e98e:	18c0      	addlt	r0, r0, r3
 800e990:	4770      	bx	lr

0800e992 <_raise_r>:
 800e992:	291f      	cmp	r1, #31
 800e994:	b538      	push	{r3, r4, r5, lr}
 800e996:	4605      	mov	r5, r0
 800e998:	460c      	mov	r4, r1
 800e99a:	d904      	bls.n	800e9a6 <_raise_r+0x14>
 800e99c:	2316      	movs	r3, #22
 800e99e:	6003      	str	r3, [r0, #0]
 800e9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a4:	bd38      	pop	{r3, r4, r5, pc}
 800e9a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e9a8:	b112      	cbz	r2, 800e9b0 <_raise_r+0x1e>
 800e9aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9ae:	b94b      	cbnz	r3, 800e9c4 <_raise_r+0x32>
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	f000 f831 	bl	800ea18 <_getpid_r>
 800e9b6:	4622      	mov	r2, r4
 800e9b8:	4601      	mov	r1, r0
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9c0:	f000 b818 	b.w	800e9f4 <_kill_r>
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d00a      	beq.n	800e9de <_raise_r+0x4c>
 800e9c8:	1c59      	adds	r1, r3, #1
 800e9ca:	d103      	bne.n	800e9d4 <_raise_r+0x42>
 800e9cc:	2316      	movs	r3, #22
 800e9ce:	6003      	str	r3, [r0, #0]
 800e9d0:	2001      	movs	r0, #1
 800e9d2:	e7e7      	b.n	800e9a4 <_raise_r+0x12>
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e9da:	4620      	mov	r0, r4
 800e9dc:	4798      	blx	r3
 800e9de:	2000      	movs	r0, #0
 800e9e0:	e7e0      	b.n	800e9a4 <_raise_r+0x12>
	...

0800e9e4 <raise>:
 800e9e4:	4b02      	ldr	r3, [pc, #8]	@ (800e9f0 <raise+0xc>)
 800e9e6:	4601      	mov	r1, r0
 800e9e8:	6818      	ldr	r0, [r3, #0]
 800e9ea:	f7ff bfd2 	b.w	800e992 <_raise_r>
 800e9ee:	bf00      	nop
 800e9f0:	240000ac 	.word	0x240000ac

0800e9f4 <_kill_r>:
 800e9f4:	b538      	push	{r3, r4, r5, lr}
 800e9f6:	4d07      	ldr	r5, [pc, #28]	@ (800ea14 <_kill_r+0x20>)
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	4604      	mov	r4, r0
 800e9fc:	4608      	mov	r0, r1
 800e9fe:	4611      	mov	r1, r2
 800ea00:	602b      	str	r3, [r5, #0]
 800ea02:	f7f2 fc95 	bl	8001330 <_kill>
 800ea06:	1c43      	adds	r3, r0, #1
 800ea08:	d102      	bne.n	800ea10 <_kill_r+0x1c>
 800ea0a:	682b      	ldr	r3, [r5, #0]
 800ea0c:	b103      	cbz	r3, 800ea10 <_kill_r+0x1c>
 800ea0e:	6023      	str	r3, [r4, #0]
 800ea10:	bd38      	pop	{r3, r4, r5, pc}
 800ea12:	bf00      	nop
 800ea14:	24001954 	.word	0x24001954

0800ea18 <_getpid_r>:
 800ea18:	f7f2 bc82 	b.w	8001320 <_getpid>

0800ea1c <_init>:
 800ea1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea1e:	bf00      	nop
 800ea20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea22:	bc08      	pop	{r3}
 800ea24:	469e      	mov	lr, r3
 800ea26:	4770      	bx	lr

0800ea28 <_fini>:
 800ea28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea2a:	bf00      	nop
 800ea2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea2e:	bc08      	pop	{r3}
 800ea30:	469e      	mov	lr, r3
 800ea32:	4770      	bx	lr
