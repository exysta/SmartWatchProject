
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb04  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800edb8  0800edb8  0000fdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f2a4  0800f2a4  000102a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f2ac  0800f2ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f2b0  0800f2b0  000102b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800f2b4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008b8  240001d8  0800f48c  000111d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a90  0800f48c  00011a90  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a05e  00000000  00000000  00011206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034db  00000000  00000000  0002b264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001188  00000000  00000000  0002e740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d83  00000000  00000000  0002f8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005319  00000000  00000000  0003064b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bfc6  00000000  00000000  00035964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013cb16  00000000  00000000  0005192a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0018e440  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005630  00000000  00000000  0018e484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  00193ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ed9c 	.word	0x0800ed9c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	0800ed9c 	.word	0x0800ed9c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <mpu6500_read_hal>:
 */
uint8_t mpu6500_read_hal(I2C_HandleTypeDef *hi2c, uint16_t i2c_addr_shifted, uint32_t timeout,
                         int16_t (*accel_raw)[3], float (*accel_g)[3],
                         int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                         uint16_t *len)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	f2ad 4d3c 	subw	sp, sp, #1084	@ 0x43c
 80006d2:	af04      	add	r7, sp, #16
 80006d4:	f507 6485 	add.w	r4, r7, #1064	@ 0x428
 80006d8:	f2a4 441c 	subw	r4, r4, #1052	@ 0x41c
 80006dc:	6020      	str	r0, [r4, #0]
 80006de:	4608      	mov	r0, r1
 80006e0:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 80006e4:	f2a1 4124 	subw	r1, r1, #1060	@ 0x424
 80006e8:	600a      	str	r2, [r1, #0]
 80006ea:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 80006ee:	f5a2 6285 	sub.w	r2, r2, #1064	@ 0x428
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80006f8:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 80006fc:	4602      	mov	r2, r0
 80006fe:	801a      	strh	r2, [r3, #0]
    // Size needs to accommodate max FIFO read (1024 bytes) or normal read (14 bytes).
    // Using a large buffer on the stack can be risky on memory-constrained MCUs.
    uint8_t read_buffer[1024]; // Be mindful of stack usage!

    // --- Parameter Checks ---
    if (hi2c == NULL || accel_raw == NULL || accel_g == NULL ||
 8000700:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000704:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d016      	beq.n	800073c <mpu6500_read_hal+0x70>
 800070e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000712:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00f      	beq.n	800073c <mpu6500_read_hal+0x70>
 800071c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <mpu6500_read_hal+0x70>
 8000724:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000728:	2b00      	cmp	r3, #0
 800072a:	d007      	beq.n	800073c <mpu6500_read_hal+0x70>
        gyro_raw == NULL || gyro_dps == NULL || len == NULL)
 800072c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8000730:	2b00      	cmp	r3, #0
 8000732:	d003      	beq.n	800073c <mpu6500_read_hal+0x70>
 8000734:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <mpu6500_read_hal+0x76>
    {
        return MPU6500_ERR_PARAM; // return error: null pointer
 800073c:	2302      	movs	r3, #2
 800073e:	f001 b830 	b.w	80017a2 <mpu6500_read_hal+0x10d6>
    }
    if ((*len) == 0)
 8000742:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <mpu6500_read_hal+0x86>
    {
        return MPU6500_ERR_LEN_ZERO; // return error: length is zero
 800074c:	2304      	movs	r3, #4
 800074e:	f001 b828 	b.w	80017a2 <mpu6500_read_hal+0x10d6>
    }

    // --- Read configurations using HAL ---
    hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_USER_CTRL,
 8000752:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000756:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 800075a:	8819      	ldrh	r1, [r3, #0]
 800075c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000760:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 8000764:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000768:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	2301      	movs	r3, #1
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	f207 4319 	addw	r3, r7, #1049	@ 0x419
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	226a      	movs	r2, #106	@ 0x6a
 800077e:	6800      	ldr	r0, [r0, #0]
 8000780:	f005 ff4e 	bl	8006620 <HAL_I2C_Mem_Read>
 8000784:	4603      	mov	r3, r0
 8000786:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                               I2C_MEMADD_SIZE_8BIT, &user_ctrl_reg, 1, timeout);
    if (hal_res != HAL_OK) { /* printf("Debug: Read USER_CTRL failed (%d)\n", hal_res); */ return MPU6500_ERR_READ; }
 800078a:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 800078e:	2b00      	cmp	r3, #0
 8000790:	d002      	beq.n	8000798 <mpu6500_read_hal+0xcc>
 8000792:	2301      	movs	r3, #1
 8000794:	f001 b805 	b.w	80017a2 <mpu6500_read_hal+0x10d6>

    hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_ACCEL_CONFIG,
 8000798:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800079c:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 80007a0:	8819      	ldrh	r1, [r3, #0]
 80007a2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80007a6:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 80007aa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80007ae:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	9302      	str	r3, [sp, #8]
 80007b6:	2301      	movs	r3, #1
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2301      	movs	r3, #1
 80007c2:	221c      	movs	r2, #28
 80007c4:	6800      	ldr	r0, [r0, #0]
 80007c6:	f005 ff2b 	bl	8006620 <HAL_I2C_Mem_Read>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                               I2C_MEMADD_SIZE_8BIT, &accel_conf_reg, 1, timeout);
    if (hal_res != HAL_OK) { /* printf("Debug: Read ACCEL_CONFIG failed (%d)\n", hal_res); */ return MPU6500_ERR_READ; }
 80007d0:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <mpu6500_read_hal+0x112>
 80007d8:	2301      	movs	r3, #1
 80007da:	f000 bfe2 	b.w	80017a2 <mpu6500_read_hal+0x10d6>

    hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_GYRO_CONFIG,
 80007de:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80007e2:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 80007e6:	8819      	ldrh	r1, [r3, #0]
 80007e8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80007ec:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 80007f0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80007f4:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	9302      	str	r3, [sp, #8]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	f207 4317 	addw	r3, r7, #1047	@ 0x417
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2301      	movs	r3, #1
 8000808:	221b      	movs	r2, #27
 800080a:	6800      	ldr	r0, [r0, #0]
 800080c:	f005 ff08 	bl	8006620 <HAL_I2C_Mem_Read>
 8000810:	4603      	mov	r3, r0
 8000812:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                               I2C_MEMADD_SIZE_8BIT, &gyro_conf_reg, 1, timeout);
    if (hal_res != HAL_OK) { /* printf("Debug: Read GYRO_CONFIG failed (%d)\n", hal_res); */ return MPU6500_ERR_READ; }
 8000816:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 800081a:	2b00      	cmp	r3, #0
 800081c:	d002      	beq.n	8000824 <mpu6500_read_hal+0x158>
 800081e:	2301      	movs	r3, #1
 8000820:	f000 bfbf 	b.w	80017a2 <mpu6500_read_hal+0x10d6>

    // Extract sensitivity settings (FS_SEL bits)
    accel_fs_sel = (accel_conf_reg >> 3) & 0x03;
 8000824:	f897 3418 	ldrb.w	r3, [r7, #1048]	@ 0x418
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f003 0303 	and.w	r3, r3, #3
 8000830:	f887 3420 	strb.w	r3, [r7, #1056]	@ 0x420
    gyro_fs_sel  = (gyro_conf_reg >> 3) & 0x03;
 8000834:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	f003 0303 	and.w	r3, r3, #3
 8000840:	f887 341f 	strb.w	r3, [r7, #1055]	@ 0x41f

    // --- Check if FIFO mode is enabled (USER_CTRL bit 6) ---
    if ((user_ctrl_reg & (1 << 6)) != 0)
 8000844:	f897 3419 	ldrb.w	r3, [r7, #1049]	@ 0x419
 8000848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800084c:	2b00      	cmp	r3, #0
 800084e:	f000 8540 	beq.w	80012d2 <mpu6500_read_hal+0xc06>
        uint16_t count_bytes;
        uint16_t num_samples;
        uint16_t i;

        // Read FIFO_EN register to verify expected configuration (Accel + Gyro)
        hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_FIFO_EN,
 8000852:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000856:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 800085a:	8819      	ldrh	r1, [r3, #0]
 800085c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000860:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 8000864:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000868:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	9302      	str	r3, [sp, #8]
 8000870:	2301      	movs	r3, #1
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	f107 0313 	add.w	r3, r7, #19
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	2223      	movs	r2, #35	@ 0x23
 800087e:	6800      	ldr	r0, [r0, #0]
 8000880:	f005 fece 	bl	8006620 <HAL_I2C_Mem_Read>
 8000884:	4603      	mov	r3, r0
 8000886:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                                   I2C_MEMADD_SIZE_8BIT, &fifo_en_conf, 1, timeout);
        if (hal_res != HAL_OK) { /* printf("Debug: Read FIFO_EN failed (%d)\n", hal_res); */ return MPU6500_ERR_READ; }
 800088a:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <mpu6500_read_hal+0x1cc>
 8000892:	2301      	movs	r3, #1
 8000894:	f000 bf85 	b.w	80017a2 <mpu6500_read_hal+0x10d6>

        // Check if Accel (bit 3) and Gyro (bits 4,5,6) are enabled
        // 0x78 = 0b0111 1000 (Gyro X,Y,Z + Accel)
        if (fifo_en_conf != 0x78)
 8000898:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800089c:	f2a3 4315 	subw	r3, r3, #1045	@ 0x415
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b78      	cmp	r3, #120	@ 0x78
 80008a4:	d002      	beq.n	80008ac <mpu6500_read_hal+0x1e0>
        {
            // Allow only accel+gyro data in FIFO for this specific implementation
             /* printf("Debug: Unexpected FIFO_EN config (0x%02X), expected 0x78\n", fifo_en_conf); */
            return MPU6500_ERR_FIFO_CONF;
 80008a6:	2306      	movs	r3, #6
 80008a8:	f000 bf7b 	b.w	80017a2 <mpu6500_read_hal+0x10d6>
        }

        // Read FIFO Count (High and Low bytes)
        hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_FIFO_COUNTH,
 80008ac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80008b0:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 80008b4:	8819      	ldrh	r1, [r3, #0]
 80008b6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80008ba:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 80008be:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80008c2:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2302      	movs	r3, #2
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	2272      	movs	r2, #114	@ 0x72
 80008d8:	6800      	ldr	r0, [r0, #0]
 80008da:	f005 fea1 	bl	8006620 <HAL_I2C_Mem_Read>
 80008de:	4603      	mov	r3, r0
 80008e0:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                                   I2C_MEMADD_SIZE_8BIT, fifo_count_buf, 2, timeout);
        if (hal_res != HAL_OK) { /* printf("Debug: Read FIFO_COUNT failed (%d)\n", hal_res); */ return MPU6500_ERR_READ; }
 80008e4:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <mpu6500_read_hal+0x226>
 80008ec:	2301      	movs	r3, #1
 80008ee:	f000 bf58 	b.w	80017a2 <mpu6500_read_hal+0x10d6>

        count_bytes = (uint16_t)(((uint16_t)fifo_count_buf[0] << 8) | fifo_count_buf[1]);
 80008f2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80008f6:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b21a      	sxth	r2, r3
 8000902:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000906:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 800090a:	785b      	ldrb	r3, [r3, #1]
 800090c:	b21b      	sxth	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b21b      	sxth	r3, r3
 8000912:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426

        // Limit bytes to prevent overflow reads and check against internal buffer size
        if (count_bytes > sizeof(read_buffer)) {
 8000916:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 800091a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800091e:	d903      	bls.n	8000928 <mpu6500_read_hal+0x25c>
            /* printf("Debug: Warning - FIFO count (%d) > buffer size (%d). Limiting.\n", count_bytes, sizeof(read_buffer)); */
            count_bytes = sizeof(read_buffer);
 8000920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000924:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
        }
        // Datasheet implies max 1024, but checking against buffer is safer
        if (count_bytes >= 1024) {
 8000928:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 800092c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000930:	d303      	bcc.n	800093a <mpu6500_read_hal+0x26e>
             /* printf("Debug: Warning - FIFO count near/at max (%d bytes).\n", count_bytes); */
             // Note: If overflow truly happened *before* this read, data might be corrupted.
             // Consider adding FIFO reset logic here or in initialization if overflows are expected.
             count_bytes = 1024; // Cap at theoretical max / buffer size
 8000932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000936:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
        }


        // Calculate how many samples fit in the available bytes (12 bytes per sample)
        uint16_t available_samples = count_bytes / 12;
 800093a:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 800093e:	4a2f      	ldr	r2, [pc, #188]	@ (80009fc <mpu6500_read_hal+0x330>)
 8000940:	fba2 2303 	umull	r2, r3, r2, r3
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	f8a7 341c 	strh.w	r3, [r7, #1052]	@ 0x41c
        uint16_t requested_max_samples = (*len);
 800094a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	f8a7 341a 	strh.w	r3, [r7, #1050]	@ 0x41a

        num_samples = available_samples;
 8000954:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	@ 0x41c
 8000958:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
        if (num_samples > requested_max_samples) {
 800095c:	f8b7 2424 	ldrh.w	r2, [r7, #1060]	@ 0x424
 8000960:	f8b7 341a 	ldrh.w	r3, [r7, #1050]	@ 0x41a
 8000964:	429a      	cmp	r2, r3
 8000966:	d903      	bls.n	8000970 <mpu6500_read_hal+0x2a4>
            num_samples = requested_max_samples; // Limit by user request
 8000968:	f8b7 341a 	ldrh.w	r3, [r7, #1050]	@ 0x41a
 800096c:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424
        }

        count_bytes = num_samples * 12; // Final number of bytes to read
 8000970:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	@ 0x424
 8000974:	461a      	mov	r2, r3
 8000976:	0052      	lsls	r2, r2, #1
 8000978:	4413      	add	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426

        if (num_samples == 0) {
 8000980:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	@ 0x424
 8000984:	2b00      	cmp	r3, #0
 8000986:	d106      	bne.n	8000996 <mpu6500_read_hal+0x2ca>
            *len = 0; // No complete samples available or requested
 8000988:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800098c:	2200      	movs	r2, #0
 800098e:	801a      	strh	r2, [r3, #0]
            return MPU6500_OK; // Not an error, just no data
 8000990:	2300      	movs	r3, #0
 8000992:	f000 bf06 	b.w	80017a2 <mpu6500_read_hal+0x10d6>
        }

        // Read the data from FIFO register (MPU6500_REG_R_W) into the local buffer
        hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_R_W,
 8000996:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800099a:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 800099e:	8819      	ldrh	r1, [r3, #0]
 80009a0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80009a4:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 80009a8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80009ac:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2301      	movs	r3, #1
 80009c2:	2274      	movs	r2, #116	@ 0x74
 80009c4:	6800      	ldr	r0, [r0, #0]
 80009c6:	f005 fe2b 	bl	8006620 <HAL_I2C_Mem_Read>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                                   I2C_MEMADD_SIZE_8BIT, read_buffer, count_bytes, timeout);
        if (hal_res != HAL_OK)
 80009d0:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d006      	beq.n	80009e6 <mpu6500_read_hal+0x31a>
        {
             /* printf("Debug: Read FIFO data failed (%d)\n", hal_res); */
            *len = 0; // Indicate no data was successfully read
 80009d8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80009dc:	2200      	movs	r2, #0
 80009de:	801a      	strh	r2, [r3, #0]
            return MPU6500_ERR_READ;
 80009e0:	2301      	movs	r3, #1
 80009e2:	f000 bede 	b.w	80017a2 <mpu6500_read_hal+0x10d6>
        }

        // --- Process the read FIFO data ---
        *len = num_samples; // Update the output length
 80009e6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80009ea:	f8b7 2424 	ldrh.w	r2, [r7, #1060]	@ 0x424
 80009ee:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < num_samples; i++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8a7 3422 	strh.w	r3, [r7, #1058]	@ 0x422
 80009f6:	f000 bc63 	b.w	80012c0 <mpu6500_read_hal+0xbf4>
 80009fa:	bf00      	nop
 80009fc:	aaaaaaab 	.word	0xaaaaaaab
 8000a00:	46800000 	.word	0x46800000
 8000a04:	46000000 	.word	0x46000000
        {
            // Extract raw values (Big Endian) from the local buffer
            accel_raw[i][0] = (int16_t)(((uint16_t)read_buffer[i * 12 + 0] << 8) | read_buffer[i * 12 + 1]);
 8000a08:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	461a      	mov	r2, r3
 8000a16:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000a1a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8000a1e:	5c9b      	ldrb	r3, [r3, r2]
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	021b      	lsls	r3, r3, #8
 8000a24:	b218      	sxth	r0, r3
 8000a26:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	3301      	adds	r3, #1
 8000a34:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000a38:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000a3c:	5cd3      	ldrb	r3, [r2, r3]
 8000a3e:	b219      	sxth	r1, r3
 8000a40:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000a52:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4413      	add	r3, r2
 8000a5a:	ea40 0201 	orr.w	r2, r0, r1
 8000a5e:	b212      	sxth	r2, r2
 8000a60:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)(((uint16_t)read_buffer[i * 12 + 2] << 8) | read_buffer[i * 12 + 3]);
 8000a62:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	3302      	adds	r3, #2
 8000a70:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000a74:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000a78:	5cd3      	ldrb	r3, [r2, r3]
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	b218      	sxth	r0, r3
 8000a80:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000a84:	4613      	mov	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	3303      	adds	r3, #3
 8000a8e:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000a92:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000a96:	5cd3      	ldrb	r3, [r2, r3]
 8000a98:	b219      	sxth	r1, r3
 8000a9a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000aac:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	ea40 0201 	orr.w	r2, r0, r1
 8000ab8:	b212      	sxth	r2, r2
 8000aba:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)(((uint16_t)read_buffer[i * 12 + 4] << 8) | read_buffer[i * 12 + 5]);
 8000abc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	3304      	adds	r3, #4
 8000aca:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000ace:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	b218      	sxth	r0, r3
 8000ada:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	3305      	adds	r3, #5
 8000ae8:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000aec:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000af0:	5cd3      	ldrb	r3, [r2, r3]
 8000af2:	b219      	sxth	r1, r3
 8000af4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	461a      	mov	r2, r3
 8000b02:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000b06:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	ea40 0201 	orr.w	r2, r0, r1
 8000b12:	b212      	sxth	r2, r2
 8000b14:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0]  = (int16_t)(((uint16_t)read_buffer[i * 12 + 6] << 8) | read_buffer[i * 12 + 7]);
 8000b16:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	3306      	adds	r3, #6
 8000b24:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000b28:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000b2c:	5cd3      	ldrb	r3, [r2, r3]
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	b218      	sxth	r0, r3
 8000b34:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	3307      	adds	r3, #7
 8000b42:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000b46:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000b4a:	5cd3      	ldrb	r3, [r2, r3]
 8000b4c:	b219      	sxth	r1, r3
 8000b4e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000b60:	4413      	add	r3, r2
 8000b62:	ea40 0201 	orr.w	r2, r0, r1
 8000b66:	b212      	sxth	r2, r2
 8000b68:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1]  = (int16_t)(((uint16_t)read_buffer[i * 12 + 8] << 8) | read_buffer[i * 12 + 9]);
 8000b6a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	3308      	adds	r3, #8
 8000b78:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000b7c:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000b80:	5cd3      	ldrb	r3, [r2, r3]
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	b218      	sxth	r0, r3
 8000b88:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	3309      	adds	r3, #9
 8000b96:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000b9a:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000b9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ba0:	b219      	sxth	r1, r3
 8000ba2:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000bb4:	4413      	add	r3, r2
 8000bb6:	ea40 0201 	orr.w	r2, r0, r1
 8000bba:	b212      	sxth	r2, r2
 8000bbc:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2]  = (int16_t)(((uint16_t)read_buffer[i * 12 + 10] << 8) | read_buffer[i * 12 + 11]);
 8000bbe:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	330a      	adds	r3, #10
 8000bcc:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000bd0:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000bd4:	5cd3      	ldrb	r3, [r2, r3]
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b218      	sxth	r0, r3
 8000bdc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	330b      	adds	r3, #11
 8000bea:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000bee:	f2a2 4214 	subw	r2, r2, #1044	@ 0x414
 8000bf2:	5cd3      	ldrb	r3, [r2, r3]
 8000bf4:	b219      	sxth	r1, r3
 8000bf6:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	461a      	mov	r2, r3
 8000c04:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000c08:	4413      	add	r3, r2
 8000c0a:	ea40 0201 	orr.w	r2, r0, r1
 8000c0e:	b212      	sxth	r2, r2
 8000c10:	809a      	strh	r2, [r3, #4]

            // --- Convert raw values to physical units ---
            // Accel conversion
            if (accel_fs_sel == 0) { // ±2g
 8000c12:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d169      	bne.n	8000cee <mpu6500_read_hal+0x622>
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;
 8000c1a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000c1e:	4613      	mov	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	461a      	mov	r2, r3
 8000c28:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000c2c:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c38:	ee07 3a90 	vmov	s15, r3
 8000c3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c40:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000c52:	4413      	add	r3, r2
 8000c54:	ed5f 6a96 	vldr	s13, [pc, #-600]	@ 8000a00 <mpu6500_read_hal+0x334>
 8000c58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c5c:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;
 8000c60:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000c72:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c86:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	461a      	mov	r2, r3
 8000c94:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000c98:	4413      	add	r3, r2
 8000c9a:	ed5f 6aa7 	vldr	s13, [pc, #-668]	@ 8000a00 <mpu6500_read_hal+0x334>
 8000c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca2:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;
 8000ca6:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000caa:	4613      	mov	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000cb8:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cc4:	ee07 3a90 	vmov	s15, r3
 8000cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ccc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000cde:	4413      	add	r3, r2
 8000ce0:	ed5f 6ab9 	vldr	s13, [pc, #-740]	@ 8000a00 <mpu6500_read_hal+0x334>
 8000ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ce8:	edc3 7a02 	vstr	s15, [r3, #8]
 8000cec:	e144      	b.n	8000f78 <mpu6500_read_hal+0x8ac>
            } else if (accel_fs_sel == 1) { // ±4g
 8000cee:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d169      	bne.n	8000dca <mpu6500_read_hal+0x6fe>
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;
 8000cf6:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	461a      	mov	r2, r3
 8000d04:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000d08:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d1c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000d2e:	4413      	add	r3, r2
 8000d30:	ed5f 6acc 	vldr	s13, [pc, #-816]	@ 8000a04 <mpu6500_read_hal+0x338>
 8000d34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d38:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;
 8000d3c:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000d4e:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4413      	add	r3, r2
 8000d56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d62:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000d74:	4413      	add	r3, r2
 8000d76:	ed5f 6add 	vldr	s13, [pc, #-884]	@ 8000a04 <mpu6500_read_hal+0x338>
 8000d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d7e:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;
 8000d82:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000d86:	4613      	mov	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000d94:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	461a      	mov	r2, r3
 8000db6:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000dba:	4413      	add	r3, r2
 8000dbc:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 800110c <mpu6500_read_hal+0xa40>
 8000dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc4:	edc3 7a02 	vstr	s15, [r3, #8]
 8000dc8:	e0d6      	b.n	8000f78 <mpu6500_read_hal+0x8ac>
            } else if (accel_fs_sel == 2) { // ±8g
 8000dca:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d169      	bne.n	8000ea6 <mpu6500_read_hal+0x7da>
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;
 8000dd2:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	461a      	mov	r2, r3
 8000de0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000de4:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df8:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	461a      	mov	r2, r3
 8000e06:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000e0a:	4413      	add	r3, r2
 8000e0c:	eddf 6ac0 	vldr	s13, [pc, #768]	@ 8001110 <mpu6500_read_hal+0xa44>
 8000e10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e14:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;
 8000e18:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	461a      	mov	r2, r3
 8000e26:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000e2a:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e36:	ee07 3a90 	vmov	s15, r3
 8000e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e3e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000e50:	4413      	add	r3, r2
 8000e52:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8001110 <mpu6500_read_hal+0xa44>
 8000e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e5a:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;
 8000e5e:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000e70:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e84:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	461a      	mov	r2, r3
 8000e92:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000e96:	4413      	add	r3, r2
 8000e98:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8001110 <mpu6500_read_hal+0xa44>
 8000e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea0:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ea4:	e068      	b.n	8000f78 <mpu6500_read_hal+0x8ac>
            } else { // ±16g
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;
 8000ea6:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000eb8:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ecc:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000ede:	4413      	add	r3, r2
 8000ee0:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8001114 <mpu6500_read_hal+0xa48>
 8000ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ee8:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;
 8000eec:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000efe:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f12:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000f24:	4413      	add	r3, r2
 8000f26:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8001114 <mpu6500_read_hal+0xa48>
 8000f2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2e:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;
 8000f32:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000f44:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f58:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	461a      	mov	r2, r3
 8000f66:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000f6a:	4413      	add	r3, r2
 8000f6c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001114 <mpu6500_read_hal+0xa48>
 8000f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f74:	edc3 7a02 	vstr	s15, [r3, #8]
            }

            // Gyro conversion
            if (gyro_fs_sel == 0) { // ±250 dps
 8000f78:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d160      	bne.n	8001042 <mpu6500_read_hal+0x976>
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;
 8000f80:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000f92:	4413      	add	r3, r2
 8000f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	461a      	mov	r2, r3
 8000fae:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8000fb2:	4413      	add	r3, r2
 8000fb4:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001118 <mpu6500_read_hal+0xa4c>
 8000fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fbc:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;
 8000fc0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	461a      	mov	r2, r3
 8000fce:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	461a      	mov	r2, r3
 8000fee:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8000ff2:	4413      	add	r3, r2
 8000ff4:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001118 <mpu6500_read_hal+0xa4c>
 8000ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffc:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;
 8001000:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	461a      	mov	r2, r3
 800100e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001012:	4413      	add	r3, r2
 8001014:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001020:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	461a      	mov	r2, r3
 800102e:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001032:	4413      	add	r3, r2
 8001034:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001118 <mpu6500_read_hal+0xa4c>
 8001038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103c:	edc3 7a02 	vstr	s15, [r3, #8]
 8001040:	e139      	b.n	80012b6 <mpu6500_read_hal+0xbea>
            } else if (gyro_fs_sel == 1) { // ±500 dps
 8001042:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 8001046:	2b01      	cmp	r3, #1
 8001048:	d170      	bne.n	800112c <mpu6500_read_hal+0xa60>
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;
 800104a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	461a      	mov	r2, r3
 8001058:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800105c:	4413      	add	r3, r2
 800105e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	461a      	mov	r2, r3
 8001078:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800107c:	4413      	add	r3, r2
 800107e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800111c <mpu6500_read_hal+0xa50>
 8001082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001086:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;
 800108a:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	461a      	mov	r2, r3
 8001098:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800109c:	4413      	add	r3, r2
 800109e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010aa:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	461a      	mov	r2, r3
 80010b8:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80010bc:	4413      	add	r3, r2
 80010be:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800111c <mpu6500_read_hal+0xa50>
 80010c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c6:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;
 80010ca:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	461a      	mov	r2, r3
 80010d8:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80010dc:	4413      	add	r3, r2
 80010de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ea:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	461a      	mov	r2, r3
 80010f8:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80010fc:	4413      	add	r3, r2
 80010fe:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800111c <mpu6500_read_hal+0xa50>
 8001102:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001106:	edc3 7a02 	vstr	s15, [r3, #8]
 800110a:	e0d4      	b.n	80012b6 <mpu6500_read_hal+0xbea>
 800110c:	46000000 	.word	0x46000000
 8001110:	45800000 	.word	0x45800000
 8001114:	45000000 	.word	0x45000000
 8001118:	43030000 	.word	0x43030000
 800111c:	42830000 	.word	0x42830000
 8001120:	42033333 	.word	0x42033333
 8001124:	41833333 	.word	0x41833333
 8001128:	46800000 	.word	0x46800000
            } else if (gyro_fs_sel == 2) { // ±1000 dps
 800112c:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 8001130:	2b02      	cmp	r3, #2
 8001132:	d160      	bne.n	80011f6 <mpu6500_read_hal+0xb2a>
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;
 8001134:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	461a      	mov	r2, r3
 8001142:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001146:	4413      	add	r3, r2
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001154:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	461a      	mov	r2, r3
 8001162:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001166:	4413      	add	r3, r2
 8001168:	ed5f 6a13 	vldr	s13, [pc, #-76]	@ 8001120 <mpu6500_read_hal+0xa54>
 800116c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001170:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;
 8001174:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	461a      	mov	r2, r3
 8001182:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001186:	4413      	add	r3, r2
 8001188:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	461a      	mov	r2, r3
 80011a2:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80011a6:	4413      	add	r3, r2
 80011a8:	ed5f 6a23 	vldr	s13, [pc, #-140]	@ 8001120 <mpu6500_read_hal+0xa54>
 80011ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b0:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;
 80011b4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	461a      	mov	r2, r3
 80011c2:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80011c6:	4413      	add	r3, r2
 80011c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d4:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	461a      	mov	r2, r3
 80011e2:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80011e6:	4413      	add	r3, r2
 80011e8:	ed5f 6a33 	vldr	s13, [pc, #-204]	@ 8001120 <mpu6500_read_hal+0xa54>
 80011ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f0:	edc3 7a02 	vstr	s15, [r3, #8]
 80011f4:	e05f      	b.n	80012b6 <mpu6500_read_hal+0xbea>
            } else { // ±2000 dps
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;
 80011f6:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	461a      	mov	r2, r3
 8001204:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001208:	4413      	add	r3, r2
 800120a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001216:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	461a      	mov	r2, r3
 8001224:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001228:	4413      	add	r3, r2
 800122a:	ed5f 6a42 	vldr	s13, [pc, #-264]	@ 8001124 <mpu6500_read_hal+0xa58>
 800122e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001232:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;
 8001236:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	461a      	mov	r2, r3
 8001244:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001248:	4413      	add	r3, r2
 800124a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	461a      	mov	r2, r3
 8001264:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001268:	4413      	add	r3, r2
 800126a:	ed5f 6a52 	vldr	s13, [pc, #-328]	@ 8001124 <mpu6500_read_hal+0xa58>
 800126e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001272:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;
 8001276:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	461a      	mov	r2, r3
 8001284:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001288:	4413      	add	r3, r2
 800128a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001296:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	461a      	mov	r2, r3
 80012a4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80012a8:	4413      	add	r3, r2
 80012aa:	ed5f 6a62 	vldr	s13, [pc, #-392]	@ 8001124 <mpu6500_read_hal+0xa58>
 80012ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b2:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < num_samples; i++)
 80012b6:	f8b7 3422 	ldrh.w	r3, [r7, #1058]	@ 0x422
 80012ba:	3301      	adds	r3, #1
 80012bc:	f8a7 3422 	strh.w	r3, [r7, #1058]	@ 0x422
 80012c0:	f8b7 2422 	ldrh.w	r2, [r7, #1058]	@ 0x422
 80012c4:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	@ 0x424
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f4ff ab9d 	bcc.w	8000a08 <mpu6500_read_hal+0x33c>
            }
        }
        return MPU6500_OK; // success
 80012ce:	2300      	movs	r3, #0
 80012d0:	e267      	b.n	80017a2 <mpu6500_read_hal+0x10d6>
    }
    else
    {
        // --- Normal Mode (Read directly from sensor registers) ---
        *len = 1; // Normal mode always reads one sample
 80012d2:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80012d6:	2201      	movs	r2, #1
 80012d8:	801a      	strh	r2, [r3, #0]

        // Read 14 bytes starting from ACCEL_XOUT_H into the local buffer
        // ACCEL_X/Y/Z, TEMP, GYRO_X/Y/Z (each 2 bytes)
        hal_res = HAL_I2C_Mem_Read(hi2c, i2c_addr_shifted, MPU6500_REG_ACCEL_XOUT_H,
 80012da:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80012de:	f2a3 431e 	subw	r3, r3, #1054	@ 0x41e
 80012e2:	8819      	ldrh	r1, [r3, #0]
 80012e4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80012e8:	f2a3 401c 	subw	r0, r3, #1052	@ 0x41c
 80012ec:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80012f0:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	230e      	movs	r3, #14
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	223b      	movs	r2, #59	@ 0x3b
 8001306:	6800      	ldr	r0, [r0, #0]
 8001308:	f005 f98a 	bl	8006620 <HAL_I2C_Mem_Read>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
                                   I2C_MEMADD_SIZE_8BIT, read_buffer, 14, timeout);
        if (hal_res != HAL_OK)
 8001312:	f897 3421 	ldrb.w	r3, [r7, #1057]	@ 0x421
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <mpu6500_read_hal+0xc5a>
        {
             /* printf("Debug: Read sensor data failed (%d)\n", hal_res); */
            *len = 0; // Indicate no data read
 800131a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800131e:	2200      	movs	r2, #0
 8001320:	801a      	strh	r2, [r3, #0]
            return MPU6500_ERR_READ;
 8001322:	2301      	movs	r3, #1
 8001324:	e23d      	b.n	80017a2 <mpu6500_read_hal+0x10d6>
        }

        // --- Process the read sensor data ---
        // Extract raw values (Big Endian) from the local buffer
        accel_raw[0][0] = (int16_t)(((uint16_t)read_buffer[0] << 8) | read_buffer[1]);
 8001326:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800132a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b21b      	sxth	r3, r3
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800133a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21a      	sxth	r2, r3
 8001346:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800134a:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)(((uint16_t)read_buffer[2] << 8) | read_buffer[3]);
 8001352:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001356:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800135a:	789b      	ldrb	r3, [r3, #2]
 800135c:	b21b      	sxth	r3, r3
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21a      	sxth	r2, r3
 8001362:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001366:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21a      	sxth	r2, r3
 8001372:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001376:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)(((uint16_t)read_buffer[4] << 8) | read_buffer[5]);
 800137e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001382:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001386:	791b      	ldrb	r3, [r3, #4]
 8001388:	b21b      	sxth	r3, r3
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001392:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001396:	795b      	ldrb	r3, [r3, #5]
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21a      	sxth	r2, r3
 800139e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013a2:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	809a      	strh	r2, [r3, #4]
        // Skip Temperature bytes read_buffer[6] and read_buffer[7]
        gyro_raw[0][0] = (int16_t)(((uint16_t)read_buffer[8] << 8) | read_buffer[9]);
 80013aa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013ae:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013b2:	7a1b      	ldrb	r3, [r3, #8]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013be:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013c2:	7a5b      	ldrb	r3, [r3, #9]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80013ce:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)(((uint16_t)read_buffer[10] << 8) | read_buffer[11]);
 80013d0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013d4:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013d8:	7a9b      	ldrb	r3, [r3, #10]
 80013da:	b21b      	sxth	r3, r3
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b21a      	sxth	r2, r3
 80013e0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013e4:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013e8:	7adb      	ldrb	r3, [r3, #11]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21a      	sxth	r2, r3
 80013f0:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80013f4:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)(((uint16_t)read_buffer[12] << 8) | read_buffer[13]);
 80013f6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80013fa:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80013fe:	7b1b      	ldrb	r3, [r3, #12]
 8001400:	b21b      	sxth	r3, r3
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21a      	sxth	r2, r3
 8001406:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800140a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 800140e:	7b5b      	ldrb	r3, [r3, #13]
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21a      	sxth	r2, r3
 8001416:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800141a:	809a      	strh	r2, [r3, #4]

        // --- Convert raw values to physical units ---
        // Accel conversion
        if (accel_fs_sel == 0) { // ±2g
 800141c:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 8001420:	2b00      	cmp	r3, #0
 8001422:	d139      	bne.n	8001498 <mpu6500_read_hal+0xdcc>
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;
 8001424:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001428:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800143a:	ed5f 6ac5 	vldr	s13, [pc, #-788]	@ 8001128 <mpu6500_read_hal+0xa5c>
 800143e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001442:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001446:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;
 800144a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800144e:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001460:	ed5f 6acf 	vldr	s13, [pc, #-828]	@ 8001128 <mpu6500_read_hal+0xa5c>
 8001464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001468:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800146c:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;
 8001470:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001474:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001486:	ed5f 6ad8 	vldr	s13, [pc, #-864]	@ 8001128 <mpu6500_read_hal+0xa5c>
 800148a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001492:	edc3 7a02 	vstr	s15, [r3, #8]
 8001496:	e0b4      	b.n	8001602 <mpu6500_read_hal+0xf36>
        } else if (accel_fs_sel == 1) { // ±4g
 8001498:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 800149c:	2b01      	cmp	r3, #1
 800149e:	d139      	bne.n	8001514 <mpu6500_read_hal+0xe48>
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;
 80014a0:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014a4:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b6:	eddf 6abd 	vldr	s13, [pc, #756]	@ 80017ac <mpu6500_read_hal+0x10e0>
 80014ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014be:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80014c2:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;
 80014c6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014ca:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014dc:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80017ac <mpu6500_read_hal+0x10e0>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80014e8:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;
 80014ec:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80014f0:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001502:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 80017ac <mpu6500_read_hal+0x10e0>
 8001506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800150e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001512:	e076      	b.n	8001602 <mpu6500_read_hal+0xf36>
        } else if (accel_fs_sel == 2) { // ±8g
 8001514:	f897 3420 	ldrb.w	r3, [r7, #1056]	@ 0x420
 8001518:	2b02      	cmp	r3, #2
 800151a:	d139      	bne.n	8001590 <mpu6500_read_hal+0xec4>
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;
 800151c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001520:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001532:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 80017b0 <mpu6500_read_hal+0x10e4>
 8001536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800153e:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;
 8001542:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001546:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001558:	eddf 6a95 	vldr	s13, [pc, #596]	@ 80017b0 <mpu6500_read_hal+0x10e4>
 800155c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001560:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001564:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;
 8001568:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800156c:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80017b0 <mpu6500_read_hal+0x10e4>
 8001582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001586:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800158a:	edc3 7a02 	vstr	s15, [r3, #8]
 800158e:	e038      	b.n	8001602 <mpu6500_read_hal+0xf36>
        } else { // ±16g
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;
 8001590:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001594:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a6:	eddf 6a83 	vldr	s13, [pc, #524]	@ 80017b4 <mpu6500_read_hal+0x10e8>
 80015aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ae:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80015b2:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;
 80015b6:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015ba:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	eddf 6a79 	vldr	s13, [pc, #484]	@ 80017b4 <mpu6500_read_hal+0x10e8>
 80015d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d4:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80015d8:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;
 80015dc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80015e0:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80017b4 <mpu6500_read_hal+0x10e8>
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 80015fe:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        // Gyro conversion
        if (gyro_fs_sel == 0) { // ±250 dps
 8001602:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 8001606:	2b00      	cmp	r3, #0
 8001608:	d130      	bne.n	800166c <mpu6500_read_hal+0xfa0>
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;
 800160a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800161a:	eddf 6a67 	vldr	s13, [pc, #412]	@ 80017b8 <mpu6500_read_hal+0x10ec>
 800161e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001622:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001626:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;
 800162a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800162e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800163a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80017b8 <mpu6500_read_hal+0x10ec>
 800163e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001642:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001646:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;
 800164a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 800164e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165a:	eddf 6a57 	vldr	s13, [pc, #348]	@ 80017b8 <mpu6500_read_hal+0x10ec>
 800165e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001662:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001666:	edc3 7a02 	vstr	s15, [r3, #8]
 800166a:	e099      	b.n	80017a0 <mpu6500_read_hal+0x10d4>
        } else if (gyro_fs_sel == 1) { // ±500 dps
 800166c:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 8001670:	2b01      	cmp	r3, #1
 8001672:	d130      	bne.n	80016d6 <mpu6500_read_hal+0x100a>
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;
 8001674:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001684:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80017bc <mpu6500_read_hal+0x10f0>
 8001688:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001690:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;
 8001694:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001698:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80017bc <mpu6500_read_hal+0x10f0>
 80016a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ac:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80016b0:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;
 80016b4:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80016b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c4:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80017bc <mpu6500_read_hal+0x10f0>
 80016c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016cc:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80016d0:	edc3 7a02 	vstr	s15, [r3, #8]
 80016d4:	e064      	b.n	80017a0 <mpu6500_read_hal+0x10d4>
        } else if (gyro_fs_sel == 2) { // ±1000 dps
 80016d6:	f897 341f 	ldrb.w	r3, [r7, #1055]	@ 0x41f
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d130      	bne.n	8001740 <mpu6500_read_hal+0x1074>
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;
 80016de:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 80016e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ee:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80017c0 <mpu6500_read_hal+0x10f4>
 80016f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80016fa:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;
 80016fe:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001702:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170e:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80017c0 <mpu6500_read_hal+0x10f4>
 8001712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001716:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800171a:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;
 800171e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172e:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80017c0 <mpu6500_read_hal+0x10f4>
 8001732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001736:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800173a:	edc3 7a02 	vstr	s15, [r3, #8]
 800173e:	e02f      	b.n	80017a0 <mpu6500_read_hal+0x10d4>
        } else { // ±2000 dps
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;
 8001740:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001750:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80017c4 <mpu6500_read_hal+0x10f8>
 8001754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001758:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800175c:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;
 8001760:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001764:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001770:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80017c4 <mpu6500_read_hal+0x10f8>
 8001774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001778:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800177c:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;
 8001780:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001784:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001790:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80017c4 <mpu6500_read_hal+0x10f8>
 8001794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001798:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800179c:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        return MPU6500_OK; // success
 80017a0:	2300      	movs	r3, #0
    }
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	f207 472c 	addw	r7, r7, #1068	@ 0x42c
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}
 80017ac:	46000000 	.word	0x46000000
 80017b0:	45800000 	.word	0x45800000
 80017b4:	45000000 	.word	0x45000000
 80017b8:	43030000 	.word	0x43030000
 80017bc:	42830000 	.word	0x42830000
 80017c0:	42033333 	.word	0x42033333
 80017c4:	41833333 	.word	0x41833333

080017c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_DMA_Init+0x7c>)
 80017d0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80017d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001844 <MX_DMA_Init+0x7c>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <MX_DMA_Init+0x7c>)
 80017e0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	200b      	movs	r0, #11
 80017f2:	f001 fd18 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017f6:	200b      	movs	r0, #11
 80017f8:	f001 fd2f 	bl	800325a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	200c      	movs	r0, #12
 8001802:	f001 fd10 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001806:	200c      	movs	r0, #12
 8001808:	f001 fd27 	bl	800325a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	200d      	movs	r0, #13
 8001812:	f001 fd08 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001816:	200d      	movs	r0, #13
 8001818:	f001 fd1f 	bl	800325a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	200e      	movs	r0, #14
 8001822:	f001 fd00 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001826:	200e      	movs	r0, #14
 8001828:	f001 fd17 	bl	800325a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2100      	movs	r1, #0
 8001830:	2010      	movs	r0, #16
 8001832:	f001 fcf8 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001836:	2010      	movs	r0, #16
 8001838:	f001 fd0f 	bl	800325a <HAL_NVIC_EnableIRQ>

}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	58024400 	.word	0x58024400

08001848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	@ 0x30
 800184c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	4b80      	ldr	r3, [pc, #512]	@ (8001a60 <MX_GPIO_Init+0x218>)
 8001860:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001864:	4a7e      	ldr	r2, [pc, #504]	@ (8001a60 <MX_GPIO_Init+0x218>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800186e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a60 <MX_GPIO_Init+0x218>)
 8001870:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187c:	4b78      	ldr	r3, [pc, #480]	@ (8001a60 <MX_GPIO_Init+0x218>)
 800187e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001882:	4a77      	ldr	r2, [pc, #476]	@ (8001a60 <MX_GPIO_Init+0x218>)
 8001884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001888:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800188c:	4b74      	ldr	r3, [pc, #464]	@ (8001a60 <MX_GPIO_Init+0x218>)
 800188e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b71      	ldr	r3, [pc, #452]	@ (8001a60 <MX_GPIO_Init+0x218>)
 800189c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018a0:	4a6f      	ldr	r2, [pc, #444]	@ (8001a60 <MX_GPIO_Init+0x218>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001a60 <MX_GPIO_Init+0x218>)
 80018ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	4b69      	ldr	r3, [pc, #420]	@ (8001a60 <MX_GPIO_Init+0x218>)
 80018ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018be:	4a68      	ldr	r2, [pc, #416]	@ (8001a60 <MX_GPIO_Init+0x218>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018c8:	4b65      	ldr	r3, [pc, #404]	@ (8001a60 <MX_GPIO_Init+0x218>)
 80018ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018d6:	4b62      	ldr	r3, [pc, #392]	@ (8001a60 <MX_GPIO_Init+0x218>)
 80018d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018dc:	4a60      	ldr	r2, [pc, #384]	@ (8001a60 <MX_GPIO_Init+0x218>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001a60 <MX_GPIO_Init+0x218>)
 80018e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001a60 <MX_GPIO_Init+0x218>)
 80018f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018fa:	4a59      	ldr	r2, [pc, #356]	@ (8001a60 <MX_GPIO_Init+0x218>)
 80018fc:	f043 0308 	orr.w	r3, r3, #8
 8001900:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001904:	4b56      	ldr	r3, [pc, #344]	@ (8001a60 <MX_GPIO_Init+0x218>)
 8001906:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001912:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <MX_GPIO_Init+0x218>)
 8001914:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001918:	4a51      	ldr	r2, [pc, #324]	@ (8001a60 <MX_GPIO_Init+0x218>)
 800191a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800191e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001922:	4b4f      	ldr	r3, [pc, #316]	@ (8001a60 <MX_GPIO_Init+0x218>)
 8001924:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_AD0_GPIO_Port, MPU6500_AD0_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2108      	movs	r1, #8
 8001934:	484b      	ldr	r0, [pc, #300]	@ (8001a64 <MX_GPIO_Init+0x21c>)
 8001936:	f004 fdbd 	bl	80064b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001940:	4849      	ldr	r0, [pc, #292]	@ (8001a68 <MX_GPIO_Init+0x220>)
 8001942:	f004 fdb7 	bl	80064b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800194c:	4847      	ldr	r0, [pc, #284]	@ (8001a6c <MX_GPIO_Init+0x224>)
 800194e:	f004 fdb1 	bl	80064b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001958:	4845      	ldr	r0, [pc, #276]	@ (8001a70 <MX_GPIO_Init+0x228>)
 800195a:	f004 fdab 	bl	80064b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001964:	4842      	ldr	r0, [pc, #264]	@ (8001a70 <MX_GPIO_Init+0x228>)
 8001966:	f004 fda5 	bl	80064b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001970:	4840      	ldr	r0, [pc, #256]	@ (8001a74 <MX_GPIO_Init+0x22c>)
 8001972:	f004 fd9f 	bl	80064b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001976:	2201      	movs	r2, #1
 8001978:	2110      	movs	r1, #16
 800197a:	483b      	ldr	r0, [pc, #236]	@ (8001a68 <MX_GPIO_Init+0x220>)
 800197c:	f004 fd9a 	bl	80064b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2102      	movs	r1, #2
 8001984:	4839      	ldr	r0, [pc, #228]	@ (8001a6c <MX_GPIO_Init+0x224>)
 8001986:	f004 fd95 	bl	80064b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800198a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	4836      	ldr	r0, [pc, #216]	@ (8001a78 <MX_GPIO_Init+0x230>)
 80019a0:	f004 fbd8 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_AD0_Pin */
  GPIO_InitStruct.Pin = MPU6500_AD0_Pin;
 80019a4:	2308      	movs	r3, #8
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MPU6500_AD0_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	482a      	ldr	r0, [pc, #168]	@ (8001a64 <MX_GPIO_Init+0x21c>)
 80019bc:	f004 fbca 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4;
 80019c0:	f244 0311 	movw	r3, #16401	@ 0x4011
 80019c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4823      	ldr	r0, [pc, #140]	@ (8001a68 <MX_GPIO_Init+0x220>)
 80019da:	f004 fbbb 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|LD2_Pin;
 80019de:	f248 0302 	movw	r3, #32770	@ 0x8002
 80019e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	481d      	ldr	r0, [pc, #116]	@ (8001a6c <MX_GPIO_Init+0x224>)
 80019f8:	f004 fbac 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 80019fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4816      	ldr	r0, [pc, #88]	@ (8001a70 <MX_GPIO_Init+0x228>)
 8001a16:	f004 fb9d 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 8001a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	480f      	ldr	r0, [pc, #60]	@ (8001a70 <MX_GPIO_Init+0x228>)
 8001a34:	f004 fb8e 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8001a38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4808      	ldr	r0, [pc, #32]	@ (8001a74 <MX_GPIO_Init+0x22c>)
 8001a52:	f004 fb7f 	bl	8006154 <HAL_GPIO_Init>

}
 8001a56:	bf00      	nop
 8001a58:	3730      	adds	r7, #48	@ 0x30
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	58024400 	.word	0x58024400
 8001a64:	58020000 	.word	0x58020000
 8001a68:	58020400 	.word	0x58020400
 8001a6c:	58021000 	.word	0x58021000
 8001a70:	58020c00 	.word	0x58020c00
 8001a74:	58021800 	.word	0x58021800
 8001a78:	58020800 	.word	0x58020800

08001a7c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001a82:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <MX_I2C2_Init+0x78>)
 8001a84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001a88:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <MX_I2C2_Init+0x7c>)
 8001a8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a92:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ab6:	480e      	ldr	r0, [pc, #56]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001ab8:	f004 fd16 	bl	80064e8 <HAL_I2C_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ac2:	f000 fc23 	bl	800230c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4809      	ldr	r0, [pc, #36]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001aca:	f005 f931 	bl	8006d30 <HAL_I2CEx_ConfigAnalogFilter>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ad4:	f000 fc1a 	bl	800230c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <MX_I2C2_Init+0x74>)
 8001adc:	f005 f973 	bl	8006dc6 <HAL_I2CEx_ConfigDigitalFilter>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ae6:	f000 fc11 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	240001f4 	.word	0x240001f4
 8001af4:	40005800 	.word	0x40005800
 8001af8:	20b0ccff 	.word	0x20b0ccff

08001afc <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b02:	4a1c      	ldr	r2, [pc, #112]	@ (8001b74 <MX_I2C4_Init+0x78>)
 8001b04:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b08:	4a1b      	ldr	r2, [pc, #108]	@ (8001b78 <MX_I2C4_Init+0x7c>)
 8001b0a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b12:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001b36:	480e      	ldr	r0, [pc, #56]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b38:	f004 fcd6 	bl	80064e8 <HAL_I2C_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001b42:	f000 fbe3 	bl	800230c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4809      	ldr	r0, [pc, #36]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b4a:	f005 f8f1 	bl	8006d30 <HAL_I2CEx_ConfigAnalogFilter>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001b54:	f000 fbda 	bl	800230c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_I2C4_Init+0x74>)
 8001b5c:	f005 f933 	bl	8006dc6 <HAL_I2CEx_ConfigDigitalFilter>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001b66:	f000 fbd1 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	24000248 	.word	0x24000248
 8001b74:	58001c00 	.word	0x58001c00
 8001b78:	20b0ccff 	.word	0x20b0ccff

08001b7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0bc      	sub	sp, #240	@ 0xf0
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	22c0      	movs	r2, #192	@ 0xc0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f00b fa48 	bl	800d032 <memset>
  if(i2cHandle->Instance==I2C2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8001cdc <HAL_I2C_MspInit+0x160>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d147      	bne.n	8001c3c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bac:	f04f 0208 	mov.w	r2, #8
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bbe:	f107 0318 	add.w	r3, r7, #24
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 f964 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001bce:	f000 fb9d 	bl	800230c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b43      	ldr	r3, [pc, #268]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001bd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bd8:	4a41      	ldr	r2, [pc, #260]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001be2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001be4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bf0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf8:	2312      	movs	r3, #18
 8001bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c14:	4619      	mov	r1, r3
 8001c16:	4833      	ldr	r0, [pc, #204]	@ (8001ce4 <HAL_I2C_MspInit+0x168>)
 8001c18:	f004 fa9c 	bl	8006154 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001c1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c22:	4a2f      	ldr	r2, [pc, #188]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001c24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c28:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001c2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001c3a:	e04b      	b.n	8001cd4 <HAL_I2C_MspInit+0x158>
  else if(i2cHandle->Instance==I2C4)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a29      	ldr	r2, [pc, #164]	@ (8001ce8 <HAL_I2C_MspInit+0x16c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d146      	bne.n	8001cd4 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c46:	f04f 0210 	mov.w	r2, #16
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c58:	f107 0318 	add.w	r3, r7, #24
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f006 f917 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001c68:	f000 fb50 	bl	800230c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001c7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8001c8a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c92:	2312      	movs	r3, #18
 8001c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001caa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480e      	ldr	r0, [pc, #56]	@ (8001cec <HAL_I2C_MspInit+0x170>)
 8001cb2:	f004 fa4f 	bl	8006154 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001cb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001cbc:	4a08      	ldr	r2, [pc, #32]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_I2C_MspInit+0x164>)
 8001cc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
}
 8001cd4:	bf00      	nop
 8001cd6:	37f0      	adds	r7, #240	@ 0xf0
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40005800 	.word	0x40005800
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	58020400 	.word	0x58020400
 8001ce8:	58001c00 	.word	0x58001c00
 8001cec:	58020c00 	.word	0x58020c00

08001cf0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8001cf8:	1d39      	adds	r1, r7, #4
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4803      	ldr	r0, [pc, #12]	@ (8001d10 <__io_putchar+0x20>)
 8001d02:	f008 faee 	bl	800a2e2 <HAL_UART_Transmit>
	return chr;
 8001d06:	687b      	ldr	r3, [r7, #4]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	240006cc 	.word	0x240006cc

08001d14 <MPU6500_ReadWhoAmI.0>:

#ifdef MPU6500_TEST

	/* WHO_AM_I read */
	uint8_t MPU6500_ReadWhoAmI(void)
	{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af04      	add	r7, sp, #16
 8001d1a:	f8c7 c004 	str.w	ip, [r7, #4]
	    uint8_t who_am_i = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Mem_Read(&MPU6500_I2C, MPU6500_I2C_ADDR_SHIFTED, MPU6500_RGSTR_WHO_AM_I,
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	f107 030f 	add.w	r3, r7, #15
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2301      	movs	r3, #1
 8001d34:	2275      	movs	r2, #117	@ 0x75
 8001d36:	21d0      	movs	r1, #208	@ 0xd0
 8001d38:	4803      	ldr	r0, [pc, #12]	@ (8001d48 <MPU6500_ReadWhoAmI.0+0x34>)
 8001d3a:	f004 fc71 	bl	8006620 <HAL_I2C_Mem_Read>
	                     I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY);
	    return who_am_i;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
	}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	24000248 	.word	0x24000248

08001d4c <main>:
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
int main(void)
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	603b      	str	r3, [r7, #0]
  MPU_Config();
 8001d58:	f000 faac 	bl	80022b4 <MPU_Config>
  HAL_Init();
 8001d5c:	f001 f8d2 	bl	8002f04 <HAL_Init>
  SystemClock_Config();
 8001d60:	f000 f956 	bl	8002010 <SystemClock_Config>
  MX_GPIO_Init();
 8001d64:	f7ff fd70 	bl	8001848 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d68:	f7ff fd2e 	bl	80017c8 <MX_DMA_Init>
  MX_UART4_Init();
 8001d6c:	f000 fdd6 	bl	800291c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001d70:	f000 fe6c 	bl	8002a4c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8001d74:	f7ff fe82 	bl	8001a7c <MX_I2C2_Init>
  MX_UART5_Init();
 8001d78:	f000 fe1c 	bl	80029b4 <MX_UART5_Init>
  MX_SPI1_Init();
 8001d7c:	f000 facc 	bl	8002318 <MX_SPI1_Init>
  MX_I2C4_Init();
 8001d80:	f7ff febc 	bl	8001afc <MX_I2C4_Init>
	    } else {
	        printf("MPU6500 read failed with status: %u\r\n", status);
	    }
	}

    uint8_t id = MPU6500_ReadWhoAmI();
 8001d84:	463b      	mov	r3, r7
 8001d86:	469c      	mov	ip, r3
 8001d88:	f7ff ffc4 	bl	8001d14 <MPU6500_ReadWhoAmI.0>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
    printf("mpu6500: WHO_AM_I = 0x%02X\r\n", id);
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	4619      	mov	r1, r3
 8001d94:	4807      	ldr	r0, [pc, #28]	@ (8001db4 <main+0x68>)
 8001d96:	f00b f8f7 	bl	800cf88 <iprintf>
		HAL_Delay(4000);

#endif

#ifdef MPU6500_TEST
	    read_mpu_data_example();
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	469c      	mov	ip, r3
 8001d9e:	f000 f80d 	bl	8001dbc <read_mpu_data_example.1>
	    printf("===================================");
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <main+0x6c>)
 8001da4:	f00b f8f0 	bl	800cf88 <iprintf>
		HAL_Delay(1000);
 8001da8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dac:	f001 f93c 	bl	8003028 <HAL_Delay>
	    read_mpu_data_example();
 8001db0:	bf00      	nop
 8001db2:	e7f2      	b.n	8001d9a <main+0x4e>
 8001db4:	0800edb8 	.word	0x0800edb8
 8001db8:	0800edd8 	.word	0x0800edd8

08001dbc <read_mpu_data_example.1>:
	void read_mpu_data_example() {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b0e4      	sub	sp, #400	@ 0x190
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001dc6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001dca:	f8c3 c000 	str.w	ip, [r3]
	    uint16_t samples_read = MAX_SAMPLES; // Request up to MAX_SAMPLES
 8001dce:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001dd2:	f5a3 73b9 	sub.w	r3, r3, #370	@ 0x172
 8001dd6:	220a      	movs	r2, #10
 8001dd8:	801a      	strh	r2, [r3, #0]
	    status = mpu6500_read_hal(&MPU6500_I2C, MPU6500_I2C_ADDR_SHIFTED, HAL_MAX_DELAY,
 8001dda:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001dde:	f107 030e 	add.w	r3, r7, #14
 8001de2:	9303      	str	r3, [sp, #12]
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	9302      	str	r3, [sp, #8]
 8001dea:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	4613      	mov	r3, r2
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	21d0      	movs	r1, #208	@ 0xd0
 8001dfe:	487c      	ldr	r0, [pc, #496]	@ (8001ff0 <read_mpu_data_example.1+0x234>)
 8001e00:	f7fe fc64 	bl	80006cc <mpu6500_read_hal>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
	    if (status == MPU6500_OK) {
 8001e0a:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 80e2 	bne.w	8001fd8 <read_mpu_data_example.1+0x21c>
	        printf("Read %u samples successfully.\r\n", samples_read);
 8001e14:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001e18:	f5a3 73b9 	sub.w	r3, r3, #370	@ 0x172
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4874      	ldr	r0, [pc, #464]	@ (8001ff4 <read_mpu_data_example.1+0x238>)
 8001e22:	f00b f8b1 	bl	800cf88 <iprintf>
	        for (i = 0; i < samples_read; i++) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001e2c:	e0c8      	b.n	8001fc0 <read_mpu_data_example.1+0x204>
	            printf("Sample %d:\r\n", i);
 8001e2e:	f8d7 117c 	ldr.w	r1, [r7, #380]	@ 0x17c
 8001e32:	4871      	ldr	r0, [pc, #452]	@ (8001ff8 <read_mpu_data_example.1+0x23c>)
 8001e34:	f00b f8a8 	bl	800cf88 <iprintf>
	            printf("  Accel Raw:  X=%d, Y=%d, Z=%d\r\n", accel_raw[i][0], accel_raw[i][1], accel_raw[i][2]);
 8001e38:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001e48:	443b      	add	r3, r7
 8001e4a:	3b44      	subs	r3, #68	@ 0x44
 8001e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001e62:	443b      	add	r3, r7
 8001e64:	3b42      	subs	r3, #66	@ 0x42
 8001e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001e7c:	443b      	add	r3, r7
 8001e7e:	3b40      	subs	r3, #64	@ 0x40
 8001e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e84:	4602      	mov	r2, r0
 8001e86:	485d      	ldr	r0, [pc, #372]	@ (8001ffc <read_mpu_data_example.1+0x240>)
 8001e88:	f00b f87e 	bl	800cf88 <iprintf>
	            printf("  Accel (g):  X=%.3f, Y=%.3f, Z=%.3f\r\n", accel_g[i][0], accel_g[i][1], accel_g[i][2]);
 8001e8c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001e9c:	443b      	add	r3, r7
 8001e9e:	3bbc      	subs	r3, #188	@ 0xbc
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001ea8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001eb8:	443b      	add	r3, r7
 8001eba:	3bb8      	subs	r3, #184	@ 0xb8
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ec4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001ed4:	443b      	add	r3, r7
 8001ed6:	3bb4      	subs	r3, #180	@ 0xb4
 8001ed8:	edd3 6a00 	vldr	s13, [r3]
 8001edc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001ee0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001ee4:	ed8d 7b00 	vstr	d7, [sp]
 8001ee8:	ec53 2b15 	vmov	r2, r3, d5
 8001eec:	4844      	ldr	r0, [pc, #272]	@ (8002000 <read_mpu_data_example.1+0x244>)
 8001eee:	f00b f84b 	bl	800cf88 <iprintf>
	            printf("  Gyro Raw:   X=%d, Y=%d, Z=%d\r\n", gyro_raw[i][0], gyro_raw[i][1], gyro_raw[i][2]);
 8001ef2:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001f02:	443b      	add	r3, r7
 8001f04:	3bf8      	subs	r3, #248	@ 0xf8
 8001f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001f1c:	443b      	add	r3, r7
 8001f1e:	3bf6      	subs	r3, #246	@ 0xf6
 8001f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001f36:	443b      	add	r3, r7
 8001f38:	3bf4      	subs	r3, #244	@ 0xf4
 8001f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3e:	4602      	mov	r2, r0
 8001f40:	4830      	ldr	r0, [pc, #192]	@ (8002004 <read_mpu_data_example.1+0x248>)
 8001f42:	f00b f821 	bl	800cf88 <iprintf>
	            printf("  Gyro (dps): X=%.2f, Y=%.2f, Z=%.2f\r\n", gyro_dps[i][0], gyro_dps[i][1], gyro_dps[i][2]);
 8001f46:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001f4a:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8001f4e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001f64:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001f68:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8001f6c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f84:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001f88:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8001f8c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3308      	adds	r3, #8
 8001f9c:	edd3 6a00 	vldr	s13, [r3]
 8001fa0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001fa4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001fa8:	ed8d 7b00 	vstr	d7, [sp]
 8001fac:	ec53 2b15 	vmov	r2, r3, d5
 8001fb0:	4815      	ldr	r0, [pc, #84]	@ (8002008 <read_mpu_data_example.1+0x24c>)
 8001fb2:	f00a ffe9 	bl	800cf88 <iprintf>
	        for (i = 0; i < samples_read; i++) {
 8001fb6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001fc0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001fc4:	f5a3 73b9 	sub.w	r3, r3, #370	@ 0x172
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	f6ff af2c 	blt.w	8001e2e <read_mpu_data_example.1+0x72>
	}
 8001fd6:	e005      	b.n	8001fe4 <read_mpu_data_example.1+0x228>
	        printf("MPU6500 read failed with status: %u\r\n", status);
 8001fd8:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480b      	ldr	r0, [pc, #44]	@ (800200c <read_mpu_data_example.1+0x250>)
 8001fe0:	f00a ffd2 	bl	800cf88 <iprintf>
	}
 8001fe4:	bf00      	nop
 8001fe6:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	24000248 	.word	0x24000248
 8001ff4:	0800edfc 	.word	0x0800edfc
 8001ff8:	0800ee1c 	.word	0x0800ee1c
 8001ffc:	0800ee2c 	.word	0x0800ee2c
 8002000:	0800ee50 	.word	0x0800ee50
 8002004:	0800ee78 	.word	0x0800ee78
 8002008:	0800ee9c 	.word	0x0800ee9c
 800200c:	0800eec4 	.word	0x0800eec4

08002010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b09c      	sub	sp, #112	@ 0x70
 8002014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201a:	224c      	movs	r2, #76	@ 0x4c
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f00b f807 	bl	800d032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2220      	movs	r2, #32
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f00b f801 	bl	800d032 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002030:	4b2f      	ldr	r3, [pc, #188]	@ (80020f0 <SystemClock_Config+0xe0>)
 8002032:	f04f 32ff 	mov.w	r2, #4294967295
 8002036:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800203a:	2004      	movs	r0, #4
 800203c:	f004 ff10 	bl	8006e60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002040:	2300      	movs	r3, #0
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	4b2b      	ldr	r3, [pc, #172]	@ (80020f4 <SystemClock_Config+0xe4>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a2a      	ldr	r2, [pc, #168]	@ (80020f4 <SystemClock_Config+0xe4>)
 800204a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b28      	ldr	r3, [pc, #160]	@ (80020f4 <SystemClock_Config+0xe4>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800205c:	bf00      	nop
 800205e:	4b25      	ldr	r3, [pc, #148]	@ (80020f4 <SystemClock_Config+0xe4>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800206a:	d1f8      	bne.n	800205e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800206c:	2301      	movs	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002070:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002076:	2302      	movs	r3, #2
 8002078:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800207a:	2302      	movs	r3, #2
 800207c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8002082:	2346      	movs	r3, #70	@ 0x46
 8002084:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002086:	2302      	movs	r3, #2
 8002088:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800208a:	2304      	movs	r3, #4
 800208c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800208e:	2302      	movs	r3, #2
 8002090:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002092:	230c      	movs	r3, #12
 8002094:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002096:	2300      	movs	r3, #0
 8002098:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800209e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 ff36 	bl	8006f14 <HAL_RCC_OscConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80020ae:	f000 f92d 	bl	800230c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b2:	233f      	movs	r3, #63	@ 0x3f
 80020b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b6:	2303      	movs	r3, #3
 80020b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80020c2:	2340      	movs	r3, #64	@ 0x40
 80020c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80020c6:	2340      	movs	r3, #64	@ 0x40
 80020c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80020ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80020d0:	2340      	movs	r3, #64	@ 0x40
 80020d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2106      	movs	r1, #6
 80020d8:	4618      	mov	r0, r3
 80020da:	f005 fb4d 	bl	8007778 <HAL_RCC_ClockConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80020e4:	f000 f912 	bl	800230c <Error_Handler>
  }
}
 80020e8:	bf00      	nop
 80020ea:	3770      	adds	r7, #112	@ 0x70
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	58024400 	.word	0x58024400
 80020f4:	58024800 	.word	0x58024800

080020f8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a56      	ldr	r2, [pc, #344]	@ (8002264 <HAL_UARTEx_RxEventCallback+0x16c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	f040 80a5 	bne.w	800225a <HAL_UARTEx_RxEventCallback+0x162>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	461a      	mov	r2, r3
 8002114:	4954      	ldr	r1, [pc, #336]	@ (8002268 <HAL_UARTEx_RxEventCallback+0x170>)
 8002116:	4855      	ldr	r0, [pc, #340]	@ (800226c <HAL_UARTEx_RxEventCallback+0x174>)
 8002118:	f00b f80b 	bl	800d132 <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	4a53      	ldr	r2, [pc, #332]	@ (800226c <HAL_UARTEx_RxEventCallback+0x174>)
 8002120:	2100      	movs	r1, #0
 8002122:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8002124:	4b52      	ldr	r3, [pc, #328]	@ (8002270 <HAL_UARTEx_RxEventCallback+0x178>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f008 f968 	bl	800a400 <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8002130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002134:	2100      	movs	r1, #0
 8002136:	484c      	ldr	r0, [pc, #304]	@ (8002268 <HAL_UARTEx_RxEventCallback+0x170>)
 8002138:	f00a ff7b 	bl	800d032 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 800213c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002140:	4949      	ldr	r1, [pc, #292]	@ (8002268 <HAL_UARTEx_RxEventCallback+0x170>)
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f00a f987 	bl	800c456 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a48      	ldr	r2, [pc, #288]	@ (8002274 <HAL_UARTEx_RxEventCallback+0x17c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d068      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a46      	ldr	r2, [pc, #280]	@ (8002278 <HAL_UARTEx_RxEventCallback+0x180>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d061      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a43      	ldr	r2, [pc, #268]	@ (800227c <HAL_UARTEx_RxEventCallback+0x184>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d05a      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a41      	ldr	r2, [pc, #260]	@ (8002280 <HAL_UARTEx_RxEventCallback+0x188>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d053      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a3e      	ldr	r2, [pc, #248]	@ (8002284 <HAL_UARTEx_RxEventCallback+0x18c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d04c      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a3c      	ldr	r2, [pc, #240]	@ (8002288 <HAL_UARTEx_RxEventCallback+0x190>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d045      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a39      	ldr	r2, [pc, #228]	@ (800228c <HAL_UARTEx_RxEventCallback+0x194>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d03e      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a37      	ldr	r2, [pc, #220]	@ (8002290 <HAL_UARTEx_RxEventCallback+0x198>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d037      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a34      	ldr	r2, [pc, #208]	@ (8002294 <HAL_UARTEx_RxEventCallback+0x19c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d030      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a32      	ldr	r2, [pc, #200]	@ (8002298 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d029      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2f      	ldr	r2, [pc, #188]	@ (800229c <HAL_UARTEx_RxEventCallback+0x1a4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d022      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2d      	ldr	r2, [pc, #180]	@ (80022a0 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01b      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a2a      	ldr	r2, [pc, #168]	@ (80022a4 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d014      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a28      	ldr	r2, [pc, #160]	@ (80022a8 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00d      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a25      	ldr	r2, [pc, #148]	@ (80022ac <HAL_UARTEx_RxEventCallback+0x1b4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d006      	beq.n	8002228 <HAL_UARTEx_RxEventCallback+0x130>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a23      	ldr	r2, [pc, #140]	@ (80022b0 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d10c      	bne.n	8002242 <HAL_UARTEx_RxEventCallback+0x14a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0208 	bic.w	r2, r2, #8
 800223e:	601a      	str	r2, [r3, #0]
    }
}
 8002240:	e00b      	b.n	800225a <HAL_UARTEx_RxEventCallback+0x162>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0204 	bic.w	r2, r2, #4
 8002258:	601a      	str	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40004c00 	.word	0x40004c00
 8002268:	2400029c 	.word	0x2400029c
 800226c:	2400039c 	.word	0x2400039c
 8002270:	2400049c 	.word	0x2400049c
 8002274:	40020010 	.word	0x40020010
 8002278:	40020028 	.word	0x40020028
 800227c:	40020040 	.word	0x40020040
 8002280:	40020058 	.word	0x40020058
 8002284:	40020070 	.word	0x40020070
 8002288:	40020088 	.word	0x40020088
 800228c:	400200a0 	.word	0x400200a0
 8002290:	400200b8 	.word	0x400200b8
 8002294:	40020410 	.word	0x40020410
 8002298:	40020428 	.word	0x40020428
 800229c:	40020440 	.word	0x40020440
 80022a0:	40020458 	.word	0x40020458
 80022a4:	40020470 	.word	0x40020470
 80022a8:	40020488 	.word	0x40020488
 80022ac:	400204a0 	.word	0x400204a0
 80022b0:	400204b8 	.word	0x400204b8

080022b4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80022c6:	f000 ffe3 	bl	8003290 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80022ca:	2301      	movs	r3, #1
 80022cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80022d6:	231f      	movs	r3, #31
 80022d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80022da:	2387      	movs	r3, #135	@ 0x87
 80022dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80022de:	2300      	movs	r3, #0
 80022e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80022e2:	2300      	movs	r3, #0
 80022e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80022e6:	2301      	movs	r3, #1
 80022e8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80022ea:	2301      	movs	r3, #1
 80022ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80022f6:	463b      	mov	r3, r7
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 f801 	bl	8003300 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80022fe:	2004      	movs	r0, #4
 8002300:	f000 ffde 	bl	80032c0 <HAL_MPU_Enable>

}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002310:	b672      	cpsid	i
}
 8002312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <Error_Handler+0x8>

08002318 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800231c:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <MX_SPI1_Init+0xac>)
 800231e:	4a2a      	ldr	r2, [pc, #168]	@ (80023c8 <MX_SPI1_Init+0xb0>)
 8002320:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002322:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002324:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002328:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800232a:	4b26      	ldr	r3, [pc, #152]	@ (80023c4 <MX_SPI1_Init+0xac>)
 800232c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002330:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002332:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002334:	2207      	movs	r2, #7
 8002336:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002338:	4b22      	ldr	r3, [pc, #136]	@ (80023c4 <MX_SPI1_Init+0xac>)
 800233a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800233e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002340:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002342:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002346:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002348:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <MX_SPI1_Init+0xac>)
 800234a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800234e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002350:	4b1c      	ldr	r3, [pc, #112]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002352:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002356:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002358:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <MX_SPI1_Init+0xac>)
 800235a:	2200      	movs	r2, #0
 800235c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800235e:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002360:	2200      	movs	r2, #0
 8002362:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002364:	4b17      	ldr	r3, [pc, #92]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002366:	2200      	movs	r2, #0
 8002368:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800236a:	4b16      	ldr	r3, [pc, #88]	@ (80023c4 <MX_SPI1_Init+0xac>)
 800236c:	2200      	movs	r2, #0
 800236e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002370:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002372:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002376:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002378:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <MX_SPI1_Init+0xac>)
 800237a:	2200      	movs	r2, #0
 800237c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002380:	2200      	movs	r2, #0
 8002382:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002386:	2200      	movs	r2, #0
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800238a:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <MX_SPI1_Init+0xac>)
 800238c:	2200      	movs	r2, #0
 800238e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002392:	2200      	movs	r2, #0
 8002394:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <MX_SPI1_Init+0xac>)
 8002398:	2200      	movs	r2, #0
 800239a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800239c:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <MX_SPI1_Init+0xac>)
 800239e:	2200      	movs	r2, #0
 80023a0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <MX_SPI1_Init+0xac>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <MX_SPI1_Init+0xac>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	@ (80023c4 <MX_SPI1_Init+0xac>)
 80023b0:	f007 fb4e 	bl	8009a50 <HAL_SPI_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 80023ba:	f7ff ffa7 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	240004a0 	.word	0x240004a0
 80023c8:	40013000 	.word	0x40013000

080023cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b0ba      	sub	sp, #232	@ 0xe8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	22c0      	movs	r2, #192	@ 0xc0
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f00a fe20 	bl	800d032 <memset>
  if(spiHandle->Instance==SPI1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a40      	ldr	r2, [pc, #256]	@ (80024f8 <HAL_SPI_MspInit+0x12c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d179      	bne.n	80024f0 <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80023fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002408:	2300      	movs	r3, #0
 800240a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	4618      	mov	r0, r3
 8002412:	f005 fd3d 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800241c:	f7ff ff76 	bl	800230c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002420:	4b36      	ldr	r3, [pc, #216]	@ (80024fc <HAL_SPI_MspInit+0x130>)
 8002422:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002426:	4a35      	ldr	r2, [pc, #212]	@ (80024fc <HAL_SPI_MspInit+0x130>)
 8002428:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800242c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002430:	4b32      	ldr	r3, [pc, #200]	@ (80024fc <HAL_SPI_MspInit+0x130>)
 8002432:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002436:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	4b2f      	ldr	r3, [pc, #188]	@ (80024fc <HAL_SPI_MspInit+0x130>)
 8002440:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002444:	4a2d      	ldr	r2, [pc, #180]	@ (80024fc <HAL_SPI_MspInit+0x130>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800244e:	4b2b      	ldr	r3, [pc, #172]	@ (80024fc <HAL_SPI_MspInit+0x130>)
 8002450:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800245c:	23a0      	movs	r3, #160	@ 0xa0
 800245e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002474:	2305      	movs	r3, #5
 8002476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800247e:	4619      	mov	r1, r3
 8002480:	481f      	ldr	r0, [pc, #124]	@ (8002500 <HAL_SPI_MspInit+0x134>)
 8002482:	f003 fe67 	bl	8006154 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8002486:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 8002488:	4a1f      	ldr	r2, [pc, #124]	@ (8002508 <HAL_SPI_MspInit+0x13c>)
 800248a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800248c:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 800248e:	2226      	movs	r2, #38	@ 0x26
 8002490:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002492:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 8002494:	2240      	movs	r2, #64	@ 0x40
 8002496:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002498:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800249e:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 80024a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024a4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a6:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ac:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024b8:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024be:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024c4:	480f      	ldr	r0, [pc, #60]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 80024c6:	f000 ff5b 	bl	8003380 <HAL_DMA_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80024d0:	f7ff ff1c 	bl	800230c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 80024d8:	679a      	str	r2, [r3, #120]	@ 0x78
 80024da:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <HAL_SPI_MspInit+0x138>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	2023      	movs	r0, #35	@ 0x23
 80024e6:	f000 fe9e 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024ea:	2023      	movs	r0, #35	@ 0x23
 80024ec:	f000 feb5 	bl	800325a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024f0:	bf00      	nop
 80024f2:	37e8      	adds	r7, #232	@ 0xe8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40013000 	.word	0x40013000
 80024fc:	58024400 	.word	0x58024400
 8002500:	58020000 	.word	0x58020000
 8002504:	24000528 	.word	0x24000528
 8002508:	40020088 	.word	0x40020088

0800250c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <HAL_MspInit+0x30>)
 8002514:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002518:	4a08      	ldr	r2, [pc, #32]	@ (800253c <HAL_MspInit+0x30>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002522:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_MspInit+0x30>)
 8002524:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	58024400 	.word	0x58024400

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <NMI_Handler+0x4>

08002548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <MemManage_Handler+0x4>

08002558 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <BusFault_Handler+0x4>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <UsageFault_Handler+0x4>

08002568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002596:	f000 fd27 	bl	8002fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80025a4:	4802      	ldr	r0, [pc, #8]	@ (80025b0 <DMA1_Stream0_IRQHandler+0x10>)
 80025a6:	f002 fa47 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	24000850 	.word	0x24000850

080025b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80025b8:	4802      	ldr	r0, [pc, #8]	@ (80025c4 <DMA1_Stream1_IRQHandler+0x10>)
 80025ba:	f002 fa3d 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	240008c8 	.word	0x240008c8

080025c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80025cc:	4802      	ldr	r0, [pc, #8]	@ (80025d8 <DMA1_Stream2_IRQHandler+0x10>)
 80025ce:	f002 fa33 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	24000760 	.word	0x24000760

080025dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80025e0:	4802      	ldr	r0, [pc, #8]	@ (80025ec <DMA1_Stream3_IRQHandler+0x10>)
 80025e2:	f002 fa29 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	240007d8 	.word	0x240007d8

080025f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025f4:	4802      	ldr	r0, [pc, #8]	@ (8002600 <DMA1_Stream5_IRQHandler+0x10>)
 80025f6:	f002 fa1f 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	24000528 	.word	0x24000528

08002604 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002608:	4802      	ldr	r0, [pc, #8]	@ (8002614 <SPI1_IRQHandler+0x10>)
 800260a:	f007 fb45 	bl	8009c98 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	240004a0 	.word	0x240004a0

08002618 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <UART4_IRQHandler+0x10>)
 800261e:	f007 ffa5 	bl	800a56c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	240005a4 	.word	0x240005a4

0800262c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <UART5_IRQHandler+0x10>)
 8002632:	f007 ff9b 	bl	800a56c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	24000638 	.word	0x24000638

08002640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return 1;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_kill>:

int _kill(int pid, int sig)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800265a:	f00a fd3d 	bl	800d0d8 <__errno>
 800265e:	4603      	mov	r3, r0
 8002660:	2216      	movs	r2, #22
 8002662:	601a      	str	r2, [r3, #0]
  return -1;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <_exit>:

void _exit (int status)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ffe7 	bl	8002650 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002682:	bf00      	nop
 8002684:	e7fd      	b.n	8002682 <_exit+0x12>

08002686 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e00a      	b.n	80026ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002698:	f3af 8000 	nop.w
 800269c:	4601      	mov	r1, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	60ba      	str	r2, [r7, #8]
 80026a4:	b2ca      	uxtb	r2, r1
 80026a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dbf0      	blt.n	8002698 <_read+0x12>
  }

  return len;
 80026b6:	687b      	ldr	r3, [r7, #4]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e009      	b.n	80026e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	60ba      	str	r2, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fb08 	bl	8001cf0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3301      	adds	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	dbf1      	blt.n	80026d2 <_write+0x12>
  }
  return len;
 80026ee:	687b      	ldr	r3, [r7, #4]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_close>:

int _close(int file)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002720:	605a      	str	r2, [r3, #4]
  return 0;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_isatty>:

int _isatty(int file)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002738:	2301      	movs	r3, #1
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002768:	4a14      	ldr	r2, [pc, #80]	@ (80027bc <_sbrk+0x5c>)
 800276a:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <_sbrk+0x60>)
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002774:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <_sbrk+0x64>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800277c:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <_sbrk+0x64>)
 800277e:	4a12      	ldr	r2, [pc, #72]	@ (80027c8 <_sbrk+0x68>)
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002782:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	429a      	cmp	r2, r3
 800278e:	d207      	bcs.n	80027a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002790:	f00a fca2 	bl	800d0d8 <__errno>
 8002794:	4603      	mov	r3, r0
 8002796:	220c      	movs	r2, #12
 8002798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	e009      	b.n	80027b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a6:	4b07      	ldr	r3, [pc, #28]	@ (80027c4 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	4a05      	ldr	r2, [pc, #20]	@ (80027c4 <_sbrk+0x64>)
 80027b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	24100000 	.word	0x24100000
 80027c0:	00000400 	.word	0x00000400
 80027c4:	240005a0 	.word	0x240005a0
 80027c8:	24000a90 	.word	0x24000a90

080027cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027d0:	4b3e      	ldr	r3, [pc, #248]	@ (80028cc <SystemInit+0x100>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d6:	4a3d      	ldr	r2, [pc, #244]	@ (80028cc <SystemInit+0x100>)
 80027d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027e0:	4b3b      	ldr	r3, [pc, #236]	@ (80028d0 <SystemInit+0x104>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d807      	bhi.n	80027fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027ec:	4b38      	ldr	r3, [pc, #224]	@ (80028d0 <SystemInit+0x104>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 030f 	bic.w	r3, r3, #15
 80027f4:	4a36      	ldr	r2, [pc, #216]	@ (80028d0 <SystemInit+0x104>)
 80027f6:	f043 0303 	orr.w	r3, r3, #3
 80027fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027fc:	4b35      	ldr	r3, [pc, #212]	@ (80028d4 <SystemInit+0x108>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a34      	ldr	r2, [pc, #208]	@ (80028d4 <SystemInit+0x108>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002808:	4b32      	ldr	r3, [pc, #200]	@ (80028d4 <SystemInit+0x108>)
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800280e:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <SystemInit+0x108>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4930      	ldr	r1, [pc, #192]	@ (80028d4 <SystemInit+0x108>)
 8002814:	4b30      	ldr	r3, [pc, #192]	@ (80028d8 <SystemInit+0x10c>)
 8002816:	4013      	ands	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800281a:	4b2d      	ldr	r3, [pc, #180]	@ (80028d0 <SystemInit+0x104>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <SystemInit+0x104>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 030f 	bic.w	r3, r3, #15
 800282e:	4a28      	ldr	r2, [pc, #160]	@ (80028d0 <SystemInit+0x104>)
 8002830:	f043 0303 	orr.w	r3, r3, #3
 8002834:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002836:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <SystemInit+0x108>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800283c:	4b25      	ldr	r3, [pc, #148]	@ (80028d4 <SystemInit+0x108>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002842:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <SystemInit+0x108>)
 8002844:	2200      	movs	r2, #0
 8002846:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002848:	4b22      	ldr	r3, [pc, #136]	@ (80028d4 <SystemInit+0x108>)
 800284a:	4a24      	ldr	r2, [pc, #144]	@ (80028dc <SystemInit+0x110>)
 800284c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800284e:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <SystemInit+0x108>)
 8002850:	4a23      	ldr	r2, [pc, #140]	@ (80028e0 <SystemInit+0x114>)
 8002852:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002854:	4b1f      	ldr	r3, [pc, #124]	@ (80028d4 <SystemInit+0x108>)
 8002856:	4a23      	ldr	r2, [pc, #140]	@ (80028e4 <SystemInit+0x118>)
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800285a:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <SystemInit+0x108>)
 800285c:	2200      	movs	r2, #0
 800285e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002860:	4b1c      	ldr	r3, [pc, #112]	@ (80028d4 <SystemInit+0x108>)
 8002862:	4a20      	ldr	r2, [pc, #128]	@ (80028e4 <SystemInit+0x118>)
 8002864:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002866:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <SystemInit+0x108>)
 8002868:	2200      	movs	r2, #0
 800286a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800286c:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <SystemInit+0x108>)
 800286e:	4a1d      	ldr	r2, [pc, #116]	@ (80028e4 <SystemInit+0x118>)
 8002870:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002872:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <SystemInit+0x108>)
 8002874:	2200      	movs	r2, #0
 8002876:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002878:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <SystemInit+0x108>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a15      	ldr	r2, [pc, #84]	@ (80028d4 <SystemInit+0x108>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002882:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002884:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <SystemInit+0x108>)
 8002886:	2200      	movs	r2, #0
 8002888:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800288a:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <SystemInit+0x108>)
 800288c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002890:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d113      	bne.n	80028c0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002898:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <SystemInit+0x108>)
 800289a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800289e:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <SystemInit+0x108>)
 80028a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028a4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <SystemInit+0x11c>)
 80028aa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80028ae:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80028b0:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <SystemInit+0x108>)
 80028b2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80028b6:	4a07      	ldr	r2, [pc, #28]	@ (80028d4 <SystemInit+0x108>)
 80028b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028bc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00
 80028d0:	52002000 	.word	0x52002000
 80028d4:	58024400 	.word	0x58024400
 80028d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80028dc:	02020200 	.word	0x02020200
 80028e0:	01ff0000 	.word	0x01ff0000
 80028e4:	01010280 	.word	0x01010280
 80028e8:	52004000 	.word	0x52004000

080028ec <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80028f0:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <ExitRun0Mode+0x2c>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a08      	ldr	r2, [pc, #32]	@ (8002918 <ExitRun0Mode+0x2c>)
 80028f6:	f023 0302 	bic.w	r3, r3, #2
 80028fa:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80028fc:	bf00      	nop
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <ExitRun0Mode+0x2c>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f9      	beq.n	80028fe <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	58024800 	.word	0x58024800

0800291c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002920:	4b22      	ldr	r3, [pc, #136]	@ (80029ac <MX_UART4_Init+0x90>)
 8002922:	4a23      	ldr	r2, [pc, #140]	@ (80029b0 <MX_UART4_Init+0x94>)
 8002924:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002926:	4b21      	ldr	r3, [pc, #132]	@ (80029ac <MX_UART4_Init+0x90>)
 8002928:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800292c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b1f      	ldr	r3, [pc, #124]	@ (80029ac <MX_UART4_Init+0x90>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <MX_UART4_Init+0x90>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800293a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <MX_UART4_Init+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <MX_UART4_Init+0x90>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <MX_UART4_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	4b17      	ldr	r3, [pc, #92]	@ (80029ac <MX_UART4_Init+0x90>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002952:	4b16      	ldr	r3, [pc, #88]	@ (80029ac <MX_UART4_Init+0x90>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002958:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <MX_UART4_Init+0x90>)
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800295e:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <MX_UART4_Init+0x90>)
 8002960:	2200      	movs	r2, #0
 8002962:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002964:	4811      	ldr	r0, [pc, #68]	@ (80029ac <MX_UART4_Init+0x90>)
 8002966:	f007 fc6c 	bl	800a242 <HAL_UART_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002970:	f7ff fccc 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002974:	2100      	movs	r1, #0
 8002976:	480d      	ldr	r0, [pc, #52]	@ (80029ac <MX_UART4_Init+0x90>)
 8002978:	f009 fcf1 	bl	800c35e <HAL_UARTEx_SetTxFifoThreshold>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002982:	f7ff fcc3 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002986:	2100      	movs	r1, #0
 8002988:	4808      	ldr	r0, [pc, #32]	@ (80029ac <MX_UART4_Init+0x90>)
 800298a:	f009 fd26 	bl	800c3da <HAL_UARTEx_SetRxFifoThreshold>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002994:	f7ff fcba 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002998:	4804      	ldr	r0, [pc, #16]	@ (80029ac <MX_UART4_Init+0x90>)
 800299a:	f009 fca7 	bl	800c2ec <HAL_UARTEx_DisableFifoMode>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80029a4:	f7ff fcb2 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	240005a4 	.word	0x240005a4
 80029b0:	40004c00 	.word	0x40004c00

080029b4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80029b8:	4b22      	ldr	r3, [pc, #136]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029ba:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <MX_UART5_Init+0x94>)
 80029bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80029be:	4b21      	ldr	r3, [pc, #132]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80029c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80029c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80029cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80029d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80029d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029da:	220c      	movs	r2, #12
 80029dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029de:	4b19      	ldr	r3, [pc, #100]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e4:	4b17      	ldr	r3, [pc, #92]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ea:	4b16      	ldr	r3, [pc, #88]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029f0:	4b14      	ldr	r3, [pc, #80]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f6:	4b13      	ldr	r3, [pc, #76]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80029fc:	4811      	ldr	r0, [pc, #68]	@ (8002a44 <MX_UART5_Init+0x90>)
 80029fe:	f007 fc20 	bl	800a242 <HAL_UART_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002a08:	f7ff fc80 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	480d      	ldr	r0, [pc, #52]	@ (8002a44 <MX_UART5_Init+0x90>)
 8002a10:	f009 fca5 	bl	800c35e <HAL_UARTEx_SetTxFifoThreshold>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002a1a:	f7ff fc77 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4808      	ldr	r0, [pc, #32]	@ (8002a44 <MX_UART5_Init+0x90>)
 8002a22:	f009 fcda 	bl	800c3da <HAL_UARTEx_SetRxFifoThreshold>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002a2c:	f7ff fc6e 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002a30:	4804      	ldr	r0, [pc, #16]	@ (8002a44 <MX_UART5_Init+0x90>)
 8002a32:	f009 fc5b 	bl	800c2ec <HAL_UARTEx_DisableFifoMode>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002a3c:	f7ff fc66 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	24000638 	.word	0x24000638
 8002a48:	40005000 	.word	0x40005000

08002a4c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a50:	4b22      	ldr	r3, [pc, #136]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a52:	4a23      	ldr	r2, [pc, #140]	@ (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a56:	4b21      	ldr	r3, [pc, #132]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b1d      	ldr	r3, [pc, #116]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b1a      	ldr	r3, [pc, #104]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b17      	ldr	r3, [pc, #92]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a82:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a88:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a94:	4811      	ldr	r0, [pc, #68]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002a96:	f007 fbd4 	bl	800a242 <HAL_UART_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002aa0:	f7ff fc34 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	480d      	ldr	r0, [pc, #52]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002aa8:	f009 fc59 	bl	800c35e <HAL_UARTEx_SetTxFifoThreshold>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002ab2:	f7ff fc2b 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4808      	ldr	r0, [pc, #32]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002aba:	f009 fc8e 	bl	800c3da <HAL_UARTEx_SetRxFifoThreshold>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ac4:	f7ff fc22 	bl	800230c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ac8:	4804      	ldr	r0, [pc, #16]	@ (8002adc <MX_USART3_UART_Init+0x90>)
 8002aca:	f009 fc0f 	bl	800c2ec <HAL_UARTEx_DisableFifoMode>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ad4:	f7ff fc1a 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	240006cc 	.word	0x240006cc
 8002ae0:	40004800 	.word	0x40004800

08002ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b0be      	sub	sp, #248	@ 0xf8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002afc:	f107 0320 	add.w	r3, r7, #32
 8002b00:	22c0      	movs	r2, #192	@ 0xc0
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f00a fa94 	bl	800d032 <memset>
  if(uartHandle->Instance==UART4)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4ab0      	ldr	r2, [pc, #704]	@ (8002dd0 <HAL_UART_MspInit+0x2ec>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	f040 80ac 	bne.w	8002c6e <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b16:	f04f 0202 	mov.w	r2, #2
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b28:	f107 0320 	add.w	r3, r7, #32
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f005 f9af 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002b38:	f7ff fbe8 	bl	800230c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b3c:	4ba5      	ldr	r3, [pc, #660]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002b3e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b42:	4aa4      	ldr	r2, [pc, #656]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002b44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002b48:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002b4c:	4ba1      	ldr	r3, [pc, #644]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002b4e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	4b9e      	ldr	r3, [pc, #632]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002b5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b60:	4a9c      	ldr	r2, [pc, #624]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002b62:	f043 0302 	orr.w	r3, r3, #2
 8002b66:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b6a:	4b9a      	ldr	r3, [pc, #616]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b92:	2308      	movs	r3, #8
 8002b94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	488e      	ldr	r0, [pc, #568]	@ (8002dd8 <HAL_UART_MspInit+0x2f4>)
 8002ba0:	f003 fad8 	bl	8006154 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002ba4:	4b8d      	ldr	r3, [pc, #564]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002ba6:	4a8e      	ldr	r2, [pc, #568]	@ (8002de0 <HAL_UART_MspInit+0x2fc>)
 8002ba8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002baa:	4b8c      	ldr	r3, [pc, #560]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002bac:	223f      	movs	r2, #63	@ 0x3f
 8002bae:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bb0:	4b8a      	ldr	r3, [pc, #552]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bb6:	4b89      	ldr	r3, [pc, #548]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bbc:	4b87      	ldr	r3, [pc, #540]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002bbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bc2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bc4:	4b85      	ldr	r3, [pc, #532]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bca:	4b84      	ldr	r3, [pc, #528]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002bd0:	4b82      	ldr	r3, [pc, #520]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002bd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bd6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bd8:	4b80      	ldr	r3, [pc, #512]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bde:	4b7f      	ldr	r3, [pc, #508]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002be4:	487d      	ldr	r0, [pc, #500]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002be6:	f000 fbcb 	bl	8003380 <HAL_DMA_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002bf0:	f7ff fb8c 	bl	800230c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a79      	ldr	r2, [pc, #484]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002bf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002bfc:	4a77      	ldr	r2, [pc, #476]	@ (8002ddc <HAL_UART_MspInit+0x2f8>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 8002c02:	4b78      	ldr	r3, [pc, #480]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c04:	4a78      	ldr	r2, [pc, #480]	@ (8002de8 <HAL_UART_MspInit+0x304>)
 8002c06:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002c08:	4b76      	ldr	r3, [pc, #472]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c0a:	2240      	movs	r2, #64	@ 0x40
 8002c0c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c0e:	4b75      	ldr	r3, [pc, #468]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c10:	2240      	movs	r2, #64	@ 0x40
 8002c12:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c14:	4b73      	ldr	r3, [pc, #460]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c1a:	4b72      	ldr	r3, [pc, #456]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c20:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c22:	4b70      	ldr	r3, [pc, #448]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c28:	4b6e      	ldr	r3, [pc, #440]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c34:	4b6b      	ldr	r3, [pc, #428]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002c40:	4868      	ldr	r0, [pc, #416]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c42:	f000 fb9d 	bl	8003380 <HAL_DMA_Init>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8002c4c:	f7ff fb5e 	bl	800230c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a64      	ldr	r2, [pc, #400]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c54:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002c56:	4a63      	ldr	r2, [pc, #396]	@ (8002de4 <HAL_UART_MspInit+0x300>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	2034      	movs	r0, #52	@ 0x34
 8002c62:	f000 fae0 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c66:	2034      	movs	r0, #52	@ 0x34
 8002c68:	f000 faf7 	bl	800325a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c6c:	e114      	b.n	8002e98 <HAL_UART_MspInit+0x3b4>
  else if(uartHandle->Instance==UART5)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a5e      	ldr	r2, [pc, #376]	@ (8002dec <HAL_UART_MspInit+0x308>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	f040 80c3 	bne.w	8002e00 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002c7a:	f04f 0202 	mov.w	r2, #2
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c8c:	f107 0320 	add.w	r3, r7, #32
 8002c90:	4618      	mov	r0, r3
 8002c92:	f005 f8fd 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8002c9c:	f7ff fb36 	bl	800230c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002ca2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ca6:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002ca8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cac:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002cb0:	4b48      	ldr	r3, [pc, #288]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002cb2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	4b45      	ldr	r3, [pc, #276]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002cc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cc4:	4a43      	ldr	r2, [pc, #268]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002cce:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <HAL_UART_MspInit+0x2f0>)
 8002cd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cdc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002ce0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002cf6:	230e      	movs	r3, #14
 8002cf8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002d00:	4619      	mov	r1, r3
 8002d02:	4835      	ldr	r0, [pc, #212]	@ (8002dd8 <HAL_UART_MspInit+0x2f4>)
 8002d04:	f003 fa26 	bl	8006154 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002d08:	4b39      	ldr	r3, [pc, #228]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d0a:	4a3a      	ldr	r2, [pc, #232]	@ (8002df4 <HAL_UART_MspInit+0x310>)
 8002d0c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002d0e:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d10:	2241      	movs	r2, #65	@ 0x41
 8002d12:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d14:	4b36      	ldr	r3, [pc, #216]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d1a:	4b35      	ldr	r3, [pc, #212]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d20:	4b33      	ldr	r3, [pc, #204]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d26:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d28:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d2e:	4b30      	ldr	r3, [pc, #192]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002d34:	4b2e      	ldr	r3, [pc, #184]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d40:	4b2b      	ldr	r3, [pc, #172]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002d46:	482a      	ldr	r0, [pc, #168]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d48:	f000 fb1a 	bl	8003380 <HAL_DMA_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8002d52:	f7ff fadb 	bl	800230c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a25      	ldr	r2, [pc, #148]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002d5e:	4a24      	ldr	r2, [pc, #144]	@ (8002df0 <HAL_UART_MspInit+0x30c>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8002d64:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002d66:	4a25      	ldr	r2, [pc, #148]	@ (8002dfc <HAL_UART_MspInit+0x318>)
 8002d68:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8002d6a:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002d6c:	2242      	movs	r2, #66	@ 0x42
 8002d6e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d70:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002d72:	2240      	movs	r2, #64	@ 0x40
 8002d74:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d76:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002d7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d82:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d84:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002d90:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d96:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d9c:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002da2:	4815      	ldr	r0, [pc, #84]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002da4:	f000 faec 	bl	8003380 <HAL_DMA_Init>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8002dae:	f7ff faad 	bl	800230c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a10      	ldr	r2, [pc, #64]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002db6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002db8:	4a0f      	ldr	r2, [pc, #60]	@ (8002df8 <HAL_UART_MspInit+0x314>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2035      	movs	r0, #53	@ 0x35
 8002dc4:	f000 fa2f 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002dc8:	2035      	movs	r0, #53	@ 0x35
 8002dca:	f000 fa46 	bl	800325a <HAL_NVIC_EnableIRQ>
}
 8002dce:	e063      	b.n	8002e98 <HAL_UART_MspInit+0x3b4>
 8002dd0:	40004c00 	.word	0x40004c00
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	58020400 	.word	0x58020400
 8002ddc:	24000760 	.word	0x24000760
 8002de0:	40020040 	.word	0x40020040
 8002de4:	240007d8 	.word	0x240007d8
 8002de8:	40020058 	.word	0x40020058
 8002dec:	40005000 	.word	0x40005000
 8002df0:	24000850 	.word	0x24000850
 8002df4:	40020010 	.word	0x40020010
 8002df8:	240008c8 	.word	0x240008c8
 8002dfc:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a26      	ldr	r2, [pc, #152]	@ (8002ea0 <HAL_UART_MspInit+0x3bc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d146      	bne.n	8002e98 <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e0a:	f04f 0202 	mov.w	r2, #2
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e1c:	f107 0320 	add.w	r3, r7, #32
 8002e20:	4618      	mov	r0, r3
 8002e22:	f005 f835 	bl	8007e90 <HAL_RCCEx_PeriphCLKConfig>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8002e2c:	f7ff fa6e 	bl	800230c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea4 <HAL_UART_MspInit+0x3c0>)
 8002e32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e36:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea4 <HAL_UART_MspInit+0x3c0>)
 8002e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e3c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002e40:	4b18      	ldr	r3, [pc, #96]	@ (8002ea4 <HAL_UART_MspInit+0x3c0>)
 8002e42:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002e46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <HAL_UART_MspInit+0x3c0>)
 8002e50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e54:	4a13      	ldr	r2, [pc, #76]	@ (8002ea4 <HAL_UART_MspInit+0x3c0>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <HAL_UART_MspInit+0x3c0>)
 8002e60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e86:	2307      	movs	r3, #7
 8002e88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4805      	ldr	r0, [pc, #20]	@ (8002ea8 <HAL_UART_MspInit+0x3c4>)
 8002e94:	f003 f95e 	bl	8006154 <HAL_GPIO_Init>
}
 8002e98:	bf00      	nop
 8002e9a:	37f8      	adds	r7, #248	@ 0xf8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40004800 	.word	0x40004800
 8002ea4:	58024400 	.word	0x58024400
 8002ea8:	58020c00 	.word	0x58020c00

08002eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002eac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002ee8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002eb0:	f7ff fd1c 	bl	80028ec <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002eb4:	f7ff fc8a 	bl	80027cc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb8:	480c      	ldr	r0, [pc, #48]	@ (8002eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eba:	490d      	ldr	r1, [pc, #52]	@ (8002ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8002efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ede:	f00a f901 	bl	800d0e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee2:	f7fe ff33 	bl	8001d4c <main>
  bx  lr
 8002ee6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ee8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002eec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ef0:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8002ef4:	0800f2b4 	.word	0x0800f2b4
  ldr r2, =_sbss
 8002ef8:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002efc:	24000a90 	.word	0x24000a90

08002f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC_IRQHandler>
	...

08002f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0a:	2003      	movs	r0, #3
 8002f0c:	f000 f980 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002f10:	f004 fde8 	bl	8007ae4 <HAL_RCC_GetSysClockFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_Init+0x68>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	4913      	ldr	r1, [pc, #76]	@ (8002f70 <HAL_Init+0x6c>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <HAL_Init+0x68>)
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4a0e      	ldr	r2, [pc, #56]	@ (8002f70 <HAL_Init+0x6c>)
 8002f38:	5cd3      	ldrb	r3, [r2, r3]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	4a0b      	ldr	r2, [pc, #44]	@ (8002f74 <HAL_Init+0x70>)
 8002f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f48:	4a0b      	ldr	r2, [pc, #44]	@ (8002f78 <HAL_Init+0x74>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f000 f814 	bl	8002f7c <HAL_InitTick>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e002      	b.n	8002f64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f5e:	f7ff fad5 	bl	800250c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	58024400 	.word	0x58024400
 8002f70:	0800eeec 	.word	0x0800eeec
 8002f74:	24000004 	.word	0x24000004
 8002f78:	24000000 	.word	0x24000000

08002f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f84:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <HAL_InitTick+0x60>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e021      	b.n	8002fd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f90:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <HAL_InitTick+0x64>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <HAL_InitTick+0x60>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f965 	bl	8003276 <HAL_SYSTICK_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e00e      	b.n	8002fd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d80a      	bhi.n	8002fd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	f000 f92f 	bl	8003226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc8:	4a06      	ldr	r2, [pc, #24]	@ (8002fe4 <HAL_InitTick+0x68>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	2400000c 	.word	0x2400000c
 8002fe0:	24000000 	.word	0x24000000
 8002fe4:	24000008 	.word	0x24000008

08002fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fec:	4b06      	ldr	r3, [pc, #24]	@ (8003008 <HAL_IncTick+0x20>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_IncTick+0x24>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a04      	ldr	r2, [pc, #16]	@ (800300c <HAL_IncTick+0x24>)
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	2400000c 	.word	0x2400000c
 800300c:	24000940 	.word	0x24000940

08003010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return uwTick;
 8003014:	4b03      	ldr	r3, [pc, #12]	@ (8003024 <HAL_GetTick+0x14>)
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	24000940 	.word	0x24000940

08003028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7ff ffee 	bl	8003010 <HAL_GetTick>
 8003034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d005      	beq.n	800304e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_Delay+0x44>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800304e:	bf00      	nop
 8003050:	f7ff ffde 	bl	8003010 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	429a      	cmp	r2, r3
 800305e:	d8f7      	bhi.n	8003050 <HAL_Delay+0x28>
  {
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2400000c 	.word	0x2400000c

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <__NVIC_SetPriorityGrouping+0x40>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	4313      	orrs	r3, r2
 800309c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309e:	4a04      	ldr	r2, [pc, #16]	@ (80030b0 <__NVIC_SetPriorityGrouping+0x40>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	60d3      	str	r3, [r2, #12]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00
 80030b4:	05fa0000 	.word	0x05fa0000

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	@ (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	@ (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	@ (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	@ 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	@ 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	@ (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	f7ff ff8e 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	@ (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff29 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003234:	f7ff ff40 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 8003238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	6978      	ldr	r0, [r7, #20]
 8003240:	f7ff ff90 	bl	8003164 <NVIC_EncodePriority>
 8003244:	4602      	mov	r2, r0
 8003246:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff5f 	bl	8003110 <__NVIC_SetPriority>
}
 8003252:	bf00      	nop
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	4603      	mov	r3, r0
 8003262:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff33 	bl	80030d4 <__NVIC_EnableIRQ>
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ffa4 	bl	80031cc <SysTick_Config>
 8003284:	4603      	mov	r3, r0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003294:	f3bf 8f5f 	dmb	sy
}
 8003298:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800329a:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <HAL_MPU_Disable+0x28>)
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	4a06      	ldr	r2, [pc, #24]	@ (80032b8 <HAL_MPU_Disable+0x28>)
 80032a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80032a6:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <HAL_MPU_Disable+0x2c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000ed00 	.word	0xe000ed00
 80032bc:	e000ed90 	.word	0xe000ed90

080032c0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80032c8:	4a0b      	ldr	r2, [pc, #44]	@ (80032f8 <HAL_MPU_Enable+0x38>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80032d2:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <HAL_MPU_Enable+0x3c>)
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	4a09      	ldr	r2, [pc, #36]	@ (80032fc <HAL_MPU_Enable+0x3c>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032dc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80032de:	f3bf 8f4f 	dsb	sy
}
 80032e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032e4:	f3bf 8f6f 	isb	sy
}
 80032e8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000ed90 	.word	0xe000ed90
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	785a      	ldrb	r2, [r3, #1]
 800330c:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_MPU_ConfigRegion+0x7c>)
 800330e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003310:	4b1a      	ldr	r3, [pc, #104]	@ (800337c <HAL_MPU_ConfigRegion+0x7c>)
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	4a19      	ldr	r2, [pc, #100]	@ (800337c <HAL_MPU_ConfigRegion+0x7c>)
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800331c:	4a17      	ldr	r2, [pc, #92]	@ (800337c <HAL_MPU_ConfigRegion+0x7c>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	7b1b      	ldrb	r3, [r3, #12]
 8003328:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7adb      	ldrb	r3, [r3, #11]
 800332e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003330:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7a9b      	ldrb	r3, [r3, #10]
 8003336:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003338:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7b5b      	ldrb	r3, [r3, #13]
 800333e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003340:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7b9b      	ldrb	r3, [r3, #14]
 8003346:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003348:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7bdb      	ldrb	r3, [r3, #15]
 800334e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003350:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7a5b      	ldrb	r3, [r3, #9]
 8003356:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003358:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7a1b      	ldrb	r3, [r3, #8]
 800335e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003360:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003368:	4a04      	ldr	r2, [pc, #16]	@ (800337c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800336a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800336c:	6113      	str	r3, [r2, #16]
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000ed90 	.word	0xe000ed90

08003380 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff fe42 	bl	8003010 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e37d      	b.n	8003a94 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a66      	ldr	r2, [pc, #408]	@ (8003538 <HAL_DMA_Init+0x1b8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d04a      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a65      	ldr	r2, [pc, #404]	@ (800353c <HAL_DMA_Init+0x1bc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d045      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a63      	ldr	r2, [pc, #396]	@ (8003540 <HAL_DMA_Init+0x1c0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d040      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a62      	ldr	r2, [pc, #392]	@ (8003544 <HAL_DMA_Init+0x1c4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d03b      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a60      	ldr	r2, [pc, #384]	@ (8003548 <HAL_DMA_Init+0x1c8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d036      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a5f      	ldr	r2, [pc, #380]	@ (800354c <HAL_DMA_Init+0x1cc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d031      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003550 <HAL_DMA_Init+0x1d0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d02c      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003554 <HAL_DMA_Init+0x1d4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d027      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003558 <HAL_DMA_Init+0x1d8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d022      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a59      	ldr	r2, [pc, #356]	@ (800355c <HAL_DMA_Init+0x1dc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d01d      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a57      	ldr	r2, [pc, #348]	@ (8003560 <HAL_DMA_Init+0x1e0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d018      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a56      	ldr	r2, [pc, #344]	@ (8003564 <HAL_DMA_Init+0x1e4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a54      	ldr	r2, [pc, #336]	@ (8003568 <HAL_DMA_Init+0x1e8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00e      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a53      	ldr	r2, [pc, #332]	@ (800356c <HAL_DMA_Init+0x1ec>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d009      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a51      	ldr	r2, [pc, #324]	@ (8003570 <HAL_DMA_Init+0x1f0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <HAL_DMA_Init+0xb8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a50      	ldr	r2, [pc, #320]	@ (8003574 <HAL_DMA_Init+0x1f4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d101      	bne.n	800343c <HAL_DMA_Init+0xbc>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_DMA_Init+0xbe>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 813c 	beq.w	80036bc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a37      	ldr	r2, [pc, #220]	@ (8003538 <HAL_DMA_Init+0x1b8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04a      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a36      	ldr	r2, [pc, #216]	@ (800353c <HAL_DMA_Init+0x1bc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d045      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a34      	ldr	r2, [pc, #208]	@ (8003540 <HAL_DMA_Init+0x1c0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d040      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a33      	ldr	r2, [pc, #204]	@ (8003544 <HAL_DMA_Init+0x1c4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d03b      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a31      	ldr	r2, [pc, #196]	@ (8003548 <HAL_DMA_Init+0x1c8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d036      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a30      	ldr	r2, [pc, #192]	@ (800354c <HAL_DMA_Init+0x1cc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d031      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2e      	ldr	r2, [pc, #184]	@ (8003550 <HAL_DMA_Init+0x1d0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02c      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2d      	ldr	r2, [pc, #180]	@ (8003554 <HAL_DMA_Init+0x1d4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d027      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003558 <HAL_DMA_Init+0x1d8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d022      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2a      	ldr	r2, [pc, #168]	@ (800355c <HAL_DMA_Init+0x1dc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d01d      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a28      	ldr	r2, [pc, #160]	@ (8003560 <HAL_DMA_Init+0x1e0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d018      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a27      	ldr	r2, [pc, #156]	@ (8003564 <HAL_DMA_Init+0x1e4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a25      	ldr	r2, [pc, #148]	@ (8003568 <HAL_DMA_Init+0x1e8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00e      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a24      	ldr	r2, [pc, #144]	@ (800356c <HAL_DMA_Init+0x1ec>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a22      	ldr	r2, [pc, #136]	@ (8003570 <HAL_DMA_Init+0x1f0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_DMA_Init+0x174>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a21      	ldr	r2, [pc, #132]	@ (8003574 <HAL_DMA_Init+0x1f4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <HAL_DMA_Init+0x186>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e007      	b.n	8003516 <HAL_DMA_Init+0x196>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003516:	e02f      	b.n	8003578 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003518:	f7ff fd7a 	bl	8003010 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b05      	cmp	r3, #5
 8003524:	d928      	bls.n	8003578 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2203      	movs	r2, #3
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e2ad      	b.n	8003a94 <HAL_DMA_Init+0x714>
 8003538:	40020010 	.word	0x40020010
 800353c:	40020028 	.word	0x40020028
 8003540:	40020040 	.word	0x40020040
 8003544:	40020058 	.word	0x40020058
 8003548:	40020070 	.word	0x40020070
 800354c:	40020088 	.word	0x40020088
 8003550:	400200a0 	.word	0x400200a0
 8003554:	400200b8 	.word	0x400200b8
 8003558:	40020410 	.word	0x40020410
 800355c:	40020428 	.word	0x40020428
 8003560:	40020440 	.word	0x40020440
 8003564:	40020458 	.word	0x40020458
 8003568:	40020470 	.word	0x40020470
 800356c:	40020488 	.word	0x40020488
 8003570:	400204a0 	.word	0x400204a0
 8003574:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1c8      	bne.n	8003518 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4b73      	ldr	r3, [pc, #460]	@ (8003760 <HAL_DMA_Init+0x3e0>)
 8003592:	4013      	ands	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800359e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d107      	bne.n	80035dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	4313      	orrs	r3, r2
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b28      	cmp	r3, #40	@ 0x28
 80035e2:	d903      	bls.n	80035ec <HAL_DMA_Init+0x26c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80035ea:	d91f      	bls.n	800362c <HAL_DMA_Init+0x2ac>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80035f2:	d903      	bls.n	80035fc <HAL_DMA_Init+0x27c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b42      	cmp	r3, #66	@ 0x42
 80035fa:	d917      	bls.n	800362c <HAL_DMA_Init+0x2ac>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b46      	cmp	r3, #70	@ 0x46
 8003602:	d903      	bls.n	800360c <HAL_DMA_Init+0x28c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b48      	cmp	r3, #72	@ 0x48
 800360a:	d90f      	bls.n	800362c <HAL_DMA_Init+0x2ac>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b4e      	cmp	r3, #78	@ 0x4e
 8003612:	d903      	bls.n	800361c <HAL_DMA_Init+0x29c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b52      	cmp	r3, #82	@ 0x52
 800361a:	d907      	bls.n	800362c <HAL_DMA_Init+0x2ac>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b73      	cmp	r3, #115	@ 0x73
 8003622:	d905      	bls.n	8003630 <HAL_DMA_Init+0x2b0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b77      	cmp	r3, #119	@ 0x77
 800362a:	d801      	bhi.n	8003630 <HAL_DMA_Init+0x2b0>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_DMA_Init+0x2b2>
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800363c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0307 	bic.w	r3, r3, #7
 8003654:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	2b04      	cmp	r3, #4
 8003666:	d117      	bne.n	8003698 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f002 fbe0 	bl	8005e40 <DMA_CheckFifoParam>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2240      	movs	r2, #64	@ 0x40
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e1fd      	b.n	8003a94 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f002 fb1b 	bl	8005cdc <DMA_CalcBaseAndBitshift>
 80036a6:	4603      	mov	r3, r0
 80036a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	223f      	movs	r2, #63	@ 0x3f
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	e0fd      	b.n	80038b8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a28      	ldr	r2, [pc, #160]	@ (8003764 <HAL_DMA_Init+0x3e4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d04a      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a27      	ldr	r2, [pc, #156]	@ (8003768 <HAL_DMA_Init+0x3e8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d045      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a25      	ldr	r2, [pc, #148]	@ (800376c <HAL_DMA_Init+0x3ec>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d040      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a24      	ldr	r2, [pc, #144]	@ (8003770 <HAL_DMA_Init+0x3f0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d03b      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a22      	ldr	r2, [pc, #136]	@ (8003774 <HAL_DMA_Init+0x3f4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d036      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a21      	ldr	r2, [pc, #132]	@ (8003778 <HAL_DMA_Init+0x3f8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d031      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1f      	ldr	r2, [pc, #124]	@ (800377c <HAL_DMA_Init+0x3fc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02c      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1e      	ldr	r2, [pc, #120]	@ (8003780 <HAL_DMA_Init+0x400>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d027      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1c      	ldr	r2, [pc, #112]	@ (8003784 <HAL_DMA_Init+0x404>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d022      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1b      	ldr	r2, [pc, #108]	@ (8003788 <HAL_DMA_Init+0x408>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d01d      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a19      	ldr	r2, [pc, #100]	@ (800378c <HAL_DMA_Init+0x40c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d018      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <HAL_DMA_Init+0x410>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a16      	ldr	r2, [pc, #88]	@ (8003794 <HAL_DMA_Init+0x414>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00e      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a15      	ldr	r2, [pc, #84]	@ (8003798 <HAL_DMA_Init+0x418>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a13      	ldr	r2, [pc, #76]	@ (800379c <HAL_DMA_Init+0x41c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_DMA_Init+0x3dc>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <HAL_DMA_Init+0x420>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d123      	bne.n	80037a4 <HAL_DMA_Init+0x424>
 800375c:	2301      	movs	r3, #1
 800375e:	e022      	b.n	80037a6 <HAL_DMA_Init+0x426>
 8003760:	fe10803f 	.word	0xfe10803f
 8003764:	48022c08 	.word	0x48022c08
 8003768:	48022c1c 	.word	0x48022c1c
 800376c:	48022c30 	.word	0x48022c30
 8003770:	48022c44 	.word	0x48022c44
 8003774:	48022c58 	.word	0x48022c58
 8003778:	48022c6c 	.word	0x48022c6c
 800377c:	48022c80 	.word	0x48022c80
 8003780:	48022c94 	.word	0x48022c94
 8003784:	58025408 	.word	0x58025408
 8003788:	5802541c 	.word	0x5802541c
 800378c:	58025430 	.word	0x58025430
 8003790:	58025444 	.word	0x58025444
 8003794:	58025458 	.word	0x58025458
 8003798:	5802546c 	.word	0x5802546c
 800379c:	58025480 	.word	0x58025480
 80037a0:	58025494 	.word	0x58025494
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d07d      	beq.n	80038a6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a7f      	ldr	r2, [pc, #508]	@ (80039ac <HAL_DMA_Init+0x62c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d021      	beq.n	80037f8 <HAL_DMA_Init+0x478>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a7d      	ldr	r2, [pc, #500]	@ (80039b0 <HAL_DMA_Init+0x630>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01c      	beq.n	80037f8 <HAL_DMA_Init+0x478>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a7c      	ldr	r2, [pc, #496]	@ (80039b4 <HAL_DMA_Init+0x634>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d017      	beq.n	80037f8 <HAL_DMA_Init+0x478>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a7a      	ldr	r2, [pc, #488]	@ (80039b8 <HAL_DMA_Init+0x638>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d012      	beq.n	80037f8 <HAL_DMA_Init+0x478>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a79      	ldr	r2, [pc, #484]	@ (80039bc <HAL_DMA_Init+0x63c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00d      	beq.n	80037f8 <HAL_DMA_Init+0x478>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a77      	ldr	r2, [pc, #476]	@ (80039c0 <HAL_DMA_Init+0x640>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d008      	beq.n	80037f8 <HAL_DMA_Init+0x478>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a76      	ldr	r2, [pc, #472]	@ (80039c4 <HAL_DMA_Init+0x644>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <HAL_DMA_Init+0x478>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a74      	ldr	r2, [pc, #464]	@ (80039c8 <HAL_DMA_Init+0x648>)
 80037f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4b6e      	ldr	r3, [pc, #440]	@ (80039cc <HAL_DMA_Init+0x64c>)
 8003814:	4013      	ands	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b40      	cmp	r3, #64	@ 0x40
 800381e:	d008      	beq.n	8003832 <HAL_DMA_Init+0x4b2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b80      	cmp	r3, #128	@ 0x80
 8003826:	d102      	bne.n	800382e <HAL_DMA_Init+0x4ae>
 8003828:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800382c:	e002      	b.n	8003834 <HAL_DMA_Init+0x4b4>
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_DMA_Init+0x4b4>
 8003832:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68d2      	ldr	r2, [r2, #12]
 8003838:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800383a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003842:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800384a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003852:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800385a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003862:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	4b55      	ldr	r3, [pc, #340]	@ (80039d0 <HAL_DMA_Init+0x650>)
 800387a:	4413      	add	r3, r2
 800387c:	4a55      	ldr	r2, [pc, #340]	@ (80039d4 <HAL_DMA_Init+0x654>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	009a      	lsls	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f002 fa26 	bl	8005cdc <DMA_CalcBaseAndBitshift>
 8003890:	4603      	mov	r3, r0
 8003892:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2201      	movs	r2, #1
 800389e:	409a      	lsls	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	e008      	b.n	80038b8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2240      	movs	r2, #64	@ 0x40
 80038aa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2203      	movs	r2, #3
 80038b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0ed      	b.n	8003a94 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a46      	ldr	r2, [pc, #280]	@ (80039d8 <HAL_DMA_Init+0x658>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d072      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a45      	ldr	r2, [pc, #276]	@ (80039dc <HAL_DMA_Init+0x65c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d06d      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a43      	ldr	r2, [pc, #268]	@ (80039e0 <HAL_DMA_Init+0x660>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d068      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a42      	ldr	r2, [pc, #264]	@ (80039e4 <HAL_DMA_Init+0x664>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d063      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a40      	ldr	r2, [pc, #256]	@ (80039e8 <HAL_DMA_Init+0x668>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d05e      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a3f      	ldr	r2, [pc, #252]	@ (80039ec <HAL_DMA_Init+0x66c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d059      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a3d      	ldr	r2, [pc, #244]	@ (80039f0 <HAL_DMA_Init+0x670>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d054      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a3c      	ldr	r2, [pc, #240]	@ (80039f4 <HAL_DMA_Init+0x674>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d04f      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3a      	ldr	r2, [pc, #232]	@ (80039f8 <HAL_DMA_Init+0x678>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d04a      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a39      	ldr	r2, [pc, #228]	@ (80039fc <HAL_DMA_Init+0x67c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d045      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a37      	ldr	r2, [pc, #220]	@ (8003a00 <HAL_DMA_Init+0x680>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d040      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a36      	ldr	r2, [pc, #216]	@ (8003a04 <HAL_DMA_Init+0x684>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d03b      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a34      	ldr	r2, [pc, #208]	@ (8003a08 <HAL_DMA_Init+0x688>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d036      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a33      	ldr	r2, [pc, #204]	@ (8003a0c <HAL_DMA_Init+0x68c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d031      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a31      	ldr	r2, [pc, #196]	@ (8003a10 <HAL_DMA_Init+0x690>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d02c      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a30      	ldr	r2, [pc, #192]	@ (8003a14 <HAL_DMA_Init+0x694>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d027      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a13      	ldr	r2, [pc, #76]	@ (80039ac <HAL_DMA_Init+0x62c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d022      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a12      	ldr	r2, [pc, #72]	@ (80039b0 <HAL_DMA_Init+0x630>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d01d      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a10      	ldr	r2, [pc, #64]	@ (80039b4 <HAL_DMA_Init+0x634>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d018      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a0f      	ldr	r2, [pc, #60]	@ (80039b8 <HAL_DMA_Init+0x638>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0d      	ldr	r2, [pc, #52]	@ (80039bc <HAL_DMA_Init+0x63c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00e      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a0c      	ldr	r2, [pc, #48]	@ (80039c0 <HAL_DMA_Init+0x640>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d009      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0a      	ldr	r2, [pc, #40]	@ (80039c4 <HAL_DMA_Init+0x644>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d004      	beq.n	80039a8 <HAL_DMA_Init+0x628>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a09      	ldr	r2, [pc, #36]	@ (80039c8 <HAL_DMA_Init+0x648>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d137      	bne.n	8003a18 <HAL_DMA_Init+0x698>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e036      	b.n	8003a1a <HAL_DMA_Init+0x69a>
 80039ac:	58025408 	.word	0x58025408
 80039b0:	5802541c 	.word	0x5802541c
 80039b4:	58025430 	.word	0x58025430
 80039b8:	58025444 	.word	0x58025444
 80039bc:	58025458 	.word	0x58025458
 80039c0:	5802546c 	.word	0x5802546c
 80039c4:	58025480 	.word	0x58025480
 80039c8:	58025494 	.word	0x58025494
 80039cc:	fffe000f 	.word	0xfffe000f
 80039d0:	a7fdabf8 	.word	0xa7fdabf8
 80039d4:	cccccccd 	.word	0xcccccccd
 80039d8:	40020010 	.word	0x40020010
 80039dc:	40020028 	.word	0x40020028
 80039e0:	40020040 	.word	0x40020040
 80039e4:	40020058 	.word	0x40020058
 80039e8:	40020070 	.word	0x40020070
 80039ec:	40020088 	.word	0x40020088
 80039f0:	400200a0 	.word	0x400200a0
 80039f4:	400200b8 	.word	0x400200b8
 80039f8:	40020410 	.word	0x40020410
 80039fc:	40020428 	.word	0x40020428
 8003a00:	40020440 	.word	0x40020440
 8003a04:	40020458 	.word	0x40020458
 8003a08:	40020470 	.word	0x40020470
 8003a0c:	40020488 	.word	0x40020488
 8003a10:	400204a0 	.word	0x400204a0
 8003a14:	400204b8 	.word	0x400204b8
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d032      	beq.n	8003a84 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f002 fa8a 	bl	8005f38 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b80      	cmp	r3, #128	@ 0x80
 8003a2a:	d102      	bne.n	8003a32 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a46:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d010      	beq.n	8003a72 <HAL_DMA_Init+0x6f2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d80c      	bhi.n	8003a72 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f002 fb07 	bl	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	e008      	b.n	8003a84 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e226      	b.n	8003f06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_DMA_Start_IT+0x2a>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e21f      	b.n	8003f06 <HAL_DMA_Start_IT+0x46a>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	f040 820a 	bne.w	8003ef0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a68      	ldr	r2, [pc, #416]	@ (8003c90 <HAL_DMA_Start_IT+0x1f4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d04a      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a66      	ldr	r2, [pc, #408]	@ (8003c94 <HAL_DMA_Start_IT+0x1f8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d045      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a65      	ldr	r2, [pc, #404]	@ (8003c98 <HAL_DMA_Start_IT+0x1fc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d040      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a63      	ldr	r2, [pc, #396]	@ (8003c9c <HAL_DMA_Start_IT+0x200>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d03b      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a62      	ldr	r2, [pc, #392]	@ (8003ca0 <HAL_DMA_Start_IT+0x204>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d036      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a60      	ldr	r2, [pc, #384]	@ (8003ca4 <HAL_DMA_Start_IT+0x208>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d031      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a5f      	ldr	r2, [pc, #380]	@ (8003ca8 <HAL_DMA_Start_IT+0x20c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d02c      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a5d      	ldr	r2, [pc, #372]	@ (8003cac <HAL_DMA_Start_IT+0x210>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d027      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003cb0 <HAL_DMA_Start_IT+0x214>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d022      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb4 <HAL_DMA_Start_IT+0x218>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01d      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a59      	ldr	r2, [pc, #356]	@ (8003cb8 <HAL_DMA_Start_IT+0x21c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d018      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a57      	ldr	r2, [pc, #348]	@ (8003cbc <HAL_DMA_Start_IT+0x220>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a56      	ldr	r2, [pc, #344]	@ (8003cc0 <HAL_DMA_Start_IT+0x224>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a54      	ldr	r2, [pc, #336]	@ (8003cc4 <HAL_DMA_Start_IT+0x228>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d009      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a53      	ldr	r2, [pc, #332]	@ (8003cc8 <HAL_DMA_Start_IT+0x22c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_DMA_Start_IT+0xee>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a51      	ldr	r2, [pc, #324]	@ (8003ccc <HAL_DMA_Start_IT+0x230>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d108      	bne.n	8003b9c <HAL_DMA_Start_IT+0x100>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	e007      	b.n	8003bac <HAL_DMA_Start_IT+0x110>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f001 feae 	bl	8005914 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a34      	ldr	r2, [pc, #208]	@ (8003c90 <HAL_DMA_Start_IT+0x1f4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d04a      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a33      	ldr	r2, [pc, #204]	@ (8003c94 <HAL_DMA_Start_IT+0x1f8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d045      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a31      	ldr	r2, [pc, #196]	@ (8003c98 <HAL_DMA_Start_IT+0x1fc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d040      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a30      	ldr	r2, [pc, #192]	@ (8003c9c <HAL_DMA_Start_IT+0x200>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d03b      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2e      	ldr	r2, [pc, #184]	@ (8003ca0 <HAL_DMA_Start_IT+0x204>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d036      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca4 <HAL_DMA_Start_IT+0x208>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d031      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca8 <HAL_DMA_Start_IT+0x20c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d02c      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a2a      	ldr	r2, [pc, #168]	@ (8003cac <HAL_DMA_Start_IT+0x210>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d027      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a28      	ldr	r2, [pc, #160]	@ (8003cb0 <HAL_DMA_Start_IT+0x214>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d022      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a27      	ldr	r2, [pc, #156]	@ (8003cb4 <HAL_DMA_Start_IT+0x218>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01d      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a25      	ldr	r2, [pc, #148]	@ (8003cb8 <HAL_DMA_Start_IT+0x21c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d018      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a24      	ldr	r2, [pc, #144]	@ (8003cbc <HAL_DMA_Start_IT+0x220>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a22      	ldr	r2, [pc, #136]	@ (8003cc0 <HAL_DMA_Start_IT+0x224>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00e      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a21      	ldr	r2, [pc, #132]	@ (8003cc4 <HAL_DMA_Start_IT+0x228>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc8 <HAL_DMA_Start_IT+0x22c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_DMA_Start_IT+0x1bc>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1e      	ldr	r2, [pc, #120]	@ (8003ccc <HAL_DMA_Start_IT+0x230>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_DMA_Start_IT+0x1c0>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_DMA_Start_IT+0x1c2>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d036      	beq.n	8003cd0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 021e 	bic.w	r2, r3, #30
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0216 	orr.w	r2, r2, #22
 8003c74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d03e      	beq.n	8003cfc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0208 	orr.w	r2, r2, #8
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e035      	b.n	8003cfc <HAL_DMA_Start_IT+0x260>
 8003c90:	40020010 	.word	0x40020010
 8003c94:	40020028 	.word	0x40020028
 8003c98:	40020040 	.word	0x40020040
 8003c9c:	40020058 	.word	0x40020058
 8003ca0:	40020070 	.word	0x40020070
 8003ca4:	40020088 	.word	0x40020088
 8003ca8:	400200a0 	.word	0x400200a0
 8003cac:	400200b8 	.word	0x400200b8
 8003cb0:	40020410 	.word	0x40020410
 8003cb4:	40020428 	.word	0x40020428
 8003cb8:	40020440 	.word	0x40020440
 8003cbc:	40020458 	.word	0x40020458
 8003cc0:	40020470 	.word	0x40020470
 8003cc4:	40020488 	.word	0x40020488
 8003cc8:	400204a0 	.word	0x400204a0
 8003ccc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 020e 	bic.w	r2, r3, #14
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 020a 	orr.w	r2, r2, #10
 8003ce2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0204 	orr.w	r2, r2, #4
 8003cfa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a83      	ldr	r2, [pc, #524]	@ (8003f10 <HAL_DMA_Start_IT+0x474>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d072      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a82      	ldr	r2, [pc, #520]	@ (8003f14 <HAL_DMA_Start_IT+0x478>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d06d      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a80      	ldr	r2, [pc, #512]	@ (8003f18 <HAL_DMA_Start_IT+0x47c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d068      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a7f      	ldr	r2, [pc, #508]	@ (8003f1c <HAL_DMA_Start_IT+0x480>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d063      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a7d      	ldr	r2, [pc, #500]	@ (8003f20 <HAL_DMA_Start_IT+0x484>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d05e      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a7c      	ldr	r2, [pc, #496]	@ (8003f24 <HAL_DMA_Start_IT+0x488>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d059      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a7a      	ldr	r2, [pc, #488]	@ (8003f28 <HAL_DMA_Start_IT+0x48c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d054      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a79      	ldr	r2, [pc, #484]	@ (8003f2c <HAL_DMA_Start_IT+0x490>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d04f      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a77      	ldr	r2, [pc, #476]	@ (8003f30 <HAL_DMA_Start_IT+0x494>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d04a      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a76      	ldr	r2, [pc, #472]	@ (8003f34 <HAL_DMA_Start_IT+0x498>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d045      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a74      	ldr	r2, [pc, #464]	@ (8003f38 <HAL_DMA_Start_IT+0x49c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d040      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a73      	ldr	r2, [pc, #460]	@ (8003f3c <HAL_DMA_Start_IT+0x4a0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d03b      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a71      	ldr	r2, [pc, #452]	@ (8003f40 <HAL_DMA_Start_IT+0x4a4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d036      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a70      	ldr	r2, [pc, #448]	@ (8003f44 <HAL_DMA_Start_IT+0x4a8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d031      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a6e      	ldr	r2, [pc, #440]	@ (8003f48 <HAL_DMA_Start_IT+0x4ac>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d02c      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a6d      	ldr	r2, [pc, #436]	@ (8003f4c <HAL_DMA_Start_IT+0x4b0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d027      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a6b      	ldr	r2, [pc, #428]	@ (8003f50 <HAL_DMA_Start_IT+0x4b4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d022      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a6a      	ldr	r2, [pc, #424]	@ (8003f54 <HAL_DMA_Start_IT+0x4b8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d01d      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a68      	ldr	r2, [pc, #416]	@ (8003f58 <HAL_DMA_Start_IT+0x4bc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d018      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a67      	ldr	r2, [pc, #412]	@ (8003f5c <HAL_DMA_Start_IT+0x4c0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a65      	ldr	r2, [pc, #404]	@ (8003f60 <HAL_DMA_Start_IT+0x4c4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00e      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a64      	ldr	r2, [pc, #400]	@ (8003f64 <HAL_DMA_Start_IT+0x4c8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d009      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a62      	ldr	r2, [pc, #392]	@ (8003f68 <HAL_DMA_Start_IT+0x4cc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d004      	beq.n	8003dec <HAL_DMA_Start_IT+0x350>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a61      	ldr	r2, [pc, #388]	@ (8003f6c <HAL_DMA_Start_IT+0x4d0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d101      	bne.n	8003df0 <HAL_DMA_Start_IT+0x354>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_DMA_Start_IT+0x356>
 8003df0:	2300      	movs	r3, #0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01a      	beq.n	8003e2c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a37      	ldr	r2, [pc, #220]	@ (8003f10 <HAL_DMA_Start_IT+0x474>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d04a      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a36      	ldr	r2, [pc, #216]	@ (8003f14 <HAL_DMA_Start_IT+0x478>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d045      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a34      	ldr	r2, [pc, #208]	@ (8003f18 <HAL_DMA_Start_IT+0x47c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d040      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a33      	ldr	r2, [pc, #204]	@ (8003f1c <HAL_DMA_Start_IT+0x480>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d03b      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a31      	ldr	r2, [pc, #196]	@ (8003f20 <HAL_DMA_Start_IT+0x484>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d036      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a30      	ldr	r2, [pc, #192]	@ (8003f24 <HAL_DMA_Start_IT+0x488>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d031      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f28 <HAL_DMA_Start_IT+0x48c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02c      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2d      	ldr	r2, [pc, #180]	@ (8003f2c <HAL_DMA_Start_IT+0x490>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d027      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2b      	ldr	r2, [pc, #172]	@ (8003f30 <HAL_DMA_Start_IT+0x494>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d022      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f34 <HAL_DMA_Start_IT+0x498>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d01d      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a28      	ldr	r2, [pc, #160]	@ (8003f38 <HAL_DMA_Start_IT+0x49c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d018      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a27      	ldr	r2, [pc, #156]	@ (8003f3c <HAL_DMA_Start_IT+0x4a0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	@ (8003f40 <HAL_DMA_Start_IT+0x4a4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a24      	ldr	r2, [pc, #144]	@ (8003f44 <HAL_DMA_Start_IT+0x4a8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d009      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	@ (8003f48 <HAL_DMA_Start_IT+0x4ac>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_DMA_Start_IT+0x430>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a21      	ldr	r2, [pc, #132]	@ (8003f4c <HAL_DMA_Start_IT+0x4b0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d108      	bne.n	8003ede <HAL_DMA_Start_IT+0x442>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e012      	b.n	8003f04 <HAL_DMA_Start_IT+0x468>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e009      	b.n	8003f04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ef6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40020010 	.word	0x40020010
 8003f14:	40020028 	.word	0x40020028
 8003f18:	40020040 	.word	0x40020040
 8003f1c:	40020058 	.word	0x40020058
 8003f20:	40020070 	.word	0x40020070
 8003f24:	40020088 	.word	0x40020088
 8003f28:	400200a0 	.word	0x400200a0
 8003f2c:	400200b8 	.word	0x400200b8
 8003f30:	40020410 	.word	0x40020410
 8003f34:	40020428 	.word	0x40020428
 8003f38:	40020440 	.word	0x40020440
 8003f3c:	40020458 	.word	0x40020458
 8003f40:	40020470 	.word	0x40020470
 8003f44:	40020488 	.word	0x40020488
 8003f48:	400204a0 	.word	0x400204a0
 8003f4c:	400204b8 	.word	0x400204b8
 8003f50:	58025408 	.word	0x58025408
 8003f54:	5802541c 	.word	0x5802541c
 8003f58:	58025430 	.word	0x58025430
 8003f5c:	58025444 	.word	0x58025444
 8003f60:	58025458 	.word	0x58025458
 8003f64:	5802546c 	.word	0x5802546c
 8003f68:	58025480 	.word	0x58025480
 8003f6c:	58025494 	.word	0x58025494

08003f70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003f78:	f7ff f84a 	bl	8003010 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e2dc      	b.n	8004542 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d008      	beq.n	8003fa6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2280      	movs	r2, #128	@ 0x80
 8003f98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e2cd      	b.n	8004542 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a76      	ldr	r2, [pc, #472]	@ (8004184 <HAL_DMA_Abort+0x214>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a74      	ldr	r2, [pc, #464]	@ (8004188 <HAL_DMA_Abort+0x218>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a73      	ldr	r2, [pc, #460]	@ (800418c <HAL_DMA_Abort+0x21c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a71      	ldr	r2, [pc, #452]	@ (8004190 <HAL_DMA_Abort+0x220>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a70      	ldr	r2, [pc, #448]	@ (8004194 <HAL_DMA_Abort+0x224>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8004198 <HAL_DMA_Abort+0x228>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6d      	ldr	r2, [pc, #436]	@ (800419c <HAL_DMA_Abort+0x22c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a6b      	ldr	r2, [pc, #428]	@ (80041a0 <HAL_DMA_Abort+0x230>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6a      	ldr	r2, [pc, #424]	@ (80041a4 <HAL_DMA_Abort+0x234>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a68      	ldr	r2, [pc, #416]	@ (80041a8 <HAL_DMA_Abort+0x238>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a67      	ldr	r2, [pc, #412]	@ (80041ac <HAL_DMA_Abort+0x23c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a65      	ldr	r2, [pc, #404]	@ (80041b0 <HAL_DMA_Abort+0x240>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a64      	ldr	r2, [pc, #400]	@ (80041b4 <HAL_DMA_Abort+0x244>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a62      	ldr	r2, [pc, #392]	@ (80041b8 <HAL_DMA_Abort+0x248>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a61      	ldr	r2, [pc, #388]	@ (80041bc <HAL_DMA_Abort+0x24c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_Abort+0xd6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a5f      	ldr	r2, [pc, #380]	@ (80041c0 <HAL_DMA_Abort+0x250>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_DMA_Abort+0xda>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_DMA_Abort+0xdc>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d013      	beq.n	8004078 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 021e 	bic.w	r2, r2, #30
 800405e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800406e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e00a      	b.n	800408e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 020e 	bic.w	r2, r2, #14
 8004086:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a3c      	ldr	r2, [pc, #240]	@ (8004184 <HAL_DMA_Abort+0x214>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d072      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3a      	ldr	r2, [pc, #232]	@ (8004188 <HAL_DMA_Abort+0x218>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d06d      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a39      	ldr	r2, [pc, #228]	@ (800418c <HAL_DMA_Abort+0x21c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d068      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a37      	ldr	r2, [pc, #220]	@ (8004190 <HAL_DMA_Abort+0x220>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d063      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a36      	ldr	r2, [pc, #216]	@ (8004194 <HAL_DMA_Abort+0x224>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d05e      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a34      	ldr	r2, [pc, #208]	@ (8004198 <HAL_DMA_Abort+0x228>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d059      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a33      	ldr	r2, [pc, #204]	@ (800419c <HAL_DMA_Abort+0x22c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d054      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a31      	ldr	r2, [pc, #196]	@ (80041a0 <HAL_DMA_Abort+0x230>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d04f      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a30      	ldr	r2, [pc, #192]	@ (80041a4 <HAL_DMA_Abort+0x234>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d04a      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2e      	ldr	r2, [pc, #184]	@ (80041a8 <HAL_DMA_Abort+0x238>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d045      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2d      	ldr	r2, [pc, #180]	@ (80041ac <HAL_DMA_Abort+0x23c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d040      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2b      	ldr	r2, [pc, #172]	@ (80041b0 <HAL_DMA_Abort+0x240>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d03b      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2a      	ldr	r2, [pc, #168]	@ (80041b4 <HAL_DMA_Abort+0x244>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d036      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a28      	ldr	r2, [pc, #160]	@ (80041b8 <HAL_DMA_Abort+0x248>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d031      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a27      	ldr	r2, [pc, #156]	@ (80041bc <HAL_DMA_Abort+0x24c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d02c      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a25      	ldr	r2, [pc, #148]	@ (80041c0 <HAL_DMA_Abort+0x250>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d027      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a24      	ldr	r2, [pc, #144]	@ (80041c4 <HAL_DMA_Abort+0x254>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d022      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a22      	ldr	r2, [pc, #136]	@ (80041c8 <HAL_DMA_Abort+0x258>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01d      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a21      	ldr	r2, [pc, #132]	@ (80041cc <HAL_DMA_Abort+0x25c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d018      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1f      	ldr	r2, [pc, #124]	@ (80041d0 <HAL_DMA_Abort+0x260>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1e      	ldr	r2, [pc, #120]	@ (80041d4 <HAL_DMA_Abort+0x264>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00e      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1c      	ldr	r2, [pc, #112]	@ (80041d8 <HAL_DMA_Abort+0x268>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1b      	ldr	r2, [pc, #108]	@ (80041dc <HAL_DMA_Abort+0x26c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_DMA_Abort+0x20e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a19      	ldr	r2, [pc, #100]	@ (80041e0 <HAL_DMA_Abort+0x270>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d132      	bne.n	80041e4 <HAL_DMA_Abort+0x274>
 800417e:	2301      	movs	r3, #1
 8004180:	e031      	b.n	80041e6 <HAL_DMA_Abort+0x276>
 8004182:	bf00      	nop
 8004184:	40020010 	.word	0x40020010
 8004188:	40020028 	.word	0x40020028
 800418c:	40020040 	.word	0x40020040
 8004190:	40020058 	.word	0x40020058
 8004194:	40020070 	.word	0x40020070
 8004198:	40020088 	.word	0x40020088
 800419c:	400200a0 	.word	0x400200a0
 80041a0:	400200b8 	.word	0x400200b8
 80041a4:	40020410 	.word	0x40020410
 80041a8:	40020428 	.word	0x40020428
 80041ac:	40020440 	.word	0x40020440
 80041b0:	40020458 	.word	0x40020458
 80041b4:	40020470 	.word	0x40020470
 80041b8:	40020488 	.word	0x40020488
 80041bc:	400204a0 	.word	0x400204a0
 80041c0:	400204b8 	.word	0x400204b8
 80041c4:	58025408 	.word	0x58025408
 80041c8:	5802541c 	.word	0x5802541c
 80041cc:	58025430 	.word	0x58025430
 80041d0:	58025444 	.word	0x58025444
 80041d4:	58025458 	.word	0x58025458
 80041d8:	5802546c 	.word	0x5802546c
 80041dc:	58025480 	.word	0x58025480
 80041e0:	58025494 	.word	0x58025494
 80041e4:	2300      	movs	r3, #0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a6d      	ldr	r2, [pc, #436]	@ (80043b4 <HAL_DMA_Abort+0x444>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d04a      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6b      	ldr	r2, [pc, #428]	@ (80043b8 <HAL_DMA_Abort+0x448>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d045      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a6a      	ldr	r2, [pc, #424]	@ (80043bc <HAL_DMA_Abort+0x44c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d040      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a68      	ldr	r2, [pc, #416]	@ (80043c0 <HAL_DMA_Abort+0x450>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d03b      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a67      	ldr	r2, [pc, #412]	@ (80043c4 <HAL_DMA_Abort+0x454>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d036      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a65      	ldr	r2, [pc, #404]	@ (80043c8 <HAL_DMA_Abort+0x458>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d031      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a64      	ldr	r2, [pc, #400]	@ (80043cc <HAL_DMA_Abort+0x45c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d02c      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a62      	ldr	r2, [pc, #392]	@ (80043d0 <HAL_DMA_Abort+0x460>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d027      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a61      	ldr	r2, [pc, #388]	@ (80043d4 <HAL_DMA_Abort+0x464>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d022      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5f      	ldr	r2, [pc, #380]	@ (80043d8 <HAL_DMA_Abort+0x468>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01d      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a5e      	ldr	r2, [pc, #376]	@ (80043dc <HAL_DMA_Abort+0x46c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d018      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a5c      	ldr	r2, [pc, #368]	@ (80043e0 <HAL_DMA_Abort+0x470>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a5b      	ldr	r2, [pc, #364]	@ (80043e4 <HAL_DMA_Abort+0x474>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00e      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a59      	ldr	r2, [pc, #356]	@ (80043e8 <HAL_DMA_Abort+0x478>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a58      	ldr	r2, [pc, #352]	@ (80043ec <HAL_DMA_Abort+0x47c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_DMA_Abort+0x32a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a56      	ldr	r2, [pc, #344]	@ (80043f0 <HAL_DMA_Abort+0x480>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <HAL_DMA_Abort+0x33c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e007      	b.n	80042bc <HAL_DMA_Abort+0x34c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042bc:	e013      	b.n	80042e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042be:	f7fe fea7 	bl	8003010 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d90c      	bls.n	80042e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2203      	movs	r2, #3
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e12d      	b.n	8004542 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2f      	ldr	r2, [pc, #188]	@ (80043b4 <HAL_DMA_Abort+0x444>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d04a      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	@ (80043b8 <HAL_DMA_Abort+0x448>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d045      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2c      	ldr	r2, [pc, #176]	@ (80043bc <HAL_DMA_Abort+0x44c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d040      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2a      	ldr	r2, [pc, #168]	@ (80043c0 <HAL_DMA_Abort+0x450>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d03b      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a29      	ldr	r2, [pc, #164]	@ (80043c4 <HAL_DMA_Abort+0x454>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d036      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a27      	ldr	r2, [pc, #156]	@ (80043c8 <HAL_DMA_Abort+0x458>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d031      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a26      	ldr	r2, [pc, #152]	@ (80043cc <HAL_DMA_Abort+0x45c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d02c      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a24      	ldr	r2, [pc, #144]	@ (80043d0 <HAL_DMA_Abort+0x460>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d027      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a23      	ldr	r2, [pc, #140]	@ (80043d4 <HAL_DMA_Abort+0x464>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a21      	ldr	r2, [pc, #132]	@ (80043d8 <HAL_DMA_Abort+0x468>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01d      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a20      	ldr	r2, [pc, #128]	@ (80043dc <HAL_DMA_Abort+0x46c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d018      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1e      	ldr	r2, [pc, #120]	@ (80043e0 <HAL_DMA_Abort+0x470>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1d      	ldr	r2, [pc, #116]	@ (80043e4 <HAL_DMA_Abort+0x474>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1b      	ldr	r2, [pc, #108]	@ (80043e8 <HAL_DMA_Abort+0x478>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1a      	ldr	r2, [pc, #104]	@ (80043ec <HAL_DMA_Abort+0x47c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_DMA_Abort+0x422>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a18      	ldr	r2, [pc, #96]	@ (80043f0 <HAL_DMA_Abort+0x480>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_DMA_Abort+0x426>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_DMA_Abort+0x428>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02b      	beq.n	80043f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	223f      	movs	r2, #63	@ 0x3f
 80043ac:	409a      	lsls	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	609a      	str	r2, [r3, #8]
 80043b2:	e02a      	b.n	800440a <HAL_DMA_Abort+0x49a>
 80043b4:	40020010 	.word	0x40020010
 80043b8:	40020028 	.word	0x40020028
 80043bc:	40020040 	.word	0x40020040
 80043c0:	40020058 	.word	0x40020058
 80043c4:	40020070 	.word	0x40020070
 80043c8:	40020088 	.word	0x40020088
 80043cc:	400200a0 	.word	0x400200a0
 80043d0:	400200b8 	.word	0x400200b8
 80043d4:	40020410 	.word	0x40020410
 80043d8:	40020428 	.word	0x40020428
 80043dc:	40020440 	.word	0x40020440
 80043e0:	40020458 	.word	0x40020458
 80043e4:	40020470 	.word	0x40020470
 80043e8:	40020488 	.word	0x40020488
 80043ec:	400204a0 	.word	0x400204a0
 80043f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2201      	movs	r2, #1
 8004404:	409a      	lsls	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a4f      	ldr	r2, [pc, #316]	@ (800454c <HAL_DMA_Abort+0x5dc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d072      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a4d      	ldr	r2, [pc, #308]	@ (8004550 <HAL_DMA_Abort+0x5e0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d06d      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a4c      	ldr	r2, [pc, #304]	@ (8004554 <HAL_DMA_Abort+0x5e4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d068      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a4a      	ldr	r2, [pc, #296]	@ (8004558 <HAL_DMA_Abort+0x5e8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d063      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a49      	ldr	r2, [pc, #292]	@ (800455c <HAL_DMA_Abort+0x5ec>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d05e      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a47      	ldr	r2, [pc, #284]	@ (8004560 <HAL_DMA_Abort+0x5f0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d059      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a46      	ldr	r2, [pc, #280]	@ (8004564 <HAL_DMA_Abort+0x5f4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d054      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a44      	ldr	r2, [pc, #272]	@ (8004568 <HAL_DMA_Abort+0x5f8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d04f      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a43      	ldr	r2, [pc, #268]	@ (800456c <HAL_DMA_Abort+0x5fc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d04a      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a41      	ldr	r2, [pc, #260]	@ (8004570 <HAL_DMA_Abort+0x600>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d045      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a40      	ldr	r2, [pc, #256]	@ (8004574 <HAL_DMA_Abort+0x604>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d040      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a3e      	ldr	r2, [pc, #248]	@ (8004578 <HAL_DMA_Abort+0x608>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d03b      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3d      	ldr	r2, [pc, #244]	@ (800457c <HAL_DMA_Abort+0x60c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d036      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a3b      	ldr	r2, [pc, #236]	@ (8004580 <HAL_DMA_Abort+0x610>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d031      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3a      	ldr	r2, [pc, #232]	@ (8004584 <HAL_DMA_Abort+0x614>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d02c      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a38      	ldr	r2, [pc, #224]	@ (8004588 <HAL_DMA_Abort+0x618>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d027      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a37      	ldr	r2, [pc, #220]	@ (800458c <HAL_DMA_Abort+0x61c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d022      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a35      	ldr	r2, [pc, #212]	@ (8004590 <HAL_DMA_Abort+0x620>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01d      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a34      	ldr	r2, [pc, #208]	@ (8004594 <HAL_DMA_Abort+0x624>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d018      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a32      	ldr	r2, [pc, #200]	@ (8004598 <HAL_DMA_Abort+0x628>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d013      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a31      	ldr	r2, [pc, #196]	@ (800459c <HAL_DMA_Abort+0x62c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00e      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2f      	ldr	r2, [pc, #188]	@ (80045a0 <HAL_DMA_Abort+0x630>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d009      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2e      	ldr	r2, [pc, #184]	@ (80045a4 <HAL_DMA_Abort+0x634>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d004      	beq.n	80044fa <HAL_DMA_Abort+0x58a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2c      	ldr	r2, [pc, #176]	@ (80045a8 <HAL_DMA_Abort+0x638>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <HAL_DMA_Abort+0x58e>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <HAL_DMA_Abort+0x590>
 80044fe:	2300      	movs	r3, #0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800450c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00c      	beq.n	8004530 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004520:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004524:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800452e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40020010 	.word	0x40020010
 8004550:	40020028 	.word	0x40020028
 8004554:	40020040 	.word	0x40020040
 8004558:	40020058 	.word	0x40020058
 800455c:	40020070 	.word	0x40020070
 8004560:	40020088 	.word	0x40020088
 8004564:	400200a0 	.word	0x400200a0
 8004568:	400200b8 	.word	0x400200b8
 800456c:	40020410 	.word	0x40020410
 8004570:	40020428 	.word	0x40020428
 8004574:	40020440 	.word	0x40020440
 8004578:	40020458 	.word	0x40020458
 800457c:	40020470 	.word	0x40020470
 8004580:	40020488 	.word	0x40020488
 8004584:	400204a0 	.word	0x400204a0
 8004588:	400204b8 	.word	0x400204b8
 800458c:	58025408 	.word	0x58025408
 8004590:	5802541c 	.word	0x5802541c
 8004594:	58025430 	.word	0x58025430
 8004598:	58025444 	.word	0x58025444
 800459c:	58025458 	.word	0x58025458
 80045a0:	5802546c 	.word	0x5802546c
 80045a4:	58025480 	.word	0x58025480
 80045a8:	58025494 	.word	0x58025494

080045ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e237      	b.n	8004a2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d004      	beq.n	80045d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2280      	movs	r2, #128	@ 0x80
 80045ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e22c      	b.n	8004a2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a5c      	ldr	r2, [pc, #368]	@ (800474c <HAL_DMA_Abort_IT+0x1a0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d04a      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004750 <HAL_DMA_Abort_IT+0x1a4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d045      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a59      	ldr	r2, [pc, #356]	@ (8004754 <HAL_DMA_Abort_IT+0x1a8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d040      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a58      	ldr	r2, [pc, #352]	@ (8004758 <HAL_DMA_Abort_IT+0x1ac>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d03b      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a56      	ldr	r2, [pc, #344]	@ (800475c <HAL_DMA_Abort_IT+0x1b0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d036      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a55      	ldr	r2, [pc, #340]	@ (8004760 <HAL_DMA_Abort_IT+0x1b4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d031      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a53      	ldr	r2, [pc, #332]	@ (8004764 <HAL_DMA_Abort_IT+0x1b8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d02c      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a52      	ldr	r2, [pc, #328]	@ (8004768 <HAL_DMA_Abort_IT+0x1bc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d027      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a50      	ldr	r2, [pc, #320]	@ (800476c <HAL_DMA_Abort_IT+0x1c0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d022      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a4f      	ldr	r2, [pc, #316]	@ (8004770 <HAL_DMA_Abort_IT+0x1c4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01d      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a4d      	ldr	r2, [pc, #308]	@ (8004774 <HAL_DMA_Abort_IT+0x1c8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d018      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a4c      	ldr	r2, [pc, #304]	@ (8004778 <HAL_DMA_Abort_IT+0x1cc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d013      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a4a      	ldr	r2, [pc, #296]	@ (800477c <HAL_DMA_Abort_IT+0x1d0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00e      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a49      	ldr	r2, [pc, #292]	@ (8004780 <HAL_DMA_Abort_IT+0x1d4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d009      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a47      	ldr	r2, [pc, #284]	@ (8004784 <HAL_DMA_Abort_IT+0x1d8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_DMA_Abort_IT+0xc8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a46      	ldr	r2, [pc, #280]	@ (8004788 <HAL_DMA_Abort_IT+0x1dc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d101      	bne.n	8004678 <HAL_DMA_Abort_IT+0xcc>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <HAL_DMA_Abort_IT+0xce>
 8004678:	2300      	movs	r3, #0
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 8086 	beq.w	800478c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2204      	movs	r2, #4
 8004684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2f      	ldr	r2, [pc, #188]	@ (800474c <HAL_DMA_Abort_IT+0x1a0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d04a      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2e      	ldr	r2, [pc, #184]	@ (8004750 <HAL_DMA_Abort_IT+0x1a4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d045      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004754 <HAL_DMA_Abort_IT+0x1a8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d040      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004758 <HAL_DMA_Abort_IT+0x1ac>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d03b      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a29      	ldr	r2, [pc, #164]	@ (800475c <HAL_DMA_Abort_IT+0x1b0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d036      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a28      	ldr	r2, [pc, #160]	@ (8004760 <HAL_DMA_Abort_IT+0x1b4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d031      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a26      	ldr	r2, [pc, #152]	@ (8004764 <HAL_DMA_Abort_IT+0x1b8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02c      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a25      	ldr	r2, [pc, #148]	@ (8004768 <HAL_DMA_Abort_IT+0x1bc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d027      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a23      	ldr	r2, [pc, #140]	@ (800476c <HAL_DMA_Abort_IT+0x1c0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d022      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a22      	ldr	r2, [pc, #136]	@ (8004770 <HAL_DMA_Abort_IT+0x1c4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d01d      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a20      	ldr	r2, [pc, #128]	@ (8004774 <HAL_DMA_Abort_IT+0x1c8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d018      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004778 <HAL_DMA_Abort_IT+0x1cc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d013      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1d      	ldr	r2, [pc, #116]	@ (800477c <HAL_DMA_Abort_IT+0x1d0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00e      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1c      	ldr	r2, [pc, #112]	@ (8004780 <HAL_DMA_Abort_IT+0x1d4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d009      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1a      	ldr	r2, [pc, #104]	@ (8004784 <HAL_DMA_Abort_IT+0x1d8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_DMA_Abort_IT+0x17c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a19      	ldr	r2, [pc, #100]	@ (8004788 <HAL_DMA_Abort_IT+0x1dc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d108      	bne.n	800473a <HAL_DMA_Abort_IT+0x18e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e178      	b.n	8004a2c <HAL_DMA_Abort_IT+0x480>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e16f      	b.n	8004a2c <HAL_DMA_Abort_IT+0x480>
 800474c:	40020010 	.word	0x40020010
 8004750:	40020028 	.word	0x40020028
 8004754:	40020040 	.word	0x40020040
 8004758:	40020058 	.word	0x40020058
 800475c:	40020070 	.word	0x40020070
 8004760:	40020088 	.word	0x40020088
 8004764:	400200a0 	.word	0x400200a0
 8004768:	400200b8 	.word	0x400200b8
 800476c:	40020410 	.word	0x40020410
 8004770:	40020428 	.word	0x40020428
 8004774:	40020440 	.word	0x40020440
 8004778:	40020458 	.word	0x40020458
 800477c:	40020470 	.word	0x40020470
 8004780:	40020488 	.word	0x40020488
 8004784:	400204a0 	.word	0x400204a0
 8004788:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 020e 	bic.w	r2, r2, #14
 800479a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a6c      	ldr	r2, [pc, #432]	@ (8004954 <HAL_DMA_Abort_IT+0x3a8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d04a      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004958 <HAL_DMA_Abort_IT+0x3ac>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d045      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a69      	ldr	r2, [pc, #420]	@ (800495c <HAL_DMA_Abort_IT+0x3b0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d040      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a68      	ldr	r2, [pc, #416]	@ (8004960 <HAL_DMA_Abort_IT+0x3b4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d03b      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a66      	ldr	r2, [pc, #408]	@ (8004964 <HAL_DMA_Abort_IT+0x3b8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d036      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a65      	ldr	r2, [pc, #404]	@ (8004968 <HAL_DMA_Abort_IT+0x3bc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d031      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a63      	ldr	r2, [pc, #396]	@ (800496c <HAL_DMA_Abort_IT+0x3c0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d02c      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a62      	ldr	r2, [pc, #392]	@ (8004970 <HAL_DMA_Abort_IT+0x3c4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d027      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a60      	ldr	r2, [pc, #384]	@ (8004974 <HAL_DMA_Abort_IT+0x3c8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d022      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a5f      	ldr	r2, [pc, #380]	@ (8004978 <HAL_DMA_Abort_IT+0x3cc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d01d      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a5d      	ldr	r2, [pc, #372]	@ (800497c <HAL_DMA_Abort_IT+0x3d0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a5c      	ldr	r2, [pc, #368]	@ (8004980 <HAL_DMA_Abort_IT+0x3d4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a5a      	ldr	r2, [pc, #360]	@ (8004984 <HAL_DMA_Abort_IT+0x3d8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a59      	ldr	r2, [pc, #356]	@ (8004988 <HAL_DMA_Abort_IT+0x3dc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a57      	ldr	r2, [pc, #348]	@ (800498c <HAL_DMA_Abort_IT+0x3e0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_DMA_Abort_IT+0x290>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a56      	ldr	r2, [pc, #344]	@ (8004990 <HAL_DMA_Abort_IT+0x3e4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d108      	bne.n	800484e <HAL_DMA_Abort_IT+0x2a2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e007      	b.n	800485e <HAL_DMA_Abort_IT+0x2b2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a3c      	ldr	r2, [pc, #240]	@ (8004954 <HAL_DMA_Abort_IT+0x3a8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d072      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a3a      	ldr	r2, [pc, #232]	@ (8004958 <HAL_DMA_Abort_IT+0x3ac>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d06d      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a39      	ldr	r2, [pc, #228]	@ (800495c <HAL_DMA_Abort_IT+0x3b0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d068      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a37      	ldr	r2, [pc, #220]	@ (8004960 <HAL_DMA_Abort_IT+0x3b4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d063      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a36      	ldr	r2, [pc, #216]	@ (8004964 <HAL_DMA_Abort_IT+0x3b8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d05e      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a34      	ldr	r2, [pc, #208]	@ (8004968 <HAL_DMA_Abort_IT+0x3bc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d059      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a33      	ldr	r2, [pc, #204]	@ (800496c <HAL_DMA_Abort_IT+0x3c0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d054      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a31      	ldr	r2, [pc, #196]	@ (8004970 <HAL_DMA_Abort_IT+0x3c4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d04f      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a30      	ldr	r2, [pc, #192]	@ (8004974 <HAL_DMA_Abort_IT+0x3c8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d04a      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004978 <HAL_DMA_Abort_IT+0x3cc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d045      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2d      	ldr	r2, [pc, #180]	@ (800497c <HAL_DMA_Abort_IT+0x3d0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d040      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004980 <HAL_DMA_Abort_IT+0x3d4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d03b      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a2a      	ldr	r2, [pc, #168]	@ (8004984 <HAL_DMA_Abort_IT+0x3d8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d036      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a28      	ldr	r2, [pc, #160]	@ (8004988 <HAL_DMA_Abort_IT+0x3dc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d031      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a27      	ldr	r2, [pc, #156]	@ (800498c <HAL_DMA_Abort_IT+0x3e0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d02c      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a25      	ldr	r2, [pc, #148]	@ (8004990 <HAL_DMA_Abort_IT+0x3e4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d027      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a24      	ldr	r2, [pc, #144]	@ (8004994 <HAL_DMA_Abort_IT+0x3e8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d022      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a22      	ldr	r2, [pc, #136]	@ (8004998 <HAL_DMA_Abort_IT+0x3ec>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d01d      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a21      	ldr	r2, [pc, #132]	@ (800499c <HAL_DMA_Abort_IT+0x3f0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d018      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1f      	ldr	r2, [pc, #124]	@ (80049a0 <HAL_DMA_Abort_IT+0x3f4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1e      	ldr	r2, [pc, #120]	@ (80049a4 <HAL_DMA_Abort_IT+0x3f8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00e      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1c      	ldr	r2, [pc, #112]	@ (80049a8 <HAL_DMA_Abort_IT+0x3fc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d009      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1b      	ldr	r2, [pc, #108]	@ (80049ac <HAL_DMA_Abort_IT+0x400>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_DMA_Abort_IT+0x3a2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a19      	ldr	r2, [pc, #100]	@ (80049b0 <HAL_DMA_Abort_IT+0x404>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d132      	bne.n	80049b4 <HAL_DMA_Abort_IT+0x408>
 800494e:	2301      	movs	r3, #1
 8004950:	e031      	b.n	80049b6 <HAL_DMA_Abort_IT+0x40a>
 8004952:	bf00      	nop
 8004954:	40020010 	.word	0x40020010
 8004958:	40020028 	.word	0x40020028
 800495c:	40020040 	.word	0x40020040
 8004960:	40020058 	.word	0x40020058
 8004964:	40020070 	.word	0x40020070
 8004968:	40020088 	.word	0x40020088
 800496c:	400200a0 	.word	0x400200a0
 8004970:	400200b8 	.word	0x400200b8
 8004974:	40020410 	.word	0x40020410
 8004978:	40020428 	.word	0x40020428
 800497c:	40020440 	.word	0x40020440
 8004980:	40020458 	.word	0x40020458
 8004984:	40020470 	.word	0x40020470
 8004988:	40020488 	.word	0x40020488
 800498c:	400204a0 	.word	0x400204a0
 8004990:	400204b8 	.word	0x400204b8
 8004994:	58025408 	.word	0x58025408
 8004998:	5802541c 	.word	0x5802541c
 800499c:	58025430 	.word	0x58025430
 80049a0:	58025444 	.word	0x58025444
 80049a4:	58025458 	.word	0x58025458
 80049a8:	5802546c 	.word	0x5802546c
 80049ac:	58025480 	.word	0x58025480
 80049b0:	58025494 	.word	0x58025494
 80049b4:	2300      	movs	r3, #0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d028      	beq.n	8004a0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2201      	movs	r2, #1
 80049da:	409a      	lsls	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00c      	beq.n	8004a0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop

08004a38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	@ 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a44:	4b67      	ldr	r3, [pc, #412]	@ (8004be4 <HAL_DMA_IRQHandler+0x1ac>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a67      	ldr	r2, [pc, #412]	@ (8004be8 <HAL_DMA_IRQHandler+0x1b0>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0a9b      	lsrs	r3, r3, #10
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8004bec <HAL_DMA_IRQHandler+0x1b4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d04a      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a5d      	ldr	r2, [pc, #372]	@ (8004bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d045      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a5c      	ldr	r2, [pc, #368]	@ (8004bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d040      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8004bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d03b      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a59      	ldr	r2, [pc, #356]	@ (8004bfc <HAL_DMA_IRQHandler+0x1c4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d036      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a57      	ldr	r2, [pc, #348]	@ (8004c00 <HAL_DMA_IRQHandler+0x1c8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d031      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a56      	ldr	r2, [pc, #344]	@ (8004c04 <HAL_DMA_IRQHandler+0x1cc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d02c      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a54      	ldr	r2, [pc, #336]	@ (8004c08 <HAL_DMA_IRQHandler+0x1d0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d027      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a53      	ldr	r2, [pc, #332]	@ (8004c0c <HAL_DMA_IRQHandler+0x1d4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a51      	ldr	r2, [pc, #324]	@ (8004c10 <HAL_DMA_IRQHandler+0x1d8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a50      	ldr	r2, [pc, #320]	@ (8004c14 <HAL_DMA_IRQHandler+0x1dc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a4e      	ldr	r2, [pc, #312]	@ (8004c18 <HAL_DMA_IRQHandler+0x1e0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a4d      	ldr	r2, [pc, #308]	@ (8004c1c <HAL_DMA_IRQHandler+0x1e4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a4b      	ldr	r2, [pc, #300]	@ (8004c20 <HAL_DMA_IRQHandler+0x1e8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a4a      	ldr	r2, [pc, #296]	@ (8004c24 <HAL_DMA_IRQHandler+0x1ec>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xd2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a48      	ldr	r2, [pc, #288]	@ (8004c28 <HAL_DMA_IRQHandler+0x1f0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <HAL_DMA_IRQHandler+0xd6>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_DMA_IRQHandler+0xd8>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 842b 	beq.w	800536c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2208      	movs	r2, #8
 8004b20:	409a      	lsls	r2, r3
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80a2 	beq.w	8004c70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2e      	ldr	r2, [pc, #184]	@ (8004bec <HAL_DMA_IRQHandler+0x1b4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d04a      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2d      	ldr	r2, [pc, #180]	@ (8004bf0 <HAL_DMA_IRQHandler+0x1b8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d045      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf4 <HAL_DMA_IRQHandler+0x1bc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d040      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf8 <HAL_DMA_IRQHandler+0x1c0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d03b      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a28      	ldr	r2, [pc, #160]	@ (8004bfc <HAL_DMA_IRQHandler+0x1c4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d036      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a27      	ldr	r2, [pc, #156]	@ (8004c00 <HAL_DMA_IRQHandler+0x1c8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d031      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a25      	ldr	r2, [pc, #148]	@ (8004c04 <HAL_DMA_IRQHandler+0x1cc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d02c      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a24      	ldr	r2, [pc, #144]	@ (8004c08 <HAL_DMA_IRQHandler+0x1d0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d027      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a22      	ldr	r2, [pc, #136]	@ (8004c0c <HAL_DMA_IRQHandler+0x1d4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a21      	ldr	r2, [pc, #132]	@ (8004c10 <HAL_DMA_IRQHandler+0x1d8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d01d      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1f      	ldr	r2, [pc, #124]	@ (8004c14 <HAL_DMA_IRQHandler+0x1dc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c18 <HAL_DMA_IRQHandler+0x1e0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c1c <HAL_DMA_IRQHandler+0x1e4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c20 <HAL_DMA_IRQHandler+0x1e8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a19      	ldr	r2, [pc, #100]	@ (8004c24 <HAL_DMA_IRQHandler+0x1ec>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x194>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a18      	ldr	r2, [pc, #96]	@ (8004c28 <HAL_DMA_IRQHandler+0x1f0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d12f      	bne.n	8004c2c <HAL_DMA_IRQHandler+0x1f4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bf14      	ite	ne
 8004bda:	2301      	movne	r3, #1
 8004bdc:	2300      	moveq	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	e02e      	b.n	8004c40 <HAL_DMA_IRQHandler+0x208>
 8004be2:	bf00      	nop
 8004be4:	24000000 	.word	0x24000000
 8004be8:	1b4e81b5 	.word	0x1b4e81b5
 8004bec:	40020010 	.word	0x40020010
 8004bf0:	40020028 	.word	0x40020028
 8004bf4:	40020040 	.word	0x40020040
 8004bf8:	40020058 	.word	0x40020058
 8004bfc:	40020070 	.word	0x40020070
 8004c00:	40020088 	.word	0x40020088
 8004c04:	400200a0 	.word	0x400200a0
 8004c08:	400200b8 	.word	0x400200b8
 8004c0c:	40020410 	.word	0x40020410
 8004c10:	40020428 	.word	0x40020428
 8004c14:	40020440 	.word	0x40020440
 8004c18:	40020458 	.word	0x40020458
 8004c1c:	40020470 	.word	0x40020470
 8004c20:	40020488 	.word	0x40020488
 8004c24:	400204a0 	.word	0x400204a0
 8004c28:	400204b8 	.word	0x400204b8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d06e      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a69      	ldr	r2, [pc, #420]	@ (8004e30 <HAL_DMA_IRQHandler+0x3f8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d04a      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a67      	ldr	r2, [pc, #412]	@ (8004e34 <HAL_DMA_IRQHandler+0x3fc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d045      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a66      	ldr	r2, [pc, #408]	@ (8004e38 <HAL_DMA_IRQHandler+0x400>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d040      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a64      	ldr	r2, [pc, #400]	@ (8004e3c <HAL_DMA_IRQHandler+0x404>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d03b      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a63      	ldr	r2, [pc, #396]	@ (8004e40 <HAL_DMA_IRQHandler+0x408>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d036      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a61      	ldr	r2, [pc, #388]	@ (8004e44 <HAL_DMA_IRQHandler+0x40c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d031      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a60      	ldr	r2, [pc, #384]	@ (8004e48 <HAL_DMA_IRQHandler+0x410>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d02c      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a5e      	ldr	r2, [pc, #376]	@ (8004e4c <HAL_DMA_IRQHandler+0x414>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d027      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a5d      	ldr	r2, [pc, #372]	@ (8004e50 <HAL_DMA_IRQHandler+0x418>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d022      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a5b      	ldr	r2, [pc, #364]	@ (8004e54 <HAL_DMA_IRQHandler+0x41c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d01d      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a5a      	ldr	r2, [pc, #360]	@ (8004e58 <HAL_DMA_IRQHandler+0x420>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d018      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a58      	ldr	r2, [pc, #352]	@ (8004e5c <HAL_DMA_IRQHandler+0x424>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a57      	ldr	r2, [pc, #348]	@ (8004e60 <HAL_DMA_IRQHandler+0x428>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a55      	ldr	r2, [pc, #340]	@ (8004e64 <HAL_DMA_IRQHandler+0x42c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a54      	ldr	r2, [pc, #336]	@ (8004e68 <HAL_DMA_IRQHandler+0x430>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2ee>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a52      	ldr	r2, [pc, #328]	@ (8004e6c <HAL_DMA_IRQHandler+0x434>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10a      	bne.n	8004d3c <HAL_DMA_IRQHandler+0x304>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e003      	b.n	8004d44 <HAL_DMA_IRQHandler+0x30c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00d      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2201      	movs	r2, #1
 8004d52:	409a      	lsls	r2, r3
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5c:	f043 0202 	orr.w	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 808f 	beq.w	8004e98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e30 <HAL_DMA_IRQHandler+0x3f8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d04a      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	@ (8004e34 <HAL_DMA_IRQHandler+0x3fc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d045      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a29      	ldr	r2, [pc, #164]	@ (8004e38 <HAL_DMA_IRQHandler+0x400>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d040      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a27      	ldr	r2, [pc, #156]	@ (8004e3c <HAL_DMA_IRQHandler+0x404>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d03b      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a26      	ldr	r2, [pc, #152]	@ (8004e40 <HAL_DMA_IRQHandler+0x408>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d036      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a24      	ldr	r2, [pc, #144]	@ (8004e44 <HAL_DMA_IRQHandler+0x40c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d031      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a23      	ldr	r2, [pc, #140]	@ (8004e48 <HAL_DMA_IRQHandler+0x410>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d02c      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a21      	ldr	r2, [pc, #132]	@ (8004e4c <HAL_DMA_IRQHandler+0x414>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d027      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a20      	ldr	r2, [pc, #128]	@ (8004e50 <HAL_DMA_IRQHandler+0x418>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d022      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8004e54 <HAL_DMA_IRQHandler+0x41c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d01d      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <HAL_DMA_IRQHandler+0x420>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d018      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1b      	ldr	r2, [pc, #108]	@ (8004e5c <HAL_DMA_IRQHandler+0x424>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d013      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e60 <HAL_DMA_IRQHandler+0x428>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00e      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a18      	ldr	r2, [pc, #96]	@ (8004e64 <HAL_DMA_IRQHandler+0x42c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d009      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	@ (8004e68 <HAL_DMA_IRQHandler+0x430>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x3e2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a15      	ldr	r2, [pc, #84]	@ (8004e6c <HAL_DMA_IRQHandler+0x434>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d12a      	bne.n	8004e70 <HAL_DMA_IRQHandler+0x438>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e023      	b.n	8004e78 <HAL_DMA_IRQHandler+0x440>
 8004e30:	40020010 	.word	0x40020010
 8004e34:	40020028 	.word	0x40020028
 8004e38:	40020040 	.word	0x40020040
 8004e3c:	40020058 	.word	0x40020058
 8004e40:	40020070 	.word	0x40020070
 8004e44:	40020088 	.word	0x40020088
 8004e48:	400200a0 	.word	0x400200a0
 8004e4c:	400200b8 	.word	0x400200b8
 8004e50:	40020410 	.word	0x40020410
 8004e54:	40020428 	.word	0x40020428
 8004e58:	40020440 	.word	0x40020440
 8004e5c:	40020458 	.word	0x40020458
 8004e60:	40020470 	.word	0x40020470
 8004e64:	40020488 	.word	0x40020488
 8004e68:	400204a0 	.word	0x400204a0
 8004e6c:	400204b8 	.word	0x400204b8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2204      	movs	r2, #4
 8004e86:	409a      	lsls	r2, r3
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e90:	f043 0204 	orr.w	r2, r3, #4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2210      	movs	r2, #16
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80a6 	beq.w	8004ffa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a85      	ldr	r2, [pc, #532]	@ (80050c8 <HAL_DMA_IRQHandler+0x690>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d04a      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a83      	ldr	r2, [pc, #524]	@ (80050cc <HAL_DMA_IRQHandler+0x694>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d045      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a82      	ldr	r2, [pc, #520]	@ (80050d0 <HAL_DMA_IRQHandler+0x698>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d040      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a80      	ldr	r2, [pc, #512]	@ (80050d4 <HAL_DMA_IRQHandler+0x69c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d03b      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7f      	ldr	r2, [pc, #508]	@ (80050d8 <HAL_DMA_IRQHandler+0x6a0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d036      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a7d      	ldr	r2, [pc, #500]	@ (80050dc <HAL_DMA_IRQHandler+0x6a4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d031      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7c      	ldr	r2, [pc, #496]	@ (80050e0 <HAL_DMA_IRQHandler+0x6a8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d02c      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a7a      	ldr	r2, [pc, #488]	@ (80050e4 <HAL_DMA_IRQHandler+0x6ac>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d027      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a79      	ldr	r2, [pc, #484]	@ (80050e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d022      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a77      	ldr	r2, [pc, #476]	@ (80050ec <HAL_DMA_IRQHandler+0x6b4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01d      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a76      	ldr	r2, [pc, #472]	@ (80050f0 <HAL_DMA_IRQHandler+0x6b8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a74      	ldr	r2, [pc, #464]	@ (80050f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d013      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a73      	ldr	r2, [pc, #460]	@ (80050f8 <HAL_DMA_IRQHandler+0x6c0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a71      	ldr	r2, [pc, #452]	@ (80050fc <HAL_DMA_IRQHandler+0x6c4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a70      	ldr	r2, [pc, #448]	@ (8005100 <HAL_DMA_IRQHandler+0x6c8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x516>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a6e      	ldr	r2, [pc, #440]	@ (8005104 <HAL_DMA_IRQHandler+0x6cc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d10a      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x52c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e009      	b.n	8004f78 <HAL_DMA_IRQHandler+0x540>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d03e      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	2210      	movs	r2, #16
 8004f86:	409a      	lsls	r2, r3
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d108      	bne.n	8004fba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d024      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
 8004fb8:	e01f      	b.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01b      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
 8004fca:	e016      	b.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d107      	bne.n	8004fea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0208 	bic.w	r2, r2, #8
 8004fe8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	2220      	movs	r2, #32
 8005004:	409a      	lsls	r2, r3
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8110 	beq.w	8005230 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2c      	ldr	r2, [pc, #176]	@ (80050c8 <HAL_DMA_IRQHandler+0x690>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d04a      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a2b      	ldr	r2, [pc, #172]	@ (80050cc <HAL_DMA_IRQHandler+0x694>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d045      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a29      	ldr	r2, [pc, #164]	@ (80050d0 <HAL_DMA_IRQHandler+0x698>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d040      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a28      	ldr	r2, [pc, #160]	@ (80050d4 <HAL_DMA_IRQHandler+0x69c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d03b      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a26      	ldr	r2, [pc, #152]	@ (80050d8 <HAL_DMA_IRQHandler+0x6a0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d036      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a25      	ldr	r2, [pc, #148]	@ (80050dc <HAL_DMA_IRQHandler+0x6a4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d031      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a23      	ldr	r2, [pc, #140]	@ (80050e0 <HAL_DMA_IRQHandler+0x6a8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d02c      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a22      	ldr	r2, [pc, #136]	@ (80050e4 <HAL_DMA_IRQHandler+0x6ac>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d027      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a20      	ldr	r2, [pc, #128]	@ (80050e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1f      	ldr	r2, [pc, #124]	@ (80050ec <HAL_DMA_IRQHandler+0x6b4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d01d      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1d      	ldr	r2, [pc, #116]	@ (80050f0 <HAL_DMA_IRQHandler+0x6b8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d018      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1c      	ldr	r2, [pc, #112]	@ (80050f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1a      	ldr	r2, [pc, #104]	@ (80050f8 <HAL_DMA_IRQHandler+0x6c0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <HAL_DMA_IRQHandler+0x6c4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a17      	ldr	r2, [pc, #92]	@ (8005100 <HAL_DMA_IRQHandler+0x6c8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x678>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a16      	ldr	r2, [pc, #88]	@ (8005104 <HAL_DMA_IRQHandler+0x6cc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d12b      	bne.n	8005108 <HAL_DMA_IRQHandler+0x6d0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e02a      	b.n	800511c <HAL_DMA_IRQHandler+0x6e4>
 80050c6:	bf00      	nop
 80050c8:	40020010 	.word	0x40020010
 80050cc:	40020028 	.word	0x40020028
 80050d0:	40020040 	.word	0x40020040
 80050d4:	40020058 	.word	0x40020058
 80050d8:	40020070 	.word	0x40020070
 80050dc:	40020088 	.word	0x40020088
 80050e0:	400200a0 	.word	0x400200a0
 80050e4:	400200b8 	.word	0x400200b8
 80050e8:	40020410 	.word	0x40020410
 80050ec:	40020428 	.word	0x40020428
 80050f0:	40020440 	.word	0x40020440
 80050f4:	40020458 	.word	0x40020458
 80050f8:	40020470 	.word	0x40020470
 80050fc:	40020488 	.word	0x40020488
 8005100:	400204a0 	.word	0x400204a0
 8005104:	400204b8 	.word	0x400204b8
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8087 	beq.w	8005230 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2220      	movs	r2, #32
 800512c:	409a      	lsls	r2, r3
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b04      	cmp	r3, #4
 800513c:	d139      	bne.n	80051b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0216 	bic.w	r2, r2, #22
 800514c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800515c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <HAL_DMA_IRQHandler+0x736>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0208 	bic.w	r2, r2, #8
 800517c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	223f      	movs	r2, #63	@ 0x3f
 8005188:	409a      	lsls	r2, r3
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8382 	beq.w	80058ac <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
          }
          return;
 80051b0:	e37c      	b.n	80058ac <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d018      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d108      	bne.n	80051e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d02c      	beq.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
 80051de:	e027      	b.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d023      	beq.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
 80051f0:	e01e      	b.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10f      	bne.n	8005220 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0210 	bic.w	r2, r2, #16
 800520e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 833e 	beq.w	80058b6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8088 	beq.w	8005358 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2204      	movs	r2, #4
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a89      	ldr	r2, [pc, #548]	@ (800547c <HAL_DMA_IRQHandler+0xa44>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d04a      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a88      	ldr	r2, [pc, #544]	@ (8005480 <HAL_DMA_IRQHandler+0xa48>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d045      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a86      	ldr	r2, [pc, #536]	@ (8005484 <HAL_DMA_IRQHandler+0xa4c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d040      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a85      	ldr	r2, [pc, #532]	@ (8005488 <HAL_DMA_IRQHandler+0xa50>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d03b      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a83      	ldr	r2, [pc, #524]	@ (800548c <HAL_DMA_IRQHandler+0xa54>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d036      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a82      	ldr	r2, [pc, #520]	@ (8005490 <HAL_DMA_IRQHandler+0xa58>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d031      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a80      	ldr	r2, [pc, #512]	@ (8005494 <HAL_DMA_IRQHandler+0xa5c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d02c      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a7f      	ldr	r2, [pc, #508]	@ (8005498 <HAL_DMA_IRQHandler+0xa60>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d027      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a7d      	ldr	r2, [pc, #500]	@ (800549c <HAL_DMA_IRQHandler+0xa64>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d022      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a7c      	ldr	r2, [pc, #496]	@ (80054a0 <HAL_DMA_IRQHandler+0xa68>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d01d      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a7a      	ldr	r2, [pc, #488]	@ (80054a4 <HAL_DMA_IRQHandler+0xa6c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d018      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a79      	ldr	r2, [pc, #484]	@ (80054a8 <HAL_DMA_IRQHandler+0xa70>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a77      	ldr	r2, [pc, #476]	@ (80054ac <HAL_DMA_IRQHandler+0xa74>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a76      	ldr	r2, [pc, #472]	@ (80054b0 <HAL_DMA_IRQHandler+0xa78>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a74      	ldr	r2, [pc, #464]	@ (80054b4 <HAL_DMA_IRQHandler+0xa7c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x8b8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a73      	ldr	r2, [pc, #460]	@ (80054b8 <HAL_DMA_IRQHandler+0xa80>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d108      	bne.n	8005302 <HAL_DMA_IRQHandler+0x8ca>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e007      	b.n	8005312 <HAL_DMA_IRQHandler+0x8da>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800531a:	429a      	cmp	r2, r3
 800531c:	d307      	bcc.n	800532e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f2      	bne.n	8005312 <HAL_DMA_IRQHandler+0x8da>
 800532c:	e000      	b.n	8005330 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800532e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2203      	movs	r2, #3
 8005342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005346:	e003      	b.n	8005350 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 82aa 	beq.w	80058b6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
 800536a:	e2a4      	b.n	80058b6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a52      	ldr	r2, [pc, #328]	@ (80054bc <HAL_DMA_IRQHandler+0xa84>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d04a      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a51      	ldr	r2, [pc, #324]	@ (80054c0 <HAL_DMA_IRQHandler+0xa88>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d045      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a4f      	ldr	r2, [pc, #316]	@ (80054c4 <HAL_DMA_IRQHandler+0xa8c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d040      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a4e      	ldr	r2, [pc, #312]	@ (80054c8 <HAL_DMA_IRQHandler+0xa90>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d03b      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a4c      	ldr	r2, [pc, #304]	@ (80054cc <HAL_DMA_IRQHandler+0xa94>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d036      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a4b      	ldr	r2, [pc, #300]	@ (80054d0 <HAL_DMA_IRQHandler+0xa98>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d031      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a49      	ldr	r2, [pc, #292]	@ (80054d4 <HAL_DMA_IRQHandler+0xa9c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d02c      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a48      	ldr	r2, [pc, #288]	@ (80054d8 <HAL_DMA_IRQHandler+0xaa0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d027      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a46      	ldr	r2, [pc, #280]	@ (80054dc <HAL_DMA_IRQHandler+0xaa4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d022      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a45      	ldr	r2, [pc, #276]	@ (80054e0 <HAL_DMA_IRQHandler+0xaa8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d01d      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a43      	ldr	r2, [pc, #268]	@ (80054e4 <HAL_DMA_IRQHandler+0xaac>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d018      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a42      	ldr	r2, [pc, #264]	@ (80054e8 <HAL_DMA_IRQHandler+0xab0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a40      	ldr	r2, [pc, #256]	@ (80054ec <HAL_DMA_IRQHandler+0xab4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a3f      	ldr	r2, [pc, #252]	@ (80054f0 <HAL_DMA_IRQHandler+0xab8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a3d      	ldr	r2, [pc, #244]	@ (80054f4 <HAL_DMA_IRQHandler+0xabc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_DMA_IRQHandler+0x9d4>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a3c      	ldr	r2, [pc, #240]	@ (80054f8 <HAL_DMA_IRQHandler+0xac0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d101      	bne.n	8005410 <HAL_DMA_IRQHandler+0x9d8>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <HAL_DMA_IRQHandler+0x9da>
 8005410:	2300      	movs	r3, #0
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 824f 	beq.w	80058b6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2204      	movs	r2, #4
 800542a:	409a      	lsls	r2, r3
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80dd 	beq.w	80055f0 <HAL_DMA_IRQHandler+0xbb8>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80d7 	beq.w	80055f0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	2204      	movs	r2, #4
 800544c:	409a      	lsls	r2, r3
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d059      	beq.n	8005510 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d14a      	bne.n	80054fc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8220 	beq.w	80058b0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005478:	e21a      	b.n	80058b0 <HAL_DMA_IRQHandler+0xe78>
 800547a:	bf00      	nop
 800547c:	40020010 	.word	0x40020010
 8005480:	40020028 	.word	0x40020028
 8005484:	40020040 	.word	0x40020040
 8005488:	40020058 	.word	0x40020058
 800548c:	40020070 	.word	0x40020070
 8005490:	40020088 	.word	0x40020088
 8005494:	400200a0 	.word	0x400200a0
 8005498:	400200b8 	.word	0x400200b8
 800549c:	40020410 	.word	0x40020410
 80054a0:	40020428 	.word	0x40020428
 80054a4:	40020440 	.word	0x40020440
 80054a8:	40020458 	.word	0x40020458
 80054ac:	40020470 	.word	0x40020470
 80054b0:	40020488 	.word	0x40020488
 80054b4:	400204a0 	.word	0x400204a0
 80054b8:	400204b8 	.word	0x400204b8
 80054bc:	48022c08 	.word	0x48022c08
 80054c0:	48022c1c 	.word	0x48022c1c
 80054c4:	48022c30 	.word	0x48022c30
 80054c8:	48022c44 	.word	0x48022c44
 80054cc:	48022c58 	.word	0x48022c58
 80054d0:	48022c6c 	.word	0x48022c6c
 80054d4:	48022c80 	.word	0x48022c80
 80054d8:	48022c94 	.word	0x48022c94
 80054dc:	58025408 	.word	0x58025408
 80054e0:	5802541c 	.word	0x5802541c
 80054e4:	58025430 	.word	0x58025430
 80054e8:	58025444 	.word	0x58025444
 80054ec:	58025458 	.word	0x58025458
 80054f0:	5802546c 	.word	0x5802546c
 80054f4:	58025480 	.word	0x58025480
 80054f8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 81d5 	beq.w	80058b0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800550e:	e1cf      	b.n	80058b0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d160      	bne.n	80055dc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a7f      	ldr	r2, [pc, #508]	@ (800571c <HAL_DMA_IRQHandler+0xce4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d04a      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a7d      	ldr	r2, [pc, #500]	@ (8005720 <HAL_DMA_IRQHandler+0xce8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d045      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a7c      	ldr	r2, [pc, #496]	@ (8005724 <HAL_DMA_IRQHandler+0xcec>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d040      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a7a      	ldr	r2, [pc, #488]	@ (8005728 <HAL_DMA_IRQHandler+0xcf0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d03b      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a79      	ldr	r2, [pc, #484]	@ (800572c <HAL_DMA_IRQHandler+0xcf4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d036      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a77      	ldr	r2, [pc, #476]	@ (8005730 <HAL_DMA_IRQHandler+0xcf8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d031      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a76      	ldr	r2, [pc, #472]	@ (8005734 <HAL_DMA_IRQHandler+0xcfc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d02c      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a74      	ldr	r2, [pc, #464]	@ (8005738 <HAL_DMA_IRQHandler+0xd00>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d027      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a73      	ldr	r2, [pc, #460]	@ (800573c <HAL_DMA_IRQHandler+0xd04>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d022      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a71      	ldr	r2, [pc, #452]	@ (8005740 <HAL_DMA_IRQHandler+0xd08>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01d      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a70      	ldr	r2, [pc, #448]	@ (8005744 <HAL_DMA_IRQHandler+0xd0c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d018      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a6e      	ldr	r2, [pc, #440]	@ (8005748 <HAL_DMA_IRQHandler+0xd10>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a6d      	ldr	r2, [pc, #436]	@ (800574c <HAL_DMA_IRQHandler+0xd14>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00e      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a6b      	ldr	r2, [pc, #428]	@ (8005750 <HAL_DMA_IRQHandler+0xd18>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d009      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a6a      	ldr	r2, [pc, #424]	@ (8005754 <HAL_DMA_IRQHandler+0xd1c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d004      	beq.n	80055ba <HAL_DMA_IRQHandler+0xb82>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a68      	ldr	r2, [pc, #416]	@ (8005758 <HAL_DMA_IRQHandler+0xd20>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d108      	bne.n	80055cc <HAL_DMA_IRQHandler+0xb94>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0208 	bic.w	r2, r2, #8
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e007      	b.n	80055dc <HAL_DMA_IRQHandler+0xba4>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0204 	bic.w	r2, r2, #4
 80055da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8165 	beq.w	80058b0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ee:	e15f      	b.n	80058b0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	2202      	movs	r2, #2
 80055fa:	409a      	lsls	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80c5 	beq.w	8005790 <HAL_DMA_IRQHandler+0xd58>
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80bf 	beq.w	8005790 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	2202      	movs	r2, #2
 800561c:	409a      	lsls	r2, r3
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d018      	beq.n	800565e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 813a 	beq.w	80058b4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005648:	e134      	b.n	80058b4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8130 	beq.w	80058b4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800565c:	e12a      	b.n	80058b4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	f040 8089 	bne.w	800577c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2b      	ldr	r2, [pc, #172]	@ (800571c <HAL_DMA_IRQHandler+0xce4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d04a      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a29      	ldr	r2, [pc, #164]	@ (8005720 <HAL_DMA_IRQHandler+0xce8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d045      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a28      	ldr	r2, [pc, #160]	@ (8005724 <HAL_DMA_IRQHandler+0xcec>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d040      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a26      	ldr	r2, [pc, #152]	@ (8005728 <HAL_DMA_IRQHandler+0xcf0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d03b      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a25      	ldr	r2, [pc, #148]	@ (800572c <HAL_DMA_IRQHandler+0xcf4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d036      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a23      	ldr	r2, [pc, #140]	@ (8005730 <HAL_DMA_IRQHandler+0xcf8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d031      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a22      	ldr	r2, [pc, #136]	@ (8005734 <HAL_DMA_IRQHandler+0xcfc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d02c      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a20      	ldr	r2, [pc, #128]	@ (8005738 <HAL_DMA_IRQHandler+0xd00>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d027      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1f      	ldr	r2, [pc, #124]	@ (800573c <HAL_DMA_IRQHandler+0xd04>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d022      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005740 <HAL_DMA_IRQHandler+0xd08>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01d      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005744 <HAL_DMA_IRQHandler+0xd0c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d018      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005748 <HAL_DMA_IRQHandler+0xd10>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a19      	ldr	r2, [pc, #100]	@ (800574c <HAL_DMA_IRQHandler+0xd14>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00e      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a17      	ldr	r2, [pc, #92]	@ (8005750 <HAL_DMA_IRQHandler+0xd18>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a16      	ldr	r2, [pc, #88]	@ (8005754 <HAL_DMA_IRQHandler+0xd1c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_DMA_IRQHandler+0xcd2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a14      	ldr	r2, [pc, #80]	@ (8005758 <HAL_DMA_IRQHandler+0xd20>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d128      	bne.n	800575c <HAL_DMA_IRQHandler+0xd24>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0214 	bic.w	r2, r2, #20
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e027      	b.n	800576c <HAL_DMA_IRQHandler+0xd34>
 800571c:	40020010 	.word	0x40020010
 8005720:	40020028 	.word	0x40020028
 8005724:	40020040 	.word	0x40020040
 8005728:	40020058 	.word	0x40020058
 800572c:	40020070 	.word	0x40020070
 8005730:	40020088 	.word	0x40020088
 8005734:	400200a0 	.word	0x400200a0
 8005738:	400200b8 	.word	0x400200b8
 800573c:	40020410 	.word	0x40020410
 8005740:	40020428 	.word	0x40020428
 8005744:	40020440 	.word	0x40020440
 8005748:	40020458 	.word	0x40020458
 800574c:	40020470 	.word	0x40020470
 8005750:	40020488 	.word	0x40020488
 8005754:	400204a0 	.word	0x400204a0
 8005758:	400204b8 	.word	0x400204b8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 020a 	bic.w	r2, r2, #10
 800576a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8097 	beq.w	80058b4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800578e:	e091      	b.n	80058b4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	2208      	movs	r2, #8
 800579a:	409a      	lsls	r2, r3
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4013      	ands	r3, r2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8088 	beq.w	80058b6 <HAL_DMA_IRQHandler+0xe7e>
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8082 	beq.w	80058b6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a41      	ldr	r2, [pc, #260]	@ (80058bc <HAL_DMA_IRQHandler+0xe84>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d04a      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a3f      	ldr	r2, [pc, #252]	@ (80058c0 <HAL_DMA_IRQHandler+0xe88>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d045      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a3e      	ldr	r2, [pc, #248]	@ (80058c4 <HAL_DMA_IRQHandler+0xe8c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d040      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a3c      	ldr	r2, [pc, #240]	@ (80058c8 <HAL_DMA_IRQHandler+0xe90>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d03b      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a3b      	ldr	r2, [pc, #236]	@ (80058cc <HAL_DMA_IRQHandler+0xe94>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d036      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a39      	ldr	r2, [pc, #228]	@ (80058d0 <HAL_DMA_IRQHandler+0xe98>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d031      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a38      	ldr	r2, [pc, #224]	@ (80058d4 <HAL_DMA_IRQHandler+0xe9c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d02c      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a36      	ldr	r2, [pc, #216]	@ (80058d8 <HAL_DMA_IRQHandler+0xea0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d027      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a35      	ldr	r2, [pc, #212]	@ (80058dc <HAL_DMA_IRQHandler+0xea4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d022      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a33      	ldr	r2, [pc, #204]	@ (80058e0 <HAL_DMA_IRQHandler+0xea8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01d      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a32      	ldr	r2, [pc, #200]	@ (80058e4 <HAL_DMA_IRQHandler+0xeac>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a30      	ldr	r2, [pc, #192]	@ (80058e8 <HAL_DMA_IRQHandler+0xeb0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2f      	ldr	r2, [pc, #188]	@ (80058ec <HAL_DMA_IRQHandler+0xeb4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2d      	ldr	r2, [pc, #180]	@ (80058f0 <HAL_DMA_IRQHandler+0xeb8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a2c      	ldr	r2, [pc, #176]	@ (80058f4 <HAL_DMA_IRQHandler+0xebc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_DMA_IRQHandler+0xe1a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a2a      	ldr	r2, [pc, #168]	@ (80058f8 <HAL_DMA_IRQHandler+0xec0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d108      	bne.n	8005864 <HAL_DMA_IRQHandler+0xe2c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 021c 	bic.w	r2, r2, #28
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	e007      	b.n	8005874 <HAL_DMA_IRQHandler+0xe3c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 020e 	bic.w	r2, r2, #14
 8005872:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2201      	movs	r2, #1
 800587e:	409a      	lsls	r2, r3
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d009      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
 80058aa:	e004      	b.n	80058b6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80058ac:	bf00      	nop
 80058ae:	e002      	b.n	80058b6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058b0:	bf00      	nop
 80058b2:	e000      	b.n	80058b6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058b6:	3728      	adds	r7, #40	@ 0x28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40020010 	.word	0x40020010
 80058c0:	40020028 	.word	0x40020028
 80058c4:	40020040 	.word	0x40020040
 80058c8:	40020058 	.word	0x40020058
 80058cc:	40020070 	.word	0x40020070
 80058d0:	40020088 	.word	0x40020088
 80058d4:	400200a0 	.word	0x400200a0
 80058d8:	400200b8 	.word	0x400200b8
 80058dc:	40020410 	.word	0x40020410
 80058e0:	40020428 	.word	0x40020428
 80058e4:	40020440 	.word	0x40020440
 80058e8:	40020458 	.word	0x40020458
 80058ec:	40020470 	.word	0x40020470
 80058f0:	40020488 	.word	0x40020488
 80058f4:	400204a0 	.word	0x400204a0
 80058f8:	400204b8 	.word	0x400204b8

080058fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005926:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a7f      	ldr	r2, [pc, #508]	@ (8005b30 <DMA_SetConfig+0x21c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d072      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a7d      	ldr	r2, [pc, #500]	@ (8005b34 <DMA_SetConfig+0x220>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d06d      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a7c      	ldr	r2, [pc, #496]	@ (8005b38 <DMA_SetConfig+0x224>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d068      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a7a      	ldr	r2, [pc, #488]	@ (8005b3c <DMA_SetConfig+0x228>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d063      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a79      	ldr	r2, [pc, #484]	@ (8005b40 <DMA_SetConfig+0x22c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d05e      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a77      	ldr	r2, [pc, #476]	@ (8005b44 <DMA_SetConfig+0x230>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d059      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a76      	ldr	r2, [pc, #472]	@ (8005b48 <DMA_SetConfig+0x234>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d054      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a74      	ldr	r2, [pc, #464]	@ (8005b4c <DMA_SetConfig+0x238>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d04f      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a73      	ldr	r2, [pc, #460]	@ (8005b50 <DMA_SetConfig+0x23c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d04a      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a71      	ldr	r2, [pc, #452]	@ (8005b54 <DMA_SetConfig+0x240>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d045      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a70      	ldr	r2, [pc, #448]	@ (8005b58 <DMA_SetConfig+0x244>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d040      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a6e      	ldr	r2, [pc, #440]	@ (8005b5c <DMA_SetConfig+0x248>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d03b      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005b60 <DMA_SetConfig+0x24c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d036      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6b      	ldr	r2, [pc, #428]	@ (8005b64 <DMA_SetConfig+0x250>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d031      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a6a      	ldr	r2, [pc, #424]	@ (8005b68 <DMA_SetConfig+0x254>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d02c      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a68      	ldr	r2, [pc, #416]	@ (8005b6c <DMA_SetConfig+0x258>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d027      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a67      	ldr	r2, [pc, #412]	@ (8005b70 <DMA_SetConfig+0x25c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d022      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a65      	ldr	r2, [pc, #404]	@ (8005b74 <DMA_SetConfig+0x260>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01d      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a64      	ldr	r2, [pc, #400]	@ (8005b78 <DMA_SetConfig+0x264>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d018      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a62      	ldr	r2, [pc, #392]	@ (8005b7c <DMA_SetConfig+0x268>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a61      	ldr	r2, [pc, #388]	@ (8005b80 <DMA_SetConfig+0x26c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00e      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a5f      	ldr	r2, [pc, #380]	@ (8005b84 <DMA_SetConfig+0x270>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d009      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a5e      	ldr	r2, [pc, #376]	@ (8005b88 <DMA_SetConfig+0x274>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <DMA_SetConfig+0x10a>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a5c      	ldr	r2, [pc, #368]	@ (8005b8c <DMA_SetConfig+0x278>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d101      	bne.n	8005a22 <DMA_SetConfig+0x10e>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <DMA_SetConfig+0x110>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005a30:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a42:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a39      	ldr	r2, [pc, #228]	@ (8005b30 <DMA_SetConfig+0x21c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d04a      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a38      	ldr	r2, [pc, #224]	@ (8005b34 <DMA_SetConfig+0x220>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d045      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a36      	ldr	r2, [pc, #216]	@ (8005b38 <DMA_SetConfig+0x224>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d040      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a35      	ldr	r2, [pc, #212]	@ (8005b3c <DMA_SetConfig+0x228>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d03b      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a33      	ldr	r2, [pc, #204]	@ (8005b40 <DMA_SetConfig+0x22c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d036      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a32      	ldr	r2, [pc, #200]	@ (8005b44 <DMA_SetConfig+0x230>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d031      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a30      	ldr	r2, [pc, #192]	@ (8005b48 <DMA_SetConfig+0x234>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d02c      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8005b4c <DMA_SetConfig+0x238>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d027      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2d      	ldr	r2, [pc, #180]	@ (8005b50 <DMA_SetConfig+0x23c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d022      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b54 <DMA_SetConfig+0x240>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d01d      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2a      	ldr	r2, [pc, #168]	@ (8005b58 <DMA_SetConfig+0x244>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d018      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a29      	ldr	r2, [pc, #164]	@ (8005b5c <DMA_SetConfig+0x248>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a27      	ldr	r2, [pc, #156]	@ (8005b60 <DMA_SetConfig+0x24c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00e      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a26      	ldr	r2, [pc, #152]	@ (8005b64 <DMA_SetConfig+0x250>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d009      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a24      	ldr	r2, [pc, #144]	@ (8005b68 <DMA_SetConfig+0x254>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <DMA_SetConfig+0x1d0>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a23      	ldr	r2, [pc, #140]	@ (8005b6c <DMA_SetConfig+0x258>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d101      	bne.n	8005ae8 <DMA_SetConfig+0x1d4>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <DMA_SetConfig+0x1d6>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d059      	beq.n	8005ba2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	223f      	movs	r2, #63	@ 0x3f
 8005af8:	409a      	lsls	r2, r3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b40      	cmp	r3, #64	@ 0x40
 8005b1c:	d138      	bne.n	8005b90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b2e:	e0ae      	b.n	8005c8e <DMA_SetConfig+0x37a>
 8005b30:	40020010 	.word	0x40020010
 8005b34:	40020028 	.word	0x40020028
 8005b38:	40020040 	.word	0x40020040
 8005b3c:	40020058 	.word	0x40020058
 8005b40:	40020070 	.word	0x40020070
 8005b44:	40020088 	.word	0x40020088
 8005b48:	400200a0 	.word	0x400200a0
 8005b4c:	400200b8 	.word	0x400200b8
 8005b50:	40020410 	.word	0x40020410
 8005b54:	40020428 	.word	0x40020428
 8005b58:	40020440 	.word	0x40020440
 8005b5c:	40020458 	.word	0x40020458
 8005b60:	40020470 	.word	0x40020470
 8005b64:	40020488 	.word	0x40020488
 8005b68:	400204a0 	.word	0x400204a0
 8005b6c:	400204b8 	.word	0x400204b8
 8005b70:	58025408 	.word	0x58025408
 8005b74:	5802541c 	.word	0x5802541c
 8005b78:	58025430 	.word	0x58025430
 8005b7c:	58025444 	.word	0x58025444
 8005b80:	58025458 	.word	0x58025458
 8005b84:	5802546c 	.word	0x5802546c
 8005b88:	58025480 	.word	0x58025480
 8005b8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	60da      	str	r2, [r3, #12]
}
 8005ba0:	e075      	b.n	8005c8e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a3d      	ldr	r2, [pc, #244]	@ (8005c9c <DMA_SetConfig+0x388>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d04a      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8005ca0 <DMA_SetConfig+0x38c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d045      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a3a      	ldr	r2, [pc, #232]	@ (8005ca4 <DMA_SetConfig+0x390>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d040      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a38      	ldr	r2, [pc, #224]	@ (8005ca8 <DMA_SetConfig+0x394>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d03b      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a37      	ldr	r2, [pc, #220]	@ (8005cac <DMA_SetConfig+0x398>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d036      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a35      	ldr	r2, [pc, #212]	@ (8005cb0 <DMA_SetConfig+0x39c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d031      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a34      	ldr	r2, [pc, #208]	@ (8005cb4 <DMA_SetConfig+0x3a0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d02c      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a32      	ldr	r2, [pc, #200]	@ (8005cb8 <DMA_SetConfig+0x3a4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d027      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a31      	ldr	r2, [pc, #196]	@ (8005cbc <DMA_SetConfig+0x3a8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d022      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2f      	ldr	r2, [pc, #188]	@ (8005cc0 <DMA_SetConfig+0x3ac>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01d      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc4 <DMA_SetConfig+0x3b0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d018      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc8 <DMA_SetConfig+0x3b4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8005ccc <DMA_SetConfig+0x3b8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00e      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a29      	ldr	r2, [pc, #164]	@ (8005cd0 <DMA_SetConfig+0x3bc>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a28      	ldr	r2, [pc, #160]	@ (8005cd4 <DMA_SetConfig+0x3c0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <DMA_SetConfig+0x32e>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a26      	ldr	r2, [pc, #152]	@ (8005cd8 <DMA_SetConfig+0x3c4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d101      	bne.n	8005c46 <DMA_SetConfig+0x332>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <DMA_SetConfig+0x334>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d020      	beq.n	8005c8e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	2201      	movs	r2, #1
 8005c56:	409a      	lsls	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b40      	cmp	r3, #64	@ 0x40
 8005c6a:	d108      	bne.n	8005c7e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	60da      	str	r2, [r3, #12]
}
 8005c7c:	e007      	b.n	8005c8e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	60da      	str	r2, [r3, #12]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	48022c08 	.word	0x48022c08
 8005ca0:	48022c1c 	.word	0x48022c1c
 8005ca4:	48022c30 	.word	0x48022c30
 8005ca8:	48022c44 	.word	0x48022c44
 8005cac:	48022c58 	.word	0x48022c58
 8005cb0:	48022c6c 	.word	0x48022c6c
 8005cb4:	48022c80 	.word	0x48022c80
 8005cb8:	48022c94 	.word	0x48022c94
 8005cbc:	58025408 	.word	0x58025408
 8005cc0:	5802541c 	.word	0x5802541c
 8005cc4:	58025430 	.word	0x58025430
 8005cc8:	58025444 	.word	0x58025444
 8005ccc:	58025458 	.word	0x58025458
 8005cd0:	5802546c 	.word	0x5802546c
 8005cd4:	58025480 	.word	0x58025480
 8005cd8:	58025494 	.word	0x58025494

08005cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a42      	ldr	r2, [pc, #264]	@ (8005df4 <DMA_CalcBaseAndBitshift+0x118>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d04a      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a41      	ldr	r2, [pc, #260]	@ (8005df8 <DMA_CalcBaseAndBitshift+0x11c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d045      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a3f      	ldr	r2, [pc, #252]	@ (8005dfc <DMA_CalcBaseAndBitshift+0x120>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d040      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a3e      	ldr	r2, [pc, #248]	@ (8005e00 <DMA_CalcBaseAndBitshift+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d03b      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a3c      	ldr	r2, [pc, #240]	@ (8005e04 <DMA_CalcBaseAndBitshift+0x128>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d036      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e08 <DMA_CalcBaseAndBitshift+0x12c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d031      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a39      	ldr	r2, [pc, #228]	@ (8005e0c <DMA_CalcBaseAndBitshift+0x130>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d02c      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a38      	ldr	r2, [pc, #224]	@ (8005e10 <DMA_CalcBaseAndBitshift+0x134>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d027      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a36      	ldr	r2, [pc, #216]	@ (8005e14 <DMA_CalcBaseAndBitshift+0x138>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d022      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a35      	ldr	r2, [pc, #212]	@ (8005e18 <DMA_CalcBaseAndBitshift+0x13c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d01d      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a33      	ldr	r2, [pc, #204]	@ (8005e1c <DMA_CalcBaseAndBitshift+0x140>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d018      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a32      	ldr	r2, [pc, #200]	@ (8005e20 <DMA_CalcBaseAndBitshift+0x144>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d013      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a30      	ldr	r2, [pc, #192]	@ (8005e24 <DMA_CalcBaseAndBitshift+0x148>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00e      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8005e28 <DMA_CalcBaseAndBitshift+0x14c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a2d      	ldr	r2, [pc, #180]	@ (8005e2c <DMA_CalcBaseAndBitshift+0x150>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <DMA_CalcBaseAndBitshift+0xa8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8005e30 <DMA_CalcBaseAndBitshift+0x154>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d101      	bne.n	8005d88 <DMA_CalcBaseAndBitshift+0xac>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <DMA_CalcBaseAndBitshift+0xae>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d024      	beq.n	8005dd8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	3b10      	subs	r3, #16
 8005d96:	4a27      	ldr	r2, [pc, #156]	@ (8005e34 <DMA_CalcBaseAndBitshift+0x158>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	091b      	lsrs	r3, r3, #4
 8005d9e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	4a24      	ldr	r2, [pc, #144]	@ (8005e38 <DMA_CalcBaseAndBitshift+0x15c>)
 8005da8:	5cd3      	ldrb	r3, [r2, r3]
 8005daa:	461a      	mov	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d908      	bls.n	8005dc8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8005e3c <DMA_CalcBaseAndBitshift+0x160>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	1d1a      	adds	r2, r3, #4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005dc6:	e00d      	b.n	8005de4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <DMA_CalcBaseAndBitshift+0x160>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd6:	e005      	b.n	8005de4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40020010 	.word	0x40020010
 8005df8:	40020028 	.word	0x40020028
 8005dfc:	40020040 	.word	0x40020040
 8005e00:	40020058 	.word	0x40020058
 8005e04:	40020070 	.word	0x40020070
 8005e08:	40020088 	.word	0x40020088
 8005e0c:	400200a0 	.word	0x400200a0
 8005e10:	400200b8 	.word	0x400200b8
 8005e14:	40020410 	.word	0x40020410
 8005e18:	40020428 	.word	0x40020428
 8005e1c:	40020440 	.word	0x40020440
 8005e20:	40020458 	.word	0x40020458
 8005e24:	40020470 	.word	0x40020470
 8005e28:	40020488 	.word	0x40020488
 8005e2c:	400204a0 	.word	0x400204a0
 8005e30:	400204b8 	.word	0x400204b8
 8005e34:	aaaaaaab 	.word	0xaaaaaaab
 8005e38:	0800eefc 	.word	0x0800eefc
 8005e3c:	fffffc00 	.word	0xfffffc00

08005e40 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d120      	bne.n	8005e96 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d858      	bhi.n	8005f0e <DMA_CheckFifoParam+0xce>
 8005e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <DMA_CheckFifoParam+0x24>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005e75 	.word	0x08005e75
 8005e68:	08005e87 	.word	0x08005e87
 8005e6c:	08005e75 	.word	0x08005e75
 8005e70:	08005f0f 	.word	0x08005f0f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d048      	beq.n	8005f12 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e84:	e045      	b.n	8005f12 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e8e:	d142      	bne.n	8005f16 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e94:	e03f      	b.n	8005f16 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e9e:	d123      	bne.n	8005ee8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d838      	bhi.n	8005f1a <DMA_CheckFifoParam+0xda>
 8005ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb0 <DMA_CheckFifoParam+0x70>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ec1 	.word	0x08005ec1
 8005eb4:	08005ec7 	.word	0x08005ec7
 8005eb8:	08005ec1 	.word	0x08005ec1
 8005ebc:	08005ed9 	.word	0x08005ed9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
        break;
 8005ec4:	e030      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d025      	beq.n	8005f1e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ed6:	e022      	b.n	8005f1e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005edc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ee0:	d11f      	bne.n	8005f22 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ee6:	e01c      	b.n	8005f22 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d902      	bls.n	8005ef6 <DMA_CheckFifoParam+0xb6>
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d003      	beq.n	8005efc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ef4:	e018      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	73fb      	strb	r3, [r7, #15]
        break;
 8005efa:	e015      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00e      	beq.n	8005f26 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f0c:	e00b      	b.n	8005f26 <DMA_CheckFifoParam+0xe6>
        break;
 8005f0e:	bf00      	nop
 8005f10:	e00a      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        break;
 8005f12:	bf00      	nop
 8005f14:	e008      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        break;
 8005f16:	bf00      	nop
 8005f18:	e006      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e004      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
        break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <DMA_CheckFifoParam+0xe8>
    break;
 8005f26:	bf00      	nop
    }
  }

  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop

08005f38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a38      	ldr	r2, [pc, #224]	@ (800602c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a36      	ldr	r2, [pc, #216]	@ (8006030 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a35      	ldr	r2, [pc, #212]	@ (8006034 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d018      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a33      	ldr	r2, [pc, #204]	@ (8006038 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a32      	ldr	r2, [pc, #200]	@ (800603c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a30      	ldr	r2, [pc, #192]	@ (8006040 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a2f      	ldr	r2, [pc, #188]	@ (8006044 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a2d      	ldr	r2, [pc, #180]	@ (8006048 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d101      	bne.n	8005f9a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01a      	beq.n	8005fd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	3b08      	subs	r3, #8
 8005fa8:	4a28      	ldr	r2, [pc, #160]	@ (800604c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4b26      	ldr	r3, [pc, #152]	@ (8006050 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	461a      	mov	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a24      	ldr	r2, [pc, #144]	@ (8006054 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005fc4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2201      	movs	r2, #1
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005fd4:	e024      	b.n	8006020 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	3b10      	subs	r3, #16
 8005fde:	4a1e      	ldr	r2, [pc, #120]	@ (8006058 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe4:	091b      	lsrs	r3, r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a1c      	ldr	r2, [pc, #112]	@ (800605c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d806      	bhi.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8006060 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d902      	bls.n	8005ffe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4b18      	ldr	r3, [pc, #96]	@ (8006064 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a16      	ldr	r2, [pc, #88]	@ (8006068 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006010:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	2201      	movs	r2, #1
 800601a:	409a      	lsls	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	58025408 	.word	0x58025408
 8006030:	5802541c 	.word	0x5802541c
 8006034:	58025430 	.word	0x58025430
 8006038:	58025444 	.word	0x58025444
 800603c:	58025458 	.word	0x58025458
 8006040:	5802546c 	.word	0x5802546c
 8006044:	58025480 	.word	0x58025480
 8006048:	58025494 	.word	0x58025494
 800604c:	cccccccd 	.word	0xcccccccd
 8006050:	16009600 	.word	0x16009600
 8006054:	58025880 	.word	0x58025880
 8006058:	aaaaaaab 	.word	0xaaaaaaab
 800605c:	400204b8 	.word	0x400204b8
 8006060:	4002040f 	.word	0x4002040f
 8006064:	10008200 	.word	0x10008200
 8006068:	40020880 	.word	0x40020880

0800606c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d04a      	beq.n	8006118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b08      	cmp	r3, #8
 8006086:	d847      	bhi.n	8006118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a25      	ldr	r2, [pc, #148]	@ (8006124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d022      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a24      	ldr	r2, [pc, #144]	@ (8006128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d01d      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a22      	ldr	r2, [pc, #136]	@ (800612c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d018      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a21      	ldr	r2, [pc, #132]	@ (8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d013      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00e      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1e      	ldr	r2, [pc, #120]	@ (8006138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d009      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1c      	ldr	r2, [pc, #112]	@ (800613c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d101      	bne.n	80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80060dc:	2300      	movs	r3, #0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4b17      	ldr	r3, [pc, #92]	@ (8006144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	461a      	mov	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a15      	ldr	r2, [pc, #84]	@ (8006148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80060f4:	671a      	str	r2, [r3, #112]	@ 0x70
 80060f6:	e009      	b.n	800610c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4b14      	ldr	r3, [pc, #80]	@ (800614c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	461a      	mov	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a11      	ldr	r2, [pc, #68]	@ (8006150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800610a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3b01      	subs	r3, #1
 8006110:	2201      	movs	r2, #1
 8006112:	409a      	lsls	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	58025408 	.word	0x58025408
 8006128:	5802541c 	.word	0x5802541c
 800612c:	58025430 	.word	0x58025430
 8006130:	58025444 	.word	0x58025444
 8006134:	58025458 	.word	0x58025458
 8006138:	5802546c 	.word	0x5802546c
 800613c:	58025480 	.word	0x58025480
 8006140:	58025494 	.word	0x58025494
 8006144:	1600963f 	.word	0x1600963f
 8006148:	58025940 	.word	0x58025940
 800614c:	1000823f 	.word	0x1000823f
 8006150:	40020940 	.word	0x40020940

08006154 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006154:	b480      	push	{r7}
 8006156:	b089      	sub	sp, #36	@ 0x24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006162:	4b89      	ldr	r3, [pc, #548]	@ (8006388 <HAL_GPIO_Init+0x234>)
 8006164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006166:	e194      	b.n	8006492 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	2101      	movs	r1, #1
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	fa01 f303 	lsl.w	r3, r1, r3
 8006174:	4013      	ands	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8186 	beq.w	800648c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d005      	beq.n	8006198 <HAL_GPIO_Init+0x44>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d130      	bne.n	80061fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	2203      	movs	r2, #3
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	4013      	ands	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061ce:	2201      	movs	r2, #1
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4013      	ands	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	091b      	lsrs	r3, r3, #4
 80061e4:	f003 0201 	and.w	r2, r3, #1
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b03      	cmp	r3, #3
 8006204:	d017      	beq.n	8006236 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	2203      	movs	r2, #3
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4013      	ands	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	4313      	orrs	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d123      	bne.n	800628a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	08da      	lsrs	r2, r3, #3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3208      	adds	r2, #8
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	220f      	movs	r2, #15
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4013      	ands	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	4313      	orrs	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	08da      	lsrs	r2, r3, #3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3208      	adds	r2, #8
 8006284:	69b9      	ldr	r1, [r7, #24]
 8006286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	2203      	movs	r2, #3
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4013      	ands	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f003 0203 	and.w	r2, r3, #3
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 80e0 	beq.w	800648c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062cc:	4b2f      	ldr	r3, [pc, #188]	@ (800638c <HAL_GPIO_Init+0x238>)
 80062ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80062d2:	4a2e      	ldr	r2, [pc, #184]	@ (800638c <HAL_GPIO_Init+0x238>)
 80062d4:	f043 0302 	orr.w	r3, r3, #2
 80062d8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80062dc:	4b2b      	ldr	r3, [pc, #172]	@ (800638c <HAL_GPIO_Init+0x238>)
 80062de:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062ea:	4a29      	ldr	r2, [pc, #164]	@ (8006390 <HAL_GPIO_Init+0x23c>)
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	089b      	lsrs	r3, r3, #2
 80062f0:	3302      	adds	r3, #2
 80062f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	220f      	movs	r2, #15
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4013      	ands	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a20      	ldr	r2, [pc, #128]	@ (8006394 <HAL_GPIO_Init+0x240>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d052      	beq.n	80063bc <HAL_GPIO_Init+0x268>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a1f      	ldr	r2, [pc, #124]	@ (8006398 <HAL_GPIO_Init+0x244>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d031      	beq.n	8006382 <HAL_GPIO_Init+0x22e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a1e      	ldr	r2, [pc, #120]	@ (800639c <HAL_GPIO_Init+0x248>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d02b      	beq.n	800637e <HAL_GPIO_Init+0x22a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a1d      	ldr	r2, [pc, #116]	@ (80063a0 <HAL_GPIO_Init+0x24c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d025      	beq.n	800637a <HAL_GPIO_Init+0x226>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a1c      	ldr	r2, [pc, #112]	@ (80063a4 <HAL_GPIO_Init+0x250>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01f      	beq.n	8006376 <HAL_GPIO_Init+0x222>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a1b      	ldr	r2, [pc, #108]	@ (80063a8 <HAL_GPIO_Init+0x254>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d019      	beq.n	8006372 <HAL_GPIO_Init+0x21e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a1a      	ldr	r2, [pc, #104]	@ (80063ac <HAL_GPIO_Init+0x258>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <HAL_GPIO_Init+0x21a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a19      	ldr	r2, [pc, #100]	@ (80063b0 <HAL_GPIO_Init+0x25c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00d      	beq.n	800636a <HAL_GPIO_Init+0x216>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a18      	ldr	r2, [pc, #96]	@ (80063b4 <HAL_GPIO_Init+0x260>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d007      	beq.n	8006366 <HAL_GPIO_Init+0x212>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a17      	ldr	r2, [pc, #92]	@ (80063b8 <HAL_GPIO_Init+0x264>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d101      	bne.n	8006362 <HAL_GPIO_Init+0x20e>
 800635e:	2309      	movs	r3, #9
 8006360:	e02d      	b.n	80063be <HAL_GPIO_Init+0x26a>
 8006362:	230a      	movs	r3, #10
 8006364:	e02b      	b.n	80063be <HAL_GPIO_Init+0x26a>
 8006366:	2308      	movs	r3, #8
 8006368:	e029      	b.n	80063be <HAL_GPIO_Init+0x26a>
 800636a:	2307      	movs	r3, #7
 800636c:	e027      	b.n	80063be <HAL_GPIO_Init+0x26a>
 800636e:	2306      	movs	r3, #6
 8006370:	e025      	b.n	80063be <HAL_GPIO_Init+0x26a>
 8006372:	2305      	movs	r3, #5
 8006374:	e023      	b.n	80063be <HAL_GPIO_Init+0x26a>
 8006376:	2304      	movs	r3, #4
 8006378:	e021      	b.n	80063be <HAL_GPIO_Init+0x26a>
 800637a:	2303      	movs	r3, #3
 800637c:	e01f      	b.n	80063be <HAL_GPIO_Init+0x26a>
 800637e:	2302      	movs	r3, #2
 8006380:	e01d      	b.n	80063be <HAL_GPIO_Init+0x26a>
 8006382:	2301      	movs	r3, #1
 8006384:	e01b      	b.n	80063be <HAL_GPIO_Init+0x26a>
 8006386:	bf00      	nop
 8006388:	58000080 	.word	0x58000080
 800638c:	58024400 	.word	0x58024400
 8006390:	58000400 	.word	0x58000400
 8006394:	58020000 	.word	0x58020000
 8006398:	58020400 	.word	0x58020400
 800639c:	58020800 	.word	0x58020800
 80063a0:	58020c00 	.word	0x58020c00
 80063a4:	58021000 	.word	0x58021000
 80063a8:	58021400 	.word	0x58021400
 80063ac:	58021800 	.word	0x58021800
 80063b0:	58021c00 	.word	0x58021c00
 80063b4:	58022000 	.word	0x58022000
 80063b8:	58022400 	.word	0x58022400
 80063bc:	2300      	movs	r3, #0
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	f002 0203 	and.w	r2, r2, #3
 80063c4:	0092      	lsls	r2, r2, #2
 80063c6:	4093      	lsls	r3, r2
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063ce:	4938      	ldr	r1, [pc, #224]	@ (80064b0 <HAL_GPIO_Init+0x35c>)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	089b      	lsrs	r3, r3, #2
 80063d4:	3302      	adds	r3, #2
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	43db      	mvns	r3, r3
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	4013      	ands	r3, r2
 80063ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006402:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800640a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	43db      	mvns	r3, r3
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	4013      	ands	r3, r2
 800641a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006430:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	43db      	mvns	r3, r3
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	4013      	ands	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	43db      	mvns	r3, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4013      	ands	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	3301      	adds	r3, #1
 8006490:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	f47f ae63 	bne.w	8006168 <HAL_GPIO_Init+0x14>
  }
}
 80064a2:	bf00      	nop
 80064a4:	bf00      	nop
 80064a6:	3724      	adds	r7, #36	@ 0x24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	58000400 	.word	0x58000400

080064b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	807b      	strh	r3, [r7, #2]
 80064c0:	4613      	mov	r3, r2
 80064c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064c4:	787b      	ldrb	r3, [r7, #1]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064ca:	887a      	ldrh	r2, [r7, #2]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80064d0:	e003      	b.n	80064da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064d2:	887b      	ldrh	r3, [r7, #2]
 80064d4:	041a      	lsls	r2, r3, #16
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	619a      	str	r2, [r3, #24]
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e08b      	b.n	8006612 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fb fb34 	bl	8001b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2224      	movs	r2, #36	@ 0x24
 8006518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006538:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006548:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d107      	bne.n	8006562 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800655e:	609a      	str	r2, [r3, #8]
 8006560:	e006      	b.n	8006570 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800656e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d108      	bne.n	800658a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006586:	605a      	str	r2, [r3, #4]
 8006588:	e007      	b.n	800659a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006598:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	4b1d      	ldr	r3, [pc, #116]	@ (800661c <HAL_I2C_Init+0x134>)
 80065a6:	430b      	orrs	r3, r1
 80065a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691a      	ldr	r2, [r3, #16]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69d9      	ldr	r1, [r3, #28]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	02008000 	.word	0x02008000

08006620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	4608      	mov	r0, r1
 800662a:	4611      	mov	r1, r2
 800662c:	461a      	mov	r2, r3
 800662e:	4603      	mov	r3, r0
 8006630:	817b      	strh	r3, [r7, #10]
 8006632:	460b      	mov	r3, r1
 8006634:	813b      	strh	r3, [r7, #8]
 8006636:	4613      	mov	r3, r2
 8006638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b20      	cmp	r3, #32
 8006644:	f040 80fd 	bne.w	8006842 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_I2C_Mem_Read+0x34>
 800664e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800665a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0f1      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_I2C_Mem_Read+0x4e>
 800666a:	2302      	movs	r3, #2
 800666c:	e0ea      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006676:	f7fc fccb 	bl	8003010 <HAL_GetTick>
 800667a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	2319      	movs	r3, #25
 8006682:	2201      	movs	r2, #1
 8006684:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f95b 	bl	8006944 <I2C_WaitOnFlagUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e0d5      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2222      	movs	r2, #34	@ 0x22
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2240      	movs	r2, #64	@ 0x40
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a3a      	ldr	r2, [r7, #32]
 80066b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066c0:	88f8      	ldrh	r0, [r7, #6]
 80066c2:	893a      	ldrh	r2, [r7, #8]
 80066c4:	8979      	ldrh	r1, [r7, #10]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	4603      	mov	r3, r0
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 f8bf 	bl	8006854 <I2C_RequestMemoryRead>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0ad      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2bff      	cmp	r3, #255	@ 0xff
 80066f0:	d90e      	bls.n	8006710 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	22ff      	movs	r2, #255	@ 0xff
 80066f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	8979      	ldrh	r1, [r7, #10]
 8006700:	4b52      	ldr	r3, [pc, #328]	@ (800684c <HAL_I2C_Mem_Read+0x22c>)
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 fadf 	bl	8006ccc <I2C_TransferConfig>
 800670e:	e00f      	b.n	8006730 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800671e:	b2da      	uxtb	r2, r3
 8006720:	8979      	ldrh	r1, [r7, #10]
 8006722:	4b4a      	ldr	r3, [pc, #296]	@ (800684c <HAL_I2C_Mem_Read+0x22c>)
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 face 	bl	8006ccc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	2200      	movs	r2, #0
 8006738:	2104      	movs	r1, #4
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f902 	bl	8006944 <I2C_WaitOnFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e07c      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d034      	beq.n	80067f0 <HAL_I2C_Mem_Read+0x1d0>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d130      	bne.n	80067f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006794:	2200      	movs	r2, #0
 8006796:	2180      	movs	r1, #128	@ 0x80
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f8d3 	bl	8006944 <I2C_WaitOnFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e04d      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2bff      	cmp	r3, #255	@ 0xff
 80067b0:	d90e      	bls.n	80067d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	22ff      	movs	r2, #255	@ 0xff
 80067b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	8979      	ldrh	r1, [r7, #10]
 80067c0:	2300      	movs	r3, #0
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fa7f 	bl	8006ccc <I2C_TransferConfig>
 80067ce:	e00f      	b.n	80067f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	8979      	ldrh	r1, [r7, #10]
 80067e2:	2300      	movs	r3, #0
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fa6e 	bl	8006ccc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d19a      	bne.n	8006730 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 f940 	bl	8006a84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e01a      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2220      	movs	r2, #32
 8006814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6859      	ldr	r1, [r3, #4]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	4b0b      	ldr	r3, [pc, #44]	@ (8006850 <HAL_I2C_Mem_Read+0x230>)
 8006822:	400b      	ands	r3, r1
 8006824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e000      	b.n	8006844 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006842:	2302      	movs	r3, #2
  }
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	80002400 	.word	0x80002400
 8006850:	fe00e800 	.word	0xfe00e800

08006854 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af02      	add	r7, sp, #8
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	4608      	mov	r0, r1
 800685e:	4611      	mov	r1, r2
 8006860:	461a      	mov	r2, r3
 8006862:	4603      	mov	r3, r0
 8006864:	817b      	strh	r3, [r7, #10]
 8006866:	460b      	mov	r3, r1
 8006868:	813b      	strh	r3, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	8979      	ldrh	r1, [r7, #10]
 8006874:	4b20      	ldr	r3, [pc, #128]	@ (80068f8 <I2C_RequestMemoryRead+0xa4>)
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	2300      	movs	r3, #0
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 fa26 	bl	8006ccc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006880:	69fa      	ldr	r2, [r7, #28]
 8006882:	69b9      	ldr	r1, [r7, #24]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f8b6 	bl	80069f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e02c      	b.n	80068ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006894:	88fb      	ldrh	r3, [r7, #6]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d105      	bne.n	80068a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800689a:	893b      	ldrh	r3, [r7, #8]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80068a4:	e015      	b.n	80068d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80068a6:	893b      	ldrh	r3, [r7, #8]
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	69b9      	ldr	r1, [r7, #24]
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f89c 	bl	80069f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e012      	b.n	80068ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068c8:	893b      	ldrh	r3, [r7, #8]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2200      	movs	r2, #0
 80068da:	2140      	movs	r1, #64	@ 0x40
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 f831 	bl	8006944 <I2C_WaitOnFlagUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e000      	b.n	80068ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	80002000 	.word	0x80002000

080068fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b02      	cmp	r3, #2
 8006910:	d103      	bne.n	800691a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b01      	cmp	r3, #1
 8006926:	d007      	beq.n	8006938 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	619a      	str	r2, [r3, #24]
  }
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	4613      	mov	r3, r2
 8006952:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006954:	e03b      	b.n	80069ce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 f8d6 	bl	8006b0c <I2C_IsErrorOccurred>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e041      	b.n	80069ee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006970:	d02d      	beq.n	80069ce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006972:	f7fc fb4d 	bl	8003010 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d302      	bcc.n	8006988 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d122      	bne.n	80069ce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4013      	ands	r3, r2
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	429a      	cmp	r2, r3
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d113      	bne.n	80069ce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069aa:	f043 0220 	orr.w	r2, r3, #32
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e00f      	b.n	80069ee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699a      	ldr	r2, [r3, #24]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4013      	ands	r3, r2
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	429a      	cmp	r2, r3
 80069dc:	bf0c      	ite	eq
 80069de:	2301      	moveq	r3, #1
 80069e0:	2300      	movne	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d0b4      	beq.n	8006956 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a02:	e033      	b.n	8006a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f87f 	bl	8006b0c <I2C_IsErrorOccurred>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e031      	b.n	8006a7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1e:	d025      	beq.n	8006a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a20:	f7fc faf6 	bl	8003010 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d302      	bcc.n	8006a36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d11a      	bne.n	8006a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d013      	beq.n	8006a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e007      	b.n	8006a7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d1c4      	bne.n	8006a04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a90:	e02f      	b.n	8006af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 f838 	bl	8006b0c <I2C_IsErrorOccurred>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e02d      	b.n	8006b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa6:	f7fc fab3 	bl	8003010 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d302      	bcc.n	8006abc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d11a      	bne.n	8006af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d013      	beq.n	8006af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ace:	f043 0220 	orr.w	r2, r3, #32
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e007      	b.n	8006b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d1c8      	bne.n	8006a92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	@ 0x28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d068      	beq.n	8006c0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2210      	movs	r2, #16
 8006b3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b40:	e049      	b.n	8006bd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b48:	d045      	beq.n	8006bd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b4a:	f7fc fa61 	bl	8003010 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <I2C_IsErrorOccurred+0x54>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d13a      	bne.n	8006bd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b82:	d121      	bne.n	8006bc8 <I2C_IsErrorOccurred+0xbc>
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b8a:	d01d      	beq.n	8006bc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b8c:	7cfb      	ldrb	r3, [r7, #19]
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d01a      	beq.n	8006bc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ba0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006ba2:	f7fc fa35 	bl	8003010 <HAL_GetTick>
 8006ba6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ba8:	e00e      	b.n	8006bc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006baa:	f7fc fa31 	bl	8003010 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b19      	cmp	r3, #25
 8006bb6:	d907      	bls.n	8006bc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f043 0320 	orr.w	r3, r3, #32
 8006bbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006bc6:	e006      	b.n	8006bd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d1e9      	bne.n	8006baa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d003      	beq.n	8006bec <I2C_IsErrorOccurred+0xe0>
 8006be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0aa      	beq.n	8006b42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	f043 0304 	orr.w	r3, r3, #4
 8006c02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00b      	beq.n	8006c34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	f043 0308 	orr.w	r3, r3, #8
 8006c44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	f043 0302 	orr.w	r3, r3, #2
 8006c66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01c      	beq.n	8006cba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7ff fe3b 	bl	80068fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6859      	ldr	r1, [r3, #4]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4b0d      	ldr	r3, [pc, #52]	@ (8006cc8 <I2C_IsErrorOccurred+0x1bc>)
 8006c92:	400b      	ands	r3, r1
 8006c94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3728      	adds	r7, #40	@ 0x28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	fe00e800 	.word	0xfe00e800

08006ccc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	817b      	strh	r3, [r7, #10]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cde:	897b      	ldrh	r3, [r7, #10]
 8006ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ce4:	7a7b      	ldrb	r3, [r7, #9]
 8006ce6:	041b      	lsls	r3, r3, #16
 8006ce8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cec:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cfa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	0d5b      	lsrs	r3, r3, #21
 8006d06:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006d0a:	4b08      	ldr	r3, [pc, #32]	@ (8006d2c <I2C_TransferConfig+0x60>)
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	43db      	mvns	r3, r3
 8006d10:	ea02 0103 	and.w	r1, r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	03ff63ff 	.word	0x03ff63ff

08006d30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	d138      	bne.n	8006db8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e032      	b.n	8006dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2224      	movs	r2, #36	@ 0x24
 8006d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0201 	bic.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6819      	ldr	r1, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	e000      	b.n	8006dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006db8:	2302      	movs	r3, #2
  }
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b085      	sub	sp, #20
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	d139      	bne.n	8006e50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006de6:	2302      	movs	r3, #2
 8006de8:	e033      	b.n	8006e52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2224      	movs	r2, #36	@ 0x24
 8006df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006e18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e000      	b.n	8006e52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e50:	2302      	movs	r3, #2
  }
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
	...

08006e60 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006e68:	4b29      	ldr	r3, [pc, #164]	@ (8006f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	2b06      	cmp	r3, #6
 8006e72:	d00a      	beq.n	8006e8a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e74:	4b26      	ldr	r3, [pc, #152]	@ (8006f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d001      	beq.n	8006e86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e040      	b.n	8006f08 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e03e      	b.n	8006f08 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e8a:	4b21      	ldr	r3, [pc, #132]	@ (8006f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006e92:	491f      	ldr	r1, [pc, #124]	@ (8006f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e9a:	f7fc f8b9 	bl	8003010 <HAL_GetTick>
 8006e9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ea0:	e009      	b.n	8006eb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ea2:	f7fc f8b5 	bl	8003010 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eb0:	d901      	bls.n	8006eb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e028      	b.n	8006f08 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006eb6:	4b16      	ldr	r3, [pc, #88]	@ (8006f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec2:	d1ee      	bne.n	8006ea2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b1e      	cmp	r3, #30
 8006ec8:	d008      	beq.n	8006edc <HAL_PWREx_ConfigSupply+0x7c>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ece:	d005      	beq.n	8006edc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b1d      	cmp	r3, #29
 8006ed4:	d002      	beq.n	8006edc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b2d      	cmp	r3, #45	@ 0x2d
 8006eda:	d114      	bne.n	8006f06 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006edc:	f7fc f898 	bl	8003010 <HAL_GetTick>
 8006ee0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006ee2:	e009      	b.n	8006ef8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ee4:	f7fc f894 	bl	8003010 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ef2:	d901      	bls.n	8006ef8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e007      	b.n	8006f08 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006ef8:	4b05      	ldr	r3, [pc, #20]	@ (8006f10 <HAL_PWREx_ConfigSupply+0xb0>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f04:	d1ee      	bne.n	8006ee4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	58024800 	.word	0x58024800

08006f14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08c      	sub	sp, #48	@ 0x30
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d102      	bne.n	8006f28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f000 bc1f 	b.w	8007766 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80b3 	beq.w	800709c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f36:	4b95      	ldr	r3, [pc, #596]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f40:	4b92      	ldr	r3, [pc, #584]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d007      	beq.n	8006f5c <HAL_RCC_OscConfig+0x48>
 8006f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4e:	2b18      	cmp	r3, #24
 8006f50:	d112      	bne.n	8006f78 <HAL_RCC_OscConfig+0x64>
 8006f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f54:	f003 0303 	and.w	r3, r3, #3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d10d      	bne.n	8006f78 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f5c:	4b8b      	ldr	r3, [pc, #556]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8098 	beq.w	800709a <HAL_RCC_OscConfig+0x186>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f040 8093 	bne.w	800709a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e3f6      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f80:	d106      	bne.n	8006f90 <HAL_RCC_OscConfig+0x7c>
 8006f82:	4b82      	ldr	r3, [pc, #520]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a81      	ldr	r2, [pc, #516]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	e058      	b.n	8007042 <HAL_RCC_OscConfig+0x12e>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d112      	bne.n	8006fbe <HAL_RCC_OscConfig+0xaa>
 8006f98:	4b7c      	ldr	r3, [pc, #496]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a7b      	ldr	r2, [pc, #492]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	4b79      	ldr	r3, [pc, #484]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a78      	ldr	r2, [pc, #480]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006faa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	4b76      	ldr	r3, [pc, #472]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a75      	ldr	r2, [pc, #468]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	e041      	b.n	8007042 <HAL_RCC_OscConfig+0x12e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fc6:	d112      	bne.n	8006fee <HAL_RCC_OscConfig+0xda>
 8006fc8:	4b70      	ldr	r3, [pc, #448]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a6f      	ldr	r2, [pc, #444]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006fce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	4b6d      	ldr	r3, [pc, #436]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a6c      	ldr	r2, [pc, #432]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006fda:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a69      	ldr	r2, [pc, #420]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	e029      	b.n	8007042 <HAL_RCC_OscConfig+0x12e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006ff6:	d112      	bne.n	800701e <HAL_RCC_OscConfig+0x10a>
 8006ff8:	4b64      	ldr	r3, [pc, #400]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a63      	ldr	r2, [pc, #396]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8006ffe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	4b61      	ldr	r3, [pc, #388]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a60      	ldr	r2, [pc, #384]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 800700a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	4b5e      	ldr	r3, [pc, #376]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a5d      	ldr	r2, [pc, #372]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	e011      	b.n	8007042 <HAL_RCC_OscConfig+0x12e>
 800701e:	4b5b      	ldr	r3, [pc, #364]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a5a      	ldr	r2, [pc, #360]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	4b58      	ldr	r3, [pc, #352]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a57      	ldr	r2, [pc, #348]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007030:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4b55      	ldr	r3, [pc, #340]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a54      	ldr	r2, [pc, #336]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 800703c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007040:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d013      	beq.n	8007072 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704a:	f7fb ffe1 	bl	8003010 <HAL_GetTick>
 800704e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007050:	e008      	b.n	8007064 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007052:	f7fb ffdd 	bl	8003010 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b64      	cmp	r3, #100	@ 0x64
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e380      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007064:	4b49      	ldr	r3, [pc, #292]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0f0      	beq.n	8007052 <HAL_RCC_OscConfig+0x13e>
 8007070:	e014      	b.n	800709c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007072:	f7fb ffcd 	bl	8003010 <HAL_GetTick>
 8007076:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007078:	e008      	b.n	800708c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800707a:	f7fb ffc9 	bl	8003010 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b64      	cmp	r3, #100	@ 0x64
 8007086:	d901      	bls.n	800708c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e36c      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800708c:	4b3f      	ldr	r3, [pc, #252]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1f0      	bne.n	800707a <HAL_RCC_OscConfig+0x166>
 8007098:	e000      	b.n	800709c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 808c 	beq.w	80071c2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070aa:	4b38      	ldr	r3, [pc, #224]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070b4:	4b35      	ldr	r3, [pc, #212]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 80070b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <HAL_RCC_OscConfig+0x1bc>
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	2b18      	cmp	r3, #24
 80070c4:	d137      	bne.n	8007136 <HAL_RCC_OscConfig+0x222>
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d132      	bne.n	8007136 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070d0:	4b2e      	ldr	r3, [pc, #184]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_RCC_OscConfig+0x1d4>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e33e      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070e8:	4b28      	ldr	r3, [pc, #160]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f023 0219 	bic.w	r2, r3, #25
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	4925      	ldr	r1, [pc, #148]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fa:	f7fb ff89 	bl	8003010 <HAL_GetTick>
 80070fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007102:	f7fb ff85 	bl	8003010 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e328      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007114:	4b1d      	ldr	r3, [pc, #116]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007120:	4b1a      	ldr	r3, [pc, #104]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	061b      	lsls	r3, r3, #24
 800712e:	4917      	ldr	r1, [pc, #92]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007130:	4313      	orrs	r3, r2
 8007132:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007134:	e045      	b.n	80071c2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d028      	beq.n	8007190 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800713e:	4b13      	ldr	r3, [pc, #76]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f023 0219 	bic.w	r2, r3, #25
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	4910      	ldr	r1, [pc, #64]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 800714c:	4313      	orrs	r3, r2
 800714e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007150:	f7fb ff5e 	bl	8003010 <HAL_GetTick>
 8007154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007158:	f7fb ff5a 	bl	8003010 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e2fd      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800716a:	4b08      	ldr	r3, [pc, #32]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f0      	beq.n	8007158 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007176:	4b05      	ldr	r3, [pc, #20]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	061b      	lsls	r3, r3, #24
 8007184:	4901      	ldr	r1, [pc, #4]	@ (800718c <HAL_RCC_OscConfig+0x278>)
 8007186:	4313      	orrs	r3, r2
 8007188:	604b      	str	r3, [r1, #4]
 800718a:	e01a      	b.n	80071c2 <HAL_RCC_OscConfig+0x2ae>
 800718c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007190:	4b97      	ldr	r3, [pc, #604]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a96      	ldr	r2, [pc, #600]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 8007196:	f023 0301 	bic.w	r3, r3, #1
 800719a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719c:	f7fb ff38 	bl	8003010 <HAL_GetTick>
 80071a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071a2:	e008      	b.n	80071b6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071a4:	f7fb ff34 	bl	8003010 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e2d7      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071b6:	4b8e      	ldr	r3, [pc, #568]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f0      	bne.n	80071a4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0310 	and.w	r3, r3, #16
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d06a      	beq.n	80072a4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071ce:	4b88      	ldr	r3, [pc, #544]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071d8:	4b85      	ldr	r3, [pc, #532]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80071da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d007      	beq.n	80071f4 <HAL_RCC_OscConfig+0x2e0>
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	2b18      	cmp	r3, #24
 80071e8:	d11b      	bne.n	8007222 <HAL_RCC_OscConfig+0x30e>
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d116      	bne.n	8007222 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071f4:	4b7e      	ldr	r3, [pc, #504]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d005      	beq.n	800720c <HAL_RCC_OscConfig+0x2f8>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	2b80      	cmp	r3, #128	@ 0x80
 8007206:	d001      	beq.n	800720c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e2ac      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800720c:	4b78      	ldr	r3, [pc, #480]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	061b      	lsls	r3, r3, #24
 800721a:	4975      	ldr	r1, [pc, #468]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 800721c:	4313      	orrs	r3, r2
 800721e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007220:	e040      	b.n	80072a4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d023      	beq.n	8007272 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800722a:	4b71      	ldr	r3, [pc, #452]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a70      	ldr	r2, [pc, #448]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 8007230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007236:	f7fb feeb 	bl	8003010 <HAL_GetTick>
 800723a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800723c:	e008      	b.n	8007250 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800723e:	f7fb fee7 	bl	8003010 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e28a      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007250:	4b67      	ldr	r3, [pc, #412]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0f0      	beq.n	800723e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800725c:	4b64      	ldr	r3, [pc, #400]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	061b      	lsls	r3, r3, #24
 800726a:	4961      	ldr	r1, [pc, #388]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 800726c:	4313      	orrs	r3, r2
 800726e:	60cb      	str	r3, [r1, #12]
 8007270:	e018      	b.n	80072a4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007272:	4b5f      	ldr	r3, [pc, #380]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a5e      	ldr	r2, [pc, #376]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 8007278:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800727c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800727e:	f7fb fec7 	bl	8003010 <HAL_GetTick>
 8007282:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007284:	e008      	b.n	8007298 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007286:	f7fb fec3 	bl	8003010 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e266      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007298:	4b55      	ldr	r3, [pc, #340]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1f0      	bne.n	8007286 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d036      	beq.n	800731e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d019      	beq.n	80072ec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072b8:	4b4d      	ldr	r3, [pc, #308]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80072ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072bc:	4a4c      	ldr	r2, [pc, #304]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80072be:	f043 0301 	orr.w	r3, r3, #1
 80072c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c4:	f7fb fea4 	bl	8003010 <HAL_GetTick>
 80072c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072cc:	f7fb fea0 	bl	8003010 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e243      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072de:	4b44      	ldr	r3, [pc, #272]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80072e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0f0      	beq.n	80072cc <HAL_RCC_OscConfig+0x3b8>
 80072ea:	e018      	b.n	800731e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ec:	4b40      	ldr	r3, [pc, #256]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80072ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f0:	4a3f      	ldr	r2, [pc, #252]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80072f2:	f023 0301 	bic.w	r3, r3, #1
 80072f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f8:	f7fb fe8a 	bl	8003010 <HAL_GetTick>
 80072fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072fe:	e008      	b.n	8007312 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007300:	f7fb fe86 	bl	8003010 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e229      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007312:	4b37      	ldr	r3, [pc, #220]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 8007314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1f0      	bne.n	8007300 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d036      	beq.n	8007398 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d019      	beq.n	8007366 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007332:	4b2f      	ldr	r3, [pc, #188]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a2e      	ldr	r2, [pc, #184]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 8007338:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800733c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800733e:	f7fb fe67 	bl	8003010 <HAL_GetTick>
 8007342:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007344:	e008      	b.n	8007358 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007346:	f7fb fe63 	bl	8003010 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e206      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007358:	4b25      	ldr	r3, [pc, #148]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0f0      	beq.n	8007346 <HAL_RCC_OscConfig+0x432>
 8007364:	e018      	b.n	8007398 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007366:	4b22      	ldr	r3, [pc, #136]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a21      	ldr	r2, [pc, #132]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 800736c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007370:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007372:	f7fb fe4d 	bl	8003010 <HAL_GetTick>
 8007376:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800737a:	f7fb fe49 	bl	8003010 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e1ec      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800738c:	4b18      	ldr	r3, [pc, #96]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f0      	bne.n	800737a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80af 	beq.w	8007504 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073a6:	4b13      	ldr	r3, [pc, #76]	@ (80073f4 <HAL_RCC_OscConfig+0x4e0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a12      	ldr	r2, [pc, #72]	@ (80073f4 <HAL_RCC_OscConfig+0x4e0>)
 80073ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073b2:	f7fb fe2d 	bl	8003010 <HAL_GetTick>
 80073b6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073b8:	e008      	b.n	80073cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ba:	f7fb fe29 	bl	8003010 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	2b64      	cmp	r3, #100	@ 0x64
 80073c6:	d901      	bls.n	80073cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e1cc      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073cc:	4b09      	ldr	r3, [pc, #36]	@ (80073f4 <HAL_RCC_OscConfig+0x4e0>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0f0      	beq.n	80073ba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d10b      	bne.n	80073f8 <HAL_RCC_OscConfig+0x4e4>
 80073e0:	4b03      	ldr	r3, [pc, #12]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80073e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e4:	4a02      	ldr	r2, [pc, #8]	@ (80073f0 <HAL_RCC_OscConfig+0x4dc>)
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ec:	e05b      	b.n	80074a6 <HAL_RCC_OscConfig+0x592>
 80073ee:	bf00      	nop
 80073f0:	58024400 	.word	0x58024400
 80073f4:	58024800 	.word	0x58024800
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d112      	bne.n	8007426 <HAL_RCC_OscConfig+0x512>
 8007400:	4b9d      	ldr	r3, [pc, #628]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007404:	4a9c      	ldr	r2, [pc, #624]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007406:	f023 0301 	bic.w	r3, r3, #1
 800740a:	6713      	str	r3, [r2, #112]	@ 0x70
 800740c:	4b9a      	ldr	r3, [pc, #616]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800740e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007410:	4a99      	ldr	r2, [pc, #612]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007416:	6713      	str	r3, [r2, #112]	@ 0x70
 8007418:	4b97      	ldr	r3, [pc, #604]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800741a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741c:	4a96      	ldr	r2, [pc, #600]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800741e:	f023 0304 	bic.w	r3, r3, #4
 8007422:	6713      	str	r3, [r2, #112]	@ 0x70
 8007424:	e03f      	b.n	80074a6 <HAL_RCC_OscConfig+0x592>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	2b05      	cmp	r3, #5
 800742c:	d112      	bne.n	8007454 <HAL_RCC_OscConfig+0x540>
 800742e:	4b92      	ldr	r3, [pc, #584]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007432:	4a91      	ldr	r2, [pc, #580]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007434:	f043 0304 	orr.w	r3, r3, #4
 8007438:	6713      	str	r3, [r2, #112]	@ 0x70
 800743a:	4b8f      	ldr	r3, [pc, #572]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800743c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743e:	4a8e      	ldr	r2, [pc, #568]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007444:	6713      	str	r3, [r2, #112]	@ 0x70
 8007446:	4b8c      	ldr	r3, [pc, #560]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800744a:	4a8b      	ldr	r2, [pc, #556]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	6713      	str	r3, [r2, #112]	@ 0x70
 8007452:	e028      	b.n	80074a6 <HAL_RCC_OscConfig+0x592>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2b85      	cmp	r3, #133	@ 0x85
 800745a:	d112      	bne.n	8007482 <HAL_RCC_OscConfig+0x56e>
 800745c:	4b86      	ldr	r3, [pc, #536]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007460:	4a85      	ldr	r2, [pc, #532]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007462:	f043 0304 	orr.w	r3, r3, #4
 8007466:	6713      	str	r3, [r2, #112]	@ 0x70
 8007468:	4b83      	ldr	r3, [pc, #524]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800746a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746c:	4a82      	ldr	r2, [pc, #520]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800746e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007472:	6713      	str	r3, [r2, #112]	@ 0x70
 8007474:	4b80      	ldr	r3, [pc, #512]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007478:	4a7f      	ldr	r2, [pc, #508]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800747a:	f043 0301 	orr.w	r3, r3, #1
 800747e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007480:	e011      	b.n	80074a6 <HAL_RCC_OscConfig+0x592>
 8007482:	4b7d      	ldr	r3, [pc, #500]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007486:	4a7c      	ldr	r2, [pc, #496]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	6713      	str	r3, [r2, #112]	@ 0x70
 800748e:	4b7a      	ldr	r3, [pc, #488]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007492:	4a79      	ldr	r2, [pc, #484]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007494:	f023 0304 	bic.w	r3, r3, #4
 8007498:	6713      	str	r3, [r2, #112]	@ 0x70
 800749a:	4b77      	ldr	r3, [pc, #476]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800749c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800749e:	4a76      	ldr	r2, [pc, #472]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80074a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d015      	beq.n	80074da <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ae:	f7fb fdaf 	bl	8003010 <HAL_GetTick>
 80074b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074b4:	e00a      	b.n	80074cc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b6:	f7fb fdab 	bl	8003010 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d901      	bls.n	80074cc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e14c      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074cc:	4b6a      	ldr	r3, [pc, #424]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80074ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0ee      	beq.n	80074b6 <HAL_RCC_OscConfig+0x5a2>
 80074d8:	e014      	b.n	8007504 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074da:	f7fb fd99 	bl	8003010 <HAL_GetTick>
 80074de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074e0:	e00a      	b.n	80074f8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e2:	f7fb fd95 	bl	8003010 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d901      	bls.n	80074f8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e136      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074f8:	4b5f      	ldr	r3, [pc, #380]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80074fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1ee      	bne.n	80074e2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 812b 	beq.w	8007764 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800750e:	4b5a      	ldr	r3, [pc, #360]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007516:	2b18      	cmp	r3, #24
 8007518:	f000 80bb 	beq.w	8007692 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007520:	2b02      	cmp	r3, #2
 8007522:	f040 8095 	bne.w	8007650 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007526:	4b54      	ldr	r3, [pc, #336]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a53      	ldr	r2, [pc, #332]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800752c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007532:	f7fb fd6d 	bl	8003010 <HAL_GetTick>
 8007536:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800753a:	f7fb fd69 	bl	8003010 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e10c      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800754c:	4b4a      	ldr	r3, [pc, #296]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f0      	bne.n	800753a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007558:	4b47      	ldr	r3, [pc, #284]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800755a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800755c:	4b47      	ldr	r3, [pc, #284]	@ (800767c <HAL_RCC_OscConfig+0x768>)
 800755e:	4013      	ands	r3, r2
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007568:	0112      	lsls	r2, r2, #4
 800756a:	430a      	orrs	r2, r1
 800756c:	4942      	ldr	r1, [pc, #264]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800756e:	4313      	orrs	r3, r2
 8007570:	628b      	str	r3, [r1, #40]	@ 0x28
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007576:	3b01      	subs	r3, #1
 8007578:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007580:	3b01      	subs	r3, #1
 8007582:	025b      	lsls	r3, r3, #9
 8007584:	b29b      	uxth	r3, r3
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758c:	3b01      	subs	r3, #1
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759a:	3b01      	subs	r3, #1
 800759c:	061b      	lsls	r3, r3, #24
 800759e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075a2:	4935      	ldr	r1, [pc, #212]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80075a8:	4b33      	ldr	r3, [pc, #204]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	4a32      	ldr	r2, [pc, #200]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075b4:	4b30      	ldr	r3, [pc, #192]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075b8:	4b31      	ldr	r3, [pc, #196]	@ (8007680 <HAL_RCC_OscConfig+0x76c>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075c0:	00d2      	lsls	r2, r2, #3
 80075c2:	492d      	ldr	r1, [pc, #180]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	f023 020c 	bic.w	r2, r3, #12
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d4:	4928      	ldr	r1, [pc, #160]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075da:	4b27      	ldr	r3, [pc, #156]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	f023 0202 	bic.w	r2, r3, #2
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e6:	4924      	ldr	r1, [pc, #144]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075ec:	4b22      	ldr	r3, [pc, #136]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f0:	4a21      	ldr	r2, [pc, #132]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f8:	4b1f      	ldr	r3, [pc, #124]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 80075fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007604:	4b1c      	ldr	r3, [pc, #112]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007608:	4a1b      	ldr	r2, [pc, #108]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800760a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800760e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007610:	4b19      	ldr	r3, [pc, #100]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	4a18      	ldr	r2, [pc, #96]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007616:	f043 0301 	orr.w	r3, r3, #1
 800761a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800761c:	4b16      	ldr	r3, [pc, #88]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a15      	ldr	r2, [pc, #84]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fb fcf2 	bl	8003010 <HAL_GetTick>
 800762c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007630:	f7fb fcee 	bl	8003010 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b02      	cmp	r3, #2
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e091      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007642:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f0      	beq.n	8007630 <HAL_RCC_OscConfig+0x71c>
 800764e:	e089      	b.n	8007764 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007650:	4b09      	ldr	r3, [pc, #36]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a08      	ldr	r2, [pc, #32]	@ (8007678 <HAL_RCC_OscConfig+0x764>)
 8007656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800765a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765c:	f7fb fcd8 	bl	8003010 <HAL_GetTick>
 8007660:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007662:	e00f      	b.n	8007684 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007664:	f7fb fcd4 	bl	8003010 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d908      	bls.n	8007684 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e077      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
 8007676:	bf00      	nop
 8007678:	58024400 	.word	0x58024400
 800767c:	fffffc0c 	.word	0xfffffc0c
 8007680:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007684:	4b3a      	ldr	r3, [pc, #232]	@ (8007770 <HAL_RCC_OscConfig+0x85c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e9      	bne.n	8007664 <HAL_RCC_OscConfig+0x750>
 8007690:	e068      	b.n	8007764 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007692:	4b37      	ldr	r3, [pc, #220]	@ (8007770 <HAL_RCC_OscConfig+0x85c>)
 8007694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007696:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007698:	4b35      	ldr	r3, [pc, #212]	@ (8007770 <HAL_RCC_OscConfig+0x85c>)
 800769a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d031      	beq.n	800770a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f003 0203 	and.w	r2, r3, #3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d12a      	bne.n	800770a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	091b      	lsrs	r3, r3, #4
 80076b8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d122      	bne.n	800770a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d11a      	bne.n	800770a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	0a5b      	lsrs	r3, r3, #9
 80076d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d111      	bne.n	800770a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	0c1b      	lsrs	r3, r3, #16
 80076ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d108      	bne.n	800770a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	0e1b      	lsrs	r3, r3, #24
 80076fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007704:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007706:	429a      	cmp	r2, r3
 8007708:	d001      	beq.n	800770e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e02b      	b.n	8007766 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800770e:	4b18      	ldr	r3, [pc, #96]	@ (8007770 <HAL_RCC_OscConfig+0x85c>)
 8007710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007712:	08db      	lsrs	r3, r3, #3
 8007714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007718:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	429a      	cmp	r2, r3
 8007722:	d01f      	beq.n	8007764 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007724:	4b12      	ldr	r3, [pc, #72]	@ (8007770 <HAL_RCC_OscConfig+0x85c>)
 8007726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007728:	4a11      	ldr	r2, [pc, #68]	@ (8007770 <HAL_RCC_OscConfig+0x85c>)
 800772a:	f023 0301 	bic.w	r3, r3, #1
 800772e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007730:	f7fb fc6e 	bl	8003010 <HAL_GetTick>
 8007734:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007736:	bf00      	nop
 8007738:	f7fb fc6a 	bl	8003010 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007740:	4293      	cmp	r3, r2
 8007742:	d0f9      	beq.n	8007738 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007744:	4b0a      	ldr	r3, [pc, #40]	@ (8007770 <HAL_RCC_OscConfig+0x85c>)
 8007746:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007748:	4b0a      	ldr	r3, [pc, #40]	@ (8007774 <HAL_RCC_OscConfig+0x860>)
 800774a:	4013      	ands	r3, r2
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007750:	00d2      	lsls	r2, r2, #3
 8007752:	4907      	ldr	r1, [pc, #28]	@ (8007770 <HAL_RCC_OscConfig+0x85c>)
 8007754:	4313      	orrs	r3, r2
 8007756:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007758:	4b05      	ldr	r3, [pc, #20]	@ (8007770 <HAL_RCC_OscConfig+0x85c>)
 800775a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775c:	4a04      	ldr	r2, [pc, #16]	@ (8007770 <HAL_RCC_OscConfig+0x85c>)
 800775e:	f043 0301 	orr.w	r3, r3, #1
 8007762:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3730      	adds	r7, #48	@ 0x30
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	58024400 	.word	0x58024400
 8007774:	ffff0007 	.word	0xffff0007

08007778 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e19c      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800778c:	4b8a      	ldr	r3, [pc, #552]	@ (80079b8 <HAL_RCC_ClockConfig+0x240>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d910      	bls.n	80077bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800779a:	4b87      	ldr	r3, [pc, #540]	@ (80079b8 <HAL_RCC_ClockConfig+0x240>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f023 020f 	bic.w	r2, r3, #15
 80077a2:	4985      	ldr	r1, [pc, #532]	@ (80079b8 <HAL_RCC_ClockConfig+0x240>)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077aa:	4b83      	ldr	r3, [pc, #524]	@ (80079b8 <HAL_RCC_ClockConfig+0x240>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d001      	beq.n	80077bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e184      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d010      	beq.n	80077ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	4b7b      	ldr	r3, [pc, #492]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d908      	bls.n	80077ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077d8:	4b78      	ldr	r3, [pc, #480]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	4975      	ldr	r1, [pc, #468]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0308 	and.w	r3, r3, #8
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d010      	beq.n	8007818 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695a      	ldr	r2, [r3, #20]
 80077fa:	4b70      	ldr	r3, [pc, #448]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007802:	429a      	cmp	r2, r3
 8007804:	d908      	bls.n	8007818 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007806:	4b6d      	ldr	r3, [pc, #436]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	496a      	ldr	r1, [pc, #424]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007814:	4313      	orrs	r3, r2
 8007816:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	2b00      	cmp	r3, #0
 8007822:	d010      	beq.n	8007846 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699a      	ldr	r2, [r3, #24]
 8007828:	4b64      	ldr	r3, [pc, #400]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007830:	429a      	cmp	r2, r3
 8007832:	d908      	bls.n	8007846 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007834:	4b61      	ldr	r3, [pc, #388]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	495e      	ldr	r1, [pc, #376]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007842:	4313      	orrs	r3, r2
 8007844:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d010      	beq.n	8007874 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	69da      	ldr	r2, [r3, #28]
 8007856:	4b59      	ldr	r3, [pc, #356]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800785e:	429a      	cmp	r2, r3
 8007860:	d908      	bls.n	8007874 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007862:	4b56      	ldr	r3, [pc, #344]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	4953      	ldr	r1, [pc, #332]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007870:	4313      	orrs	r3, r2
 8007872:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d010      	beq.n	80078a2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	4b4d      	ldr	r3, [pc, #308]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f003 030f 	and.w	r3, r3, #15
 800788c:	429a      	cmp	r2, r3
 800788e:	d908      	bls.n	80078a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007890:	4b4a      	ldr	r3, [pc, #296]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	f023 020f 	bic.w	r2, r3, #15
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	4947      	ldr	r1, [pc, #284]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d055      	beq.n	800795a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80078ae:	4b43      	ldr	r3, [pc, #268]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	4940      	ldr	r1, [pc, #256]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d107      	bne.n	80078d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078c8:	4b3c      	ldr	r3, [pc, #240]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d121      	bne.n	8007918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e0f6      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d107      	bne.n	80078f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078e0:	4b36      	ldr	r3, [pc, #216]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d115      	bne.n	8007918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e0ea      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d107      	bne.n	8007908 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078f8:	4b30      	ldr	r3, [pc, #192]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007900:	2b00      	cmp	r3, #0
 8007902:	d109      	bne.n	8007918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e0de      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007908:	4b2c      	ldr	r3, [pc, #176]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e0d6      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007918:	4b28      	ldr	r3, [pc, #160]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f023 0207 	bic.w	r2, r3, #7
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4925      	ldr	r1, [pc, #148]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007926:	4313      	orrs	r3, r2
 8007928:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800792a:	f7fb fb71 	bl	8003010 <HAL_GetTick>
 800792e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007930:	e00a      	b.n	8007948 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007932:	f7fb fb6d 	bl	8003010 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007940:	4293      	cmp	r3, r2
 8007942:	d901      	bls.n	8007948 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e0be      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007948:	4b1c      	ldr	r3, [pc, #112]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	429a      	cmp	r2, r3
 8007958:	d1eb      	bne.n	8007932 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d010      	beq.n	8007988 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	4b14      	ldr	r3, [pc, #80]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	429a      	cmp	r2, r3
 8007974:	d208      	bcs.n	8007988 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007976:	4b11      	ldr	r3, [pc, #68]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	f023 020f 	bic.w	r2, r3, #15
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	490e      	ldr	r1, [pc, #56]	@ (80079bc <HAL_RCC_ClockConfig+0x244>)
 8007984:	4313      	orrs	r3, r2
 8007986:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007988:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <HAL_RCC_ClockConfig+0x240>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 030f 	and.w	r3, r3, #15
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d214      	bcs.n	80079c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007996:	4b08      	ldr	r3, [pc, #32]	@ (80079b8 <HAL_RCC_ClockConfig+0x240>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f023 020f 	bic.w	r2, r3, #15
 800799e:	4906      	ldr	r1, [pc, #24]	@ (80079b8 <HAL_RCC_ClockConfig+0x240>)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a6:	4b04      	ldr	r3, [pc, #16]	@ (80079b8 <HAL_RCC_ClockConfig+0x240>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d005      	beq.n	80079c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e086      	b.n	8007ac6 <HAL_RCC_ClockConfig+0x34e>
 80079b8:	52002000 	.word	0x52002000
 80079bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d010      	beq.n	80079ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691a      	ldr	r2, [r3, #16]
 80079d0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079d8:	429a      	cmp	r2, r3
 80079da:	d208      	bcs.n	80079ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079dc:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	4939      	ldr	r1, [pc, #228]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d010      	beq.n	8007a1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695a      	ldr	r2, [r3, #20]
 80079fe:	4b34      	ldr	r3, [pc, #208]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d208      	bcs.n	8007a1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a0a:	4b31      	ldr	r3, [pc, #196]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	492e      	ldr	r1, [pc, #184]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d010      	beq.n	8007a4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699a      	ldr	r2, [r3, #24]
 8007a2c:	4b28      	ldr	r3, [pc, #160]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d208      	bcs.n	8007a4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a38:	4b25      	ldr	r3, [pc, #148]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	4922      	ldr	r1, [pc, #136]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d010      	beq.n	8007a78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	69da      	ldr	r2, [r3, #28]
 8007a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d208      	bcs.n	8007a78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a66:	4b1a      	ldr	r3, [pc, #104]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	4917      	ldr	r1, [pc, #92]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007a78:	f000 f834 	bl	8007ae4 <HAL_RCC_GetSysClockFreq>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	4b14      	ldr	r3, [pc, #80]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	f003 030f 	and.w	r3, r3, #15
 8007a88:	4912      	ldr	r1, [pc, #72]	@ (8007ad4 <HAL_RCC_ClockConfig+0x35c>)
 8007a8a:	5ccb      	ldrb	r3, [r1, r3]
 8007a8c:	f003 031f 	and.w	r3, r3, #31
 8007a90:	fa22 f303 	lsr.w	r3, r2, r3
 8007a94:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007a96:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad0 <HAL_RCC_ClockConfig+0x358>)
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8007ad4 <HAL_RCC_ClockConfig+0x35c>)
 8007aa0:	5cd3      	ldrb	r3, [r2, r3]
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad8 <HAL_RCC_ClockConfig+0x360>)
 8007aae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8007adc <HAL_RCC_ClockConfig+0x364>)
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae0 <HAL_RCC_ClockConfig+0x368>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fb fa5e 	bl	8002f7c <HAL_InitTick>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	58024400 	.word	0x58024400
 8007ad4:	0800eeec 	.word	0x0800eeec
 8007ad8:	24000004 	.word	0x24000004
 8007adc:	24000000 	.word	0x24000000
 8007ae0:	24000008 	.word	0x24000008

08007ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b089      	sub	sp, #36	@ 0x24
 8007ae8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007aea:	4bb3      	ldr	r3, [pc, #716]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007af2:	2b18      	cmp	r3, #24
 8007af4:	f200 8155 	bhi.w	8007da2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007af8:	a201      	add	r2, pc, #4	@ (adr r2, 8007b00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007b65 	.word	0x08007b65
 8007b04:	08007da3 	.word	0x08007da3
 8007b08:	08007da3 	.word	0x08007da3
 8007b0c:	08007da3 	.word	0x08007da3
 8007b10:	08007da3 	.word	0x08007da3
 8007b14:	08007da3 	.word	0x08007da3
 8007b18:	08007da3 	.word	0x08007da3
 8007b1c:	08007da3 	.word	0x08007da3
 8007b20:	08007b8b 	.word	0x08007b8b
 8007b24:	08007da3 	.word	0x08007da3
 8007b28:	08007da3 	.word	0x08007da3
 8007b2c:	08007da3 	.word	0x08007da3
 8007b30:	08007da3 	.word	0x08007da3
 8007b34:	08007da3 	.word	0x08007da3
 8007b38:	08007da3 	.word	0x08007da3
 8007b3c:	08007da3 	.word	0x08007da3
 8007b40:	08007b91 	.word	0x08007b91
 8007b44:	08007da3 	.word	0x08007da3
 8007b48:	08007da3 	.word	0x08007da3
 8007b4c:	08007da3 	.word	0x08007da3
 8007b50:	08007da3 	.word	0x08007da3
 8007b54:	08007da3 	.word	0x08007da3
 8007b58:	08007da3 	.word	0x08007da3
 8007b5c:	08007da3 	.word	0x08007da3
 8007b60:	08007b97 	.word	0x08007b97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b64:	4b94      	ldr	r3, [pc, #592]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d009      	beq.n	8007b84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b70:	4b91      	ldr	r3, [pc, #580]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	08db      	lsrs	r3, r3, #3
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	4a90      	ldr	r2, [pc, #576]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007b82:	e111      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b84:	4b8d      	ldr	r3, [pc, #564]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b86:	61bb      	str	r3, [r7, #24]
      break;
 8007b88:	e10e      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b8c:	61bb      	str	r3, [r7, #24]
      break;
 8007b8e:	e10b      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007b90:	4b8c      	ldr	r3, [pc, #560]	@ (8007dc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b92:	61bb      	str	r3, [r7, #24]
      break;
 8007b94:	e108      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b96:	4b88      	ldr	r3, [pc, #544]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007ba0:	4b85      	ldr	r3, [pc, #532]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba4:	091b      	lsrs	r3, r3, #4
 8007ba6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007baa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007bac:	4b82      	ldr	r3, [pc, #520]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007bb6:	4b80      	ldr	r3, [pc, #512]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bba:	08db      	lsrs	r3, r3, #3
 8007bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	fb02 f303 	mul.w	r3, r2, r3
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 80e1 	beq.w	8007d9c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	f000 8083 	beq.w	8007ce8 <HAL_RCC_GetSysClockFreq+0x204>
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	f200 80a1 	bhi.w	8007d2c <HAL_RCC_GetSysClockFreq+0x248>
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_RCC_GetSysClockFreq+0x114>
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d056      	beq.n	8007ca4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007bf6:	e099      	b.n	8007d2c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d02d      	beq.n	8007c60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c04:	4b6c      	ldr	r3, [pc, #432]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	08db      	lsrs	r3, r3, #3
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	4a6b      	ldr	r2, [pc, #428]	@ (8007dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c10:	fa22 f303 	lsr.w	r3, r2, r3
 8007c14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	ee07 3a90 	vmov	s15, r3
 8007c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2e:	4b62      	ldr	r3, [pc, #392]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c42:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c5e:	e087      	b.n	8007d70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007dcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c72:	4b51      	ldr	r3, [pc, #324]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c86:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ca2:	e065      	b.n	8007d70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007dd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb6:	4b40      	ldr	r3, [pc, #256]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ce6:	e043      	b.n	8007d70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007dd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d0e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d2a:	e021      	b.n	8007d70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d36:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007dd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d52:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d70:	4b11      	ldr	r3, [pc, #68]	@ (8007db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d74:	0a5b      	lsrs	r3, r3, #9
 8007d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	ee07 3a90 	vmov	s15, r3
 8007d84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d94:	ee17 3a90 	vmov	r3, s15
 8007d98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007d9a:	e005      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
      break;
 8007da0:	e002      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007da2:	4b07      	ldr	r3, [pc, #28]	@ (8007dc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007da4:	61bb      	str	r3, [r7, #24]
      break;
 8007da6:	bf00      	nop
  }

  return sysclockfreq;
 8007da8:	69bb      	ldr	r3, [r7, #24]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3724      	adds	r7, #36	@ 0x24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	58024400 	.word	0x58024400
 8007dbc:	03d09000 	.word	0x03d09000
 8007dc0:	003d0900 	.word	0x003d0900
 8007dc4:	007a1200 	.word	0x007a1200
 8007dc8:	46000000 	.word	0x46000000
 8007dcc:	4c742400 	.word	0x4c742400
 8007dd0:	4a742400 	.word	0x4a742400
 8007dd4:	4af42400 	.word	0x4af42400

08007dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007dde:	f7ff fe81 	bl	8007ae4 <HAL_RCC_GetSysClockFreq>
 8007de2:	4602      	mov	r2, r0
 8007de4:	4b10      	ldr	r3, [pc, #64]	@ (8007e28 <HAL_RCC_GetHCLKFreq+0x50>)
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	0a1b      	lsrs	r3, r3, #8
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	490f      	ldr	r1, [pc, #60]	@ (8007e2c <HAL_RCC_GetHCLKFreq+0x54>)
 8007df0:	5ccb      	ldrb	r3, [r1, r3]
 8007df2:	f003 031f 	and.w	r3, r3, #31
 8007df6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dfa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007e28 <HAL_RCC_GetHCLKFreq+0x50>)
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	f003 030f 	and.w	r3, r3, #15
 8007e04:	4a09      	ldr	r2, [pc, #36]	@ (8007e2c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e06:	5cd3      	ldrb	r3, [r2, r3]
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e12:	4a07      	ldr	r2, [pc, #28]	@ (8007e30 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e16:	4a07      	ldr	r2, [pc, #28]	@ (8007e34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e1c:	4b04      	ldr	r3, [pc, #16]	@ (8007e30 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	58024400 	.word	0x58024400
 8007e2c:	0800eeec 	.word	0x0800eeec
 8007e30:	24000004 	.word	0x24000004
 8007e34:	24000000 	.word	0x24000000

08007e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007e3c:	f7ff ffcc 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8007e40:	4602      	mov	r2, r0
 8007e42:	4b06      	ldr	r3, [pc, #24]	@ (8007e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	091b      	lsrs	r3, r3, #4
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	4904      	ldr	r1, [pc, #16]	@ (8007e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e4e:	5ccb      	ldrb	r3, [r1, r3]
 8007e50:	f003 031f 	and.w	r3, r3, #31
 8007e54:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	58024400 	.word	0x58024400
 8007e60:	0800eeec 	.word	0x0800eeec

08007e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007e68:	f7ff ffb6 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	0a1b      	lsrs	r3, r3, #8
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	4904      	ldr	r1, [pc, #16]	@ (8007e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e7a:	5ccb      	ldrb	r3, [r1, r3]
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	58024400 	.word	0x58024400
 8007e8c:	0800eeec 	.word	0x0800eeec

08007e90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e94:	b0c8      	sub	sp, #288	@ 0x120
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007eb4:	2500      	movs	r5, #0
 8007eb6:	ea54 0305 	orrs.w	r3, r4, r5
 8007eba:	d049      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ec6:	d02f      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007ec8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ecc:	d828      	bhi.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007ece:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ed2:	d01a      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007ed4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ed8:	d822      	bhi.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ee2:	d007      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ee4:	e01c      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee6:	4ba7      	ldr	r3, [pc, #668]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eea:	4aa6      	ldr	r2, [pc, #664]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ef2:	e01a      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ef8:	3308      	adds	r3, #8
 8007efa:	2102      	movs	r1, #2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f001 fc43 	bl	8009788 <RCCEx_PLL2_Config>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f08:	e00f      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f0e:	3328      	adds	r3, #40	@ 0x28
 8007f10:	2102      	movs	r1, #2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 fcea 	bl	80098ec <RCCEx_PLL3_Config>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f1e:	e004      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f26:	e000      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f32:	4b94      	ldr	r3, [pc, #592]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f40:	4a90      	ldr	r2, [pc, #576]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f42:	430b      	orrs	r3, r1
 8007f44:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f46:	e003      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007f5c:	f04f 0900 	mov.w	r9, #0
 8007f60:	ea58 0309 	orrs.w	r3, r8, r9
 8007f64:	d047      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d82a      	bhi.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007f70:	a201      	add	r2, pc, #4	@ (adr r2, 8007f78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007f8d 	.word	0x08007f8d
 8007f7c:	08007f9b 	.word	0x08007f9b
 8007f80:	08007fb1 	.word	0x08007fb1
 8007f84:	08007fcf 	.word	0x08007fcf
 8007f88:	08007fcf 	.word	0x08007fcf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f8c:	4b7d      	ldr	r3, [pc, #500]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	4a7c      	ldr	r2, [pc, #496]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f98:	e01a      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 fbf0 	bl	8009788 <RCCEx_PLL2_Config>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fae:	e00f      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb4:	3328      	adds	r3, #40	@ 0x28
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 fc97 	bl	80098ec <RCCEx_PLL3_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fc4:	e004      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fcc:	e000      	b.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fdc:	f023 0107 	bic.w	r1, r3, #7
 8007fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe6:	4a67      	ldr	r2, [pc, #412]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fec:	e003      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ff2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008002:	f04f 0b00 	mov.w	fp, #0
 8008006:	ea5a 030b 	orrs.w	r3, sl, fp
 800800a:	d054      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800800c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008012:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008016:	d036      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008018:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800801c:	d82f      	bhi.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800801e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008022:	d032      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008028:	d829      	bhi.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800802a:	2bc0      	cmp	r3, #192	@ 0xc0
 800802c:	d02f      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800802e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008030:	d825      	bhi.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008032:	2b80      	cmp	r3, #128	@ 0x80
 8008034:	d018      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008036:	2b80      	cmp	r3, #128	@ 0x80
 8008038:	d821      	bhi.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800803e:	2b40      	cmp	r3, #64	@ 0x40
 8008040:	d007      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8008042:	e01c      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008044:	4b4f      	ldr	r3, [pc, #316]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008048:	4a4e      	ldr	r2, [pc, #312]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800804a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800804e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008050:	e01e      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008056:	3308      	adds	r3, #8
 8008058:	2100      	movs	r1, #0
 800805a:	4618      	mov	r0, r3
 800805c:	f001 fb94 	bl	8009788 <RCCEx_PLL2_Config>
 8008060:	4603      	mov	r3, r0
 8008062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008066:	e013      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800806c:	3328      	adds	r3, #40	@ 0x28
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f001 fc3b 	bl	80098ec <RCCEx_PLL3_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800807c:	e008      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008084:	e004      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008086:	bf00      	nop
 8008088:	e002      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800808a:	bf00      	nop
 800808c:	e000      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800808e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008090:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008098:	4b3a      	ldr	r3, [pc, #232]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800809a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800809c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80080a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080a6:	4a37      	ldr	r2, [pc, #220]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80080ac:	e003      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80080b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80080c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80080c6:	2300      	movs	r3, #0
 80080c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80080cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80080d0:	460b      	mov	r3, r1
 80080d2:	4313      	orrs	r3, r2
 80080d4:	d05c      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80080d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80080e0:	d03b      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80080e2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80080e6:	d834      	bhi.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80080e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ec:	d037      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80080ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080f2:	d82e      	bhi.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80080f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80080f8:	d033      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80080fa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80080fe:	d828      	bhi.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008104:	d01a      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800810a:	d822      	bhi.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008114:	d007      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008116:	e01c      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008118:	4b1a      	ldr	r3, [pc, #104]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800811a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811c:	4a19      	ldr	r2, [pc, #100]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800811e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008124:	e01e      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812a:	3308      	adds	r3, #8
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f001 fb2a 	bl	8009788 <RCCEx_PLL2_Config>
 8008134:	4603      	mov	r3, r0
 8008136:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800813a:	e013      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800813c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008140:	3328      	adds	r3, #40	@ 0x28
 8008142:	2100      	movs	r1, #0
 8008144:	4618      	mov	r0, r3
 8008146:	f001 fbd1 	bl	80098ec <RCCEx_PLL3_Config>
 800814a:	4603      	mov	r3, r0
 800814c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008150:	e008      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008158:	e004      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800815a:	bf00      	nop
 800815c:	e002      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800815e:	bf00      	nop
 8008160:	e000      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10d      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800816c:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800816e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008170:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800817a:	4a02      	ldr	r2, [pc, #8]	@ (8008184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800817c:	430b      	orrs	r3, r1
 800817e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008180:	e006      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008182:	bf00      	nop
 8008184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008188:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800818c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800819c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80081a0:	2300      	movs	r3, #0
 80081a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80081a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80081aa:	460b      	mov	r3, r1
 80081ac:	4313      	orrs	r3, r2
 80081ae:	d03a      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80081b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081b6:	2b30      	cmp	r3, #48	@ 0x30
 80081b8:	d01f      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80081ba:	2b30      	cmp	r3, #48	@ 0x30
 80081bc:	d819      	bhi.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d00c      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	d815      	bhi.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d019      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80081ca:	2b10      	cmp	r3, #16
 80081cc:	d111      	bne.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ce:	4bae      	ldr	r3, [pc, #696]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	4aad      	ldr	r2, [pc, #692]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80081da:	e011      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e0:	3308      	adds	r3, #8
 80081e2:	2102      	movs	r1, #2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 facf 	bl	8009788 <RCCEx_PLL2_Config>
 80081ea:	4603      	mov	r3, r0
 80081ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80081f0:	e006      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081f8:	e002      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80081fa:	bf00      	nop
 80081fc:	e000      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80081fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008200:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008208:	4b9f      	ldr	r3, [pc, #636]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800820a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800820c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008216:	4a9c      	ldr	r2, [pc, #624]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008218:	430b      	orrs	r3, r1
 800821a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800821c:	e003      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800821e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008222:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008232:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008236:	2300      	movs	r3, #0
 8008238:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800823c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008240:	460b      	mov	r3, r1
 8008242:	4313      	orrs	r3, r2
 8008244:	d051      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800824a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800824c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008250:	d035      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008252:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008256:	d82e      	bhi.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008258:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800825c:	d031      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800825e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008262:	d828      	bhi.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008268:	d01a      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800826a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800826e:	d822      	bhi.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008278:	d007      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800827a:	e01c      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800827c:	4b82      	ldr	r3, [pc, #520]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800827e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008280:	4a81      	ldr	r2, [pc, #516]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008288:	e01c      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800828a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800828e:	3308      	adds	r3, #8
 8008290:	2100      	movs	r1, #0
 8008292:	4618      	mov	r0, r3
 8008294:	f001 fa78 	bl	8009788 <RCCEx_PLL2_Config>
 8008298:	4603      	mov	r3, r0
 800829a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800829e:	e011      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082a4:	3328      	adds	r3, #40	@ 0x28
 80082a6:	2100      	movs	r1, #0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 fb1f 	bl	80098ec <RCCEx_PLL3_Config>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80082b4:	e006      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082bc:	e002      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80082be:	bf00      	nop
 80082c0:	e000      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80082c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80082cc:	4b6e      	ldr	r3, [pc, #440]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80082d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082da:	4a6b      	ldr	r2, [pc, #428]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082dc:	430b      	orrs	r3, r1
 80082de:	6513      	str	r3, [r2, #80]	@ 0x50
 80082e0:	e003      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80082ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80082f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082fa:	2300      	movs	r3, #0
 80082fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008300:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008304:	460b      	mov	r3, r1
 8008306:	4313      	orrs	r3, r2
 8008308:	d053      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800830a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800830e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008314:	d033      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008316:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800831a:	d82c      	bhi.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800831c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008320:	d02f      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008322:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008326:	d826      	bhi.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008328:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800832c:	d02b      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800832e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008332:	d820      	bhi.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008338:	d012      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800833a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800833e:	d81a      	bhi.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008340:	2b00      	cmp	r3, #0
 8008342:	d022      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008348:	d115      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800834a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800834e:	3308      	adds	r3, #8
 8008350:	2101      	movs	r1, #1
 8008352:	4618      	mov	r0, r3
 8008354:	f001 fa18 	bl	8009788 <RCCEx_PLL2_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800835e:	e015      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008364:	3328      	adds	r3, #40	@ 0x28
 8008366:	2101      	movs	r1, #1
 8008368:	4618      	mov	r0, r3
 800836a:	f001 fabf 	bl	80098ec <RCCEx_PLL3_Config>
 800836e:	4603      	mov	r3, r0
 8008370:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008374:	e00a      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800837c:	e006      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800837e:	bf00      	nop
 8008380:	e004      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008382:	bf00      	nop
 8008384:	e002      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008386:	bf00      	nop
 8008388:	e000      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800838a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008394:	4b3c      	ldr	r3, [pc, #240]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008398:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800839c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083a2:	4a39      	ldr	r2, [pc, #228]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083a4:	430b      	orrs	r3, r1
 80083a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80083a8:	e003      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80083b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80083be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083c2:	2300      	movs	r3, #0
 80083c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4313      	orrs	r3, r2
 80083d0:	d060      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80083d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80083da:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80083de:	d039      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80083e0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80083e4:	d832      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083ea:	d035      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80083ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083f0:	d82c      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f6:	d031      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80083f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083fc:	d826      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008402:	d02d      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008404:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008408:	d820      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800840a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800840e:	d012      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008414:	d81a      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d024      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800841a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800841e:	d115      	bne.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008424:	3308      	adds	r3, #8
 8008426:	2101      	movs	r1, #1
 8008428:	4618      	mov	r0, r3
 800842a:	f001 f9ad 	bl	8009788 <RCCEx_PLL2_Config>
 800842e:	4603      	mov	r3, r0
 8008430:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008434:	e017      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800843a:	3328      	adds	r3, #40	@ 0x28
 800843c:	2101      	movs	r1, #1
 800843e:	4618      	mov	r0, r3
 8008440:	f001 fa54 	bl	80098ec <RCCEx_PLL3_Config>
 8008444:	4603      	mov	r3, r0
 8008446:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800844a:	e00c      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008452:	e008      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008454:	bf00      	nop
 8008456:	e006      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008458:	bf00      	nop
 800845a:	e004      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800845c:	bf00      	nop
 800845e:	e002      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008460:	bf00      	nop
 8008462:	e000      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008466:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10e      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800846e:	4b06      	ldr	r3, [pc, #24]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008472:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800847a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800847e:	4a02      	ldr	r2, [pc, #8]	@ (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008480:	430b      	orrs	r3, r1
 8008482:	6593      	str	r3, [r2, #88]	@ 0x58
 8008484:	e006      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008486:	bf00      	nop
 8008488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008490:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80084a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084a4:	2300      	movs	r3, #0
 80084a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084ae:	460b      	mov	r3, r1
 80084b0:	4313      	orrs	r3, r2
 80084b2:	d037      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80084b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084be:	d00e      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80084c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084c4:	d816      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d018      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80084ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ce:	d111      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084d0:	4bc4      	ldr	r3, [pc, #784]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d4:	4ac3      	ldr	r2, [pc, #780]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80084dc:	e00f      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e2:	3308      	adds	r3, #8
 80084e4:	2101      	movs	r1, #1
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 f94e 	bl	8009788 <RCCEx_PLL2_Config>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80084f2:	e004      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084fa:	e000      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80084fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10a      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008506:	4bb7      	ldr	r3, [pc, #732]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800850a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800850e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008512:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008514:	4ab3      	ldr	r2, [pc, #716]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008516:	430b      	orrs	r3, r1
 8008518:	6513      	str	r3, [r2, #80]	@ 0x50
 800851a:	e003      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008520:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008534:	2300      	movs	r3, #0
 8008536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800853a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800853e:	460b      	mov	r3, r1
 8008540:	4313      	orrs	r3, r2
 8008542:	d039      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800854a:	2b03      	cmp	r3, #3
 800854c:	d81c      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800854e:	a201      	add	r2, pc, #4	@ (adr r2, 8008554 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008554:	08008591 	.word	0x08008591
 8008558:	08008565 	.word	0x08008565
 800855c:	08008573 	.word	0x08008573
 8008560:	08008591 	.word	0x08008591
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008564:	4b9f      	ldr	r3, [pc, #636]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008568:	4a9e      	ldr	r2, [pc, #632]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800856a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800856e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008570:	e00f      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008576:	3308      	adds	r3, #8
 8008578:	2102      	movs	r1, #2
 800857a:	4618      	mov	r0, r3
 800857c:	f001 f904 	bl	8009788 <RCCEx_PLL2_Config>
 8008580:	4603      	mov	r3, r0
 8008582:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008586:	e004      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800858e:	e000      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008592:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10a      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800859a:	4b92      	ldr	r3, [pc, #584]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800859c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800859e:	f023 0103 	bic.w	r1, r3, #3
 80085a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085a8:	4a8e      	ldr	r2, [pc, #568]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085aa:	430b      	orrs	r3, r1
 80085ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80085ae:	e003      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80085c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80085d2:	460b      	mov	r3, r1
 80085d4:	4313      	orrs	r3, r2
 80085d6:	f000 8099 	beq.w	800870c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085da:	4b83      	ldr	r3, [pc, #524]	@ (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a82      	ldr	r2, [pc, #520]	@ (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80085e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085e6:	f7fa fd13 	bl	8003010 <HAL_GetTick>
 80085ea:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085ee:	e00b      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085f0:	f7fa fd0e 	bl	8003010 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b64      	cmp	r3, #100	@ 0x64
 80085fe:	d903      	bls.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008606:	e005      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008608:	4b77      	ldr	r3, [pc, #476]	@ (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0ed      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008614:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008618:	2b00      	cmp	r3, #0
 800861a:	d173      	bne.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800861c:	4b71      	ldr	r3, [pc, #452]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800861e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008624:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008628:	4053      	eors	r3, r2
 800862a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800862e:	2b00      	cmp	r3, #0
 8008630:	d015      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008632:	4b6c      	ldr	r3, [pc, #432]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800863a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800863e:	4b69      	ldr	r3, [pc, #420]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008642:	4a68      	ldr	r2, [pc, #416]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008648:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800864a:	4b66      	ldr	r3, [pc, #408]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800864c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800864e:	4a65      	ldr	r2, [pc, #404]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008654:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008656:	4a63      	ldr	r2, [pc, #396]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800865e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008662:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800866a:	d118      	bne.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866c:	f7fa fcd0 	bl	8003010 <HAL_GetTick>
 8008670:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008674:	e00d      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008676:	f7fa fccb 	bl	8003010 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008680:	1ad2      	subs	r2, r2, r3
 8008682:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008686:	429a      	cmp	r2, r3
 8008688:	d903      	bls.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008690:	e005      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008692:	4b54      	ldr	r3, [pc, #336]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0eb      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800869e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d129      	bne.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086b6:	d10e      	bne.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80086b8:	4b4a      	ldr	r3, [pc, #296]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80086c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086c8:	091a      	lsrs	r2, r3, #4
 80086ca:	4b48      	ldr	r3, [pc, #288]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	4a45      	ldr	r2, [pc, #276]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d0:	430b      	orrs	r3, r1
 80086d2:	6113      	str	r3, [r2, #16]
 80086d4:	e005      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80086d6:	4b43      	ldr	r3, [pc, #268]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	4a42      	ldr	r2, [pc, #264]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80086e0:	6113      	str	r3, [r2, #16]
 80086e2:	4b40      	ldr	r3, [pc, #256]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80086e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086f2:	4a3c      	ldr	r2, [pc, #240]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f4:	430b      	orrs	r3, r1
 80086f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80086f8:	e008      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008702:	e003      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008704:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008708:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800870c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	f002 0301 	and.w	r3, r2, #1
 8008718:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800871c:	2300      	movs	r3, #0
 800871e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008722:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008726:	460b      	mov	r3, r1
 8008728:	4313      	orrs	r3, r2
 800872a:	f000 8090 	beq.w	800884e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800872e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008736:	2b28      	cmp	r3, #40	@ 0x28
 8008738:	d870      	bhi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800873a:	a201      	add	r2, pc, #4	@ (adr r2, 8008740 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008825 	.word	0x08008825
 8008744:	0800881d 	.word	0x0800881d
 8008748:	0800881d 	.word	0x0800881d
 800874c:	0800881d 	.word	0x0800881d
 8008750:	0800881d 	.word	0x0800881d
 8008754:	0800881d 	.word	0x0800881d
 8008758:	0800881d 	.word	0x0800881d
 800875c:	0800881d 	.word	0x0800881d
 8008760:	080087f1 	.word	0x080087f1
 8008764:	0800881d 	.word	0x0800881d
 8008768:	0800881d 	.word	0x0800881d
 800876c:	0800881d 	.word	0x0800881d
 8008770:	0800881d 	.word	0x0800881d
 8008774:	0800881d 	.word	0x0800881d
 8008778:	0800881d 	.word	0x0800881d
 800877c:	0800881d 	.word	0x0800881d
 8008780:	08008807 	.word	0x08008807
 8008784:	0800881d 	.word	0x0800881d
 8008788:	0800881d 	.word	0x0800881d
 800878c:	0800881d 	.word	0x0800881d
 8008790:	0800881d 	.word	0x0800881d
 8008794:	0800881d 	.word	0x0800881d
 8008798:	0800881d 	.word	0x0800881d
 800879c:	0800881d 	.word	0x0800881d
 80087a0:	08008825 	.word	0x08008825
 80087a4:	0800881d 	.word	0x0800881d
 80087a8:	0800881d 	.word	0x0800881d
 80087ac:	0800881d 	.word	0x0800881d
 80087b0:	0800881d 	.word	0x0800881d
 80087b4:	0800881d 	.word	0x0800881d
 80087b8:	0800881d 	.word	0x0800881d
 80087bc:	0800881d 	.word	0x0800881d
 80087c0:	08008825 	.word	0x08008825
 80087c4:	0800881d 	.word	0x0800881d
 80087c8:	0800881d 	.word	0x0800881d
 80087cc:	0800881d 	.word	0x0800881d
 80087d0:	0800881d 	.word	0x0800881d
 80087d4:	0800881d 	.word	0x0800881d
 80087d8:	0800881d 	.word	0x0800881d
 80087dc:	0800881d 	.word	0x0800881d
 80087e0:	08008825 	.word	0x08008825
 80087e4:	58024400 	.word	0x58024400
 80087e8:	58024800 	.word	0x58024800
 80087ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087f4:	3308      	adds	r3, #8
 80087f6:	2101      	movs	r1, #1
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 ffc5 	bl	8009788 <RCCEx_PLL2_Config>
 80087fe:	4603      	mov	r3, r0
 8008800:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008804:	e00f      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800880a:	3328      	adds	r3, #40	@ 0x28
 800880c:	2101      	movs	r1, #1
 800880e:	4618      	mov	r0, r3
 8008810:	f001 f86c 	bl	80098ec <RCCEx_PLL3_Config>
 8008814:	4603      	mov	r3, r0
 8008816:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800881a:	e004      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008822:	e000      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008826:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10b      	bne.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800882e:	4bc0      	ldr	r3, [pc, #768]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008832:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800883a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800883e:	4abc      	ldr	r2, [pc, #752]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008840:	430b      	orrs	r3, r1
 8008842:	6553      	str	r3, [r2, #84]	@ 0x54
 8008844:	e003      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008846:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800884a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800884e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f002 0302 	and.w	r3, r2, #2
 800885a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800885e:	2300      	movs	r3, #0
 8008860:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008864:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008868:	460b      	mov	r3, r1
 800886a:	4313      	orrs	r3, r2
 800886c:	d043      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800886e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008876:	2b05      	cmp	r3, #5
 8008878:	d824      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800887a:	a201      	add	r2, pc, #4	@ (adr r2, 8008880 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800887c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008880:	080088cd 	.word	0x080088cd
 8008884:	08008899 	.word	0x08008899
 8008888:	080088af 	.word	0x080088af
 800888c:	080088cd 	.word	0x080088cd
 8008890:	080088cd 	.word	0x080088cd
 8008894:	080088cd 	.word	0x080088cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889c:	3308      	adds	r3, #8
 800889e:	2101      	movs	r1, #1
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 ff71 	bl	8009788 <RCCEx_PLL2_Config>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80088ac:	e00f      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b2:	3328      	adds	r3, #40	@ 0x28
 80088b4:	2101      	movs	r1, #1
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 f818 	bl	80098ec <RCCEx_PLL3_Config>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80088c2:	e004      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088ca:	e000      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80088cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10b      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80088d6:	4b96      	ldr	r3, [pc, #600]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088da:	f023 0107 	bic.w	r1, r3, #7
 80088de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088e6:	4a92      	ldr	r2, [pc, #584]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088e8:	430b      	orrs	r3, r1
 80088ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80088ec:	e003      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f002 0304 	and.w	r3, r2, #4
 8008902:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008906:	2300      	movs	r3, #0
 8008908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800890c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008910:	460b      	mov	r3, r1
 8008912:	4313      	orrs	r3, r2
 8008914:	d043      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800891a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800891e:	2b05      	cmp	r3, #5
 8008920:	d824      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008922:	a201      	add	r2, pc, #4	@ (adr r2, 8008928 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008975 	.word	0x08008975
 800892c:	08008941 	.word	0x08008941
 8008930:	08008957 	.word	0x08008957
 8008934:	08008975 	.word	0x08008975
 8008938:	08008975 	.word	0x08008975
 800893c:	08008975 	.word	0x08008975
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008944:	3308      	adds	r3, #8
 8008946:	2101      	movs	r1, #1
 8008948:	4618      	mov	r0, r3
 800894a:	f000 ff1d 	bl	8009788 <RCCEx_PLL2_Config>
 800894e:	4603      	mov	r3, r0
 8008950:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008954:	e00f      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800895a:	3328      	adds	r3, #40	@ 0x28
 800895c:	2101      	movs	r1, #1
 800895e:	4618      	mov	r0, r3
 8008960:	f000 ffc4 	bl	80098ec <RCCEx_PLL3_Config>
 8008964:	4603      	mov	r3, r0
 8008966:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800896a:	e004      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008972:	e000      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008976:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10b      	bne.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800897e:	4b6c      	ldr	r3, [pc, #432]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008982:	f023 0107 	bic.w	r1, r3, #7
 8008986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800898a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800898e:	4a68      	ldr	r2, [pc, #416]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008990:	430b      	orrs	r3, r1
 8008992:	6593      	str	r3, [r2, #88]	@ 0x58
 8008994:	e003      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008996:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800899a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800899e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f002 0320 	and.w	r3, r2, #32
 80089aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089ae:	2300      	movs	r3, #0
 80089b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089b8:	460b      	mov	r3, r1
 80089ba:	4313      	orrs	r3, r2
 80089bc:	d055      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80089be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089ca:	d033      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80089cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089d0:	d82c      	bhi.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80089d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089d6:	d02f      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80089d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089dc:	d826      	bhi.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80089de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089e2:	d02b      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80089e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089e8:	d820      	bhi.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80089ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ee:	d012      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80089f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089f4:	d81a      	bhi.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d022      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80089fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089fe:	d115      	bne.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a04:	3308      	adds	r3, #8
 8008a06:	2100      	movs	r1, #0
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 febd 	bl	8009788 <RCCEx_PLL2_Config>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a14:	e015      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a1a:	3328      	adds	r3, #40	@ 0x28
 8008a1c:	2102      	movs	r1, #2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 ff64 	bl	80098ec <RCCEx_PLL3_Config>
 8008a24:	4603      	mov	r3, r0
 8008a26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a2a:	e00a      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a32:	e006      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a34:	bf00      	nop
 8008a36:	e004      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a38:	bf00      	nop
 8008a3a:	e002      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a3c:	bf00      	nop
 8008a3e:	e000      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a4a:	4b39      	ldr	r3, [pc, #228]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a5a:	4a35      	ldr	r2, [pc, #212]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a60:	e003      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008a84:	460b      	mov	r3, r1
 8008a86:	4313      	orrs	r3, r2
 8008a88:	d058      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a92:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a96:	d033      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008a98:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a9c:	d82c      	bhi.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aa2:	d02f      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aa8:	d826      	bhi.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008aaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008aae:	d02b      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008ab0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ab4:	d820      	bhi.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008aba:	d012      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ac0:	d81a      	bhi.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d022      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aca:	d115      	bne.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 fe57 	bl	8009788 <RCCEx_PLL2_Config>
 8008ada:	4603      	mov	r3, r0
 8008adc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008ae0:	e015      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ae6:	3328      	adds	r3, #40	@ 0x28
 8008ae8:	2102      	movs	r1, #2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 fefe 	bl	80098ec <RCCEx_PLL3_Config>
 8008af0:	4603      	mov	r3, r0
 8008af2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008af6:	e00a      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008afe:	e006      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b00:	bf00      	nop
 8008b02:	e004      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b04:	bf00      	nop
 8008b06:	e002      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b08:	bf00      	nop
 8008b0a:	e000      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10e      	bne.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b16:	4b06      	ldr	r3, [pc, #24]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b1a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b26:	4a02      	ldr	r2, [pc, #8]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b28:	430b      	orrs	r3, r1
 8008b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b2c:	e006      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008b2e:	bf00      	nop
 8008b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b52:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b56:	460b      	mov	r3, r1
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	d055      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b64:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b68:	d033      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008b6a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b6e:	d82c      	bhi.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b74:	d02f      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b7a:	d826      	bhi.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b7c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008b80:	d02b      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008b82:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008b86:	d820      	bhi.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b8c:	d012      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008b8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b92:	d81a      	bhi.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d022      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b9c:	d115      	bne.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fdee 	bl	8009788 <RCCEx_PLL2_Config>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008bb2:	e015      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb8:	3328      	adds	r3, #40	@ 0x28
 8008bba:	2102      	movs	r1, #2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fe95 	bl	80098ec <RCCEx_PLL3_Config>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008bc8:	e00a      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008bd0:	e006      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008bd2:	bf00      	nop
 8008bd4:	e004      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008bd6:	bf00      	nop
 8008bd8:	e002      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008bda:	bf00      	nop
 8008bdc:	e000      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008be0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10b      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008be8:	4ba1      	ldr	r3, [pc, #644]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008bf8:	4a9d      	ldr	r2, [pc, #628]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bfa:	430b      	orrs	r3, r1
 8008bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bfe:	e003      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f002 0308 	and.w	r3, r2, #8
 8008c14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008c22:	460b      	mov	r3, r1
 8008c24:	4313      	orrs	r3, r2
 8008c26:	d01e      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c34:	d10c      	bne.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c3a:	3328      	adds	r3, #40	@ 0x28
 8008c3c:	2102      	movs	r1, #2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 fe54 	bl	80098ec <RCCEx_PLL3_Config>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c50:	4b87      	ldr	r3, [pc, #540]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c60:	4a83      	ldr	r2, [pc, #524]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c62:	430b      	orrs	r3, r1
 8008c64:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f002 0310 	and.w	r3, r2, #16
 8008c72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c76:	2300      	movs	r3, #0
 8008c78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008c7c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008c80:	460b      	mov	r3, r1
 8008c82:	4313      	orrs	r3, r2
 8008c84:	d01e      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c92:	d10c      	bne.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c98:	3328      	adds	r3, #40	@ 0x28
 8008c9a:	2102      	movs	r1, #2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 fe25 	bl	80098ec <RCCEx_PLL3_Config>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008cae:	4b70      	ldr	r3, [pc, #448]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cbe:	4a6c      	ldr	r2, [pc, #432]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008cd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008cda:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	d03e      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cf0:	d022      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008cf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cf6:	d81b      	bhi.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d00:	d00b      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008d02:	e015      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d08:	3308      	adds	r3, #8
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fd3b 	bl	8009788 <RCCEx_PLL2_Config>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d18:	e00f      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d1e:	3328      	adds	r3, #40	@ 0x28
 8008d20:	2102      	movs	r1, #2
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 fde2 	bl	80098ec <RCCEx_PLL3_Config>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d2e:	e004      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d36:	e000      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10b      	bne.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d42:	4b4b      	ldr	r3, [pc, #300]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d52:	4a47      	ldr	r2, [pc, #284]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d54:	430b      	orrs	r3, r1
 8008d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d58:	e003      	b.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008d6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d70:	2300      	movs	r3, #0
 8008d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	d03b      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d8a:	d01f      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008d8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d90:	d818      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d96:	d003      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d9c:	d007      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008d9e:	e011      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da0:	4b33      	ldr	r3, [pc, #204]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	4a32      	ldr	r2, [pc, #200]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008dac:	e00f      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db2:	3328      	adds	r3, #40	@ 0x28
 8008db4:	2101      	movs	r1, #1
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fd98 	bl	80098ec <RCCEx_PLL3_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008dc2:	e004      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dca:	e000      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10b      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008dd6:	4b26      	ldr	r3, [pc, #152]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de6:	4a22      	ldr	r2, [pc, #136]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de8:	430b      	orrs	r3, r1
 8008dea:	6553      	str	r3, [r2, #84]	@ 0x54
 8008dec:	e003      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008df2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008e02:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e04:	2300      	movs	r3, #0
 8008e06:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e08:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	d034      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e20:	d007      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008e22:	e011      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e24:	4b12      	ldr	r3, [pc, #72]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e28:	4a11      	ldr	r2, [pc, #68]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e30:	e00e      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e36:	3308      	adds	r3, #8
 8008e38:	2102      	movs	r1, #2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 fca4 	bl	8009788 <RCCEx_PLL2_Config>
 8008e40:	4603      	mov	r3, r0
 8008e42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e46:	e003      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10d      	bne.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008e58:	4b05      	ldr	r3, [pc, #20]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e66:	4a02      	ldr	r2, [pc, #8]	@ (8008e70 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e68:	430b      	orrs	r3, r1
 8008e6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e6c:	e006      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008e6e:	bf00      	nop
 8008e70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008e88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008e92:	460b      	mov	r3, r1
 8008e94:	4313      	orrs	r3, r2
 8008e96:	d00c      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e9c:	3328      	adds	r3, #40	@ 0x28
 8008e9e:	2102      	movs	r1, #2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fd23 	bl	80098ec <RCCEx_PLL3_Config>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008ebe:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ec4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	d038      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008eda:	d018      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ee0:	d811      	bhi.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ee6:	d014      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eec:	d80b      	bhi.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d011      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ef6:	d106      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ef8:	4bc3      	ldr	r3, [pc, #780]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efc:	4ac2      	ldr	r2, [pc, #776]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008f04:	e008      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f0c:	e004      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008f0e:	bf00      	nop
 8008f10:	e002      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008f12:	bf00      	nop
 8008f14:	e000      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10b      	bne.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f20:	4bb9      	ldr	r3, [pc, #740]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f30:	4ab5      	ldr	r2, [pc, #724]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f32:	430b      	orrs	r3, r1
 8008f34:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f36:	e003      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f4e:	2300      	movs	r3, #0
 8008f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008f56:	460b      	mov	r3, r1
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	d009      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f5c:	4baa      	ldr	r3, [pc, #680]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f6a:	4aa7      	ldr	r2, [pc, #668]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f6c:	430b      	orrs	r3, r1
 8008f6e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008f7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f7e:	2300      	movs	r3, #0
 8008f80:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008f86:	460b      	mov	r3, r1
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	d009      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f8c:	4b9e      	ldr	r3, [pc, #632]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f90:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f9a:	4a9b      	ldr	r2, [pc, #620]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fae:	2300      	movs	r3, #0
 8008fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fb2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	d009      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008fbc:	4b92      	ldr	r3, [pc, #584]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fca:	4a8f      	ldr	r2, [pc, #572]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fcc:	430b      	orrs	r3, r1
 8008fce:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008fdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fde:	2300      	movs	r3, #0
 8008fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fe2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	d00e      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008fec:	4b86      	ldr	r3, [pc, #536]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	4a85      	ldr	r2, [pc, #532]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ff2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ff6:	6113      	str	r3, [r2, #16]
 8008ff8:	4b83      	ldr	r3, [pc, #524]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ffa:	6919      	ldr	r1, [r3, #16]
 8008ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009000:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009004:	4a80      	ldr	r2, [pc, #512]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009006:	430b      	orrs	r3, r1
 8009008:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800900a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009016:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009018:	2300      	movs	r3, #0
 800901a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800901c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009020:	460b      	mov	r3, r1
 8009022:	4313      	orrs	r3, r2
 8009024:	d009      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009026:	4b78      	ldr	r3, [pc, #480]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800902a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800902e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009034:	4a74      	ldr	r2, [pc, #464]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009036:	430b      	orrs	r3, r1
 8009038:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800903a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009046:	633b      	str	r3, [r7, #48]	@ 0x30
 8009048:	2300      	movs	r3, #0
 800904a:	637b      	str	r3, [r7, #52]	@ 0x34
 800904c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009050:	460b      	mov	r3, r1
 8009052:	4313      	orrs	r3, r2
 8009054:	d00a      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009056:	4b6c      	ldr	r3, [pc, #432]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800905e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009066:	4a68      	ldr	r2, [pc, #416]	@ (8009208 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009068:	430b      	orrs	r3, r1
 800906a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800906c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	2100      	movs	r1, #0
 8009076:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800907e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009082:	460b      	mov	r3, r1
 8009084:	4313      	orrs	r3, r2
 8009086:	d011      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800908c:	3308      	adds	r3, #8
 800908e:	2100      	movs	r1, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fb79 	bl	8009788 <RCCEx_PLL2_Config>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800909c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80090ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	2100      	movs	r1, #0
 80090b6:	6239      	str	r1, [r7, #32]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80090be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80090c2:	460b      	mov	r3, r1
 80090c4:	4313      	orrs	r3, r2
 80090c6:	d011      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090cc:	3308      	adds	r3, #8
 80090ce:	2101      	movs	r1, #1
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fb59 	bl	8009788 <RCCEx_PLL2_Config>
 80090d6:	4603      	mov	r3, r0
 80090d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80090dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80090ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	2100      	movs	r1, #0
 80090f6:	61b9      	str	r1, [r7, #24]
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	61fb      	str	r3, [r7, #28]
 80090fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009102:	460b      	mov	r3, r1
 8009104:	4313      	orrs	r3, r2
 8009106:	d011      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800910c:	3308      	adds	r3, #8
 800910e:	2102      	movs	r1, #2
 8009110:	4618      	mov	r0, r3
 8009112:	f000 fb39 	bl	8009788 <RCCEx_PLL2_Config>
 8009116:	4603      	mov	r3, r0
 8009118:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800911c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009128:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800912c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	2100      	movs	r1, #0
 8009136:	6139      	str	r1, [r7, #16]
 8009138:	f003 0308 	and.w	r3, r3, #8
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009142:	460b      	mov	r3, r1
 8009144:	4313      	orrs	r3, r2
 8009146:	d011      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800914c:	3328      	adds	r3, #40	@ 0x28
 800914e:	2100      	movs	r1, #0
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fbcb 	bl	80098ec <RCCEx_PLL3_Config>
 8009156:	4603      	mov	r3, r0
 8009158:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800915c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009168:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800916c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	2100      	movs	r1, #0
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	f003 0310 	and.w	r3, r3, #16
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009182:	460b      	mov	r3, r1
 8009184:	4313      	orrs	r3, r2
 8009186:	d011      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800918c:	3328      	adds	r3, #40	@ 0x28
 800918e:	2101      	movs	r1, #1
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fbab 	bl	80098ec <RCCEx_PLL3_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800919c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d003      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80091ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	2100      	movs	r1, #0
 80091b6:	6039      	str	r1, [r7, #0]
 80091b8:	f003 0320 	and.w	r3, r3, #32
 80091bc:	607b      	str	r3, [r7, #4]
 80091be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80091c2:	460b      	mov	r3, r1
 80091c4:	4313      	orrs	r3, r2
 80091c6:	d011      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091cc:	3328      	adds	r3, #40	@ 0x28
 80091ce:	2102      	movs	r1, #2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fb8b 	bl	80098ec <RCCEx_PLL3_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80091dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80091ec:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	e000      	b.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009200:	46bd      	mov	sp, r7
 8009202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009206:	bf00      	nop
 8009208:	58024400 	.word	0x58024400

0800920c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009210:	f7fe fde2 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8009214:	4602      	mov	r2, r0
 8009216:	4b06      	ldr	r3, [pc, #24]	@ (8009230 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	091b      	lsrs	r3, r3, #4
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	4904      	ldr	r1, [pc, #16]	@ (8009234 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009222:	5ccb      	ldrb	r3, [r1, r3]
 8009224:	f003 031f 	and.w	r3, r3, #31
 8009228:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800922c:	4618      	mov	r0, r3
 800922e:	bd80      	pop	{r7, pc}
 8009230:	58024400 	.word	0x58024400
 8009234:	0800eeec 	.word	0x0800eeec

08009238 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009238:	b480      	push	{r7}
 800923a:	b089      	sub	sp, #36	@ 0x24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009240:	4ba1      	ldr	r3, [pc, #644]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009244:	f003 0303 	and.w	r3, r3, #3
 8009248:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800924a:	4b9f      	ldr	r3, [pc, #636]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800924c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924e:	0b1b      	lsrs	r3, r3, #12
 8009250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009254:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009256:	4b9c      	ldr	r3, [pc, #624]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800925a:	091b      	lsrs	r3, r3, #4
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009262:	4b99      	ldr	r3, [pc, #612]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009266:	08db      	lsrs	r3, r3, #3
 8009268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 8111 	beq.w	80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	2b02      	cmp	r3, #2
 800928a:	f000 8083 	beq.w	8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	2b02      	cmp	r3, #2
 8009292:	f200 80a1 	bhi.w	80093d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d056      	beq.n	8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092a2:	e099      	b.n	80093d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092a4:	4b88      	ldr	r3, [pc, #544]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0320 	and.w	r3, r3, #32
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d02d      	beq.n	800930c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092b0:	4b85      	ldr	r3, [pc, #532]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	08db      	lsrs	r3, r3, #3
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	4a84      	ldr	r2, [pc, #528]	@ (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092bc:	fa22 f303 	lsr.w	r3, r2, r3
 80092c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	ee07 3a90 	vmov	s15, r3
 80092c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092da:	4b7b      	ldr	r3, [pc, #492]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009306:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800930a:	e087      	b.n	800941c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009316:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800931a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931e:	4b6a      	ldr	r3, [pc, #424]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009332:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800933a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800934a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800934e:	e065      	b.n	800941c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80094d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800935e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009362:	4b59      	ldr	r3, [pc, #356]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009372:	ed97 6a03 	vldr	s12, [r7, #12]
 8009376:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800937a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800937e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009392:	e043      	b.n	800941c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80094dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a6:	4b48      	ldr	r3, [pc, #288]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ae:	ee07 3a90 	vmov	s15, r3
 80093b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093d6:	e021      	b.n	800941c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80094d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ea:	4b37      	ldr	r3, [pc, #220]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f2:	ee07 3a90 	vmov	s15, r3
 80093f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80093fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800940e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800941a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800941c:	4b2a      	ldr	r3, [pc, #168]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800941e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009420:	0a5b      	lsrs	r3, r3, #9
 8009422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009436:	edd7 6a07 	vldr	s13, [r7, #28]
 800943a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800943e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009442:	ee17 2a90 	vmov	r2, s15
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800944a:	4b1f      	ldr	r3, [pc, #124]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800944c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944e:	0c1b      	lsrs	r3, r3, #16
 8009450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009454:	ee07 3a90 	vmov	s15, r3
 8009458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009460:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009464:	edd7 6a07 	vldr	s13, [r7, #28]
 8009468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800946c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009470:	ee17 2a90 	vmov	r2, s15
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009478:	4b13      	ldr	r3, [pc, #76]	@ (80094c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800947a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800947c:	0e1b      	lsrs	r3, r3, #24
 800947e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800948e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009492:	edd7 6a07 	vldr	s13, [r7, #28]
 8009496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800949a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800949e:	ee17 2a90 	vmov	r2, s15
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094a6:	e008      	b.n	80094ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	609a      	str	r2, [r3, #8]
}
 80094ba:	bf00      	nop
 80094bc:	3724      	adds	r7, #36	@ 0x24
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	58024400 	.word	0x58024400
 80094cc:	03d09000 	.word	0x03d09000
 80094d0:	46000000 	.word	0x46000000
 80094d4:	4c742400 	.word	0x4c742400
 80094d8:	4a742400 	.word	0x4a742400
 80094dc:	4af42400 	.word	0x4af42400

080094e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b089      	sub	sp, #36	@ 0x24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094e8:	4ba1      	ldr	r3, [pc, #644]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ec:	f003 0303 	and.w	r3, r3, #3
 80094f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80094f2:	4b9f      	ldr	r3, [pc, #636]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f6:	0d1b      	lsrs	r3, r3, #20
 80094f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094fe:	4b9c      	ldr	r3, [pc, #624]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009502:	0a1b      	lsrs	r3, r3, #8
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800950a:	4b99      	ldr	r3, [pc, #612]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800950c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800950e:	08db      	lsrs	r3, r3, #3
 8009510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	fb02 f303 	mul.w	r3, r2, r3
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009522:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 8111 	beq.w	8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2b02      	cmp	r3, #2
 8009532:	f000 8083 	beq.w	800963c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	2b02      	cmp	r3, #2
 800953a:	f200 80a1 	bhi.w	8009680 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d056      	beq.n	80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800954a:	e099      	b.n	8009680 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800954c:	4b88      	ldr	r3, [pc, #544]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0320 	and.w	r3, r3, #32
 8009554:	2b00      	cmp	r3, #0
 8009556:	d02d      	beq.n	80095b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009558:	4b85      	ldr	r3, [pc, #532]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	08db      	lsrs	r3, r3, #3
 800955e:	f003 0303 	and.w	r3, r3, #3
 8009562:	4a84      	ldr	r2, [pc, #528]	@ (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009564:	fa22 f303 	lsr.w	r3, r2, r3
 8009568:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	ee07 3a90 	vmov	s15, r3
 8009570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	ee07 3a90 	vmov	s15, r3
 800957a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009582:	4b7b      	ldr	r3, [pc, #492]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009592:	ed97 6a03 	vldr	s12, [r7, #12]
 8009596:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009778 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800959a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800959e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095b2:	e087      	b.n	80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800977c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095c6:	4b6a      	ldr	r3, [pc, #424]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009778 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095f6:	e065      	b.n	80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009780 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960a:	4b59      	ldr	r3, [pc, #356]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800960c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961a:	ed97 6a03 	vldr	s12, [r7, #12]
 800961e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009778 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800962e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800963a:	e043      	b.n	80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	ee07 3a90 	vmov	s15, r3
 8009642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009646:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800964a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800964e:	4b48      	ldr	r3, [pc, #288]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800965e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009662:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009778 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800966e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800967e:	e021      	b.n	80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009780 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800968e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009692:	4b37      	ldr	r3, [pc, #220]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009778 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80096c4:	4b2a      	ldr	r3, [pc, #168]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c8:	0a5b      	lsrs	r3, r3, #9
 80096ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096de:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ea:	ee17 2a90 	vmov	r2, s15
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80096f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f6:	0c1b      	lsrs	r3, r3, #16
 80096f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009704:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800970c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009718:	ee17 2a90 	vmov	r2, s15
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009720:	4b13      	ldr	r3, [pc, #76]	@ (8009770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009724:	0e1b      	lsrs	r3, r3, #24
 8009726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800973a:	edd7 6a07 	vldr	s13, [r7, #28]
 800973e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009746:	ee17 2a90 	vmov	r2, s15
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800974e:	e008      	b.n	8009762 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	609a      	str	r2, [r3, #8]
}
 8009762:	bf00      	nop
 8009764:	3724      	adds	r7, #36	@ 0x24
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	58024400 	.word	0x58024400
 8009774:	03d09000 	.word	0x03d09000
 8009778:	46000000 	.word	0x46000000
 800977c:	4c742400 	.word	0x4c742400
 8009780:	4a742400 	.word	0x4a742400
 8009784:	4af42400 	.word	0x4af42400

08009788 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009796:	4b53      	ldr	r3, [pc, #332]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 8009798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979a:	f003 0303 	and.w	r3, r3, #3
 800979e:	2b03      	cmp	r3, #3
 80097a0:	d101      	bne.n	80097a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e099      	b.n	80098da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097a6:	4b4f      	ldr	r3, [pc, #316]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a4e      	ldr	r2, [pc, #312]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 80097ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097b2:	f7f9 fc2d 	bl	8003010 <HAL_GetTick>
 80097b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097b8:	e008      	b.n	80097cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097ba:	f7f9 fc29 	bl	8003010 <HAL_GetTick>
 80097be:	4602      	mov	r2, r0
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d901      	bls.n	80097cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e086      	b.n	80098da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097cc:	4b45      	ldr	r3, [pc, #276]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1f0      	bne.n	80097ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80097d8:	4b42      	ldr	r3, [pc, #264]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 80097da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	031b      	lsls	r3, r3, #12
 80097e6:	493f      	ldr	r1, [pc, #252]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	025b      	lsls	r3, r3, #9
 80097fe:	b29b      	uxth	r3, r3
 8009800:	431a      	orrs	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	3b01      	subs	r3, #1
 8009808:	041b      	lsls	r3, r3, #16
 800980a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800980e:	431a      	orrs	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	3b01      	subs	r3, #1
 8009816:	061b      	lsls	r3, r3, #24
 8009818:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800981c:	4931      	ldr	r1, [pc, #196]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 800981e:	4313      	orrs	r3, r2
 8009820:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009822:	4b30      	ldr	r3, [pc, #192]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 8009824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009826:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	492d      	ldr	r1, [pc, #180]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 8009830:	4313      	orrs	r3, r2
 8009832:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009834:	4b2b      	ldr	r3, [pc, #172]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 8009836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009838:	f023 0220 	bic.w	r2, r3, #32
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	4928      	ldr	r1, [pc, #160]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 8009842:	4313      	orrs	r3, r2
 8009844:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009846:	4b27      	ldr	r3, [pc, #156]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 8009848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984a:	4a26      	ldr	r2, [pc, #152]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 800984c:	f023 0310 	bic.w	r3, r3, #16
 8009850:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009852:	4b24      	ldr	r3, [pc, #144]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 8009854:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009856:	4b24      	ldr	r3, [pc, #144]	@ (80098e8 <RCCEx_PLL2_Config+0x160>)
 8009858:	4013      	ands	r3, r2
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	69d2      	ldr	r2, [r2, #28]
 800985e:	00d2      	lsls	r2, r2, #3
 8009860:	4920      	ldr	r1, [pc, #128]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 8009862:	4313      	orrs	r3, r2
 8009864:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009866:	4b1f      	ldr	r3, [pc, #124]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 8009868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986a:	4a1e      	ldr	r2, [pc, #120]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 800986c:	f043 0310 	orr.w	r3, r3, #16
 8009870:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009878:	4b1a      	ldr	r3, [pc, #104]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 800987a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987c:	4a19      	ldr	r2, [pc, #100]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 800987e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009882:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009884:	e00f      	b.n	80098a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d106      	bne.n	800989a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800988c:	4b15      	ldr	r3, [pc, #84]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 800988e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009890:	4a14      	ldr	r2, [pc, #80]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 8009892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009896:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009898:	e005      	b.n	80098a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800989a:	4b12      	ldr	r3, [pc, #72]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 800989c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989e:	4a11      	ldr	r2, [pc, #68]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 80098a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80098a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098a6:	4b0f      	ldr	r3, [pc, #60]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a0e      	ldr	r2, [pc, #56]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 80098ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098b2:	f7f9 fbad 	bl	8003010 <HAL_GetTick>
 80098b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098b8:	e008      	b.n	80098cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098ba:	f7f9 fba9 	bl	8003010 <HAL_GetTick>
 80098be:	4602      	mov	r2, r0
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d901      	bls.n	80098cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e006      	b.n	80098da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098cc:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <RCCEx_PLL2_Config+0x15c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0f0      	beq.n	80098ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	58024400 	.word	0x58024400
 80098e8:	ffff0007 	.word	0xffff0007

080098ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098fa:	4b53      	ldr	r3, [pc, #332]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80098fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	2b03      	cmp	r3, #3
 8009904:	d101      	bne.n	800990a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e099      	b.n	8009a3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800990a:	4b4f      	ldr	r3, [pc, #316]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a4e      	ldr	r2, [pc, #312]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 8009910:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009916:	f7f9 fb7b 	bl	8003010 <HAL_GetTick>
 800991a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800991c:	e008      	b.n	8009930 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800991e:	f7f9 fb77 	bl	8003010 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	2b02      	cmp	r3, #2
 800992a:	d901      	bls.n	8009930 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e086      	b.n	8009a3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009930:	4b45      	ldr	r3, [pc, #276]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1f0      	bne.n	800991e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800993c:	4b42      	ldr	r3, [pc, #264]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 800993e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009940:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	051b      	lsls	r3, r3, #20
 800994a:	493f      	ldr	r1, [pc, #252]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 800994c:	4313      	orrs	r3, r2
 800994e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	3b01      	subs	r3, #1
 8009956:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	3b01      	subs	r3, #1
 8009960:	025b      	lsls	r3, r3, #9
 8009962:	b29b      	uxth	r3, r3
 8009964:	431a      	orrs	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	3b01      	subs	r3, #1
 800996c:	041b      	lsls	r3, r3, #16
 800996e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009972:	431a      	orrs	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	3b01      	subs	r3, #1
 800997a:	061b      	lsls	r3, r3, #24
 800997c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009980:	4931      	ldr	r1, [pc, #196]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 8009982:	4313      	orrs	r3, r2
 8009984:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009986:	4b30      	ldr	r3, [pc, #192]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 8009988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	492d      	ldr	r1, [pc, #180]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 8009994:	4313      	orrs	r3, r2
 8009996:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009998:	4b2b      	ldr	r3, [pc, #172]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 800999a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800999c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	4928      	ldr	r1, [pc, #160]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099a6:	4313      	orrs	r3, r2
 80099a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099aa:	4b27      	ldr	r3, [pc, #156]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ae:	4a26      	ldr	r2, [pc, #152]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099b6:	4b24      	ldr	r3, [pc, #144]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099ba:	4b24      	ldr	r3, [pc, #144]	@ (8009a4c <RCCEx_PLL3_Config+0x160>)
 80099bc:	4013      	ands	r3, r2
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	69d2      	ldr	r2, [r2, #28]
 80099c2:	00d2      	lsls	r2, r2, #3
 80099c4:	4920      	ldr	r1, [pc, #128]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ce:	4a1e      	ldr	r2, [pc, #120]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d106      	bne.n	80099ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e0:	4a19      	ldr	r2, [pc, #100]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80099e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099e8:	e00f      	b.n	8009a0a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d106      	bne.n	80099fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80099f0:	4b15      	ldr	r3, [pc, #84]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f4:	4a14      	ldr	r2, [pc, #80]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 80099f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80099fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099fc:	e005      	b.n	8009a0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80099fe:	4b12      	ldr	r3, [pc, #72]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 8009a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a02:	4a11      	ldr	r2, [pc, #68]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 8009a04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 8009a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a16:	f7f9 fafb 	bl	8003010 <HAL_GetTick>
 8009a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a1c:	e008      	b.n	8009a30 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a1e:	f7f9 faf7 	bl	8003010 <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d901      	bls.n	8009a30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e006      	b.n	8009a3e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a30:	4b05      	ldr	r3, [pc, #20]	@ (8009a48 <RCCEx_PLL3_Config+0x15c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0f0      	beq.n	8009a1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	58024400 	.word	0x58024400
 8009a4c:	ffff0007 	.word	0xffff0007

08009a50 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e10f      	b.n	8009c82 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a87      	ldr	r2, [pc, #540]	@ (8009c8c <HAL_SPI_Init+0x23c>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d00f      	beq.n	8009a92 <HAL_SPI_Init+0x42>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a86      	ldr	r2, [pc, #536]	@ (8009c90 <HAL_SPI_Init+0x240>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d00a      	beq.n	8009a92 <HAL_SPI_Init+0x42>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a84      	ldr	r2, [pc, #528]	@ (8009c94 <HAL_SPI_Init+0x244>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d005      	beq.n	8009a92 <HAL_SPI_Init+0x42>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	2b0f      	cmp	r3, #15
 8009a8c:	d901      	bls.n	8009a92 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e0f7      	b.n	8009c82 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fbba 	bl	800a20c <SPI_GetPacketSize>
 8009a98:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a7b      	ldr	r2, [pc, #492]	@ (8009c8c <HAL_SPI_Init+0x23c>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d00c      	beq.n	8009abe <HAL_SPI_Init+0x6e>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a79      	ldr	r2, [pc, #484]	@ (8009c90 <HAL_SPI_Init+0x240>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d007      	beq.n	8009abe <HAL_SPI_Init+0x6e>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a78      	ldr	r2, [pc, #480]	@ (8009c94 <HAL_SPI_Init+0x244>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d002      	beq.n	8009abe <HAL_SPI_Init+0x6e>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b08      	cmp	r3, #8
 8009abc:	d811      	bhi.n	8009ae2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009ac2:	4a72      	ldr	r2, [pc, #456]	@ (8009c8c <HAL_SPI_Init+0x23c>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d009      	beq.n	8009adc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a70      	ldr	r2, [pc, #448]	@ (8009c90 <HAL_SPI_Init+0x240>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d004      	beq.n	8009adc <HAL_SPI_Init+0x8c>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a6f      	ldr	r2, [pc, #444]	@ (8009c94 <HAL_SPI_Init+0x244>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d104      	bne.n	8009ae6 <HAL_SPI_Init+0x96>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b10      	cmp	r3, #16
 8009ae0:	d901      	bls.n	8009ae6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e0cd      	b.n	8009c82 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7f8 fc66 	bl	80023cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f022 0201 	bic.w	r2, r2, #1
 8009b16:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009b22:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b2c:	d119      	bne.n	8009b62 <HAL_SPI_Init+0x112>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b36:	d103      	bne.n	8009b40 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d008      	beq.n	8009b52 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10c      	bne.n	8009b62 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b50:	d107      	bne.n	8009b62 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009b60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00f      	beq.n	8009b8e <HAL_SPI_Init+0x13e>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	2b06      	cmp	r3, #6
 8009b74:	d90b      	bls.n	8009b8e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	430a      	orrs	r2, r1
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	e007      	b.n	8009b9e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	69da      	ldr	r2, [r3, #28]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb0:	ea42 0103 	orr.w	r1, r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc8:	431a      	orrs	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bce:	431a      	orrs	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	431a      	orrs	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	431a      	orrs	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	431a      	orrs	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	431a      	orrs	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bfe:	ea42 0103 	orr.w	r1, r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d113      	bne.n	8009c3e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c28:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c3c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 0201 	bic.w	r2, r2, #1
 8009c4c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40013000 	.word	0x40013000
 8009c90:	40003800 	.word	0x40003800
 8009c94:	40003c00 	.word	0x40003c00

08009c98 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08a      	sub	sp, #40	@ 0x28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009cb0:	6a3a      	ldr	r2, [r7, #32]
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009cca:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3330      	adds	r3, #48	@ 0x30
 8009cd2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d010      	beq.n	8009d00 <HAL_SPI_IRQHandler+0x68>
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00b      	beq.n	8009d00 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	699a      	ldr	r2, [r3, #24]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cf6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f9c3 	bl	800a084 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009cfe:	e192      	b.n	800a026 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d113      	bne.n	8009d32 <HAL_SPI_IRQHandler+0x9a>
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10e      	bne.n	8009d32 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4798      	blx	r3
    handled = 1UL;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10f      	bne.n	8009d5c <HAL_SPI_IRQHandler+0xc4>
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00a      	beq.n	8009d5c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d105      	bne.n	8009d5c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	4798      	blx	r3
    handled = 1UL;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	f003 0320 	and.w	r3, r3, #32
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10f      	bne.n	8009d86 <HAL_SPI_IRQHandler+0xee>
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00a      	beq.n	8009d86 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d105      	bne.n	8009d86 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	4798      	blx	r3
    handled = 1UL;
 8009d82:	2301      	movs	r3, #1
 8009d84:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f040 8147 	bne.w	800a01c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	f003 0308 	and.w	r3, r3, #8
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 808b 	beq.w	8009eb0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	699a      	ldr	r2, [r3, #24]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f042 0208 	orr.w	r2, r2, #8
 8009da8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	699a      	ldr	r2, [r3, #24]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f042 0210 	orr.w	r2, r2, #16
 8009db8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	699a      	ldr	r2, [r3, #24]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009dc8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	691a      	ldr	r2, [r3, #16]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f022 0208 	bic.w	r2, r2, #8
 8009dd8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d13d      	bne.n	8009e64 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009de8:	e036      	b.n	8009e58 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	2b0f      	cmp	r3, #15
 8009df0:	d90b      	bls.n	8009e0a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dfa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009dfc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e02:	1d1a      	adds	r2, r3, #4
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	665a      	str	r2, [r3, #100]	@ 0x64
 8009e08:	e01d      	b.n	8009e46 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	2b07      	cmp	r3, #7
 8009e10:	d90b      	bls.n	8009e2a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	8812      	ldrh	r2, [r2, #0]
 8009e1a:	b292      	uxth	r2, r2
 8009e1c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e22:	1c9a      	adds	r2, r3, #2
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	665a      	str	r2, [r3, #100]	@ 0x64
 8009e28:	e00d      	b.n	8009e46 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e36:	7812      	ldrb	r2, [r2, #0]
 8009e38:	b2d2      	uxtb	r2, r2
 8009e3a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1c2      	bne.n	8009dea <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f931 	bl	800a0cc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d003      	beq.n	8009e84 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f8f7 	bl	800a070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009e82:	e0d0      	b.n	800a026 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009e84:	7cfb      	ldrb	r3, [r7, #19]
 8009e86:	2b05      	cmp	r3, #5
 8009e88:	d103      	bne.n	8009e92 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f8e6 	bl	800a05c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009e90:	e0c6      	b.n	800a020 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009e92:	7cfb      	ldrb	r3, [r7, #19]
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	d103      	bne.n	8009ea0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f8d5 	bl	800a048 <HAL_SPI_RxCpltCallback>
    return;
 8009e9e:	e0bf      	b.n	800a020 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009ea0:	7cfb      	ldrb	r3, [r7, #19]
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	f040 80bc 	bne.w	800a020 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f8c3 	bl	800a034 <HAL_SPI_TxCpltCallback>
    return;
 8009eae:	e0b7      	b.n	800a020 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 80b5 	beq.w	800a026 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00f      	beq.n	8009ee6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ecc:	f043 0204 	orr.w	r2, r3, #4
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	699a      	ldr	r2, [r3, #24]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ee4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00f      	beq.n	8009f10 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ef6:	f043 0201 	orr.w	r2, r3, #1
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f0e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00f      	beq.n	8009f3a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f20:	f043 0208 	orr.w	r2, r3, #8
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	699a      	ldr	r2, [r3, #24]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f38:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	f003 0320 	and.w	r3, r3, #32
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00f      	beq.n	8009f64 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	699a      	ldr	r2, [r3, #24]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0220 	orr.w	r2, r2, #32
 8009f62:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d05a      	beq.n	800a024 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0201 	bic.w	r2, r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6919      	ldr	r1, [r3, #16]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	4b28      	ldr	r3, [pc, #160]	@ (800a02c <HAL_SPI_IRQHandler+0x394>)
 8009f8a:	400b      	ands	r3, r1
 8009f8c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009f94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009f98:	d138      	bne.n	800a00c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009fa8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d013      	beq.n	8009fda <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fb6:	4a1e      	ldr	r2, [pc, #120]	@ (800a030 <HAL_SPI_IRQHandler+0x398>)
 8009fb8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fa faf4 	bl	80045ac <HAL_DMA_Abort_IT>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d007      	beq.n	8009fda <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fd0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d020      	beq.n	800a024 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fe6:	4a12      	ldr	r2, [pc, #72]	@ (800a030 <HAL_SPI_IRQHandler+0x398>)
 8009fe8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fa fadc 	bl	80045ac <HAL_DMA_Abort_IT>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d014      	beq.n	800a024 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a000:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a00a:	e00b      	b.n	800a024 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 f82b 	bl	800a070 <HAL_SPI_ErrorCallback>
    return;
 800a01a:	e003      	b.n	800a024 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a01c:	bf00      	nop
 800a01e:	e002      	b.n	800a026 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a020:	bf00      	nop
 800a022:	e000      	b.n	800a026 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a024:	bf00      	nop
  }
}
 800a026:	3728      	adds	r7, #40	@ 0x28
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	fffffc94 	.word	0xfffffc94
 800a030:	0800a099 	.word	0x0800a099

0800a034 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f7ff ffd6 	bl	800a070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a0c4:	bf00      	nop
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f042 0208 	orr.w	r2, r2, #8
 800a0ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	699a      	ldr	r2, [r3, #24]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f042 0210 	orr.w	r2, r2, #16
 800a0fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 0201 	bic.w	r2, r2, #1
 800a10a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	6919      	ldr	r1, [r3, #16]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	4b3c      	ldr	r3, [pc, #240]	@ (800a208 <SPI_CloseTransfer+0x13c>)
 800a118:	400b      	ands	r3, r1
 800a11a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	689a      	ldr	r2, [r3, #8]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a12a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b04      	cmp	r3, #4
 800a136:	d014      	beq.n	800a162 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00f      	beq.n	800a162 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a148:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	699a      	ldr	r2, [r3, #24]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f042 0220 	orr.w	r2, r2, #32
 800a160:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d014      	beq.n	800a198 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00f      	beq.n	800a198 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a17e:	f043 0204 	orr.w	r2, r3, #4
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	699a      	ldr	r2, [r3, #24]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a196:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00f      	beq.n	800a1c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1a8:	f043 0201 	orr.w	r2, r3, #1
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	699a      	ldr	r2, [r3, #24]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00f      	beq.n	800a1ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1d2:	f043 0208 	orr.w	r2, r3, #8
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	699a      	ldr	r2, [r3, #24]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a1ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a1fc:	bf00      	nop
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	fffffc90 	.word	0xfffffc90

0800a20c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a218:	095b      	lsrs	r3, r3, #5
 800a21a:	3301      	adds	r3, #1
 800a21c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	3301      	adds	r3, #1
 800a224:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	3307      	adds	r3, #7
 800a22a:	08db      	lsrs	r3, r3, #3
 800a22c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	fb02 f303 	mul.w	r3, r2, r3
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b082      	sub	sp, #8
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e042      	b.n	800a2da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7f8 fc3c 	bl	8002ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2224      	movs	r2, #36	@ 0x24
 800a270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 0201 	bic.w	r2, r2, #1
 800a282:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f001 fbd7 	bl	800ba40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fd68 	bl	800ad68 <UART_SetConfig>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d101      	bne.n	800a2a2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e01b      	b.n	800a2da <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a2b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f042 0201 	orr.w	r2, r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f001 fc56 	bl	800bb84 <UART_CheckIdleState>
 800a2d8:	4603      	mov	r3, r0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b08a      	sub	sp, #40	@ 0x28
 800a2e6:	af02      	add	r7, sp, #8
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	603b      	str	r3, [r7, #0]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2f8:	2b20      	cmp	r3, #32
 800a2fa:	d17b      	bne.n	800a3f4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <HAL_UART_Transmit+0x26>
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e074      	b.n	800a3f6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2221      	movs	r2, #33	@ 0x21
 800a318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a31c:	f7f8 fe78 	bl	8003010 <HAL_GetTick>
 800a320:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	88fa      	ldrh	r2, [r7, #6]
 800a326:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	88fa      	ldrh	r2, [r7, #6]
 800a32e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a33a:	d108      	bne.n	800a34e <HAL_UART_Transmit+0x6c>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d104      	bne.n	800a34e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a344:	2300      	movs	r3, #0
 800a346:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	61bb      	str	r3, [r7, #24]
 800a34c:	e003      	b.n	800a356 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a352:	2300      	movs	r3, #0
 800a354:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a356:	e030      	b.n	800a3ba <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	2200      	movs	r2, #0
 800a360:	2180      	movs	r1, #128	@ 0x80
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f001 fcb8 	bl	800bcd8 <UART_WaitOnFlagUntilTimeout>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d005      	beq.n	800a37a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2220      	movs	r2, #32
 800a372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e03d      	b.n	800a3f6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10b      	bne.n	800a398 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	461a      	mov	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a38e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	3302      	adds	r3, #2
 800a394:	61bb      	str	r3, [r7, #24]
 800a396:	e007      	b.n	800a3a8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	781a      	ldrb	r2, [r3, #0]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1c8      	bne.n	800a358 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2140      	movs	r1, #64	@ 0x40
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f001 fc81 	bl	800bcd8 <UART_WaitOnFlagUntilTimeout>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d005      	beq.n	800a3e8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2220      	movs	r2, #32
 800a3e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e006      	b.n	800a3f6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e000      	b.n	800a3f6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a3f4:	2302      	movs	r3, #2
  }
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3720      	adds	r7, #32
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b09a      	sub	sp, #104	@ 0x68
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a41c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a426:	657b      	str	r3, [r7, #84]	@ 0x54
 800a428:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a42c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e6      	bne.n	800a408 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3308      	adds	r3, #8
 800a440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a44a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a44c:	4b46      	ldr	r3, [pc, #280]	@ (800a568 <HAL_UART_AbortReceive+0x168>)
 800a44e:	4013      	ands	r3, r2
 800a450:	663b      	str	r3, [r7, #96]	@ 0x60
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3308      	adds	r3, #8
 800a458:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a45a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e5      	bne.n	800a43a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a472:	2b01      	cmp	r3, #1
 800a474:	d118      	bne.n	800a4a8 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	e853 3f00 	ldrex	r3, [r3]
 800a482:	61fb      	str	r3, [r7, #28]
   return(result);
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f023 0310 	bic.w	r3, r3, #16
 800a48a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	461a      	mov	r2, r3
 800a492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a496:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a498:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a49a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a49c:	e841 2300 	strex	r3, r2, [r1]
 800a4a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1e6      	bne.n	800a476 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b2:	2b40      	cmp	r3, #64	@ 0x40
 800a4b4:	d13b      	bne.n	800a52e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	e853 3f00 	ldrex	r3, [r3]
 800a4c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4d6:	61ba      	str	r2, [r7, #24]
 800a4d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4da:	6979      	ldr	r1, [r7, #20]
 800a4dc:	69ba      	ldr	r2, [r7, #24]
 800a4de:	e841 2300 	strex	r3, r2, [r1]
 800a4e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e5      	bne.n	800a4b6 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d01c      	beq.n	800a52e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a504:	4618      	mov	r0, r3
 800a506:	f7f9 fd33 	bl	8003f70 <HAL_DMA_Abort>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00e      	beq.n	800a52e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a516:	4618      	mov	r0, r3
 800a518:	f7fb f9f0 	bl	80058fc <HAL_DMA_GetError>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b20      	cmp	r3, #32
 800a520:	d105      	bne.n	800a52e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2210      	movs	r2, #16
 800a526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e017      	b.n	800a55e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	220f      	movs	r2, #15
 800a53c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	699a      	ldr	r2, [r3, #24]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f042 0208 	orr.w	r2, r2, #8
 800a54c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2220      	movs	r2, #32
 800a552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3768      	adds	r7, #104	@ 0x68
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	effffffe 	.word	0xeffffffe

0800a56c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b0ba      	sub	sp, #232	@ 0xe8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	69db      	ldr	r3, [r3, #28]
 800a57a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a592:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a596:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a59a:	4013      	ands	r3, r2
 800a59c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a5a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d11b      	bne.n	800a5e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5ac:	f003 0320 	and.w	r3, r3, #32
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d015      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5b8:	f003 0320 	and.w	r3, r3, #32
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d105      	bne.n	800a5cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d009      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 8393 	beq.w	800acfc <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	4798      	blx	r3
      }
      return;
 800a5de:	e38d      	b.n	800acfc <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a5e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 8123 	beq.w	800a830 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a5ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a5ee:	4b8d      	ldr	r3, [pc, #564]	@ (800a824 <HAL_UART_IRQHandler+0x2b8>)
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d106      	bne.n	800a604 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a5f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a5fa:	4b8b      	ldr	r3, [pc, #556]	@ (800a828 <HAL_UART_IRQHandler+0x2bc>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 8116 	beq.w	800a830 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d011      	beq.n	800a634 <HAL_UART_IRQHandler+0xc8>
 800a610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00b      	beq.n	800a634 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2201      	movs	r2, #1
 800a622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a62a:	f043 0201 	orr.w	r2, r3, #1
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d011      	beq.n	800a664 <HAL_UART_IRQHandler+0xf8>
 800a640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2202      	movs	r2, #2
 800a652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a65a:	f043 0204 	orr.w	r2, r3, #4
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a668:	f003 0304 	and.w	r3, r3, #4
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d011      	beq.n	800a694 <HAL_UART_IRQHandler+0x128>
 800a670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a674:	f003 0301 	and.w	r3, r3, #1
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00b      	beq.n	800a694 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2204      	movs	r2, #4
 800a682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a68a:	f043 0202 	orr.w	r2, r3, #2
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a698:	f003 0308 	and.w	r3, r3, #8
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d017      	beq.n	800a6d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6a4:	f003 0320 	and.w	r3, r3, #32
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d105      	bne.n	800a6b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a6ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a6b0:	4b5c      	ldr	r3, [pc, #368]	@ (800a824 <HAL_UART_IRQHandler+0x2b8>)
 800a6b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00b      	beq.n	800a6d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2208      	movs	r2, #8
 800a6be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6c6:	f043 0208 	orr.w	r2, r3, #8
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d012      	beq.n	800a702 <HAL_UART_IRQHandler+0x196>
 800a6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00c      	beq.n	800a702 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6f8:	f043 0220 	orr.w	r2, r3, #32
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 82f9 	beq.w	800ad00 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a712:	f003 0320 	and.w	r3, r3, #32
 800a716:	2b00      	cmp	r3, #0
 800a718:	d013      	beq.n	800a742 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a71a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a71e:	f003 0320 	and.w	r3, r3, #32
 800a722:	2b00      	cmp	r3, #0
 800a724:	d105      	bne.n	800a732 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a72a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d007      	beq.n	800a742 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a748:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a756:	2b40      	cmp	r3, #64	@ 0x40
 800a758:	d005      	beq.n	800a766 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a75a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a75e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a762:	2b00      	cmp	r3, #0
 800a764:	d054      	beq.n	800a810 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f001 fc0c 	bl	800bf84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a776:	2b40      	cmp	r3, #64	@ 0x40
 800a778:	d146      	bne.n	800a808 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3308      	adds	r3, #8
 800a780:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a784:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a788:	e853 3f00 	ldrex	r3, [r3]
 800a78c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a790:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a798:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3308      	adds	r3, #8
 800a7a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a7a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a7aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a7b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a7b6:	e841 2300 	strex	r3, r2, [r1]
 800a7ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a7be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1d9      	bne.n	800a77a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d017      	beq.n	800a800 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7d6:	4a15      	ldr	r2, [pc, #84]	@ (800a82c <HAL_UART_IRQHandler+0x2c0>)
 800a7d8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7f9 fee3 	bl	80045ac <HAL_DMA_Abort_IT>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d019      	beq.n	800a820 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7fe:	e00f      	b.n	800a820 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 faa7 	bl	800ad54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a806:	e00b      	b.n	800a820 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 faa3 	bl	800ad54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a80e:	e007      	b.n	800a820 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fa9f 	bl	800ad54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a81e:	e26f      	b.n	800ad00 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a820:	bf00      	nop
    return;
 800a822:	e26d      	b.n	800ad00 <HAL_UART_IRQHandler+0x794>
 800a824:	10000001 	.word	0x10000001
 800a828:	04000120 	.word	0x04000120
 800a82c:	0800c237 	.word	0x0800c237

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a834:	2b01      	cmp	r3, #1
 800a836:	f040 8203 	bne.w	800ac40 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a83a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a83e:	f003 0310 	and.w	r3, r3, #16
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 81fc 	beq.w	800ac40 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a84c:	f003 0310 	and.w	r3, r3, #16
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 81f5 	beq.w	800ac40 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2210      	movs	r2, #16
 800a85c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a868:	2b40      	cmp	r3, #64	@ 0x40
 800a86a:	f040 816d 	bne.w	800ab48 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4aa4      	ldr	r2, [pc, #656]	@ (800ab08 <HAL_UART_IRQHandler+0x59c>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d068      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4aa1      	ldr	r2, [pc, #644]	@ (800ab0c <HAL_UART_IRQHandler+0x5a0>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d061      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a9f      	ldr	r2, [pc, #636]	@ (800ab10 <HAL_UART_IRQHandler+0x5a4>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d05a      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a9c      	ldr	r2, [pc, #624]	@ (800ab14 <HAL_UART_IRQHandler+0x5a8>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d053      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a9a      	ldr	r2, [pc, #616]	@ (800ab18 <HAL_UART_IRQHandler+0x5ac>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d04c      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a97      	ldr	r2, [pc, #604]	@ (800ab1c <HAL_UART_IRQHandler+0x5b0>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d045      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a95      	ldr	r2, [pc, #596]	@ (800ab20 <HAL_UART_IRQHandler+0x5b4>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d03e      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a92      	ldr	r2, [pc, #584]	@ (800ab24 <HAL_UART_IRQHandler+0x5b8>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d037      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a90      	ldr	r2, [pc, #576]	@ (800ab28 <HAL_UART_IRQHandler+0x5bc>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d030      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a8d      	ldr	r2, [pc, #564]	@ (800ab2c <HAL_UART_IRQHandler+0x5c0>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d029      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a8b      	ldr	r2, [pc, #556]	@ (800ab30 <HAL_UART_IRQHandler+0x5c4>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d022      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a88      	ldr	r2, [pc, #544]	@ (800ab34 <HAL_UART_IRQHandler+0x5c8>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d01b      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a86      	ldr	r2, [pc, #536]	@ (800ab38 <HAL_UART_IRQHandler+0x5cc>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d014      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a83      	ldr	r2, [pc, #524]	@ (800ab3c <HAL_UART_IRQHandler+0x5d0>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d00d      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a81      	ldr	r2, [pc, #516]	@ (800ab40 <HAL_UART_IRQHandler+0x5d4>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d006      	beq.n	800a94e <HAL_UART_IRQHandler+0x3e2>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a7e      	ldr	r2, [pc, #504]	@ (800ab44 <HAL_UART_IRQHandler+0x5d8>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d106      	bne.n	800a95c <HAL_UART_IRQHandler+0x3f0>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	e005      	b.n	800a968 <HAL_UART_IRQHandler+0x3fc>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	b29b      	uxth	r3, r3
 800a968:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a96c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 80ad 	beq.w	800aad0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a97c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a980:	429a      	cmp	r2, r3
 800a982:	f080 80a5 	bcs.w	800aad0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a98c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a99c:	f000 8087 	beq.w	800aaae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a9ac:	e853 3f00 	ldrex	r3, [r3]
 800a9b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a9b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a9b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a9d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a9da:	e841 2300 	strex	r3, r2, [r1]
 800a9de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a9e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1da      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9f4:	e853 3f00 	ldrex	r3, [r3]
 800a9f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a9fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9fc:	f023 0301 	bic.w	r3, r3, #1
 800aa00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3308      	adds	r3, #8
 800aa0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aa0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aa12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aa16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aa1a:	e841 2300 	strex	r3, r2, [r1]
 800aa1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aa20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1e1      	bne.n	800a9ea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa30:	e853 3f00 	ldrex	r3, [r3]
 800aa34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aa36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3308      	adds	r3, #8
 800aa46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aa4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aa50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa52:	e841 2300 	strex	r3, r2, [r1]
 800aa56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aa58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1e3      	bne.n	800aa26 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2220      	movs	r2, #32
 800aa62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa7c:	f023 0310 	bic.w	r3, r3, #16
 800aa80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa96:	e841 2300 	strex	r3, r2, [r1]
 800aa9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1e4      	bne.n	800aa6c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7f9 fa61 	bl	8003f70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2202      	movs	r2, #2
 800aab2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7f7 fb15 	bl	80020f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aace:	e119      	b.n	800ad04 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aada:	429a      	cmp	r2, r3
 800aadc:	f040 8112 	bne.w	800ad04 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaec:	f040 810a 	bne.w	800ad04 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2202      	movs	r2, #2
 800aaf4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7f7 fafa 	bl	80020f8 <HAL_UARTEx_RxEventCallback>
      return;
 800ab04:	e0fe      	b.n	800ad04 <HAL_UART_IRQHandler+0x798>
 800ab06:	bf00      	nop
 800ab08:	40020010 	.word	0x40020010
 800ab0c:	40020028 	.word	0x40020028
 800ab10:	40020040 	.word	0x40020040
 800ab14:	40020058 	.word	0x40020058
 800ab18:	40020070 	.word	0x40020070
 800ab1c:	40020088 	.word	0x40020088
 800ab20:	400200a0 	.word	0x400200a0
 800ab24:	400200b8 	.word	0x400200b8
 800ab28:	40020410 	.word	0x40020410
 800ab2c:	40020428 	.word	0x40020428
 800ab30:	40020440 	.word	0x40020440
 800ab34:	40020458 	.word	0x40020458
 800ab38:	40020470 	.word	0x40020470
 800ab3c:	40020488 	.word	0x40020488
 800ab40:	400204a0 	.word	0x400204a0
 800ab44:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 80cf 	beq.w	800ad08 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800ab6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 80ca 	beq.w	800ad08 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	461a      	mov	r2, r3
 800ab92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab96:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab98:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e4      	bne.n	800ab74 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3308      	adds	r3, #8
 800abb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	623b      	str	r3, [r7, #32]
   return(result);
 800abba:	6a3a      	ldr	r2, [r7, #32]
 800abbc:	4b55      	ldr	r3, [pc, #340]	@ (800ad14 <HAL_UART_IRQHandler+0x7a8>)
 800abbe:	4013      	ands	r3, r2
 800abc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3308      	adds	r3, #8
 800abca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800abce:	633a      	str	r2, [r7, #48]	@ 0x30
 800abd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abd6:	e841 2300 	strex	r3, r2, [r1]
 800abda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1e3      	bne.n	800abaa <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2220      	movs	r2, #32
 800abe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	e853 3f00 	ldrex	r3, [r3]
 800ac02:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f023 0310 	bic.w	r3, r3, #16
 800ac0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac18:	61fb      	str	r3, [r7, #28]
 800ac1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1c:	69b9      	ldr	r1, [r7, #24]
 800ac1e:	69fa      	ldr	r2, [r7, #28]
 800ac20:	e841 2300 	strex	r3, r2, [r1]
 800ac24:	617b      	str	r3, [r7, #20]
   return(result);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1e4      	bne.n	800abf6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7f7 fa5d 	bl	80020f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac3e:	e063      	b.n	800ad08 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00e      	beq.n	800ac6a <HAL_UART_IRQHandler+0x6fe>
 800ac4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d008      	beq.n	800ac6a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ac60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f001 fb24 	bl	800c2b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac68:	e051      	b.n	800ad0e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ac6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d014      	beq.n	800aca0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ac76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d105      	bne.n	800ac8e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ac82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d008      	beq.n	800aca0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d03a      	beq.n	800ad0c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	4798      	blx	r3
    }
    return;
 800ac9e:	e035      	b.n	800ad0c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d009      	beq.n	800acc0 <HAL_UART_IRQHandler+0x754>
 800acac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d003      	beq.n	800acc0 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f001 face 	bl	800c25a <UART_EndTransmit_IT>
    return;
 800acbe:	e026      	b.n	800ad0e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800acc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d009      	beq.n	800ace0 <HAL_UART_IRQHandler+0x774>
 800accc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acd0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d003      	beq.n	800ace0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f001 fafd 	bl	800c2d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acde:	e016      	b.n	800ad0e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ace0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ace4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d010      	beq.n	800ad0e <HAL_UART_IRQHandler+0x7a2>
 800acec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	da0c      	bge.n	800ad0e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f001 fae5 	bl	800c2c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acfa:	e008      	b.n	800ad0e <HAL_UART_IRQHandler+0x7a2>
      return;
 800acfc:	bf00      	nop
 800acfe:	e006      	b.n	800ad0e <HAL_UART_IRQHandler+0x7a2>
    return;
 800ad00:	bf00      	nop
 800ad02:	e004      	b.n	800ad0e <HAL_UART_IRQHandler+0x7a2>
      return;
 800ad04:	bf00      	nop
 800ad06:	e002      	b.n	800ad0e <HAL_UART_IRQHandler+0x7a2>
      return;
 800ad08:	bf00      	nop
 800ad0a:	e000      	b.n	800ad0e <HAL_UART_IRQHandler+0x7a2>
    return;
 800ad0c:	bf00      	nop
  }
}
 800ad0e:	37e8      	adds	r7, #232	@ 0xe8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	effffffe 	.word	0xeffffffe

0800ad18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad6c:	b092      	sub	sp, #72	@ 0x48
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	689a      	ldr	r2, [r3, #8]
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	431a      	orrs	r2, r3
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	431a      	orrs	r2, r3
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	4bbe      	ldr	r3, [pc, #760]	@ (800b090 <UART_SetConfig+0x328>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ada0:	430b      	orrs	r3, r1
 800ada2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	68da      	ldr	r2, [r3, #12]
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4ab3      	ldr	r2, [pc, #716]	@ (800b094 <UART_SetConfig+0x32c>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d004      	beq.n	800add4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800add0:	4313      	orrs	r3, r2
 800add2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689a      	ldr	r2, [r3, #8]
 800adda:	4baf      	ldr	r3, [pc, #700]	@ (800b098 <UART_SetConfig+0x330>)
 800addc:	4013      	ands	r3, r2
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	6812      	ldr	r2, [r2, #0]
 800ade2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ade4:	430b      	orrs	r3, r1
 800ade6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adee:	f023 010f 	bic.w	r1, r3, #15
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4aa6      	ldr	r2, [pc, #664]	@ (800b09c <UART_SetConfig+0x334>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d177      	bne.n	800aef8 <UART_SetConfig+0x190>
 800ae08:	4ba5      	ldr	r3, [pc, #660]	@ (800b0a0 <UART_SetConfig+0x338>)
 800ae0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae10:	2b28      	cmp	r3, #40	@ 0x28
 800ae12:	d86d      	bhi.n	800aef0 <UART_SetConfig+0x188>
 800ae14:	a201      	add	r2, pc, #4	@ (adr r2, 800ae1c <UART_SetConfig+0xb4>)
 800ae16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1a:	bf00      	nop
 800ae1c:	0800aec1 	.word	0x0800aec1
 800ae20:	0800aef1 	.word	0x0800aef1
 800ae24:	0800aef1 	.word	0x0800aef1
 800ae28:	0800aef1 	.word	0x0800aef1
 800ae2c:	0800aef1 	.word	0x0800aef1
 800ae30:	0800aef1 	.word	0x0800aef1
 800ae34:	0800aef1 	.word	0x0800aef1
 800ae38:	0800aef1 	.word	0x0800aef1
 800ae3c:	0800aec9 	.word	0x0800aec9
 800ae40:	0800aef1 	.word	0x0800aef1
 800ae44:	0800aef1 	.word	0x0800aef1
 800ae48:	0800aef1 	.word	0x0800aef1
 800ae4c:	0800aef1 	.word	0x0800aef1
 800ae50:	0800aef1 	.word	0x0800aef1
 800ae54:	0800aef1 	.word	0x0800aef1
 800ae58:	0800aef1 	.word	0x0800aef1
 800ae5c:	0800aed1 	.word	0x0800aed1
 800ae60:	0800aef1 	.word	0x0800aef1
 800ae64:	0800aef1 	.word	0x0800aef1
 800ae68:	0800aef1 	.word	0x0800aef1
 800ae6c:	0800aef1 	.word	0x0800aef1
 800ae70:	0800aef1 	.word	0x0800aef1
 800ae74:	0800aef1 	.word	0x0800aef1
 800ae78:	0800aef1 	.word	0x0800aef1
 800ae7c:	0800aed9 	.word	0x0800aed9
 800ae80:	0800aef1 	.word	0x0800aef1
 800ae84:	0800aef1 	.word	0x0800aef1
 800ae88:	0800aef1 	.word	0x0800aef1
 800ae8c:	0800aef1 	.word	0x0800aef1
 800ae90:	0800aef1 	.word	0x0800aef1
 800ae94:	0800aef1 	.word	0x0800aef1
 800ae98:	0800aef1 	.word	0x0800aef1
 800ae9c:	0800aee1 	.word	0x0800aee1
 800aea0:	0800aef1 	.word	0x0800aef1
 800aea4:	0800aef1 	.word	0x0800aef1
 800aea8:	0800aef1 	.word	0x0800aef1
 800aeac:	0800aef1 	.word	0x0800aef1
 800aeb0:	0800aef1 	.word	0x0800aef1
 800aeb4:	0800aef1 	.word	0x0800aef1
 800aeb8:	0800aef1 	.word	0x0800aef1
 800aebc:	0800aee9 	.word	0x0800aee9
 800aec0:	2301      	movs	r3, #1
 800aec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec6:	e326      	b.n	800b516 <UART_SetConfig+0x7ae>
 800aec8:	2304      	movs	r3, #4
 800aeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aece:	e322      	b.n	800b516 <UART_SetConfig+0x7ae>
 800aed0:	2308      	movs	r3, #8
 800aed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed6:	e31e      	b.n	800b516 <UART_SetConfig+0x7ae>
 800aed8:	2310      	movs	r3, #16
 800aeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aede:	e31a      	b.n	800b516 <UART_SetConfig+0x7ae>
 800aee0:	2320      	movs	r3, #32
 800aee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee6:	e316      	b.n	800b516 <UART_SetConfig+0x7ae>
 800aee8:	2340      	movs	r3, #64	@ 0x40
 800aeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeee:	e312      	b.n	800b516 <UART_SetConfig+0x7ae>
 800aef0:	2380      	movs	r3, #128	@ 0x80
 800aef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef6:	e30e      	b.n	800b516 <UART_SetConfig+0x7ae>
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a69      	ldr	r2, [pc, #420]	@ (800b0a4 <UART_SetConfig+0x33c>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d130      	bne.n	800af64 <UART_SetConfig+0x1fc>
 800af02:	4b67      	ldr	r3, [pc, #412]	@ (800b0a0 <UART_SetConfig+0x338>)
 800af04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	2b05      	cmp	r3, #5
 800af0c:	d826      	bhi.n	800af5c <UART_SetConfig+0x1f4>
 800af0e:	a201      	add	r2, pc, #4	@ (adr r2, 800af14 <UART_SetConfig+0x1ac>)
 800af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af14:	0800af2d 	.word	0x0800af2d
 800af18:	0800af35 	.word	0x0800af35
 800af1c:	0800af3d 	.word	0x0800af3d
 800af20:	0800af45 	.word	0x0800af45
 800af24:	0800af4d 	.word	0x0800af4d
 800af28:	0800af55 	.word	0x0800af55
 800af2c:	2300      	movs	r3, #0
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af32:	e2f0      	b.n	800b516 <UART_SetConfig+0x7ae>
 800af34:	2304      	movs	r3, #4
 800af36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3a:	e2ec      	b.n	800b516 <UART_SetConfig+0x7ae>
 800af3c:	2308      	movs	r3, #8
 800af3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af42:	e2e8      	b.n	800b516 <UART_SetConfig+0x7ae>
 800af44:	2310      	movs	r3, #16
 800af46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af4a:	e2e4      	b.n	800b516 <UART_SetConfig+0x7ae>
 800af4c:	2320      	movs	r3, #32
 800af4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af52:	e2e0      	b.n	800b516 <UART_SetConfig+0x7ae>
 800af54:	2340      	movs	r3, #64	@ 0x40
 800af56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5a:	e2dc      	b.n	800b516 <UART_SetConfig+0x7ae>
 800af5c:	2380      	movs	r3, #128	@ 0x80
 800af5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af62:	e2d8      	b.n	800b516 <UART_SetConfig+0x7ae>
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a4f      	ldr	r2, [pc, #316]	@ (800b0a8 <UART_SetConfig+0x340>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d130      	bne.n	800afd0 <UART_SetConfig+0x268>
 800af6e:	4b4c      	ldr	r3, [pc, #304]	@ (800b0a0 <UART_SetConfig+0x338>)
 800af70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af72:	f003 0307 	and.w	r3, r3, #7
 800af76:	2b05      	cmp	r3, #5
 800af78:	d826      	bhi.n	800afc8 <UART_SetConfig+0x260>
 800af7a:	a201      	add	r2, pc, #4	@ (adr r2, 800af80 <UART_SetConfig+0x218>)
 800af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af80:	0800af99 	.word	0x0800af99
 800af84:	0800afa1 	.word	0x0800afa1
 800af88:	0800afa9 	.word	0x0800afa9
 800af8c:	0800afb1 	.word	0x0800afb1
 800af90:	0800afb9 	.word	0x0800afb9
 800af94:	0800afc1 	.word	0x0800afc1
 800af98:	2300      	movs	r3, #0
 800af9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9e:	e2ba      	b.n	800b516 <UART_SetConfig+0x7ae>
 800afa0:	2304      	movs	r3, #4
 800afa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa6:	e2b6      	b.n	800b516 <UART_SetConfig+0x7ae>
 800afa8:	2308      	movs	r3, #8
 800afaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afae:	e2b2      	b.n	800b516 <UART_SetConfig+0x7ae>
 800afb0:	2310      	movs	r3, #16
 800afb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb6:	e2ae      	b.n	800b516 <UART_SetConfig+0x7ae>
 800afb8:	2320      	movs	r3, #32
 800afba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afbe:	e2aa      	b.n	800b516 <UART_SetConfig+0x7ae>
 800afc0:	2340      	movs	r3, #64	@ 0x40
 800afc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc6:	e2a6      	b.n	800b516 <UART_SetConfig+0x7ae>
 800afc8:	2380      	movs	r3, #128	@ 0x80
 800afca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afce:	e2a2      	b.n	800b516 <UART_SetConfig+0x7ae>
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a35      	ldr	r2, [pc, #212]	@ (800b0ac <UART_SetConfig+0x344>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d130      	bne.n	800b03c <UART_SetConfig+0x2d4>
 800afda:	4b31      	ldr	r3, [pc, #196]	@ (800b0a0 <UART_SetConfig+0x338>)
 800afdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afde:	f003 0307 	and.w	r3, r3, #7
 800afe2:	2b05      	cmp	r3, #5
 800afe4:	d826      	bhi.n	800b034 <UART_SetConfig+0x2cc>
 800afe6:	a201      	add	r2, pc, #4	@ (adr r2, 800afec <UART_SetConfig+0x284>)
 800afe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afec:	0800b005 	.word	0x0800b005
 800aff0:	0800b00d 	.word	0x0800b00d
 800aff4:	0800b015 	.word	0x0800b015
 800aff8:	0800b01d 	.word	0x0800b01d
 800affc:	0800b025 	.word	0x0800b025
 800b000:	0800b02d 	.word	0x0800b02d
 800b004:	2300      	movs	r3, #0
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00a:	e284      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b00c:	2304      	movs	r3, #4
 800b00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b012:	e280      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b014:	2308      	movs	r3, #8
 800b016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01a:	e27c      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b01c:	2310      	movs	r3, #16
 800b01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b022:	e278      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b024:	2320      	movs	r3, #32
 800b026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b02a:	e274      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b02c:	2340      	movs	r3, #64	@ 0x40
 800b02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b032:	e270      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b034:	2380      	movs	r3, #128	@ 0x80
 800b036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b03a:	e26c      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a1b      	ldr	r2, [pc, #108]	@ (800b0b0 <UART_SetConfig+0x348>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d142      	bne.n	800b0cc <UART_SetConfig+0x364>
 800b046:	4b16      	ldr	r3, [pc, #88]	@ (800b0a0 <UART_SetConfig+0x338>)
 800b048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b04a:	f003 0307 	and.w	r3, r3, #7
 800b04e:	2b05      	cmp	r3, #5
 800b050:	d838      	bhi.n	800b0c4 <UART_SetConfig+0x35c>
 800b052:	a201      	add	r2, pc, #4	@ (adr r2, 800b058 <UART_SetConfig+0x2f0>)
 800b054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b058:	0800b071 	.word	0x0800b071
 800b05c:	0800b079 	.word	0x0800b079
 800b060:	0800b081 	.word	0x0800b081
 800b064:	0800b089 	.word	0x0800b089
 800b068:	0800b0b5 	.word	0x0800b0b5
 800b06c:	0800b0bd 	.word	0x0800b0bd
 800b070:	2300      	movs	r3, #0
 800b072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b076:	e24e      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b078:	2304      	movs	r3, #4
 800b07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b07e:	e24a      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b080:	2308      	movs	r3, #8
 800b082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b086:	e246      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b088:	2310      	movs	r3, #16
 800b08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b08e:	e242      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b090:	cfff69f3 	.word	0xcfff69f3
 800b094:	58000c00 	.word	0x58000c00
 800b098:	11fff4ff 	.word	0x11fff4ff
 800b09c:	40011000 	.word	0x40011000
 800b0a0:	58024400 	.word	0x58024400
 800b0a4:	40004400 	.word	0x40004400
 800b0a8:	40004800 	.word	0x40004800
 800b0ac:	40004c00 	.word	0x40004c00
 800b0b0:	40005000 	.word	0x40005000
 800b0b4:	2320      	movs	r3, #32
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ba:	e22c      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b0bc:	2340      	movs	r3, #64	@ 0x40
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c2:	e228      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b0c4:	2380      	movs	r3, #128	@ 0x80
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ca:	e224      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4ab1      	ldr	r2, [pc, #708]	@ (800b398 <UART_SetConfig+0x630>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d176      	bne.n	800b1c4 <UART_SetConfig+0x45c>
 800b0d6:	4bb1      	ldr	r3, [pc, #708]	@ (800b39c <UART_SetConfig+0x634>)
 800b0d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b0de:	2b28      	cmp	r3, #40	@ 0x28
 800b0e0:	d86c      	bhi.n	800b1bc <UART_SetConfig+0x454>
 800b0e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0e8 <UART_SetConfig+0x380>)
 800b0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e8:	0800b18d 	.word	0x0800b18d
 800b0ec:	0800b1bd 	.word	0x0800b1bd
 800b0f0:	0800b1bd 	.word	0x0800b1bd
 800b0f4:	0800b1bd 	.word	0x0800b1bd
 800b0f8:	0800b1bd 	.word	0x0800b1bd
 800b0fc:	0800b1bd 	.word	0x0800b1bd
 800b100:	0800b1bd 	.word	0x0800b1bd
 800b104:	0800b1bd 	.word	0x0800b1bd
 800b108:	0800b195 	.word	0x0800b195
 800b10c:	0800b1bd 	.word	0x0800b1bd
 800b110:	0800b1bd 	.word	0x0800b1bd
 800b114:	0800b1bd 	.word	0x0800b1bd
 800b118:	0800b1bd 	.word	0x0800b1bd
 800b11c:	0800b1bd 	.word	0x0800b1bd
 800b120:	0800b1bd 	.word	0x0800b1bd
 800b124:	0800b1bd 	.word	0x0800b1bd
 800b128:	0800b19d 	.word	0x0800b19d
 800b12c:	0800b1bd 	.word	0x0800b1bd
 800b130:	0800b1bd 	.word	0x0800b1bd
 800b134:	0800b1bd 	.word	0x0800b1bd
 800b138:	0800b1bd 	.word	0x0800b1bd
 800b13c:	0800b1bd 	.word	0x0800b1bd
 800b140:	0800b1bd 	.word	0x0800b1bd
 800b144:	0800b1bd 	.word	0x0800b1bd
 800b148:	0800b1a5 	.word	0x0800b1a5
 800b14c:	0800b1bd 	.word	0x0800b1bd
 800b150:	0800b1bd 	.word	0x0800b1bd
 800b154:	0800b1bd 	.word	0x0800b1bd
 800b158:	0800b1bd 	.word	0x0800b1bd
 800b15c:	0800b1bd 	.word	0x0800b1bd
 800b160:	0800b1bd 	.word	0x0800b1bd
 800b164:	0800b1bd 	.word	0x0800b1bd
 800b168:	0800b1ad 	.word	0x0800b1ad
 800b16c:	0800b1bd 	.word	0x0800b1bd
 800b170:	0800b1bd 	.word	0x0800b1bd
 800b174:	0800b1bd 	.word	0x0800b1bd
 800b178:	0800b1bd 	.word	0x0800b1bd
 800b17c:	0800b1bd 	.word	0x0800b1bd
 800b180:	0800b1bd 	.word	0x0800b1bd
 800b184:	0800b1bd 	.word	0x0800b1bd
 800b188:	0800b1b5 	.word	0x0800b1b5
 800b18c:	2301      	movs	r3, #1
 800b18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b192:	e1c0      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b194:	2304      	movs	r3, #4
 800b196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b19a:	e1bc      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b19c:	2308      	movs	r3, #8
 800b19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1a2:	e1b8      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b1a4:	2310      	movs	r3, #16
 800b1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1aa:	e1b4      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b1ac:	2320      	movs	r3, #32
 800b1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1b2:	e1b0      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b1b4:	2340      	movs	r3, #64	@ 0x40
 800b1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ba:	e1ac      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b1bc:	2380      	movs	r3, #128	@ 0x80
 800b1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1c2:	e1a8      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a75      	ldr	r2, [pc, #468]	@ (800b3a0 <UART_SetConfig+0x638>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d130      	bne.n	800b230 <UART_SetConfig+0x4c8>
 800b1ce:	4b73      	ldr	r3, [pc, #460]	@ (800b39c <UART_SetConfig+0x634>)
 800b1d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1d2:	f003 0307 	and.w	r3, r3, #7
 800b1d6:	2b05      	cmp	r3, #5
 800b1d8:	d826      	bhi.n	800b228 <UART_SetConfig+0x4c0>
 800b1da:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e0 <UART_SetConfig+0x478>)
 800b1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e0:	0800b1f9 	.word	0x0800b1f9
 800b1e4:	0800b201 	.word	0x0800b201
 800b1e8:	0800b209 	.word	0x0800b209
 800b1ec:	0800b211 	.word	0x0800b211
 800b1f0:	0800b219 	.word	0x0800b219
 800b1f4:	0800b221 	.word	0x0800b221
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fe:	e18a      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b200:	2304      	movs	r3, #4
 800b202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b206:	e186      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b208:	2308      	movs	r3, #8
 800b20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b20e:	e182      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b210:	2310      	movs	r3, #16
 800b212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b216:	e17e      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b218:	2320      	movs	r3, #32
 800b21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b21e:	e17a      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b220:	2340      	movs	r3, #64	@ 0x40
 800b222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b226:	e176      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b228:	2380      	movs	r3, #128	@ 0x80
 800b22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b22e:	e172      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a5b      	ldr	r2, [pc, #364]	@ (800b3a4 <UART_SetConfig+0x63c>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d130      	bne.n	800b29c <UART_SetConfig+0x534>
 800b23a:	4b58      	ldr	r3, [pc, #352]	@ (800b39c <UART_SetConfig+0x634>)
 800b23c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b23e:	f003 0307 	and.w	r3, r3, #7
 800b242:	2b05      	cmp	r3, #5
 800b244:	d826      	bhi.n	800b294 <UART_SetConfig+0x52c>
 800b246:	a201      	add	r2, pc, #4	@ (adr r2, 800b24c <UART_SetConfig+0x4e4>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b265 	.word	0x0800b265
 800b250:	0800b26d 	.word	0x0800b26d
 800b254:	0800b275 	.word	0x0800b275
 800b258:	0800b27d 	.word	0x0800b27d
 800b25c:	0800b285 	.word	0x0800b285
 800b260:	0800b28d 	.word	0x0800b28d
 800b264:	2300      	movs	r3, #0
 800b266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b26a:	e154      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b26c:	2304      	movs	r3, #4
 800b26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b272:	e150      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b274:	2308      	movs	r3, #8
 800b276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b27a:	e14c      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b27c:	2310      	movs	r3, #16
 800b27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b282:	e148      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b284:	2320      	movs	r3, #32
 800b286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b28a:	e144      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b28c:	2340      	movs	r3, #64	@ 0x40
 800b28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b292:	e140      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b294:	2380      	movs	r3, #128	@ 0x80
 800b296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b29a:	e13c      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a41      	ldr	r2, [pc, #260]	@ (800b3a8 <UART_SetConfig+0x640>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	f040 8082 	bne.w	800b3ac <UART_SetConfig+0x644>
 800b2a8:	4b3c      	ldr	r3, [pc, #240]	@ (800b39c <UART_SetConfig+0x634>)
 800b2aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b2b0:	2b28      	cmp	r3, #40	@ 0x28
 800b2b2:	d86d      	bhi.n	800b390 <UART_SetConfig+0x628>
 800b2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2bc <UART_SetConfig+0x554>)
 800b2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ba:	bf00      	nop
 800b2bc:	0800b361 	.word	0x0800b361
 800b2c0:	0800b391 	.word	0x0800b391
 800b2c4:	0800b391 	.word	0x0800b391
 800b2c8:	0800b391 	.word	0x0800b391
 800b2cc:	0800b391 	.word	0x0800b391
 800b2d0:	0800b391 	.word	0x0800b391
 800b2d4:	0800b391 	.word	0x0800b391
 800b2d8:	0800b391 	.word	0x0800b391
 800b2dc:	0800b369 	.word	0x0800b369
 800b2e0:	0800b391 	.word	0x0800b391
 800b2e4:	0800b391 	.word	0x0800b391
 800b2e8:	0800b391 	.word	0x0800b391
 800b2ec:	0800b391 	.word	0x0800b391
 800b2f0:	0800b391 	.word	0x0800b391
 800b2f4:	0800b391 	.word	0x0800b391
 800b2f8:	0800b391 	.word	0x0800b391
 800b2fc:	0800b371 	.word	0x0800b371
 800b300:	0800b391 	.word	0x0800b391
 800b304:	0800b391 	.word	0x0800b391
 800b308:	0800b391 	.word	0x0800b391
 800b30c:	0800b391 	.word	0x0800b391
 800b310:	0800b391 	.word	0x0800b391
 800b314:	0800b391 	.word	0x0800b391
 800b318:	0800b391 	.word	0x0800b391
 800b31c:	0800b379 	.word	0x0800b379
 800b320:	0800b391 	.word	0x0800b391
 800b324:	0800b391 	.word	0x0800b391
 800b328:	0800b391 	.word	0x0800b391
 800b32c:	0800b391 	.word	0x0800b391
 800b330:	0800b391 	.word	0x0800b391
 800b334:	0800b391 	.word	0x0800b391
 800b338:	0800b391 	.word	0x0800b391
 800b33c:	0800b381 	.word	0x0800b381
 800b340:	0800b391 	.word	0x0800b391
 800b344:	0800b391 	.word	0x0800b391
 800b348:	0800b391 	.word	0x0800b391
 800b34c:	0800b391 	.word	0x0800b391
 800b350:	0800b391 	.word	0x0800b391
 800b354:	0800b391 	.word	0x0800b391
 800b358:	0800b391 	.word	0x0800b391
 800b35c:	0800b389 	.word	0x0800b389
 800b360:	2301      	movs	r3, #1
 800b362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b366:	e0d6      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b368:	2304      	movs	r3, #4
 800b36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b36e:	e0d2      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b370:	2308      	movs	r3, #8
 800b372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b376:	e0ce      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b378:	2310      	movs	r3, #16
 800b37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b37e:	e0ca      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b380:	2320      	movs	r3, #32
 800b382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b386:	e0c6      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b388:	2340      	movs	r3, #64	@ 0x40
 800b38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b38e:	e0c2      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b390:	2380      	movs	r3, #128	@ 0x80
 800b392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b396:	e0be      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b398:	40011400 	.word	0x40011400
 800b39c:	58024400 	.word	0x58024400
 800b3a0:	40007800 	.word	0x40007800
 800b3a4:	40007c00 	.word	0x40007c00
 800b3a8:	40011800 	.word	0x40011800
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4aad      	ldr	r2, [pc, #692]	@ (800b668 <UART_SetConfig+0x900>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d176      	bne.n	800b4a4 <UART_SetConfig+0x73c>
 800b3b6:	4bad      	ldr	r3, [pc, #692]	@ (800b66c <UART_SetConfig+0x904>)
 800b3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b3be:	2b28      	cmp	r3, #40	@ 0x28
 800b3c0:	d86c      	bhi.n	800b49c <UART_SetConfig+0x734>
 800b3c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c8 <UART_SetConfig+0x660>)
 800b3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c8:	0800b46d 	.word	0x0800b46d
 800b3cc:	0800b49d 	.word	0x0800b49d
 800b3d0:	0800b49d 	.word	0x0800b49d
 800b3d4:	0800b49d 	.word	0x0800b49d
 800b3d8:	0800b49d 	.word	0x0800b49d
 800b3dc:	0800b49d 	.word	0x0800b49d
 800b3e0:	0800b49d 	.word	0x0800b49d
 800b3e4:	0800b49d 	.word	0x0800b49d
 800b3e8:	0800b475 	.word	0x0800b475
 800b3ec:	0800b49d 	.word	0x0800b49d
 800b3f0:	0800b49d 	.word	0x0800b49d
 800b3f4:	0800b49d 	.word	0x0800b49d
 800b3f8:	0800b49d 	.word	0x0800b49d
 800b3fc:	0800b49d 	.word	0x0800b49d
 800b400:	0800b49d 	.word	0x0800b49d
 800b404:	0800b49d 	.word	0x0800b49d
 800b408:	0800b47d 	.word	0x0800b47d
 800b40c:	0800b49d 	.word	0x0800b49d
 800b410:	0800b49d 	.word	0x0800b49d
 800b414:	0800b49d 	.word	0x0800b49d
 800b418:	0800b49d 	.word	0x0800b49d
 800b41c:	0800b49d 	.word	0x0800b49d
 800b420:	0800b49d 	.word	0x0800b49d
 800b424:	0800b49d 	.word	0x0800b49d
 800b428:	0800b485 	.word	0x0800b485
 800b42c:	0800b49d 	.word	0x0800b49d
 800b430:	0800b49d 	.word	0x0800b49d
 800b434:	0800b49d 	.word	0x0800b49d
 800b438:	0800b49d 	.word	0x0800b49d
 800b43c:	0800b49d 	.word	0x0800b49d
 800b440:	0800b49d 	.word	0x0800b49d
 800b444:	0800b49d 	.word	0x0800b49d
 800b448:	0800b48d 	.word	0x0800b48d
 800b44c:	0800b49d 	.word	0x0800b49d
 800b450:	0800b49d 	.word	0x0800b49d
 800b454:	0800b49d 	.word	0x0800b49d
 800b458:	0800b49d 	.word	0x0800b49d
 800b45c:	0800b49d 	.word	0x0800b49d
 800b460:	0800b49d 	.word	0x0800b49d
 800b464:	0800b49d 	.word	0x0800b49d
 800b468:	0800b495 	.word	0x0800b495
 800b46c:	2301      	movs	r3, #1
 800b46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b472:	e050      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b474:	2304      	movs	r3, #4
 800b476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47a:	e04c      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b47c:	2308      	movs	r3, #8
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b482:	e048      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b484:	2310      	movs	r3, #16
 800b486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48a:	e044      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b48c:	2320      	movs	r3, #32
 800b48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b492:	e040      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b494:	2340      	movs	r3, #64	@ 0x40
 800b496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49a:	e03c      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b49c:	2380      	movs	r3, #128	@ 0x80
 800b49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4a2:	e038      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a71      	ldr	r2, [pc, #452]	@ (800b670 <UART_SetConfig+0x908>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d130      	bne.n	800b510 <UART_SetConfig+0x7a8>
 800b4ae:	4b6f      	ldr	r3, [pc, #444]	@ (800b66c <UART_SetConfig+0x904>)
 800b4b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4b2:	f003 0307 	and.w	r3, r3, #7
 800b4b6:	2b05      	cmp	r3, #5
 800b4b8:	d826      	bhi.n	800b508 <UART_SetConfig+0x7a0>
 800b4ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b4c0 <UART_SetConfig+0x758>)
 800b4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c0:	0800b4d9 	.word	0x0800b4d9
 800b4c4:	0800b4e1 	.word	0x0800b4e1
 800b4c8:	0800b4e9 	.word	0x0800b4e9
 800b4cc:	0800b4f1 	.word	0x0800b4f1
 800b4d0:	0800b4f9 	.word	0x0800b4f9
 800b4d4:	0800b501 	.word	0x0800b501
 800b4d8:	2302      	movs	r3, #2
 800b4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4de:	e01a      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b4e0:	2304      	movs	r3, #4
 800b4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e6:	e016      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b4e8:	2308      	movs	r3, #8
 800b4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ee:	e012      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b4f0:	2310      	movs	r3, #16
 800b4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f6:	e00e      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b4f8:	2320      	movs	r3, #32
 800b4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fe:	e00a      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b500:	2340      	movs	r3, #64	@ 0x40
 800b502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b506:	e006      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b508:	2380      	movs	r3, #128	@ 0x80
 800b50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50e:	e002      	b.n	800b516 <UART_SetConfig+0x7ae>
 800b510:	2380      	movs	r3, #128	@ 0x80
 800b512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a55      	ldr	r2, [pc, #340]	@ (800b670 <UART_SetConfig+0x908>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	f040 80f8 	bne.w	800b712 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b522:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b526:	2b20      	cmp	r3, #32
 800b528:	dc46      	bgt.n	800b5b8 <UART_SetConfig+0x850>
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	db75      	blt.n	800b61a <UART_SetConfig+0x8b2>
 800b52e:	3b02      	subs	r3, #2
 800b530:	2b1e      	cmp	r3, #30
 800b532:	d872      	bhi.n	800b61a <UART_SetConfig+0x8b2>
 800b534:	a201      	add	r2, pc, #4	@ (adr r2, 800b53c <UART_SetConfig+0x7d4>)
 800b536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53a:	bf00      	nop
 800b53c:	0800b5bf 	.word	0x0800b5bf
 800b540:	0800b61b 	.word	0x0800b61b
 800b544:	0800b5c7 	.word	0x0800b5c7
 800b548:	0800b61b 	.word	0x0800b61b
 800b54c:	0800b61b 	.word	0x0800b61b
 800b550:	0800b61b 	.word	0x0800b61b
 800b554:	0800b5d7 	.word	0x0800b5d7
 800b558:	0800b61b 	.word	0x0800b61b
 800b55c:	0800b61b 	.word	0x0800b61b
 800b560:	0800b61b 	.word	0x0800b61b
 800b564:	0800b61b 	.word	0x0800b61b
 800b568:	0800b61b 	.word	0x0800b61b
 800b56c:	0800b61b 	.word	0x0800b61b
 800b570:	0800b61b 	.word	0x0800b61b
 800b574:	0800b5e7 	.word	0x0800b5e7
 800b578:	0800b61b 	.word	0x0800b61b
 800b57c:	0800b61b 	.word	0x0800b61b
 800b580:	0800b61b 	.word	0x0800b61b
 800b584:	0800b61b 	.word	0x0800b61b
 800b588:	0800b61b 	.word	0x0800b61b
 800b58c:	0800b61b 	.word	0x0800b61b
 800b590:	0800b61b 	.word	0x0800b61b
 800b594:	0800b61b 	.word	0x0800b61b
 800b598:	0800b61b 	.word	0x0800b61b
 800b59c:	0800b61b 	.word	0x0800b61b
 800b5a0:	0800b61b 	.word	0x0800b61b
 800b5a4:	0800b61b 	.word	0x0800b61b
 800b5a8:	0800b61b 	.word	0x0800b61b
 800b5ac:	0800b61b 	.word	0x0800b61b
 800b5b0:	0800b61b 	.word	0x0800b61b
 800b5b4:	0800b60d 	.word	0x0800b60d
 800b5b8:	2b40      	cmp	r3, #64	@ 0x40
 800b5ba:	d02a      	beq.n	800b612 <UART_SetConfig+0x8aa>
 800b5bc:	e02d      	b.n	800b61a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b5be:	f7fd fe25 	bl	800920c <HAL_RCCEx_GetD3PCLK1Freq>
 800b5c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5c4:	e02f      	b.n	800b626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fd fe34 	bl	8009238 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5d4:	e027      	b.n	800b626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5d6:	f107 0318 	add.w	r3, r7, #24
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fd ff80 	bl	80094e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e4:	e01f      	b.n	800b626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5e6:	4b21      	ldr	r3, [pc, #132]	@ (800b66c <UART_SetConfig+0x904>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 0320 	and.w	r3, r3, #32
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d009      	beq.n	800b606 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5f2:	4b1e      	ldr	r3, [pc, #120]	@ (800b66c <UART_SetConfig+0x904>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	08db      	lsrs	r3, r3, #3
 800b5f8:	f003 0303 	and.w	r3, r3, #3
 800b5fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b674 <UART_SetConfig+0x90c>)
 800b5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b604:	e00f      	b.n	800b626 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b606:	4b1b      	ldr	r3, [pc, #108]	@ (800b674 <UART_SetConfig+0x90c>)
 800b608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b60a:	e00c      	b.n	800b626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b60c:	4b1a      	ldr	r3, [pc, #104]	@ (800b678 <UART_SetConfig+0x910>)
 800b60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b610:	e009      	b.n	800b626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b618:	e005      	b.n	800b626 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b624:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 81ee 	beq.w	800ba0a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b632:	4a12      	ldr	r2, [pc, #72]	@ (800b67c <UART_SetConfig+0x914>)
 800b634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b638:	461a      	mov	r2, r3
 800b63a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b63c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b640:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	685a      	ldr	r2, [r3, #4]
 800b646:	4613      	mov	r3, r2
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	4413      	add	r3, r2
 800b64c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b64e:	429a      	cmp	r2, r3
 800b650:	d305      	bcc.n	800b65e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d910      	bls.n	800b680 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b664:	e1d1      	b.n	800ba0a <UART_SetConfig+0xca2>
 800b666:	bf00      	nop
 800b668:	40011c00 	.word	0x40011c00
 800b66c:	58024400 	.word	0x58024400
 800b670:	58000c00 	.word	0x58000c00
 800b674:	03d09000 	.word	0x03d09000
 800b678:	003d0900 	.word	0x003d0900
 800b67c:	0800ef04 	.word	0x0800ef04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b682:	2200      	movs	r2, #0
 800b684:	60bb      	str	r3, [r7, #8]
 800b686:	60fa      	str	r2, [r7, #12]
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b68c:	4ac0      	ldr	r2, [pc, #768]	@ (800b990 <UART_SetConfig+0xc28>)
 800b68e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b692:	b29b      	uxth	r3, r3
 800b694:	2200      	movs	r2, #0
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	607a      	str	r2, [r7, #4]
 800b69a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b69e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6a2:	f7f4 fe7d 	bl	80003a0 <__aeabi_uldivmod>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	f04f 0200 	mov.w	r2, #0
 800b6b2:	f04f 0300 	mov.w	r3, #0
 800b6b6:	020b      	lsls	r3, r1, #8
 800b6b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6bc:	0202      	lsls	r2, r0, #8
 800b6be:	6979      	ldr	r1, [r7, #20]
 800b6c0:	6849      	ldr	r1, [r1, #4]
 800b6c2:	0849      	lsrs	r1, r1, #1
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	eb12 0804 	adds.w	r8, r2, r4
 800b6ce:	eb43 0905 	adc.w	r9, r3, r5
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	469a      	mov	sl, r3
 800b6da:	4693      	mov	fp, r2
 800b6dc:	4652      	mov	r2, sl
 800b6de:	465b      	mov	r3, fp
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f4 fe5c 	bl	80003a0 <__aeabi_uldivmod>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6f6:	d308      	bcc.n	800b70a <UART_SetConfig+0x9a2>
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6fe:	d204      	bcs.n	800b70a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b706:	60da      	str	r2, [r3, #12]
 800b708:	e17f      	b.n	800ba0a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b710:	e17b      	b.n	800ba0a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	69db      	ldr	r3, [r3, #28]
 800b716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b71a:	f040 80bd 	bne.w	800b898 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b71e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b722:	2b20      	cmp	r3, #32
 800b724:	dc48      	bgt.n	800b7b8 <UART_SetConfig+0xa50>
 800b726:	2b00      	cmp	r3, #0
 800b728:	db7b      	blt.n	800b822 <UART_SetConfig+0xaba>
 800b72a:	2b20      	cmp	r3, #32
 800b72c:	d879      	bhi.n	800b822 <UART_SetConfig+0xaba>
 800b72e:	a201      	add	r2, pc, #4	@ (adr r2, 800b734 <UART_SetConfig+0x9cc>)
 800b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b734:	0800b7bf 	.word	0x0800b7bf
 800b738:	0800b7c7 	.word	0x0800b7c7
 800b73c:	0800b823 	.word	0x0800b823
 800b740:	0800b823 	.word	0x0800b823
 800b744:	0800b7cf 	.word	0x0800b7cf
 800b748:	0800b823 	.word	0x0800b823
 800b74c:	0800b823 	.word	0x0800b823
 800b750:	0800b823 	.word	0x0800b823
 800b754:	0800b7df 	.word	0x0800b7df
 800b758:	0800b823 	.word	0x0800b823
 800b75c:	0800b823 	.word	0x0800b823
 800b760:	0800b823 	.word	0x0800b823
 800b764:	0800b823 	.word	0x0800b823
 800b768:	0800b823 	.word	0x0800b823
 800b76c:	0800b823 	.word	0x0800b823
 800b770:	0800b823 	.word	0x0800b823
 800b774:	0800b7ef 	.word	0x0800b7ef
 800b778:	0800b823 	.word	0x0800b823
 800b77c:	0800b823 	.word	0x0800b823
 800b780:	0800b823 	.word	0x0800b823
 800b784:	0800b823 	.word	0x0800b823
 800b788:	0800b823 	.word	0x0800b823
 800b78c:	0800b823 	.word	0x0800b823
 800b790:	0800b823 	.word	0x0800b823
 800b794:	0800b823 	.word	0x0800b823
 800b798:	0800b823 	.word	0x0800b823
 800b79c:	0800b823 	.word	0x0800b823
 800b7a0:	0800b823 	.word	0x0800b823
 800b7a4:	0800b823 	.word	0x0800b823
 800b7a8:	0800b823 	.word	0x0800b823
 800b7ac:	0800b823 	.word	0x0800b823
 800b7b0:	0800b823 	.word	0x0800b823
 800b7b4:	0800b815 	.word	0x0800b815
 800b7b8:	2b40      	cmp	r3, #64	@ 0x40
 800b7ba:	d02e      	beq.n	800b81a <UART_SetConfig+0xab2>
 800b7bc:	e031      	b.n	800b822 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7be:	f7fc fb3b 	bl	8007e38 <HAL_RCC_GetPCLK1Freq>
 800b7c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b7c4:	e033      	b.n	800b82e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7c6:	f7fc fb4d 	bl	8007e64 <HAL_RCC_GetPCLK2Freq>
 800b7ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b7cc:	e02f      	b.n	800b82e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7fd fd30 	bl	8009238 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7dc:	e027      	b.n	800b82e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7de:	f107 0318 	add.w	r3, r7, #24
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fd fe7c 	bl	80094e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ec:	e01f      	b.n	800b82e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7ee:	4b69      	ldr	r3, [pc, #420]	@ (800b994 <UART_SetConfig+0xc2c>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f003 0320 	and.w	r3, r3, #32
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d009      	beq.n	800b80e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7fa:	4b66      	ldr	r3, [pc, #408]	@ (800b994 <UART_SetConfig+0xc2c>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	08db      	lsrs	r3, r3, #3
 800b800:	f003 0303 	and.w	r3, r3, #3
 800b804:	4a64      	ldr	r2, [pc, #400]	@ (800b998 <UART_SetConfig+0xc30>)
 800b806:	fa22 f303 	lsr.w	r3, r2, r3
 800b80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b80c:	e00f      	b.n	800b82e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b80e:	4b62      	ldr	r3, [pc, #392]	@ (800b998 <UART_SetConfig+0xc30>)
 800b810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b812:	e00c      	b.n	800b82e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b814:	4b61      	ldr	r3, [pc, #388]	@ (800b99c <UART_SetConfig+0xc34>)
 800b816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b818:	e009      	b.n	800b82e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b81a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b820:	e005      	b.n	800b82e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b82c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b82e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 80ea 	beq.w	800ba0a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b83a:	4a55      	ldr	r2, [pc, #340]	@ (800b990 <UART_SetConfig+0xc28>)
 800b83c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b840:	461a      	mov	r2, r3
 800b842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b844:	fbb3 f3f2 	udiv	r3, r3, r2
 800b848:	005a      	lsls	r2, r3, #1
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	085b      	lsrs	r3, r3, #1
 800b850:	441a      	add	r2, r3
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	fbb2 f3f3 	udiv	r3, r2, r3
 800b85a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85e:	2b0f      	cmp	r3, #15
 800b860:	d916      	bls.n	800b890 <UART_SetConfig+0xb28>
 800b862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b868:	d212      	bcs.n	800b890 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	f023 030f 	bic.w	r3, r3, #15
 800b872:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b876:	085b      	lsrs	r3, r3, #1
 800b878:	b29b      	uxth	r3, r3
 800b87a:	f003 0307 	and.w	r3, r3, #7
 800b87e:	b29a      	uxth	r2, r3
 800b880:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b882:	4313      	orrs	r3, r2
 800b884:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b88c:	60da      	str	r2, [r3, #12]
 800b88e:	e0bc      	b.n	800ba0a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b896:	e0b8      	b.n	800ba0a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b898:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	dc4b      	bgt.n	800b938 <UART_SetConfig+0xbd0>
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f2c0 8087 	blt.w	800b9b4 <UART_SetConfig+0xc4c>
 800b8a6:	2b20      	cmp	r3, #32
 800b8a8:	f200 8084 	bhi.w	800b9b4 <UART_SetConfig+0xc4c>
 800b8ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b4 <UART_SetConfig+0xb4c>)
 800b8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b2:	bf00      	nop
 800b8b4:	0800b93f 	.word	0x0800b93f
 800b8b8:	0800b947 	.word	0x0800b947
 800b8bc:	0800b9b5 	.word	0x0800b9b5
 800b8c0:	0800b9b5 	.word	0x0800b9b5
 800b8c4:	0800b94f 	.word	0x0800b94f
 800b8c8:	0800b9b5 	.word	0x0800b9b5
 800b8cc:	0800b9b5 	.word	0x0800b9b5
 800b8d0:	0800b9b5 	.word	0x0800b9b5
 800b8d4:	0800b95f 	.word	0x0800b95f
 800b8d8:	0800b9b5 	.word	0x0800b9b5
 800b8dc:	0800b9b5 	.word	0x0800b9b5
 800b8e0:	0800b9b5 	.word	0x0800b9b5
 800b8e4:	0800b9b5 	.word	0x0800b9b5
 800b8e8:	0800b9b5 	.word	0x0800b9b5
 800b8ec:	0800b9b5 	.word	0x0800b9b5
 800b8f0:	0800b9b5 	.word	0x0800b9b5
 800b8f4:	0800b96f 	.word	0x0800b96f
 800b8f8:	0800b9b5 	.word	0x0800b9b5
 800b8fc:	0800b9b5 	.word	0x0800b9b5
 800b900:	0800b9b5 	.word	0x0800b9b5
 800b904:	0800b9b5 	.word	0x0800b9b5
 800b908:	0800b9b5 	.word	0x0800b9b5
 800b90c:	0800b9b5 	.word	0x0800b9b5
 800b910:	0800b9b5 	.word	0x0800b9b5
 800b914:	0800b9b5 	.word	0x0800b9b5
 800b918:	0800b9b5 	.word	0x0800b9b5
 800b91c:	0800b9b5 	.word	0x0800b9b5
 800b920:	0800b9b5 	.word	0x0800b9b5
 800b924:	0800b9b5 	.word	0x0800b9b5
 800b928:	0800b9b5 	.word	0x0800b9b5
 800b92c:	0800b9b5 	.word	0x0800b9b5
 800b930:	0800b9b5 	.word	0x0800b9b5
 800b934:	0800b9a7 	.word	0x0800b9a7
 800b938:	2b40      	cmp	r3, #64	@ 0x40
 800b93a:	d037      	beq.n	800b9ac <UART_SetConfig+0xc44>
 800b93c:	e03a      	b.n	800b9b4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b93e:	f7fc fa7b 	bl	8007e38 <HAL_RCC_GetPCLK1Freq>
 800b942:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b944:	e03c      	b.n	800b9c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b946:	f7fc fa8d 	bl	8007e64 <HAL_RCC_GetPCLK2Freq>
 800b94a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b94c:	e038      	b.n	800b9c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b94e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b952:	4618      	mov	r0, r3
 800b954:	f7fd fc70 	bl	8009238 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b95c:	e030      	b.n	800b9c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b95e:	f107 0318 	add.w	r3, r7, #24
 800b962:	4618      	mov	r0, r3
 800b964:	f7fd fdbc 	bl	80094e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b96c:	e028      	b.n	800b9c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b96e:	4b09      	ldr	r3, [pc, #36]	@ (800b994 <UART_SetConfig+0xc2c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 0320 	and.w	r3, r3, #32
 800b976:	2b00      	cmp	r3, #0
 800b978:	d012      	beq.n	800b9a0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b97a:	4b06      	ldr	r3, [pc, #24]	@ (800b994 <UART_SetConfig+0xc2c>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	08db      	lsrs	r3, r3, #3
 800b980:	f003 0303 	and.w	r3, r3, #3
 800b984:	4a04      	ldr	r2, [pc, #16]	@ (800b998 <UART_SetConfig+0xc30>)
 800b986:	fa22 f303 	lsr.w	r3, r2, r3
 800b98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b98c:	e018      	b.n	800b9c0 <UART_SetConfig+0xc58>
 800b98e:	bf00      	nop
 800b990:	0800ef04 	.word	0x0800ef04
 800b994:	58024400 	.word	0x58024400
 800b998:	03d09000 	.word	0x03d09000
 800b99c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b9a0:	4b24      	ldr	r3, [pc, #144]	@ (800ba34 <UART_SetConfig+0xccc>)
 800b9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9a4:	e00c      	b.n	800b9c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b9a6:	4b24      	ldr	r3, [pc, #144]	@ (800ba38 <UART_SetConfig+0xcd0>)
 800b9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9aa:	e009      	b.n	800b9c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9b2:	e005      	b.n	800b9c0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b9be:	bf00      	nop
    }

    if (pclk != 0U)
 800b9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d021      	beq.n	800ba0a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ca:	4a1c      	ldr	r2, [pc, #112]	@ (800ba3c <UART_SetConfig+0xcd4>)
 800b9cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	085b      	lsrs	r3, r3, #1
 800b9de:	441a      	add	r2, r3
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ec:	2b0f      	cmp	r3, #15
 800b9ee:	d909      	bls.n	800ba04 <UART_SetConfig+0xc9c>
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9f6:	d205      	bcs.n	800ba04 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	60da      	str	r2, [r3, #12]
 800ba02:	e002      	b.n	800ba0a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	2200      	movs	r2, #0
 800ba24:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ba26:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3748      	adds	r7, #72	@ 0x48
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba34:	03d09000 	.word	0x03d09000
 800ba38:	003d0900 	.word	0x003d0900
 800ba3c:	0800ef04 	.word	0x0800ef04

0800ba40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba4c:	f003 0308 	and.w	r3, r3, #8
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00a      	beq.n	800ba6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	430a      	orrs	r2, r1
 800ba68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00a      	beq.n	800ba8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	430a      	orrs	r2, r1
 800ba8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba90:	f003 0302 	and.w	r3, r3, #2
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00a      	beq.n	800baae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bab2:	f003 0304 	and.w	r3, r3, #4
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00a      	beq.n	800bad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	430a      	orrs	r2, r1
 800bace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bad4:	f003 0310 	and.w	r3, r3, #16
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00a      	beq.n	800baf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf6:	f003 0320 	and.w	r3, r3, #32
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00a      	beq.n	800bb14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	430a      	orrs	r2, r1
 800bb12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d01a      	beq.n	800bb56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	430a      	orrs	r2, r1
 800bb34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb3e:	d10a      	bne.n	800bb56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	430a      	orrs	r2, r1
 800bb54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00a      	beq.n	800bb78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	430a      	orrs	r2, r1
 800bb76:	605a      	str	r2, [r3, #4]
  }
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b098      	sub	sp, #96	@ 0x60
 800bb88:	af02      	add	r7, sp, #8
 800bb8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb94:	f7f7 fa3c 	bl	8003010 <HAL_GetTick>
 800bb98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 0308 	and.w	r3, r3, #8
 800bba4:	2b08      	cmp	r3, #8
 800bba6:	d12f      	bne.n	800bc08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bba8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f88e 	bl	800bcd8 <UART_WaitOnFlagUntilTimeout>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d022      	beq.n	800bc08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbca:	e853 3f00 	ldrex	r3, [r3]
 800bbce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbd6:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbe0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbe2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bbe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbe8:	e841 2300 	strex	r3, r2, [r1]
 800bbec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bbee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1e6      	bne.n	800bbc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	e063      	b.n	800bcd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f003 0304 	and.w	r3, r3, #4
 800bc12:	2b04      	cmp	r3, #4
 800bc14:	d149      	bne.n	800bcaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc16:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bc1a:	9300      	str	r3, [sp, #0]
 800bc1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f857 	bl	800bcd8 <UART_WaitOnFlagUntilTimeout>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d03c      	beq.n	800bcaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc38:	e853 3f00 	ldrex	r3, [r3]
 800bc3c:	623b      	str	r3, [r7, #32]
   return(result);
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc50:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc56:	e841 2300 	strex	r3, r2, [r1]
 800bc5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1e6      	bne.n	800bc30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3308      	adds	r3, #8
 800bc68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	e853 3f00 	ldrex	r3, [r3]
 800bc70:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f023 0301 	bic.w	r3, r3, #1
 800bc78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3308      	adds	r3, #8
 800bc80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc82:	61fa      	str	r2, [r7, #28]
 800bc84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc86:	69b9      	ldr	r1, [r7, #24]
 800bc88:	69fa      	ldr	r2, [r7, #28]
 800bc8a:	e841 2300 	strex	r3, r2, [r1]
 800bc8e:	617b      	str	r3, [r7, #20]
   return(result);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d1e5      	bne.n	800bc62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2220      	movs	r2, #32
 800bc9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e012      	b.n	800bcd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2220      	movs	r2, #32
 800bcae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2220      	movs	r2, #32
 800bcb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3758      	adds	r7, #88	@ 0x58
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	4613      	mov	r3, r2
 800bce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bce8:	e04f      	b.n	800bd8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf0:	d04b      	beq.n	800bd8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcf2:	f7f7 f98d 	bl	8003010 <HAL_GetTick>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	69ba      	ldr	r2, [r7, #24]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d302      	bcc.n	800bd08 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e04e      	b.n	800bdaa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f003 0304 	and.w	r3, r3, #4
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d037      	beq.n	800bd8a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b80      	cmp	r3, #128	@ 0x80
 800bd1e:	d034      	beq.n	800bd8a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2b40      	cmp	r3, #64	@ 0x40
 800bd24:	d031      	beq.n	800bd8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	f003 0308 	and.w	r3, r3, #8
 800bd30:	2b08      	cmp	r3, #8
 800bd32:	d110      	bne.n	800bd56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2208      	movs	r2, #8
 800bd3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f000 f921 	bl	800bf84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2208      	movs	r2, #8
 800bd46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e029      	b.n	800bdaa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	69db      	ldr	r3, [r3, #28]
 800bd5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd64:	d111      	bne.n	800bd8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 f907 	bl	800bf84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2220      	movs	r2, #32
 800bd7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e00f      	b.n	800bdaa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	69da      	ldr	r2, [r3, #28]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	4013      	ands	r3, r2
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	bf0c      	ite	eq
 800bd9a:	2301      	moveq	r3, #1
 800bd9c:	2300      	movne	r3, #0
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	461a      	mov	r2, r3
 800bda2:	79fb      	ldrb	r3, [r7, #7]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d0a0      	beq.n	800bcea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b096      	sub	sp, #88	@ 0x58
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	88fa      	ldrh	r2, [r7, #6]
 800bdcc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2222      	movs	r2, #34	@ 0x22
 800bddc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d02d      	beq.n	800be46 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdf0:	4a40      	ldr	r2, [pc, #256]	@ (800bef4 <UART_Start_Receive_DMA+0x140>)
 800bdf2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bdfa:	4a3f      	ldr	r2, [pc, #252]	@ (800bef8 <UART_Start_Receive_DMA+0x144>)
 800bdfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be04:	4a3d      	ldr	r2, [pc, #244]	@ (800befc <UART_Start_Receive_DMA+0x148>)
 800be06:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be0e:	2200      	movs	r2, #0
 800be10:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3324      	adds	r3, #36	@ 0x24
 800be1e:	4619      	mov	r1, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be24:	461a      	mov	r2, r3
 800be26:	88fb      	ldrh	r3, [r7, #6]
 800be28:	f7f7 fe38 	bl	8003a9c <HAL_DMA_Start_IT>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d009      	beq.n	800be46 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2210      	movs	r2, #16
 800be36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2220      	movs	r2, #32
 800be3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e051      	b.n	800beea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d018      	beq.n	800be80 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be62:	657b      	str	r3, [r7, #84]	@ 0x54
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	461a      	mov	r2, r3
 800be6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be6e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800be7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e6      	bne.n	800be4e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3308      	adds	r3, #8
 800be86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be8a:	e853 3f00 	ldrex	r3, [r3]
 800be8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be92:	f043 0301 	orr.w	r3, r3, #1
 800be96:	653b      	str	r3, [r7, #80]	@ 0x50
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3308      	adds	r3, #8
 800be9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bea0:	637a      	str	r2, [r7, #52]	@ 0x34
 800bea2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bea6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bea8:	e841 2300 	strex	r3, r2, [r1]
 800beac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800beae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1e5      	bne.n	800be80 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	3308      	adds	r3, #8
 800beba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	e853 3f00 	ldrex	r3, [r3]
 800bec2:	613b      	str	r3, [r7, #16]
   return(result);
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3308      	adds	r3, #8
 800bed2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bed4:	623a      	str	r2, [r7, #32]
 800bed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed8:	69f9      	ldr	r1, [r7, #28]
 800beda:	6a3a      	ldr	r2, [r7, #32]
 800bedc:	e841 2300 	strex	r3, r2, [r1]
 800bee0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1e5      	bne.n	800beb4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3758      	adds	r7, #88	@ 0x58
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	0800c051 	.word	0x0800c051
 800bef8:	0800c179 	.word	0x0800c179
 800befc:	0800c1b7 	.word	0x0800c1b7

0800bf00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b08f      	sub	sp, #60	@ 0x3c
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0e:	6a3b      	ldr	r3, [r7, #32]
 800bf10:	e853 3f00 	ldrex	r3, [r3]
 800bf14:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bf1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf28:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1e6      	bne.n	800bf08 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3308      	adds	r3, #8
 800bf40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	e853 3f00 	ldrex	r3, [r3]
 800bf48:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bf50:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	3308      	adds	r3, #8
 800bf58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf5a:	61ba      	str	r2, [r7, #24]
 800bf5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5e:	6979      	ldr	r1, [r7, #20]
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	e841 2300 	strex	r3, r2, [r1]
 800bf66:	613b      	str	r3, [r7, #16]
   return(result);
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1e5      	bne.n	800bf3a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2220      	movs	r2, #32
 800bf72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bf76:	bf00      	nop
 800bf78:	373c      	adds	r7, #60	@ 0x3c
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr
	...

0800bf84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b095      	sub	sp, #84	@ 0x54
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf94:	e853 3f00 	ldrex	r3, [r3]
 800bf98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfaa:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bfb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bfb2:	e841 2300 	strex	r3, r2, [r1]
 800bfb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1e6      	bne.n	800bf8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	e853 3f00 	ldrex	r3, [r3]
 800bfcc:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfce:	69fa      	ldr	r2, [r7, #28]
 800bfd0:	4b1e      	ldr	r3, [pc, #120]	@ (800c04c <UART_EndRxTransfer+0xc8>)
 800bfd2:	4013      	ands	r3, r2
 800bfd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3308      	adds	r3, #8
 800bfdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bfe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfe6:	e841 2300 	strex	r3, r2, [r1]
 800bfea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1e5      	bne.n	800bfbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d118      	bne.n	800c02c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	60bb      	str	r3, [r7, #8]
   return(result);
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	f023 0310 	bic.w	r3, r3, #16
 800c00e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c018:	61bb      	str	r3, [r7, #24]
 800c01a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	6979      	ldr	r1, [r7, #20]
 800c01e:	69ba      	ldr	r2, [r7, #24]
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	613b      	str	r3, [r7, #16]
   return(result);
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e6      	bne.n	800bffa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c040:	bf00      	nop
 800c042:	3754      	adds	r7, #84	@ 0x54
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	effffffe 	.word	0xeffffffe

0800c050 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b09c      	sub	sp, #112	@ 0x70
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c05c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	69db      	ldr	r3, [r3, #28]
 800c062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c066:	d071      	beq.n	800c14c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c06a:	2200      	movs	r2, #0
 800c06c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c078:	e853 3f00 	ldrex	r3, [r3]
 800c07c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c07e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c084:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c08e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c090:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c092:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c094:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c096:	e841 2300 	strex	r3, r2, [r1]
 800c09a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c09c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1e6      	bne.n	800c070 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ac:	e853 3f00 	ldrex	r3, [r3]
 800c0b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0b4:	f023 0301 	bic.w	r3, r3, #1
 800c0b8:	667b      	str	r3, [r7, #100]	@ 0x64
 800c0ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	3308      	adds	r3, #8
 800c0c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c0c2:	647a      	str	r2, [r7, #68]	@ 0x44
 800c0c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0ca:	e841 2300 	strex	r3, r2, [r1]
 800c0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c0d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1e5      	bne.n	800c0a2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3308      	adds	r3, #8
 800c0dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c0e6:	6a3b      	ldr	r3, [r7, #32]
 800c0e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800c0ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c0f6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c0f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e5      	bne.n	800c0d6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c10a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c10c:	2220      	movs	r2, #32
 800c10e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c116:	2b01      	cmp	r3, #1
 800c118:	d118      	bne.n	800c14c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c11a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	e853 3f00 	ldrex	r3, [r3]
 800c126:	60fb      	str	r3, [r7, #12]
   return(result);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f023 0310 	bic.w	r3, r3, #16
 800c12e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	461a      	mov	r2, r3
 800c136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c138:	61fb      	str	r3, [r7, #28]
 800c13a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13c:	69b9      	ldr	r1, [r7, #24]
 800c13e:	69fa      	ldr	r2, [r7, #28]
 800c140:	e841 2300 	strex	r3, r2, [r1]
 800c144:	617b      	str	r3, [r7, #20]
   return(result);
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1e6      	bne.n	800c11a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c14c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c14e:	2200      	movs	r2, #0
 800c150:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c156:	2b01      	cmp	r3, #1
 800c158:	d107      	bne.n	800c16a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c15a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c15c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c160:	4619      	mov	r1, r3
 800c162:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c164:	f7f5 ffc8 	bl	80020f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c168:	e002      	b.n	800c170 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c16a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c16c:	f7fe fdde 	bl	800ad2c <HAL_UART_RxCpltCallback>
}
 800c170:	bf00      	nop
 800c172:	3770      	adds	r7, #112	@ 0x70
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c184:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2201      	movs	r2, #1
 800c18a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c190:	2b01      	cmp	r3, #1
 800c192:	d109      	bne.n	800c1a8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c19a:	085b      	lsrs	r3, r3, #1
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	4619      	mov	r1, r3
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7f5 ffa9 	bl	80020f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c1a6:	e002      	b.n	800c1ae <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f7fe fdc9 	bl	800ad40 <HAL_UART_RxHalfCpltCallback>
}
 800c1ae:	bf00      	nop
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b086      	sub	sp, #24
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c1d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1de:	2b80      	cmp	r3, #128	@ 0x80
 800c1e0:	d109      	bne.n	800c1f6 <UART_DMAError+0x40>
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	2b21      	cmp	r3, #33	@ 0x21
 800c1e6:	d106      	bne.n	800c1f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c1f0:	6978      	ldr	r0, [r7, #20]
 800c1f2:	f7ff fe85 	bl	800bf00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c200:	2b40      	cmp	r3, #64	@ 0x40
 800c202:	d109      	bne.n	800c218 <UART_DMAError+0x62>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2b22      	cmp	r3, #34	@ 0x22
 800c208:	d106      	bne.n	800c218 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c212:	6978      	ldr	r0, [r7, #20]
 800c214:	f7ff feb6 	bl	800bf84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c21e:	f043 0210 	orr.w	r2, r3, #16
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c228:	6978      	ldr	r0, [r7, #20]
 800c22a:	f7fe fd93 	bl	800ad54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c22e:	bf00      	nop
 800c230:	3718      	adds	r7, #24
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c242:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f7fe fd81 	bl	800ad54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c252:	bf00      	nop
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b088      	sub	sp, #32
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	e853 3f00 	ldrex	r3, [r3]
 800c26e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c276:	61fb      	str	r3, [r7, #28]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	461a      	mov	r2, r3
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	61bb      	str	r3, [r7, #24]
 800c282:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c284:	6979      	ldr	r1, [r7, #20]
 800c286:	69ba      	ldr	r2, [r7, #24]
 800c288:	e841 2300 	strex	r3, r2, [r1]
 800c28c:	613b      	str	r3, [r7, #16]
   return(result);
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e6      	bne.n	800c262 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2220      	movs	r2, #32
 800c298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7fe fd38 	bl	800ad18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2a8:	bf00      	nop
 800c2aa:	3720      	adds	r7, #32
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c2cc:	bf00      	nop
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c2e0:	bf00      	nop
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d101      	bne.n	800c302 <HAL_UARTEx_DisableFifoMode+0x16>
 800c2fe:	2302      	movs	r3, #2
 800c300:	e027      	b.n	800c352 <HAL_UARTEx_DisableFifoMode+0x66>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2224      	movs	r2, #36	@ 0x24
 800c30e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f022 0201 	bic.w	r2, r2, #1
 800c328:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c330:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2220      	movs	r2, #32
 800c344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b084      	sub	sp, #16
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d101      	bne.n	800c376 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c372:	2302      	movs	r3, #2
 800c374:	e02d      	b.n	800c3d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2224      	movs	r2, #36	@ 0x24
 800c382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f022 0201 	bic.w	r2, r2, #1
 800c39c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f8a4 	bl	800c500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2220      	movs	r2, #32
 800c3c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d101      	bne.n	800c3f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	e02d      	b.n	800c44e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2224      	movs	r2, #36	@ 0x24
 800c3fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f022 0201 	bic.w	r2, r2, #1
 800c418:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	683a      	ldr	r2, [r7, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f866 	bl	800c500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2220      	movs	r2, #32
 800c440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b08c      	sub	sp, #48	@ 0x30
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	60f8      	str	r0, [r7, #12]
 800c45e:	60b9      	str	r1, [r7, #8]
 800c460:	4613      	mov	r3, r2
 800c462:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c46a:	2b20      	cmp	r3, #32
 800c46c:	d142      	bne.n	800c4f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c474:	88fb      	ldrh	r3, [r7, #6]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d101      	bne.n	800c47e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c47a:	2301      	movs	r3, #1
 800c47c:	e03b      	b.n	800c4f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2201      	movs	r2, #1
 800c482:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2200      	movs	r2, #0
 800c488:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c48a:	88fb      	ldrh	r3, [r7, #6]
 800c48c:	461a      	mov	r2, r3
 800c48e:	68b9      	ldr	r1, [r7, #8]
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f7ff fc8f 	bl	800bdb4 <UART_Start_Receive_DMA>
 800c496:	4603      	mov	r3, r0
 800c498:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c49c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d124      	bne.n	800c4ee <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d11d      	bne.n	800c4e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2210      	movs	r2, #16
 800c4b2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	e853 3f00 	ldrex	r3, [r3]
 800c4c0:	617b      	str	r3, [r7, #20]
   return(result);
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f043 0310 	orr.w	r3, r3, #16
 800c4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4d4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d6:	6a39      	ldr	r1, [r7, #32]
 800c4d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4da:	e841 2300 	strex	r3, r2, [r1]
 800c4de:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1e6      	bne.n	800c4b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c4e6:	e002      	b.n	800c4ee <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c4ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4f2:	e000      	b.n	800c4f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c4f4:	2302      	movs	r3, #2
  }
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3730      	adds	r7, #48	@ 0x30
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
	...

0800c500 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d108      	bne.n	800c522 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c520:	e031      	b.n	800c586 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c522:	2310      	movs	r3, #16
 800c524:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c526:	2310      	movs	r3, #16
 800c528:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	0e5b      	lsrs	r3, r3, #25
 800c532:	b2db      	uxtb	r3, r3
 800c534:	f003 0307 	and.w	r3, r3, #7
 800c538:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	0f5b      	lsrs	r3, r3, #29
 800c542:	b2db      	uxtb	r3, r3
 800c544:	f003 0307 	and.w	r3, r3, #7
 800c548:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c54a:	7bbb      	ldrb	r3, [r7, #14]
 800c54c:	7b3a      	ldrb	r2, [r7, #12]
 800c54e:	4911      	ldr	r1, [pc, #68]	@ (800c594 <UARTEx_SetNbDataToProcess+0x94>)
 800c550:	5c8a      	ldrb	r2, [r1, r2]
 800c552:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c556:	7b3a      	ldrb	r2, [r7, #12]
 800c558:	490f      	ldr	r1, [pc, #60]	@ (800c598 <UARTEx_SetNbDataToProcess+0x98>)
 800c55a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c55c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c560:	b29a      	uxth	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	7b7a      	ldrb	r2, [r7, #13]
 800c56c:	4909      	ldr	r1, [pc, #36]	@ (800c594 <UARTEx_SetNbDataToProcess+0x94>)
 800c56e:	5c8a      	ldrb	r2, [r1, r2]
 800c570:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c574:	7b7a      	ldrb	r2, [r7, #13]
 800c576:	4908      	ldr	r1, [pc, #32]	@ (800c598 <UARTEx_SetNbDataToProcess+0x98>)
 800c578:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c57a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c57e:	b29a      	uxth	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c586:	bf00      	nop
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	0800ef1c 	.word	0x0800ef1c
 800c598:	0800ef24 	.word	0x0800ef24

0800c59c <__cvt>:
 800c59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c59e:	ed2d 8b02 	vpush	{d8}
 800c5a2:	eeb0 8b40 	vmov.f64	d8, d0
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	4617      	mov	r7, r2
 800c5aa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c5ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5ae:	ee18 2a90 	vmov	r2, s17
 800c5b2:	f025 0520 	bic.w	r5, r5, #32
 800c5b6:	2a00      	cmp	r2, #0
 800c5b8:	bfb6      	itet	lt
 800c5ba:	222d      	movlt	r2, #45	@ 0x2d
 800c5bc:	2200      	movge	r2, #0
 800c5be:	eeb1 8b40 	vneglt.f64	d8, d0
 800c5c2:	2d46      	cmp	r5, #70	@ 0x46
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	701a      	strb	r2, [r3, #0]
 800c5c8:	d004      	beq.n	800c5d4 <__cvt+0x38>
 800c5ca:	2d45      	cmp	r5, #69	@ 0x45
 800c5cc:	d100      	bne.n	800c5d0 <__cvt+0x34>
 800c5ce:	3401      	adds	r4, #1
 800c5d0:	2102      	movs	r1, #2
 800c5d2:	e000      	b.n	800c5d6 <__cvt+0x3a>
 800c5d4:	2103      	movs	r1, #3
 800c5d6:	ab03      	add	r3, sp, #12
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	ab02      	add	r3, sp, #8
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	4622      	mov	r2, r4
 800c5e0:	4633      	mov	r3, r6
 800c5e2:	eeb0 0b48 	vmov.f64	d0, d8
 800c5e6:	f000 fe3b 	bl	800d260 <_dtoa_r>
 800c5ea:	2d47      	cmp	r5, #71	@ 0x47
 800c5ec:	d114      	bne.n	800c618 <__cvt+0x7c>
 800c5ee:	07fb      	lsls	r3, r7, #31
 800c5f0:	d50a      	bpl.n	800c608 <__cvt+0x6c>
 800c5f2:	1902      	adds	r2, r0, r4
 800c5f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5fc:	bf08      	it	eq
 800c5fe:	9203      	streq	r2, [sp, #12]
 800c600:	2130      	movs	r1, #48	@ 0x30
 800c602:	9b03      	ldr	r3, [sp, #12]
 800c604:	4293      	cmp	r3, r2
 800c606:	d319      	bcc.n	800c63c <__cvt+0xa0>
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c60c:	1a1b      	subs	r3, r3, r0
 800c60e:	6013      	str	r3, [r2, #0]
 800c610:	b005      	add	sp, #20
 800c612:	ecbd 8b02 	vpop	{d8}
 800c616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c618:	2d46      	cmp	r5, #70	@ 0x46
 800c61a:	eb00 0204 	add.w	r2, r0, r4
 800c61e:	d1e9      	bne.n	800c5f4 <__cvt+0x58>
 800c620:	7803      	ldrb	r3, [r0, #0]
 800c622:	2b30      	cmp	r3, #48	@ 0x30
 800c624:	d107      	bne.n	800c636 <__cvt+0x9a>
 800c626:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c62e:	bf1c      	itt	ne
 800c630:	f1c4 0401 	rsbne	r4, r4, #1
 800c634:	6034      	strne	r4, [r6, #0]
 800c636:	6833      	ldr	r3, [r6, #0]
 800c638:	441a      	add	r2, r3
 800c63a:	e7db      	b.n	800c5f4 <__cvt+0x58>
 800c63c:	1c5c      	adds	r4, r3, #1
 800c63e:	9403      	str	r4, [sp, #12]
 800c640:	7019      	strb	r1, [r3, #0]
 800c642:	e7de      	b.n	800c602 <__cvt+0x66>

0800c644 <__exponent>:
 800c644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c646:	2900      	cmp	r1, #0
 800c648:	bfba      	itte	lt
 800c64a:	4249      	neglt	r1, r1
 800c64c:	232d      	movlt	r3, #45	@ 0x2d
 800c64e:	232b      	movge	r3, #43	@ 0x2b
 800c650:	2909      	cmp	r1, #9
 800c652:	7002      	strb	r2, [r0, #0]
 800c654:	7043      	strb	r3, [r0, #1]
 800c656:	dd29      	ble.n	800c6ac <__exponent+0x68>
 800c658:	f10d 0307 	add.w	r3, sp, #7
 800c65c:	461d      	mov	r5, r3
 800c65e:	270a      	movs	r7, #10
 800c660:	461a      	mov	r2, r3
 800c662:	fbb1 f6f7 	udiv	r6, r1, r7
 800c666:	fb07 1416 	mls	r4, r7, r6, r1
 800c66a:	3430      	adds	r4, #48	@ 0x30
 800c66c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c670:	460c      	mov	r4, r1
 800c672:	2c63      	cmp	r4, #99	@ 0x63
 800c674:	f103 33ff 	add.w	r3, r3, #4294967295
 800c678:	4631      	mov	r1, r6
 800c67a:	dcf1      	bgt.n	800c660 <__exponent+0x1c>
 800c67c:	3130      	adds	r1, #48	@ 0x30
 800c67e:	1e94      	subs	r4, r2, #2
 800c680:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c684:	1c41      	adds	r1, r0, #1
 800c686:	4623      	mov	r3, r4
 800c688:	42ab      	cmp	r3, r5
 800c68a:	d30a      	bcc.n	800c6a2 <__exponent+0x5e>
 800c68c:	f10d 0309 	add.w	r3, sp, #9
 800c690:	1a9b      	subs	r3, r3, r2
 800c692:	42ac      	cmp	r4, r5
 800c694:	bf88      	it	hi
 800c696:	2300      	movhi	r3, #0
 800c698:	3302      	adds	r3, #2
 800c69a:	4403      	add	r3, r0
 800c69c:	1a18      	subs	r0, r3, r0
 800c69e:	b003      	add	sp, #12
 800c6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c6a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c6aa:	e7ed      	b.n	800c688 <__exponent+0x44>
 800c6ac:	2330      	movs	r3, #48	@ 0x30
 800c6ae:	3130      	adds	r1, #48	@ 0x30
 800c6b0:	7083      	strb	r3, [r0, #2]
 800c6b2:	70c1      	strb	r1, [r0, #3]
 800c6b4:	1d03      	adds	r3, r0, #4
 800c6b6:	e7f1      	b.n	800c69c <__exponent+0x58>

0800c6b8 <_printf_float>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	b08d      	sub	sp, #52	@ 0x34
 800c6be:	460c      	mov	r4, r1
 800c6c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c6c4:	4616      	mov	r6, r2
 800c6c6:	461f      	mov	r7, r3
 800c6c8:	4605      	mov	r5, r0
 800c6ca:	f000 fcbb 	bl	800d044 <_localeconv_r>
 800c6ce:	f8d0 b000 	ldr.w	fp, [r0]
 800c6d2:	4658      	mov	r0, fp
 800c6d4:	f7f3 fe5c 	bl	8000390 <strlen>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c6e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c6e4:	6822      	ldr	r2, [r4, #0]
 800c6e6:	9005      	str	r0, [sp, #20]
 800c6e8:	3307      	adds	r3, #7
 800c6ea:	f023 0307 	bic.w	r3, r3, #7
 800c6ee:	f103 0108 	add.w	r1, r3, #8
 800c6f2:	f8c8 1000 	str.w	r1, [r8]
 800c6f6:	ed93 0b00 	vldr	d0, [r3]
 800c6fa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c958 <_printf_float+0x2a0>
 800c6fe:	eeb0 7bc0 	vabs.f64	d7, d0
 800c702:	eeb4 7b46 	vcmp.f64	d7, d6
 800c706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c70a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c70e:	dd24      	ble.n	800c75a <_printf_float+0xa2>
 800c710:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c718:	d502      	bpl.n	800c720 <_printf_float+0x68>
 800c71a:	232d      	movs	r3, #45	@ 0x2d
 800c71c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c720:	498f      	ldr	r1, [pc, #572]	@ (800c960 <_printf_float+0x2a8>)
 800c722:	4b90      	ldr	r3, [pc, #576]	@ (800c964 <_printf_float+0x2ac>)
 800c724:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c728:	bf8c      	ite	hi
 800c72a:	4688      	movhi	r8, r1
 800c72c:	4698      	movls	r8, r3
 800c72e:	f022 0204 	bic.w	r2, r2, #4
 800c732:	2303      	movs	r3, #3
 800c734:	6123      	str	r3, [r4, #16]
 800c736:	6022      	str	r2, [r4, #0]
 800c738:	f04f 0a00 	mov.w	sl, #0
 800c73c:	9700      	str	r7, [sp, #0]
 800c73e:	4633      	mov	r3, r6
 800c740:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c742:	4621      	mov	r1, r4
 800c744:	4628      	mov	r0, r5
 800c746:	f000 f9d1 	bl	800caec <_printf_common>
 800c74a:	3001      	adds	r0, #1
 800c74c:	f040 8089 	bne.w	800c862 <_printf_float+0x1aa>
 800c750:	f04f 30ff 	mov.w	r0, #4294967295
 800c754:	b00d      	add	sp, #52	@ 0x34
 800c756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c762:	d709      	bvc.n	800c778 <_printf_float+0xc0>
 800c764:	ee10 3a90 	vmov	r3, s1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bfbc      	itt	lt
 800c76c:	232d      	movlt	r3, #45	@ 0x2d
 800c76e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c772:	497d      	ldr	r1, [pc, #500]	@ (800c968 <_printf_float+0x2b0>)
 800c774:	4b7d      	ldr	r3, [pc, #500]	@ (800c96c <_printf_float+0x2b4>)
 800c776:	e7d5      	b.n	800c724 <_printf_float+0x6c>
 800c778:	6863      	ldr	r3, [r4, #4]
 800c77a:	1c59      	adds	r1, r3, #1
 800c77c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c780:	d139      	bne.n	800c7f6 <_printf_float+0x13e>
 800c782:	2306      	movs	r3, #6
 800c784:	6063      	str	r3, [r4, #4]
 800c786:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c78a:	2300      	movs	r3, #0
 800c78c:	6022      	str	r2, [r4, #0]
 800c78e:	9303      	str	r3, [sp, #12]
 800c790:	ab0a      	add	r3, sp, #40	@ 0x28
 800c792:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c796:	ab09      	add	r3, sp, #36	@ 0x24
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	6861      	ldr	r1, [r4, #4]
 800c79c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	f7ff fefb 	bl	800c59c <__cvt>
 800c7a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c7aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7ac:	4680      	mov	r8, r0
 800c7ae:	d129      	bne.n	800c804 <_printf_float+0x14c>
 800c7b0:	1cc8      	adds	r0, r1, #3
 800c7b2:	db02      	blt.n	800c7ba <_printf_float+0x102>
 800c7b4:	6863      	ldr	r3, [r4, #4]
 800c7b6:	4299      	cmp	r1, r3
 800c7b8:	dd41      	ble.n	800c83e <_printf_float+0x186>
 800c7ba:	f1a9 0902 	sub.w	r9, r9, #2
 800c7be:	fa5f f989 	uxtb.w	r9, r9
 800c7c2:	3901      	subs	r1, #1
 800c7c4:	464a      	mov	r2, r9
 800c7c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c7ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800c7cc:	f7ff ff3a 	bl	800c644 <__exponent>
 800c7d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7d2:	1813      	adds	r3, r2, r0
 800c7d4:	2a01      	cmp	r2, #1
 800c7d6:	4682      	mov	sl, r0
 800c7d8:	6123      	str	r3, [r4, #16]
 800c7da:	dc02      	bgt.n	800c7e2 <_printf_float+0x12a>
 800c7dc:	6822      	ldr	r2, [r4, #0]
 800c7de:	07d2      	lsls	r2, r2, #31
 800c7e0:	d501      	bpl.n	800c7e6 <_printf_float+0x12e>
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	6123      	str	r3, [r4, #16]
 800c7e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d0a6      	beq.n	800c73c <_printf_float+0x84>
 800c7ee:	232d      	movs	r3, #45	@ 0x2d
 800c7f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7f4:	e7a2      	b.n	800c73c <_printf_float+0x84>
 800c7f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c7fa:	d1c4      	bne.n	800c786 <_printf_float+0xce>
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1c2      	bne.n	800c786 <_printf_float+0xce>
 800c800:	2301      	movs	r3, #1
 800c802:	e7bf      	b.n	800c784 <_printf_float+0xcc>
 800c804:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c808:	d9db      	bls.n	800c7c2 <_printf_float+0x10a>
 800c80a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c80e:	d118      	bne.n	800c842 <_printf_float+0x18a>
 800c810:	2900      	cmp	r1, #0
 800c812:	6863      	ldr	r3, [r4, #4]
 800c814:	dd0b      	ble.n	800c82e <_printf_float+0x176>
 800c816:	6121      	str	r1, [r4, #16]
 800c818:	b913      	cbnz	r3, 800c820 <_printf_float+0x168>
 800c81a:	6822      	ldr	r2, [r4, #0]
 800c81c:	07d0      	lsls	r0, r2, #31
 800c81e:	d502      	bpl.n	800c826 <_printf_float+0x16e>
 800c820:	3301      	adds	r3, #1
 800c822:	440b      	add	r3, r1
 800c824:	6123      	str	r3, [r4, #16]
 800c826:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c828:	f04f 0a00 	mov.w	sl, #0
 800c82c:	e7db      	b.n	800c7e6 <_printf_float+0x12e>
 800c82e:	b913      	cbnz	r3, 800c836 <_printf_float+0x17e>
 800c830:	6822      	ldr	r2, [r4, #0]
 800c832:	07d2      	lsls	r2, r2, #31
 800c834:	d501      	bpl.n	800c83a <_printf_float+0x182>
 800c836:	3302      	adds	r3, #2
 800c838:	e7f4      	b.n	800c824 <_printf_float+0x16c>
 800c83a:	2301      	movs	r3, #1
 800c83c:	e7f2      	b.n	800c824 <_printf_float+0x16c>
 800c83e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c844:	4299      	cmp	r1, r3
 800c846:	db05      	blt.n	800c854 <_printf_float+0x19c>
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	6121      	str	r1, [r4, #16]
 800c84c:	07d8      	lsls	r0, r3, #31
 800c84e:	d5ea      	bpl.n	800c826 <_printf_float+0x16e>
 800c850:	1c4b      	adds	r3, r1, #1
 800c852:	e7e7      	b.n	800c824 <_printf_float+0x16c>
 800c854:	2900      	cmp	r1, #0
 800c856:	bfd4      	ite	le
 800c858:	f1c1 0202 	rsble	r2, r1, #2
 800c85c:	2201      	movgt	r2, #1
 800c85e:	4413      	add	r3, r2
 800c860:	e7e0      	b.n	800c824 <_printf_float+0x16c>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	055a      	lsls	r2, r3, #21
 800c866:	d407      	bmi.n	800c878 <_printf_float+0x1c0>
 800c868:	6923      	ldr	r3, [r4, #16]
 800c86a:	4642      	mov	r2, r8
 800c86c:	4631      	mov	r1, r6
 800c86e:	4628      	mov	r0, r5
 800c870:	47b8      	blx	r7
 800c872:	3001      	adds	r0, #1
 800c874:	d12a      	bne.n	800c8cc <_printf_float+0x214>
 800c876:	e76b      	b.n	800c750 <_printf_float+0x98>
 800c878:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c87c:	f240 80e0 	bls.w	800ca40 <_printf_float+0x388>
 800c880:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c884:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c88c:	d133      	bne.n	800c8f6 <_printf_float+0x23e>
 800c88e:	4a38      	ldr	r2, [pc, #224]	@ (800c970 <_printf_float+0x2b8>)
 800c890:	2301      	movs	r3, #1
 800c892:	4631      	mov	r1, r6
 800c894:	4628      	mov	r0, r5
 800c896:	47b8      	blx	r7
 800c898:	3001      	adds	r0, #1
 800c89a:	f43f af59 	beq.w	800c750 <_printf_float+0x98>
 800c89e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c8a2:	4543      	cmp	r3, r8
 800c8a4:	db02      	blt.n	800c8ac <_printf_float+0x1f4>
 800c8a6:	6823      	ldr	r3, [r4, #0]
 800c8a8:	07d8      	lsls	r0, r3, #31
 800c8aa:	d50f      	bpl.n	800c8cc <_printf_float+0x214>
 800c8ac:	9b05      	ldr	r3, [sp, #20]
 800c8ae:	465a      	mov	r2, fp
 800c8b0:	4631      	mov	r1, r6
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	47b8      	blx	r7
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	f43f af4a 	beq.w	800c750 <_printf_float+0x98>
 800c8bc:	f04f 0900 	mov.w	r9, #0
 800c8c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8c4:	f104 0a1a 	add.w	sl, r4, #26
 800c8c8:	45c8      	cmp	r8, r9
 800c8ca:	dc09      	bgt.n	800c8e0 <_printf_float+0x228>
 800c8cc:	6823      	ldr	r3, [r4, #0]
 800c8ce:	079b      	lsls	r3, r3, #30
 800c8d0:	f100 8107 	bmi.w	800cae2 <_printf_float+0x42a>
 800c8d4:	68e0      	ldr	r0, [r4, #12]
 800c8d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8d8:	4298      	cmp	r0, r3
 800c8da:	bfb8      	it	lt
 800c8dc:	4618      	movlt	r0, r3
 800c8de:	e739      	b.n	800c754 <_printf_float+0x9c>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	4652      	mov	r2, sl
 800c8e4:	4631      	mov	r1, r6
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	47b8      	blx	r7
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	f43f af30 	beq.w	800c750 <_printf_float+0x98>
 800c8f0:	f109 0901 	add.w	r9, r9, #1
 800c8f4:	e7e8      	b.n	800c8c8 <_printf_float+0x210>
 800c8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	dc3b      	bgt.n	800c974 <_printf_float+0x2bc>
 800c8fc:	4a1c      	ldr	r2, [pc, #112]	@ (800c970 <_printf_float+0x2b8>)
 800c8fe:	2301      	movs	r3, #1
 800c900:	4631      	mov	r1, r6
 800c902:	4628      	mov	r0, r5
 800c904:	47b8      	blx	r7
 800c906:	3001      	adds	r0, #1
 800c908:	f43f af22 	beq.w	800c750 <_printf_float+0x98>
 800c90c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c910:	ea59 0303 	orrs.w	r3, r9, r3
 800c914:	d102      	bne.n	800c91c <_printf_float+0x264>
 800c916:	6823      	ldr	r3, [r4, #0]
 800c918:	07d9      	lsls	r1, r3, #31
 800c91a:	d5d7      	bpl.n	800c8cc <_printf_float+0x214>
 800c91c:	9b05      	ldr	r3, [sp, #20]
 800c91e:	465a      	mov	r2, fp
 800c920:	4631      	mov	r1, r6
 800c922:	4628      	mov	r0, r5
 800c924:	47b8      	blx	r7
 800c926:	3001      	adds	r0, #1
 800c928:	f43f af12 	beq.w	800c750 <_printf_float+0x98>
 800c92c:	f04f 0a00 	mov.w	sl, #0
 800c930:	f104 0b1a 	add.w	fp, r4, #26
 800c934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c936:	425b      	negs	r3, r3
 800c938:	4553      	cmp	r3, sl
 800c93a:	dc01      	bgt.n	800c940 <_printf_float+0x288>
 800c93c:	464b      	mov	r3, r9
 800c93e:	e794      	b.n	800c86a <_printf_float+0x1b2>
 800c940:	2301      	movs	r3, #1
 800c942:	465a      	mov	r2, fp
 800c944:	4631      	mov	r1, r6
 800c946:	4628      	mov	r0, r5
 800c948:	47b8      	blx	r7
 800c94a:	3001      	adds	r0, #1
 800c94c:	f43f af00 	beq.w	800c750 <_printf_float+0x98>
 800c950:	f10a 0a01 	add.w	sl, sl, #1
 800c954:	e7ee      	b.n	800c934 <_printf_float+0x27c>
 800c956:	bf00      	nop
 800c958:	ffffffff 	.word	0xffffffff
 800c95c:	7fefffff 	.word	0x7fefffff
 800c960:	0800ef30 	.word	0x0800ef30
 800c964:	0800ef2c 	.word	0x0800ef2c
 800c968:	0800ef38 	.word	0x0800ef38
 800c96c:	0800ef34 	.word	0x0800ef34
 800c970:	0800ef3c 	.word	0x0800ef3c
 800c974:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c976:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c97a:	4553      	cmp	r3, sl
 800c97c:	bfa8      	it	ge
 800c97e:	4653      	movge	r3, sl
 800c980:	2b00      	cmp	r3, #0
 800c982:	4699      	mov	r9, r3
 800c984:	dc37      	bgt.n	800c9f6 <_printf_float+0x33e>
 800c986:	2300      	movs	r3, #0
 800c988:	9307      	str	r3, [sp, #28]
 800c98a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c98e:	f104 021a 	add.w	r2, r4, #26
 800c992:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c994:	9907      	ldr	r1, [sp, #28]
 800c996:	9306      	str	r3, [sp, #24]
 800c998:	eba3 0309 	sub.w	r3, r3, r9
 800c99c:	428b      	cmp	r3, r1
 800c99e:	dc31      	bgt.n	800ca04 <_printf_float+0x34c>
 800c9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a2:	459a      	cmp	sl, r3
 800c9a4:	dc3b      	bgt.n	800ca1e <_printf_float+0x366>
 800c9a6:	6823      	ldr	r3, [r4, #0]
 800c9a8:	07da      	lsls	r2, r3, #31
 800c9aa:	d438      	bmi.n	800ca1e <_printf_float+0x366>
 800c9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9ae:	ebaa 0903 	sub.w	r9, sl, r3
 800c9b2:	9b06      	ldr	r3, [sp, #24]
 800c9b4:	ebaa 0303 	sub.w	r3, sl, r3
 800c9b8:	4599      	cmp	r9, r3
 800c9ba:	bfa8      	it	ge
 800c9bc:	4699      	movge	r9, r3
 800c9be:	f1b9 0f00 	cmp.w	r9, #0
 800c9c2:	dc34      	bgt.n	800ca2e <_printf_float+0x376>
 800c9c4:	f04f 0800 	mov.w	r8, #0
 800c9c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9cc:	f104 0b1a 	add.w	fp, r4, #26
 800c9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9d2:	ebaa 0303 	sub.w	r3, sl, r3
 800c9d6:	eba3 0309 	sub.w	r3, r3, r9
 800c9da:	4543      	cmp	r3, r8
 800c9dc:	f77f af76 	ble.w	800c8cc <_printf_float+0x214>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	465a      	mov	r2, fp
 800c9e4:	4631      	mov	r1, r6
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	47b8      	blx	r7
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	f43f aeb0 	beq.w	800c750 <_printf_float+0x98>
 800c9f0:	f108 0801 	add.w	r8, r8, #1
 800c9f4:	e7ec      	b.n	800c9d0 <_printf_float+0x318>
 800c9f6:	4642      	mov	r2, r8
 800c9f8:	4631      	mov	r1, r6
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	47b8      	blx	r7
 800c9fe:	3001      	adds	r0, #1
 800ca00:	d1c1      	bne.n	800c986 <_printf_float+0x2ce>
 800ca02:	e6a5      	b.n	800c750 <_printf_float+0x98>
 800ca04:	2301      	movs	r3, #1
 800ca06:	4631      	mov	r1, r6
 800ca08:	4628      	mov	r0, r5
 800ca0a:	9206      	str	r2, [sp, #24]
 800ca0c:	47b8      	blx	r7
 800ca0e:	3001      	adds	r0, #1
 800ca10:	f43f ae9e 	beq.w	800c750 <_printf_float+0x98>
 800ca14:	9b07      	ldr	r3, [sp, #28]
 800ca16:	9a06      	ldr	r2, [sp, #24]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	9307      	str	r3, [sp, #28]
 800ca1c:	e7b9      	b.n	800c992 <_printf_float+0x2da>
 800ca1e:	9b05      	ldr	r3, [sp, #20]
 800ca20:	465a      	mov	r2, fp
 800ca22:	4631      	mov	r1, r6
 800ca24:	4628      	mov	r0, r5
 800ca26:	47b8      	blx	r7
 800ca28:	3001      	adds	r0, #1
 800ca2a:	d1bf      	bne.n	800c9ac <_printf_float+0x2f4>
 800ca2c:	e690      	b.n	800c750 <_printf_float+0x98>
 800ca2e:	9a06      	ldr	r2, [sp, #24]
 800ca30:	464b      	mov	r3, r9
 800ca32:	4442      	add	r2, r8
 800ca34:	4631      	mov	r1, r6
 800ca36:	4628      	mov	r0, r5
 800ca38:	47b8      	blx	r7
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	d1c2      	bne.n	800c9c4 <_printf_float+0x30c>
 800ca3e:	e687      	b.n	800c750 <_printf_float+0x98>
 800ca40:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ca44:	f1b9 0f01 	cmp.w	r9, #1
 800ca48:	dc01      	bgt.n	800ca4e <_printf_float+0x396>
 800ca4a:	07db      	lsls	r3, r3, #31
 800ca4c:	d536      	bpl.n	800cabc <_printf_float+0x404>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	4642      	mov	r2, r8
 800ca52:	4631      	mov	r1, r6
 800ca54:	4628      	mov	r0, r5
 800ca56:	47b8      	blx	r7
 800ca58:	3001      	adds	r0, #1
 800ca5a:	f43f ae79 	beq.w	800c750 <_printf_float+0x98>
 800ca5e:	9b05      	ldr	r3, [sp, #20]
 800ca60:	465a      	mov	r2, fp
 800ca62:	4631      	mov	r1, r6
 800ca64:	4628      	mov	r0, r5
 800ca66:	47b8      	blx	r7
 800ca68:	3001      	adds	r0, #1
 800ca6a:	f43f ae71 	beq.w	800c750 <_printf_float+0x98>
 800ca6e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ca72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca7a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca7e:	d018      	beq.n	800cab2 <_printf_float+0x3fa>
 800ca80:	464b      	mov	r3, r9
 800ca82:	f108 0201 	add.w	r2, r8, #1
 800ca86:	4631      	mov	r1, r6
 800ca88:	4628      	mov	r0, r5
 800ca8a:	47b8      	blx	r7
 800ca8c:	3001      	adds	r0, #1
 800ca8e:	d10c      	bne.n	800caaa <_printf_float+0x3f2>
 800ca90:	e65e      	b.n	800c750 <_printf_float+0x98>
 800ca92:	2301      	movs	r3, #1
 800ca94:	465a      	mov	r2, fp
 800ca96:	4631      	mov	r1, r6
 800ca98:	4628      	mov	r0, r5
 800ca9a:	47b8      	blx	r7
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	f43f ae57 	beq.w	800c750 <_printf_float+0x98>
 800caa2:	f108 0801 	add.w	r8, r8, #1
 800caa6:	45c8      	cmp	r8, r9
 800caa8:	dbf3      	blt.n	800ca92 <_printf_float+0x3da>
 800caaa:	4653      	mov	r3, sl
 800caac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cab0:	e6dc      	b.n	800c86c <_printf_float+0x1b4>
 800cab2:	f04f 0800 	mov.w	r8, #0
 800cab6:	f104 0b1a 	add.w	fp, r4, #26
 800caba:	e7f4      	b.n	800caa6 <_printf_float+0x3ee>
 800cabc:	2301      	movs	r3, #1
 800cabe:	4642      	mov	r2, r8
 800cac0:	e7e1      	b.n	800ca86 <_printf_float+0x3ce>
 800cac2:	2301      	movs	r3, #1
 800cac4:	464a      	mov	r2, r9
 800cac6:	4631      	mov	r1, r6
 800cac8:	4628      	mov	r0, r5
 800caca:	47b8      	blx	r7
 800cacc:	3001      	adds	r0, #1
 800cace:	f43f ae3f 	beq.w	800c750 <_printf_float+0x98>
 800cad2:	f108 0801 	add.w	r8, r8, #1
 800cad6:	68e3      	ldr	r3, [r4, #12]
 800cad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cada:	1a5b      	subs	r3, r3, r1
 800cadc:	4543      	cmp	r3, r8
 800cade:	dcf0      	bgt.n	800cac2 <_printf_float+0x40a>
 800cae0:	e6f8      	b.n	800c8d4 <_printf_float+0x21c>
 800cae2:	f04f 0800 	mov.w	r8, #0
 800cae6:	f104 0919 	add.w	r9, r4, #25
 800caea:	e7f4      	b.n	800cad6 <_printf_float+0x41e>

0800caec <_printf_common>:
 800caec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf0:	4616      	mov	r6, r2
 800caf2:	4698      	mov	r8, r3
 800caf4:	688a      	ldr	r2, [r1, #8]
 800caf6:	690b      	ldr	r3, [r1, #16]
 800caf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cafc:	4293      	cmp	r3, r2
 800cafe:	bfb8      	it	lt
 800cb00:	4613      	movlt	r3, r2
 800cb02:	6033      	str	r3, [r6, #0]
 800cb04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb08:	4607      	mov	r7, r0
 800cb0a:	460c      	mov	r4, r1
 800cb0c:	b10a      	cbz	r2, 800cb12 <_printf_common+0x26>
 800cb0e:	3301      	adds	r3, #1
 800cb10:	6033      	str	r3, [r6, #0]
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	0699      	lsls	r1, r3, #26
 800cb16:	bf42      	ittt	mi
 800cb18:	6833      	ldrmi	r3, [r6, #0]
 800cb1a:	3302      	addmi	r3, #2
 800cb1c:	6033      	strmi	r3, [r6, #0]
 800cb1e:	6825      	ldr	r5, [r4, #0]
 800cb20:	f015 0506 	ands.w	r5, r5, #6
 800cb24:	d106      	bne.n	800cb34 <_printf_common+0x48>
 800cb26:	f104 0a19 	add.w	sl, r4, #25
 800cb2a:	68e3      	ldr	r3, [r4, #12]
 800cb2c:	6832      	ldr	r2, [r6, #0]
 800cb2e:	1a9b      	subs	r3, r3, r2
 800cb30:	42ab      	cmp	r3, r5
 800cb32:	dc26      	bgt.n	800cb82 <_printf_common+0x96>
 800cb34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb38:	6822      	ldr	r2, [r4, #0]
 800cb3a:	3b00      	subs	r3, #0
 800cb3c:	bf18      	it	ne
 800cb3e:	2301      	movne	r3, #1
 800cb40:	0692      	lsls	r2, r2, #26
 800cb42:	d42b      	bmi.n	800cb9c <_printf_common+0xb0>
 800cb44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb48:	4641      	mov	r1, r8
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	47c8      	blx	r9
 800cb4e:	3001      	adds	r0, #1
 800cb50:	d01e      	beq.n	800cb90 <_printf_common+0xa4>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	6922      	ldr	r2, [r4, #16]
 800cb56:	f003 0306 	and.w	r3, r3, #6
 800cb5a:	2b04      	cmp	r3, #4
 800cb5c:	bf02      	ittt	eq
 800cb5e:	68e5      	ldreq	r5, [r4, #12]
 800cb60:	6833      	ldreq	r3, [r6, #0]
 800cb62:	1aed      	subeq	r5, r5, r3
 800cb64:	68a3      	ldr	r3, [r4, #8]
 800cb66:	bf0c      	ite	eq
 800cb68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb6c:	2500      	movne	r5, #0
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	bfc4      	itt	gt
 800cb72:	1a9b      	subgt	r3, r3, r2
 800cb74:	18ed      	addgt	r5, r5, r3
 800cb76:	2600      	movs	r6, #0
 800cb78:	341a      	adds	r4, #26
 800cb7a:	42b5      	cmp	r5, r6
 800cb7c:	d11a      	bne.n	800cbb4 <_printf_common+0xc8>
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e008      	b.n	800cb94 <_printf_common+0xa8>
 800cb82:	2301      	movs	r3, #1
 800cb84:	4652      	mov	r2, sl
 800cb86:	4641      	mov	r1, r8
 800cb88:	4638      	mov	r0, r7
 800cb8a:	47c8      	blx	r9
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d103      	bne.n	800cb98 <_printf_common+0xac>
 800cb90:	f04f 30ff 	mov.w	r0, #4294967295
 800cb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb98:	3501      	adds	r5, #1
 800cb9a:	e7c6      	b.n	800cb2a <_printf_common+0x3e>
 800cb9c:	18e1      	adds	r1, r4, r3
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	2030      	movs	r0, #48	@ 0x30
 800cba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cba6:	4422      	add	r2, r4
 800cba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbb0:	3302      	adds	r3, #2
 800cbb2:	e7c7      	b.n	800cb44 <_printf_common+0x58>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	4641      	mov	r1, r8
 800cbba:	4638      	mov	r0, r7
 800cbbc:	47c8      	blx	r9
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	d0e6      	beq.n	800cb90 <_printf_common+0xa4>
 800cbc2:	3601      	adds	r6, #1
 800cbc4:	e7d9      	b.n	800cb7a <_printf_common+0x8e>
	...

0800cbc8 <_printf_i>:
 800cbc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbcc:	7e0f      	ldrb	r7, [r1, #24]
 800cbce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbd0:	2f78      	cmp	r7, #120	@ 0x78
 800cbd2:	4691      	mov	r9, r2
 800cbd4:	4680      	mov	r8, r0
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	469a      	mov	sl, r3
 800cbda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cbde:	d807      	bhi.n	800cbf0 <_printf_i+0x28>
 800cbe0:	2f62      	cmp	r7, #98	@ 0x62
 800cbe2:	d80a      	bhi.n	800cbfa <_printf_i+0x32>
 800cbe4:	2f00      	cmp	r7, #0
 800cbe6:	f000 80d1 	beq.w	800cd8c <_printf_i+0x1c4>
 800cbea:	2f58      	cmp	r7, #88	@ 0x58
 800cbec:	f000 80b8 	beq.w	800cd60 <_printf_i+0x198>
 800cbf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cbf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cbf8:	e03a      	b.n	800cc70 <_printf_i+0xa8>
 800cbfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cbfe:	2b15      	cmp	r3, #21
 800cc00:	d8f6      	bhi.n	800cbf0 <_printf_i+0x28>
 800cc02:	a101      	add	r1, pc, #4	@ (adr r1, 800cc08 <_printf_i+0x40>)
 800cc04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc08:	0800cc61 	.word	0x0800cc61
 800cc0c:	0800cc75 	.word	0x0800cc75
 800cc10:	0800cbf1 	.word	0x0800cbf1
 800cc14:	0800cbf1 	.word	0x0800cbf1
 800cc18:	0800cbf1 	.word	0x0800cbf1
 800cc1c:	0800cbf1 	.word	0x0800cbf1
 800cc20:	0800cc75 	.word	0x0800cc75
 800cc24:	0800cbf1 	.word	0x0800cbf1
 800cc28:	0800cbf1 	.word	0x0800cbf1
 800cc2c:	0800cbf1 	.word	0x0800cbf1
 800cc30:	0800cbf1 	.word	0x0800cbf1
 800cc34:	0800cd73 	.word	0x0800cd73
 800cc38:	0800cc9f 	.word	0x0800cc9f
 800cc3c:	0800cd2d 	.word	0x0800cd2d
 800cc40:	0800cbf1 	.word	0x0800cbf1
 800cc44:	0800cbf1 	.word	0x0800cbf1
 800cc48:	0800cd95 	.word	0x0800cd95
 800cc4c:	0800cbf1 	.word	0x0800cbf1
 800cc50:	0800cc9f 	.word	0x0800cc9f
 800cc54:	0800cbf1 	.word	0x0800cbf1
 800cc58:	0800cbf1 	.word	0x0800cbf1
 800cc5c:	0800cd35 	.word	0x0800cd35
 800cc60:	6833      	ldr	r3, [r6, #0]
 800cc62:	1d1a      	adds	r2, r3, #4
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6032      	str	r2, [r6, #0]
 800cc68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc70:	2301      	movs	r3, #1
 800cc72:	e09c      	b.n	800cdae <_printf_i+0x1e6>
 800cc74:	6833      	ldr	r3, [r6, #0]
 800cc76:	6820      	ldr	r0, [r4, #0]
 800cc78:	1d19      	adds	r1, r3, #4
 800cc7a:	6031      	str	r1, [r6, #0]
 800cc7c:	0606      	lsls	r6, r0, #24
 800cc7e:	d501      	bpl.n	800cc84 <_printf_i+0xbc>
 800cc80:	681d      	ldr	r5, [r3, #0]
 800cc82:	e003      	b.n	800cc8c <_printf_i+0xc4>
 800cc84:	0645      	lsls	r5, r0, #25
 800cc86:	d5fb      	bpl.n	800cc80 <_printf_i+0xb8>
 800cc88:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cc8c:	2d00      	cmp	r5, #0
 800cc8e:	da03      	bge.n	800cc98 <_printf_i+0xd0>
 800cc90:	232d      	movs	r3, #45	@ 0x2d
 800cc92:	426d      	negs	r5, r5
 800cc94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc98:	4858      	ldr	r0, [pc, #352]	@ (800cdfc <_printf_i+0x234>)
 800cc9a:	230a      	movs	r3, #10
 800cc9c:	e011      	b.n	800ccc2 <_printf_i+0xfa>
 800cc9e:	6821      	ldr	r1, [r4, #0]
 800cca0:	6833      	ldr	r3, [r6, #0]
 800cca2:	0608      	lsls	r0, r1, #24
 800cca4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cca8:	d402      	bmi.n	800ccb0 <_printf_i+0xe8>
 800ccaa:	0649      	lsls	r1, r1, #25
 800ccac:	bf48      	it	mi
 800ccae:	b2ad      	uxthmi	r5, r5
 800ccb0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccb2:	4852      	ldr	r0, [pc, #328]	@ (800cdfc <_printf_i+0x234>)
 800ccb4:	6033      	str	r3, [r6, #0]
 800ccb6:	bf14      	ite	ne
 800ccb8:	230a      	movne	r3, #10
 800ccba:	2308      	moveq	r3, #8
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccc2:	6866      	ldr	r6, [r4, #4]
 800ccc4:	60a6      	str	r6, [r4, #8]
 800ccc6:	2e00      	cmp	r6, #0
 800ccc8:	db05      	blt.n	800ccd6 <_printf_i+0x10e>
 800ccca:	6821      	ldr	r1, [r4, #0]
 800cccc:	432e      	orrs	r6, r5
 800ccce:	f021 0104 	bic.w	r1, r1, #4
 800ccd2:	6021      	str	r1, [r4, #0]
 800ccd4:	d04b      	beq.n	800cd6e <_printf_i+0x1a6>
 800ccd6:	4616      	mov	r6, r2
 800ccd8:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccdc:	fb03 5711 	mls	r7, r3, r1, r5
 800cce0:	5dc7      	ldrb	r7, [r0, r7]
 800cce2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cce6:	462f      	mov	r7, r5
 800cce8:	42bb      	cmp	r3, r7
 800ccea:	460d      	mov	r5, r1
 800ccec:	d9f4      	bls.n	800ccd8 <_printf_i+0x110>
 800ccee:	2b08      	cmp	r3, #8
 800ccf0:	d10b      	bne.n	800cd0a <_printf_i+0x142>
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	07df      	lsls	r7, r3, #31
 800ccf6:	d508      	bpl.n	800cd0a <_printf_i+0x142>
 800ccf8:	6923      	ldr	r3, [r4, #16]
 800ccfa:	6861      	ldr	r1, [r4, #4]
 800ccfc:	4299      	cmp	r1, r3
 800ccfe:	bfde      	ittt	le
 800cd00:	2330      	movle	r3, #48	@ 0x30
 800cd02:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd06:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd0a:	1b92      	subs	r2, r2, r6
 800cd0c:	6122      	str	r2, [r4, #16]
 800cd0e:	f8cd a000 	str.w	sl, [sp]
 800cd12:	464b      	mov	r3, r9
 800cd14:	aa03      	add	r2, sp, #12
 800cd16:	4621      	mov	r1, r4
 800cd18:	4640      	mov	r0, r8
 800cd1a:	f7ff fee7 	bl	800caec <_printf_common>
 800cd1e:	3001      	adds	r0, #1
 800cd20:	d14a      	bne.n	800cdb8 <_printf_i+0x1f0>
 800cd22:	f04f 30ff 	mov.w	r0, #4294967295
 800cd26:	b004      	add	sp, #16
 800cd28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	f043 0320 	orr.w	r3, r3, #32
 800cd32:	6023      	str	r3, [r4, #0]
 800cd34:	4832      	ldr	r0, [pc, #200]	@ (800ce00 <_printf_i+0x238>)
 800cd36:	2778      	movs	r7, #120	@ 0x78
 800cd38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd3c:	6823      	ldr	r3, [r4, #0]
 800cd3e:	6831      	ldr	r1, [r6, #0]
 800cd40:	061f      	lsls	r7, r3, #24
 800cd42:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd46:	d402      	bmi.n	800cd4e <_printf_i+0x186>
 800cd48:	065f      	lsls	r7, r3, #25
 800cd4a:	bf48      	it	mi
 800cd4c:	b2ad      	uxthmi	r5, r5
 800cd4e:	6031      	str	r1, [r6, #0]
 800cd50:	07d9      	lsls	r1, r3, #31
 800cd52:	bf44      	itt	mi
 800cd54:	f043 0320 	orrmi.w	r3, r3, #32
 800cd58:	6023      	strmi	r3, [r4, #0]
 800cd5a:	b11d      	cbz	r5, 800cd64 <_printf_i+0x19c>
 800cd5c:	2310      	movs	r3, #16
 800cd5e:	e7ad      	b.n	800ccbc <_printf_i+0xf4>
 800cd60:	4826      	ldr	r0, [pc, #152]	@ (800cdfc <_printf_i+0x234>)
 800cd62:	e7e9      	b.n	800cd38 <_printf_i+0x170>
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	f023 0320 	bic.w	r3, r3, #32
 800cd6a:	6023      	str	r3, [r4, #0]
 800cd6c:	e7f6      	b.n	800cd5c <_printf_i+0x194>
 800cd6e:	4616      	mov	r6, r2
 800cd70:	e7bd      	b.n	800ccee <_printf_i+0x126>
 800cd72:	6833      	ldr	r3, [r6, #0]
 800cd74:	6825      	ldr	r5, [r4, #0]
 800cd76:	6961      	ldr	r1, [r4, #20]
 800cd78:	1d18      	adds	r0, r3, #4
 800cd7a:	6030      	str	r0, [r6, #0]
 800cd7c:	062e      	lsls	r6, r5, #24
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	d501      	bpl.n	800cd86 <_printf_i+0x1be>
 800cd82:	6019      	str	r1, [r3, #0]
 800cd84:	e002      	b.n	800cd8c <_printf_i+0x1c4>
 800cd86:	0668      	lsls	r0, r5, #25
 800cd88:	d5fb      	bpl.n	800cd82 <_printf_i+0x1ba>
 800cd8a:	8019      	strh	r1, [r3, #0]
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	6123      	str	r3, [r4, #16]
 800cd90:	4616      	mov	r6, r2
 800cd92:	e7bc      	b.n	800cd0e <_printf_i+0x146>
 800cd94:	6833      	ldr	r3, [r6, #0]
 800cd96:	1d1a      	adds	r2, r3, #4
 800cd98:	6032      	str	r2, [r6, #0]
 800cd9a:	681e      	ldr	r6, [r3, #0]
 800cd9c:	6862      	ldr	r2, [r4, #4]
 800cd9e:	2100      	movs	r1, #0
 800cda0:	4630      	mov	r0, r6
 800cda2:	f7f3 faa5 	bl	80002f0 <memchr>
 800cda6:	b108      	cbz	r0, 800cdac <_printf_i+0x1e4>
 800cda8:	1b80      	subs	r0, r0, r6
 800cdaa:	6060      	str	r0, [r4, #4]
 800cdac:	6863      	ldr	r3, [r4, #4]
 800cdae:	6123      	str	r3, [r4, #16]
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdb6:	e7aa      	b.n	800cd0e <_printf_i+0x146>
 800cdb8:	6923      	ldr	r3, [r4, #16]
 800cdba:	4632      	mov	r2, r6
 800cdbc:	4649      	mov	r1, r9
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	47d0      	blx	sl
 800cdc2:	3001      	adds	r0, #1
 800cdc4:	d0ad      	beq.n	800cd22 <_printf_i+0x15a>
 800cdc6:	6823      	ldr	r3, [r4, #0]
 800cdc8:	079b      	lsls	r3, r3, #30
 800cdca:	d413      	bmi.n	800cdf4 <_printf_i+0x22c>
 800cdcc:	68e0      	ldr	r0, [r4, #12]
 800cdce:	9b03      	ldr	r3, [sp, #12]
 800cdd0:	4298      	cmp	r0, r3
 800cdd2:	bfb8      	it	lt
 800cdd4:	4618      	movlt	r0, r3
 800cdd6:	e7a6      	b.n	800cd26 <_printf_i+0x15e>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	4632      	mov	r2, r6
 800cddc:	4649      	mov	r1, r9
 800cdde:	4640      	mov	r0, r8
 800cde0:	47d0      	blx	sl
 800cde2:	3001      	adds	r0, #1
 800cde4:	d09d      	beq.n	800cd22 <_printf_i+0x15a>
 800cde6:	3501      	adds	r5, #1
 800cde8:	68e3      	ldr	r3, [r4, #12]
 800cdea:	9903      	ldr	r1, [sp, #12]
 800cdec:	1a5b      	subs	r3, r3, r1
 800cdee:	42ab      	cmp	r3, r5
 800cdf0:	dcf2      	bgt.n	800cdd8 <_printf_i+0x210>
 800cdf2:	e7eb      	b.n	800cdcc <_printf_i+0x204>
 800cdf4:	2500      	movs	r5, #0
 800cdf6:	f104 0619 	add.w	r6, r4, #25
 800cdfa:	e7f5      	b.n	800cde8 <_printf_i+0x220>
 800cdfc:	0800ef3e 	.word	0x0800ef3e
 800ce00:	0800ef4f 	.word	0x0800ef4f

0800ce04 <std>:
 800ce04:	2300      	movs	r3, #0
 800ce06:	b510      	push	{r4, lr}
 800ce08:	4604      	mov	r4, r0
 800ce0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ce0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce12:	6083      	str	r3, [r0, #8]
 800ce14:	8181      	strh	r1, [r0, #12]
 800ce16:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce18:	81c2      	strh	r2, [r0, #14]
 800ce1a:	6183      	str	r3, [r0, #24]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	2208      	movs	r2, #8
 800ce20:	305c      	adds	r0, #92	@ 0x5c
 800ce22:	f000 f906 	bl	800d032 <memset>
 800ce26:	4b0d      	ldr	r3, [pc, #52]	@ (800ce5c <std+0x58>)
 800ce28:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce60 <std+0x5c>)
 800ce2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce64 <std+0x60>)
 800ce30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce32:	4b0d      	ldr	r3, [pc, #52]	@ (800ce68 <std+0x64>)
 800ce34:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce36:	4b0d      	ldr	r3, [pc, #52]	@ (800ce6c <std+0x68>)
 800ce38:	6224      	str	r4, [r4, #32]
 800ce3a:	429c      	cmp	r4, r3
 800ce3c:	d006      	beq.n	800ce4c <std+0x48>
 800ce3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce42:	4294      	cmp	r4, r2
 800ce44:	d002      	beq.n	800ce4c <std+0x48>
 800ce46:	33d0      	adds	r3, #208	@ 0xd0
 800ce48:	429c      	cmp	r4, r3
 800ce4a:	d105      	bne.n	800ce58 <std+0x54>
 800ce4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce54:	f000 b96a 	b.w	800d12c <__retarget_lock_init_recursive>
 800ce58:	bd10      	pop	{r4, pc}
 800ce5a:	bf00      	nop
 800ce5c:	0800cfad 	.word	0x0800cfad
 800ce60:	0800cfcf 	.word	0x0800cfcf
 800ce64:	0800d007 	.word	0x0800d007
 800ce68:	0800d02b 	.word	0x0800d02b
 800ce6c:	24000944 	.word	0x24000944

0800ce70 <stdio_exit_handler>:
 800ce70:	4a02      	ldr	r2, [pc, #8]	@ (800ce7c <stdio_exit_handler+0xc>)
 800ce72:	4903      	ldr	r1, [pc, #12]	@ (800ce80 <stdio_exit_handler+0x10>)
 800ce74:	4803      	ldr	r0, [pc, #12]	@ (800ce84 <stdio_exit_handler+0x14>)
 800ce76:	f000 b869 	b.w	800cf4c <_fwalk_sglue>
 800ce7a:	bf00      	nop
 800ce7c:	24000010 	.word	0x24000010
 800ce80:	0800e99d 	.word	0x0800e99d
 800ce84:	24000020 	.word	0x24000020

0800ce88 <cleanup_stdio>:
 800ce88:	6841      	ldr	r1, [r0, #4]
 800ce8a:	4b0c      	ldr	r3, [pc, #48]	@ (800cebc <cleanup_stdio+0x34>)
 800ce8c:	4299      	cmp	r1, r3
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	4604      	mov	r4, r0
 800ce92:	d001      	beq.n	800ce98 <cleanup_stdio+0x10>
 800ce94:	f001 fd82 	bl	800e99c <_fflush_r>
 800ce98:	68a1      	ldr	r1, [r4, #8]
 800ce9a:	4b09      	ldr	r3, [pc, #36]	@ (800cec0 <cleanup_stdio+0x38>)
 800ce9c:	4299      	cmp	r1, r3
 800ce9e:	d002      	beq.n	800cea6 <cleanup_stdio+0x1e>
 800cea0:	4620      	mov	r0, r4
 800cea2:	f001 fd7b 	bl	800e99c <_fflush_r>
 800cea6:	68e1      	ldr	r1, [r4, #12]
 800cea8:	4b06      	ldr	r3, [pc, #24]	@ (800cec4 <cleanup_stdio+0x3c>)
 800ceaa:	4299      	cmp	r1, r3
 800ceac:	d004      	beq.n	800ceb8 <cleanup_stdio+0x30>
 800ceae:	4620      	mov	r0, r4
 800ceb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceb4:	f001 bd72 	b.w	800e99c <_fflush_r>
 800ceb8:	bd10      	pop	{r4, pc}
 800ceba:	bf00      	nop
 800cebc:	24000944 	.word	0x24000944
 800cec0:	240009ac 	.word	0x240009ac
 800cec4:	24000a14 	.word	0x24000a14

0800cec8 <global_stdio_init.part.0>:
 800cec8:	b510      	push	{r4, lr}
 800ceca:	4b0b      	ldr	r3, [pc, #44]	@ (800cef8 <global_stdio_init.part.0+0x30>)
 800cecc:	4c0b      	ldr	r4, [pc, #44]	@ (800cefc <global_stdio_init.part.0+0x34>)
 800cece:	4a0c      	ldr	r2, [pc, #48]	@ (800cf00 <global_stdio_init.part.0+0x38>)
 800ced0:	601a      	str	r2, [r3, #0]
 800ced2:	4620      	mov	r0, r4
 800ced4:	2200      	movs	r2, #0
 800ced6:	2104      	movs	r1, #4
 800ced8:	f7ff ff94 	bl	800ce04 <std>
 800cedc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cee0:	2201      	movs	r2, #1
 800cee2:	2109      	movs	r1, #9
 800cee4:	f7ff ff8e 	bl	800ce04 <std>
 800cee8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ceec:	2202      	movs	r2, #2
 800ceee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cef2:	2112      	movs	r1, #18
 800cef4:	f7ff bf86 	b.w	800ce04 <std>
 800cef8:	24000a7c 	.word	0x24000a7c
 800cefc:	24000944 	.word	0x24000944
 800cf00:	0800ce71 	.word	0x0800ce71

0800cf04 <__sfp_lock_acquire>:
 800cf04:	4801      	ldr	r0, [pc, #4]	@ (800cf0c <__sfp_lock_acquire+0x8>)
 800cf06:	f000 b912 	b.w	800d12e <__retarget_lock_acquire_recursive>
 800cf0a:	bf00      	nop
 800cf0c:	24000a85 	.word	0x24000a85

0800cf10 <__sfp_lock_release>:
 800cf10:	4801      	ldr	r0, [pc, #4]	@ (800cf18 <__sfp_lock_release+0x8>)
 800cf12:	f000 b90d 	b.w	800d130 <__retarget_lock_release_recursive>
 800cf16:	bf00      	nop
 800cf18:	24000a85 	.word	0x24000a85

0800cf1c <__sinit>:
 800cf1c:	b510      	push	{r4, lr}
 800cf1e:	4604      	mov	r4, r0
 800cf20:	f7ff fff0 	bl	800cf04 <__sfp_lock_acquire>
 800cf24:	6a23      	ldr	r3, [r4, #32]
 800cf26:	b11b      	cbz	r3, 800cf30 <__sinit+0x14>
 800cf28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf2c:	f7ff bff0 	b.w	800cf10 <__sfp_lock_release>
 800cf30:	4b04      	ldr	r3, [pc, #16]	@ (800cf44 <__sinit+0x28>)
 800cf32:	6223      	str	r3, [r4, #32]
 800cf34:	4b04      	ldr	r3, [pc, #16]	@ (800cf48 <__sinit+0x2c>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1f5      	bne.n	800cf28 <__sinit+0xc>
 800cf3c:	f7ff ffc4 	bl	800cec8 <global_stdio_init.part.0>
 800cf40:	e7f2      	b.n	800cf28 <__sinit+0xc>
 800cf42:	bf00      	nop
 800cf44:	0800ce89 	.word	0x0800ce89
 800cf48:	24000a7c 	.word	0x24000a7c

0800cf4c <_fwalk_sglue>:
 800cf4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf50:	4607      	mov	r7, r0
 800cf52:	4688      	mov	r8, r1
 800cf54:	4614      	mov	r4, r2
 800cf56:	2600      	movs	r6, #0
 800cf58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf5c:	f1b9 0901 	subs.w	r9, r9, #1
 800cf60:	d505      	bpl.n	800cf6e <_fwalk_sglue+0x22>
 800cf62:	6824      	ldr	r4, [r4, #0]
 800cf64:	2c00      	cmp	r4, #0
 800cf66:	d1f7      	bne.n	800cf58 <_fwalk_sglue+0xc>
 800cf68:	4630      	mov	r0, r6
 800cf6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf6e:	89ab      	ldrh	r3, [r5, #12]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d907      	bls.n	800cf84 <_fwalk_sglue+0x38>
 800cf74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	d003      	beq.n	800cf84 <_fwalk_sglue+0x38>
 800cf7c:	4629      	mov	r1, r5
 800cf7e:	4638      	mov	r0, r7
 800cf80:	47c0      	blx	r8
 800cf82:	4306      	orrs	r6, r0
 800cf84:	3568      	adds	r5, #104	@ 0x68
 800cf86:	e7e9      	b.n	800cf5c <_fwalk_sglue+0x10>

0800cf88 <iprintf>:
 800cf88:	b40f      	push	{r0, r1, r2, r3}
 800cf8a:	b507      	push	{r0, r1, r2, lr}
 800cf8c:	4906      	ldr	r1, [pc, #24]	@ (800cfa8 <iprintf+0x20>)
 800cf8e:	ab04      	add	r3, sp, #16
 800cf90:	6808      	ldr	r0, [r1, #0]
 800cf92:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf96:	6881      	ldr	r1, [r0, #8]
 800cf98:	9301      	str	r3, [sp, #4]
 800cf9a:	f001 fb63 	bl	800e664 <_vfiprintf_r>
 800cf9e:	b003      	add	sp, #12
 800cfa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfa4:	b004      	add	sp, #16
 800cfa6:	4770      	bx	lr
 800cfa8:	2400001c 	.word	0x2400001c

0800cfac <__sread>:
 800cfac:	b510      	push	{r4, lr}
 800cfae:	460c      	mov	r4, r1
 800cfb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb4:	f000 f86c 	bl	800d090 <_read_r>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	bfab      	itete	ge
 800cfbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cfbe:	89a3      	ldrhlt	r3, [r4, #12]
 800cfc0:	181b      	addge	r3, r3, r0
 800cfc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cfc6:	bfac      	ite	ge
 800cfc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cfca:	81a3      	strhlt	r3, [r4, #12]
 800cfcc:	bd10      	pop	{r4, pc}

0800cfce <__swrite>:
 800cfce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd2:	461f      	mov	r7, r3
 800cfd4:	898b      	ldrh	r3, [r1, #12]
 800cfd6:	05db      	lsls	r3, r3, #23
 800cfd8:	4605      	mov	r5, r0
 800cfda:	460c      	mov	r4, r1
 800cfdc:	4616      	mov	r6, r2
 800cfde:	d505      	bpl.n	800cfec <__swrite+0x1e>
 800cfe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe4:	2302      	movs	r3, #2
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f000 f840 	bl	800d06c <_lseek_r>
 800cfec:	89a3      	ldrh	r3, [r4, #12]
 800cfee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cff2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cff6:	81a3      	strh	r3, [r4, #12]
 800cff8:	4632      	mov	r2, r6
 800cffa:	463b      	mov	r3, r7
 800cffc:	4628      	mov	r0, r5
 800cffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d002:	f000 b857 	b.w	800d0b4 <_write_r>

0800d006 <__sseek>:
 800d006:	b510      	push	{r4, lr}
 800d008:	460c      	mov	r4, r1
 800d00a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d00e:	f000 f82d 	bl	800d06c <_lseek_r>
 800d012:	1c43      	adds	r3, r0, #1
 800d014:	89a3      	ldrh	r3, [r4, #12]
 800d016:	bf15      	itete	ne
 800d018:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d01a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d01e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d022:	81a3      	strheq	r3, [r4, #12]
 800d024:	bf18      	it	ne
 800d026:	81a3      	strhne	r3, [r4, #12]
 800d028:	bd10      	pop	{r4, pc}

0800d02a <__sclose>:
 800d02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d02e:	f000 b80d 	b.w	800d04c <_close_r>

0800d032 <memset>:
 800d032:	4402      	add	r2, r0
 800d034:	4603      	mov	r3, r0
 800d036:	4293      	cmp	r3, r2
 800d038:	d100      	bne.n	800d03c <memset+0xa>
 800d03a:	4770      	bx	lr
 800d03c:	f803 1b01 	strb.w	r1, [r3], #1
 800d040:	e7f9      	b.n	800d036 <memset+0x4>
	...

0800d044 <_localeconv_r>:
 800d044:	4800      	ldr	r0, [pc, #0]	@ (800d048 <_localeconv_r+0x4>)
 800d046:	4770      	bx	lr
 800d048:	2400015c 	.word	0x2400015c

0800d04c <_close_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	4d06      	ldr	r5, [pc, #24]	@ (800d068 <_close_r+0x1c>)
 800d050:	2300      	movs	r3, #0
 800d052:	4604      	mov	r4, r0
 800d054:	4608      	mov	r0, r1
 800d056:	602b      	str	r3, [r5, #0]
 800d058:	f7f5 fb4e 	bl	80026f8 <_close>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_close_r+0x1a>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_close_r+0x1a>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	24000a80 	.word	0x24000a80

0800d06c <_lseek_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4d07      	ldr	r5, [pc, #28]	@ (800d08c <_lseek_r+0x20>)
 800d070:	4604      	mov	r4, r0
 800d072:	4608      	mov	r0, r1
 800d074:	4611      	mov	r1, r2
 800d076:	2200      	movs	r2, #0
 800d078:	602a      	str	r2, [r5, #0]
 800d07a:	461a      	mov	r2, r3
 800d07c:	f7f5 fb63 	bl	8002746 <_lseek>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	d102      	bne.n	800d08a <_lseek_r+0x1e>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	b103      	cbz	r3, 800d08a <_lseek_r+0x1e>
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	24000a80 	.word	0x24000a80

0800d090 <_read_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4d07      	ldr	r5, [pc, #28]	@ (800d0b0 <_read_r+0x20>)
 800d094:	4604      	mov	r4, r0
 800d096:	4608      	mov	r0, r1
 800d098:	4611      	mov	r1, r2
 800d09a:	2200      	movs	r2, #0
 800d09c:	602a      	str	r2, [r5, #0]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f7f5 faf1 	bl	8002686 <_read>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d102      	bne.n	800d0ae <_read_r+0x1e>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	b103      	cbz	r3, 800d0ae <_read_r+0x1e>
 800d0ac:	6023      	str	r3, [r4, #0]
 800d0ae:	bd38      	pop	{r3, r4, r5, pc}
 800d0b0:	24000a80 	.word	0x24000a80

0800d0b4 <_write_r>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	4d07      	ldr	r5, [pc, #28]	@ (800d0d4 <_write_r+0x20>)
 800d0b8:	4604      	mov	r4, r0
 800d0ba:	4608      	mov	r0, r1
 800d0bc:	4611      	mov	r1, r2
 800d0be:	2200      	movs	r2, #0
 800d0c0:	602a      	str	r2, [r5, #0]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	f7f5 fafc 	bl	80026c0 <_write>
 800d0c8:	1c43      	adds	r3, r0, #1
 800d0ca:	d102      	bne.n	800d0d2 <_write_r+0x1e>
 800d0cc:	682b      	ldr	r3, [r5, #0]
 800d0ce:	b103      	cbz	r3, 800d0d2 <_write_r+0x1e>
 800d0d0:	6023      	str	r3, [r4, #0]
 800d0d2:	bd38      	pop	{r3, r4, r5, pc}
 800d0d4:	24000a80 	.word	0x24000a80

0800d0d8 <__errno>:
 800d0d8:	4b01      	ldr	r3, [pc, #4]	@ (800d0e0 <__errno+0x8>)
 800d0da:	6818      	ldr	r0, [r3, #0]
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	2400001c 	.word	0x2400001c

0800d0e4 <__libc_init_array>:
 800d0e4:	b570      	push	{r4, r5, r6, lr}
 800d0e6:	4d0d      	ldr	r5, [pc, #52]	@ (800d11c <__libc_init_array+0x38>)
 800d0e8:	4c0d      	ldr	r4, [pc, #52]	@ (800d120 <__libc_init_array+0x3c>)
 800d0ea:	1b64      	subs	r4, r4, r5
 800d0ec:	10a4      	asrs	r4, r4, #2
 800d0ee:	2600      	movs	r6, #0
 800d0f0:	42a6      	cmp	r6, r4
 800d0f2:	d109      	bne.n	800d108 <__libc_init_array+0x24>
 800d0f4:	4d0b      	ldr	r5, [pc, #44]	@ (800d124 <__libc_init_array+0x40>)
 800d0f6:	4c0c      	ldr	r4, [pc, #48]	@ (800d128 <__libc_init_array+0x44>)
 800d0f8:	f001 fe50 	bl	800ed9c <_init>
 800d0fc:	1b64      	subs	r4, r4, r5
 800d0fe:	10a4      	asrs	r4, r4, #2
 800d100:	2600      	movs	r6, #0
 800d102:	42a6      	cmp	r6, r4
 800d104:	d105      	bne.n	800d112 <__libc_init_array+0x2e>
 800d106:	bd70      	pop	{r4, r5, r6, pc}
 800d108:	f855 3b04 	ldr.w	r3, [r5], #4
 800d10c:	4798      	blx	r3
 800d10e:	3601      	adds	r6, #1
 800d110:	e7ee      	b.n	800d0f0 <__libc_init_array+0xc>
 800d112:	f855 3b04 	ldr.w	r3, [r5], #4
 800d116:	4798      	blx	r3
 800d118:	3601      	adds	r6, #1
 800d11a:	e7f2      	b.n	800d102 <__libc_init_array+0x1e>
 800d11c:	0800f2ac 	.word	0x0800f2ac
 800d120:	0800f2ac 	.word	0x0800f2ac
 800d124:	0800f2ac 	.word	0x0800f2ac
 800d128:	0800f2b0 	.word	0x0800f2b0

0800d12c <__retarget_lock_init_recursive>:
 800d12c:	4770      	bx	lr

0800d12e <__retarget_lock_acquire_recursive>:
 800d12e:	4770      	bx	lr

0800d130 <__retarget_lock_release_recursive>:
 800d130:	4770      	bx	lr

0800d132 <memcpy>:
 800d132:	440a      	add	r2, r1
 800d134:	4291      	cmp	r1, r2
 800d136:	f100 33ff 	add.w	r3, r0, #4294967295
 800d13a:	d100      	bne.n	800d13e <memcpy+0xc>
 800d13c:	4770      	bx	lr
 800d13e:	b510      	push	{r4, lr}
 800d140:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d144:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d148:	4291      	cmp	r1, r2
 800d14a:	d1f9      	bne.n	800d140 <memcpy+0xe>
 800d14c:	bd10      	pop	{r4, pc}

0800d14e <quorem>:
 800d14e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d152:	6903      	ldr	r3, [r0, #16]
 800d154:	690c      	ldr	r4, [r1, #16]
 800d156:	42a3      	cmp	r3, r4
 800d158:	4607      	mov	r7, r0
 800d15a:	db7e      	blt.n	800d25a <quorem+0x10c>
 800d15c:	3c01      	subs	r4, #1
 800d15e:	f101 0814 	add.w	r8, r1, #20
 800d162:	00a3      	lsls	r3, r4, #2
 800d164:	f100 0514 	add.w	r5, r0, #20
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d16e:	9301      	str	r3, [sp, #4]
 800d170:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d174:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d178:	3301      	adds	r3, #1
 800d17a:	429a      	cmp	r2, r3
 800d17c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d180:	fbb2 f6f3 	udiv	r6, r2, r3
 800d184:	d32e      	bcc.n	800d1e4 <quorem+0x96>
 800d186:	f04f 0a00 	mov.w	sl, #0
 800d18a:	46c4      	mov	ip, r8
 800d18c:	46ae      	mov	lr, r5
 800d18e:	46d3      	mov	fp, sl
 800d190:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d194:	b298      	uxth	r0, r3
 800d196:	fb06 a000 	mla	r0, r6, r0, sl
 800d19a:	0c02      	lsrs	r2, r0, #16
 800d19c:	0c1b      	lsrs	r3, r3, #16
 800d19e:	fb06 2303 	mla	r3, r6, r3, r2
 800d1a2:	f8de 2000 	ldr.w	r2, [lr]
 800d1a6:	b280      	uxth	r0, r0
 800d1a8:	b292      	uxth	r2, r2
 800d1aa:	1a12      	subs	r2, r2, r0
 800d1ac:	445a      	add	r2, fp
 800d1ae:	f8de 0000 	ldr.w	r0, [lr]
 800d1b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d1bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d1c0:	b292      	uxth	r2, r2
 800d1c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d1c6:	45e1      	cmp	r9, ip
 800d1c8:	f84e 2b04 	str.w	r2, [lr], #4
 800d1cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d1d0:	d2de      	bcs.n	800d190 <quorem+0x42>
 800d1d2:	9b00      	ldr	r3, [sp, #0]
 800d1d4:	58eb      	ldr	r3, [r5, r3]
 800d1d6:	b92b      	cbnz	r3, 800d1e4 <quorem+0x96>
 800d1d8:	9b01      	ldr	r3, [sp, #4]
 800d1da:	3b04      	subs	r3, #4
 800d1dc:	429d      	cmp	r5, r3
 800d1de:	461a      	mov	r2, r3
 800d1e0:	d32f      	bcc.n	800d242 <quorem+0xf4>
 800d1e2:	613c      	str	r4, [r7, #16]
 800d1e4:	4638      	mov	r0, r7
 800d1e6:	f001 f90b 	bl	800e400 <__mcmp>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	db25      	blt.n	800d23a <quorem+0xec>
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1f6:	f8d1 c000 	ldr.w	ip, [r1]
 800d1fa:	fa1f fe82 	uxth.w	lr, r2
 800d1fe:	fa1f f38c 	uxth.w	r3, ip
 800d202:	eba3 030e 	sub.w	r3, r3, lr
 800d206:	4403      	add	r3, r0
 800d208:	0c12      	lsrs	r2, r2, #16
 800d20a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d20e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d212:	b29b      	uxth	r3, r3
 800d214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d218:	45c1      	cmp	r9, r8
 800d21a:	f841 3b04 	str.w	r3, [r1], #4
 800d21e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d222:	d2e6      	bcs.n	800d1f2 <quorem+0xa4>
 800d224:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d228:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d22c:	b922      	cbnz	r2, 800d238 <quorem+0xea>
 800d22e:	3b04      	subs	r3, #4
 800d230:	429d      	cmp	r5, r3
 800d232:	461a      	mov	r2, r3
 800d234:	d30b      	bcc.n	800d24e <quorem+0x100>
 800d236:	613c      	str	r4, [r7, #16]
 800d238:	3601      	adds	r6, #1
 800d23a:	4630      	mov	r0, r6
 800d23c:	b003      	add	sp, #12
 800d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d242:	6812      	ldr	r2, [r2, #0]
 800d244:	3b04      	subs	r3, #4
 800d246:	2a00      	cmp	r2, #0
 800d248:	d1cb      	bne.n	800d1e2 <quorem+0x94>
 800d24a:	3c01      	subs	r4, #1
 800d24c:	e7c6      	b.n	800d1dc <quorem+0x8e>
 800d24e:	6812      	ldr	r2, [r2, #0]
 800d250:	3b04      	subs	r3, #4
 800d252:	2a00      	cmp	r2, #0
 800d254:	d1ef      	bne.n	800d236 <quorem+0xe8>
 800d256:	3c01      	subs	r4, #1
 800d258:	e7ea      	b.n	800d230 <quorem+0xe2>
 800d25a:	2000      	movs	r0, #0
 800d25c:	e7ee      	b.n	800d23c <quorem+0xee>
	...

0800d260 <_dtoa_r>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	ed2d 8b02 	vpush	{d8}
 800d268:	69c7      	ldr	r7, [r0, #28]
 800d26a:	b091      	sub	sp, #68	@ 0x44
 800d26c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d270:	ec55 4b10 	vmov	r4, r5, d0
 800d274:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d276:	9107      	str	r1, [sp, #28]
 800d278:	4681      	mov	r9, r0
 800d27a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d27c:	930d      	str	r3, [sp, #52]	@ 0x34
 800d27e:	b97f      	cbnz	r7, 800d2a0 <_dtoa_r+0x40>
 800d280:	2010      	movs	r0, #16
 800d282:	f000 fd95 	bl	800ddb0 <malloc>
 800d286:	4602      	mov	r2, r0
 800d288:	f8c9 001c 	str.w	r0, [r9, #28]
 800d28c:	b920      	cbnz	r0, 800d298 <_dtoa_r+0x38>
 800d28e:	4ba0      	ldr	r3, [pc, #640]	@ (800d510 <_dtoa_r+0x2b0>)
 800d290:	21ef      	movs	r1, #239	@ 0xef
 800d292:	48a0      	ldr	r0, [pc, #640]	@ (800d514 <_dtoa_r+0x2b4>)
 800d294:	f001 fc4e 	bl	800eb34 <__assert_func>
 800d298:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d29c:	6007      	str	r7, [r0, #0]
 800d29e:	60c7      	str	r7, [r0, #12]
 800d2a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d2a4:	6819      	ldr	r1, [r3, #0]
 800d2a6:	b159      	cbz	r1, 800d2c0 <_dtoa_r+0x60>
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	604a      	str	r2, [r1, #4]
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	4093      	lsls	r3, r2
 800d2b0:	608b      	str	r3, [r1, #8]
 800d2b2:	4648      	mov	r0, r9
 800d2b4:	f000 fe72 	bl	800df9c <_Bfree>
 800d2b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	601a      	str	r2, [r3, #0]
 800d2c0:	1e2b      	subs	r3, r5, #0
 800d2c2:	bfbb      	ittet	lt
 800d2c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d2c8:	9303      	strlt	r3, [sp, #12]
 800d2ca:	2300      	movge	r3, #0
 800d2cc:	2201      	movlt	r2, #1
 800d2ce:	bfac      	ite	ge
 800d2d0:	6033      	strge	r3, [r6, #0]
 800d2d2:	6032      	strlt	r2, [r6, #0]
 800d2d4:	4b90      	ldr	r3, [pc, #576]	@ (800d518 <_dtoa_r+0x2b8>)
 800d2d6:	9e03      	ldr	r6, [sp, #12]
 800d2d8:	43b3      	bics	r3, r6
 800d2da:	d110      	bne.n	800d2fe <_dtoa_r+0x9e>
 800d2dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2de:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d2e2:	6013      	str	r3, [r2, #0]
 800d2e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d2e8:	4323      	orrs	r3, r4
 800d2ea:	f000 84e6 	beq.w	800dcba <_dtoa_r+0xa5a>
 800d2ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d2f0:	4f8a      	ldr	r7, [pc, #552]	@ (800d51c <_dtoa_r+0x2bc>)
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f000 84e8 	beq.w	800dcc8 <_dtoa_r+0xa68>
 800d2f8:	1cfb      	adds	r3, r7, #3
 800d2fa:	f000 bce3 	b.w	800dcc4 <_dtoa_r+0xa64>
 800d2fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d302:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d30a:	d10a      	bne.n	800d322 <_dtoa_r+0xc2>
 800d30c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d30e:	2301      	movs	r3, #1
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d314:	b113      	cbz	r3, 800d31c <_dtoa_r+0xbc>
 800d316:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d318:	4b81      	ldr	r3, [pc, #516]	@ (800d520 <_dtoa_r+0x2c0>)
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	4f81      	ldr	r7, [pc, #516]	@ (800d524 <_dtoa_r+0x2c4>)
 800d31e:	f000 bcd3 	b.w	800dcc8 <_dtoa_r+0xa68>
 800d322:	aa0e      	add	r2, sp, #56	@ 0x38
 800d324:	a90f      	add	r1, sp, #60	@ 0x3c
 800d326:	4648      	mov	r0, r9
 800d328:	eeb0 0b48 	vmov.f64	d0, d8
 800d32c:	f001 f918 	bl	800e560 <__d2b>
 800d330:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d334:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d336:	9001      	str	r0, [sp, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d045      	beq.n	800d3c8 <_dtoa_r+0x168>
 800d33c:	eeb0 7b48 	vmov.f64	d7, d8
 800d340:	ee18 1a90 	vmov	r1, s17
 800d344:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d348:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d34c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d350:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d354:	2500      	movs	r5, #0
 800d356:	ee07 1a90 	vmov	s15, r1
 800d35a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d35e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d4f8 <_dtoa_r+0x298>
 800d362:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d366:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d500 <_dtoa_r+0x2a0>
 800d36a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d36e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d508 <_dtoa_r+0x2a8>
 800d372:	ee07 3a90 	vmov	s15, r3
 800d376:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d37a:	eeb0 7b46 	vmov.f64	d7, d6
 800d37e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d382:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d386:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38e:	ee16 8a90 	vmov	r8, s13
 800d392:	d508      	bpl.n	800d3a6 <_dtoa_r+0x146>
 800d394:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d398:	eeb4 6b47 	vcmp.f64	d6, d7
 800d39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a0:	bf18      	it	ne
 800d3a2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d3a6:	f1b8 0f16 	cmp.w	r8, #22
 800d3aa:	d82b      	bhi.n	800d404 <_dtoa_r+0x1a4>
 800d3ac:	495e      	ldr	r1, [pc, #376]	@ (800d528 <_dtoa_r+0x2c8>)
 800d3ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d3b2:	ed91 7b00 	vldr	d7, [r1]
 800d3b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3be:	d501      	bpl.n	800d3c4 <_dtoa_r+0x164>
 800d3c0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	e01e      	b.n	800d406 <_dtoa_r+0x1a6>
 800d3c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ca:	4413      	add	r3, r2
 800d3cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d3d0:	2920      	cmp	r1, #32
 800d3d2:	bfc1      	itttt	gt
 800d3d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d3d8:	408e      	lslgt	r6, r1
 800d3da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d3de:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d3e2:	bfd6      	itet	le
 800d3e4:	f1c1 0120 	rsble	r1, r1, #32
 800d3e8:	4331      	orrgt	r1, r6
 800d3ea:	fa04 f101 	lslle.w	r1, r4, r1
 800d3ee:	ee07 1a90 	vmov	s15, r1
 800d3f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d3f6:	3b01      	subs	r3, #1
 800d3f8:	ee17 1a90 	vmov	r1, s15
 800d3fc:	2501      	movs	r5, #1
 800d3fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d402:	e7a8      	b.n	800d356 <_dtoa_r+0xf6>
 800d404:	2101      	movs	r1, #1
 800d406:	1ad2      	subs	r2, r2, r3
 800d408:	1e53      	subs	r3, r2, #1
 800d40a:	9306      	str	r3, [sp, #24]
 800d40c:	bf45      	ittet	mi
 800d40e:	f1c2 0301 	rsbmi	r3, r2, #1
 800d412:	9304      	strmi	r3, [sp, #16]
 800d414:	2300      	movpl	r3, #0
 800d416:	2300      	movmi	r3, #0
 800d418:	bf4c      	ite	mi
 800d41a:	9306      	strmi	r3, [sp, #24]
 800d41c:	9304      	strpl	r3, [sp, #16]
 800d41e:	f1b8 0f00 	cmp.w	r8, #0
 800d422:	910c      	str	r1, [sp, #48]	@ 0x30
 800d424:	db18      	blt.n	800d458 <_dtoa_r+0x1f8>
 800d426:	9b06      	ldr	r3, [sp, #24]
 800d428:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d42c:	4443      	add	r3, r8
 800d42e:	9306      	str	r3, [sp, #24]
 800d430:	2300      	movs	r3, #0
 800d432:	9a07      	ldr	r2, [sp, #28]
 800d434:	2a09      	cmp	r2, #9
 800d436:	d845      	bhi.n	800d4c4 <_dtoa_r+0x264>
 800d438:	2a05      	cmp	r2, #5
 800d43a:	bfc4      	itt	gt
 800d43c:	3a04      	subgt	r2, #4
 800d43e:	9207      	strgt	r2, [sp, #28]
 800d440:	9a07      	ldr	r2, [sp, #28]
 800d442:	f1a2 0202 	sub.w	r2, r2, #2
 800d446:	bfcc      	ite	gt
 800d448:	2400      	movgt	r4, #0
 800d44a:	2401      	movle	r4, #1
 800d44c:	2a03      	cmp	r2, #3
 800d44e:	d844      	bhi.n	800d4da <_dtoa_r+0x27a>
 800d450:	e8df f002 	tbb	[pc, r2]
 800d454:	0b173634 	.word	0x0b173634
 800d458:	9b04      	ldr	r3, [sp, #16]
 800d45a:	2200      	movs	r2, #0
 800d45c:	eba3 0308 	sub.w	r3, r3, r8
 800d460:	9304      	str	r3, [sp, #16]
 800d462:	920a      	str	r2, [sp, #40]	@ 0x28
 800d464:	f1c8 0300 	rsb	r3, r8, #0
 800d468:	e7e3      	b.n	800d432 <_dtoa_r+0x1d2>
 800d46a:	2201      	movs	r2, #1
 800d46c:	9208      	str	r2, [sp, #32]
 800d46e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d470:	eb08 0b02 	add.w	fp, r8, r2
 800d474:	f10b 0a01 	add.w	sl, fp, #1
 800d478:	4652      	mov	r2, sl
 800d47a:	2a01      	cmp	r2, #1
 800d47c:	bfb8      	it	lt
 800d47e:	2201      	movlt	r2, #1
 800d480:	e006      	b.n	800d490 <_dtoa_r+0x230>
 800d482:	2201      	movs	r2, #1
 800d484:	9208      	str	r2, [sp, #32]
 800d486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d488:	2a00      	cmp	r2, #0
 800d48a:	dd29      	ble.n	800d4e0 <_dtoa_r+0x280>
 800d48c:	4693      	mov	fp, r2
 800d48e:	4692      	mov	sl, r2
 800d490:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d494:	2100      	movs	r1, #0
 800d496:	2004      	movs	r0, #4
 800d498:	f100 0614 	add.w	r6, r0, #20
 800d49c:	4296      	cmp	r6, r2
 800d49e:	d926      	bls.n	800d4ee <_dtoa_r+0x28e>
 800d4a0:	6079      	str	r1, [r7, #4]
 800d4a2:	4648      	mov	r0, r9
 800d4a4:	9305      	str	r3, [sp, #20]
 800d4a6:	f000 fd39 	bl	800df1c <_Balloc>
 800d4aa:	9b05      	ldr	r3, [sp, #20]
 800d4ac:	4607      	mov	r7, r0
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d13e      	bne.n	800d530 <_dtoa_r+0x2d0>
 800d4b2:	4b1e      	ldr	r3, [pc, #120]	@ (800d52c <_dtoa_r+0x2cc>)
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d4ba:	e6ea      	b.n	800d292 <_dtoa_r+0x32>
 800d4bc:	2200      	movs	r2, #0
 800d4be:	e7e1      	b.n	800d484 <_dtoa_r+0x224>
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	e7d3      	b.n	800d46c <_dtoa_r+0x20c>
 800d4c4:	2401      	movs	r4, #1
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d4cc:	f04f 3bff 	mov.w	fp, #4294967295
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	46da      	mov	sl, fp
 800d4d4:	2212      	movs	r2, #18
 800d4d6:	9109      	str	r1, [sp, #36]	@ 0x24
 800d4d8:	e7da      	b.n	800d490 <_dtoa_r+0x230>
 800d4da:	2201      	movs	r2, #1
 800d4dc:	9208      	str	r2, [sp, #32]
 800d4de:	e7f5      	b.n	800d4cc <_dtoa_r+0x26c>
 800d4e0:	f04f 0b01 	mov.w	fp, #1
 800d4e4:	46da      	mov	sl, fp
 800d4e6:	465a      	mov	r2, fp
 800d4e8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d4ec:	e7d0      	b.n	800d490 <_dtoa_r+0x230>
 800d4ee:	3101      	adds	r1, #1
 800d4f0:	0040      	lsls	r0, r0, #1
 800d4f2:	e7d1      	b.n	800d498 <_dtoa_r+0x238>
 800d4f4:	f3af 8000 	nop.w
 800d4f8:	636f4361 	.word	0x636f4361
 800d4fc:	3fd287a7 	.word	0x3fd287a7
 800d500:	8b60c8b3 	.word	0x8b60c8b3
 800d504:	3fc68a28 	.word	0x3fc68a28
 800d508:	509f79fb 	.word	0x509f79fb
 800d50c:	3fd34413 	.word	0x3fd34413
 800d510:	0800ef6d 	.word	0x0800ef6d
 800d514:	0800ef84 	.word	0x0800ef84
 800d518:	7ff00000 	.word	0x7ff00000
 800d51c:	0800ef69 	.word	0x0800ef69
 800d520:	0800ef3d 	.word	0x0800ef3d
 800d524:	0800ef3c 	.word	0x0800ef3c
 800d528:	0800f0d8 	.word	0x0800f0d8
 800d52c:	0800efdc 	.word	0x0800efdc
 800d530:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d534:	f1ba 0f0e 	cmp.w	sl, #14
 800d538:	6010      	str	r0, [r2, #0]
 800d53a:	d86e      	bhi.n	800d61a <_dtoa_r+0x3ba>
 800d53c:	2c00      	cmp	r4, #0
 800d53e:	d06c      	beq.n	800d61a <_dtoa_r+0x3ba>
 800d540:	f1b8 0f00 	cmp.w	r8, #0
 800d544:	f340 80b4 	ble.w	800d6b0 <_dtoa_r+0x450>
 800d548:	4ac8      	ldr	r2, [pc, #800]	@ (800d86c <_dtoa_r+0x60c>)
 800d54a:	f008 010f 	and.w	r1, r8, #15
 800d54e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d552:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d556:	ed92 7b00 	vldr	d7, [r2]
 800d55a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d55e:	f000 809b 	beq.w	800d698 <_dtoa_r+0x438>
 800d562:	4ac3      	ldr	r2, [pc, #780]	@ (800d870 <_dtoa_r+0x610>)
 800d564:	ed92 6b08 	vldr	d6, [r2, #32]
 800d568:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d56c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d570:	f001 010f 	and.w	r1, r1, #15
 800d574:	2203      	movs	r2, #3
 800d576:	48be      	ldr	r0, [pc, #760]	@ (800d870 <_dtoa_r+0x610>)
 800d578:	2900      	cmp	r1, #0
 800d57a:	f040 808f 	bne.w	800d69c <_dtoa_r+0x43c>
 800d57e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d582:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d586:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d58a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d58c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d590:	2900      	cmp	r1, #0
 800d592:	f000 80b3 	beq.w	800d6fc <_dtoa_r+0x49c>
 800d596:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d59a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a2:	f140 80ab 	bpl.w	800d6fc <_dtoa_r+0x49c>
 800d5a6:	f1ba 0f00 	cmp.w	sl, #0
 800d5aa:	f000 80a7 	beq.w	800d6fc <_dtoa_r+0x49c>
 800d5ae:	f1bb 0f00 	cmp.w	fp, #0
 800d5b2:	dd30      	ble.n	800d616 <_dtoa_r+0x3b6>
 800d5b4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d5b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d5bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d5c0:	f108 31ff 	add.w	r1, r8, #4294967295
 800d5c4:	9105      	str	r1, [sp, #20]
 800d5c6:	3201      	adds	r2, #1
 800d5c8:	465c      	mov	r4, fp
 800d5ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d5ce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d5d2:	ee07 2a90 	vmov	s15, r2
 800d5d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d5da:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d5de:	ee15 2a90 	vmov	r2, s11
 800d5e2:	ec51 0b15 	vmov	r0, r1, d5
 800d5e6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d5ea:	2c00      	cmp	r4, #0
 800d5ec:	f040 808a 	bne.w	800d704 <_dtoa_r+0x4a4>
 800d5f0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d5f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d5f8:	ec41 0b17 	vmov	d7, r0, r1
 800d5fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d604:	f300 826a 	bgt.w	800dadc <_dtoa_r+0x87c>
 800d608:	eeb1 7b47 	vneg.f64	d7, d7
 800d60c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d614:	d423      	bmi.n	800d65e <_dtoa_r+0x3fe>
 800d616:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d61a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d61c:	2a00      	cmp	r2, #0
 800d61e:	f2c0 8129 	blt.w	800d874 <_dtoa_r+0x614>
 800d622:	f1b8 0f0e 	cmp.w	r8, #14
 800d626:	f300 8125 	bgt.w	800d874 <_dtoa_r+0x614>
 800d62a:	4b90      	ldr	r3, [pc, #576]	@ (800d86c <_dtoa_r+0x60c>)
 800d62c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d630:	ed93 6b00 	vldr	d6, [r3]
 800d634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d636:	2b00      	cmp	r3, #0
 800d638:	f280 80c8 	bge.w	800d7cc <_dtoa_r+0x56c>
 800d63c:	f1ba 0f00 	cmp.w	sl, #0
 800d640:	f300 80c4 	bgt.w	800d7cc <_dtoa_r+0x56c>
 800d644:	d10b      	bne.n	800d65e <_dtoa_r+0x3fe>
 800d646:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d64a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d64e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d652:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65a:	f2c0 823c 	blt.w	800dad6 <_dtoa_r+0x876>
 800d65e:	2400      	movs	r4, #0
 800d660:	4625      	mov	r5, r4
 800d662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d664:	43db      	mvns	r3, r3
 800d666:	9305      	str	r3, [sp, #20]
 800d668:	463e      	mov	r6, r7
 800d66a:	f04f 0800 	mov.w	r8, #0
 800d66e:	4621      	mov	r1, r4
 800d670:	4648      	mov	r0, r9
 800d672:	f000 fc93 	bl	800df9c <_Bfree>
 800d676:	2d00      	cmp	r5, #0
 800d678:	f000 80a2 	beq.w	800d7c0 <_dtoa_r+0x560>
 800d67c:	f1b8 0f00 	cmp.w	r8, #0
 800d680:	d005      	beq.n	800d68e <_dtoa_r+0x42e>
 800d682:	45a8      	cmp	r8, r5
 800d684:	d003      	beq.n	800d68e <_dtoa_r+0x42e>
 800d686:	4641      	mov	r1, r8
 800d688:	4648      	mov	r0, r9
 800d68a:	f000 fc87 	bl	800df9c <_Bfree>
 800d68e:	4629      	mov	r1, r5
 800d690:	4648      	mov	r0, r9
 800d692:	f000 fc83 	bl	800df9c <_Bfree>
 800d696:	e093      	b.n	800d7c0 <_dtoa_r+0x560>
 800d698:	2202      	movs	r2, #2
 800d69a:	e76c      	b.n	800d576 <_dtoa_r+0x316>
 800d69c:	07cc      	lsls	r4, r1, #31
 800d69e:	d504      	bpl.n	800d6aa <_dtoa_r+0x44a>
 800d6a0:	ed90 6b00 	vldr	d6, [r0]
 800d6a4:	3201      	adds	r2, #1
 800d6a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6aa:	1049      	asrs	r1, r1, #1
 800d6ac:	3008      	adds	r0, #8
 800d6ae:	e763      	b.n	800d578 <_dtoa_r+0x318>
 800d6b0:	d022      	beq.n	800d6f8 <_dtoa_r+0x498>
 800d6b2:	f1c8 0100 	rsb	r1, r8, #0
 800d6b6:	4a6d      	ldr	r2, [pc, #436]	@ (800d86c <_dtoa_r+0x60c>)
 800d6b8:	f001 000f 	and.w	r0, r1, #15
 800d6bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d6c0:	ed92 7b00 	vldr	d7, [r2]
 800d6c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d6c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6cc:	4868      	ldr	r0, [pc, #416]	@ (800d870 <_dtoa_r+0x610>)
 800d6ce:	1109      	asrs	r1, r1, #4
 800d6d0:	2400      	movs	r4, #0
 800d6d2:	2202      	movs	r2, #2
 800d6d4:	b929      	cbnz	r1, 800d6e2 <_dtoa_r+0x482>
 800d6d6:	2c00      	cmp	r4, #0
 800d6d8:	f43f af57 	beq.w	800d58a <_dtoa_r+0x32a>
 800d6dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6e0:	e753      	b.n	800d58a <_dtoa_r+0x32a>
 800d6e2:	07ce      	lsls	r6, r1, #31
 800d6e4:	d505      	bpl.n	800d6f2 <_dtoa_r+0x492>
 800d6e6:	ed90 6b00 	vldr	d6, [r0]
 800d6ea:	3201      	adds	r2, #1
 800d6ec:	2401      	movs	r4, #1
 800d6ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6f2:	1049      	asrs	r1, r1, #1
 800d6f4:	3008      	adds	r0, #8
 800d6f6:	e7ed      	b.n	800d6d4 <_dtoa_r+0x474>
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	e746      	b.n	800d58a <_dtoa_r+0x32a>
 800d6fc:	f8cd 8014 	str.w	r8, [sp, #20]
 800d700:	4654      	mov	r4, sl
 800d702:	e762      	b.n	800d5ca <_dtoa_r+0x36a>
 800d704:	4a59      	ldr	r2, [pc, #356]	@ (800d86c <_dtoa_r+0x60c>)
 800d706:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d70a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d70e:	9a08      	ldr	r2, [sp, #32]
 800d710:	ec41 0b17 	vmov	d7, r0, r1
 800d714:	443c      	add	r4, r7
 800d716:	b34a      	cbz	r2, 800d76c <_dtoa_r+0x50c>
 800d718:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d71c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d720:	463e      	mov	r6, r7
 800d722:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d726:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d72a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d72e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d732:	ee14 2a90 	vmov	r2, s9
 800d736:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d73a:	3230      	adds	r2, #48	@ 0x30
 800d73c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d740:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d748:	f806 2b01 	strb.w	r2, [r6], #1
 800d74c:	d438      	bmi.n	800d7c0 <_dtoa_r+0x560>
 800d74e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d752:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d75a:	d46e      	bmi.n	800d83a <_dtoa_r+0x5da>
 800d75c:	42a6      	cmp	r6, r4
 800d75e:	f43f af5a 	beq.w	800d616 <_dtoa_r+0x3b6>
 800d762:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d766:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d76a:	e7e0      	b.n	800d72e <_dtoa_r+0x4ce>
 800d76c:	4621      	mov	r1, r4
 800d76e:	463e      	mov	r6, r7
 800d770:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d774:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d778:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d77c:	ee14 2a90 	vmov	r2, s9
 800d780:	3230      	adds	r2, #48	@ 0x30
 800d782:	f806 2b01 	strb.w	r2, [r6], #1
 800d786:	42a6      	cmp	r6, r4
 800d788:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d78c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d790:	d119      	bne.n	800d7c6 <_dtoa_r+0x566>
 800d792:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d796:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d79a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a2:	dc4a      	bgt.n	800d83a <_dtoa_r+0x5da>
 800d7a4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d7a8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b0:	f57f af31 	bpl.w	800d616 <_dtoa_r+0x3b6>
 800d7b4:	460e      	mov	r6, r1
 800d7b6:	3901      	subs	r1, #1
 800d7b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d7bc:	2b30      	cmp	r3, #48	@ 0x30
 800d7be:	d0f9      	beq.n	800d7b4 <_dtoa_r+0x554>
 800d7c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d7c4:	e027      	b.n	800d816 <_dtoa_r+0x5b6>
 800d7c6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d7ca:	e7d5      	b.n	800d778 <_dtoa_r+0x518>
 800d7cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7d0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d7d4:	463e      	mov	r6, r7
 800d7d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d7da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d7de:	ee15 3a10 	vmov	r3, s10
 800d7e2:	3330      	adds	r3, #48	@ 0x30
 800d7e4:	f806 3b01 	strb.w	r3, [r6], #1
 800d7e8:	1bf3      	subs	r3, r6, r7
 800d7ea:	459a      	cmp	sl, r3
 800d7ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d7f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d7f4:	d132      	bne.n	800d85c <_dtoa_r+0x5fc>
 800d7f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d7fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d802:	dc18      	bgt.n	800d836 <_dtoa_r+0x5d6>
 800d804:	eeb4 7b46 	vcmp.f64	d7, d6
 800d808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d80c:	d103      	bne.n	800d816 <_dtoa_r+0x5b6>
 800d80e:	ee15 3a10 	vmov	r3, s10
 800d812:	07db      	lsls	r3, r3, #31
 800d814:	d40f      	bmi.n	800d836 <_dtoa_r+0x5d6>
 800d816:	9901      	ldr	r1, [sp, #4]
 800d818:	4648      	mov	r0, r9
 800d81a:	f000 fbbf 	bl	800df9c <_Bfree>
 800d81e:	2300      	movs	r3, #0
 800d820:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d822:	7033      	strb	r3, [r6, #0]
 800d824:	f108 0301 	add.w	r3, r8, #1
 800d828:	6013      	str	r3, [r2, #0]
 800d82a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f000 824b 	beq.w	800dcc8 <_dtoa_r+0xa68>
 800d832:	601e      	str	r6, [r3, #0]
 800d834:	e248      	b.n	800dcc8 <_dtoa_r+0xa68>
 800d836:	f8cd 8014 	str.w	r8, [sp, #20]
 800d83a:	4633      	mov	r3, r6
 800d83c:	461e      	mov	r6, r3
 800d83e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d842:	2a39      	cmp	r2, #57	@ 0x39
 800d844:	d106      	bne.n	800d854 <_dtoa_r+0x5f4>
 800d846:	429f      	cmp	r7, r3
 800d848:	d1f8      	bne.n	800d83c <_dtoa_r+0x5dc>
 800d84a:	9a05      	ldr	r2, [sp, #20]
 800d84c:	3201      	adds	r2, #1
 800d84e:	9205      	str	r2, [sp, #20]
 800d850:	2230      	movs	r2, #48	@ 0x30
 800d852:	703a      	strb	r2, [r7, #0]
 800d854:	781a      	ldrb	r2, [r3, #0]
 800d856:	3201      	adds	r2, #1
 800d858:	701a      	strb	r2, [r3, #0]
 800d85a:	e7b1      	b.n	800d7c0 <_dtoa_r+0x560>
 800d85c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d860:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d868:	d1b5      	bne.n	800d7d6 <_dtoa_r+0x576>
 800d86a:	e7d4      	b.n	800d816 <_dtoa_r+0x5b6>
 800d86c:	0800f0d8 	.word	0x0800f0d8
 800d870:	0800f0b0 	.word	0x0800f0b0
 800d874:	9908      	ldr	r1, [sp, #32]
 800d876:	2900      	cmp	r1, #0
 800d878:	f000 80e9 	beq.w	800da4e <_dtoa_r+0x7ee>
 800d87c:	9907      	ldr	r1, [sp, #28]
 800d87e:	2901      	cmp	r1, #1
 800d880:	f300 80cb 	bgt.w	800da1a <_dtoa_r+0x7ba>
 800d884:	2d00      	cmp	r5, #0
 800d886:	f000 80c4 	beq.w	800da12 <_dtoa_r+0x7b2>
 800d88a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d88e:	9e04      	ldr	r6, [sp, #16]
 800d890:	461c      	mov	r4, r3
 800d892:	9305      	str	r3, [sp, #20]
 800d894:	9b04      	ldr	r3, [sp, #16]
 800d896:	4413      	add	r3, r2
 800d898:	9304      	str	r3, [sp, #16]
 800d89a:	9b06      	ldr	r3, [sp, #24]
 800d89c:	2101      	movs	r1, #1
 800d89e:	4413      	add	r3, r2
 800d8a0:	4648      	mov	r0, r9
 800d8a2:	9306      	str	r3, [sp, #24]
 800d8a4:	f000 fc2e 	bl	800e104 <__i2b>
 800d8a8:	9b05      	ldr	r3, [sp, #20]
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	b166      	cbz	r6, 800d8c8 <_dtoa_r+0x668>
 800d8ae:	9a06      	ldr	r2, [sp, #24]
 800d8b0:	2a00      	cmp	r2, #0
 800d8b2:	dd09      	ble.n	800d8c8 <_dtoa_r+0x668>
 800d8b4:	42b2      	cmp	r2, r6
 800d8b6:	9904      	ldr	r1, [sp, #16]
 800d8b8:	bfa8      	it	ge
 800d8ba:	4632      	movge	r2, r6
 800d8bc:	1a89      	subs	r1, r1, r2
 800d8be:	9104      	str	r1, [sp, #16]
 800d8c0:	9906      	ldr	r1, [sp, #24]
 800d8c2:	1ab6      	subs	r6, r6, r2
 800d8c4:	1a8a      	subs	r2, r1, r2
 800d8c6:	9206      	str	r2, [sp, #24]
 800d8c8:	b30b      	cbz	r3, 800d90e <_dtoa_r+0x6ae>
 800d8ca:	9a08      	ldr	r2, [sp, #32]
 800d8cc:	2a00      	cmp	r2, #0
 800d8ce:	f000 80c5 	beq.w	800da5c <_dtoa_r+0x7fc>
 800d8d2:	2c00      	cmp	r4, #0
 800d8d4:	f000 80bf 	beq.w	800da56 <_dtoa_r+0x7f6>
 800d8d8:	4629      	mov	r1, r5
 800d8da:	4622      	mov	r2, r4
 800d8dc:	4648      	mov	r0, r9
 800d8de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8e0:	f000 fcc8 	bl	800e274 <__pow5mult>
 800d8e4:	9a01      	ldr	r2, [sp, #4]
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	4648      	mov	r0, r9
 800d8ec:	f000 fc20 	bl	800e130 <__multiply>
 800d8f0:	9901      	ldr	r1, [sp, #4]
 800d8f2:	9005      	str	r0, [sp, #20]
 800d8f4:	4648      	mov	r0, r9
 800d8f6:	f000 fb51 	bl	800df9c <_Bfree>
 800d8fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8fc:	1b1b      	subs	r3, r3, r4
 800d8fe:	f000 80b0 	beq.w	800da62 <_dtoa_r+0x802>
 800d902:	9905      	ldr	r1, [sp, #20]
 800d904:	461a      	mov	r2, r3
 800d906:	4648      	mov	r0, r9
 800d908:	f000 fcb4 	bl	800e274 <__pow5mult>
 800d90c:	9001      	str	r0, [sp, #4]
 800d90e:	2101      	movs	r1, #1
 800d910:	4648      	mov	r0, r9
 800d912:	f000 fbf7 	bl	800e104 <__i2b>
 800d916:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d918:	4604      	mov	r4, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f000 81da 	beq.w	800dcd4 <_dtoa_r+0xa74>
 800d920:	461a      	mov	r2, r3
 800d922:	4601      	mov	r1, r0
 800d924:	4648      	mov	r0, r9
 800d926:	f000 fca5 	bl	800e274 <__pow5mult>
 800d92a:	9b07      	ldr	r3, [sp, #28]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	4604      	mov	r4, r0
 800d930:	f300 80a0 	bgt.w	800da74 <_dtoa_r+0x814>
 800d934:	9b02      	ldr	r3, [sp, #8]
 800d936:	2b00      	cmp	r3, #0
 800d938:	f040 8096 	bne.w	800da68 <_dtoa_r+0x808>
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d942:	2a00      	cmp	r2, #0
 800d944:	f040 8092 	bne.w	800da6c <_dtoa_r+0x80c>
 800d948:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d94c:	0d12      	lsrs	r2, r2, #20
 800d94e:	0512      	lsls	r2, r2, #20
 800d950:	2a00      	cmp	r2, #0
 800d952:	f000 808d 	beq.w	800da70 <_dtoa_r+0x810>
 800d956:	9b04      	ldr	r3, [sp, #16]
 800d958:	3301      	adds	r3, #1
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	9b06      	ldr	r3, [sp, #24]
 800d95e:	3301      	adds	r3, #1
 800d960:	9306      	str	r3, [sp, #24]
 800d962:	2301      	movs	r3, #1
 800d964:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d966:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f000 81b9 	beq.w	800dce0 <_dtoa_r+0xa80>
 800d96e:	6922      	ldr	r2, [r4, #16]
 800d970:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d974:	6910      	ldr	r0, [r2, #16]
 800d976:	f000 fb79 	bl	800e06c <__hi0bits>
 800d97a:	f1c0 0020 	rsb	r0, r0, #32
 800d97e:	9b06      	ldr	r3, [sp, #24]
 800d980:	4418      	add	r0, r3
 800d982:	f010 001f 	ands.w	r0, r0, #31
 800d986:	f000 8081 	beq.w	800da8c <_dtoa_r+0x82c>
 800d98a:	f1c0 0220 	rsb	r2, r0, #32
 800d98e:	2a04      	cmp	r2, #4
 800d990:	dd73      	ble.n	800da7a <_dtoa_r+0x81a>
 800d992:	9b04      	ldr	r3, [sp, #16]
 800d994:	f1c0 001c 	rsb	r0, r0, #28
 800d998:	4403      	add	r3, r0
 800d99a:	9304      	str	r3, [sp, #16]
 800d99c:	9b06      	ldr	r3, [sp, #24]
 800d99e:	4406      	add	r6, r0
 800d9a0:	4403      	add	r3, r0
 800d9a2:	9306      	str	r3, [sp, #24]
 800d9a4:	9b04      	ldr	r3, [sp, #16]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	dd05      	ble.n	800d9b6 <_dtoa_r+0x756>
 800d9aa:	9901      	ldr	r1, [sp, #4]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	4648      	mov	r0, r9
 800d9b0:	f000 fcba 	bl	800e328 <__lshift>
 800d9b4:	9001      	str	r0, [sp, #4]
 800d9b6:	9b06      	ldr	r3, [sp, #24]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	dd05      	ble.n	800d9c8 <_dtoa_r+0x768>
 800d9bc:	4621      	mov	r1, r4
 800d9be:	461a      	mov	r2, r3
 800d9c0:	4648      	mov	r0, r9
 800d9c2:	f000 fcb1 	bl	800e328 <__lshift>
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d060      	beq.n	800da90 <_dtoa_r+0x830>
 800d9ce:	9801      	ldr	r0, [sp, #4]
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	f000 fd15 	bl	800e400 <__mcmp>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	da5a      	bge.n	800da90 <_dtoa_r+0x830>
 800d9da:	f108 33ff 	add.w	r3, r8, #4294967295
 800d9de:	9305      	str	r3, [sp, #20]
 800d9e0:	9901      	ldr	r1, [sp, #4]
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	220a      	movs	r2, #10
 800d9e6:	4648      	mov	r0, r9
 800d9e8:	f000 fafa 	bl	800dfe0 <__multadd>
 800d9ec:	9b08      	ldr	r3, [sp, #32]
 800d9ee:	9001      	str	r0, [sp, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f000 8177 	beq.w	800dce4 <_dtoa_r+0xa84>
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	220a      	movs	r2, #10
 800d9fc:	4648      	mov	r0, r9
 800d9fe:	f000 faef 	bl	800dfe0 <__multadd>
 800da02:	f1bb 0f00 	cmp.w	fp, #0
 800da06:	4605      	mov	r5, r0
 800da08:	dc6e      	bgt.n	800dae8 <_dtoa_r+0x888>
 800da0a:	9b07      	ldr	r3, [sp, #28]
 800da0c:	2b02      	cmp	r3, #2
 800da0e:	dc48      	bgt.n	800daa2 <_dtoa_r+0x842>
 800da10:	e06a      	b.n	800dae8 <_dtoa_r+0x888>
 800da12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800da18:	e739      	b.n	800d88e <_dtoa_r+0x62e>
 800da1a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800da1e:	42a3      	cmp	r3, r4
 800da20:	db07      	blt.n	800da32 <_dtoa_r+0x7d2>
 800da22:	f1ba 0f00 	cmp.w	sl, #0
 800da26:	eba3 0404 	sub.w	r4, r3, r4
 800da2a:	db0b      	blt.n	800da44 <_dtoa_r+0x7e4>
 800da2c:	9e04      	ldr	r6, [sp, #16]
 800da2e:	4652      	mov	r2, sl
 800da30:	e72f      	b.n	800d892 <_dtoa_r+0x632>
 800da32:	1ae2      	subs	r2, r4, r3
 800da34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da36:	9e04      	ldr	r6, [sp, #16]
 800da38:	4413      	add	r3, r2
 800da3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800da3c:	4652      	mov	r2, sl
 800da3e:	4623      	mov	r3, r4
 800da40:	2400      	movs	r4, #0
 800da42:	e726      	b.n	800d892 <_dtoa_r+0x632>
 800da44:	9a04      	ldr	r2, [sp, #16]
 800da46:	eba2 060a 	sub.w	r6, r2, sl
 800da4a:	2200      	movs	r2, #0
 800da4c:	e721      	b.n	800d892 <_dtoa_r+0x632>
 800da4e:	9e04      	ldr	r6, [sp, #16]
 800da50:	9d08      	ldr	r5, [sp, #32]
 800da52:	461c      	mov	r4, r3
 800da54:	e72a      	b.n	800d8ac <_dtoa_r+0x64c>
 800da56:	9a01      	ldr	r2, [sp, #4]
 800da58:	9205      	str	r2, [sp, #20]
 800da5a:	e752      	b.n	800d902 <_dtoa_r+0x6a2>
 800da5c:	9901      	ldr	r1, [sp, #4]
 800da5e:	461a      	mov	r2, r3
 800da60:	e751      	b.n	800d906 <_dtoa_r+0x6a6>
 800da62:	9b05      	ldr	r3, [sp, #20]
 800da64:	9301      	str	r3, [sp, #4]
 800da66:	e752      	b.n	800d90e <_dtoa_r+0x6ae>
 800da68:	2300      	movs	r3, #0
 800da6a:	e77b      	b.n	800d964 <_dtoa_r+0x704>
 800da6c:	9b02      	ldr	r3, [sp, #8]
 800da6e:	e779      	b.n	800d964 <_dtoa_r+0x704>
 800da70:	920b      	str	r2, [sp, #44]	@ 0x2c
 800da72:	e778      	b.n	800d966 <_dtoa_r+0x706>
 800da74:	2300      	movs	r3, #0
 800da76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da78:	e779      	b.n	800d96e <_dtoa_r+0x70e>
 800da7a:	d093      	beq.n	800d9a4 <_dtoa_r+0x744>
 800da7c:	9b04      	ldr	r3, [sp, #16]
 800da7e:	321c      	adds	r2, #28
 800da80:	4413      	add	r3, r2
 800da82:	9304      	str	r3, [sp, #16]
 800da84:	9b06      	ldr	r3, [sp, #24]
 800da86:	4416      	add	r6, r2
 800da88:	4413      	add	r3, r2
 800da8a:	e78a      	b.n	800d9a2 <_dtoa_r+0x742>
 800da8c:	4602      	mov	r2, r0
 800da8e:	e7f5      	b.n	800da7c <_dtoa_r+0x81c>
 800da90:	f1ba 0f00 	cmp.w	sl, #0
 800da94:	f8cd 8014 	str.w	r8, [sp, #20]
 800da98:	46d3      	mov	fp, sl
 800da9a:	dc21      	bgt.n	800dae0 <_dtoa_r+0x880>
 800da9c:	9b07      	ldr	r3, [sp, #28]
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	dd1e      	ble.n	800dae0 <_dtoa_r+0x880>
 800daa2:	f1bb 0f00 	cmp.w	fp, #0
 800daa6:	f47f addc 	bne.w	800d662 <_dtoa_r+0x402>
 800daaa:	4621      	mov	r1, r4
 800daac:	465b      	mov	r3, fp
 800daae:	2205      	movs	r2, #5
 800dab0:	4648      	mov	r0, r9
 800dab2:	f000 fa95 	bl	800dfe0 <__multadd>
 800dab6:	4601      	mov	r1, r0
 800dab8:	4604      	mov	r4, r0
 800daba:	9801      	ldr	r0, [sp, #4]
 800dabc:	f000 fca0 	bl	800e400 <__mcmp>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	f77f adce 	ble.w	800d662 <_dtoa_r+0x402>
 800dac6:	463e      	mov	r6, r7
 800dac8:	2331      	movs	r3, #49	@ 0x31
 800daca:	f806 3b01 	strb.w	r3, [r6], #1
 800dace:	9b05      	ldr	r3, [sp, #20]
 800dad0:	3301      	adds	r3, #1
 800dad2:	9305      	str	r3, [sp, #20]
 800dad4:	e5c9      	b.n	800d66a <_dtoa_r+0x40a>
 800dad6:	f8cd 8014 	str.w	r8, [sp, #20]
 800dada:	4654      	mov	r4, sl
 800dadc:	4625      	mov	r5, r4
 800dade:	e7f2      	b.n	800dac6 <_dtoa_r+0x866>
 800dae0:	9b08      	ldr	r3, [sp, #32]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f000 8102 	beq.w	800dcec <_dtoa_r+0xa8c>
 800dae8:	2e00      	cmp	r6, #0
 800daea:	dd05      	ble.n	800daf8 <_dtoa_r+0x898>
 800daec:	4629      	mov	r1, r5
 800daee:	4632      	mov	r2, r6
 800daf0:	4648      	mov	r0, r9
 800daf2:	f000 fc19 	bl	800e328 <__lshift>
 800daf6:	4605      	mov	r5, r0
 800daf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d058      	beq.n	800dbb0 <_dtoa_r+0x950>
 800dafe:	6869      	ldr	r1, [r5, #4]
 800db00:	4648      	mov	r0, r9
 800db02:	f000 fa0b 	bl	800df1c <_Balloc>
 800db06:	4606      	mov	r6, r0
 800db08:	b928      	cbnz	r0, 800db16 <_dtoa_r+0x8b6>
 800db0a:	4b82      	ldr	r3, [pc, #520]	@ (800dd14 <_dtoa_r+0xab4>)
 800db0c:	4602      	mov	r2, r0
 800db0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800db12:	f7ff bbbe 	b.w	800d292 <_dtoa_r+0x32>
 800db16:	692a      	ldr	r2, [r5, #16]
 800db18:	3202      	adds	r2, #2
 800db1a:	0092      	lsls	r2, r2, #2
 800db1c:	f105 010c 	add.w	r1, r5, #12
 800db20:	300c      	adds	r0, #12
 800db22:	f7ff fb06 	bl	800d132 <memcpy>
 800db26:	2201      	movs	r2, #1
 800db28:	4631      	mov	r1, r6
 800db2a:	4648      	mov	r0, r9
 800db2c:	f000 fbfc 	bl	800e328 <__lshift>
 800db30:	1c7b      	adds	r3, r7, #1
 800db32:	9304      	str	r3, [sp, #16]
 800db34:	eb07 030b 	add.w	r3, r7, fp
 800db38:	9309      	str	r3, [sp, #36]	@ 0x24
 800db3a:	9b02      	ldr	r3, [sp, #8]
 800db3c:	f003 0301 	and.w	r3, r3, #1
 800db40:	46a8      	mov	r8, r5
 800db42:	9308      	str	r3, [sp, #32]
 800db44:	4605      	mov	r5, r0
 800db46:	9b04      	ldr	r3, [sp, #16]
 800db48:	9801      	ldr	r0, [sp, #4]
 800db4a:	4621      	mov	r1, r4
 800db4c:	f103 3bff 	add.w	fp, r3, #4294967295
 800db50:	f7ff fafd 	bl	800d14e <quorem>
 800db54:	4641      	mov	r1, r8
 800db56:	9002      	str	r0, [sp, #8]
 800db58:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800db5c:	9801      	ldr	r0, [sp, #4]
 800db5e:	f000 fc4f 	bl	800e400 <__mcmp>
 800db62:	462a      	mov	r2, r5
 800db64:	9006      	str	r0, [sp, #24]
 800db66:	4621      	mov	r1, r4
 800db68:	4648      	mov	r0, r9
 800db6a:	f000 fc65 	bl	800e438 <__mdiff>
 800db6e:	68c2      	ldr	r2, [r0, #12]
 800db70:	4606      	mov	r6, r0
 800db72:	b9fa      	cbnz	r2, 800dbb4 <_dtoa_r+0x954>
 800db74:	4601      	mov	r1, r0
 800db76:	9801      	ldr	r0, [sp, #4]
 800db78:	f000 fc42 	bl	800e400 <__mcmp>
 800db7c:	4602      	mov	r2, r0
 800db7e:	4631      	mov	r1, r6
 800db80:	4648      	mov	r0, r9
 800db82:	920a      	str	r2, [sp, #40]	@ 0x28
 800db84:	f000 fa0a 	bl	800df9c <_Bfree>
 800db88:	9b07      	ldr	r3, [sp, #28]
 800db8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db8c:	9e04      	ldr	r6, [sp, #16]
 800db8e:	ea42 0103 	orr.w	r1, r2, r3
 800db92:	9b08      	ldr	r3, [sp, #32]
 800db94:	4319      	orrs	r1, r3
 800db96:	d10f      	bne.n	800dbb8 <_dtoa_r+0x958>
 800db98:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800db9c:	d028      	beq.n	800dbf0 <_dtoa_r+0x990>
 800db9e:	9b06      	ldr	r3, [sp, #24]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	dd02      	ble.n	800dbaa <_dtoa_r+0x94a>
 800dba4:	9b02      	ldr	r3, [sp, #8]
 800dba6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800dbaa:	f88b a000 	strb.w	sl, [fp]
 800dbae:	e55e      	b.n	800d66e <_dtoa_r+0x40e>
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	e7bd      	b.n	800db30 <_dtoa_r+0x8d0>
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	e7e2      	b.n	800db7e <_dtoa_r+0x91e>
 800dbb8:	9b06      	ldr	r3, [sp, #24]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	db04      	blt.n	800dbc8 <_dtoa_r+0x968>
 800dbbe:	9907      	ldr	r1, [sp, #28]
 800dbc0:	430b      	orrs	r3, r1
 800dbc2:	9908      	ldr	r1, [sp, #32]
 800dbc4:	430b      	orrs	r3, r1
 800dbc6:	d120      	bne.n	800dc0a <_dtoa_r+0x9aa>
 800dbc8:	2a00      	cmp	r2, #0
 800dbca:	ddee      	ble.n	800dbaa <_dtoa_r+0x94a>
 800dbcc:	9901      	ldr	r1, [sp, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	4648      	mov	r0, r9
 800dbd2:	f000 fba9 	bl	800e328 <__lshift>
 800dbd6:	4621      	mov	r1, r4
 800dbd8:	9001      	str	r0, [sp, #4]
 800dbda:	f000 fc11 	bl	800e400 <__mcmp>
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	dc03      	bgt.n	800dbea <_dtoa_r+0x98a>
 800dbe2:	d1e2      	bne.n	800dbaa <_dtoa_r+0x94a>
 800dbe4:	f01a 0f01 	tst.w	sl, #1
 800dbe8:	d0df      	beq.n	800dbaa <_dtoa_r+0x94a>
 800dbea:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dbee:	d1d9      	bne.n	800dba4 <_dtoa_r+0x944>
 800dbf0:	2339      	movs	r3, #57	@ 0x39
 800dbf2:	f88b 3000 	strb.w	r3, [fp]
 800dbf6:	4633      	mov	r3, r6
 800dbf8:	461e      	mov	r6, r3
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc00:	2a39      	cmp	r2, #57	@ 0x39
 800dc02:	d052      	beq.n	800dcaa <_dtoa_r+0xa4a>
 800dc04:	3201      	adds	r2, #1
 800dc06:	701a      	strb	r2, [r3, #0]
 800dc08:	e531      	b.n	800d66e <_dtoa_r+0x40e>
 800dc0a:	2a00      	cmp	r2, #0
 800dc0c:	dd07      	ble.n	800dc1e <_dtoa_r+0x9be>
 800dc0e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800dc12:	d0ed      	beq.n	800dbf0 <_dtoa_r+0x990>
 800dc14:	f10a 0301 	add.w	r3, sl, #1
 800dc18:	f88b 3000 	strb.w	r3, [fp]
 800dc1c:	e527      	b.n	800d66e <_dtoa_r+0x40e>
 800dc1e:	9b04      	ldr	r3, [sp, #16]
 800dc20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc22:	f803 ac01 	strb.w	sl, [r3, #-1]
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d029      	beq.n	800dc7e <_dtoa_r+0xa1e>
 800dc2a:	9901      	ldr	r1, [sp, #4]
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	220a      	movs	r2, #10
 800dc30:	4648      	mov	r0, r9
 800dc32:	f000 f9d5 	bl	800dfe0 <__multadd>
 800dc36:	45a8      	cmp	r8, r5
 800dc38:	9001      	str	r0, [sp, #4]
 800dc3a:	f04f 0300 	mov.w	r3, #0
 800dc3e:	f04f 020a 	mov.w	r2, #10
 800dc42:	4641      	mov	r1, r8
 800dc44:	4648      	mov	r0, r9
 800dc46:	d107      	bne.n	800dc58 <_dtoa_r+0x9f8>
 800dc48:	f000 f9ca 	bl	800dfe0 <__multadd>
 800dc4c:	4680      	mov	r8, r0
 800dc4e:	4605      	mov	r5, r0
 800dc50:	9b04      	ldr	r3, [sp, #16]
 800dc52:	3301      	adds	r3, #1
 800dc54:	9304      	str	r3, [sp, #16]
 800dc56:	e776      	b.n	800db46 <_dtoa_r+0x8e6>
 800dc58:	f000 f9c2 	bl	800dfe0 <__multadd>
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	4680      	mov	r8, r0
 800dc60:	2300      	movs	r3, #0
 800dc62:	220a      	movs	r2, #10
 800dc64:	4648      	mov	r0, r9
 800dc66:	f000 f9bb 	bl	800dfe0 <__multadd>
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	e7f0      	b.n	800dc50 <_dtoa_r+0x9f0>
 800dc6e:	f1bb 0f00 	cmp.w	fp, #0
 800dc72:	bfcc      	ite	gt
 800dc74:	465e      	movgt	r6, fp
 800dc76:	2601      	movle	r6, #1
 800dc78:	443e      	add	r6, r7
 800dc7a:	f04f 0800 	mov.w	r8, #0
 800dc7e:	9901      	ldr	r1, [sp, #4]
 800dc80:	2201      	movs	r2, #1
 800dc82:	4648      	mov	r0, r9
 800dc84:	f000 fb50 	bl	800e328 <__lshift>
 800dc88:	4621      	mov	r1, r4
 800dc8a:	9001      	str	r0, [sp, #4]
 800dc8c:	f000 fbb8 	bl	800e400 <__mcmp>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	dcb0      	bgt.n	800dbf6 <_dtoa_r+0x996>
 800dc94:	d102      	bne.n	800dc9c <_dtoa_r+0xa3c>
 800dc96:	f01a 0f01 	tst.w	sl, #1
 800dc9a:	d1ac      	bne.n	800dbf6 <_dtoa_r+0x996>
 800dc9c:	4633      	mov	r3, r6
 800dc9e:	461e      	mov	r6, r3
 800dca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dca4:	2a30      	cmp	r2, #48	@ 0x30
 800dca6:	d0fa      	beq.n	800dc9e <_dtoa_r+0xa3e>
 800dca8:	e4e1      	b.n	800d66e <_dtoa_r+0x40e>
 800dcaa:	429f      	cmp	r7, r3
 800dcac:	d1a4      	bne.n	800dbf8 <_dtoa_r+0x998>
 800dcae:	9b05      	ldr	r3, [sp, #20]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	9305      	str	r3, [sp, #20]
 800dcb4:	2331      	movs	r3, #49	@ 0x31
 800dcb6:	703b      	strb	r3, [r7, #0]
 800dcb8:	e4d9      	b.n	800d66e <_dtoa_r+0x40e>
 800dcba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dcbc:	4f16      	ldr	r7, [pc, #88]	@ (800dd18 <_dtoa_r+0xab8>)
 800dcbe:	b11b      	cbz	r3, 800dcc8 <_dtoa_r+0xa68>
 800dcc0:	f107 0308 	add.w	r3, r7, #8
 800dcc4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800dcc6:	6013      	str	r3, [r2, #0]
 800dcc8:	4638      	mov	r0, r7
 800dcca:	b011      	add	sp, #68	@ 0x44
 800dccc:	ecbd 8b02 	vpop	{d8}
 800dcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd4:	9b07      	ldr	r3, [sp, #28]
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	f77f ae2c 	ble.w	800d934 <_dtoa_r+0x6d4>
 800dcdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcde:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dce0:	2001      	movs	r0, #1
 800dce2:	e64c      	b.n	800d97e <_dtoa_r+0x71e>
 800dce4:	f1bb 0f00 	cmp.w	fp, #0
 800dce8:	f77f aed8 	ble.w	800da9c <_dtoa_r+0x83c>
 800dcec:	463e      	mov	r6, r7
 800dcee:	9801      	ldr	r0, [sp, #4]
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	f7ff fa2c 	bl	800d14e <quorem>
 800dcf6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800dcfa:	f806 ab01 	strb.w	sl, [r6], #1
 800dcfe:	1bf2      	subs	r2, r6, r7
 800dd00:	4593      	cmp	fp, r2
 800dd02:	ddb4      	ble.n	800dc6e <_dtoa_r+0xa0e>
 800dd04:	9901      	ldr	r1, [sp, #4]
 800dd06:	2300      	movs	r3, #0
 800dd08:	220a      	movs	r2, #10
 800dd0a:	4648      	mov	r0, r9
 800dd0c:	f000 f968 	bl	800dfe0 <__multadd>
 800dd10:	9001      	str	r0, [sp, #4]
 800dd12:	e7ec      	b.n	800dcee <_dtoa_r+0xa8e>
 800dd14:	0800efdc 	.word	0x0800efdc
 800dd18:	0800ef60 	.word	0x0800ef60

0800dd1c <_free_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	4605      	mov	r5, r0
 800dd20:	2900      	cmp	r1, #0
 800dd22:	d041      	beq.n	800dda8 <_free_r+0x8c>
 800dd24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd28:	1f0c      	subs	r4, r1, #4
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	bfb8      	it	lt
 800dd2e:	18e4      	addlt	r4, r4, r3
 800dd30:	f000 f8e8 	bl	800df04 <__malloc_lock>
 800dd34:	4a1d      	ldr	r2, [pc, #116]	@ (800ddac <_free_r+0x90>)
 800dd36:	6813      	ldr	r3, [r2, #0]
 800dd38:	b933      	cbnz	r3, 800dd48 <_free_r+0x2c>
 800dd3a:	6063      	str	r3, [r4, #4]
 800dd3c:	6014      	str	r4, [r2, #0]
 800dd3e:	4628      	mov	r0, r5
 800dd40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd44:	f000 b8e4 	b.w	800df10 <__malloc_unlock>
 800dd48:	42a3      	cmp	r3, r4
 800dd4a:	d908      	bls.n	800dd5e <_free_r+0x42>
 800dd4c:	6820      	ldr	r0, [r4, #0]
 800dd4e:	1821      	adds	r1, r4, r0
 800dd50:	428b      	cmp	r3, r1
 800dd52:	bf01      	itttt	eq
 800dd54:	6819      	ldreq	r1, [r3, #0]
 800dd56:	685b      	ldreq	r3, [r3, #4]
 800dd58:	1809      	addeq	r1, r1, r0
 800dd5a:	6021      	streq	r1, [r4, #0]
 800dd5c:	e7ed      	b.n	800dd3a <_free_r+0x1e>
 800dd5e:	461a      	mov	r2, r3
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	b10b      	cbz	r3, 800dd68 <_free_r+0x4c>
 800dd64:	42a3      	cmp	r3, r4
 800dd66:	d9fa      	bls.n	800dd5e <_free_r+0x42>
 800dd68:	6811      	ldr	r1, [r2, #0]
 800dd6a:	1850      	adds	r0, r2, r1
 800dd6c:	42a0      	cmp	r0, r4
 800dd6e:	d10b      	bne.n	800dd88 <_free_r+0x6c>
 800dd70:	6820      	ldr	r0, [r4, #0]
 800dd72:	4401      	add	r1, r0
 800dd74:	1850      	adds	r0, r2, r1
 800dd76:	4283      	cmp	r3, r0
 800dd78:	6011      	str	r1, [r2, #0]
 800dd7a:	d1e0      	bne.n	800dd3e <_free_r+0x22>
 800dd7c:	6818      	ldr	r0, [r3, #0]
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	6053      	str	r3, [r2, #4]
 800dd82:	4408      	add	r0, r1
 800dd84:	6010      	str	r0, [r2, #0]
 800dd86:	e7da      	b.n	800dd3e <_free_r+0x22>
 800dd88:	d902      	bls.n	800dd90 <_free_r+0x74>
 800dd8a:	230c      	movs	r3, #12
 800dd8c:	602b      	str	r3, [r5, #0]
 800dd8e:	e7d6      	b.n	800dd3e <_free_r+0x22>
 800dd90:	6820      	ldr	r0, [r4, #0]
 800dd92:	1821      	adds	r1, r4, r0
 800dd94:	428b      	cmp	r3, r1
 800dd96:	bf04      	itt	eq
 800dd98:	6819      	ldreq	r1, [r3, #0]
 800dd9a:	685b      	ldreq	r3, [r3, #4]
 800dd9c:	6063      	str	r3, [r4, #4]
 800dd9e:	bf04      	itt	eq
 800dda0:	1809      	addeq	r1, r1, r0
 800dda2:	6021      	streq	r1, [r4, #0]
 800dda4:	6054      	str	r4, [r2, #4]
 800dda6:	e7ca      	b.n	800dd3e <_free_r+0x22>
 800dda8:	bd38      	pop	{r3, r4, r5, pc}
 800ddaa:	bf00      	nop
 800ddac:	24000a8c 	.word	0x24000a8c

0800ddb0 <malloc>:
 800ddb0:	4b02      	ldr	r3, [pc, #8]	@ (800ddbc <malloc+0xc>)
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	f000 b825 	b.w	800de04 <_malloc_r>
 800ddba:	bf00      	nop
 800ddbc:	2400001c 	.word	0x2400001c

0800ddc0 <sbrk_aligned>:
 800ddc0:	b570      	push	{r4, r5, r6, lr}
 800ddc2:	4e0f      	ldr	r6, [pc, #60]	@ (800de00 <sbrk_aligned+0x40>)
 800ddc4:	460c      	mov	r4, r1
 800ddc6:	6831      	ldr	r1, [r6, #0]
 800ddc8:	4605      	mov	r5, r0
 800ddca:	b911      	cbnz	r1, 800ddd2 <sbrk_aligned+0x12>
 800ddcc:	f000 fea2 	bl	800eb14 <_sbrk_r>
 800ddd0:	6030      	str	r0, [r6, #0]
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	f000 fe9d 	bl	800eb14 <_sbrk_r>
 800ddda:	1c43      	adds	r3, r0, #1
 800dddc:	d103      	bne.n	800dde6 <sbrk_aligned+0x26>
 800ddde:	f04f 34ff 	mov.w	r4, #4294967295
 800dde2:	4620      	mov	r0, r4
 800dde4:	bd70      	pop	{r4, r5, r6, pc}
 800dde6:	1cc4      	adds	r4, r0, #3
 800dde8:	f024 0403 	bic.w	r4, r4, #3
 800ddec:	42a0      	cmp	r0, r4
 800ddee:	d0f8      	beq.n	800dde2 <sbrk_aligned+0x22>
 800ddf0:	1a21      	subs	r1, r4, r0
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	f000 fe8e 	bl	800eb14 <_sbrk_r>
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	d1f2      	bne.n	800dde2 <sbrk_aligned+0x22>
 800ddfc:	e7ef      	b.n	800ddde <sbrk_aligned+0x1e>
 800ddfe:	bf00      	nop
 800de00:	24000a88 	.word	0x24000a88

0800de04 <_malloc_r>:
 800de04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de08:	1ccd      	adds	r5, r1, #3
 800de0a:	f025 0503 	bic.w	r5, r5, #3
 800de0e:	3508      	adds	r5, #8
 800de10:	2d0c      	cmp	r5, #12
 800de12:	bf38      	it	cc
 800de14:	250c      	movcc	r5, #12
 800de16:	2d00      	cmp	r5, #0
 800de18:	4606      	mov	r6, r0
 800de1a:	db01      	blt.n	800de20 <_malloc_r+0x1c>
 800de1c:	42a9      	cmp	r1, r5
 800de1e:	d904      	bls.n	800de2a <_malloc_r+0x26>
 800de20:	230c      	movs	r3, #12
 800de22:	6033      	str	r3, [r6, #0]
 800de24:	2000      	movs	r0, #0
 800de26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df00 <_malloc_r+0xfc>
 800de2e:	f000 f869 	bl	800df04 <__malloc_lock>
 800de32:	f8d8 3000 	ldr.w	r3, [r8]
 800de36:	461c      	mov	r4, r3
 800de38:	bb44      	cbnz	r4, 800de8c <_malloc_r+0x88>
 800de3a:	4629      	mov	r1, r5
 800de3c:	4630      	mov	r0, r6
 800de3e:	f7ff ffbf 	bl	800ddc0 <sbrk_aligned>
 800de42:	1c43      	adds	r3, r0, #1
 800de44:	4604      	mov	r4, r0
 800de46:	d158      	bne.n	800defa <_malloc_r+0xf6>
 800de48:	f8d8 4000 	ldr.w	r4, [r8]
 800de4c:	4627      	mov	r7, r4
 800de4e:	2f00      	cmp	r7, #0
 800de50:	d143      	bne.n	800deda <_malloc_r+0xd6>
 800de52:	2c00      	cmp	r4, #0
 800de54:	d04b      	beq.n	800deee <_malloc_r+0xea>
 800de56:	6823      	ldr	r3, [r4, #0]
 800de58:	4639      	mov	r1, r7
 800de5a:	4630      	mov	r0, r6
 800de5c:	eb04 0903 	add.w	r9, r4, r3
 800de60:	f000 fe58 	bl	800eb14 <_sbrk_r>
 800de64:	4581      	cmp	r9, r0
 800de66:	d142      	bne.n	800deee <_malloc_r+0xea>
 800de68:	6821      	ldr	r1, [r4, #0]
 800de6a:	1a6d      	subs	r5, r5, r1
 800de6c:	4629      	mov	r1, r5
 800de6e:	4630      	mov	r0, r6
 800de70:	f7ff ffa6 	bl	800ddc0 <sbrk_aligned>
 800de74:	3001      	adds	r0, #1
 800de76:	d03a      	beq.n	800deee <_malloc_r+0xea>
 800de78:	6823      	ldr	r3, [r4, #0]
 800de7a:	442b      	add	r3, r5
 800de7c:	6023      	str	r3, [r4, #0]
 800de7e:	f8d8 3000 	ldr.w	r3, [r8]
 800de82:	685a      	ldr	r2, [r3, #4]
 800de84:	bb62      	cbnz	r2, 800dee0 <_malloc_r+0xdc>
 800de86:	f8c8 7000 	str.w	r7, [r8]
 800de8a:	e00f      	b.n	800deac <_malloc_r+0xa8>
 800de8c:	6822      	ldr	r2, [r4, #0]
 800de8e:	1b52      	subs	r2, r2, r5
 800de90:	d420      	bmi.n	800ded4 <_malloc_r+0xd0>
 800de92:	2a0b      	cmp	r2, #11
 800de94:	d917      	bls.n	800dec6 <_malloc_r+0xc2>
 800de96:	1961      	adds	r1, r4, r5
 800de98:	42a3      	cmp	r3, r4
 800de9a:	6025      	str	r5, [r4, #0]
 800de9c:	bf18      	it	ne
 800de9e:	6059      	strne	r1, [r3, #4]
 800dea0:	6863      	ldr	r3, [r4, #4]
 800dea2:	bf08      	it	eq
 800dea4:	f8c8 1000 	streq.w	r1, [r8]
 800dea8:	5162      	str	r2, [r4, r5]
 800deaa:	604b      	str	r3, [r1, #4]
 800deac:	4630      	mov	r0, r6
 800deae:	f000 f82f 	bl	800df10 <__malloc_unlock>
 800deb2:	f104 000b 	add.w	r0, r4, #11
 800deb6:	1d23      	adds	r3, r4, #4
 800deb8:	f020 0007 	bic.w	r0, r0, #7
 800debc:	1ac2      	subs	r2, r0, r3
 800debe:	bf1c      	itt	ne
 800dec0:	1a1b      	subne	r3, r3, r0
 800dec2:	50a3      	strne	r3, [r4, r2]
 800dec4:	e7af      	b.n	800de26 <_malloc_r+0x22>
 800dec6:	6862      	ldr	r2, [r4, #4]
 800dec8:	42a3      	cmp	r3, r4
 800deca:	bf0c      	ite	eq
 800decc:	f8c8 2000 	streq.w	r2, [r8]
 800ded0:	605a      	strne	r2, [r3, #4]
 800ded2:	e7eb      	b.n	800deac <_malloc_r+0xa8>
 800ded4:	4623      	mov	r3, r4
 800ded6:	6864      	ldr	r4, [r4, #4]
 800ded8:	e7ae      	b.n	800de38 <_malloc_r+0x34>
 800deda:	463c      	mov	r4, r7
 800dedc:	687f      	ldr	r7, [r7, #4]
 800dede:	e7b6      	b.n	800de4e <_malloc_r+0x4a>
 800dee0:	461a      	mov	r2, r3
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	42a3      	cmp	r3, r4
 800dee6:	d1fb      	bne.n	800dee0 <_malloc_r+0xdc>
 800dee8:	2300      	movs	r3, #0
 800deea:	6053      	str	r3, [r2, #4]
 800deec:	e7de      	b.n	800deac <_malloc_r+0xa8>
 800deee:	230c      	movs	r3, #12
 800def0:	6033      	str	r3, [r6, #0]
 800def2:	4630      	mov	r0, r6
 800def4:	f000 f80c 	bl	800df10 <__malloc_unlock>
 800def8:	e794      	b.n	800de24 <_malloc_r+0x20>
 800defa:	6005      	str	r5, [r0, #0]
 800defc:	e7d6      	b.n	800deac <_malloc_r+0xa8>
 800defe:	bf00      	nop
 800df00:	24000a8c 	.word	0x24000a8c

0800df04 <__malloc_lock>:
 800df04:	4801      	ldr	r0, [pc, #4]	@ (800df0c <__malloc_lock+0x8>)
 800df06:	f7ff b912 	b.w	800d12e <__retarget_lock_acquire_recursive>
 800df0a:	bf00      	nop
 800df0c:	24000a84 	.word	0x24000a84

0800df10 <__malloc_unlock>:
 800df10:	4801      	ldr	r0, [pc, #4]	@ (800df18 <__malloc_unlock+0x8>)
 800df12:	f7ff b90d 	b.w	800d130 <__retarget_lock_release_recursive>
 800df16:	bf00      	nop
 800df18:	24000a84 	.word	0x24000a84

0800df1c <_Balloc>:
 800df1c:	b570      	push	{r4, r5, r6, lr}
 800df1e:	69c6      	ldr	r6, [r0, #28]
 800df20:	4604      	mov	r4, r0
 800df22:	460d      	mov	r5, r1
 800df24:	b976      	cbnz	r6, 800df44 <_Balloc+0x28>
 800df26:	2010      	movs	r0, #16
 800df28:	f7ff ff42 	bl	800ddb0 <malloc>
 800df2c:	4602      	mov	r2, r0
 800df2e:	61e0      	str	r0, [r4, #28]
 800df30:	b920      	cbnz	r0, 800df3c <_Balloc+0x20>
 800df32:	4b18      	ldr	r3, [pc, #96]	@ (800df94 <_Balloc+0x78>)
 800df34:	4818      	ldr	r0, [pc, #96]	@ (800df98 <_Balloc+0x7c>)
 800df36:	216b      	movs	r1, #107	@ 0x6b
 800df38:	f000 fdfc 	bl	800eb34 <__assert_func>
 800df3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df40:	6006      	str	r6, [r0, #0]
 800df42:	60c6      	str	r6, [r0, #12]
 800df44:	69e6      	ldr	r6, [r4, #28]
 800df46:	68f3      	ldr	r3, [r6, #12]
 800df48:	b183      	cbz	r3, 800df6c <_Balloc+0x50>
 800df4a:	69e3      	ldr	r3, [r4, #28]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df52:	b9b8      	cbnz	r0, 800df84 <_Balloc+0x68>
 800df54:	2101      	movs	r1, #1
 800df56:	fa01 f605 	lsl.w	r6, r1, r5
 800df5a:	1d72      	adds	r2, r6, #5
 800df5c:	0092      	lsls	r2, r2, #2
 800df5e:	4620      	mov	r0, r4
 800df60:	f000 fe06 	bl	800eb70 <_calloc_r>
 800df64:	b160      	cbz	r0, 800df80 <_Balloc+0x64>
 800df66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df6a:	e00e      	b.n	800df8a <_Balloc+0x6e>
 800df6c:	2221      	movs	r2, #33	@ 0x21
 800df6e:	2104      	movs	r1, #4
 800df70:	4620      	mov	r0, r4
 800df72:	f000 fdfd 	bl	800eb70 <_calloc_r>
 800df76:	69e3      	ldr	r3, [r4, #28]
 800df78:	60f0      	str	r0, [r6, #12]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1e4      	bne.n	800df4a <_Balloc+0x2e>
 800df80:	2000      	movs	r0, #0
 800df82:	bd70      	pop	{r4, r5, r6, pc}
 800df84:	6802      	ldr	r2, [r0, #0]
 800df86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df8a:	2300      	movs	r3, #0
 800df8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df90:	e7f7      	b.n	800df82 <_Balloc+0x66>
 800df92:	bf00      	nop
 800df94:	0800ef6d 	.word	0x0800ef6d
 800df98:	0800efed 	.word	0x0800efed

0800df9c <_Bfree>:
 800df9c:	b570      	push	{r4, r5, r6, lr}
 800df9e:	69c6      	ldr	r6, [r0, #28]
 800dfa0:	4605      	mov	r5, r0
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	b976      	cbnz	r6, 800dfc4 <_Bfree+0x28>
 800dfa6:	2010      	movs	r0, #16
 800dfa8:	f7ff ff02 	bl	800ddb0 <malloc>
 800dfac:	4602      	mov	r2, r0
 800dfae:	61e8      	str	r0, [r5, #28]
 800dfb0:	b920      	cbnz	r0, 800dfbc <_Bfree+0x20>
 800dfb2:	4b09      	ldr	r3, [pc, #36]	@ (800dfd8 <_Bfree+0x3c>)
 800dfb4:	4809      	ldr	r0, [pc, #36]	@ (800dfdc <_Bfree+0x40>)
 800dfb6:	218f      	movs	r1, #143	@ 0x8f
 800dfb8:	f000 fdbc 	bl	800eb34 <__assert_func>
 800dfbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfc0:	6006      	str	r6, [r0, #0]
 800dfc2:	60c6      	str	r6, [r0, #12]
 800dfc4:	b13c      	cbz	r4, 800dfd6 <_Bfree+0x3a>
 800dfc6:	69eb      	ldr	r3, [r5, #28]
 800dfc8:	6862      	ldr	r2, [r4, #4]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfd0:	6021      	str	r1, [r4, #0]
 800dfd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dfd6:	bd70      	pop	{r4, r5, r6, pc}
 800dfd8:	0800ef6d 	.word	0x0800ef6d
 800dfdc:	0800efed 	.word	0x0800efed

0800dfe0 <__multadd>:
 800dfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe4:	690d      	ldr	r5, [r1, #16]
 800dfe6:	4607      	mov	r7, r0
 800dfe8:	460c      	mov	r4, r1
 800dfea:	461e      	mov	r6, r3
 800dfec:	f101 0c14 	add.w	ip, r1, #20
 800dff0:	2000      	movs	r0, #0
 800dff2:	f8dc 3000 	ldr.w	r3, [ip]
 800dff6:	b299      	uxth	r1, r3
 800dff8:	fb02 6101 	mla	r1, r2, r1, r6
 800dffc:	0c1e      	lsrs	r6, r3, #16
 800dffe:	0c0b      	lsrs	r3, r1, #16
 800e000:	fb02 3306 	mla	r3, r2, r6, r3
 800e004:	b289      	uxth	r1, r1
 800e006:	3001      	adds	r0, #1
 800e008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e00c:	4285      	cmp	r5, r0
 800e00e:	f84c 1b04 	str.w	r1, [ip], #4
 800e012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e016:	dcec      	bgt.n	800dff2 <__multadd+0x12>
 800e018:	b30e      	cbz	r6, 800e05e <__multadd+0x7e>
 800e01a:	68a3      	ldr	r3, [r4, #8]
 800e01c:	42ab      	cmp	r3, r5
 800e01e:	dc19      	bgt.n	800e054 <__multadd+0x74>
 800e020:	6861      	ldr	r1, [r4, #4]
 800e022:	4638      	mov	r0, r7
 800e024:	3101      	adds	r1, #1
 800e026:	f7ff ff79 	bl	800df1c <_Balloc>
 800e02a:	4680      	mov	r8, r0
 800e02c:	b928      	cbnz	r0, 800e03a <__multadd+0x5a>
 800e02e:	4602      	mov	r2, r0
 800e030:	4b0c      	ldr	r3, [pc, #48]	@ (800e064 <__multadd+0x84>)
 800e032:	480d      	ldr	r0, [pc, #52]	@ (800e068 <__multadd+0x88>)
 800e034:	21ba      	movs	r1, #186	@ 0xba
 800e036:	f000 fd7d 	bl	800eb34 <__assert_func>
 800e03a:	6922      	ldr	r2, [r4, #16]
 800e03c:	3202      	adds	r2, #2
 800e03e:	f104 010c 	add.w	r1, r4, #12
 800e042:	0092      	lsls	r2, r2, #2
 800e044:	300c      	adds	r0, #12
 800e046:	f7ff f874 	bl	800d132 <memcpy>
 800e04a:	4621      	mov	r1, r4
 800e04c:	4638      	mov	r0, r7
 800e04e:	f7ff ffa5 	bl	800df9c <_Bfree>
 800e052:	4644      	mov	r4, r8
 800e054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e058:	3501      	adds	r5, #1
 800e05a:	615e      	str	r6, [r3, #20]
 800e05c:	6125      	str	r5, [r4, #16]
 800e05e:	4620      	mov	r0, r4
 800e060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e064:	0800efdc 	.word	0x0800efdc
 800e068:	0800efed 	.word	0x0800efed

0800e06c <__hi0bits>:
 800e06c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e070:	4603      	mov	r3, r0
 800e072:	bf36      	itet	cc
 800e074:	0403      	lslcc	r3, r0, #16
 800e076:	2000      	movcs	r0, #0
 800e078:	2010      	movcc	r0, #16
 800e07a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e07e:	bf3c      	itt	cc
 800e080:	021b      	lslcc	r3, r3, #8
 800e082:	3008      	addcc	r0, #8
 800e084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e088:	bf3c      	itt	cc
 800e08a:	011b      	lslcc	r3, r3, #4
 800e08c:	3004      	addcc	r0, #4
 800e08e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e092:	bf3c      	itt	cc
 800e094:	009b      	lslcc	r3, r3, #2
 800e096:	3002      	addcc	r0, #2
 800e098:	2b00      	cmp	r3, #0
 800e09a:	db05      	blt.n	800e0a8 <__hi0bits+0x3c>
 800e09c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e0a0:	f100 0001 	add.w	r0, r0, #1
 800e0a4:	bf08      	it	eq
 800e0a6:	2020      	moveq	r0, #32
 800e0a8:	4770      	bx	lr

0800e0aa <__lo0bits>:
 800e0aa:	6803      	ldr	r3, [r0, #0]
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	f013 0007 	ands.w	r0, r3, #7
 800e0b2:	d00b      	beq.n	800e0cc <__lo0bits+0x22>
 800e0b4:	07d9      	lsls	r1, r3, #31
 800e0b6:	d421      	bmi.n	800e0fc <__lo0bits+0x52>
 800e0b8:	0798      	lsls	r0, r3, #30
 800e0ba:	bf49      	itett	mi
 800e0bc:	085b      	lsrmi	r3, r3, #1
 800e0be:	089b      	lsrpl	r3, r3, #2
 800e0c0:	2001      	movmi	r0, #1
 800e0c2:	6013      	strmi	r3, [r2, #0]
 800e0c4:	bf5c      	itt	pl
 800e0c6:	6013      	strpl	r3, [r2, #0]
 800e0c8:	2002      	movpl	r0, #2
 800e0ca:	4770      	bx	lr
 800e0cc:	b299      	uxth	r1, r3
 800e0ce:	b909      	cbnz	r1, 800e0d4 <__lo0bits+0x2a>
 800e0d0:	0c1b      	lsrs	r3, r3, #16
 800e0d2:	2010      	movs	r0, #16
 800e0d4:	b2d9      	uxtb	r1, r3
 800e0d6:	b909      	cbnz	r1, 800e0dc <__lo0bits+0x32>
 800e0d8:	3008      	adds	r0, #8
 800e0da:	0a1b      	lsrs	r3, r3, #8
 800e0dc:	0719      	lsls	r1, r3, #28
 800e0de:	bf04      	itt	eq
 800e0e0:	091b      	lsreq	r3, r3, #4
 800e0e2:	3004      	addeq	r0, #4
 800e0e4:	0799      	lsls	r1, r3, #30
 800e0e6:	bf04      	itt	eq
 800e0e8:	089b      	lsreq	r3, r3, #2
 800e0ea:	3002      	addeq	r0, #2
 800e0ec:	07d9      	lsls	r1, r3, #31
 800e0ee:	d403      	bmi.n	800e0f8 <__lo0bits+0x4e>
 800e0f0:	085b      	lsrs	r3, r3, #1
 800e0f2:	f100 0001 	add.w	r0, r0, #1
 800e0f6:	d003      	beq.n	800e100 <__lo0bits+0x56>
 800e0f8:	6013      	str	r3, [r2, #0]
 800e0fa:	4770      	bx	lr
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	4770      	bx	lr
 800e100:	2020      	movs	r0, #32
 800e102:	4770      	bx	lr

0800e104 <__i2b>:
 800e104:	b510      	push	{r4, lr}
 800e106:	460c      	mov	r4, r1
 800e108:	2101      	movs	r1, #1
 800e10a:	f7ff ff07 	bl	800df1c <_Balloc>
 800e10e:	4602      	mov	r2, r0
 800e110:	b928      	cbnz	r0, 800e11e <__i2b+0x1a>
 800e112:	4b05      	ldr	r3, [pc, #20]	@ (800e128 <__i2b+0x24>)
 800e114:	4805      	ldr	r0, [pc, #20]	@ (800e12c <__i2b+0x28>)
 800e116:	f240 1145 	movw	r1, #325	@ 0x145
 800e11a:	f000 fd0b 	bl	800eb34 <__assert_func>
 800e11e:	2301      	movs	r3, #1
 800e120:	6144      	str	r4, [r0, #20]
 800e122:	6103      	str	r3, [r0, #16]
 800e124:	bd10      	pop	{r4, pc}
 800e126:	bf00      	nop
 800e128:	0800efdc 	.word	0x0800efdc
 800e12c:	0800efed 	.word	0x0800efed

0800e130 <__multiply>:
 800e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e134:	4617      	mov	r7, r2
 800e136:	690a      	ldr	r2, [r1, #16]
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	bfa8      	it	ge
 800e13e:	463b      	movge	r3, r7
 800e140:	4689      	mov	r9, r1
 800e142:	bfa4      	itt	ge
 800e144:	460f      	movge	r7, r1
 800e146:	4699      	movge	r9, r3
 800e148:	693d      	ldr	r5, [r7, #16]
 800e14a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	6879      	ldr	r1, [r7, #4]
 800e152:	eb05 060a 	add.w	r6, r5, sl
 800e156:	42b3      	cmp	r3, r6
 800e158:	b085      	sub	sp, #20
 800e15a:	bfb8      	it	lt
 800e15c:	3101      	addlt	r1, #1
 800e15e:	f7ff fedd 	bl	800df1c <_Balloc>
 800e162:	b930      	cbnz	r0, 800e172 <__multiply+0x42>
 800e164:	4602      	mov	r2, r0
 800e166:	4b41      	ldr	r3, [pc, #260]	@ (800e26c <__multiply+0x13c>)
 800e168:	4841      	ldr	r0, [pc, #260]	@ (800e270 <__multiply+0x140>)
 800e16a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e16e:	f000 fce1 	bl	800eb34 <__assert_func>
 800e172:	f100 0414 	add.w	r4, r0, #20
 800e176:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e17a:	4623      	mov	r3, r4
 800e17c:	2200      	movs	r2, #0
 800e17e:	4573      	cmp	r3, lr
 800e180:	d320      	bcc.n	800e1c4 <__multiply+0x94>
 800e182:	f107 0814 	add.w	r8, r7, #20
 800e186:	f109 0114 	add.w	r1, r9, #20
 800e18a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e18e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e192:	9302      	str	r3, [sp, #8]
 800e194:	1beb      	subs	r3, r5, r7
 800e196:	3b15      	subs	r3, #21
 800e198:	f023 0303 	bic.w	r3, r3, #3
 800e19c:	3304      	adds	r3, #4
 800e19e:	3715      	adds	r7, #21
 800e1a0:	42bd      	cmp	r5, r7
 800e1a2:	bf38      	it	cc
 800e1a4:	2304      	movcc	r3, #4
 800e1a6:	9301      	str	r3, [sp, #4]
 800e1a8:	9b02      	ldr	r3, [sp, #8]
 800e1aa:	9103      	str	r1, [sp, #12]
 800e1ac:	428b      	cmp	r3, r1
 800e1ae:	d80c      	bhi.n	800e1ca <__multiply+0x9a>
 800e1b0:	2e00      	cmp	r6, #0
 800e1b2:	dd03      	ble.n	800e1bc <__multiply+0x8c>
 800e1b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d055      	beq.n	800e268 <__multiply+0x138>
 800e1bc:	6106      	str	r6, [r0, #16]
 800e1be:	b005      	add	sp, #20
 800e1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c4:	f843 2b04 	str.w	r2, [r3], #4
 800e1c8:	e7d9      	b.n	800e17e <__multiply+0x4e>
 800e1ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800e1ce:	f1ba 0f00 	cmp.w	sl, #0
 800e1d2:	d01f      	beq.n	800e214 <__multiply+0xe4>
 800e1d4:	46c4      	mov	ip, r8
 800e1d6:	46a1      	mov	r9, r4
 800e1d8:	2700      	movs	r7, #0
 800e1da:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e1de:	f8d9 3000 	ldr.w	r3, [r9]
 800e1e2:	fa1f fb82 	uxth.w	fp, r2
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e1ec:	443b      	add	r3, r7
 800e1ee:	f8d9 7000 	ldr.w	r7, [r9]
 800e1f2:	0c12      	lsrs	r2, r2, #16
 800e1f4:	0c3f      	lsrs	r7, r7, #16
 800e1f6:	fb0a 7202 	mla	r2, sl, r2, r7
 800e1fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e204:	4565      	cmp	r5, ip
 800e206:	f849 3b04 	str.w	r3, [r9], #4
 800e20a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e20e:	d8e4      	bhi.n	800e1da <__multiply+0xaa>
 800e210:	9b01      	ldr	r3, [sp, #4]
 800e212:	50e7      	str	r7, [r4, r3]
 800e214:	9b03      	ldr	r3, [sp, #12]
 800e216:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e21a:	3104      	adds	r1, #4
 800e21c:	f1b9 0f00 	cmp.w	r9, #0
 800e220:	d020      	beq.n	800e264 <__multiply+0x134>
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	4647      	mov	r7, r8
 800e226:	46a4      	mov	ip, r4
 800e228:	f04f 0a00 	mov.w	sl, #0
 800e22c:	f8b7 b000 	ldrh.w	fp, [r7]
 800e230:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e234:	fb09 220b 	mla	r2, r9, fp, r2
 800e238:	4452      	add	r2, sl
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e240:	f84c 3b04 	str.w	r3, [ip], #4
 800e244:	f857 3b04 	ldr.w	r3, [r7], #4
 800e248:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e24c:	f8bc 3000 	ldrh.w	r3, [ip]
 800e250:	fb09 330a 	mla	r3, r9, sl, r3
 800e254:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e258:	42bd      	cmp	r5, r7
 800e25a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e25e:	d8e5      	bhi.n	800e22c <__multiply+0xfc>
 800e260:	9a01      	ldr	r2, [sp, #4]
 800e262:	50a3      	str	r3, [r4, r2]
 800e264:	3404      	adds	r4, #4
 800e266:	e79f      	b.n	800e1a8 <__multiply+0x78>
 800e268:	3e01      	subs	r6, #1
 800e26a:	e7a1      	b.n	800e1b0 <__multiply+0x80>
 800e26c:	0800efdc 	.word	0x0800efdc
 800e270:	0800efed 	.word	0x0800efed

0800e274 <__pow5mult>:
 800e274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e278:	4615      	mov	r5, r2
 800e27a:	f012 0203 	ands.w	r2, r2, #3
 800e27e:	4607      	mov	r7, r0
 800e280:	460e      	mov	r6, r1
 800e282:	d007      	beq.n	800e294 <__pow5mult+0x20>
 800e284:	4c25      	ldr	r4, [pc, #148]	@ (800e31c <__pow5mult+0xa8>)
 800e286:	3a01      	subs	r2, #1
 800e288:	2300      	movs	r3, #0
 800e28a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e28e:	f7ff fea7 	bl	800dfe0 <__multadd>
 800e292:	4606      	mov	r6, r0
 800e294:	10ad      	asrs	r5, r5, #2
 800e296:	d03d      	beq.n	800e314 <__pow5mult+0xa0>
 800e298:	69fc      	ldr	r4, [r7, #28]
 800e29a:	b97c      	cbnz	r4, 800e2bc <__pow5mult+0x48>
 800e29c:	2010      	movs	r0, #16
 800e29e:	f7ff fd87 	bl	800ddb0 <malloc>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	61f8      	str	r0, [r7, #28]
 800e2a6:	b928      	cbnz	r0, 800e2b4 <__pow5mult+0x40>
 800e2a8:	4b1d      	ldr	r3, [pc, #116]	@ (800e320 <__pow5mult+0xac>)
 800e2aa:	481e      	ldr	r0, [pc, #120]	@ (800e324 <__pow5mult+0xb0>)
 800e2ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e2b0:	f000 fc40 	bl	800eb34 <__assert_func>
 800e2b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2b8:	6004      	str	r4, [r0, #0]
 800e2ba:	60c4      	str	r4, [r0, #12]
 800e2bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e2c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2c4:	b94c      	cbnz	r4, 800e2da <__pow5mult+0x66>
 800e2c6:	f240 2171 	movw	r1, #625	@ 0x271
 800e2ca:	4638      	mov	r0, r7
 800e2cc:	f7ff ff1a 	bl	800e104 <__i2b>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	6003      	str	r3, [r0, #0]
 800e2da:	f04f 0900 	mov.w	r9, #0
 800e2de:	07eb      	lsls	r3, r5, #31
 800e2e0:	d50a      	bpl.n	800e2f8 <__pow5mult+0x84>
 800e2e2:	4631      	mov	r1, r6
 800e2e4:	4622      	mov	r2, r4
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f7ff ff22 	bl	800e130 <__multiply>
 800e2ec:	4631      	mov	r1, r6
 800e2ee:	4680      	mov	r8, r0
 800e2f0:	4638      	mov	r0, r7
 800e2f2:	f7ff fe53 	bl	800df9c <_Bfree>
 800e2f6:	4646      	mov	r6, r8
 800e2f8:	106d      	asrs	r5, r5, #1
 800e2fa:	d00b      	beq.n	800e314 <__pow5mult+0xa0>
 800e2fc:	6820      	ldr	r0, [r4, #0]
 800e2fe:	b938      	cbnz	r0, 800e310 <__pow5mult+0x9c>
 800e300:	4622      	mov	r2, r4
 800e302:	4621      	mov	r1, r4
 800e304:	4638      	mov	r0, r7
 800e306:	f7ff ff13 	bl	800e130 <__multiply>
 800e30a:	6020      	str	r0, [r4, #0]
 800e30c:	f8c0 9000 	str.w	r9, [r0]
 800e310:	4604      	mov	r4, r0
 800e312:	e7e4      	b.n	800e2de <__pow5mult+0x6a>
 800e314:	4630      	mov	r0, r6
 800e316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e31a:	bf00      	nop
 800e31c:	0800f0a0 	.word	0x0800f0a0
 800e320:	0800ef6d 	.word	0x0800ef6d
 800e324:	0800efed 	.word	0x0800efed

0800e328 <__lshift>:
 800e328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e32c:	460c      	mov	r4, r1
 800e32e:	6849      	ldr	r1, [r1, #4]
 800e330:	6923      	ldr	r3, [r4, #16]
 800e332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e336:	68a3      	ldr	r3, [r4, #8]
 800e338:	4607      	mov	r7, r0
 800e33a:	4691      	mov	r9, r2
 800e33c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e340:	f108 0601 	add.w	r6, r8, #1
 800e344:	42b3      	cmp	r3, r6
 800e346:	db0b      	blt.n	800e360 <__lshift+0x38>
 800e348:	4638      	mov	r0, r7
 800e34a:	f7ff fde7 	bl	800df1c <_Balloc>
 800e34e:	4605      	mov	r5, r0
 800e350:	b948      	cbnz	r0, 800e366 <__lshift+0x3e>
 800e352:	4602      	mov	r2, r0
 800e354:	4b28      	ldr	r3, [pc, #160]	@ (800e3f8 <__lshift+0xd0>)
 800e356:	4829      	ldr	r0, [pc, #164]	@ (800e3fc <__lshift+0xd4>)
 800e358:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e35c:	f000 fbea 	bl	800eb34 <__assert_func>
 800e360:	3101      	adds	r1, #1
 800e362:	005b      	lsls	r3, r3, #1
 800e364:	e7ee      	b.n	800e344 <__lshift+0x1c>
 800e366:	2300      	movs	r3, #0
 800e368:	f100 0114 	add.w	r1, r0, #20
 800e36c:	f100 0210 	add.w	r2, r0, #16
 800e370:	4618      	mov	r0, r3
 800e372:	4553      	cmp	r3, sl
 800e374:	db33      	blt.n	800e3de <__lshift+0xb6>
 800e376:	6920      	ldr	r0, [r4, #16]
 800e378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e37c:	f104 0314 	add.w	r3, r4, #20
 800e380:	f019 091f 	ands.w	r9, r9, #31
 800e384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e388:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e38c:	d02b      	beq.n	800e3e6 <__lshift+0xbe>
 800e38e:	f1c9 0e20 	rsb	lr, r9, #32
 800e392:	468a      	mov	sl, r1
 800e394:	2200      	movs	r2, #0
 800e396:	6818      	ldr	r0, [r3, #0]
 800e398:	fa00 f009 	lsl.w	r0, r0, r9
 800e39c:	4310      	orrs	r0, r2
 800e39e:	f84a 0b04 	str.w	r0, [sl], #4
 800e3a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3a6:	459c      	cmp	ip, r3
 800e3a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3ac:	d8f3      	bhi.n	800e396 <__lshift+0x6e>
 800e3ae:	ebac 0304 	sub.w	r3, ip, r4
 800e3b2:	3b15      	subs	r3, #21
 800e3b4:	f023 0303 	bic.w	r3, r3, #3
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	f104 0015 	add.w	r0, r4, #21
 800e3be:	4560      	cmp	r0, ip
 800e3c0:	bf88      	it	hi
 800e3c2:	2304      	movhi	r3, #4
 800e3c4:	50ca      	str	r2, [r1, r3]
 800e3c6:	b10a      	cbz	r2, 800e3cc <__lshift+0xa4>
 800e3c8:	f108 0602 	add.w	r6, r8, #2
 800e3cc:	3e01      	subs	r6, #1
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	612e      	str	r6, [r5, #16]
 800e3d2:	4621      	mov	r1, r4
 800e3d4:	f7ff fde2 	bl	800df9c <_Bfree>
 800e3d8:	4628      	mov	r0, r5
 800e3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3de:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	e7c5      	b.n	800e372 <__lshift+0x4a>
 800e3e6:	3904      	subs	r1, #4
 800e3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3f0:	459c      	cmp	ip, r3
 800e3f2:	d8f9      	bhi.n	800e3e8 <__lshift+0xc0>
 800e3f4:	e7ea      	b.n	800e3cc <__lshift+0xa4>
 800e3f6:	bf00      	nop
 800e3f8:	0800efdc 	.word	0x0800efdc
 800e3fc:	0800efed 	.word	0x0800efed

0800e400 <__mcmp>:
 800e400:	690a      	ldr	r2, [r1, #16]
 800e402:	4603      	mov	r3, r0
 800e404:	6900      	ldr	r0, [r0, #16]
 800e406:	1a80      	subs	r0, r0, r2
 800e408:	b530      	push	{r4, r5, lr}
 800e40a:	d10e      	bne.n	800e42a <__mcmp+0x2a>
 800e40c:	3314      	adds	r3, #20
 800e40e:	3114      	adds	r1, #20
 800e410:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e414:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e418:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e41c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e420:	4295      	cmp	r5, r2
 800e422:	d003      	beq.n	800e42c <__mcmp+0x2c>
 800e424:	d205      	bcs.n	800e432 <__mcmp+0x32>
 800e426:	f04f 30ff 	mov.w	r0, #4294967295
 800e42a:	bd30      	pop	{r4, r5, pc}
 800e42c:	42a3      	cmp	r3, r4
 800e42e:	d3f3      	bcc.n	800e418 <__mcmp+0x18>
 800e430:	e7fb      	b.n	800e42a <__mcmp+0x2a>
 800e432:	2001      	movs	r0, #1
 800e434:	e7f9      	b.n	800e42a <__mcmp+0x2a>
	...

0800e438 <__mdiff>:
 800e438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	4689      	mov	r9, r1
 800e43e:	4606      	mov	r6, r0
 800e440:	4611      	mov	r1, r2
 800e442:	4648      	mov	r0, r9
 800e444:	4614      	mov	r4, r2
 800e446:	f7ff ffdb 	bl	800e400 <__mcmp>
 800e44a:	1e05      	subs	r5, r0, #0
 800e44c:	d112      	bne.n	800e474 <__mdiff+0x3c>
 800e44e:	4629      	mov	r1, r5
 800e450:	4630      	mov	r0, r6
 800e452:	f7ff fd63 	bl	800df1c <_Balloc>
 800e456:	4602      	mov	r2, r0
 800e458:	b928      	cbnz	r0, 800e466 <__mdiff+0x2e>
 800e45a:	4b3f      	ldr	r3, [pc, #252]	@ (800e558 <__mdiff+0x120>)
 800e45c:	f240 2137 	movw	r1, #567	@ 0x237
 800e460:	483e      	ldr	r0, [pc, #248]	@ (800e55c <__mdiff+0x124>)
 800e462:	f000 fb67 	bl	800eb34 <__assert_func>
 800e466:	2301      	movs	r3, #1
 800e468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e46c:	4610      	mov	r0, r2
 800e46e:	b003      	add	sp, #12
 800e470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e474:	bfbc      	itt	lt
 800e476:	464b      	movlt	r3, r9
 800e478:	46a1      	movlt	r9, r4
 800e47a:	4630      	mov	r0, r6
 800e47c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e480:	bfba      	itte	lt
 800e482:	461c      	movlt	r4, r3
 800e484:	2501      	movlt	r5, #1
 800e486:	2500      	movge	r5, #0
 800e488:	f7ff fd48 	bl	800df1c <_Balloc>
 800e48c:	4602      	mov	r2, r0
 800e48e:	b918      	cbnz	r0, 800e498 <__mdiff+0x60>
 800e490:	4b31      	ldr	r3, [pc, #196]	@ (800e558 <__mdiff+0x120>)
 800e492:	f240 2145 	movw	r1, #581	@ 0x245
 800e496:	e7e3      	b.n	800e460 <__mdiff+0x28>
 800e498:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e49c:	6926      	ldr	r6, [r4, #16]
 800e49e:	60c5      	str	r5, [r0, #12]
 800e4a0:	f109 0310 	add.w	r3, r9, #16
 800e4a4:	f109 0514 	add.w	r5, r9, #20
 800e4a8:	f104 0e14 	add.w	lr, r4, #20
 800e4ac:	f100 0b14 	add.w	fp, r0, #20
 800e4b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e4b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e4b8:	9301      	str	r3, [sp, #4]
 800e4ba:	46d9      	mov	r9, fp
 800e4bc:	f04f 0c00 	mov.w	ip, #0
 800e4c0:	9b01      	ldr	r3, [sp, #4]
 800e4c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e4c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e4ca:	9301      	str	r3, [sp, #4]
 800e4cc:	fa1f f38a 	uxth.w	r3, sl
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	b283      	uxth	r3, r0
 800e4d4:	1acb      	subs	r3, r1, r3
 800e4d6:	0c00      	lsrs	r0, r0, #16
 800e4d8:	4463      	add	r3, ip
 800e4da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e4de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e4e8:	4576      	cmp	r6, lr
 800e4ea:	f849 3b04 	str.w	r3, [r9], #4
 800e4ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e4f2:	d8e5      	bhi.n	800e4c0 <__mdiff+0x88>
 800e4f4:	1b33      	subs	r3, r6, r4
 800e4f6:	3b15      	subs	r3, #21
 800e4f8:	f023 0303 	bic.w	r3, r3, #3
 800e4fc:	3415      	adds	r4, #21
 800e4fe:	3304      	adds	r3, #4
 800e500:	42a6      	cmp	r6, r4
 800e502:	bf38      	it	cc
 800e504:	2304      	movcc	r3, #4
 800e506:	441d      	add	r5, r3
 800e508:	445b      	add	r3, fp
 800e50a:	461e      	mov	r6, r3
 800e50c:	462c      	mov	r4, r5
 800e50e:	4544      	cmp	r4, r8
 800e510:	d30e      	bcc.n	800e530 <__mdiff+0xf8>
 800e512:	f108 0103 	add.w	r1, r8, #3
 800e516:	1b49      	subs	r1, r1, r5
 800e518:	f021 0103 	bic.w	r1, r1, #3
 800e51c:	3d03      	subs	r5, #3
 800e51e:	45a8      	cmp	r8, r5
 800e520:	bf38      	it	cc
 800e522:	2100      	movcc	r1, #0
 800e524:	440b      	add	r3, r1
 800e526:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e52a:	b191      	cbz	r1, 800e552 <__mdiff+0x11a>
 800e52c:	6117      	str	r7, [r2, #16]
 800e52e:	e79d      	b.n	800e46c <__mdiff+0x34>
 800e530:	f854 1b04 	ldr.w	r1, [r4], #4
 800e534:	46e6      	mov	lr, ip
 800e536:	0c08      	lsrs	r0, r1, #16
 800e538:	fa1c fc81 	uxtah	ip, ip, r1
 800e53c:	4471      	add	r1, lr
 800e53e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e542:	b289      	uxth	r1, r1
 800e544:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e548:	f846 1b04 	str.w	r1, [r6], #4
 800e54c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e550:	e7dd      	b.n	800e50e <__mdiff+0xd6>
 800e552:	3f01      	subs	r7, #1
 800e554:	e7e7      	b.n	800e526 <__mdiff+0xee>
 800e556:	bf00      	nop
 800e558:	0800efdc 	.word	0x0800efdc
 800e55c:	0800efed 	.word	0x0800efed

0800e560 <__d2b>:
 800e560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e564:	460f      	mov	r7, r1
 800e566:	2101      	movs	r1, #1
 800e568:	ec59 8b10 	vmov	r8, r9, d0
 800e56c:	4616      	mov	r6, r2
 800e56e:	f7ff fcd5 	bl	800df1c <_Balloc>
 800e572:	4604      	mov	r4, r0
 800e574:	b930      	cbnz	r0, 800e584 <__d2b+0x24>
 800e576:	4602      	mov	r2, r0
 800e578:	4b23      	ldr	r3, [pc, #140]	@ (800e608 <__d2b+0xa8>)
 800e57a:	4824      	ldr	r0, [pc, #144]	@ (800e60c <__d2b+0xac>)
 800e57c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e580:	f000 fad8 	bl	800eb34 <__assert_func>
 800e584:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e58c:	b10d      	cbz	r5, 800e592 <__d2b+0x32>
 800e58e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e592:	9301      	str	r3, [sp, #4]
 800e594:	f1b8 0300 	subs.w	r3, r8, #0
 800e598:	d023      	beq.n	800e5e2 <__d2b+0x82>
 800e59a:	4668      	mov	r0, sp
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	f7ff fd84 	bl	800e0aa <__lo0bits>
 800e5a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5a6:	b1d0      	cbz	r0, 800e5de <__d2b+0x7e>
 800e5a8:	f1c0 0320 	rsb	r3, r0, #32
 800e5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e5b0:	430b      	orrs	r3, r1
 800e5b2:	40c2      	lsrs	r2, r0
 800e5b4:	6163      	str	r3, [r4, #20]
 800e5b6:	9201      	str	r2, [sp, #4]
 800e5b8:	9b01      	ldr	r3, [sp, #4]
 800e5ba:	61a3      	str	r3, [r4, #24]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	bf0c      	ite	eq
 800e5c0:	2201      	moveq	r2, #1
 800e5c2:	2202      	movne	r2, #2
 800e5c4:	6122      	str	r2, [r4, #16]
 800e5c6:	b1a5      	cbz	r5, 800e5f2 <__d2b+0x92>
 800e5c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e5cc:	4405      	add	r5, r0
 800e5ce:	603d      	str	r5, [r7, #0]
 800e5d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e5d4:	6030      	str	r0, [r6, #0]
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	b003      	add	sp, #12
 800e5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5de:	6161      	str	r1, [r4, #20]
 800e5e0:	e7ea      	b.n	800e5b8 <__d2b+0x58>
 800e5e2:	a801      	add	r0, sp, #4
 800e5e4:	f7ff fd61 	bl	800e0aa <__lo0bits>
 800e5e8:	9b01      	ldr	r3, [sp, #4]
 800e5ea:	6163      	str	r3, [r4, #20]
 800e5ec:	3020      	adds	r0, #32
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	e7e8      	b.n	800e5c4 <__d2b+0x64>
 800e5f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e5f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e5fa:	6038      	str	r0, [r7, #0]
 800e5fc:	6918      	ldr	r0, [r3, #16]
 800e5fe:	f7ff fd35 	bl	800e06c <__hi0bits>
 800e602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e606:	e7e5      	b.n	800e5d4 <__d2b+0x74>
 800e608:	0800efdc 	.word	0x0800efdc
 800e60c:	0800efed 	.word	0x0800efed

0800e610 <__sfputc_r>:
 800e610:	6893      	ldr	r3, [r2, #8]
 800e612:	3b01      	subs	r3, #1
 800e614:	2b00      	cmp	r3, #0
 800e616:	b410      	push	{r4}
 800e618:	6093      	str	r3, [r2, #8]
 800e61a:	da08      	bge.n	800e62e <__sfputc_r+0x1e>
 800e61c:	6994      	ldr	r4, [r2, #24]
 800e61e:	42a3      	cmp	r3, r4
 800e620:	db01      	blt.n	800e626 <__sfputc_r+0x16>
 800e622:	290a      	cmp	r1, #10
 800e624:	d103      	bne.n	800e62e <__sfputc_r+0x1e>
 800e626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e62a:	f000 b9df 	b.w	800e9ec <__swbuf_r>
 800e62e:	6813      	ldr	r3, [r2, #0]
 800e630:	1c58      	adds	r0, r3, #1
 800e632:	6010      	str	r0, [r2, #0]
 800e634:	7019      	strb	r1, [r3, #0]
 800e636:	4608      	mov	r0, r1
 800e638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e63c:	4770      	bx	lr

0800e63e <__sfputs_r>:
 800e63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e640:	4606      	mov	r6, r0
 800e642:	460f      	mov	r7, r1
 800e644:	4614      	mov	r4, r2
 800e646:	18d5      	adds	r5, r2, r3
 800e648:	42ac      	cmp	r4, r5
 800e64a:	d101      	bne.n	800e650 <__sfputs_r+0x12>
 800e64c:	2000      	movs	r0, #0
 800e64e:	e007      	b.n	800e660 <__sfputs_r+0x22>
 800e650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e654:	463a      	mov	r2, r7
 800e656:	4630      	mov	r0, r6
 800e658:	f7ff ffda 	bl	800e610 <__sfputc_r>
 800e65c:	1c43      	adds	r3, r0, #1
 800e65e:	d1f3      	bne.n	800e648 <__sfputs_r+0xa>
 800e660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e664 <_vfiprintf_r>:
 800e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e668:	460d      	mov	r5, r1
 800e66a:	b09d      	sub	sp, #116	@ 0x74
 800e66c:	4614      	mov	r4, r2
 800e66e:	4698      	mov	r8, r3
 800e670:	4606      	mov	r6, r0
 800e672:	b118      	cbz	r0, 800e67c <_vfiprintf_r+0x18>
 800e674:	6a03      	ldr	r3, [r0, #32]
 800e676:	b90b      	cbnz	r3, 800e67c <_vfiprintf_r+0x18>
 800e678:	f7fe fc50 	bl	800cf1c <__sinit>
 800e67c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e67e:	07d9      	lsls	r1, r3, #31
 800e680:	d405      	bmi.n	800e68e <_vfiprintf_r+0x2a>
 800e682:	89ab      	ldrh	r3, [r5, #12]
 800e684:	059a      	lsls	r2, r3, #22
 800e686:	d402      	bmi.n	800e68e <_vfiprintf_r+0x2a>
 800e688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e68a:	f7fe fd50 	bl	800d12e <__retarget_lock_acquire_recursive>
 800e68e:	89ab      	ldrh	r3, [r5, #12]
 800e690:	071b      	lsls	r3, r3, #28
 800e692:	d501      	bpl.n	800e698 <_vfiprintf_r+0x34>
 800e694:	692b      	ldr	r3, [r5, #16]
 800e696:	b99b      	cbnz	r3, 800e6c0 <_vfiprintf_r+0x5c>
 800e698:	4629      	mov	r1, r5
 800e69a:	4630      	mov	r0, r6
 800e69c:	f000 f9e4 	bl	800ea68 <__swsetup_r>
 800e6a0:	b170      	cbz	r0, 800e6c0 <_vfiprintf_r+0x5c>
 800e6a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6a4:	07dc      	lsls	r4, r3, #31
 800e6a6:	d504      	bpl.n	800e6b2 <_vfiprintf_r+0x4e>
 800e6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ac:	b01d      	add	sp, #116	@ 0x74
 800e6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b2:	89ab      	ldrh	r3, [r5, #12]
 800e6b4:	0598      	lsls	r0, r3, #22
 800e6b6:	d4f7      	bmi.n	800e6a8 <_vfiprintf_r+0x44>
 800e6b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6ba:	f7fe fd39 	bl	800d130 <__retarget_lock_release_recursive>
 800e6be:	e7f3      	b.n	800e6a8 <_vfiprintf_r+0x44>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6c4:	2320      	movs	r3, #32
 800e6c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e6ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6ce:	2330      	movs	r3, #48	@ 0x30
 800e6d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e880 <_vfiprintf_r+0x21c>
 800e6d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e6d8:	f04f 0901 	mov.w	r9, #1
 800e6dc:	4623      	mov	r3, r4
 800e6de:	469a      	mov	sl, r3
 800e6e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6e4:	b10a      	cbz	r2, 800e6ea <_vfiprintf_r+0x86>
 800e6e6:	2a25      	cmp	r2, #37	@ 0x25
 800e6e8:	d1f9      	bne.n	800e6de <_vfiprintf_r+0x7a>
 800e6ea:	ebba 0b04 	subs.w	fp, sl, r4
 800e6ee:	d00b      	beq.n	800e708 <_vfiprintf_r+0xa4>
 800e6f0:	465b      	mov	r3, fp
 800e6f2:	4622      	mov	r2, r4
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	f7ff ffa1 	bl	800e63e <__sfputs_r>
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	f000 80a7 	beq.w	800e850 <_vfiprintf_r+0x1ec>
 800e702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e704:	445a      	add	r2, fp
 800e706:	9209      	str	r2, [sp, #36]	@ 0x24
 800e708:	f89a 3000 	ldrb.w	r3, [sl]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f000 809f 	beq.w	800e850 <_vfiprintf_r+0x1ec>
 800e712:	2300      	movs	r3, #0
 800e714:	f04f 32ff 	mov.w	r2, #4294967295
 800e718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e71c:	f10a 0a01 	add.w	sl, sl, #1
 800e720:	9304      	str	r3, [sp, #16]
 800e722:	9307      	str	r3, [sp, #28]
 800e724:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e728:	931a      	str	r3, [sp, #104]	@ 0x68
 800e72a:	4654      	mov	r4, sl
 800e72c:	2205      	movs	r2, #5
 800e72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e732:	4853      	ldr	r0, [pc, #332]	@ (800e880 <_vfiprintf_r+0x21c>)
 800e734:	f7f1 fddc 	bl	80002f0 <memchr>
 800e738:	9a04      	ldr	r2, [sp, #16]
 800e73a:	b9d8      	cbnz	r0, 800e774 <_vfiprintf_r+0x110>
 800e73c:	06d1      	lsls	r1, r2, #27
 800e73e:	bf44      	itt	mi
 800e740:	2320      	movmi	r3, #32
 800e742:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e746:	0713      	lsls	r3, r2, #28
 800e748:	bf44      	itt	mi
 800e74a:	232b      	movmi	r3, #43	@ 0x2b
 800e74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e750:	f89a 3000 	ldrb.w	r3, [sl]
 800e754:	2b2a      	cmp	r3, #42	@ 0x2a
 800e756:	d015      	beq.n	800e784 <_vfiprintf_r+0x120>
 800e758:	9a07      	ldr	r2, [sp, #28]
 800e75a:	4654      	mov	r4, sl
 800e75c:	2000      	movs	r0, #0
 800e75e:	f04f 0c0a 	mov.w	ip, #10
 800e762:	4621      	mov	r1, r4
 800e764:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e768:	3b30      	subs	r3, #48	@ 0x30
 800e76a:	2b09      	cmp	r3, #9
 800e76c:	d94b      	bls.n	800e806 <_vfiprintf_r+0x1a2>
 800e76e:	b1b0      	cbz	r0, 800e79e <_vfiprintf_r+0x13a>
 800e770:	9207      	str	r2, [sp, #28]
 800e772:	e014      	b.n	800e79e <_vfiprintf_r+0x13a>
 800e774:	eba0 0308 	sub.w	r3, r0, r8
 800e778:	fa09 f303 	lsl.w	r3, r9, r3
 800e77c:	4313      	orrs	r3, r2
 800e77e:	9304      	str	r3, [sp, #16]
 800e780:	46a2      	mov	sl, r4
 800e782:	e7d2      	b.n	800e72a <_vfiprintf_r+0xc6>
 800e784:	9b03      	ldr	r3, [sp, #12]
 800e786:	1d19      	adds	r1, r3, #4
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	9103      	str	r1, [sp, #12]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	bfbb      	ittet	lt
 800e790:	425b      	neglt	r3, r3
 800e792:	f042 0202 	orrlt.w	r2, r2, #2
 800e796:	9307      	strge	r3, [sp, #28]
 800e798:	9307      	strlt	r3, [sp, #28]
 800e79a:	bfb8      	it	lt
 800e79c:	9204      	strlt	r2, [sp, #16]
 800e79e:	7823      	ldrb	r3, [r4, #0]
 800e7a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7a2:	d10a      	bne.n	800e7ba <_vfiprintf_r+0x156>
 800e7a4:	7863      	ldrb	r3, [r4, #1]
 800e7a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7a8:	d132      	bne.n	800e810 <_vfiprintf_r+0x1ac>
 800e7aa:	9b03      	ldr	r3, [sp, #12]
 800e7ac:	1d1a      	adds	r2, r3, #4
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	9203      	str	r2, [sp, #12]
 800e7b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e7b6:	3402      	adds	r4, #2
 800e7b8:	9305      	str	r3, [sp, #20]
 800e7ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e890 <_vfiprintf_r+0x22c>
 800e7be:	7821      	ldrb	r1, [r4, #0]
 800e7c0:	2203      	movs	r2, #3
 800e7c2:	4650      	mov	r0, sl
 800e7c4:	f7f1 fd94 	bl	80002f0 <memchr>
 800e7c8:	b138      	cbz	r0, 800e7da <_vfiprintf_r+0x176>
 800e7ca:	9b04      	ldr	r3, [sp, #16]
 800e7cc:	eba0 000a 	sub.w	r0, r0, sl
 800e7d0:	2240      	movs	r2, #64	@ 0x40
 800e7d2:	4082      	lsls	r2, r0
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	3401      	adds	r4, #1
 800e7d8:	9304      	str	r3, [sp, #16]
 800e7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7de:	4829      	ldr	r0, [pc, #164]	@ (800e884 <_vfiprintf_r+0x220>)
 800e7e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e7e4:	2206      	movs	r2, #6
 800e7e6:	f7f1 fd83 	bl	80002f0 <memchr>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d03f      	beq.n	800e86e <_vfiprintf_r+0x20a>
 800e7ee:	4b26      	ldr	r3, [pc, #152]	@ (800e888 <_vfiprintf_r+0x224>)
 800e7f0:	bb1b      	cbnz	r3, 800e83a <_vfiprintf_r+0x1d6>
 800e7f2:	9b03      	ldr	r3, [sp, #12]
 800e7f4:	3307      	adds	r3, #7
 800e7f6:	f023 0307 	bic.w	r3, r3, #7
 800e7fa:	3308      	adds	r3, #8
 800e7fc:	9303      	str	r3, [sp, #12]
 800e7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e800:	443b      	add	r3, r7
 800e802:	9309      	str	r3, [sp, #36]	@ 0x24
 800e804:	e76a      	b.n	800e6dc <_vfiprintf_r+0x78>
 800e806:	fb0c 3202 	mla	r2, ip, r2, r3
 800e80a:	460c      	mov	r4, r1
 800e80c:	2001      	movs	r0, #1
 800e80e:	e7a8      	b.n	800e762 <_vfiprintf_r+0xfe>
 800e810:	2300      	movs	r3, #0
 800e812:	3401      	adds	r4, #1
 800e814:	9305      	str	r3, [sp, #20]
 800e816:	4619      	mov	r1, r3
 800e818:	f04f 0c0a 	mov.w	ip, #10
 800e81c:	4620      	mov	r0, r4
 800e81e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e822:	3a30      	subs	r2, #48	@ 0x30
 800e824:	2a09      	cmp	r2, #9
 800e826:	d903      	bls.n	800e830 <_vfiprintf_r+0x1cc>
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d0c6      	beq.n	800e7ba <_vfiprintf_r+0x156>
 800e82c:	9105      	str	r1, [sp, #20]
 800e82e:	e7c4      	b.n	800e7ba <_vfiprintf_r+0x156>
 800e830:	fb0c 2101 	mla	r1, ip, r1, r2
 800e834:	4604      	mov	r4, r0
 800e836:	2301      	movs	r3, #1
 800e838:	e7f0      	b.n	800e81c <_vfiprintf_r+0x1b8>
 800e83a:	ab03      	add	r3, sp, #12
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	462a      	mov	r2, r5
 800e840:	4b12      	ldr	r3, [pc, #72]	@ (800e88c <_vfiprintf_r+0x228>)
 800e842:	a904      	add	r1, sp, #16
 800e844:	4630      	mov	r0, r6
 800e846:	f7fd ff37 	bl	800c6b8 <_printf_float>
 800e84a:	4607      	mov	r7, r0
 800e84c:	1c78      	adds	r0, r7, #1
 800e84e:	d1d6      	bne.n	800e7fe <_vfiprintf_r+0x19a>
 800e850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e852:	07d9      	lsls	r1, r3, #31
 800e854:	d405      	bmi.n	800e862 <_vfiprintf_r+0x1fe>
 800e856:	89ab      	ldrh	r3, [r5, #12]
 800e858:	059a      	lsls	r2, r3, #22
 800e85a:	d402      	bmi.n	800e862 <_vfiprintf_r+0x1fe>
 800e85c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e85e:	f7fe fc67 	bl	800d130 <__retarget_lock_release_recursive>
 800e862:	89ab      	ldrh	r3, [r5, #12]
 800e864:	065b      	lsls	r3, r3, #25
 800e866:	f53f af1f 	bmi.w	800e6a8 <_vfiprintf_r+0x44>
 800e86a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e86c:	e71e      	b.n	800e6ac <_vfiprintf_r+0x48>
 800e86e:	ab03      	add	r3, sp, #12
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	462a      	mov	r2, r5
 800e874:	4b05      	ldr	r3, [pc, #20]	@ (800e88c <_vfiprintf_r+0x228>)
 800e876:	a904      	add	r1, sp, #16
 800e878:	4630      	mov	r0, r6
 800e87a:	f7fe f9a5 	bl	800cbc8 <_printf_i>
 800e87e:	e7e4      	b.n	800e84a <_vfiprintf_r+0x1e6>
 800e880:	0800f046 	.word	0x0800f046
 800e884:	0800f050 	.word	0x0800f050
 800e888:	0800c6b9 	.word	0x0800c6b9
 800e88c:	0800e63f 	.word	0x0800e63f
 800e890:	0800f04c 	.word	0x0800f04c

0800e894 <__sflush_r>:
 800e894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e89c:	0716      	lsls	r6, r2, #28
 800e89e:	4605      	mov	r5, r0
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	d454      	bmi.n	800e94e <__sflush_r+0xba>
 800e8a4:	684b      	ldr	r3, [r1, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	dc02      	bgt.n	800e8b0 <__sflush_r+0x1c>
 800e8aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	dd48      	ble.n	800e942 <__sflush_r+0xae>
 800e8b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e8b2:	2e00      	cmp	r6, #0
 800e8b4:	d045      	beq.n	800e942 <__sflush_r+0xae>
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e8bc:	682f      	ldr	r7, [r5, #0]
 800e8be:	6a21      	ldr	r1, [r4, #32]
 800e8c0:	602b      	str	r3, [r5, #0]
 800e8c2:	d030      	beq.n	800e926 <__sflush_r+0x92>
 800e8c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e8c6:	89a3      	ldrh	r3, [r4, #12]
 800e8c8:	0759      	lsls	r1, r3, #29
 800e8ca:	d505      	bpl.n	800e8d8 <__sflush_r+0x44>
 800e8cc:	6863      	ldr	r3, [r4, #4]
 800e8ce:	1ad2      	subs	r2, r2, r3
 800e8d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e8d2:	b10b      	cbz	r3, 800e8d8 <__sflush_r+0x44>
 800e8d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e8d6:	1ad2      	subs	r2, r2, r3
 800e8d8:	2300      	movs	r3, #0
 800e8da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e8dc:	6a21      	ldr	r1, [r4, #32]
 800e8de:	4628      	mov	r0, r5
 800e8e0:	47b0      	blx	r6
 800e8e2:	1c43      	adds	r3, r0, #1
 800e8e4:	89a3      	ldrh	r3, [r4, #12]
 800e8e6:	d106      	bne.n	800e8f6 <__sflush_r+0x62>
 800e8e8:	6829      	ldr	r1, [r5, #0]
 800e8ea:	291d      	cmp	r1, #29
 800e8ec:	d82b      	bhi.n	800e946 <__sflush_r+0xb2>
 800e8ee:	4a2a      	ldr	r2, [pc, #168]	@ (800e998 <__sflush_r+0x104>)
 800e8f0:	40ca      	lsrs	r2, r1
 800e8f2:	07d6      	lsls	r6, r2, #31
 800e8f4:	d527      	bpl.n	800e946 <__sflush_r+0xb2>
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	6062      	str	r2, [r4, #4]
 800e8fa:	04d9      	lsls	r1, r3, #19
 800e8fc:	6922      	ldr	r2, [r4, #16]
 800e8fe:	6022      	str	r2, [r4, #0]
 800e900:	d504      	bpl.n	800e90c <__sflush_r+0x78>
 800e902:	1c42      	adds	r2, r0, #1
 800e904:	d101      	bne.n	800e90a <__sflush_r+0x76>
 800e906:	682b      	ldr	r3, [r5, #0]
 800e908:	b903      	cbnz	r3, 800e90c <__sflush_r+0x78>
 800e90a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e90c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e90e:	602f      	str	r7, [r5, #0]
 800e910:	b1b9      	cbz	r1, 800e942 <__sflush_r+0xae>
 800e912:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e916:	4299      	cmp	r1, r3
 800e918:	d002      	beq.n	800e920 <__sflush_r+0x8c>
 800e91a:	4628      	mov	r0, r5
 800e91c:	f7ff f9fe 	bl	800dd1c <_free_r>
 800e920:	2300      	movs	r3, #0
 800e922:	6363      	str	r3, [r4, #52]	@ 0x34
 800e924:	e00d      	b.n	800e942 <__sflush_r+0xae>
 800e926:	2301      	movs	r3, #1
 800e928:	4628      	mov	r0, r5
 800e92a:	47b0      	blx	r6
 800e92c:	4602      	mov	r2, r0
 800e92e:	1c50      	adds	r0, r2, #1
 800e930:	d1c9      	bne.n	800e8c6 <__sflush_r+0x32>
 800e932:	682b      	ldr	r3, [r5, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d0c6      	beq.n	800e8c6 <__sflush_r+0x32>
 800e938:	2b1d      	cmp	r3, #29
 800e93a:	d001      	beq.n	800e940 <__sflush_r+0xac>
 800e93c:	2b16      	cmp	r3, #22
 800e93e:	d11e      	bne.n	800e97e <__sflush_r+0xea>
 800e940:	602f      	str	r7, [r5, #0]
 800e942:	2000      	movs	r0, #0
 800e944:	e022      	b.n	800e98c <__sflush_r+0xf8>
 800e946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e94a:	b21b      	sxth	r3, r3
 800e94c:	e01b      	b.n	800e986 <__sflush_r+0xf2>
 800e94e:	690f      	ldr	r7, [r1, #16]
 800e950:	2f00      	cmp	r7, #0
 800e952:	d0f6      	beq.n	800e942 <__sflush_r+0xae>
 800e954:	0793      	lsls	r3, r2, #30
 800e956:	680e      	ldr	r6, [r1, #0]
 800e958:	bf08      	it	eq
 800e95a:	694b      	ldreq	r3, [r1, #20]
 800e95c:	600f      	str	r7, [r1, #0]
 800e95e:	bf18      	it	ne
 800e960:	2300      	movne	r3, #0
 800e962:	eba6 0807 	sub.w	r8, r6, r7
 800e966:	608b      	str	r3, [r1, #8]
 800e968:	f1b8 0f00 	cmp.w	r8, #0
 800e96c:	dde9      	ble.n	800e942 <__sflush_r+0xae>
 800e96e:	6a21      	ldr	r1, [r4, #32]
 800e970:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e972:	4643      	mov	r3, r8
 800e974:	463a      	mov	r2, r7
 800e976:	4628      	mov	r0, r5
 800e978:	47b0      	blx	r6
 800e97a:	2800      	cmp	r0, #0
 800e97c:	dc08      	bgt.n	800e990 <__sflush_r+0xfc>
 800e97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e986:	81a3      	strh	r3, [r4, #12]
 800e988:	f04f 30ff 	mov.w	r0, #4294967295
 800e98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e990:	4407      	add	r7, r0
 800e992:	eba8 0800 	sub.w	r8, r8, r0
 800e996:	e7e7      	b.n	800e968 <__sflush_r+0xd4>
 800e998:	20400001 	.word	0x20400001

0800e99c <_fflush_r>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	690b      	ldr	r3, [r1, #16]
 800e9a0:	4605      	mov	r5, r0
 800e9a2:	460c      	mov	r4, r1
 800e9a4:	b913      	cbnz	r3, 800e9ac <_fflush_r+0x10>
 800e9a6:	2500      	movs	r5, #0
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	bd38      	pop	{r3, r4, r5, pc}
 800e9ac:	b118      	cbz	r0, 800e9b6 <_fflush_r+0x1a>
 800e9ae:	6a03      	ldr	r3, [r0, #32]
 800e9b0:	b90b      	cbnz	r3, 800e9b6 <_fflush_r+0x1a>
 800e9b2:	f7fe fab3 	bl	800cf1c <__sinit>
 800e9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d0f3      	beq.n	800e9a6 <_fflush_r+0xa>
 800e9be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e9c0:	07d0      	lsls	r0, r2, #31
 800e9c2:	d404      	bmi.n	800e9ce <_fflush_r+0x32>
 800e9c4:	0599      	lsls	r1, r3, #22
 800e9c6:	d402      	bmi.n	800e9ce <_fflush_r+0x32>
 800e9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e9ca:	f7fe fbb0 	bl	800d12e <__retarget_lock_acquire_recursive>
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	4621      	mov	r1, r4
 800e9d2:	f7ff ff5f 	bl	800e894 <__sflush_r>
 800e9d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e9d8:	07da      	lsls	r2, r3, #31
 800e9da:	4605      	mov	r5, r0
 800e9dc:	d4e4      	bmi.n	800e9a8 <_fflush_r+0xc>
 800e9de:	89a3      	ldrh	r3, [r4, #12]
 800e9e0:	059b      	lsls	r3, r3, #22
 800e9e2:	d4e1      	bmi.n	800e9a8 <_fflush_r+0xc>
 800e9e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e9e6:	f7fe fba3 	bl	800d130 <__retarget_lock_release_recursive>
 800e9ea:	e7dd      	b.n	800e9a8 <_fflush_r+0xc>

0800e9ec <__swbuf_r>:
 800e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ee:	460e      	mov	r6, r1
 800e9f0:	4614      	mov	r4, r2
 800e9f2:	4605      	mov	r5, r0
 800e9f4:	b118      	cbz	r0, 800e9fe <__swbuf_r+0x12>
 800e9f6:	6a03      	ldr	r3, [r0, #32]
 800e9f8:	b90b      	cbnz	r3, 800e9fe <__swbuf_r+0x12>
 800e9fa:	f7fe fa8f 	bl	800cf1c <__sinit>
 800e9fe:	69a3      	ldr	r3, [r4, #24]
 800ea00:	60a3      	str	r3, [r4, #8]
 800ea02:	89a3      	ldrh	r3, [r4, #12]
 800ea04:	071a      	lsls	r2, r3, #28
 800ea06:	d501      	bpl.n	800ea0c <__swbuf_r+0x20>
 800ea08:	6923      	ldr	r3, [r4, #16]
 800ea0a:	b943      	cbnz	r3, 800ea1e <__swbuf_r+0x32>
 800ea0c:	4621      	mov	r1, r4
 800ea0e:	4628      	mov	r0, r5
 800ea10:	f000 f82a 	bl	800ea68 <__swsetup_r>
 800ea14:	b118      	cbz	r0, 800ea1e <__swbuf_r+0x32>
 800ea16:	f04f 37ff 	mov.w	r7, #4294967295
 800ea1a:	4638      	mov	r0, r7
 800ea1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	6922      	ldr	r2, [r4, #16]
 800ea22:	1a98      	subs	r0, r3, r2
 800ea24:	6963      	ldr	r3, [r4, #20]
 800ea26:	b2f6      	uxtb	r6, r6
 800ea28:	4283      	cmp	r3, r0
 800ea2a:	4637      	mov	r7, r6
 800ea2c:	dc05      	bgt.n	800ea3a <__swbuf_r+0x4e>
 800ea2e:	4621      	mov	r1, r4
 800ea30:	4628      	mov	r0, r5
 800ea32:	f7ff ffb3 	bl	800e99c <_fflush_r>
 800ea36:	2800      	cmp	r0, #0
 800ea38:	d1ed      	bne.n	800ea16 <__swbuf_r+0x2a>
 800ea3a:	68a3      	ldr	r3, [r4, #8]
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	60a3      	str	r3, [r4, #8]
 800ea40:	6823      	ldr	r3, [r4, #0]
 800ea42:	1c5a      	adds	r2, r3, #1
 800ea44:	6022      	str	r2, [r4, #0]
 800ea46:	701e      	strb	r6, [r3, #0]
 800ea48:	6962      	ldr	r2, [r4, #20]
 800ea4a:	1c43      	adds	r3, r0, #1
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d004      	beq.n	800ea5a <__swbuf_r+0x6e>
 800ea50:	89a3      	ldrh	r3, [r4, #12]
 800ea52:	07db      	lsls	r3, r3, #31
 800ea54:	d5e1      	bpl.n	800ea1a <__swbuf_r+0x2e>
 800ea56:	2e0a      	cmp	r6, #10
 800ea58:	d1df      	bne.n	800ea1a <__swbuf_r+0x2e>
 800ea5a:	4621      	mov	r1, r4
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	f7ff ff9d 	bl	800e99c <_fflush_r>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	d0d9      	beq.n	800ea1a <__swbuf_r+0x2e>
 800ea66:	e7d6      	b.n	800ea16 <__swbuf_r+0x2a>

0800ea68 <__swsetup_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4b29      	ldr	r3, [pc, #164]	@ (800eb10 <__swsetup_r+0xa8>)
 800ea6c:	4605      	mov	r5, r0
 800ea6e:	6818      	ldr	r0, [r3, #0]
 800ea70:	460c      	mov	r4, r1
 800ea72:	b118      	cbz	r0, 800ea7c <__swsetup_r+0x14>
 800ea74:	6a03      	ldr	r3, [r0, #32]
 800ea76:	b90b      	cbnz	r3, 800ea7c <__swsetup_r+0x14>
 800ea78:	f7fe fa50 	bl	800cf1c <__sinit>
 800ea7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea80:	0719      	lsls	r1, r3, #28
 800ea82:	d422      	bmi.n	800eaca <__swsetup_r+0x62>
 800ea84:	06da      	lsls	r2, r3, #27
 800ea86:	d407      	bmi.n	800ea98 <__swsetup_r+0x30>
 800ea88:	2209      	movs	r2, #9
 800ea8a:	602a      	str	r2, [r5, #0]
 800ea8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea90:	81a3      	strh	r3, [r4, #12]
 800ea92:	f04f 30ff 	mov.w	r0, #4294967295
 800ea96:	e033      	b.n	800eb00 <__swsetup_r+0x98>
 800ea98:	0758      	lsls	r0, r3, #29
 800ea9a:	d512      	bpl.n	800eac2 <__swsetup_r+0x5a>
 800ea9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea9e:	b141      	cbz	r1, 800eab2 <__swsetup_r+0x4a>
 800eaa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eaa4:	4299      	cmp	r1, r3
 800eaa6:	d002      	beq.n	800eaae <__swsetup_r+0x46>
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f7ff f937 	bl	800dd1c <_free_r>
 800eaae:	2300      	movs	r3, #0
 800eab0:	6363      	str	r3, [r4, #52]	@ 0x34
 800eab2:	89a3      	ldrh	r3, [r4, #12]
 800eab4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eab8:	81a3      	strh	r3, [r4, #12]
 800eaba:	2300      	movs	r3, #0
 800eabc:	6063      	str	r3, [r4, #4]
 800eabe:	6923      	ldr	r3, [r4, #16]
 800eac0:	6023      	str	r3, [r4, #0]
 800eac2:	89a3      	ldrh	r3, [r4, #12]
 800eac4:	f043 0308 	orr.w	r3, r3, #8
 800eac8:	81a3      	strh	r3, [r4, #12]
 800eaca:	6923      	ldr	r3, [r4, #16]
 800eacc:	b94b      	cbnz	r3, 800eae2 <__swsetup_r+0x7a>
 800eace:	89a3      	ldrh	r3, [r4, #12]
 800ead0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ead4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ead8:	d003      	beq.n	800eae2 <__swsetup_r+0x7a>
 800eada:	4621      	mov	r1, r4
 800eadc:	4628      	mov	r0, r5
 800eade:	f000 f8b3 	bl	800ec48 <__smakebuf_r>
 800eae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eae6:	f013 0201 	ands.w	r2, r3, #1
 800eaea:	d00a      	beq.n	800eb02 <__swsetup_r+0x9a>
 800eaec:	2200      	movs	r2, #0
 800eaee:	60a2      	str	r2, [r4, #8]
 800eaf0:	6962      	ldr	r2, [r4, #20]
 800eaf2:	4252      	negs	r2, r2
 800eaf4:	61a2      	str	r2, [r4, #24]
 800eaf6:	6922      	ldr	r2, [r4, #16]
 800eaf8:	b942      	cbnz	r2, 800eb0c <__swsetup_r+0xa4>
 800eafa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eafe:	d1c5      	bne.n	800ea8c <__swsetup_r+0x24>
 800eb00:	bd38      	pop	{r3, r4, r5, pc}
 800eb02:	0799      	lsls	r1, r3, #30
 800eb04:	bf58      	it	pl
 800eb06:	6962      	ldrpl	r2, [r4, #20]
 800eb08:	60a2      	str	r2, [r4, #8]
 800eb0a:	e7f4      	b.n	800eaf6 <__swsetup_r+0x8e>
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	e7f7      	b.n	800eb00 <__swsetup_r+0x98>
 800eb10:	2400001c 	.word	0x2400001c

0800eb14 <_sbrk_r>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	4d06      	ldr	r5, [pc, #24]	@ (800eb30 <_sbrk_r+0x1c>)
 800eb18:	2300      	movs	r3, #0
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	602b      	str	r3, [r5, #0]
 800eb20:	f7f3 fe1e 	bl	8002760 <_sbrk>
 800eb24:	1c43      	adds	r3, r0, #1
 800eb26:	d102      	bne.n	800eb2e <_sbrk_r+0x1a>
 800eb28:	682b      	ldr	r3, [r5, #0]
 800eb2a:	b103      	cbz	r3, 800eb2e <_sbrk_r+0x1a>
 800eb2c:	6023      	str	r3, [r4, #0]
 800eb2e:	bd38      	pop	{r3, r4, r5, pc}
 800eb30:	24000a80 	.word	0x24000a80

0800eb34 <__assert_func>:
 800eb34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb36:	4614      	mov	r4, r2
 800eb38:	461a      	mov	r2, r3
 800eb3a:	4b09      	ldr	r3, [pc, #36]	@ (800eb60 <__assert_func+0x2c>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	4605      	mov	r5, r0
 800eb40:	68d8      	ldr	r0, [r3, #12]
 800eb42:	b14c      	cbz	r4, 800eb58 <__assert_func+0x24>
 800eb44:	4b07      	ldr	r3, [pc, #28]	@ (800eb64 <__assert_func+0x30>)
 800eb46:	9100      	str	r1, [sp, #0]
 800eb48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb4c:	4906      	ldr	r1, [pc, #24]	@ (800eb68 <__assert_func+0x34>)
 800eb4e:	462b      	mov	r3, r5
 800eb50:	f000 f842 	bl	800ebd8 <fiprintf>
 800eb54:	f000 f8d6 	bl	800ed04 <abort>
 800eb58:	4b04      	ldr	r3, [pc, #16]	@ (800eb6c <__assert_func+0x38>)
 800eb5a:	461c      	mov	r4, r3
 800eb5c:	e7f3      	b.n	800eb46 <__assert_func+0x12>
 800eb5e:	bf00      	nop
 800eb60:	2400001c 	.word	0x2400001c
 800eb64:	0800f061 	.word	0x0800f061
 800eb68:	0800f06e 	.word	0x0800f06e
 800eb6c:	0800f09c 	.word	0x0800f09c

0800eb70 <_calloc_r>:
 800eb70:	b570      	push	{r4, r5, r6, lr}
 800eb72:	fba1 5402 	umull	r5, r4, r1, r2
 800eb76:	b934      	cbnz	r4, 800eb86 <_calloc_r+0x16>
 800eb78:	4629      	mov	r1, r5
 800eb7a:	f7ff f943 	bl	800de04 <_malloc_r>
 800eb7e:	4606      	mov	r6, r0
 800eb80:	b928      	cbnz	r0, 800eb8e <_calloc_r+0x1e>
 800eb82:	4630      	mov	r0, r6
 800eb84:	bd70      	pop	{r4, r5, r6, pc}
 800eb86:	220c      	movs	r2, #12
 800eb88:	6002      	str	r2, [r0, #0]
 800eb8a:	2600      	movs	r6, #0
 800eb8c:	e7f9      	b.n	800eb82 <_calloc_r+0x12>
 800eb8e:	462a      	mov	r2, r5
 800eb90:	4621      	mov	r1, r4
 800eb92:	f7fe fa4e 	bl	800d032 <memset>
 800eb96:	e7f4      	b.n	800eb82 <_calloc_r+0x12>

0800eb98 <__ascii_mbtowc>:
 800eb98:	b082      	sub	sp, #8
 800eb9a:	b901      	cbnz	r1, 800eb9e <__ascii_mbtowc+0x6>
 800eb9c:	a901      	add	r1, sp, #4
 800eb9e:	b142      	cbz	r2, 800ebb2 <__ascii_mbtowc+0x1a>
 800eba0:	b14b      	cbz	r3, 800ebb6 <__ascii_mbtowc+0x1e>
 800eba2:	7813      	ldrb	r3, [r2, #0]
 800eba4:	600b      	str	r3, [r1, #0]
 800eba6:	7812      	ldrb	r2, [r2, #0]
 800eba8:	1e10      	subs	r0, r2, #0
 800ebaa:	bf18      	it	ne
 800ebac:	2001      	movne	r0, #1
 800ebae:	b002      	add	sp, #8
 800ebb0:	4770      	bx	lr
 800ebb2:	4610      	mov	r0, r2
 800ebb4:	e7fb      	b.n	800ebae <__ascii_mbtowc+0x16>
 800ebb6:	f06f 0001 	mvn.w	r0, #1
 800ebba:	e7f8      	b.n	800ebae <__ascii_mbtowc+0x16>

0800ebbc <__ascii_wctomb>:
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	4608      	mov	r0, r1
 800ebc0:	b141      	cbz	r1, 800ebd4 <__ascii_wctomb+0x18>
 800ebc2:	2aff      	cmp	r2, #255	@ 0xff
 800ebc4:	d904      	bls.n	800ebd0 <__ascii_wctomb+0x14>
 800ebc6:	228a      	movs	r2, #138	@ 0x8a
 800ebc8:	601a      	str	r2, [r3, #0]
 800ebca:	f04f 30ff 	mov.w	r0, #4294967295
 800ebce:	4770      	bx	lr
 800ebd0:	700a      	strb	r2, [r1, #0]
 800ebd2:	2001      	movs	r0, #1
 800ebd4:	4770      	bx	lr
	...

0800ebd8 <fiprintf>:
 800ebd8:	b40e      	push	{r1, r2, r3}
 800ebda:	b503      	push	{r0, r1, lr}
 800ebdc:	4601      	mov	r1, r0
 800ebde:	ab03      	add	r3, sp, #12
 800ebe0:	4805      	ldr	r0, [pc, #20]	@ (800ebf8 <fiprintf+0x20>)
 800ebe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebe6:	6800      	ldr	r0, [r0, #0]
 800ebe8:	9301      	str	r3, [sp, #4]
 800ebea:	f7ff fd3b 	bl	800e664 <_vfiprintf_r>
 800ebee:	b002      	add	sp, #8
 800ebf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebf4:	b003      	add	sp, #12
 800ebf6:	4770      	bx	lr
 800ebf8:	2400001c 	.word	0x2400001c

0800ebfc <__swhatbuf_r>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	460c      	mov	r4, r1
 800ec00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec04:	2900      	cmp	r1, #0
 800ec06:	b096      	sub	sp, #88	@ 0x58
 800ec08:	4615      	mov	r5, r2
 800ec0a:	461e      	mov	r6, r3
 800ec0c:	da0d      	bge.n	800ec2a <__swhatbuf_r+0x2e>
 800ec0e:	89a3      	ldrh	r3, [r4, #12]
 800ec10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec14:	f04f 0100 	mov.w	r1, #0
 800ec18:	bf14      	ite	ne
 800ec1a:	2340      	movne	r3, #64	@ 0x40
 800ec1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec20:	2000      	movs	r0, #0
 800ec22:	6031      	str	r1, [r6, #0]
 800ec24:	602b      	str	r3, [r5, #0]
 800ec26:	b016      	add	sp, #88	@ 0x58
 800ec28:	bd70      	pop	{r4, r5, r6, pc}
 800ec2a:	466a      	mov	r2, sp
 800ec2c:	f000 f848 	bl	800ecc0 <_fstat_r>
 800ec30:	2800      	cmp	r0, #0
 800ec32:	dbec      	blt.n	800ec0e <__swhatbuf_r+0x12>
 800ec34:	9901      	ldr	r1, [sp, #4]
 800ec36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec3e:	4259      	negs	r1, r3
 800ec40:	4159      	adcs	r1, r3
 800ec42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec46:	e7eb      	b.n	800ec20 <__swhatbuf_r+0x24>

0800ec48 <__smakebuf_r>:
 800ec48:	898b      	ldrh	r3, [r1, #12]
 800ec4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec4c:	079d      	lsls	r5, r3, #30
 800ec4e:	4606      	mov	r6, r0
 800ec50:	460c      	mov	r4, r1
 800ec52:	d507      	bpl.n	800ec64 <__smakebuf_r+0x1c>
 800ec54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ec58:	6023      	str	r3, [r4, #0]
 800ec5a:	6123      	str	r3, [r4, #16]
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	6163      	str	r3, [r4, #20]
 800ec60:	b003      	add	sp, #12
 800ec62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec64:	ab01      	add	r3, sp, #4
 800ec66:	466a      	mov	r2, sp
 800ec68:	f7ff ffc8 	bl	800ebfc <__swhatbuf_r>
 800ec6c:	9f00      	ldr	r7, [sp, #0]
 800ec6e:	4605      	mov	r5, r0
 800ec70:	4639      	mov	r1, r7
 800ec72:	4630      	mov	r0, r6
 800ec74:	f7ff f8c6 	bl	800de04 <_malloc_r>
 800ec78:	b948      	cbnz	r0, 800ec8e <__smakebuf_r+0x46>
 800ec7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec7e:	059a      	lsls	r2, r3, #22
 800ec80:	d4ee      	bmi.n	800ec60 <__smakebuf_r+0x18>
 800ec82:	f023 0303 	bic.w	r3, r3, #3
 800ec86:	f043 0302 	orr.w	r3, r3, #2
 800ec8a:	81a3      	strh	r3, [r4, #12]
 800ec8c:	e7e2      	b.n	800ec54 <__smakebuf_r+0xc>
 800ec8e:	89a3      	ldrh	r3, [r4, #12]
 800ec90:	6020      	str	r0, [r4, #0]
 800ec92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec96:	81a3      	strh	r3, [r4, #12]
 800ec98:	9b01      	ldr	r3, [sp, #4]
 800ec9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec9e:	b15b      	cbz	r3, 800ecb8 <__smakebuf_r+0x70>
 800eca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eca4:	4630      	mov	r0, r6
 800eca6:	f000 f81d 	bl	800ece4 <_isatty_r>
 800ecaa:	b128      	cbz	r0, 800ecb8 <__smakebuf_r+0x70>
 800ecac:	89a3      	ldrh	r3, [r4, #12]
 800ecae:	f023 0303 	bic.w	r3, r3, #3
 800ecb2:	f043 0301 	orr.w	r3, r3, #1
 800ecb6:	81a3      	strh	r3, [r4, #12]
 800ecb8:	89a3      	ldrh	r3, [r4, #12]
 800ecba:	431d      	orrs	r5, r3
 800ecbc:	81a5      	strh	r5, [r4, #12]
 800ecbe:	e7cf      	b.n	800ec60 <__smakebuf_r+0x18>

0800ecc0 <_fstat_r>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	4d07      	ldr	r5, [pc, #28]	@ (800ece0 <_fstat_r+0x20>)
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	4608      	mov	r0, r1
 800ecca:	4611      	mov	r1, r2
 800eccc:	602b      	str	r3, [r5, #0]
 800ecce:	f7f3 fd1f 	bl	8002710 <_fstat>
 800ecd2:	1c43      	adds	r3, r0, #1
 800ecd4:	d102      	bne.n	800ecdc <_fstat_r+0x1c>
 800ecd6:	682b      	ldr	r3, [r5, #0]
 800ecd8:	b103      	cbz	r3, 800ecdc <_fstat_r+0x1c>
 800ecda:	6023      	str	r3, [r4, #0]
 800ecdc:	bd38      	pop	{r3, r4, r5, pc}
 800ecde:	bf00      	nop
 800ece0:	24000a80 	.word	0x24000a80

0800ece4 <_isatty_r>:
 800ece4:	b538      	push	{r3, r4, r5, lr}
 800ece6:	4d06      	ldr	r5, [pc, #24]	@ (800ed00 <_isatty_r+0x1c>)
 800ece8:	2300      	movs	r3, #0
 800ecea:	4604      	mov	r4, r0
 800ecec:	4608      	mov	r0, r1
 800ecee:	602b      	str	r3, [r5, #0]
 800ecf0:	f7f3 fd1e 	bl	8002730 <_isatty>
 800ecf4:	1c43      	adds	r3, r0, #1
 800ecf6:	d102      	bne.n	800ecfe <_isatty_r+0x1a>
 800ecf8:	682b      	ldr	r3, [r5, #0]
 800ecfa:	b103      	cbz	r3, 800ecfe <_isatty_r+0x1a>
 800ecfc:	6023      	str	r3, [r4, #0]
 800ecfe:	bd38      	pop	{r3, r4, r5, pc}
 800ed00:	24000a80 	.word	0x24000a80

0800ed04 <abort>:
 800ed04:	b508      	push	{r3, lr}
 800ed06:	2006      	movs	r0, #6
 800ed08:	f000 f82c 	bl	800ed64 <raise>
 800ed0c:	2001      	movs	r0, #1
 800ed0e:	f7f3 fcaf 	bl	8002670 <_exit>

0800ed12 <_raise_r>:
 800ed12:	291f      	cmp	r1, #31
 800ed14:	b538      	push	{r3, r4, r5, lr}
 800ed16:	4605      	mov	r5, r0
 800ed18:	460c      	mov	r4, r1
 800ed1a:	d904      	bls.n	800ed26 <_raise_r+0x14>
 800ed1c:	2316      	movs	r3, #22
 800ed1e:	6003      	str	r3, [r0, #0]
 800ed20:	f04f 30ff 	mov.w	r0, #4294967295
 800ed24:	bd38      	pop	{r3, r4, r5, pc}
 800ed26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ed28:	b112      	cbz	r2, 800ed30 <_raise_r+0x1e>
 800ed2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed2e:	b94b      	cbnz	r3, 800ed44 <_raise_r+0x32>
 800ed30:	4628      	mov	r0, r5
 800ed32:	f000 f831 	bl	800ed98 <_getpid_r>
 800ed36:	4622      	mov	r2, r4
 800ed38:	4601      	mov	r1, r0
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed40:	f000 b818 	b.w	800ed74 <_kill_r>
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d00a      	beq.n	800ed5e <_raise_r+0x4c>
 800ed48:	1c59      	adds	r1, r3, #1
 800ed4a:	d103      	bne.n	800ed54 <_raise_r+0x42>
 800ed4c:	2316      	movs	r3, #22
 800ed4e:	6003      	str	r3, [r0, #0]
 800ed50:	2001      	movs	r0, #1
 800ed52:	e7e7      	b.n	800ed24 <_raise_r+0x12>
 800ed54:	2100      	movs	r1, #0
 800ed56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	4798      	blx	r3
 800ed5e:	2000      	movs	r0, #0
 800ed60:	e7e0      	b.n	800ed24 <_raise_r+0x12>
	...

0800ed64 <raise>:
 800ed64:	4b02      	ldr	r3, [pc, #8]	@ (800ed70 <raise+0xc>)
 800ed66:	4601      	mov	r1, r0
 800ed68:	6818      	ldr	r0, [r3, #0]
 800ed6a:	f7ff bfd2 	b.w	800ed12 <_raise_r>
 800ed6e:	bf00      	nop
 800ed70:	2400001c 	.word	0x2400001c

0800ed74 <_kill_r>:
 800ed74:	b538      	push	{r3, r4, r5, lr}
 800ed76:	4d07      	ldr	r5, [pc, #28]	@ (800ed94 <_kill_r+0x20>)
 800ed78:	2300      	movs	r3, #0
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	4608      	mov	r0, r1
 800ed7e:	4611      	mov	r1, r2
 800ed80:	602b      	str	r3, [r5, #0]
 800ed82:	f7f3 fc65 	bl	8002650 <_kill>
 800ed86:	1c43      	adds	r3, r0, #1
 800ed88:	d102      	bne.n	800ed90 <_kill_r+0x1c>
 800ed8a:	682b      	ldr	r3, [r5, #0]
 800ed8c:	b103      	cbz	r3, 800ed90 <_kill_r+0x1c>
 800ed8e:	6023      	str	r3, [r4, #0]
 800ed90:	bd38      	pop	{r3, r4, r5, pc}
 800ed92:	bf00      	nop
 800ed94:	24000a80 	.word	0x24000a80

0800ed98 <_getpid_r>:
 800ed98:	f7f3 bc52 	b.w	8002640 <_getpid>

0800ed9c <_init>:
 800ed9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed9e:	bf00      	nop
 800eda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eda2:	bc08      	pop	{r3}
 800eda4:	469e      	mov	lr, r3
 800eda6:	4770      	bx	lr

0800eda8 <_fini>:
 800eda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edaa:	bf00      	nop
 800edac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edae:	bc08      	pop	{r3}
 800edb0:	469e      	mov	lr, r3
 800edb2:	4770      	bx	lr
