
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecb0  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800ef60  0800ef60  0000ff60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f394  0800f394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f39c  0800f39c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f3a0  0800f3a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800f3a4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c28  240001d8  0800f57c  000111d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e00  0800f57c  00011e00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e4b2  00000000  00000000  00011206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003e2c  00000000  00000000  0002f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013b0  00000000  00000000  000334e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f20  00000000  00000000  00034898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033853  00000000  00000000  000357b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ea88  00000000  00000000  0006900b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e131  00000000  00000000  00087a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c5bc4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f20  00000000  00000000  001c5c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  001cbb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ef48 	.word	0x0800ef48

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	0800ef48 	.word	0x0800ef48

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_ldivmod>:
 80003a0:	b97b      	cbnz	r3, 80003c2 <__aeabi_ldivmod+0x22>
 80003a2:	b972      	cbnz	r2, 80003c2 <__aeabi_ldivmod+0x22>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bfbe      	ittt	lt
 80003a8:	2000      	movlt	r0, #0
 80003aa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003ae:	e006      	blt.n	80003be <__aeabi_ldivmod+0x1e>
 80003b0:	bf08      	it	eq
 80003b2:	2800      	cmpeq	r0, #0
 80003b4:	bf1c      	itt	ne
 80003b6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ba:	f04f 30ff 	movne.w	r0, #4294967295
 80003be:	f000 b9d3 	b.w	8000768 <__aeabi_idiv0>
 80003c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ca:	2900      	cmp	r1, #0
 80003cc:	db09      	blt.n	80003e2 <__aeabi_ldivmod+0x42>
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db1a      	blt.n	8000408 <__aeabi_ldivmod+0x68>
 80003d2:	f000 f84d 	bl	8000470 <__udivmoddi4>
 80003d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003de:	b004      	add	sp, #16
 80003e0:	4770      	bx	lr
 80003e2:	4240      	negs	r0, r0
 80003e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db1b      	blt.n	8000424 <__aeabi_ldivmod+0x84>
 80003ec:	f000 f840 	bl	8000470 <__udivmoddi4>
 80003f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003f8:	b004      	add	sp, #16
 80003fa:	4240      	negs	r0, r0
 80003fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000400:	4252      	negs	r2, r2
 8000402:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000406:	4770      	bx	lr
 8000408:	4252      	negs	r2, r2
 800040a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800040e:	f000 f82f 	bl	8000470 <__udivmoddi4>
 8000412:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800041a:	b004      	add	sp, #16
 800041c:	4240      	negs	r0, r0
 800041e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000422:	4770      	bx	lr
 8000424:	4252      	negs	r2, r2
 8000426:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042a:	f000 f821 	bl	8000470 <__udivmoddi4>
 800042e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000436:	b004      	add	sp, #16
 8000438:	4252      	negs	r2, r2
 800043a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043e:	4770      	bx	lr

08000440 <__aeabi_uldivmod>:
 8000440:	b953      	cbnz	r3, 8000458 <__aeabi_uldivmod+0x18>
 8000442:	b94a      	cbnz	r2, 8000458 <__aeabi_uldivmod+0x18>
 8000444:	2900      	cmp	r1, #0
 8000446:	bf08      	it	eq
 8000448:	2800      	cmpeq	r0, #0
 800044a:	bf1c      	itt	ne
 800044c:	f04f 31ff 	movne.w	r1, #4294967295
 8000450:	f04f 30ff 	movne.w	r0, #4294967295
 8000454:	f000 b988 	b.w	8000768 <__aeabi_idiv0>
 8000458:	f1ad 0c08 	sub.w	ip, sp, #8
 800045c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000460:	f000 f806 	bl	8000470 <__udivmoddi4>
 8000464:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800046c:	b004      	add	sp, #16
 800046e:	4770      	bx	lr

08000470 <__udivmoddi4>:
 8000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000474:	9d08      	ldr	r5, [sp, #32]
 8000476:	468e      	mov	lr, r1
 8000478:	4604      	mov	r4, r0
 800047a:	4688      	mov	r8, r1
 800047c:	2b00      	cmp	r3, #0
 800047e:	d14a      	bne.n	8000516 <__udivmoddi4+0xa6>
 8000480:	428a      	cmp	r2, r1
 8000482:	4617      	mov	r7, r2
 8000484:	d962      	bls.n	800054c <__udivmoddi4+0xdc>
 8000486:	fab2 f682 	clz	r6, r2
 800048a:	b14e      	cbz	r6, 80004a0 <__udivmoddi4+0x30>
 800048c:	f1c6 0320 	rsb	r3, r6, #32
 8000490:	fa01 f806 	lsl.w	r8, r1, r6
 8000494:	fa20 f303 	lsr.w	r3, r0, r3
 8000498:	40b7      	lsls	r7, r6
 800049a:	ea43 0808 	orr.w	r8, r3, r8
 800049e:	40b4      	lsls	r4, r6
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80004b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b6:	fb01 f20c 	mul.w	r2, r1, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0x62>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80004c4:	f080 80ea 	bcs.w	800069c <__udivmoddi4+0x22c>
 80004c8:	429a      	cmp	r2, r3
 80004ca:	f240 80e7 	bls.w	800069c <__udivmoddi4+0x22c>
 80004ce:	3902      	subs	r1, #2
 80004d0:	443b      	add	r3, r7
 80004d2:	1a9a      	subs	r2, r3, r2
 80004d4:	b2a3      	uxth	r3, r4
 80004d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004da:	fb0e 2210 	mls	r2, lr, r0, r2
 80004de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80004e6:	459c      	cmp	ip, r3
 80004e8:	d909      	bls.n	80004fe <__udivmoddi4+0x8e>
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f0:	f080 80d6 	bcs.w	80006a0 <__udivmoddi4+0x230>
 80004f4:	459c      	cmp	ip, r3
 80004f6:	f240 80d3 	bls.w	80006a0 <__udivmoddi4+0x230>
 80004fa:	443b      	add	r3, r7
 80004fc:	3802      	subs	r0, #2
 80004fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000502:	eba3 030c 	sub.w	r3, r3, ip
 8000506:	2100      	movs	r1, #0
 8000508:	b11d      	cbz	r5, 8000512 <__udivmoddi4+0xa2>
 800050a:	40f3      	lsrs	r3, r6
 800050c:	2200      	movs	r2, #0
 800050e:	e9c5 3200 	strd	r3, r2, [r5]
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	428b      	cmp	r3, r1
 8000518:	d905      	bls.n	8000526 <__udivmoddi4+0xb6>
 800051a:	b10d      	cbz	r5, 8000520 <__udivmoddi4+0xb0>
 800051c:	e9c5 0100 	strd	r0, r1, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	4608      	mov	r0, r1
 8000524:	e7f5      	b.n	8000512 <__udivmoddi4+0xa2>
 8000526:	fab3 f183 	clz	r1, r3
 800052a:	2900      	cmp	r1, #0
 800052c:	d146      	bne.n	80005bc <__udivmoddi4+0x14c>
 800052e:	4573      	cmp	r3, lr
 8000530:	d302      	bcc.n	8000538 <__udivmoddi4+0xc8>
 8000532:	4282      	cmp	r2, r0
 8000534:	f200 8105 	bhi.w	8000742 <__udivmoddi4+0x2d2>
 8000538:	1a84      	subs	r4, r0, r2
 800053a:	eb6e 0203 	sbc.w	r2, lr, r3
 800053e:	2001      	movs	r0, #1
 8000540:	4690      	mov	r8, r2
 8000542:	2d00      	cmp	r5, #0
 8000544:	d0e5      	beq.n	8000512 <__udivmoddi4+0xa2>
 8000546:	e9c5 4800 	strd	r4, r8, [r5]
 800054a:	e7e2      	b.n	8000512 <__udivmoddi4+0xa2>
 800054c:	2a00      	cmp	r2, #0
 800054e:	f000 8090 	beq.w	8000672 <__udivmoddi4+0x202>
 8000552:	fab2 f682 	clz	r6, r2
 8000556:	2e00      	cmp	r6, #0
 8000558:	f040 80a4 	bne.w	80006a4 <__udivmoddi4+0x234>
 800055c:	1a8a      	subs	r2, r1, r2
 800055e:	0c03      	lsrs	r3, r0, #16
 8000560:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000564:	b280      	uxth	r0, r0
 8000566:	b2bc      	uxth	r4, r7
 8000568:	2101      	movs	r1, #1
 800056a:	fbb2 fcfe 	udiv	ip, r2, lr
 800056e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000576:	fb04 f20c 	mul.w	r2, r4, ip
 800057a:	429a      	cmp	r2, r3
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x11e>
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000584:	d202      	bcs.n	800058c <__udivmoddi4+0x11c>
 8000586:	429a      	cmp	r2, r3
 8000588:	f200 80e0 	bhi.w	800074c <__udivmoddi4+0x2dc>
 800058c:	46c4      	mov	ip, r8
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	fbb3 f2fe 	udiv	r2, r3, lr
 8000594:	fb0e 3312 	mls	r3, lr, r2, r3
 8000598:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800059c:	fb02 f404 	mul.w	r4, r2, r4
 80005a0:	429c      	cmp	r4, r3
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x144>
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80005aa:	d202      	bcs.n	80005b2 <__udivmoddi4+0x142>
 80005ac:	429c      	cmp	r4, r3
 80005ae:	f200 80ca 	bhi.w	8000746 <__udivmoddi4+0x2d6>
 80005b2:	4602      	mov	r2, r0
 80005b4:	1b1b      	subs	r3, r3, r4
 80005b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80005ba:	e7a5      	b.n	8000508 <__udivmoddi4+0x98>
 80005bc:	f1c1 0620 	rsb	r6, r1, #32
 80005c0:	408b      	lsls	r3, r1
 80005c2:	fa22 f706 	lsr.w	r7, r2, r6
 80005c6:	431f      	orrs	r7, r3
 80005c8:	fa0e f401 	lsl.w	r4, lr, r1
 80005cc:	fa20 f306 	lsr.w	r3, r0, r6
 80005d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80005d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80005d8:	4323      	orrs	r3, r4
 80005da:	fa00 f801 	lsl.w	r8, r0, r1
 80005de:	fa1f fc87 	uxth.w	ip, r7
 80005e2:	fbbe f0f9 	udiv	r0, lr, r9
 80005e6:	0c1c      	lsrs	r4, r3, #16
 80005e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80005ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80005f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80005f4:	45a6      	cmp	lr, r4
 80005f6:	fa02 f201 	lsl.w	r2, r2, r1
 80005fa:	d909      	bls.n	8000610 <__udivmoddi4+0x1a0>
 80005fc:	193c      	adds	r4, r7, r4
 80005fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000602:	f080 809c 	bcs.w	800073e <__udivmoddi4+0x2ce>
 8000606:	45a6      	cmp	lr, r4
 8000608:	f240 8099 	bls.w	800073e <__udivmoddi4+0x2ce>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	eba4 040e 	sub.w	r4, r4, lr
 8000614:	fa1f fe83 	uxth.w	lr, r3
 8000618:	fbb4 f3f9 	udiv	r3, r4, r9
 800061c:	fb09 4413 	mls	r4, r9, r3, r4
 8000620:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000624:	fb03 fc0c 	mul.w	ip, r3, ip
 8000628:	45a4      	cmp	ip, r4
 800062a:	d908      	bls.n	800063e <__udivmoddi4+0x1ce>
 800062c:	193c      	adds	r4, r7, r4
 800062e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000632:	f080 8082 	bcs.w	800073a <__udivmoddi4+0x2ca>
 8000636:	45a4      	cmp	ip, r4
 8000638:	d97f      	bls.n	800073a <__udivmoddi4+0x2ca>
 800063a:	3b02      	subs	r3, #2
 800063c:	443c      	add	r4, r7
 800063e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000642:	eba4 040c 	sub.w	r4, r4, ip
 8000646:	fba0 ec02 	umull	lr, ip, r0, r2
 800064a:	4564      	cmp	r4, ip
 800064c:	4673      	mov	r3, lr
 800064e:	46e1      	mov	r9, ip
 8000650:	d362      	bcc.n	8000718 <__udivmoddi4+0x2a8>
 8000652:	d05f      	beq.n	8000714 <__udivmoddi4+0x2a4>
 8000654:	b15d      	cbz	r5, 800066e <__udivmoddi4+0x1fe>
 8000656:	ebb8 0203 	subs.w	r2, r8, r3
 800065a:	eb64 0409 	sbc.w	r4, r4, r9
 800065e:	fa04 f606 	lsl.w	r6, r4, r6
 8000662:	fa22 f301 	lsr.w	r3, r2, r1
 8000666:	431e      	orrs	r6, r3
 8000668:	40cc      	lsrs	r4, r1
 800066a:	e9c5 6400 	strd	r6, r4, [r5]
 800066e:	2100      	movs	r1, #0
 8000670:	e74f      	b.n	8000512 <__udivmoddi4+0xa2>
 8000672:	fbb1 fcf2 	udiv	ip, r1, r2
 8000676:	0c01      	lsrs	r1, r0, #16
 8000678:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800067c:	b280      	uxth	r0, r0
 800067e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000682:	463b      	mov	r3, r7
 8000684:	4638      	mov	r0, r7
 8000686:	463c      	mov	r4, r7
 8000688:	46b8      	mov	r8, r7
 800068a:	46be      	mov	lr, r7
 800068c:	2620      	movs	r6, #32
 800068e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000692:	eba2 0208 	sub.w	r2, r2, r8
 8000696:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800069a:	e766      	b.n	800056a <__udivmoddi4+0xfa>
 800069c:	4601      	mov	r1, r0
 800069e:	e718      	b.n	80004d2 <__udivmoddi4+0x62>
 80006a0:	4610      	mov	r0, r2
 80006a2:	e72c      	b.n	80004fe <__udivmoddi4+0x8e>
 80006a4:	f1c6 0220 	rsb	r2, r6, #32
 80006a8:	fa2e f302 	lsr.w	r3, lr, r2
 80006ac:	40b7      	lsls	r7, r6
 80006ae:	40b1      	lsls	r1, r6
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006b8:	430a      	orrs	r2, r1
 80006ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80006be:	b2bc      	uxth	r4, r7
 80006c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80006c4:	0c11      	lsrs	r1, r2, #16
 80006c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ca:	fb08 f904 	mul.w	r9, r8, r4
 80006ce:	40b0      	lsls	r0, r6
 80006d0:	4589      	cmp	r9, r1
 80006d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80006d6:	b280      	uxth	r0, r0
 80006d8:	d93e      	bls.n	8000758 <__udivmoddi4+0x2e8>
 80006da:	1879      	adds	r1, r7, r1
 80006dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80006e0:	d201      	bcs.n	80006e6 <__udivmoddi4+0x276>
 80006e2:	4589      	cmp	r9, r1
 80006e4:	d81f      	bhi.n	8000726 <__udivmoddi4+0x2b6>
 80006e6:	eba1 0109 	sub.w	r1, r1, r9
 80006ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80006ee:	fb09 f804 	mul.w	r8, r9, r4
 80006f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80006f6:	b292      	uxth	r2, r2
 80006f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006fc:	4542      	cmp	r2, r8
 80006fe:	d229      	bcs.n	8000754 <__udivmoddi4+0x2e4>
 8000700:	18ba      	adds	r2, r7, r2
 8000702:	f109 31ff 	add.w	r1, r9, #4294967295
 8000706:	d2c4      	bcs.n	8000692 <__udivmoddi4+0x222>
 8000708:	4542      	cmp	r2, r8
 800070a:	d2c2      	bcs.n	8000692 <__udivmoddi4+0x222>
 800070c:	f1a9 0102 	sub.w	r1, r9, #2
 8000710:	443a      	add	r2, r7
 8000712:	e7be      	b.n	8000692 <__udivmoddi4+0x222>
 8000714:	45f0      	cmp	r8, lr
 8000716:	d29d      	bcs.n	8000654 <__udivmoddi4+0x1e4>
 8000718:	ebbe 0302 	subs.w	r3, lr, r2
 800071c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000720:	3801      	subs	r0, #1
 8000722:	46e1      	mov	r9, ip
 8000724:	e796      	b.n	8000654 <__udivmoddi4+0x1e4>
 8000726:	eba7 0909 	sub.w	r9, r7, r9
 800072a:	4449      	add	r1, r9
 800072c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000730:	fbb1 f9fe 	udiv	r9, r1, lr
 8000734:	fb09 f804 	mul.w	r8, r9, r4
 8000738:	e7db      	b.n	80006f2 <__udivmoddi4+0x282>
 800073a:	4673      	mov	r3, lr
 800073c:	e77f      	b.n	800063e <__udivmoddi4+0x1ce>
 800073e:	4650      	mov	r0, sl
 8000740:	e766      	b.n	8000610 <__udivmoddi4+0x1a0>
 8000742:	4608      	mov	r0, r1
 8000744:	e6fd      	b.n	8000542 <__udivmoddi4+0xd2>
 8000746:	443b      	add	r3, r7
 8000748:	3a02      	subs	r2, #2
 800074a:	e733      	b.n	80005b4 <__udivmoddi4+0x144>
 800074c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000750:	443b      	add	r3, r7
 8000752:	e71c      	b.n	800058e <__udivmoddi4+0x11e>
 8000754:	4649      	mov	r1, r9
 8000756:	e79c      	b.n	8000692 <__udivmoddi4+0x222>
 8000758:	eba1 0109 	sub.w	r1, r1, r9
 800075c:	46c4      	mov	ip, r8
 800075e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000762:	fb09 f804 	mul.w	r8, r9, r4
 8000766:	e7c4      	b.n	80006f2 <__udivmoddi4+0x282>

08000768 <__aeabi_idiv0>:
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000772:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <MX_DMA_Init+0x7c>)
 8000774:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000778:	4a1b      	ldr	r2, [pc, #108]	@ (80007e8 <MX_DMA_Init+0x7c>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_DMA_Init+0x7c>)
 8000784:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	200b      	movs	r0, #11
 8000796:	f001 fd0a 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800079a:	200b      	movs	r0, #11
 800079c:	f001 fd21 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	200c      	movs	r0, #12
 80007a6:	f001 fd02 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007aa:	200c      	movs	r0, #12
 80007ac:	f001 fd19 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	200d      	movs	r0, #13
 80007b6:	f001 fcfa 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80007ba:	200d      	movs	r0, #13
 80007bc:	f001 fd11 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	200e      	movs	r0, #14
 80007c6:	f001 fcf2 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007ca:	200e      	movs	r0, #14
 80007cc:	f001 fd09 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2010      	movs	r0, #16
 80007d6:	f001 fcea 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007da:	2010      	movs	r0, #16
 80007dc:	f001 fd01 	bl	80021e2 <HAL_NVIC_EnableIRQ>

}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	58024400 	.word	0x58024400

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	@ 0x30
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b99      	ldr	r3, [pc, #612]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 8000804:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000808:	4a97      	ldr	r2, [pc, #604]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000812:	4b95      	ldr	r3, [pc, #596]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 8000814:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000820:	4b91      	ldr	r3, [pc, #580]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 8000822:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000826:	4a90      	ldr	r2, [pc, #576]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000830:	4b8d      	ldr	r3, [pc, #564]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 8000832:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b8a      	ldr	r3, [pc, #552]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000844:	4a88      	ldr	r2, [pc, #544]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800084e:	4b86      	ldr	r3, [pc, #536]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 8000850:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085c:	4b82      	ldr	r3, [pc, #520]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000862:	4a81      	ldr	r2, [pc, #516]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800086c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 800086e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	4b7b      	ldr	r3, [pc, #492]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000880:	4a79      	ldr	r2, [pc, #484]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800088a:	4b77      	ldr	r3, [pc, #476]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 800088c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000898:	4b73      	ldr	r3, [pc, #460]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800089e:	4a72      	ldr	r2, [pc, #456]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008a8:	4b6f      	ldr	r3, [pc, #444]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 80008aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	4b6c      	ldr	r3, [pc, #432]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008bc:	4a6a      	ldr	r2, [pc, #424]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 80008be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008c6:	4b68      	ldr	r3, [pc, #416]	@ (8000a68 <MX_GPIO_Init+0x27c>)
 80008c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU6500_AD0_GPIO_Port, MPU6500_AD0_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2108      	movs	r1, #8
 80008d8:	4864      	ldr	r0, [pc, #400]	@ (8000a6c <MX_GPIO_Init+0x280>)
 80008da:	f004 fdaf 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008e4:	4862      	ldr	r0, [pc, #392]	@ (8000a70 <MX_GPIO_Init+0x284>)
 80008e6:	f004 fda9 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME280_CS_GPIO_Port, BME280_CS_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008f0:	4860      	ldr	r0, [pc, #384]	@ (8000a74 <MX_GPIO_Init+0x288>)
 80008f2:	f004 fda3 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fc:	485e      	ldr	r0, [pc, #376]	@ (8000a78 <MX_GPIO_Init+0x28c>)
 80008fe:	f004 fd9d 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000908:	485b      	ldr	r0, [pc, #364]	@ (8000a78 <MX_GPIO_Init+0x28c>)
 800090a:	f004 fd97 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2140      	movs	r1, #64	@ 0x40
 8000912:	485a      	ldr	r0, [pc, #360]	@ (8000a7c <MX_GPIO_Init+0x290>)
 8000914:	f004 fd92 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091e:	4858      	ldr	r0, [pc, #352]	@ (8000a80 <MX_GPIO_Init+0x294>)
 8000920:	f004 fd8c 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_BLK_GPIO_Port, ST7789_BLK_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2110      	movs	r1, #16
 8000928:	4851      	ldr	r0, [pc, #324]	@ (8000a70 <MX_GPIO_Init+0x284>)
 800092a:	f004 fd87 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2102      	movs	r1, #2
 8000932:	4850      	ldr	r0, [pc, #320]	@ (8000a74 <MX_GPIO_Init+0x288>)
 8000934:	f004 fd82 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : InputButton_Pin */
  GPIO_InitStruct.Pin = InputButton_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(InputButton_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	484b      	ldr	r0, [pc, #300]	@ (8000a7c <MX_GPIO_Init+0x290>)
 8000950:	f004 fbc4 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6500_AD0_Pin */
  GPIO_InitStruct.Pin = MPU6500_AD0_Pin;
 8000954:	2308      	movs	r3, #8
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MPU6500_AD0_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4840      	ldr	r0, [pc, #256]	@ (8000a6c <MX_GPIO_Init+0x280>)
 800096c:	f004 fbb6 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin ST7789_BLK_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ST7789_BLK_Pin;
 8000970:	f244 0311 	movw	r3, #16401	@ 0x4011
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4839      	ldr	r0, [pc, #228]	@ (8000a70 <MX_GPIO_Init+0x284>)
 800098a:	f004 fba7 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX30102_INT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin;
 800098e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000994:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099a:	2301      	movs	r3, #1
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MAX30102_INT_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4833      	ldr	r0, [pc, #204]	@ (8000a74 <MX_GPIO_Init+0x288>)
 80009a6:	f004 fb99 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BME280_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = BME280_CS_Pin|LD2_Pin;
 80009aa:	f248 0302 	movw	r3, #32770	@ 0x8002
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	482c      	ldr	r0, [pc, #176]	@ (8000a74 <MX_GPIO_Init+0x288>)
 80009c4:	f004 fb8a 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 80009c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	2302      	movs	r3, #2
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4825      	ldr	r0, [pc, #148]	@ (8000a78 <MX_GPIO_Init+0x28c>)
 80009e2:	f004 fb7b 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 80009e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	481e      	ldr	r0, [pc, #120]	@ (8000a78 <MX_GPIO_Init+0x28c>)
 8000a00:	f004 fb6c 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a04:	2340      	movs	r3, #64	@ 0x40
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4818      	ldr	r0, [pc, #96]	@ (8000a7c <MX_GPIO_Init+0x290>)
 8000a1c:	f004 fb5e 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8000a20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4811      	ldr	r0, [pc, #68]	@ (8000a80 <MX_GPIO_Init+0x294>)
 8000a3a:	f004 fb4f 	bl	80050dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2017      	movs	r0, #23
 8000a44:	f001 fbb3 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a48:	2017      	movs	r0, #23
 8000a4a:	f001 fbca 	bl	80021e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2028      	movs	r0, #40	@ 0x28
 8000a54:	f001 fbab 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a58:	2028      	movs	r0, #40	@ 0x28
 8000a5a:	f001 fbc2 	bl	80021e2 <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	@ 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	58024400 	.word	0x58024400
 8000a6c:	58020000 	.word	0x58020000
 8000a70:	58020400 	.word	0x58020400
 8000a74:	58021000 	.word	0x58021000
 8000a78:	58020c00 	.word	0x58020c00
 8000a7c:	58020800 	.word	0x58020800
 8000a80:	58021800 	.word	0x58021800

08000a84 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000afc <MX_I2C1_Init+0x78>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000a90:	4a1b      	ldr	r2, [pc, #108]	@ (8000b00 <MX_I2C1_Init+0x7c>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000abe:	480e      	ldr	r0, [pc, #56]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000ac0:	f004 fcf0 	bl	80054a4 <HAL_I2C_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aca:	f000 fbd1 	bl	8001270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000ad2:	f005 fb85 	bl	80061e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000adc:	f000 fbc8 	bl	8001270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_I2C1_Init+0x74>)
 8000ae4:	f005 fbc7 	bl	8006276 <HAL_I2CEx_ConfigDigitalFilter>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aee:	f000 fbbf 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	240001f4 	.word	0x240001f4
 8000afc:	40005400 	.word	0x40005400
 8000b00:	20b0ccff 	.word	0x20b0ccff

08000b04 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <MX_I2C2_Init+0x78>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b10:	4a1b      	ldr	r2, [pc, #108]	@ (8000b80 <MX_I2C2_Init+0x7c>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b3e:	480e      	ldr	r0, [pc, #56]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b40:	f004 fcb0 	bl	80054a4 <HAL_I2C_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b4a:	f000 fb91 	bl	8001270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b52:	f005 fb45 	bl	80061e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b5c:	f000 fb88 	bl	8001270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_I2C2_Init+0x74>)
 8000b64:	f005 fb87 	bl	8006276 <HAL_I2CEx_ConfigDigitalFilter>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b6e:	f000 fb7f 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	24000248 	.word	0x24000248
 8000b7c:	40005800 	.word	0x40005800
 8000b80:	20b0ccff 	.word	0x20b0ccff

08000b84 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bfc <MX_I2C4_Init+0x78>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0CCFF;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000b90:	4a1b      	ldr	r2, [pc, #108]	@ (8000c00 <MX_I2C4_Init+0x7c>)
 8000b92:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000bbe:	480e      	ldr	r0, [pc, #56]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000bc0:	f004 fc70 	bl	80054a4 <HAL_I2C_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000bca:	f000 fb51 	bl	8001270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4809      	ldr	r0, [pc, #36]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000bd2:	f005 fb05 	bl	80061e0 <HAL_I2CEx_ConfigAnalogFilter>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000bdc:	f000 fb48 	bl	8001270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_I2C4_Init+0x74>)
 8000be4:	f005 fb47 	bl	8006276 <HAL_I2CEx_ConfigDigitalFilter>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000bee:	f000 fb3f 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2400029c 	.word	0x2400029c
 8000bfc:	58001c00 	.word	0x58001c00
 8000c00:	20b0ccff 	.word	0x20b0ccff

08000c04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0be      	sub	sp, #248	@ 0xf8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c1c:	f107 0320 	add.w	r3, r7, #32
 8000c20:	22c0      	movs	r2, #192	@ 0xc0
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f00c fb90 	bl	800d34a <memset>
  if(i2cHandle->Instance==I2C1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a73      	ldr	r2, [pc, #460]	@ (8000dfc <HAL_I2C_MspInit+0x1f8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d146      	bne.n	8000cc2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c34:	f04f 0208 	mov.w	r2, #8
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f006 fb78 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c56:	f000 fb0b 	bl	8001270 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b69      	ldr	r3, [pc, #420]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c60:	4a67      	ldr	r2, [pc, #412]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c6a:	4b65      	ldr	r3, [pc, #404]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000c6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAX30102_SCL_Pin|MAX30102_SDA_Pin;
 8000c78:	23c0      	movs	r3, #192	@ 0xc0
 8000c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c7e:	2312      	movs	r3, #18
 8000c80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c90:	2304      	movs	r3, #4
 8000c92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4859      	ldr	r0, [pc, #356]	@ (8000e04 <HAL_I2C_MspInit+0x200>)
 8000c9e:	f004 fa1d 	bl	80050dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca2:	4b57      	ldr	r3, [pc, #348]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000ca4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ca8:	4a55      	ldr	r2, [pc, #340]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000caa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cae:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000cb2:	4b53      	ldr	r3, [pc, #332]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000cb4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000cc0:	e098      	b.n	8000df4 <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C2)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a50      	ldr	r2, [pc, #320]	@ (8000e08 <HAL_I2C_MspInit+0x204>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d147      	bne.n	8000d5c <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ccc:	f04f 0208 	mov.w	r2, #8
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 fb2c 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000cee:	f000 fabf 	bl	8001270 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b43      	ldr	r3, [pc, #268]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000cf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cf8:	4a41      	ldr	r2, [pc, #260]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d02:	4b3f      	ldr	r3, [pc, #252]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000d04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BME280_SCL_Pin|BME280_SDA_Pin;
 8000d10:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d18:	2312      	movs	r3, #18
 8000d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4833      	ldr	r0, [pc, #204]	@ (8000e04 <HAL_I2C_MspInit+0x200>)
 8000d38:	f004 f9d0 	bl	80050dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d3c:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000d3e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d42:	4a2f      	ldr	r2, [pc, #188]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000d44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d48:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000d4e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
}
 8000d5a:	e04b      	b.n	8000df4 <HAL_I2C_MspInit+0x1f0>
  else if(i2cHandle->Instance==I2C4)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a2a      	ldr	r2, [pc, #168]	@ (8000e0c <HAL_I2C_MspInit+0x208>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d146      	bne.n	8000df4 <HAL_I2C_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d66:	f04f 0210 	mov.w	r2, #16
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f006 fadf 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8000d88:	f000 fa72 	bl	8001270 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000d8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d92:	4a1b      	ldr	r2, [pc, #108]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000d9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPU6500_SCL_Pin|MPU6500_SDA_Pin;
 8000daa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db2:	2312      	movs	r3, #18
 8000db4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dca:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480f      	ldr	r0, [pc, #60]	@ (8000e10 <HAL_I2C_MspInit+0x20c>)
 8000dd2:	f004 f983 	bl	80050dc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000dd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ddc:	4a08      	ldr	r2, [pc, #32]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_I2C_MspInit+0x1fc>)
 8000de8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
}
 8000df4:	bf00      	nop
 8000df6:	37f8      	adds	r7, #248	@ 0xf8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	58024400 	.word	0x58024400
 8000e04:	58020400 	.word	0x58020400
 8000e08:	40005800 	.word	0x40005800
 8000e0c:	58001c00 	.word	0x58001c00
 8000e10:	58020c00 	.word	0x58020c00

08000e14 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&STLINK_UART, (uint8_t*) &chr, 1, HAL_MAX_DELAY);
 8000e1c:	1d39      	adds	r1, r7, #4
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	2201      	movs	r2, #1
 8000e24:	4803      	ldr	r0, [pc, #12]	@ (8000e34 <__io_putchar+0x20>)
 8000e26:	f008 fcb4 	bl	8009792 <HAL_UART_Transmit>
	return chr;
 8000e2a:	687b      	ldr	r3, [r7, #4]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	24000620 	.word	0x24000620

08000e38 <Scan_I2C_Bus.0>:
  MX_I2C4_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

	HAL_StatusTypeDef Scan_I2C_Bus(I2C_HandleTypeDef *hi2c)
	{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	f8c7 c000 	str.w	ip, [r7]
		HAL_StatusTypeDef status;
		uint32_t err;
		for (uint16_t addr = 1; addr < 128; addr++)
 8000e44:	2301      	movs	r3, #1
 8000e46:	81fb      	strh	r3, [r7, #14]
 8000e48:	e023      	b.n	8000e92 <Scan_I2C_Bus.0+0x5a>
		{
			status = HAL_I2C_IsDeviceReady(hi2c, addr << 1, 3,
 8000e4a:	89fb      	ldrh	r3, [r7, #14]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	b299      	uxth	r1, r3
 8000e50:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e54:	2203      	movs	r2, #3
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f004 fdee 	bl	8005a38 <HAL_I2C_IsDeviceReady>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	737b      	strb	r3, [r7, #13]
			500);
			if (status == HAL_OK)
 8000e60:	7b7b      	ldrb	r3, [r7, #13]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d105      	bne.n	8000e72 <Scan_I2C_Bus.0+0x3a>
			{
				printf("I2C: device ACK at 0x%02X\r\n", addr);
 8000e66:	89fb      	ldrh	r3, [r7, #14]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480e      	ldr	r0, [pc, #56]	@ (8000ea4 <Scan_I2C_Bus.0+0x6c>)
 8000e6c:	f00c fa18 	bl	800d2a0 <iprintf>
 8000e70:	e009      	b.n	8000e86 <Scan_I2C_Bus.0+0x4e>
			}
			else
			{
				err = HAL_I2C_GetError(hi2c);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f004 fee6 	bl	8005c44 <HAL_I2C_GetError>
 8000e78:	60b8      	str	r0, [r7, #8]
				// err == HAL_I2C_ERROR_NONE usually means NACK
				printf("I2C: 0x%02X no ACK (err=0x%lX)\r\n", addr, err);
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4809      	ldr	r0, [pc, #36]	@ (8000ea8 <Scan_I2C_Bus.0+0x70>)
 8000e82:	f00c fa0d 	bl	800d2a0 <iprintf>
			}
			HAL_Delay(5);  // give time for UART to flush
 8000e86:	2005      	movs	r0, #5
 8000e88:	f001 f892 	bl	8001fb0 <HAL_Delay>
		for (uint16_t addr = 1; addr < 128; addr++)
 8000e8c:	89fb      	ldrh	r3, [r7, #14]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	81fb      	strh	r3, [r7, #14]
 8000e92:	89fb      	ldrh	r3, [r7, #14]
 8000e94:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e96:	d9d8      	bls.n	8000e4a <Scan_I2C_Bus.0+0x12>
		}
		return HAL_OK;
 8000e98:	2300      	movs	r3, #0
	}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	0800ef60 	.word	0x0800ef60
 8000ea8:	0800ef7c 	.word	0x0800ef7c

08000eac <main>:
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af04      	add	r7, sp, #16
int main(void)
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	607b      	str	r3, [r7, #4]
  MPU_Config();
 8000eb8:	f000 f9ae 	bl	8001218 <MPU_Config>
  HAL_Init();
 8000ebc:	f000 ffe6 	bl	8001e8c <HAL_Init>
  SystemClock_Config();
 8000ec0:	f000 f842 	bl	8000f48 <SystemClock_Config>
  MX_GPIO_Init();
 8000ec4:	f7ff fc92 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec8:	f7ff fc50 	bl	800076c <MX_DMA_Init>
  MX_UART4_Init();
 8000ecc:	f000 fce8 	bl	80018a0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000ed0:	f000 fd7e 	bl	80019d0 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000ed4:	f7ff fe16 	bl	8000b04 <MX_I2C2_Init>
  MX_UART5_Init();
 8000ed8:	f000 fd2e 	bl	8001938 <MX_UART5_Init>
  MX_SPI1_Init();
 8000edc:	f000 f9ce 	bl	800127c <MX_SPI1_Init>
  MX_I2C4_Init();
 8000ee0:	f7ff fe50 	bl	8000b84 <MX_I2C4_Init>
  MX_I2C1_Init();
 8000ee4:	f7ff fdce 	bl	8000a84 <MX_I2C1_Init>
  configureHM10();
  startUartReception(&BLE_UART);
#endif

#ifdef BME280
	Scan_I2C_Bus(&BME280_I2C);
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	469c      	mov	ip, r3
 8000eec:	4813      	ldr	r0, [pc, #76]	@ (8000f3c <main+0x90>)
 8000eee:	f7ff ffa3 	bl	8000e38 <Scan_I2C_Bus.0>

  Sensor_BMP280_init(&SmartWatchData_handle.bmp280);
 8000ef2:	4813      	ldr	r0, [pc, #76]	@ (8000f40 <main+0x94>)
 8000ef4:	f00a fdaa 	bl	800ba4c <Sensor_BMP280_init>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
#ifdef BME280

		Sensor_BMP280_read_data(&SmartWatchData_handle);
 8000ef8:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <main+0x94>)
 8000efa:	f00a fdcd 	bl	800ba98 <Sensor_BMP280_read_data>


		printf("Pressure: %.2f Pa, Temperature: %.2f C,  Humidity: %.2f \r\n", SmartWatchData_handle.pressure, SmartWatchData_handle.temperature,SmartWatchData_handle.humidity);
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <main+0x94>)
 8000f00:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f04:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f08:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <main+0x94>)
 8000f0a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000f0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f12:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <main+0x94>)
 8000f14:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8000f18:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000f1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000f20:	ed8d 7b00 	vstr	d7, [sp]
 8000f24:	ec53 2b15 	vmov	r2, r3, d5
 8000f28:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <main+0x98>)
 8000f2a:	f00c f9b9 	bl	800d2a0 <iprintf>


		HAL_Delay(500);
 8000f2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f32:	f001 f83d 	bl	8001fb0 <HAL_Delay>
		Sensor_BMP280_read_data(&SmartWatchData_handle);
 8000f36:	bf00      	nop
 8000f38:	e7de      	b.n	8000ef8 <main+0x4c>
 8000f3a:	bf00      	nop
 8000f3c:	24000248 	.word	0x24000248
 8000f40:	24000998 	.word	0x24000998
 8000f44:	0800efa0 	.word	0x0800efa0

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09c      	sub	sp, #112	@ 0x70
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f52:	224c      	movs	r2, #76	@ 0x4c
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00c f9f7 	bl	800d34a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2220      	movs	r2, #32
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00c f9f1 	bl	800d34a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000f68:	4b2f      	ldr	r3, [pc, #188]	@ (8001028 <SystemClock_Config+0xe0>)
 8000f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f72:	2004      	movs	r0, #4
 8000f74:	f005 f9cc 	bl	8006310 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800102c <SystemClock_Config+0xe4>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a2a      	ldr	r2, [pc, #168]	@ (800102c <SystemClock_Config+0xe4>)
 8000f82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b28      	ldr	r3, [pc, #160]	@ (800102c <SystemClock_Config+0xe4>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f94:	bf00      	nop
 8000f96:	4b25      	ldr	r3, [pc, #148]	@ (800102c <SystemClock_Config+0xe4>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fa2:	d1f8      	bne.n	8000f96 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000fba:	2346      	movs	r3, #70	@ 0x46
 8000fbc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fca:	230c      	movs	r3, #12
 8000fcc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f005 f9f2 	bl	80063c4 <HAL_RCC_OscConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fe6:	f000 f943 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fea:	233f      	movs	r3, #63	@ 0x3f
 8000fec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ffa:	2340      	movs	r3, #64	@ 0x40
 8000ffc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ffe:	2340      	movs	r3, #64	@ 0x40
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001002:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001006:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001008:	2340      	movs	r3, #64	@ 0x40
 800100a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2106      	movs	r1, #6
 8001010:	4618      	mov	r0, r3
 8001012:	f005 fe09 	bl	8006c28 <HAL_RCC_ClockConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800101c:	f000 f928 	bl	8001270 <Error_Handler>
  }
}
 8001020:	bf00      	nop
 8001022:	3770      	adds	r7, #112	@ 0x70
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	58024400 	.word	0x58024400
 800102c:	58024800 	.word	0x58024800

08001030 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART4)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a56      	ldr	r2, [pc, #344]	@ (800119c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	f040 80a5 	bne.w	8001192 <HAL_UARTEx_RxEventCallback+0x162>
	{
		// Copy the data from DMA buffer to message buffer
		memcpy(messageBuffer, rxBuffer, Size);
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	461a      	mov	r2, r3
 800104c:	4954      	ldr	r1, [pc, #336]	@ (80011a0 <HAL_UARTEx_RxEventCallback+0x170>)
 800104e:	4855      	ldr	r0, [pc, #340]	@ (80011a4 <HAL_UARTEx_RxEventCallback+0x174>)
 8001050:	f00c fa0b 	bl	800d46a <memcpy>

		// Null-terminate the string
		messageBuffer[Size] = '\0';
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	4a53      	ldr	r2, [pc, #332]	@ (80011a4 <HAL_UARTEx_RxEventCallback+0x174>)
 8001058:	2100      	movs	r1, #0
 800105a:	54d1      	strb	r1, [r2, r3]

		// Set flag for main loop
		messageReady = 1;
 800105c:	4b52      	ldr	r3, [pc, #328]	@ (80011a8 <HAL_UARTEx_RxEventCallback+0x178>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]

		HAL_UART_AbortReceive(huart);  // Stop DMA
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f008 fc24 	bl	80098b0 <HAL_UART_AbortReceive>
		memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8001068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800106c:	2100      	movs	r1, #0
 800106e:	484c      	ldr	r0, [pc, #304]	@ (80011a0 <HAL_UARTEx_RxEventCallback+0x170>)
 8001070:	f00c f96b 	bl	800d34a <memset>

		// Restart DMA reception
		HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8001074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001078:	4949      	ldr	r1, [pc, #292]	@ (80011a0 <HAL_UARTEx_RxEventCallback+0x170>)
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f00a fc43 	bl	800b906 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a48      	ldr	r2, [pc, #288]	@ (80011ac <HAL_UARTEx_RxEventCallback+0x17c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d068      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a46      	ldr	r2, [pc, #280]	@ (80011b0 <HAL_UARTEx_RxEventCallback+0x180>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d061      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a43      	ldr	r2, [pc, #268]	@ (80011b4 <HAL_UARTEx_RxEventCallback+0x184>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d05a      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a41      	ldr	r2, [pc, #260]	@ (80011b8 <HAL_UARTEx_RxEventCallback+0x188>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d053      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a3e      	ldr	r2, [pc, #248]	@ (80011bc <HAL_UARTEx_RxEventCallback+0x18c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d04c      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a3c      	ldr	r2, [pc, #240]	@ (80011c0 <HAL_UARTEx_RxEventCallback+0x190>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d045      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a39      	ldr	r2, [pc, #228]	@ (80011c4 <HAL_UARTEx_RxEventCallback+0x194>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d03e      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a37      	ldr	r2, [pc, #220]	@ (80011c8 <HAL_UARTEx_RxEventCallback+0x198>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d037      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a34      	ldr	r2, [pc, #208]	@ (80011cc <HAL_UARTEx_RxEventCallback+0x19c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d030      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a32      	ldr	r2, [pc, #200]	@ (80011d0 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d029      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a2f      	ldr	r2, [pc, #188]	@ (80011d4 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d022      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a2d      	ldr	r2, [pc, #180]	@ (80011d8 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d01b      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a2a      	ldr	r2, [pc, #168]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d014      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a28      	ldr	r2, [pc, #160]	@ (80011e0 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d00d      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a25      	ldr	r2, [pc, #148]	@ (80011e4 <HAL_UARTEx_RxEventCallback+0x1b4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d006      	beq.n	8001160 <HAL_UARTEx_RxEventCallback+0x130>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a23      	ldr	r2, [pc, #140]	@ (80011e8 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d10c      	bne.n	800117a <HAL_UARTEx_RxEventCallback+0x14a>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0208 	bic.w	r2, r2, #8
 8001176:	601a      	str	r2, [r3, #0]
	}
}
 8001178:	e00b      	b.n	8001192 <HAL_UARTEx_RxEventCallback+0x162>
		__HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0204 	bic.w	r2, r2, #4
 8001190:	601a      	str	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40004c00 	.word	0x40004c00
 80011a0:	24000898 	.word	0x24000898
 80011a4:	240002f0 	.word	0x240002f0
 80011a8:	240003f0 	.word	0x240003f0
 80011ac:	40020010 	.word	0x40020010
 80011b0:	40020028 	.word	0x40020028
 80011b4:	40020040 	.word	0x40020040
 80011b8:	40020058 	.word	0x40020058
 80011bc:	40020070 	.word	0x40020070
 80011c0:	40020088 	.word	0x40020088
 80011c4:	400200a0 	.word	0x400200a0
 80011c8:	400200b8 	.word	0x400200b8
 80011cc:	40020410 	.word	0x40020410
 80011d0:	40020428 	.word	0x40020428
 80011d4:	40020440 	.word	0x40020440
 80011d8:	40020458 	.word	0x40020458
 80011dc:	40020470 	.word	0x40020470
 80011e0:	40020488 	.word	0x40020488
 80011e4:	400204a0 	.word	0x400204a0
 80011e8:	400204b8 	.word	0x400204b8

080011ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == InputButton_Pin)
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011fc:	d006      	beq.n	800120c <HAL_GPIO_EXTI_Callback+0x20>
	{

	}
	else if (GPIO_Pin == MAX30102_INT_Pin)
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001204:	d102      	bne.n	800120c <HAL_GPIO_EXTI_Callback+0x20>
	{
		max30102_on_interrupt(&SmartWatchData_handle.max30102);
 8001206:	4803      	ldr	r0, [pc, #12]	@ (8001214 <HAL_GPIO_EXTI_Callback+0x28>)
 8001208:	f00b fa8e 	bl	800c728 <max30102_on_interrupt>
	}
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	24000ad0 	.word	0x24000ad0

08001218 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800121e:	463b      	mov	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800122a:	f000 fff5 	bl	8002218 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800122e:	2301      	movs	r3, #1
 8001230:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001232:	2300      	movs	r3, #0
 8001234:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800123a:	231f      	movs	r3, #31
 800123c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800123e:	2387      	movs	r3, #135	@ 0x87
 8001240:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001242:	2300      	movs	r3, #0
 8001244:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001246:	2300      	movs	r3, #0
 8001248:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800124a:	2301      	movs	r3, #1
 800124c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800124e:	2301      	movs	r3, #1
 8001250:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800125a:	463b      	mov	r3, r7
 800125c:	4618      	mov	r0, r3
 800125e:	f001 f813 	bl	8002288 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001262:	2004      	movs	r0, #4
 8001264:	f000 fff0 	bl	8002248 <HAL_MPU_Enable>

}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <Error_Handler+0x8>

0800127c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001280:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <MX_SPI1_Init+0xac>)
 8001282:	4a2a      	ldr	r2, [pc, #168]	@ (800132c <MX_SPI1_Init+0xb0>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b28      	ldr	r3, [pc, #160]	@ (8001328 <MX_SPI1_Init+0xac>)
 8001288:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800128c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <MX_SPI1_Init+0xac>)
 8001290:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001294:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001296:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <MX_SPI1_Init+0xac>)
 8001298:	2207      	movs	r2, #7
 800129a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800129c:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <MX_SPI1_Init+0xac>)
 800129e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012a4:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c8:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012d4:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012de:	2200      	movs	r2, #0
 80012e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <MX_SPI1_Init+0xac>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <MX_SPI1_Init+0xac>)
 8001302:	2200      	movs	r2, #0
 8001304:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <MX_SPI1_Init+0xac>)
 8001308:	2200      	movs	r2, #0
 800130a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <MX_SPI1_Init+0xac>)
 800130e:	2200      	movs	r2, #0
 8001310:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_SPI1_Init+0xac>)
 8001314:	f007 fdf4 	bl	8008f00 <HAL_SPI_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 800131e:	f7ff ffa7 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	240003f4 	.word	0x240003f4
 800132c:	40013000 	.word	0x40013000

08001330 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0ba      	sub	sp, #232	@ 0xe8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	22c0      	movs	r2, #192	@ 0xc0
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00b fffa 	bl	800d34a <memset>
  if(spiHandle->Instance==SPI1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a40      	ldr	r2, [pc, #256]	@ (800145c <HAL_SPI_MspInit+0x12c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d179      	bne.n	8001454 <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001360:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800136c:	2300      	movs	r3, #0
 800136e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4618      	mov	r0, r3
 8001376:	f005 ffe3 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001380:	f7ff ff76 	bl	8001270 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001384:	4b36      	ldr	r3, [pc, #216]	@ (8001460 <HAL_SPI_MspInit+0x130>)
 8001386:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800138a:	4a35      	ldr	r2, [pc, #212]	@ (8001460 <HAL_SPI_MspInit+0x130>)
 800138c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001390:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001394:	4b32      	ldr	r3, [pc, #200]	@ (8001460 <HAL_SPI_MspInit+0x130>)
 8001396:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800139a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001460 <HAL_SPI_MspInit+0x130>)
 80013a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001460 <HAL_SPI_MspInit+0x130>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001460 <HAL_SPI_MspInit+0x130>)
 80013b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013c0:	23a0      	movs	r3, #160	@ 0xa0
 80013c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013d8:	2305      	movs	r3, #5
 80013da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013e2:	4619      	mov	r1, r3
 80013e4:	481f      	ldr	r0, [pc, #124]	@ (8001464 <HAL_SPI_MspInit+0x134>)
 80013e6:	f003 fe79 	bl	80050dc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 80013ec:	4a1f      	ldr	r2, [pc, #124]	@ (800146c <HAL_SPI_MspInit+0x13c>)
 80013ee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 80013f2:	2226      	movs	r2, #38	@ 0x26
 80013f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 80013f8:	2240      	movs	r2, #64	@ 0x40
 80013fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 8001404:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001408:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001410:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001416:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001428:	480f      	ldr	r0, [pc, #60]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 800142a:	f000 ff6d 	bl	8002308 <HAL_DMA_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001434:	f7ff ff1c 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 800143c:	679a      	str	r2, [r3, #120]	@ 0x78
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_SPI_MspInit+0x138>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2023      	movs	r0, #35	@ 0x23
 800144a:	f000 feb0 	bl	80021ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800144e:	2023      	movs	r0, #35	@ 0x23
 8001450:	f000 fec7 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001454:	bf00      	nop
 8001456:	37e8      	adds	r7, #232	@ 0xe8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40013000 	.word	0x40013000
 8001460:	58024400 	.word	0x58024400
 8001464:	58020000 	.word	0x58020000
 8001468:	2400047c 	.word	0x2400047c
 800146c:	40020088 	.word	0x40020088

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_MspInit+0x30>)
 8001478:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800147c:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <HAL_MspInit+0x30>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_MspInit+0x30>)
 8001488:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	58024400 	.word	0x58024400

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fa:	f000 fd39 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <DMA1_Stream0_IRQHandler+0x10>)
 800150a:	f002 fa59 	bl	80039c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	240007a4 	.word	0x240007a4

08001518 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <DMA1_Stream1_IRQHandler+0x10>)
 800151e:	f002 fa4f 	bl	80039c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2400081c 	.word	0x2400081c

0800152c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <DMA1_Stream2_IRQHandler+0x10>)
 8001532:	f002 fa45 	bl	80039c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	240006b4 	.word	0x240006b4

08001540 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <DMA1_Stream3_IRQHandler+0x10>)
 8001546:	f002 fa3b 	bl	80039c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2400072c 	.word	0x2400072c

08001554 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <DMA1_Stream5_IRQHandler+0x10>)
 800155a:	f002 fa31 	bl	80039c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2400047c 	.word	0x2400047c

08001568 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 800156c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001570:	f003 ff7d 	bl	800546e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <SPI1_IRQHandler+0x10>)
 800157e:	f007 fde3 	bl	8009148 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	240003f4 	.word	0x240003f4

0800158c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(InputButton_Pin);
 8001590:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001594:	f003 ff6b 	bl	800546e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <UART4_IRQHandler+0x10>)
 80015a2:	f008 fa3b 	bl	8009a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	240004f8 	.word	0x240004f8

080015b0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <UART5_IRQHandler+0x10>)
 80015b6:	f008 fa31 	bl	8009a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2400058c 	.word	0x2400058c

080015c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return 1;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_kill>:

int _kill(int pid, int sig)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015de:	f00b ff17 	bl	800d410 <__errno>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2216      	movs	r2, #22
 80015e6:	601a      	str	r2, [r3, #0]
  return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_exit>:

void _exit (int status)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffe7 	bl	80015d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001606:	bf00      	nop
 8001608:	e7fd      	b.n	8001606 <_exit+0x12>

0800160a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e00a      	b.n	8001632 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800161c:	f3af 8000 	nop.w
 8001620:	4601      	mov	r1, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	60ba      	str	r2, [r7, #8]
 8001628:	b2ca      	uxtb	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	dbf0      	blt.n	800161c <_read+0x12>
  }

  return len;
 800163a:	687b      	ldr	r3, [r7, #4]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e009      	b.n	800166a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	60ba      	str	r2, [r7, #8]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fbd8 	bl	8000e14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3301      	adds	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	dbf1      	blt.n	8001656 <_write+0x12>
  }
  return len;
 8001672:	687b      	ldr	r3, [r7, #4]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_close>:

int _close(int file)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a4:	605a      	str	r2, [r3, #4]
  return 0;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_isatty>:

int _isatty(int file)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	@ (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f00b fe7c 	bl	800d410 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	24100000 	.word	0x24100000
 8001744:	00000400 	.word	0x00000400
 8001748:	240004f4 	.word	0x240004f4
 800174c:	24000e00 	.word	0x24000e00

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001754:	4b3e      	ldr	r3, [pc, #248]	@ (8001850 <SystemInit+0x100>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	4a3d      	ldr	r2, [pc, #244]	@ (8001850 <SystemInit+0x100>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001764:	4b3b      	ldr	r3, [pc, #236]	@ (8001854 <SystemInit+0x104>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	2b02      	cmp	r3, #2
 800176e:	d807      	bhi.n	8001780 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001770:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <SystemInit+0x104>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 030f 	bic.w	r3, r3, #15
 8001778:	4a36      	ldr	r2, [pc, #216]	@ (8001854 <SystemInit+0x104>)
 800177a:	f043 0303 	orr.w	r3, r3, #3
 800177e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001780:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <SystemInit+0x108>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a34      	ldr	r2, [pc, #208]	@ (8001858 <SystemInit+0x108>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800178c:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <SystemInit+0x108>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001792:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <SystemInit+0x108>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4930      	ldr	r1, [pc, #192]	@ (8001858 <SystemInit+0x108>)
 8001798:	4b30      	ldr	r3, [pc, #192]	@ (800185c <SystemInit+0x10c>)
 800179a:	4013      	ands	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800179e:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <SystemInit+0x104>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <SystemInit+0x104>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 030f 	bic.w	r3, r3, #15
 80017b2:	4a28      	ldr	r2, [pc, #160]	@ (8001854 <SystemInit+0x104>)
 80017b4:	f043 0303 	orr.w	r3, r3, #3
 80017b8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80017ba:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <SystemInit+0x108>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80017c0:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <SystemInit+0x108>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80017c6:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <SystemInit+0x108>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017cc:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <SystemInit+0x108>)
 80017ce:	4a24      	ldr	r2, [pc, #144]	@ (8001860 <SystemInit+0x110>)
 80017d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017d2:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <SystemInit+0x108>)
 80017d4:	4a23      	ldr	r2, [pc, #140]	@ (8001864 <SystemInit+0x114>)
 80017d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <SystemInit+0x108>)
 80017da:	4a23      	ldr	r2, [pc, #140]	@ (8001868 <SystemInit+0x118>)
 80017dc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017de:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <SystemInit+0x108>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <SystemInit+0x108>)
 80017e6:	4a20      	ldr	r2, [pc, #128]	@ (8001868 <SystemInit+0x118>)
 80017e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <SystemInit+0x108>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <SystemInit+0x108>)
 80017f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001868 <SystemInit+0x118>)
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <SystemInit+0x108>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <SystemInit+0x108>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a15      	ldr	r2, [pc, #84]	@ (8001858 <SystemInit+0x108>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001806:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <SystemInit+0x108>)
 800180a:	2200      	movs	r2, #0
 800180c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <SystemInit+0x108>)
 8001810:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001814:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d113      	bne.n	8001844 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800181c:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <SystemInit+0x108>)
 800181e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001822:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <SystemInit+0x108>)
 8001824:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001828:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <SystemInit+0x11c>)
 800182e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001832:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <SystemInit+0x108>)
 8001836:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800183a:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <SystemInit+0x108>)
 800183c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001840:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00
 8001854:	52002000 	.word	0x52002000
 8001858:	58024400 	.word	0x58024400
 800185c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001860:	02020200 	.word	0x02020200
 8001864:	01ff0000 	.word	0x01ff0000
 8001868:	01010280 	.word	0x01010280
 800186c:	52004000 	.word	0x52004000

08001870 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <ExitRun0Mode+0x2c>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4a08      	ldr	r2, [pc, #32]	@ (800189c <ExitRun0Mode+0x2c>)
 800187a:	f023 0302 	bic.w	r3, r3, #2
 800187e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001880:	bf00      	nop
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <ExitRun0Mode+0x2c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f9      	beq.n	8001882 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	58024800 	.word	0x58024800

080018a0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018a4:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <MX_UART4_Init+0x90>)
 80018a6:	4a23      	ldr	r2, [pc, #140]	@ (8001934 <MX_UART4_Init+0x94>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <MX_UART4_Init+0x90>)
 80018ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <MX_UART4_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <MX_UART4_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <MX_UART4_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_UART4_Init+0x90>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <MX_UART4_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_UART4_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <MX_UART4_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018dc:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <MX_UART4_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <MX_UART4_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018e8:	4811      	ldr	r0, [pc, #68]	@ (8001930 <MX_UART4_Init+0x90>)
 80018ea:	f007 ff02 	bl	80096f2 <HAL_UART_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80018f4:	f7ff fcbc 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	480d      	ldr	r0, [pc, #52]	@ (8001930 <MX_UART4_Init+0x90>)
 80018fc:	f009 ff87 	bl	800b80e <HAL_UARTEx_SetTxFifoThreshold>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001906:	f7ff fcb3 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190a:	2100      	movs	r1, #0
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <MX_UART4_Init+0x90>)
 800190e:	f009 ffbc 	bl	800b88a <HAL_UARTEx_SetRxFifoThreshold>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001918:	f7ff fcaa 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <MX_UART4_Init+0x90>)
 800191e:	f009 ff3d 	bl	800b79c <HAL_UARTEx_DisableFifoMode>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001928:	f7ff fca2 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	240004f8 	.word	0x240004f8
 8001934:	40004c00 	.word	0x40004c00

08001938 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800193c:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <MX_UART5_Init+0x90>)
 800193e:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <MX_UART5_Init+0x94>)
 8001940:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001942:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <MX_UART5_Init+0x90>)
 8001944:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001948:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <MX_UART5_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <MX_UART5_Init+0x90>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001956:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <MX_UART5_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <MX_UART5_Init+0x90>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <MX_UART5_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <MX_UART5_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196e:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <MX_UART5_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <MX_UART5_Init+0x90>)
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800197a:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <MX_UART5_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001980:	4811      	ldr	r0, [pc, #68]	@ (80019c8 <MX_UART5_Init+0x90>)
 8001982:	f007 feb6 	bl	80096f2 <HAL_UART_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800198c:	f7ff fc70 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001990:	2100      	movs	r1, #0
 8001992:	480d      	ldr	r0, [pc, #52]	@ (80019c8 <MX_UART5_Init+0x90>)
 8001994:	f009 ff3b 	bl	800b80e <HAL_UARTEx_SetTxFifoThreshold>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800199e:	f7ff fc67 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a2:	2100      	movs	r1, #0
 80019a4:	4808      	ldr	r0, [pc, #32]	@ (80019c8 <MX_UART5_Init+0x90>)
 80019a6:	f009 ff70 	bl	800b88a <HAL_UARTEx_SetRxFifoThreshold>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80019b0:	f7ff fc5e 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <MX_UART5_Init+0x90>)
 80019b6:	f009 fef1 	bl	800b79c <HAL_UARTEx_DisableFifoMode>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80019c0:	f7ff fc56 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2400058c 	.word	0x2400058c
 80019cc:	40005000 	.word	0x40005000

080019d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019d4:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 80019d6:	4a23      	ldr	r2, [pc, #140]	@ (8001a64 <MX_USART3_UART_Init+0x94>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a18:	4811      	ldr	r0, [pc, #68]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 8001a1a:	f007 fe6a 	bl	80096f2 <HAL_UART_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a24:	f7ff fc24 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	480d      	ldr	r0, [pc, #52]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 8001a2c:	f009 feef 	bl	800b80e <HAL_UARTEx_SetTxFifoThreshold>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a36:	f7ff fc1b 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4808      	ldr	r0, [pc, #32]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 8001a3e:	f009 ff24 	bl	800b88a <HAL_UARTEx_SetRxFifoThreshold>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a48:	f7ff fc12 	bl	8001270 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <MX_USART3_UART_Init+0x90>)
 8001a4e:	f009 fea5 	bl	800b79c <HAL_UARTEx_DisableFifoMode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a58:	f7ff fc0a 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	24000620 	.word	0x24000620
 8001a64:	40004800 	.word	0x40004800

08001a68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0be      	sub	sp, #248	@ 0xf8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	22c0      	movs	r2, #192	@ 0xc0
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00b fc5e 	bl	800d34a <memset>
  if(uartHandle->Instance==UART4)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4ab1      	ldr	r2, [pc, #708]	@ (8001d58 <HAL_UART_MspInit+0x2f0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	f040 80ac 	bne.w	8001bf2 <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a9a:	f04f 0202 	mov.w	r2, #2
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 fc45 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001abc:	f7ff fbd8 	bl	8001270 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ac0:	4ba6      	ldr	r3, [pc, #664]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001ac2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001ac6:	4aa5      	ldr	r2, [pc, #660]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001ac8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001acc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001ad0:	4ba2      	ldr	r3, [pc, #648]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001ad2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001ad6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	4b9f      	ldr	r3, [pc, #636]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001ae0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ae4:	4a9d      	ldr	r2, [pc, #628]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001aee:	4b9b      	ldr	r3, [pc, #620]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001af0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = BLE_RX_Pin|BLE_TX_Pin;
 8001afc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b16:	2308      	movs	r3, #8
 8001b18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b20:	4619      	mov	r1, r3
 8001b22:	488f      	ldr	r0, [pc, #572]	@ (8001d60 <HAL_UART_MspInit+0x2f8>)
 8001b24:	f003 fada 	bl	80050dc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001b28:	4b8e      	ldr	r3, [pc, #568]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b2a:	4a8f      	ldr	r2, [pc, #572]	@ (8001d68 <HAL_UART_MspInit+0x300>)
 8001b2c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b30:	223f      	movs	r2, #63	@ 0x3f
 8001b32:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b34:	4b8b      	ldr	r3, [pc, #556]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3a:	4b8a      	ldr	r3, [pc, #552]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b40:	4b88      	ldr	r3, [pc, #544]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b46:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b48:	4b86      	ldr	r3, [pc, #536]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4e:	4b85      	ldr	r3, [pc, #532]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001b54:	4b83      	ldr	r3, [pc, #524]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b5a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5c:	4b81      	ldr	r3, [pc, #516]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b62:	4b80      	ldr	r3, [pc, #512]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b68:	487e      	ldr	r0, [pc, #504]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b6a:	f000 fbcd 	bl	8002308 <HAL_DMA_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001b74:	f7ff fb7c 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a7a      	ldr	r2, [pc, #488]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b80:	4a78      	ldr	r2, [pc, #480]	@ (8001d64 <HAL_UART_MspInit+0x2fc>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 8001b86:	4b79      	ldr	r3, [pc, #484]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001b88:	4a79      	ldr	r2, [pc, #484]	@ (8001d70 <HAL_UART_MspInit+0x308>)
 8001b8a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001b8c:	4b77      	ldr	r3, [pc, #476]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001b8e:	2240      	movs	r2, #64	@ 0x40
 8001b90:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b92:	4b76      	ldr	r3, [pc, #472]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001b94:	2240      	movs	r2, #64	@ 0x40
 8001b96:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b98:	4b74      	ldr	r3, [pc, #464]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9e:	4b73      	ldr	r3, [pc, #460]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001ba0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ba4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba6:	4b71      	ldr	r3, [pc, #452]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bac:	4b6f      	ldr	r3, [pc, #444]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001bb2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bbe:	4b6b      	ldr	r3, [pc, #428]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001bc4:	4869      	ldr	r0, [pc, #420]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001bc6:	f000 fb9f 	bl	8002308 <HAL_DMA_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8001bd0:	f7ff fb4e 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a65      	ldr	r2, [pc, #404]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001bd8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bda:	4a64      	ldr	r2, [pc, #400]	@ (8001d6c <HAL_UART_MspInit+0x304>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	2034      	movs	r0, #52	@ 0x34
 8001be6:	f000 fae2 	bl	80021ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001bea:	2034      	movs	r0, #52	@ 0x34
 8001bec:	f000 faf9 	bl	80021e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bf0:	e116      	b.n	8001e20 <HAL_UART_MspInit+0x3b8>
  else if(uartHandle->Instance==UART5)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5f      	ldr	r2, [pc, #380]	@ (8001d74 <HAL_UART_MspInit+0x30c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	f040 80c5 	bne.w	8001d88 <HAL_UART_MspInit+0x320>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001bfe:	f04f 0202 	mov.w	r2, #2
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c10:	f107 0320 	add.w	r3, r7, #32
 8001c14:	4618      	mov	r0, r3
 8001c16:	f005 fb93 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001c20:	f7ff fb26 	bl	8001270 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c24:	4b4d      	ldr	r3, [pc, #308]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001c26:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001c2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c30:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001c34:	4b49      	ldr	r3, [pc, #292]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001c36:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	4b46      	ldr	r3, [pc, #280]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001c44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c48:	4a44      	ldr	r2, [pc, #272]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c52:	4b42      	ldr	r3, [pc, #264]	@ (8001d5c <HAL_UART_MspInit+0x2f4>)
 8001c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GNSS_RX_Pin|GNSS_TX_Pin;
 8001c60:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001c7a:	230e      	movs	r3, #14
 8001c7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4836      	ldr	r0, [pc, #216]	@ (8001d60 <HAL_UART_MspInit+0x2f8>)
 8001c88:	f003 fa28 	bl	80050dc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001c8e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d7c <HAL_UART_MspInit+0x314>)
 8001c90:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001c92:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001c94:	2241      	movs	r2, #65	@ 0x41
 8001c96:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c98:	4b37      	ldr	r3, [pc, #220]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9e:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca4:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001ca6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001caa:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cac:	4b32      	ldr	r3, [pc, #200]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb2:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cbe:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001ccc:	482a      	ldr	r0, [pc, #168]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001cce:	f000 fb1b 	bl	8002308 <HAL_DMA_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_UART_MspInit+0x274>
      Error_Handler();
 8001cd8:	f7ff faca 	bl	8001270 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a26      	ldr	r2, [pc, #152]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001ce0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001ce4:	4a24      	ldr	r2, [pc, #144]	@ (8001d78 <HAL_UART_MspInit+0x310>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8001cea:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001cec:	4a25      	ldr	r2, [pc, #148]	@ (8001d84 <HAL_UART_MspInit+0x31c>)
 8001cee:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8001cf0:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001cf2:	2242      	movs	r2, #66	@ 0x42
 8001cf4:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf6:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001cf8:	2240      	movs	r2, #64	@ 0x40
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d02:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001d04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d08:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001d28:	4815      	ldr	r0, [pc, #84]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001d2a:	f000 faed 	bl	8002308 <HAL_DMA_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8001d34:	f7ff fa9c 	bl	8001270 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a11      	ldr	r2, [pc, #68]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001d3c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d3e:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <HAL_UART_MspInit+0x318>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2035      	movs	r0, #53	@ 0x35
 8001d4a:	f000 fa30 	bl	80021ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d4e:	2035      	movs	r0, #53	@ 0x35
 8001d50:	f000 fa47 	bl	80021e2 <HAL_NVIC_EnableIRQ>
}
 8001d54:	e064      	b.n	8001e20 <HAL_UART_MspInit+0x3b8>
 8001d56:	bf00      	nop
 8001d58:	40004c00 	.word	0x40004c00
 8001d5c:	58024400 	.word	0x58024400
 8001d60:	58020400 	.word	0x58020400
 8001d64:	240006b4 	.word	0x240006b4
 8001d68:	40020040 	.word	0x40020040
 8001d6c:	2400072c 	.word	0x2400072c
 8001d70:	40020058 	.word	0x40020058
 8001d74:	40005000 	.word	0x40005000
 8001d78:	240007a4 	.word	0x240007a4
 8001d7c:	40020010 	.word	0x40020010
 8001d80:	2400081c 	.word	0x2400081c
 8001d84:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a26      	ldr	r2, [pc, #152]	@ (8001e28 <HAL_UART_MspInit+0x3c0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d146      	bne.n	8001e20 <HAL_UART_MspInit+0x3b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d92:	f04f 0202 	mov.w	r2, #2
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4618      	mov	r0, r3
 8001daa:	f005 fac9 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_UART_MspInit+0x350>
      Error_Handler();
 8001db4:	f7ff fa5c 	bl	8001270 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001db8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <HAL_UART_MspInit+0x3c4>)
 8001dba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8001e2c <HAL_UART_MspInit+0x3c4>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dc4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001dc8:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <HAL_UART_MspInit+0x3c4>)
 8001dca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_UART_MspInit+0x3c4>)
 8001dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ddc:	4a13      	ldr	r2, [pc, #76]	@ (8001e2c <HAL_UART_MspInit+0x3c4>)
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_UART_MspInit+0x3c4>)
 8001de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001df4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001df8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e0e:	2307      	movs	r3, #7
 8001e10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e14:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <HAL_UART_MspInit+0x3c8>)
 8001e1c:	f003 f95e 	bl	80050dc <HAL_GPIO_Init>
}
 8001e20:	bf00      	nop
 8001e22:	37f8      	adds	r7, #248	@ 0xf8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40004800 	.word	0x40004800
 8001e2c:	58024400 	.word	0x58024400
 8001e30:	58020c00 	.word	0x58020c00

08001e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e34:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001e70 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001e38:	f7ff fd1a 	bl	8001870 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e3c:	f7ff fc88 	bl	8001750 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e40:	480c      	ldr	r0, [pc, #48]	@ (8001e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e42:	490d      	ldr	r1, [pc, #52]	@ (8001e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e44:	4a0d      	ldr	r2, [pc, #52]	@ (8001e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e58:	4c0a      	ldr	r4, [pc, #40]	@ (8001e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e66:	f00b fad9 	bl	800d41c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7ff f81f 	bl	8000eac <main>
  bx  lr
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001e74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e78:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001e7c:	0800f3a4 	.word	0x0800f3a4
  ldr r2, =_sbss
 8001e80:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001e84:	24000e00 	.word	0x24000e00

08001e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC_IRQHandler>
	...

08001e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e92:	2003      	movs	r0, #3
 8001e94:	f000 f980 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e98:	f005 f87c 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_Init+0x68>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	4913      	ldr	r1, [pc, #76]	@ (8001ef8 <HAL_Init+0x6c>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <HAL_Init+0x68>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef8 <HAL_Init+0x6c>)
 8001ec0:	5cd3      	ldrb	r3, [r2, r3]
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8001efc <HAL_Init+0x70>)
 8001ece:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8001f00 <HAL_Init+0x74>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f000 f814 	bl	8001f04 <HAL_InitTick>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e002      	b.n	8001eec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee6:	f7ff fac3 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	0800efdc 	.word	0x0800efdc
 8001efc:	24000004 	.word	0x24000004
 8001f00:	24000000 	.word	0x24000000

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_InitTick+0x60>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e021      	b.n	8001f5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <HAL_InitTick+0x64>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HAL_InitTick+0x60>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f965 	bl	80021fe <HAL_SYSTICK_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80a      	bhi.n	8001f5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 f92f 	bl	80021ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f50:	4a06      	ldr	r2, [pc, #24]	@ (8001f6c <HAL_InitTick+0x68>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2400000c 	.word	0x2400000c
 8001f68:	24000000 	.word	0x24000000
 8001f6c:	24000008 	.word	0x24000008

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_IncTick+0x20>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_IncTick+0x24>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <HAL_IncTick+0x24>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2400000c 	.word	0x2400000c
 8001f94:	24000894 	.word	0x24000894

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	@ (8001fac <HAL_GetTick+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	24000894 	.word	0x24000894

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff ffee 	bl	8001f98 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_Delay+0x44>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2400000c 	.word	0x2400000c

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <__NVIC_SetPriorityGrouping+0x40>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	4313      	orrs	r3, r2
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <__NVIC_SetPriorityGrouping+0x40>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00
 800203c:	05fa0000 	.word	0x05fa0000

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	@ (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	@ (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	@ (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	@ 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002164:	d301      	bcc.n	800216a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002166:	2301      	movs	r3, #1
 8002168:	e00f      	b.n	800218a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216a:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <SysTick_Config+0x40>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002172:	210f      	movs	r1, #15
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f7ff ff8e 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <SysTick_Config+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <SysTick_Config+0x40>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff29 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021bc:	f7ff ff40 	bl	8002040 <__NVIC_GetPriorityGrouping>
 80021c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff ff90 	bl	80020ec <NVIC_EncodePriority>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff5f 	bl	8002098 <__NVIC_SetPriority>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff33 	bl	800205c <__NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffa4 	bl	8002154 <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800221c:	f3bf 8f5f 	dmb	sy
}
 8002220:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002222:	4b07      	ldr	r3, [pc, #28]	@ (8002240 <HAL_MPU_Disable+0x28>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	4a06      	ldr	r2, [pc, #24]	@ (8002240 <HAL_MPU_Disable+0x28>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_MPU_Disable+0x2c>)
 8002230:	2200      	movs	r2, #0
 8002232:	605a      	str	r2, [r3, #4]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00
 8002244:	e000ed90 	.word	0xe000ed90

08002248 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002250:	4a0b      	ldr	r2, [pc, #44]	@ (8002280 <HAL_MPU_Enable+0x38>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800225a:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <HAL_MPU_Enable+0x3c>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	4a09      	ldr	r2, [pc, #36]	@ (8002284 <HAL_MPU_Enable+0x3c>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002264:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002266:	f3bf 8f4f 	dsb	sy
}
 800226a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800226c:	f3bf 8f6f 	isb	sy
}
 8002270:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed90 	.word	0xe000ed90
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	785a      	ldrb	r2, [r3, #1]
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_MPU_ConfigRegion+0x7c>)
 8002296:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002298:	4b1a      	ldr	r3, [pc, #104]	@ (8002304 <HAL_MPU_ConfigRegion+0x7c>)
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	4a19      	ldr	r2, [pc, #100]	@ (8002304 <HAL_MPU_ConfigRegion+0x7c>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022a4:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <HAL_MPU_ConfigRegion+0x7c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7b1b      	ldrb	r3, [r3, #12]
 80022b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7adb      	ldrb	r3, [r3, #11]
 80022b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7a9b      	ldrb	r3, [r3, #10]
 80022be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7b5b      	ldrb	r3, [r3, #13]
 80022c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7b9b      	ldrb	r3, [r3, #14]
 80022ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7bdb      	ldrb	r3, [r3, #15]
 80022d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7a5b      	ldrb	r3, [r3, #9]
 80022de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7a1b      	ldrb	r3, [r3, #8]
 80022e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022f0:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022f4:	6113      	str	r3, [r2, #16]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed90 	.word	0xe000ed90

08002308 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002310:	f7ff fe42 	bl	8001f98 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e37d      	b.n	8002a1c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a66      	ldr	r2, [pc, #408]	@ (80024c0 <HAL_DMA_Init+0x1b8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d04a      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a65      	ldr	r2, [pc, #404]	@ (80024c4 <HAL_DMA_Init+0x1bc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d045      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a63      	ldr	r2, [pc, #396]	@ (80024c8 <HAL_DMA_Init+0x1c0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d040      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a62      	ldr	r2, [pc, #392]	@ (80024cc <HAL_DMA_Init+0x1c4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d03b      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a60      	ldr	r2, [pc, #384]	@ (80024d0 <HAL_DMA_Init+0x1c8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d036      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5f      	ldr	r2, [pc, #380]	@ (80024d4 <HAL_DMA_Init+0x1cc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d031      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a5d      	ldr	r2, [pc, #372]	@ (80024d8 <HAL_DMA_Init+0x1d0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d02c      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5c      	ldr	r2, [pc, #368]	@ (80024dc <HAL_DMA_Init+0x1d4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d027      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5a      	ldr	r2, [pc, #360]	@ (80024e0 <HAL_DMA_Init+0x1d8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d022      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a59      	ldr	r2, [pc, #356]	@ (80024e4 <HAL_DMA_Init+0x1dc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d01d      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a57      	ldr	r2, [pc, #348]	@ (80024e8 <HAL_DMA_Init+0x1e0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d018      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a56      	ldr	r2, [pc, #344]	@ (80024ec <HAL_DMA_Init+0x1e4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a54      	ldr	r2, [pc, #336]	@ (80024f0 <HAL_DMA_Init+0x1e8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00e      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a53      	ldr	r2, [pc, #332]	@ (80024f4 <HAL_DMA_Init+0x1ec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a51      	ldr	r2, [pc, #324]	@ (80024f8 <HAL_DMA_Init+0x1f0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a50      	ldr	r2, [pc, #320]	@ (80024fc <HAL_DMA_Init+0x1f4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d101      	bne.n	80023c4 <HAL_DMA_Init+0xbc>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_DMA_Init+0xbe>
 80023c4:	2300      	movs	r3, #0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 813c 	beq.w	8002644 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a37      	ldr	r2, [pc, #220]	@ (80024c0 <HAL_DMA_Init+0x1b8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d04a      	beq.n	800247c <HAL_DMA_Init+0x174>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a36      	ldr	r2, [pc, #216]	@ (80024c4 <HAL_DMA_Init+0x1bc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d045      	beq.n	800247c <HAL_DMA_Init+0x174>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a34      	ldr	r2, [pc, #208]	@ (80024c8 <HAL_DMA_Init+0x1c0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d040      	beq.n	800247c <HAL_DMA_Init+0x174>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a33      	ldr	r2, [pc, #204]	@ (80024cc <HAL_DMA_Init+0x1c4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d03b      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a31      	ldr	r2, [pc, #196]	@ (80024d0 <HAL_DMA_Init+0x1c8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d036      	beq.n	800247c <HAL_DMA_Init+0x174>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a30      	ldr	r2, [pc, #192]	@ (80024d4 <HAL_DMA_Init+0x1cc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d031      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2e      	ldr	r2, [pc, #184]	@ (80024d8 <HAL_DMA_Init+0x1d0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d02c      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2d      	ldr	r2, [pc, #180]	@ (80024dc <HAL_DMA_Init+0x1d4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d027      	beq.n	800247c <HAL_DMA_Init+0x174>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2b      	ldr	r2, [pc, #172]	@ (80024e0 <HAL_DMA_Init+0x1d8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d022      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a2a      	ldr	r2, [pc, #168]	@ (80024e4 <HAL_DMA_Init+0x1dc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d01d      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a28      	ldr	r2, [pc, #160]	@ (80024e8 <HAL_DMA_Init+0x1e0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d018      	beq.n	800247c <HAL_DMA_Init+0x174>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a27      	ldr	r2, [pc, #156]	@ (80024ec <HAL_DMA_Init+0x1e4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a25      	ldr	r2, [pc, #148]	@ (80024f0 <HAL_DMA_Init+0x1e8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00e      	beq.n	800247c <HAL_DMA_Init+0x174>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a24      	ldr	r2, [pc, #144]	@ (80024f4 <HAL_DMA_Init+0x1ec>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d009      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a22      	ldr	r2, [pc, #136]	@ (80024f8 <HAL_DMA_Init+0x1f0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a21      	ldr	r2, [pc, #132]	@ (80024fc <HAL_DMA_Init+0x1f4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d108      	bne.n	800248e <HAL_DMA_Init+0x186>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e007      	b.n	800249e <HAL_DMA_Init+0x196>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800249e:	e02f      	b.n	8002500 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024a0:	f7ff fd7a 	bl	8001f98 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d928      	bls.n	8002500 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2203      	movs	r2, #3
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e2ad      	b.n	8002a1c <HAL_DMA_Init+0x714>
 80024c0:	40020010 	.word	0x40020010
 80024c4:	40020028 	.word	0x40020028
 80024c8:	40020040 	.word	0x40020040
 80024cc:	40020058 	.word	0x40020058
 80024d0:	40020070 	.word	0x40020070
 80024d4:	40020088 	.word	0x40020088
 80024d8:	400200a0 	.word	0x400200a0
 80024dc:	400200b8 	.word	0x400200b8
 80024e0:	40020410 	.word	0x40020410
 80024e4:	40020428 	.word	0x40020428
 80024e8:	40020440 	.word	0x40020440
 80024ec:	40020458 	.word	0x40020458
 80024f0:	40020470 	.word	0x40020470
 80024f4:	40020488 	.word	0x40020488
 80024f8:	400204a0 	.word	0x400204a0
 80024fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1c8      	bne.n	80024a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4b73      	ldr	r3, [pc, #460]	@ (80026e8 <HAL_DMA_Init+0x3e0>)
 800251a:	4013      	ands	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002526:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002532:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	2b04      	cmp	r3, #4
 8002552:	d107      	bne.n	8002564 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	4313      	orrs	r3, r2
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b28      	cmp	r3, #40	@ 0x28
 800256a:	d903      	bls.n	8002574 <HAL_DMA_Init+0x26c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b2e      	cmp	r3, #46	@ 0x2e
 8002572:	d91f      	bls.n	80025b4 <HAL_DMA_Init+0x2ac>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b3e      	cmp	r3, #62	@ 0x3e
 800257a:	d903      	bls.n	8002584 <HAL_DMA_Init+0x27c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b42      	cmp	r3, #66	@ 0x42
 8002582:	d917      	bls.n	80025b4 <HAL_DMA_Init+0x2ac>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b46      	cmp	r3, #70	@ 0x46
 800258a:	d903      	bls.n	8002594 <HAL_DMA_Init+0x28c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b48      	cmp	r3, #72	@ 0x48
 8002592:	d90f      	bls.n	80025b4 <HAL_DMA_Init+0x2ac>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b4e      	cmp	r3, #78	@ 0x4e
 800259a:	d903      	bls.n	80025a4 <HAL_DMA_Init+0x29c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b52      	cmp	r3, #82	@ 0x52
 80025a2:	d907      	bls.n	80025b4 <HAL_DMA_Init+0x2ac>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b73      	cmp	r3, #115	@ 0x73
 80025aa:	d905      	bls.n	80025b8 <HAL_DMA_Init+0x2b0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b77      	cmp	r3, #119	@ 0x77
 80025b2:	d801      	bhi.n	80025b8 <HAL_DMA_Init+0x2b0>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_DMA_Init+0x2b2>
 80025b8:	2300      	movs	r3, #0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f023 0307 	bic.w	r3, r3, #7
 80025dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d117      	bne.n	8002620 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00e      	beq.n	8002620 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f002 fbe0 	bl	8004dc8 <DMA_CheckFifoParam>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2240      	movs	r2, #64	@ 0x40
 8002612:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e1fd      	b.n	8002a1c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f002 fb1b 	bl	8004c64 <DMA_CalcBaseAndBitshift>
 800262e:	4603      	mov	r3, r0
 8002630:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	223f      	movs	r2, #63	@ 0x3f
 800263c:	409a      	lsls	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	e0fd      	b.n	8002840 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a28      	ldr	r2, [pc, #160]	@ (80026ec <HAL_DMA_Init+0x3e4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d04a      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a27      	ldr	r2, [pc, #156]	@ (80026f0 <HAL_DMA_Init+0x3e8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d045      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a25      	ldr	r2, [pc, #148]	@ (80026f4 <HAL_DMA_Init+0x3ec>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d040      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a24      	ldr	r2, [pc, #144]	@ (80026f8 <HAL_DMA_Init+0x3f0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d03b      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a22      	ldr	r2, [pc, #136]	@ (80026fc <HAL_DMA_Init+0x3f4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d036      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a21      	ldr	r2, [pc, #132]	@ (8002700 <HAL_DMA_Init+0x3f8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d031      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1f      	ldr	r2, [pc, #124]	@ (8002704 <HAL_DMA_Init+0x3fc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d02c      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1e      	ldr	r2, [pc, #120]	@ (8002708 <HAL_DMA_Init+0x400>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d027      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1c      	ldr	r2, [pc, #112]	@ (800270c <HAL_DMA_Init+0x404>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d022      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002710 <HAL_DMA_Init+0x408>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d01d      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	@ (8002714 <HAL_DMA_Init+0x40c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d018      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <HAL_DMA_Init+0x410>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a16      	ldr	r2, [pc, #88]	@ (800271c <HAL_DMA_Init+0x414>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00e      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a15      	ldr	r2, [pc, #84]	@ (8002720 <HAL_DMA_Init+0x418>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a13      	ldr	r2, [pc, #76]	@ (8002724 <HAL_DMA_Init+0x41c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_DMA_Init+0x3dc>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <HAL_DMA_Init+0x420>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d123      	bne.n	800272c <HAL_DMA_Init+0x424>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e022      	b.n	800272e <HAL_DMA_Init+0x426>
 80026e8:	fe10803f 	.word	0xfe10803f
 80026ec:	48022c08 	.word	0x48022c08
 80026f0:	48022c1c 	.word	0x48022c1c
 80026f4:	48022c30 	.word	0x48022c30
 80026f8:	48022c44 	.word	0x48022c44
 80026fc:	48022c58 	.word	0x48022c58
 8002700:	48022c6c 	.word	0x48022c6c
 8002704:	48022c80 	.word	0x48022c80
 8002708:	48022c94 	.word	0x48022c94
 800270c:	58025408 	.word	0x58025408
 8002710:	5802541c 	.word	0x5802541c
 8002714:	58025430 	.word	0x58025430
 8002718:	58025444 	.word	0x58025444
 800271c:	58025458 	.word	0x58025458
 8002720:	5802546c 	.word	0x5802546c
 8002724:	58025480 	.word	0x58025480
 8002728:	58025494 	.word	0x58025494
 800272c:	2300      	movs	r3, #0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d07d      	beq.n	800282e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a7f      	ldr	r2, [pc, #508]	@ (8002934 <HAL_DMA_Init+0x62c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d021      	beq.n	8002780 <HAL_DMA_Init+0x478>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a7d      	ldr	r2, [pc, #500]	@ (8002938 <HAL_DMA_Init+0x630>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01c      	beq.n	8002780 <HAL_DMA_Init+0x478>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7c      	ldr	r2, [pc, #496]	@ (800293c <HAL_DMA_Init+0x634>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d017      	beq.n	8002780 <HAL_DMA_Init+0x478>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a7a      	ldr	r2, [pc, #488]	@ (8002940 <HAL_DMA_Init+0x638>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d012      	beq.n	8002780 <HAL_DMA_Init+0x478>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a79      	ldr	r2, [pc, #484]	@ (8002944 <HAL_DMA_Init+0x63c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00d      	beq.n	8002780 <HAL_DMA_Init+0x478>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a77      	ldr	r2, [pc, #476]	@ (8002948 <HAL_DMA_Init+0x640>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d008      	beq.n	8002780 <HAL_DMA_Init+0x478>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a76      	ldr	r2, [pc, #472]	@ (800294c <HAL_DMA_Init+0x644>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <HAL_DMA_Init+0x478>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a74      	ldr	r2, [pc, #464]	@ (8002950 <HAL_DMA_Init+0x648>)
 800277e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4b6e      	ldr	r3, [pc, #440]	@ (8002954 <HAL_DMA_Init+0x64c>)
 800279c:	4013      	ands	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b40      	cmp	r3, #64	@ 0x40
 80027a6:	d008      	beq.n	80027ba <HAL_DMA_Init+0x4b2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b80      	cmp	r3, #128	@ 0x80
 80027ae:	d102      	bne.n	80027b6 <HAL_DMA_Init+0x4ae>
 80027b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027b4:	e002      	b.n	80027bc <HAL_DMA_Init+0x4b4>
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <HAL_DMA_Init+0x4b4>
 80027ba:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68d2      	ldr	r2, [r2, #12]
 80027c0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027c2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027ca:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027d2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027da:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027e2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027ea:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	4b55      	ldr	r3, [pc, #340]	@ (8002958 <HAL_DMA_Init+0x650>)
 8002802:	4413      	add	r3, r2
 8002804:	4a55      	ldr	r2, [pc, #340]	@ (800295c <HAL_DMA_Init+0x654>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	009a      	lsls	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f002 fa26 	bl	8004c64 <DMA_CalcBaseAndBitshift>
 8002818:	4603      	mov	r3, r0
 800281a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2201      	movs	r2, #1
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	e008      	b.n	8002840 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2240      	movs	r2, #64	@ 0x40
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2203      	movs	r2, #3
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0ed      	b.n	8002a1c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a46      	ldr	r2, [pc, #280]	@ (8002960 <HAL_DMA_Init+0x658>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d072      	beq.n	8002930 <HAL_DMA_Init+0x628>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a45      	ldr	r2, [pc, #276]	@ (8002964 <HAL_DMA_Init+0x65c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d06d      	beq.n	8002930 <HAL_DMA_Init+0x628>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a43      	ldr	r2, [pc, #268]	@ (8002968 <HAL_DMA_Init+0x660>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d068      	beq.n	8002930 <HAL_DMA_Init+0x628>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a42      	ldr	r2, [pc, #264]	@ (800296c <HAL_DMA_Init+0x664>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d063      	beq.n	8002930 <HAL_DMA_Init+0x628>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a40      	ldr	r2, [pc, #256]	@ (8002970 <HAL_DMA_Init+0x668>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d05e      	beq.n	8002930 <HAL_DMA_Init+0x628>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a3f      	ldr	r2, [pc, #252]	@ (8002974 <HAL_DMA_Init+0x66c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d059      	beq.n	8002930 <HAL_DMA_Init+0x628>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a3d      	ldr	r2, [pc, #244]	@ (8002978 <HAL_DMA_Init+0x670>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d054      	beq.n	8002930 <HAL_DMA_Init+0x628>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a3c      	ldr	r2, [pc, #240]	@ (800297c <HAL_DMA_Init+0x674>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d04f      	beq.n	8002930 <HAL_DMA_Init+0x628>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a3a      	ldr	r2, [pc, #232]	@ (8002980 <HAL_DMA_Init+0x678>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d04a      	beq.n	8002930 <HAL_DMA_Init+0x628>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a39      	ldr	r2, [pc, #228]	@ (8002984 <HAL_DMA_Init+0x67c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d045      	beq.n	8002930 <HAL_DMA_Init+0x628>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a37      	ldr	r2, [pc, #220]	@ (8002988 <HAL_DMA_Init+0x680>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d040      	beq.n	8002930 <HAL_DMA_Init+0x628>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a36      	ldr	r2, [pc, #216]	@ (800298c <HAL_DMA_Init+0x684>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d03b      	beq.n	8002930 <HAL_DMA_Init+0x628>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a34      	ldr	r2, [pc, #208]	@ (8002990 <HAL_DMA_Init+0x688>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d036      	beq.n	8002930 <HAL_DMA_Init+0x628>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a33      	ldr	r2, [pc, #204]	@ (8002994 <HAL_DMA_Init+0x68c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d031      	beq.n	8002930 <HAL_DMA_Init+0x628>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a31      	ldr	r2, [pc, #196]	@ (8002998 <HAL_DMA_Init+0x690>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d02c      	beq.n	8002930 <HAL_DMA_Init+0x628>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a30      	ldr	r2, [pc, #192]	@ (800299c <HAL_DMA_Init+0x694>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d027      	beq.n	8002930 <HAL_DMA_Init+0x628>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <HAL_DMA_Init+0x62c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d022      	beq.n	8002930 <HAL_DMA_Init+0x628>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a12      	ldr	r2, [pc, #72]	@ (8002938 <HAL_DMA_Init+0x630>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d01d      	beq.n	8002930 <HAL_DMA_Init+0x628>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a10      	ldr	r2, [pc, #64]	@ (800293c <HAL_DMA_Init+0x634>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d018      	beq.n	8002930 <HAL_DMA_Init+0x628>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a0f      	ldr	r2, [pc, #60]	@ (8002940 <HAL_DMA_Init+0x638>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d013      	beq.n	8002930 <HAL_DMA_Init+0x628>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <HAL_DMA_Init+0x63c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00e      	beq.n	8002930 <HAL_DMA_Init+0x628>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <HAL_DMA_Init+0x640>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_DMA_Init+0x628>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <HAL_DMA_Init+0x644>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <HAL_DMA_Init+0x628>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <HAL_DMA_Init+0x648>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d137      	bne.n	80029a0 <HAL_DMA_Init+0x698>
 8002930:	2301      	movs	r3, #1
 8002932:	e036      	b.n	80029a2 <HAL_DMA_Init+0x69a>
 8002934:	58025408 	.word	0x58025408
 8002938:	5802541c 	.word	0x5802541c
 800293c:	58025430 	.word	0x58025430
 8002940:	58025444 	.word	0x58025444
 8002944:	58025458 	.word	0x58025458
 8002948:	5802546c 	.word	0x5802546c
 800294c:	58025480 	.word	0x58025480
 8002950:	58025494 	.word	0x58025494
 8002954:	fffe000f 	.word	0xfffe000f
 8002958:	a7fdabf8 	.word	0xa7fdabf8
 800295c:	cccccccd 	.word	0xcccccccd
 8002960:	40020010 	.word	0x40020010
 8002964:	40020028 	.word	0x40020028
 8002968:	40020040 	.word	0x40020040
 800296c:	40020058 	.word	0x40020058
 8002970:	40020070 	.word	0x40020070
 8002974:	40020088 	.word	0x40020088
 8002978:	400200a0 	.word	0x400200a0
 800297c:	400200b8 	.word	0x400200b8
 8002980:	40020410 	.word	0x40020410
 8002984:	40020428 	.word	0x40020428
 8002988:	40020440 	.word	0x40020440
 800298c:	40020458 	.word	0x40020458
 8002990:	40020470 	.word	0x40020470
 8002994:	40020488 	.word	0x40020488
 8002998:	400204a0 	.word	0x400204a0
 800299c:	400204b8 	.word	0x400204b8
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d032      	beq.n	8002a0c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f002 fa8a 	bl	8004ec0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b80      	cmp	r3, #128	@ 0x80
 80029b2:	d102      	bne.n	80029ba <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029ce:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d010      	beq.n	80029fa <HAL_DMA_Init+0x6f2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d80c      	bhi.n	80029fa <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f002 fb07 	bl	8004ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	e008      	b.n	8002a0c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e226      	b.n	8002e8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_DMA_Start_IT+0x2a>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e21f      	b.n	8002e8e <HAL_DMA_Start_IT+0x46a>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	f040 820a 	bne.w	8002e78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a68      	ldr	r2, [pc, #416]	@ (8002c18 <HAL_DMA_Start_IT+0x1f4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d04a      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a66      	ldr	r2, [pc, #408]	@ (8002c1c <HAL_DMA_Start_IT+0x1f8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d045      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a65      	ldr	r2, [pc, #404]	@ (8002c20 <HAL_DMA_Start_IT+0x1fc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d040      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a63      	ldr	r2, [pc, #396]	@ (8002c24 <HAL_DMA_Start_IT+0x200>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d03b      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a62      	ldr	r2, [pc, #392]	@ (8002c28 <HAL_DMA_Start_IT+0x204>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d036      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a60      	ldr	r2, [pc, #384]	@ (8002c2c <HAL_DMA_Start_IT+0x208>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d031      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5f      	ldr	r2, [pc, #380]	@ (8002c30 <HAL_DMA_Start_IT+0x20c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d02c      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c34 <HAL_DMA_Start_IT+0x210>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d027      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c38 <HAL_DMA_Start_IT+0x214>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c3c <HAL_DMA_Start_IT+0x218>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01d      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a59      	ldr	r2, [pc, #356]	@ (8002c40 <HAL_DMA_Start_IT+0x21c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d018      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a57      	ldr	r2, [pc, #348]	@ (8002c44 <HAL_DMA_Start_IT+0x220>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a56      	ldr	r2, [pc, #344]	@ (8002c48 <HAL_DMA_Start_IT+0x224>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00e      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a54      	ldr	r2, [pc, #336]	@ (8002c4c <HAL_DMA_Start_IT+0x228>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a53      	ldr	r2, [pc, #332]	@ (8002c50 <HAL_DMA_Start_IT+0x22c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d004      	beq.n	8002b12 <HAL_DMA_Start_IT+0xee>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a51      	ldr	r2, [pc, #324]	@ (8002c54 <HAL_DMA_Start_IT+0x230>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d108      	bne.n	8002b24 <HAL_DMA_Start_IT+0x100>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0201 	bic.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e007      	b.n	8002b34 <HAL_DMA_Start_IT+0x110>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f001 feae 	bl	800489c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a34      	ldr	r2, [pc, #208]	@ (8002c18 <HAL_DMA_Start_IT+0x1f4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d04a      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a33      	ldr	r2, [pc, #204]	@ (8002c1c <HAL_DMA_Start_IT+0x1f8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d045      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a31      	ldr	r2, [pc, #196]	@ (8002c20 <HAL_DMA_Start_IT+0x1fc>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d040      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a30      	ldr	r2, [pc, #192]	@ (8002c24 <HAL_DMA_Start_IT+0x200>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d03b      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c28 <HAL_DMA_Start_IT+0x204>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d036      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2d      	ldr	r2, [pc, #180]	@ (8002c2c <HAL_DMA_Start_IT+0x208>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d031      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2b      	ldr	r2, [pc, #172]	@ (8002c30 <HAL_DMA_Start_IT+0x20c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d02c      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002c34 <HAL_DMA_Start_IT+0x210>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d027      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a28      	ldr	r2, [pc, #160]	@ (8002c38 <HAL_DMA_Start_IT+0x214>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d022      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a27      	ldr	r2, [pc, #156]	@ (8002c3c <HAL_DMA_Start_IT+0x218>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d01d      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a25      	ldr	r2, [pc, #148]	@ (8002c40 <HAL_DMA_Start_IT+0x21c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d018      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <HAL_DMA_Start_IT+0x220>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	@ (8002c48 <HAL_DMA_Start_IT+0x224>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00e      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a21      	ldr	r2, [pc, #132]	@ (8002c4c <HAL_DMA_Start_IT+0x228>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <HAL_DMA_Start_IT+0x22c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_DMA_Start_IT+0x1bc>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1e      	ldr	r2, [pc, #120]	@ (8002c54 <HAL_DMA_Start_IT+0x230>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Start_IT+0x1c0>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_DMA_Start_IT+0x1c2>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d036      	beq.n	8002c58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 021e 	bic.w	r2, r3, #30
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0216 	orr.w	r2, r2, #22
 8002bfc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d03e      	beq.n	8002c84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0208 	orr.w	r2, r2, #8
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e035      	b.n	8002c84 <HAL_DMA_Start_IT+0x260>
 8002c18:	40020010 	.word	0x40020010
 8002c1c:	40020028 	.word	0x40020028
 8002c20:	40020040 	.word	0x40020040
 8002c24:	40020058 	.word	0x40020058
 8002c28:	40020070 	.word	0x40020070
 8002c2c:	40020088 	.word	0x40020088
 8002c30:	400200a0 	.word	0x400200a0
 8002c34:	400200b8 	.word	0x400200b8
 8002c38:	40020410 	.word	0x40020410
 8002c3c:	40020428 	.word	0x40020428
 8002c40:	40020440 	.word	0x40020440
 8002c44:	40020458 	.word	0x40020458
 8002c48:	40020470 	.word	0x40020470
 8002c4c:	40020488 	.word	0x40020488
 8002c50:	400204a0 	.word	0x400204a0
 8002c54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 020e 	bic.w	r2, r3, #14
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 020a 	orr.w	r2, r2, #10
 8002c6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0204 	orr.w	r2, r2, #4
 8002c82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a83      	ldr	r2, [pc, #524]	@ (8002e98 <HAL_DMA_Start_IT+0x474>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d072      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a82      	ldr	r2, [pc, #520]	@ (8002e9c <HAL_DMA_Start_IT+0x478>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d06d      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a80      	ldr	r2, [pc, #512]	@ (8002ea0 <HAL_DMA_Start_IT+0x47c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d068      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ea4 <HAL_DMA_Start_IT+0x480>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d063      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a7d      	ldr	r2, [pc, #500]	@ (8002ea8 <HAL_DMA_Start_IT+0x484>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d05e      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7c      	ldr	r2, [pc, #496]	@ (8002eac <HAL_DMA_Start_IT+0x488>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d059      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a7a      	ldr	r2, [pc, #488]	@ (8002eb0 <HAL_DMA_Start_IT+0x48c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d054      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a79      	ldr	r2, [pc, #484]	@ (8002eb4 <HAL_DMA_Start_IT+0x490>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d04f      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a77      	ldr	r2, [pc, #476]	@ (8002eb8 <HAL_DMA_Start_IT+0x494>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d04a      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a76      	ldr	r2, [pc, #472]	@ (8002ebc <HAL_DMA_Start_IT+0x498>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d045      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a74      	ldr	r2, [pc, #464]	@ (8002ec0 <HAL_DMA_Start_IT+0x49c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d040      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a73      	ldr	r2, [pc, #460]	@ (8002ec4 <HAL_DMA_Start_IT+0x4a0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d03b      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a71      	ldr	r2, [pc, #452]	@ (8002ec8 <HAL_DMA_Start_IT+0x4a4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d036      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a70      	ldr	r2, [pc, #448]	@ (8002ecc <HAL_DMA_Start_IT+0x4a8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d031      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed0 <HAL_DMA_Start_IT+0x4ac>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d02c      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8002ed4 <HAL_DMA_Start_IT+0x4b0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d027      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6b      	ldr	r2, [pc, #428]	@ (8002ed8 <HAL_DMA_Start_IT+0x4b4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d022      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6a      	ldr	r2, [pc, #424]	@ (8002edc <HAL_DMA_Start_IT+0x4b8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d01d      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a68      	ldr	r2, [pc, #416]	@ (8002ee0 <HAL_DMA_Start_IT+0x4bc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d018      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a67      	ldr	r2, [pc, #412]	@ (8002ee4 <HAL_DMA_Start_IT+0x4c0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a65      	ldr	r2, [pc, #404]	@ (8002ee8 <HAL_DMA_Start_IT+0x4c4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a64      	ldr	r2, [pc, #400]	@ (8002eec <HAL_DMA_Start_IT+0x4c8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a62      	ldr	r2, [pc, #392]	@ (8002ef0 <HAL_DMA_Start_IT+0x4cc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_DMA_Start_IT+0x350>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a61      	ldr	r2, [pc, #388]	@ (8002ef4 <HAL_DMA_Start_IT+0x4d0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_DMA_Start_IT+0x354>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_DMA_Start_IT+0x356>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01a      	beq.n	8002db4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002db2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a37      	ldr	r2, [pc, #220]	@ (8002e98 <HAL_DMA_Start_IT+0x474>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04a      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a36      	ldr	r2, [pc, #216]	@ (8002e9c <HAL_DMA_Start_IT+0x478>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d045      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a34      	ldr	r2, [pc, #208]	@ (8002ea0 <HAL_DMA_Start_IT+0x47c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d040      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a33      	ldr	r2, [pc, #204]	@ (8002ea4 <HAL_DMA_Start_IT+0x480>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d03b      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a31      	ldr	r2, [pc, #196]	@ (8002ea8 <HAL_DMA_Start_IT+0x484>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d036      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a30      	ldr	r2, [pc, #192]	@ (8002eac <HAL_DMA_Start_IT+0x488>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d031      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb0 <HAL_DMA_Start_IT+0x48c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d02c      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb4 <HAL_DMA_Start_IT+0x490>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d027      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb8 <HAL_DMA_Start_IT+0x494>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d022      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2a      	ldr	r2, [pc, #168]	@ (8002ebc <HAL_DMA_Start_IT+0x498>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01d      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ec0 <HAL_DMA_Start_IT+0x49c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d018      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a27      	ldr	r2, [pc, #156]	@ (8002ec4 <HAL_DMA_Start_IT+0x4a0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a25      	ldr	r2, [pc, #148]	@ (8002ec8 <HAL_DMA_Start_IT+0x4a4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00e      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a24      	ldr	r2, [pc, #144]	@ (8002ecc <HAL_DMA_Start_IT+0x4a8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a22      	ldr	r2, [pc, #136]	@ (8002ed0 <HAL_DMA_Start_IT+0x4ac>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_Start_IT+0x430>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	@ (8002ed4 <HAL_DMA_Start_IT+0x4b0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d108      	bne.n	8002e66 <HAL_DMA_Start_IT+0x442>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e012      	b.n	8002e8c <HAL_DMA_Start_IT+0x468>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e009      	b.n	8002e8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40020010 	.word	0x40020010
 8002e9c:	40020028 	.word	0x40020028
 8002ea0:	40020040 	.word	0x40020040
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020088 	.word	0x40020088
 8002eb0:	400200a0 	.word	0x400200a0
 8002eb4:	400200b8 	.word	0x400200b8
 8002eb8:	40020410 	.word	0x40020410
 8002ebc:	40020428 	.word	0x40020428
 8002ec0:	40020440 	.word	0x40020440
 8002ec4:	40020458 	.word	0x40020458
 8002ec8:	40020470 	.word	0x40020470
 8002ecc:	40020488 	.word	0x40020488
 8002ed0:	400204a0 	.word	0x400204a0
 8002ed4:	400204b8 	.word	0x400204b8
 8002ed8:	58025408 	.word	0x58025408
 8002edc:	5802541c 	.word	0x5802541c
 8002ee0:	58025430 	.word	0x58025430
 8002ee4:	58025444 	.word	0x58025444
 8002ee8:	58025458 	.word	0x58025458
 8002eec:	5802546c 	.word	0x5802546c
 8002ef0:	58025480 	.word	0x58025480
 8002ef4:	58025494 	.word	0x58025494

08002ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f00:	f7ff f84a 	bl	8001f98 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e2dc      	b.n	80034ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d008      	beq.n	8002f2e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2280      	movs	r2, #128	@ 0x80
 8002f20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e2cd      	b.n	80034ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a76      	ldr	r2, [pc, #472]	@ (800310c <HAL_DMA_Abort+0x214>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d04a      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a74      	ldr	r2, [pc, #464]	@ (8003110 <HAL_DMA_Abort+0x218>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d045      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a73      	ldr	r2, [pc, #460]	@ (8003114 <HAL_DMA_Abort+0x21c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d040      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a71      	ldr	r2, [pc, #452]	@ (8003118 <HAL_DMA_Abort+0x220>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d03b      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a70      	ldr	r2, [pc, #448]	@ (800311c <HAL_DMA_Abort+0x224>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d036      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6e      	ldr	r2, [pc, #440]	@ (8003120 <HAL_DMA_Abort+0x228>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d031      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003124 <HAL_DMA_Abort+0x22c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d02c      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6b      	ldr	r2, [pc, #428]	@ (8003128 <HAL_DMA_Abort+0x230>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d027      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6a      	ldr	r2, [pc, #424]	@ (800312c <HAL_DMA_Abort+0x234>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a68      	ldr	r2, [pc, #416]	@ (8003130 <HAL_DMA_Abort+0x238>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a67      	ldr	r2, [pc, #412]	@ (8003134 <HAL_DMA_Abort+0x23c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a65      	ldr	r2, [pc, #404]	@ (8003138 <HAL_DMA_Abort+0x240>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a64      	ldr	r2, [pc, #400]	@ (800313c <HAL_DMA_Abort+0x244>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a62      	ldr	r2, [pc, #392]	@ (8003140 <HAL_DMA_Abort+0x248>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a61      	ldr	r2, [pc, #388]	@ (8003144 <HAL_DMA_Abort+0x24c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_Abort+0xd6>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5f      	ldr	r2, [pc, #380]	@ (8003148 <HAL_DMA_Abort+0x250>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_Abort+0xda>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMA_Abort+0xdc>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 021e 	bic.w	r2, r2, #30
 8002fe6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ff6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e00a      	b.n	8003016 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 020e 	bic.w	r2, r2, #14
 800300e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3c      	ldr	r2, [pc, #240]	@ (800310c <HAL_DMA_Abort+0x214>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d072      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3a      	ldr	r2, [pc, #232]	@ (8003110 <HAL_DMA_Abort+0x218>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d06d      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a39      	ldr	r2, [pc, #228]	@ (8003114 <HAL_DMA_Abort+0x21c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d068      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a37      	ldr	r2, [pc, #220]	@ (8003118 <HAL_DMA_Abort+0x220>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d063      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a36      	ldr	r2, [pc, #216]	@ (800311c <HAL_DMA_Abort+0x224>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d05e      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a34      	ldr	r2, [pc, #208]	@ (8003120 <HAL_DMA_Abort+0x228>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d059      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a33      	ldr	r2, [pc, #204]	@ (8003124 <HAL_DMA_Abort+0x22c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d054      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a31      	ldr	r2, [pc, #196]	@ (8003128 <HAL_DMA_Abort+0x230>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d04f      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a30      	ldr	r2, [pc, #192]	@ (800312c <HAL_DMA_Abort+0x234>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d04a      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2e      	ldr	r2, [pc, #184]	@ (8003130 <HAL_DMA_Abort+0x238>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d045      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2d      	ldr	r2, [pc, #180]	@ (8003134 <HAL_DMA_Abort+0x23c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d040      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <HAL_DMA_Abort+0x240>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d03b      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2a      	ldr	r2, [pc, #168]	@ (800313c <HAL_DMA_Abort+0x244>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d036      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a28      	ldr	r2, [pc, #160]	@ (8003140 <HAL_DMA_Abort+0x248>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d031      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a27      	ldr	r2, [pc, #156]	@ (8003144 <HAL_DMA_Abort+0x24c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d02c      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a25      	ldr	r2, [pc, #148]	@ (8003148 <HAL_DMA_Abort+0x250>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d027      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a24      	ldr	r2, [pc, #144]	@ (800314c <HAL_DMA_Abort+0x254>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d022      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a22      	ldr	r2, [pc, #136]	@ (8003150 <HAL_DMA_Abort+0x258>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01d      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a21      	ldr	r2, [pc, #132]	@ (8003154 <HAL_DMA_Abort+0x25c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d018      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003158 <HAL_DMA_Abort+0x260>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1e      	ldr	r2, [pc, #120]	@ (800315c <HAL_DMA_Abort+0x264>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003160 <HAL_DMA_Abort+0x268>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_DMA_Abort+0x26c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_DMA_Abort+0x20e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_DMA_Abort+0x270>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d132      	bne.n	800316c <HAL_DMA_Abort+0x274>
 8003106:	2301      	movs	r3, #1
 8003108:	e031      	b.n	800316e <HAL_DMA_Abort+0x276>
 800310a:	bf00      	nop
 800310c:	40020010 	.word	0x40020010
 8003110:	40020028 	.word	0x40020028
 8003114:	40020040 	.word	0x40020040
 8003118:	40020058 	.word	0x40020058
 800311c:	40020070 	.word	0x40020070
 8003120:	40020088 	.word	0x40020088
 8003124:	400200a0 	.word	0x400200a0
 8003128:	400200b8 	.word	0x400200b8
 800312c:	40020410 	.word	0x40020410
 8003130:	40020428 	.word	0x40020428
 8003134:	40020440 	.word	0x40020440
 8003138:	40020458 	.word	0x40020458
 800313c:	40020470 	.word	0x40020470
 8003140:	40020488 	.word	0x40020488
 8003144:	400204a0 	.word	0x400204a0
 8003148:	400204b8 	.word	0x400204b8
 800314c:	58025408 	.word	0x58025408
 8003150:	5802541c 	.word	0x5802541c
 8003154:	58025430 	.word	0x58025430
 8003158:	58025444 	.word	0x58025444
 800315c:	58025458 	.word	0x58025458
 8003160:	5802546c 	.word	0x5802546c
 8003164:	58025480 	.word	0x58025480
 8003168:	58025494 	.word	0x58025494
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003180:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a6d      	ldr	r2, [pc, #436]	@ (800333c <HAL_DMA_Abort+0x444>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d04a      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a6b      	ldr	r2, [pc, #428]	@ (8003340 <HAL_DMA_Abort+0x448>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d045      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a6a      	ldr	r2, [pc, #424]	@ (8003344 <HAL_DMA_Abort+0x44c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d040      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a68      	ldr	r2, [pc, #416]	@ (8003348 <HAL_DMA_Abort+0x450>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d03b      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a67      	ldr	r2, [pc, #412]	@ (800334c <HAL_DMA_Abort+0x454>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d036      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a65      	ldr	r2, [pc, #404]	@ (8003350 <HAL_DMA_Abort+0x458>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d031      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a64      	ldr	r2, [pc, #400]	@ (8003354 <HAL_DMA_Abort+0x45c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d02c      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a62      	ldr	r2, [pc, #392]	@ (8003358 <HAL_DMA_Abort+0x460>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d027      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a61      	ldr	r2, [pc, #388]	@ (800335c <HAL_DMA_Abort+0x464>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d022      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003360 <HAL_DMA_Abort+0x468>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01d      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003364 <HAL_DMA_Abort+0x46c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d018      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a5c      	ldr	r2, [pc, #368]	@ (8003368 <HAL_DMA_Abort+0x470>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a5b      	ldr	r2, [pc, #364]	@ (800336c <HAL_DMA_Abort+0x474>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00e      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a59      	ldr	r2, [pc, #356]	@ (8003370 <HAL_DMA_Abort+0x478>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a58      	ldr	r2, [pc, #352]	@ (8003374 <HAL_DMA_Abort+0x47c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_DMA_Abort+0x32a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a56      	ldr	r2, [pc, #344]	@ (8003378 <HAL_DMA_Abort+0x480>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <HAL_DMA_Abort+0x33c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e007      	b.n	8003244 <HAL_DMA_Abort+0x34c>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003244:	e013      	b.n	800326e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003246:	f7fe fea7 	bl	8001f98 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b05      	cmp	r3, #5
 8003252:	d90c      	bls.n	800326e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2203      	movs	r2, #3
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e12d      	b.n	80034ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e5      	bne.n	8003246 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2f      	ldr	r2, [pc, #188]	@ (800333c <HAL_DMA_Abort+0x444>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d04a      	beq.n	800331a <HAL_DMA_Abort+0x422>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a2d      	ldr	r2, [pc, #180]	@ (8003340 <HAL_DMA_Abort+0x448>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d045      	beq.n	800331a <HAL_DMA_Abort+0x422>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2c      	ldr	r2, [pc, #176]	@ (8003344 <HAL_DMA_Abort+0x44c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d040      	beq.n	800331a <HAL_DMA_Abort+0x422>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2a      	ldr	r2, [pc, #168]	@ (8003348 <HAL_DMA_Abort+0x450>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d03b      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a29      	ldr	r2, [pc, #164]	@ (800334c <HAL_DMA_Abort+0x454>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d036      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a27      	ldr	r2, [pc, #156]	@ (8003350 <HAL_DMA_Abort+0x458>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d031      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a26      	ldr	r2, [pc, #152]	@ (8003354 <HAL_DMA_Abort+0x45c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d02c      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a24      	ldr	r2, [pc, #144]	@ (8003358 <HAL_DMA_Abort+0x460>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d027      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a23      	ldr	r2, [pc, #140]	@ (800335c <HAL_DMA_Abort+0x464>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a21      	ldr	r2, [pc, #132]	@ (8003360 <HAL_DMA_Abort+0x468>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01d      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a20      	ldr	r2, [pc, #128]	@ (8003364 <HAL_DMA_Abort+0x46c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d018      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003368 <HAL_DMA_Abort+0x470>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1d      	ldr	r2, [pc, #116]	@ (800336c <HAL_DMA_Abort+0x474>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_DMA_Abort+0x422>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1b      	ldr	r2, [pc, #108]	@ (8003370 <HAL_DMA_Abort+0x478>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_DMA_Abort+0x422>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1a      	ldr	r2, [pc, #104]	@ (8003374 <HAL_DMA_Abort+0x47c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_DMA_Abort+0x422>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <HAL_DMA_Abort+0x480>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_DMA_Abort+0x426>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_DMA_Abort+0x428>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02b      	beq.n	800337c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	223f      	movs	r2, #63	@ 0x3f
 8003334:	409a      	lsls	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	e02a      	b.n	8003392 <HAL_DMA_Abort+0x49a>
 800333c:	40020010 	.word	0x40020010
 8003340:	40020028 	.word	0x40020028
 8003344:	40020040 	.word	0x40020040
 8003348:	40020058 	.word	0x40020058
 800334c:	40020070 	.word	0x40020070
 8003350:	40020088 	.word	0x40020088
 8003354:	400200a0 	.word	0x400200a0
 8003358:	400200b8 	.word	0x400200b8
 800335c:	40020410 	.word	0x40020410
 8003360:	40020428 	.word	0x40020428
 8003364:	40020440 	.word	0x40020440
 8003368:	40020458 	.word	0x40020458
 800336c:	40020470 	.word	0x40020470
 8003370:	40020488 	.word	0x40020488
 8003374:	400204a0 	.word	0x400204a0
 8003378:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2201      	movs	r2, #1
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a4f      	ldr	r2, [pc, #316]	@ (80034d4 <HAL_DMA_Abort+0x5dc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d072      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a4d      	ldr	r2, [pc, #308]	@ (80034d8 <HAL_DMA_Abort+0x5e0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d06d      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a4c      	ldr	r2, [pc, #304]	@ (80034dc <HAL_DMA_Abort+0x5e4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d068      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a4a      	ldr	r2, [pc, #296]	@ (80034e0 <HAL_DMA_Abort+0x5e8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d063      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a49      	ldr	r2, [pc, #292]	@ (80034e4 <HAL_DMA_Abort+0x5ec>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d05e      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a47      	ldr	r2, [pc, #284]	@ (80034e8 <HAL_DMA_Abort+0x5f0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d059      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a46      	ldr	r2, [pc, #280]	@ (80034ec <HAL_DMA_Abort+0x5f4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d054      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a44      	ldr	r2, [pc, #272]	@ (80034f0 <HAL_DMA_Abort+0x5f8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d04f      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a43      	ldr	r2, [pc, #268]	@ (80034f4 <HAL_DMA_Abort+0x5fc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d04a      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a41      	ldr	r2, [pc, #260]	@ (80034f8 <HAL_DMA_Abort+0x600>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d045      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a40      	ldr	r2, [pc, #256]	@ (80034fc <HAL_DMA_Abort+0x604>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d040      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a3e      	ldr	r2, [pc, #248]	@ (8003500 <HAL_DMA_Abort+0x608>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d03b      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a3d      	ldr	r2, [pc, #244]	@ (8003504 <HAL_DMA_Abort+0x60c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d036      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3b      	ldr	r2, [pc, #236]	@ (8003508 <HAL_DMA_Abort+0x610>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d031      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3a      	ldr	r2, [pc, #232]	@ (800350c <HAL_DMA_Abort+0x614>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d02c      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a38      	ldr	r2, [pc, #224]	@ (8003510 <HAL_DMA_Abort+0x618>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d027      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a37      	ldr	r2, [pc, #220]	@ (8003514 <HAL_DMA_Abort+0x61c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d022      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a35      	ldr	r2, [pc, #212]	@ (8003518 <HAL_DMA_Abort+0x620>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01d      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a34      	ldr	r2, [pc, #208]	@ (800351c <HAL_DMA_Abort+0x624>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d018      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a32      	ldr	r2, [pc, #200]	@ (8003520 <HAL_DMA_Abort+0x628>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a31      	ldr	r2, [pc, #196]	@ (8003524 <HAL_DMA_Abort+0x62c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00e      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2f      	ldr	r2, [pc, #188]	@ (8003528 <HAL_DMA_Abort+0x630>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2e      	ldr	r2, [pc, #184]	@ (800352c <HAL_DMA_Abort+0x634>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_DMA_Abort+0x58a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2c      	ldr	r2, [pc, #176]	@ (8003530 <HAL_DMA_Abort+0x638>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_DMA_Abort+0x58e>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_DMA_Abort+0x590>
 8003486:	2300      	movs	r3, #0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003494:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40020010 	.word	0x40020010
 80034d8:	40020028 	.word	0x40020028
 80034dc:	40020040 	.word	0x40020040
 80034e0:	40020058 	.word	0x40020058
 80034e4:	40020070 	.word	0x40020070
 80034e8:	40020088 	.word	0x40020088
 80034ec:	400200a0 	.word	0x400200a0
 80034f0:	400200b8 	.word	0x400200b8
 80034f4:	40020410 	.word	0x40020410
 80034f8:	40020428 	.word	0x40020428
 80034fc:	40020440 	.word	0x40020440
 8003500:	40020458 	.word	0x40020458
 8003504:	40020470 	.word	0x40020470
 8003508:	40020488 	.word	0x40020488
 800350c:	400204a0 	.word	0x400204a0
 8003510:	400204b8 	.word	0x400204b8
 8003514:	58025408 	.word	0x58025408
 8003518:	5802541c 	.word	0x5802541c
 800351c:	58025430 	.word	0x58025430
 8003520:	58025444 	.word	0x58025444
 8003524:	58025458 	.word	0x58025458
 8003528:	5802546c 	.word	0x5802546c
 800352c:	58025480 	.word	0x58025480
 8003530:	58025494 	.word	0x58025494

08003534 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e237      	b.n	80039b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d004      	beq.n	800355c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2280      	movs	r2, #128	@ 0x80
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e22c      	b.n	80039b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a5c      	ldr	r2, [pc, #368]	@ (80036d4 <HAL_DMA_Abort_IT+0x1a0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d04a      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5b      	ldr	r2, [pc, #364]	@ (80036d8 <HAL_DMA_Abort_IT+0x1a4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d045      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a59      	ldr	r2, [pc, #356]	@ (80036dc <HAL_DMA_Abort_IT+0x1a8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d040      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a58      	ldr	r2, [pc, #352]	@ (80036e0 <HAL_DMA_Abort_IT+0x1ac>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d03b      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a56      	ldr	r2, [pc, #344]	@ (80036e4 <HAL_DMA_Abort_IT+0x1b0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d036      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a55      	ldr	r2, [pc, #340]	@ (80036e8 <HAL_DMA_Abort_IT+0x1b4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d031      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a53      	ldr	r2, [pc, #332]	@ (80036ec <HAL_DMA_Abort_IT+0x1b8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d02c      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a52      	ldr	r2, [pc, #328]	@ (80036f0 <HAL_DMA_Abort_IT+0x1bc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d027      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a50      	ldr	r2, [pc, #320]	@ (80036f4 <HAL_DMA_Abort_IT+0x1c0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d022      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a4f      	ldr	r2, [pc, #316]	@ (80036f8 <HAL_DMA_Abort_IT+0x1c4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d01d      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a4d      	ldr	r2, [pc, #308]	@ (80036fc <HAL_DMA_Abort_IT+0x1c8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d018      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003700 <HAL_DMA_Abort_IT+0x1cc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d013      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003704 <HAL_DMA_Abort_IT+0x1d0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00e      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a49      	ldr	r2, [pc, #292]	@ (8003708 <HAL_DMA_Abort_IT+0x1d4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d009      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a47      	ldr	r2, [pc, #284]	@ (800370c <HAL_DMA_Abort_IT+0x1d8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_DMA_Abort_IT+0xc8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a46      	ldr	r2, [pc, #280]	@ (8003710 <HAL_DMA_Abort_IT+0x1dc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d101      	bne.n	8003600 <HAL_DMA_Abort_IT+0xcc>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_DMA_Abort_IT+0xce>
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8086 	beq.w	8003714 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2204      	movs	r2, #4
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2f      	ldr	r2, [pc, #188]	@ (80036d4 <HAL_DMA_Abort_IT+0x1a0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d04a      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2e      	ldr	r2, [pc, #184]	@ (80036d8 <HAL_DMA_Abort_IT+0x1a4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d045      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2c      	ldr	r2, [pc, #176]	@ (80036dc <HAL_DMA_Abort_IT+0x1a8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d040      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2b      	ldr	r2, [pc, #172]	@ (80036e0 <HAL_DMA_Abort_IT+0x1ac>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d03b      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a29      	ldr	r2, [pc, #164]	@ (80036e4 <HAL_DMA_Abort_IT+0x1b0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d036      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a28      	ldr	r2, [pc, #160]	@ (80036e8 <HAL_DMA_Abort_IT+0x1b4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d031      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	@ (80036ec <HAL_DMA_Abort_IT+0x1b8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d02c      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a25      	ldr	r2, [pc, #148]	@ (80036f0 <HAL_DMA_Abort_IT+0x1bc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d027      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a23      	ldr	r2, [pc, #140]	@ (80036f4 <HAL_DMA_Abort_IT+0x1c0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d022      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <HAL_DMA_Abort_IT+0x1c4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d01d      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a20      	ldr	r2, [pc, #128]	@ (80036fc <HAL_DMA_Abort_IT+0x1c8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <HAL_DMA_Abort_IT+0x1cc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <HAL_DMA_Abort_IT+0x1d0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00e      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_DMA_Abort_IT+0x1d4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1a      	ldr	r2, [pc, #104]	@ (800370c <HAL_DMA_Abort_IT+0x1d8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x17c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a19      	ldr	r2, [pc, #100]	@ (8003710 <HAL_DMA_Abort_IT+0x1dc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d108      	bne.n	80036c2 <HAL_DMA_Abort_IT+0x18e>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e178      	b.n	80039b4 <HAL_DMA_Abort_IT+0x480>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e16f      	b.n	80039b4 <HAL_DMA_Abort_IT+0x480>
 80036d4:	40020010 	.word	0x40020010
 80036d8:	40020028 	.word	0x40020028
 80036dc:	40020040 	.word	0x40020040
 80036e0:	40020058 	.word	0x40020058
 80036e4:	40020070 	.word	0x40020070
 80036e8:	40020088 	.word	0x40020088
 80036ec:	400200a0 	.word	0x400200a0
 80036f0:	400200b8 	.word	0x400200b8
 80036f4:	40020410 	.word	0x40020410
 80036f8:	40020428 	.word	0x40020428
 80036fc:	40020440 	.word	0x40020440
 8003700:	40020458 	.word	0x40020458
 8003704:	40020470 	.word	0x40020470
 8003708:	40020488 	.word	0x40020488
 800370c:	400204a0 	.word	0x400204a0
 8003710:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 020e 	bic.w	r2, r2, #14
 8003722:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a6c      	ldr	r2, [pc, #432]	@ (80038dc <HAL_DMA_Abort_IT+0x3a8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d04a      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6b      	ldr	r2, [pc, #428]	@ (80038e0 <HAL_DMA_Abort_IT+0x3ac>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d045      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a69      	ldr	r2, [pc, #420]	@ (80038e4 <HAL_DMA_Abort_IT+0x3b0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d040      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a68      	ldr	r2, [pc, #416]	@ (80038e8 <HAL_DMA_Abort_IT+0x3b4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d03b      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a66      	ldr	r2, [pc, #408]	@ (80038ec <HAL_DMA_Abort_IT+0x3b8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d036      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a65      	ldr	r2, [pc, #404]	@ (80038f0 <HAL_DMA_Abort_IT+0x3bc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d031      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a63      	ldr	r2, [pc, #396]	@ (80038f4 <HAL_DMA_Abort_IT+0x3c0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d02c      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a62      	ldr	r2, [pc, #392]	@ (80038f8 <HAL_DMA_Abort_IT+0x3c4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d027      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a60      	ldr	r2, [pc, #384]	@ (80038fc <HAL_DMA_Abort_IT+0x3c8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5f      	ldr	r2, [pc, #380]	@ (8003900 <HAL_DMA_Abort_IT+0x3cc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d01d      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5d      	ldr	r2, [pc, #372]	@ (8003904 <HAL_DMA_Abort_IT+0x3d0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a5c      	ldr	r2, [pc, #368]	@ (8003908 <HAL_DMA_Abort_IT+0x3d4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a5a      	ldr	r2, [pc, #360]	@ (800390c <HAL_DMA_Abort_IT+0x3d8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a59      	ldr	r2, [pc, #356]	@ (8003910 <HAL_DMA_Abort_IT+0x3dc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a57      	ldr	r2, [pc, #348]	@ (8003914 <HAL_DMA_Abort_IT+0x3e0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_DMA_Abort_IT+0x290>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a56      	ldr	r2, [pc, #344]	@ (8003918 <HAL_DMA_Abort_IT+0x3e4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d108      	bne.n	80037d6 <HAL_DMA_Abort_IT+0x2a2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e007      	b.n	80037e6 <HAL_DMA_Abort_IT+0x2b2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a3c      	ldr	r2, [pc, #240]	@ (80038dc <HAL_DMA_Abort_IT+0x3a8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d072      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a3a      	ldr	r2, [pc, #232]	@ (80038e0 <HAL_DMA_Abort_IT+0x3ac>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d06d      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a39      	ldr	r2, [pc, #228]	@ (80038e4 <HAL_DMA_Abort_IT+0x3b0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d068      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a37      	ldr	r2, [pc, #220]	@ (80038e8 <HAL_DMA_Abort_IT+0x3b4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d063      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a36      	ldr	r2, [pc, #216]	@ (80038ec <HAL_DMA_Abort_IT+0x3b8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d05e      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a34      	ldr	r2, [pc, #208]	@ (80038f0 <HAL_DMA_Abort_IT+0x3bc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d059      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a33      	ldr	r2, [pc, #204]	@ (80038f4 <HAL_DMA_Abort_IT+0x3c0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d054      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a31      	ldr	r2, [pc, #196]	@ (80038f8 <HAL_DMA_Abort_IT+0x3c4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d04f      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a30      	ldr	r2, [pc, #192]	@ (80038fc <HAL_DMA_Abort_IT+0x3c8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d04a      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2e      	ldr	r2, [pc, #184]	@ (8003900 <HAL_DMA_Abort_IT+0x3cc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d045      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2d      	ldr	r2, [pc, #180]	@ (8003904 <HAL_DMA_Abort_IT+0x3d0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d040      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2b      	ldr	r2, [pc, #172]	@ (8003908 <HAL_DMA_Abort_IT+0x3d4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d03b      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2a      	ldr	r2, [pc, #168]	@ (800390c <HAL_DMA_Abort_IT+0x3d8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d036      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a28      	ldr	r2, [pc, #160]	@ (8003910 <HAL_DMA_Abort_IT+0x3dc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d031      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a27      	ldr	r2, [pc, #156]	@ (8003914 <HAL_DMA_Abort_IT+0x3e0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d02c      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a25      	ldr	r2, [pc, #148]	@ (8003918 <HAL_DMA_Abort_IT+0x3e4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d027      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a24      	ldr	r2, [pc, #144]	@ (800391c <HAL_DMA_Abort_IT+0x3e8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d022      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a22      	ldr	r2, [pc, #136]	@ (8003920 <HAL_DMA_Abort_IT+0x3ec>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01d      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a21      	ldr	r2, [pc, #132]	@ (8003924 <HAL_DMA_Abort_IT+0x3f0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d018      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003928 <HAL_DMA_Abort_IT+0x3f4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1e      	ldr	r2, [pc, #120]	@ (800392c <HAL_DMA_Abort_IT+0x3f8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003930 <HAL_DMA_Abort_IT+0x3fc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003934 <HAL_DMA_Abort_IT+0x400>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x3a2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a19      	ldr	r2, [pc, #100]	@ (8003938 <HAL_DMA_Abort_IT+0x404>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d132      	bne.n	800393c <HAL_DMA_Abort_IT+0x408>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e031      	b.n	800393e <HAL_DMA_Abort_IT+0x40a>
 80038da:	bf00      	nop
 80038dc:	40020010 	.word	0x40020010
 80038e0:	40020028 	.word	0x40020028
 80038e4:	40020040 	.word	0x40020040
 80038e8:	40020058 	.word	0x40020058
 80038ec:	40020070 	.word	0x40020070
 80038f0:	40020088 	.word	0x40020088
 80038f4:	400200a0 	.word	0x400200a0
 80038f8:	400200b8 	.word	0x400200b8
 80038fc:	40020410 	.word	0x40020410
 8003900:	40020428 	.word	0x40020428
 8003904:	40020440 	.word	0x40020440
 8003908:	40020458 	.word	0x40020458
 800390c:	40020470 	.word	0x40020470
 8003910:	40020488 	.word	0x40020488
 8003914:	400204a0 	.word	0x400204a0
 8003918:	400204b8 	.word	0x400204b8
 800391c:	58025408 	.word	0x58025408
 8003920:	5802541c 	.word	0x5802541c
 8003924:	58025430 	.word	0x58025430
 8003928:	58025444 	.word	0x58025444
 800392c:	58025458 	.word	0x58025458
 8003930:	5802546c 	.word	0x5802546c
 8003934:	58025480 	.word	0x58025480
 8003938:	58025494 	.word	0x58025494
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d028      	beq.n	8003994 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003950:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003956:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	2201      	movs	r2, #1
 8003962:	409a      	lsls	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003970:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00c      	beq.n	8003994 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003984:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003988:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003992:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop

080039c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039cc:	4b67      	ldr	r3, [pc, #412]	@ (8003b6c <HAL_DMA_IRQHandler+0x1ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a67      	ldr	r2, [pc, #412]	@ (8003b70 <HAL_DMA_IRQHandler+0x1b0>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0a9b      	lsrs	r3, r3, #10
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003b74 <HAL_DMA_IRQHandler+0x1b4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d04a      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5d      	ldr	r2, [pc, #372]	@ (8003b78 <HAL_DMA_IRQHandler+0x1b8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d045      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b7c <HAL_DMA_IRQHandler+0x1bc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d040      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5a      	ldr	r2, [pc, #360]	@ (8003b80 <HAL_DMA_IRQHandler+0x1c0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d03b      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a59      	ldr	r2, [pc, #356]	@ (8003b84 <HAL_DMA_IRQHandler+0x1c4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d036      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a57      	ldr	r2, [pc, #348]	@ (8003b88 <HAL_DMA_IRQHandler+0x1c8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d031      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a56      	ldr	r2, [pc, #344]	@ (8003b8c <HAL_DMA_IRQHandler+0x1cc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d02c      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a54      	ldr	r2, [pc, #336]	@ (8003b90 <HAL_DMA_IRQHandler+0x1d0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d027      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a53      	ldr	r2, [pc, #332]	@ (8003b94 <HAL_DMA_IRQHandler+0x1d4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a51      	ldr	r2, [pc, #324]	@ (8003b98 <HAL_DMA_IRQHandler+0x1d8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01d      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a50      	ldr	r2, [pc, #320]	@ (8003b9c <HAL_DMA_IRQHandler+0x1dc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a4b      	ldr	r2, [pc, #300]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d009      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a4a      	ldr	r2, [pc, #296]	@ (8003bac <HAL_DMA_IRQHandler+0x1ec>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xd2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a48      	ldr	r2, [pc, #288]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <HAL_DMA_IRQHandler+0xd6>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_DMA_IRQHandler+0xd8>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 842b 	beq.w	80042f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80a2 	beq.w	8003bf8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8003b74 <HAL_DMA_IRQHandler+0x1b4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d04a      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <HAL_DMA_IRQHandler+0x1b8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d045      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <HAL_DMA_IRQHandler+0x1bc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d040      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b80 <HAL_DMA_IRQHandler+0x1c0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d03b      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a28      	ldr	r2, [pc, #160]	@ (8003b84 <HAL_DMA_IRQHandler+0x1c4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d036      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a27      	ldr	r2, [pc, #156]	@ (8003b88 <HAL_DMA_IRQHandler+0x1c8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d031      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <HAL_DMA_IRQHandler+0x1cc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02c      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a24      	ldr	r2, [pc, #144]	@ (8003b90 <HAL_DMA_IRQHandler+0x1d0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d027      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a22      	ldr	r2, [pc, #136]	@ (8003b94 <HAL_DMA_IRQHandler+0x1d4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d022      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a21      	ldr	r2, [pc, #132]	@ (8003b98 <HAL_DMA_IRQHandler+0x1d8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d01d      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b9c <HAL_DMA_IRQHandler+0x1dc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <HAL_DMA_IRQHandler+0x1ec>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x194>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a18      	ldr	r2, [pc, #96]	@ (8003bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d12f      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x1f4>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bf14      	ite	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	2300      	moveq	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	e02e      	b.n	8003bc8 <HAL_DMA_IRQHandler+0x208>
 8003b6a:	bf00      	nop
 8003b6c:	24000000 	.word	0x24000000
 8003b70:	1b4e81b5 	.word	0x1b4e81b5
 8003b74:	40020010 	.word	0x40020010
 8003b78:	40020028 	.word	0x40020028
 8003b7c:	40020040 	.word	0x40020040
 8003b80:	40020058 	.word	0x40020058
 8003b84:	40020070 	.word	0x40020070
 8003b88:	40020088 	.word	0x40020088
 8003b8c:	400200a0 	.word	0x400200a0
 8003b90:	400200b8 	.word	0x400200b8
 8003b94:	40020410 	.word	0x40020410
 8003b98:	40020428 	.word	0x40020428
 8003b9c:	40020440 	.word	0x40020440
 8003ba0:	40020458 	.word	0x40020458
 8003ba4:	40020470 	.word	0x40020470
 8003ba8:	40020488 	.word	0x40020488
 8003bac:	400204a0 	.word	0x400204a0
 8003bb0:	400204b8 	.word	0x400204b8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0204 	bic.w	r2, r2, #4
 8003bda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	2208      	movs	r2, #8
 8003be6:	409a      	lsls	r2, r3
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	f043 0201 	orr.w	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	fa22 f303 	lsr.w	r3, r2, r3
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d06e      	beq.n	8003cec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a69      	ldr	r2, [pc, #420]	@ (8003db8 <HAL_DMA_IRQHandler+0x3f8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d04a      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a67      	ldr	r2, [pc, #412]	@ (8003dbc <HAL_DMA_IRQHandler+0x3fc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d045      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a66      	ldr	r2, [pc, #408]	@ (8003dc0 <HAL_DMA_IRQHandler+0x400>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d040      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a64      	ldr	r2, [pc, #400]	@ (8003dc4 <HAL_DMA_IRQHandler+0x404>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d03b      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a63      	ldr	r2, [pc, #396]	@ (8003dc8 <HAL_DMA_IRQHandler+0x408>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d036      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a61      	ldr	r2, [pc, #388]	@ (8003dcc <HAL_DMA_IRQHandler+0x40c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d031      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a60      	ldr	r2, [pc, #384]	@ (8003dd0 <HAL_DMA_IRQHandler+0x410>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d02c      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd4 <HAL_DMA_IRQHandler+0x414>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d027      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a5d      	ldr	r2, [pc, #372]	@ (8003dd8 <HAL_DMA_IRQHandler+0x418>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d022      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5b      	ldr	r2, [pc, #364]	@ (8003ddc <HAL_DMA_IRQHandler+0x41c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01d      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a5a      	ldr	r2, [pc, #360]	@ (8003de0 <HAL_DMA_IRQHandler+0x420>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d018      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a58      	ldr	r2, [pc, #352]	@ (8003de4 <HAL_DMA_IRQHandler+0x424>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d013      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a57      	ldr	r2, [pc, #348]	@ (8003de8 <HAL_DMA_IRQHandler+0x428>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a55      	ldr	r2, [pc, #340]	@ (8003dec <HAL_DMA_IRQHandler+0x42c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a54      	ldr	r2, [pc, #336]	@ (8003df0 <HAL_DMA_IRQHandler+0x430>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_DMA_IRQHandler+0x2ee>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a52      	ldr	r2, [pc, #328]	@ (8003df4 <HAL_DMA_IRQHandler+0x434>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10a      	bne.n	8003cc4 <HAL_DMA_IRQHandler+0x304>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e003      	b.n	8003ccc <HAL_DMA_IRQHandler+0x30c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2201      	movs	r2, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f043 0202 	orr.w	r2, r3, #2
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 808f 	beq.w	8003e20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2c      	ldr	r2, [pc, #176]	@ (8003db8 <HAL_DMA_IRQHandler+0x3f8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d04a      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2a      	ldr	r2, [pc, #168]	@ (8003dbc <HAL_DMA_IRQHandler+0x3fc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d045      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a29      	ldr	r2, [pc, #164]	@ (8003dc0 <HAL_DMA_IRQHandler+0x400>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d040      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a27      	ldr	r2, [pc, #156]	@ (8003dc4 <HAL_DMA_IRQHandler+0x404>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d03b      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a26      	ldr	r2, [pc, #152]	@ (8003dc8 <HAL_DMA_IRQHandler+0x408>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d036      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a24      	ldr	r2, [pc, #144]	@ (8003dcc <HAL_DMA_IRQHandler+0x40c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d031      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a23      	ldr	r2, [pc, #140]	@ (8003dd0 <HAL_DMA_IRQHandler+0x410>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d02c      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a21      	ldr	r2, [pc, #132]	@ (8003dd4 <HAL_DMA_IRQHandler+0x414>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d027      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a20      	ldr	r2, [pc, #128]	@ (8003dd8 <HAL_DMA_IRQHandler+0x418>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d022      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1e      	ldr	r2, [pc, #120]	@ (8003ddc <HAL_DMA_IRQHandler+0x41c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01d      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003de0 <HAL_DMA_IRQHandler+0x420>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1b      	ldr	r2, [pc, #108]	@ (8003de4 <HAL_DMA_IRQHandler+0x424>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003de8 <HAL_DMA_IRQHandler+0x428>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a18      	ldr	r2, [pc, #96]	@ (8003dec <HAL_DMA_IRQHandler+0x42c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a17      	ldr	r2, [pc, #92]	@ (8003df0 <HAL_DMA_IRQHandler+0x430>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x3e2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a15      	ldr	r2, [pc, #84]	@ (8003df4 <HAL_DMA_IRQHandler+0x434>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d12a      	bne.n	8003df8 <HAL_DMA_IRQHandler+0x438>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e023      	b.n	8003e00 <HAL_DMA_IRQHandler+0x440>
 8003db8:	40020010 	.word	0x40020010
 8003dbc:	40020028 	.word	0x40020028
 8003dc0:	40020040 	.word	0x40020040
 8003dc4:	40020058 	.word	0x40020058
 8003dc8:	40020070 	.word	0x40020070
 8003dcc:	40020088 	.word	0x40020088
 8003dd0:	400200a0 	.word	0x400200a0
 8003dd4:	400200b8 	.word	0x400200b8
 8003dd8:	40020410 	.word	0x40020410
 8003ddc:	40020428 	.word	0x40020428
 8003de0:	40020440 	.word	0x40020440
 8003de4:	40020458 	.word	0x40020458
 8003de8:	40020470 	.word	0x40020470
 8003dec:	40020488 	.word	0x40020488
 8003df0:	400204a0 	.word	0x400204a0
 8003df4:	400204b8 	.word	0x400204b8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2210      	movs	r2, #16
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a6 	beq.w	8003f82 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a85      	ldr	r2, [pc, #532]	@ (8004050 <HAL_DMA_IRQHandler+0x690>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d04a      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a83      	ldr	r2, [pc, #524]	@ (8004054 <HAL_DMA_IRQHandler+0x694>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d045      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a82      	ldr	r2, [pc, #520]	@ (8004058 <HAL_DMA_IRQHandler+0x698>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d040      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a80      	ldr	r2, [pc, #512]	@ (800405c <HAL_DMA_IRQHandler+0x69c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d03b      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a7f      	ldr	r2, [pc, #508]	@ (8004060 <HAL_DMA_IRQHandler+0x6a0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d036      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a7d      	ldr	r2, [pc, #500]	@ (8004064 <HAL_DMA_IRQHandler+0x6a4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d031      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a7c      	ldr	r2, [pc, #496]	@ (8004068 <HAL_DMA_IRQHandler+0x6a8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d02c      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a7a      	ldr	r2, [pc, #488]	@ (800406c <HAL_DMA_IRQHandler+0x6ac>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d027      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a79      	ldr	r2, [pc, #484]	@ (8004070 <HAL_DMA_IRQHandler+0x6b0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d022      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a77      	ldr	r2, [pc, #476]	@ (8004074 <HAL_DMA_IRQHandler+0x6b4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01d      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a76      	ldr	r2, [pc, #472]	@ (8004078 <HAL_DMA_IRQHandler+0x6b8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d018      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a74      	ldr	r2, [pc, #464]	@ (800407c <HAL_DMA_IRQHandler+0x6bc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a73      	ldr	r2, [pc, #460]	@ (8004080 <HAL_DMA_IRQHandler+0x6c0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a71      	ldr	r2, [pc, #452]	@ (8004084 <HAL_DMA_IRQHandler+0x6c4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a70      	ldr	r2, [pc, #448]	@ (8004088 <HAL_DMA_IRQHandler+0x6c8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x516>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a6e      	ldr	r2, [pc, #440]	@ (800408c <HAL_DMA_IRQHandler+0x6cc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10a      	bne.n	8003eec <HAL_DMA_IRQHandler+0x52c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e009      	b.n	8003f00 <HAL_DMA_IRQHandler+0x540>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d03e      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d018      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d108      	bne.n	8003f42 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d024      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	4798      	blx	r3
 8003f40:	e01f      	b.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01b      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
 8003f52:	e016      	b.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d107      	bne.n	8003f72 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0208 	bic.w	r2, r2, #8
 8003f70:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8110 	beq.w	80041b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004050 <HAL_DMA_IRQHandler+0x690>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d04a      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <HAL_DMA_IRQHandler+0x694>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d045      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a29      	ldr	r2, [pc, #164]	@ (8004058 <HAL_DMA_IRQHandler+0x698>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d040      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a28      	ldr	r2, [pc, #160]	@ (800405c <HAL_DMA_IRQHandler+0x69c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d03b      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a26      	ldr	r2, [pc, #152]	@ (8004060 <HAL_DMA_IRQHandler+0x6a0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d036      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <HAL_DMA_IRQHandler+0x6a4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d031      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	@ (8004068 <HAL_DMA_IRQHandler+0x6a8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02c      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a22      	ldr	r2, [pc, #136]	@ (800406c <HAL_DMA_IRQHandler+0x6ac>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d027      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a20      	ldr	r2, [pc, #128]	@ (8004070 <HAL_DMA_IRQHandler+0x6b0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d022      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8004074 <HAL_DMA_IRQHandler+0x6b4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d01d      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1d      	ldr	r2, [pc, #116]	@ (8004078 <HAL_DMA_IRQHandler+0x6b8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d018      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <HAL_DMA_IRQHandler+0x6bc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1a      	ldr	r2, [pc, #104]	@ (8004080 <HAL_DMA_IRQHandler+0x6c0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a19      	ldr	r2, [pc, #100]	@ (8004084 <HAL_DMA_IRQHandler+0x6c4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a17      	ldr	r2, [pc, #92]	@ (8004088 <HAL_DMA_IRQHandler+0x6c8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_DMA_IRQHandler+0x678>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a16      	ldr	r2, [pc, #88]	@ (800408c <HAL_DMA_IRQHandler+0x6cc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d12b      	bne.n	8004090 <HAL_DMA_IRQHandler+0x6d0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf14      	ite	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2300      	moveq	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	e02a      	b.n	80040a4 <HAL_DMA_IRQHandler+0x6e4>
 800404e:	bf00      	nop
 8004050:	40020010 	.word	0x40020010
 8004054:	40020028 	.word	0x40020028
 8004058:	40020040 	.word	0x40020040
 800405c:	40020058 	.word	0x40020058
 8004060:	40020070 	.word	0x40020070
 8004064:	40020088 	.word	0x40020088
 8004068:	400200a0 	.word	0x400200a0
 800406c:	400200b8 	.word	0x400200b8
 8004070:	40020410 	.word	0x40020410
 8004074:	40020428 	.word	0x40020428
 8004078:	40020440 	.word	0x40020440
 800407c:	40020458 	.word	0x40020458
 8004080:	40020470 	.word	0x40020470
 8004084:	40020488 	.word	0x40020488
 8004088:	400204a0 	.word	0x400204a0
 800408c:	400204b8 	.word	0x400204b8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8087 	beq.w	80041b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2220      	movs	r2, #32
 80040b4:	409a      	lsls	r2, r3
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d139      	bne.n	800413a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0216 	bic.w	r2, r2, #22
 80040d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d103      	bne.n	80040f6 <HAL_DMA_IRQHandler+0x736>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0208 	bic.w	r2, r2, #8
 8004104:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	223f      	movs	r2, #63	@ 0x3f
 8004110:	409a      	lsls	r2, r3
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8382 	beq.w	8004834 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
          }
          return;
 8004138:	e37c      	b.n	8004834 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d018      	beq.n	800417a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d108      	bne.n	8004168 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	2b00      	cmp	r3, #0
 800415c:	d02c      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
 8004166:	e027      	b.n	80041b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d023      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
 8004178:	e01e      	b.n	80041b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10f      	bne.n	80041a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0210 	bic.w	r2, r2, #16
 8004196:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 833e 	beq.w	800483e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8088 	beq.w	80042e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2204      	movs	r2, #4
 80041d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a89      	ldr	r2, [pc, #548]	@ (8004404 <HAL_DMA_IRQHandler+0xa44>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d04a      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a88      	ldr	r2, [pc, #544]	@ (8004408 <HAL_DMA_IRQHandler+0xa48>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d045      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a86      	ldr	r2, [pc, #536]	@ (800440c <HAL_DMA_IRQHandler+0xa4c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d040      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a85      	ldr	r2, [pc, #532]	@ (8004410 <HAL_DMA_IRQHandler+0xa50>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d03b      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a83      	ldr	r2, [pc, #524]	@ (8004414 <HAL_DMA_IRQHandler+0xa54>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d036      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a82      	ldr	r2, [pc, #520]	@ (8004418 <HAL_DMA_IRQHandler+0xa58>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d031      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a80      	ldr	r2, [pc, #512]	@ (800441c <HAL_DMA_IRQHandler+0xa5c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d02c      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7f      	ldr	r2, [pc, #508]	@ (8004420 <HAL_DMA_IRQHandler+0xa60>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d027      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a7d      	ldr	r2, [pc, #500]	@ (8004424 <HAL_DMA_IRQHandler+0xa64>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d022      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a7c      	ldr	r2, [pc, #496]	@ (8004428 <HAL_DMA_IRQHandler+0xa68>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d01d      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a7a      	ldr	r2, [pc, #488]	@ (800442c <HAL_DMA_IRQHandler+0xa6c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d018      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a79      	ldr	r2, [pc, #484]	@ (8004430 <HAL_DMA_IRQHandler+0xa70>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a77      	ldr	r2, [pc, #476]	@ (8004434 <HAL_DMA_IRQHandler+0xa74>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a76      	ldr	r2, [pc, #472]	@ (8004438 <HAL_DMA_IRQHandler+0xa78>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a74      	ldr	r2, [pc, #464]	@ (800443c <HAL_DMA_IRQHandler+0xa7c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_DMA_IRQHandler+0x8b8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a73      	ldr	r2, [pc, #460]	@ (8004440 <HAL_DMA_IRQHandler+0xa80>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d108      	bne.n	800428a <HAL_DMA_IRQHandler+0x8ca>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e007      	b.n	800429a <HAL_DMA_IRQHandler+0x8da>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3301      	adds	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d307      	bcc.n	80042b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f2      	bne.n	800429a <HAL_DMA_IRQHandler+0x8da>
 80042b4:	e000      	b.n	80042b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80042b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80042ce:	e003      	b.n	80042d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 82aa 	beq.w	800483e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
 80042f2:	e2a4      	b.n	800483e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a52      	ldr	r2, [pc, #328]	@ (8004444 <HAL_DMA_IRQHandler+0xa84>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d04a      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a51      	ldr	r2, [pc, #324]	@ (8004448 <HAL_DMA_IRQHandler+0xa88>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d045      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a4f      	ldr	r2, [pc, #316]	@ (800444c <HAL_DMA_IRQHandler+0xa8c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d040      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a4e      	ldr	r2, [pc, #312]	@ (8004450 <HAL_DMA_IRQHandler+0xa90>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d03b      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a4c      	ldr	r2, [pc, #304]	@ (8004454 <HAL_DMA_IRQHandler+0xa94>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d036      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a4b      	ldr	r2, [pc, #300]	@ (8004458 <HAL_DMA_IRQHandler+0xa98>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d031      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a49      	ldr	r2, [pc, #292]	@ (800445c <HAL_DMA_IRQHandler+0xa9c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d02c      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a48      	ldr	r2, [pc, #288]	@ (8004460 <HAL_DMA_IRQHandler+0xaa0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d027      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a46      	ldr	r2, [pc, #280]	@ (8004464 <HAL_DMA_IRQHandler+0xaa4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a45      	ldr	r2, [pc, #276]	@ (8004468 <HAL_DMA_IRQHandler+0xaa8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01d      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a43      	ldr	r2, [pc, #268]	@ (800446c <HAL_DMA_IRQHandler+0xaac>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a42      	ldr	r2, [pc, #264]	@ (8004470 <HAL_DMA_IRQHandler+0xab0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a40      	ldr	r2, [pc, #256]	@ (8004474 <HAL_DMA_IRQHandler+0xab4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3f      	ldr	r2, [pc, #252]	@ (8004478 <HAL_DMA_IRQHandler+0xab8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3d      	ldr	r2, [pc, #244]	@ (800447c <HAL_DMA_IRQHandler+0xabc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_DMA_IRQHandler+0x9d4>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3c      	ldr	r2, [pc, #240]	@ (8004480 <HAL_DMA_IRQHandler+0xac0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <HAL_DMA_IRQHandler+0x9d8>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_DMA_IRQHandler+0x9da>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 824f 	beq.w	800483e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	2204      	movs	r2, #4
 80043b2:	409a      	lsls	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80dd 	beq.w	8004578 <HAL_DMA_IRQHandler+0xbb8>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80d7 	beq.w	8004578 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	2204      	movs	r2, #4
 80043d4:	409a      	lsls	r2, r3
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d059      	beq.n	8004498 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d14a      	bne.n	8004484 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8220 	beq.w	8004838 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004400:	e21a      	b.n	8004838 <HAL_DMA_IRQHandler+0xe78>
 8004402:	bf00      	nop
 8004404:	40020010 	.word	0x40020010
 8004408:	40020028 	.word	0x40020028
 800440c:	40020040 	.word	0x40020040
 8004410:	40020058 	.word	0x40020058
 8004414:	40020070 	.word	0x40020070
 8004418:	40020088 	.word	0x40020088
 800441c:	400200a0 	.word	0x400200a0
 8004420:	400200b8 	.word	0x400200b8
 8004424:	40020410 	.word	0x40020410
 8004428:	40020428 	.word	0x40020428
 800442c:	40020440 	.word	0x40020440
 8004430:	40020458 	.word	0x40020458
 8004434:	40020470 	.word	0x40020470
 8004438:	40020488 	.word	0x40020488
 800443c:	400204a0 	.word	0x400204a0
 8004440:	400204b8 	.word	0x400204b8
 8004444:	48022c08 	.word	0x48022c08
 8004448:	48022c1c 	.word	0x48022c1c
 800444c:	48022c30 	.word	0x48022c30
 8004450:	48022c44 	.word	0x48022c44
 8004454:	48022c58 	.word	0x48022c58
 8004458:	48022c6c 	.word	0x48022c6c
 800445c:	48022c80 	.word	0x48022c80
 8004460:	48022c94 	.word	0x48022c94
 8004464:	58025408 	.word	0x58025408
 8004468:	5802541c 	.word	0x5802541c
 800446c:	58025430 	.word	0x58025430
 8004470:	58025444 	.word	0x58025444
 8004474:	58025458 	.word	0x58025458
 8004478:	5802546c 	.word	0x5802546c
 800447c:	58025480 	.word	0x58025480
 8004480:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 81d5 	beq.w	8004838 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004496:	e1cf      	b.n	8004838 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d160      	bne.n	8004564 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a7f      	ldr	r2, [pc, #508]	@ (80046a4 <HAL_DMA_IRQHandler+0xce4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d04a      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a7d      	ldr	r2, [pc, #500]	@ (80046a8 <HAL_DMA_IRQHandler+0xce8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d045      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a7c      	ldr	r2, [pc, #496]	@ (80046ac <HAL_DMA_IRQHandler+0xcec>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d040      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a7a      	ldr	r2, [pc, #488]	@ (80046b0 <HAL_DMA_IRQHandler+0xcf0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d03b      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a79      	ldr	r2, [pc, #484]	@ (80046b4 <HAL_DMA_IRQHandler+0xcf4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d036      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a77      	ldr	r2, [pc, #476]	@ (80046b8 <HAL_DMA_IRQHandler+0xcf8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d031      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a76      	ldr	r2, [pc, #472]	@ (80046bc <HAL_DMA_IRQHandler+0xcfc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d02c      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a74      	ldr	r2, [pc, #464]	@ (80046c0 <HAL_DMA_IRQHandler+0xd00>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d027      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a73      	ldr	r2, [pc, #460]	@ (80046c4 <HAL_DMA_IRQHandler+0xd04>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d022      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a71      	ldr	r2, [pc, #452]	@ (80046c8 <HAL_DMA_IRQHandler+0xd08>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01d      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a70      	ldr	r2, [pc, #448]	@ (80046cc <HAL_DMA_IRQHandler+0xd0c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d018      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a6e      	ldr	r2, [pc, #440]	@ (80046d0 <HAL_DMA_IRQHandler+0xd10>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6d      	ldr	r2, [pc, #436]	@ (80046d4 <HAL_DMA_IRQHandler+0xd14>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6b      	ldr	r2, [pc, #428]	@ (80046d8 <HAL_DMA_IRQHandler+0xd18>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6a      	ldr	r2, [pc, #424]	@ (80046dc <HAL_DMA_IRQHandler+0xd1c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <HAL_DMA_IRQHandler+0xb82>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a68      	ldr	r2, [pc, #416]	@ (80046e0 <HAL_DMA_IRQHandler+0xd20>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <HAL_DMA_IRQHandler+0xb94>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0208 	bic.w	r2, r2, #8
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e007      	b.n	8004564 <HAL_DMA_IRQHandler+0xba4>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0204 	bic.w	r2, r2, #4
 8004562:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8165 	beq.w	8004838 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004576:	e15f      	b.n	8004838 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	2202      	movs	r2, #2
 8004582:	409a      	lsls	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4013      	ands	r3, r2
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80c5 	beq.w	8004718 <HAL_DMA_IRQHandler+0xd58>
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80bf 	beq.w	8004718 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	2202      	movs	r2, #2
 80045a4:	409a      	lsls	r2, r3
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d018      	beq.n	80045e6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 813a 	beq.w	800483c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d0:	e134      	b.n	800483c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8130 	beq.w	800483c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e4:	e12a      	b.n	800483c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 8089 	bne.w	8004704 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a2b      	ldr	r2, [pc, #172]	@ (80046a4 <HAL_DMA_IRQHandler+0xce4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d04a      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a29      	ldr	r2, [pc, #164]	@ (80046a8 <HAL_DMA_IRQHandler+0xce8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d045      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a28      	ldr	r2, [pc, #160]	@ (80046ac <HAL_DMA_IRQHandler+0xcec>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d040      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a26      	ldr	r2, [pc, #152]	@ (80046b0 <HAL_DMA_IRQHandler+0xcf0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d03b      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a25      	ldr	r2, [pc, #148]	@ (80046b4 <HAL_DMA_IRQHandler+0xcf4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d036      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a23      	ldr	r2, [pc, #140]	@ (80046b8 <HAL_DMA_IRQHandler+0xcf8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d031      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a22      	ldr	r2, [pc, #136]	@ (80046bc <HAL_DMA_IRQHandler+0xcfc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d02c      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a20      	ldr	r2, [pc, #128]	@ (80046c0 <HAL_DMA_IRQHandler+0xd00>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d027      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1f      	ldr	r2, [pc, #124]	@ (80046c4 <HAL_DMA_IRQHandler+0xd04>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d022      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1d      	ldr	r2, [pc, #116]	@ (80046c8 <HAL_DMA_IRQHandler+0xd08>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01d      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1c      	ldr	r2, [pc, #112]	@ (80046cc <HAL_DMA_IRQHandler+0xd0c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d018      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1a      	ldr	r2, [pc, #104]	@ (80046d0 <HAL_DMA_IRQHandler+0xd10>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <HAL_DMA_IRQHandler+0xd14>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00e      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a17      	ldr	r2, [pc, #92]	@ (80046d8 <HAL_DMA_IRQHandler+0xd18>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d009      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <HAL_DMA_IRQHandler+0xd1c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_DMA_IRQHandler+0xcd2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a14      	ldr	r2, [pc, #80]	@ (80046e0 <HAL_DMA_IRQHandler+0xd20>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d128      	bne.n	80046e4 <HAL_DMA_IRQHandler+0xd24>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0214 	bic.w	r2, r2, #20
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e027      	b.n	80046f4 <HAL_DMA_IRQHandler+0xd34>
 80046a4:	40020010 	.word	0x40020010
 80046a8:	40020028 	.word	0x40020028
 80046ac:	40020040 	.word	0x40020040
 80046b0:	40020058 	.word	0x40020058
 80046b4:	40020070 	.word	0x40020070
 80046b8:	40020088 	.word	0x40020088
 80046bc:	400200a0 	.word	0x400200a0
 80046c0:	400200b8 	.word	0x400200b8
 80046c4:	40020410 	.word	0x40020410
 80046c8:	40020428 	.word	0x40020428
 80046cc:	40020440 	.word	0x40020440
 80046d0:	40020458 	.word	0x40020458
 80046d4:	40020470 	.word	0x40020470
 80046d8:	40020488 	.word	0x40020488
 80046dc:	400204a0 	.word	0x400204a0
 80046e0:	400204b8 	.word	0x400204b8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 020a 	bic.w	r2, r2, #10
 80046f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8097 	beq.w	800483c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004716:	e091      	b.n	800483c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2208      	movs	r2, #8
 8004722:	409a      	lsls	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8088 	beq.w	800483e <HAL_DMA_IRQHandler+0xe7e>
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8082 	beq.w	800483e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a41      	ldr	r2, [pc, #260]	@ (8004844 <HAL_DMA_IRQHandler+0xe84>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d04a      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a3f      	ldr	r2, [pc, #252]	@ (8004848 <HAL_DMA_IRQHandler+0xe88>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d045      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a3e      	ldr	r2, [pc, #248]	@ (800484c <HAL_DMA_IRQHandler+0xe8c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d040      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a3c      	ldr	r2, [pc, #240]	@ (8004850 <HAL_DMA_IRQHandler+0xe90>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d03b      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a3b      	ldr	r2, [pc, #236]	@ (8004854 <HAL_DMA_IRQHandler+0xe94>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d036      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a39      	ldr	r2, [pc, #228]	@ (8004858 <HAL_DMA_IRQHandler+0xe98>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d031      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a38      	ldr	r2, [pc, #224]	@ (800485c <HAL_DMA_IRQHandler+0xe9c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d02c      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a36      	ldr	r2, [pc, #216]	@ (8004860 <HAL_DMA_IRQHandler+0xea0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d027      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a35      	ldr	r2, [pc, #212]	@ (8004864 <HAL_DMA_IRQHandler+0xea4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d022      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a33      	ldr	r2, [pc, #204]	@ (8004868 <HAL_DMA_IRQHandler+0xea8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01d      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a32      	ldr	r2, [pc, #200]	@ (800486c <HAL_DMA_IRQHandler+0xeac>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d018      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a30      	ldr	r2, [pc, #192]	@ (8004870 <HAL_DMA_IRQHandler+0xeb0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004874 <HAL_DMA_IRQHandler+0xeb4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004878 <HAL_DMA_IRQHandler+0xeb8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a2c      	ldr	r2, [pc, #176]	@ (800487c <HAL_DMA_IRQHandler+0xebc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_DMA_IRQHandler+0xe1a>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004880 <HAL_DMA_IRQHandler+0xec0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d108      	bne.n	80047ec <HAL_DMA_IRQHandler+0xe2c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 021c 	bic.w	r2, r2, #28
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e007      	b.n	80047fc <HAL_DMA_IRQHandler+0xe3c>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 020e 	bic.w	r2, r2, #14
 80047fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2201      	movs	r2, #1
 8004806:	409a      	lsls	r2, r3
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
 8004832:	e004      	b.n	800483e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004834:	bf00      	nop
 8004836:	e002      	b.n	800483e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004838:	bf00      	nop
 800483a:	e000      	b.n	800483e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800483e:	3728      	adds	r7, #40	@ 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40020010 	.word	0x40020010
 8004848:	40020028 	.word	0x40020028
 800484c:	40020040 	.word	0x40020040
 8004850:	40020058 	.word	0x40020058
 8004854:	40020070 	.word	0x40020070
 8004858:	40020088 	.word	0x40020088
 800485c:	400200a0 	.word	0x400200a0
 8004860:	400200b8 	.word	0x400200b8
 8004864:	40020410 	.word	0x40020410
 8004868:	40020428 	.word	0x40020428
 800486c:	40020440 	.word	0x40020440
 8004870:	40020458 	.word	0x40020458
 8004874:	40020470 	.word	0x40020470
 8004878:	40020488 	.word	0x40020488
 800487c:	400204a0 	.word	0x400204a0
 8004880:	400204b8 	.word	0x400204b8

08004884 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a7f      	ldr	r2, [pc, #508]	@ (8004ab8 <DMA_SetConfig+0x21c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d072      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a7d      	ldr	r2, [pc, #500]	@ (8004abc <DMA_SetConfig+0x220>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d06d      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a7c      	ldr	r2, [pc, #496]	@ (8004ac0 <DMA_SetConfig+0x224>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d068      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a7a      	ldr	r2, [pc, #488]	@ (8004ac4 <DMA_SetConfig+0x228>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d063      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a79      	ldr	r2, [pc, #484]	@ (8004ac8 <DMA_SetConfig+0x22c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d05e      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a77      	ldr	r2, [pc, #476]	@ (8004acc <DMA_SetConfig+0x230>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d059      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a76      	ldr	r2, [pc, #472]	@ (8004ad0 <DMA_SetConfig+0x234>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d054      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a74      	ldr	r2, [pc, #464]	@ (8004ad4 <DMA_SetConfig+0x238>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d04f      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a73      	ldr	r2, [pc, #460]	@ (8004ad8 <DMA_SetConfig+0x23c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d04a      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a71      	ldr	r2, [pc, #452]	@ (8004adc <DMA_SetConfig+0x240>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d045      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a70      	ldr	r2, [pc, #448]	@ (8004ae0 <DMA_SetConfig+0x244>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d040      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a6e      	ldr	r2, [pc, #440]	@ (8004ae4 <DMA_SetConfig+0x248>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d03b      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a6d      	ldr	r2, [pc, #436]	@ (8004ae8 <DMA_SetConfig+0x24c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d036      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a6b      	ldr	r2, [pc, #428]	@ (8004aec <DMA_SetConfig+0x250>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d031      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a6a      	ldr	r2, [pc, #424]	@ (8004af0 <DMA_SetConfig+0x254>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d02c      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a68      	ldr	r2, [pc, #416]	@ (8004af4 <DMA_SetConfig+0x258>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d027      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a67      	ldr	r2, [pc, #412]	@ (8004af8 <DMA_SetConfig+0x25c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d022      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a65      	ldr	r2, [pc, #404]	@ (8004afc <DMA_SetConfig+0x260>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01d      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a64      	ldr	r2, [pc, #400]	@ (8004b00 <DMA_SetConfig+0x264>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d018      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a62      	ldr	r2, [pc, #392]	@ (8004b04 <DMA_SetConfig+0x268>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a61      	ldr	r2, [pc, #388]	@ (8004b08 <DMA_SetConfig+0x26c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5f      	ldr	r2, [pc, #380]	@ (8004b0c <DMA_SetConfig+0x270>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a5e      	ldr	r2, [pc, #376]	@ (8004b10 <DMA_SetConfig+0x274>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <DMA_SetConfig+0x10a>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a5c      	ldr	r2, [pc, #368]	@ (8004b14 <DMA_SetConfig+0x278>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d101      	bne.n	80049aa <DMA_SetConfig+0x10e>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <DMA_SetConfig+0x110>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00d      	beq.n	80049cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d004      	beq.n	80049cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80049ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a39      	ldr	r2, [pc, #228]	@ (8004ab8 <DMA_SetConfig+0x21c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d04a      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a38      	ldr	r2, [pc, #224]	@ (8004abc <DMA_SetConfig+0x220>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d045      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a36      	ldr	r2, [pc, #216]	@ (8004ac0 <DMA_SetConfig+0x224>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d040      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a35      	ldr	r2, [pc, #212]	@ (8004ac4 <DMA_SetConfig+0x228>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d03b      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a33      	ldr	r2, [pc, #204]	@ (8004ac8 <DMA_SetConfig+0x22c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d036      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a32      	ldr	r2, [pc, #200]	@ (8004acc <DMA_SetConfig+0x230>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d031      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a30      	ldr	r2, [pc, #192]	@ (8004ad0 <DMA_SetConfig+0x234>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d02c      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad4 <DMA_SetConfig+0x238>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d027      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad8 <DMA_SetConfig+0x23c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d022      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004adc <DMA_SetConfig+0x240>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d01d      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae0 <DMA_SetConfig+0x244>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d018      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a29      	ldr	r2, [pc, #164]	@ (8004ae4 <DMA_SetConfig+0x248>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a27      	ldr	r2, [pc, #156]	@ (8004ae8 <DMA_SetConfig+0x24c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a26      	ldr	r2, [pc, #152]	@ (8004aec <DMA_SetConfig+0x250>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a24      	ldr	r2, [pc, #144]	@ (8004af0 <DMA_SetConfig+0x254>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <DMA_SetConfig+0x1d0>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a23      	ldr	r2, [pc, #140]	@ (8004af4 <DMA_SetConfig+0x258>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <DMA_SetConfig+0x1d4>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <DMA_SetConfig+0x1d6>
 8004a70:	2300      	movs	r3, #0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d059      	beq.n	8004b2a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	223f      	movs	r2, #63	@ 0x3f
 8004a80:	409a      	lsls	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b40      	cmp	r3, #64	@ 0x40
 8004aa4:	d138      	bne.n	8004b18 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ab6:	e0ae      	b.n	8004c16 <DMA_SetConfig+0x37a>
 8004ab8:	40020010 	.word	0x40020010
 8004abc:	40020028 	.word	0x40020028
 8004ac0:	40020040 	.word	0x40020040
 8004ac4:	40020058 	.word	0x40020058
 8004ac8:	40020070 	.word	0x40020070
 8004acc:	40020088 	.word	0x40020088
 8004ad0:	400200a0 	.word	0x400200a0
 8004ad4:	400200b8 	.word	0x400200b8
 8004ad8:	40020410 	.word	0x40020410
 8004adc:	40020428 	.word	0x40020428
 8004ae0:	40020440 	.word	0x40020440
 8004ae4:	40020458 	.word	0x40020458
 8004ae8:	40020470 	.word	0x40020470
 8004aec:	40020488 	.word	0x40020488
 8004af0:	400204a0 	.word	0x400204a0
 8004af4:	400204b8 	.word	0x400204b8
 8004af8:	58025408 	.word	0x58025408
 8004afc:	5802541c 	.word	0x5802541c
 8004b00:	58025430 	.word	0x58025430
 8004b04:	58025444 	.word	0x58025444
 8004b08:	58025458 	.word	0x58025458
 8004b0c:	5802546c 	.word	0x5802546c
 8004b10:	58025480 	.word	0x58025480
 8004b14:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]
}
 8004b28:	e075      	b.n	8004c16 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8004c24 <DMA_SetConfig+0x388>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d04a      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a3b      	ldr	r2, [pc, #236]	@ (8004c28 <DMA_SetConfig+0x38c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d045      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a3a      	ldr	r2, [pc, #232]	@ (8004c2c <DMA_SetConfig+0x390>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d040      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a38      	ldr	r2, [pc, #224]	@ (8004c30 <DMA_SetConfig+0x394>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d03b      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a37      	ldr	r2, [pc, #220]	@ (8004c34 <DMA_SetConfig+0x398>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d036      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a35      	ldr	r2, [pc, #212]	@ (8004c38 <DMA_SetConfig+0x39c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d031      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a34      	ldr	r2, [pc, #208]	@ (8004c3c <DMA_SetConfig+0x3a0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d02c      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a32      	ldr	r2, [pc, #200]	@ (8004c40 <DMA_SetConfig+0x3a4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d027      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a31      	ldr	r2, [pc, #196]	@ (8004c44 <DMA_SetConfig+0x3a8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d022      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a2f      	ldr	r2, [pc, #188]	@ (8004c48 <DMA_SetConfig+0x3ac>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01d      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2e      	ldr	r2, [pc, #184]	@ (8004c4c <DMA_SetConfig+0x3b0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d018      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004c50 <DMA_SetConfig+0x3b4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c54 <DMA_SetConfig+0x3b8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00e      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a29      	ldr	r2, [pc, #164]	@ (8004c58 <DMA_SetConfig+0x3bc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d009      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a28      	ldr	r2, [pc, #160]	@ (8004c5c <DMA_SetConfig+0x3c0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <DMA_SetConfig+0x32e>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a26      	ldr	r2, [pc, #152]	@ (8004c60 <DMA_SetConfig+0x3c4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d101      	bne.n	8004bce <DMA_SetConfig+0x332>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <DMA_SetConfig+0x334>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d020      	beq.n	8004c16 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	2201      	movs	r2, #1
 8004bde:	409a      	lsls	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b40      	cmp	r3, #64	@ 0x40
 8004bf2:	d108      	bne.n	8004c06 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	60da      	str	r2, [r3, #12]
}
 8004c04:	e007      	b.n	8004c16 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	60da      	str	r2, [r3, #12]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	48022c08 	.word	0x48022c08
 8004c28:	48022c1c 	.word	0x48022c1c
 8004c2c:	48022c30 	.word	0x48022c30
 8004c30:	48022c44 	.word	0x48022c44
 8004c34:	48022c58 	.word	0x48022c58
 8004c38:	48022c6c 	.word	0x48022c6c
 8004c3c:	48022c80 	.word	0x48022c80
 8004c40:	48022c94 	.word	0x48022c94
 8004c44:	58025408 	.word	0x58025408
 8004c48:	5802541c 	.word	0x5802541c
 8004c4c:	58025430 	.word	0x58025430
 8004c50:	58025444 	.word	0x58025444
 8004c54:	58025458 	.word	0x58025458
 8004c58:	5802546c 	.word	0x5802546c
 8004c5c:	58025480 	.word	0x58025480
 8004c60:	58025494 	.word	0x58025494

08004c64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a42      	ldr	r2, [pc, #264]	@ (8004d7c <DMA_CalcBaseAndBitshift+0x118>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d04a      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a41      	ldr	r2, [pc, #260]	@ (8004d80 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d045      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a3f      	ldr	r2, [pc, #252]	@ (8004d84 <DMA_CalcBaseAndBitshift+0x120>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d040      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d88 <DMA_CalcBaseAndBitshift+0x124>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d03b      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a3c      	ldr	r2, [pc, #240]	@ (8004d8c <DMA_CalcBaseAndBitshift+0x128>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d036      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a3b      	ldr	r2, [pc, #236]	@ (8004d90 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d031      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a39      	ldr	r2, [pc, #228]	@ (8004d94 <DMA_CalcBaseAndBitshift+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d02c      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a38      	ldr	r2, [pc, #224]	@ (8004d98 <DMA_CalcBaseAndBitshift+0x134>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d027      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a36      	ldr	r2, [pc, #216]	@ (8004d9c <DMA_CalcBaseAndBitshift+0x138>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a35      	ldr	r2, [pc, #212]	@ (8004da0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a33      	ldr	r2, [pc, #204]	@ (8004da4 <DMA_CalcBaseAndBitshift+0x140>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a32      	ldr	r2, [pc, #200]	@ (8004da8 <DMA_CalcBaseAndBitshift+0x144>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a30      	ldr	r2, [pc, #192]	@ (8004dac <DMA_CalcBaseAndBitshift+0x148>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8004db0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8004db4 <DMA_CalcBaseAndBitshift+0x150>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <DMA_CalcBaseAndBitshift+0xa8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <DMA_CalcBaseAndBitshift+0x154>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <DMA_CalcBaseAndBitshift+0xac>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <DMA_CalcBaseAndBitshift+0xae>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d024      	beq.n	8004d60 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	3b10      	subs	r3, #16
 8004d1e:	4a27      	ldr	r2, [pc, #156]	@ (8004dbc <DMA_CalcBaseAndBitshift+0x158>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	4a24      	ldr	r2, [pc, #144]	@ (8004dc0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d30:	5cd3      	ldrb	r3, [r2, r3]
 8004d32:	461a      	mov	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d908      	bls.n	8004d50 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	1d1a      	adds	r2, r3, #4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d4e:	e00d      	b.n	8004d6c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d5e:	e005      	b.n	8004d6c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40020010 	.word	0x40020010
 8004d80:	40020028 	.word	0x40020028
 8004d84:	40020040 	.word	0x40020040
 8004d88:	40020058 	.word	0x40020058
 8004d8c:	40020070 	.word	0x40020070
 8004d90:	40020088 	.word	0x40020088
 8004d94:	400200a0 	.word	0x400200a0
 8004d98:	400200b8 	.word	0x400200b8
 8004d9c:	40020410 	.word	0x40020410
 8004da0:	40020428 	.word	0x40020428
 8004da4:	40020440 	.word	0x40020440
 8004da8:	40020458 	.word	0x40020458
 8004dac:	40020470 	.word	0x40020470
 8004db0:	40020488 	.word	0x40020488
 8004db4:	400204a0 	.word	0x400204a0
 8004db8:	400204b8 	.word	0x400204b8
 8004dbc:	aaaaaaab 	.word	0xaaaaaaab
 8004dc0:	0800efec 	.word	0x0800efec
 8004dc4:	fffffc00 	.word	0xfffffc00

08004dc8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d120      	bne.n	8004e1e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d858      	bhi.n	8004e96 <DMA_CheckFifoParam+0xce>
 8004de4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dec <DMA_CheckFifoParam+0x24>)
 8004de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dea:	bf00      	nop
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004e0f 	.word	0x08004e0f
 8004df4:	08004dfd 	.word	0x08004dfd
 8004df8:	08004e97 	.word	0x08004e97
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d048      	beq.n	8004e9a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e0c:	e045      	b.n	8004e9a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e16:	d142      	bne.n	8004e9e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e1c:	e03f      	b.n	8004e9e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e26:	d123      	bne.n	8004e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d838      	bhi.n	8004ea2 <DMA_CheckFifoParam+0xda>
 8004e30:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <DMA_CheckFifoParam+0x70>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004e4f 	.word	0x08004e4f
 8004e40:	08004e49 	.word	0x08004e49
 8004e44:	08004e61 	.word	0x08004e61
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e4c:	e030      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d025      	beq.n	8004ea6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e5e:	e022      	b.n	8004ea6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e68:	d11f      	bne.n	8004eaa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e6e:	e01c      	b.n	8004eaa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d902      	bls.n	8004e7e <DMA_CheckFifoParam+0xb6>
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d003      	beq.n	8004e84 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e7c:	e018      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	73fb      	strb	r3, [r7, #15]
        break;
 8004e82:	e015      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
    break;
 8004e94:	e00b      	b.n	8004eae <DMA_CheckFifoParam+0xe6>
        break;
 8004e96:	bf00      	nop
 8004e98:	e00a      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e008      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004e9e:	bf00      	nop
 8004ea0:	e006      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ea2:	bf00      	nop
 8004ea4:	e004      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <DMA_CheckFifoParam+0xe8>
    break;
 8004eae:	bf00      	nop
    }
  }

  return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop

08004ec0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a38      	ldr	r2, [pc, #224]	@ (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d022      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a36      	ldr	r2, [pc, #216]	@ (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01d      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a35      	ldr	r2, [pc, #212]	@ (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d018      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a33      	ldr	r2, [pc, #204]	@ (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a32      	ldr	r2, [pc, #200]	@ (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00e      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a30      	ldr	r2, [pc, #192]	@ (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d009      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2f      	ldr	r2, [pc, #188]	@ (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01a      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	3b08      	subs	r3, #8
 8004f30:	4a28      	ldr	r2, [pc, #160]	@ (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4b26      	ldr	r3, [pc, #152]	@ (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	461a      	mov	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a24      	ldr	r2, [pc, #144]	@ (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f4c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	2201      	movs	r2, #1
 8004f56:	409a      	lsls	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f5c:	e024      	b.n	8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	3b10      	subs	r3, #16
 8004f66:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d806      	bhi.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d902      	bls.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3308      	adds	r3, #8
 8004f84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4b18      	ldr	r3, [pc, #96]	@ (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	461a      	mov	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a16      	ldr	r2, [pc, #88]	@ (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f98:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	58025408 	.word	0x58025408
 8004fb8:	5802541c 	.word	0x5802541c
 8004fbc:	58025430 	.word	0x58025430
 8004fc0:	58025444 	.word	0x58025444
 8004fc4:	58025458 	.word	0x58025458
 8004fc8:	5802546c 	.word	0x5802546c
 8004fcc:	58025480 	.word	0x58025480
 8004fd0:	58025494 	.word	0x58025494
 8004fd4:	cccccccd 	.word	0xcccccccd
 8004fd8:	16009600 	.word	0x16009600
 8004fdc:	58025880 	.word	0x58025880
 8004fe0:	aaaaaaab 	.word	0xaaaaaaab
 8004fe4:	400204b8 	.word	0x400204b8
 8004fe8:	4002040f 	.word	0x4002040f
 8004fec:	10008200 	.word	0x10008200
 8004ff0:	40020880 	.word	0x40020880

08004ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04a      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d847      	bhi.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a25      	ldr	r2, [pc, #148]	@ (80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d022      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a24      	ldr	r2, [pc, #144]	@ (80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d01d      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a22      	ldr	r2, [pc, #136]	@ (80050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a21      	ldr	r2, [pc, #132]	@ (80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1f      	ldr	r2, [pc, #124]	@ (80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1e      	ldr	r2, [pc, #120]	@ (80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1c      	ldr	r2, [pc, #112]	@ (80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1b      	ldr	r2, [pc, #108]	@ (80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005064:	2300      	movs	r3, #0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4b17      	ldr	r3, [pc, #92]	@ (80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	461a      	mov	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a15      	ldr	r2, [pc, #84]	@ (80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800507c:	671a      	str	r2, [r3, #112]	@ 0x70
 800507e:	e009      	b.n	8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4b14      	ldr	r3, [pc, #80]	@ (80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	461a      	mov	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a11      	ldr	r2, [pc, #68]	@ (80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005092:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3b01      	subs	r3, #1
 8005098:	2201      	movs	r2, #1
 800509a:	409a      	lsls	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80050a0:	bf00      	nop
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	58025408 	.word	0x58025408
 80050b0:	5802541c 	.word	0x5802541c
 80050b4:	58025430 	.word	0x58025430
 80050b8:	58025444 	.word	0x58025444
 80050bc:	58025458 	.word	0x58025458
 80050c0:	5802546c 	.word	0x5802546c
 80050c4:	58025480 	.word	0x58025480
 80050c8:	58025494 	.word	0x58025494
 80050cc:	1600963f 	.word	0x1600963f
 80050d0:	58025940 	.word	0x58025940
 80050d4:	1000823f 	.word	0x1000823f
 80050d8:	40020940 	.word	0x40020940

080050dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80050dc:	b480      	push	{r7}
 80050de:	b089      	sub	sp, #36	@ 0x24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050ea:	4b89      	ldr	r3, [pc, #548]	@ (8005310 <HAL_GPIO_Init+0x234>)
 80050ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ee:	e194      	b.n	800541a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	2101      	movs	r1, #1
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	fa01 f303 	lsl.w	r3, r1, r3
 80050fc:	4013      	ands	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8186 	beq.w	8005414 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	2b01      	cmp	r3, #1
 8005112:	d005      	beq.n	8005120 <HAL_GPIO_Init+0x44>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d130      	bne.n	8005182 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	2203      	movs	r2, #3
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4013      	ands	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005156:	2201      	movs	r2, #1
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4013      	ands	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	f003 0201 	and.w	r2, r3, #1
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b03      	cmp	r3, #3
 800518c:	d017      	beq.n	80051be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	2203      	movs	r2, #3
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d123      	bne.n	8005212 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	08da      	lsrs	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3208      	adds	r2, #8
 80051d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	220f      	movs	r2, #15
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4313      	orrs	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	08da      	lsrs	r2, r3, #3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3208      	adds	r2, #8
 800520c:	69b9      	ldr	r1, [r7, #24]
 800520e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	2203      	movs	r2, #3
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 0203 	and.w	r2, r3, #3
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4313      	orrs	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80e0 	beq.w	8005414 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005254:	4b2f      	ldr	r3, [pc, #188]	@ (8005314 <HAL_GPIO_Init+0x238>)
 8005256:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800525a:	4a2e      	ldr	r2, [pc, #184]	@ (8005314 <HAL_GPIO_Init+0x238>)
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005264:	4b2b      	ldr	r3, [pc, #172]	@ (8005314 <HAL_GPIO_Init+0x238>)
 8005266:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005272:	4a29      	ldr	r2, [pc, #164]	@ (8005318 <HAL_GPIO_Init+0x23c>)
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	089b      	lsrs	r3, r3, #2
 8005278:	3302      	adds	r3, #2
 800527a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	220f      	movs	r2, #15
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	43db      	mvns	r3, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4013      	ands	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a20      	ldr	r2, [pc, #128]	@ (800531c <HAL_GPIO_Init+0x240>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d052      	beq.n	8005344 <HAL_GPIO_Init+0x268>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005320 <HAL_GPIO_Init+0x244>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d031      	beq.n	800530a <HAL_GPIO_Init+0x22e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005324 <HAL_GPIO_Init+0x248>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d02b      	beq.n	8005306 <HAL_GPIO_Init+0x22a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005328 <HAL_GPIO_Init+0x24c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d025      	beq.n	8005302 <HAL_GPIO_Init+0x226>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a1c      	ldr	r2, [pc, #112]	@ (800532c <HAL_GPIO_Init+0x250>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01f      	beq.n	80052fe <HAL_GPIO_Init+0x222>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005330 <HAL_GPIO_Init+0x254>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d019      	beq.n	80052fa <HAL_GPIO_Init+0x21e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005334 <HAL_GPIO_Init+0x258>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_GPIO_Init+0x21a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <HAL_GPIO_Init+0x25c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00d      	beq.n	80052f2 <HAL_GPIO_Init+0x216>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a18      	ldr	r2, [pc, #96]	@ (800533c <HAL_GPIO_Init+0x260>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d007      	beq.n	80052ee <HAL_GPIO_Init+0x212>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a17      	ldr	r2, [pc, #92]	@ (8005340 <HAL_GPIO_Init+0x264>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d101      	bne.n	80052ea <HAL_GPIO_Init+0x20e>
 80052e6:	2309      	movs	r3, #9
 80052e8:	e02d      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052ea:	230a      	movs	r3, #10
 80052ec:	e02b      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052ee:	2308      	movs	r3, #8
 80052f0:	e029      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052f2:	2307      	movs	r3, #7
 80052f4:	e027      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052f6:	2306      	movs	r3, #6
 80052f8:	e025      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052fa:	2305      	movs	r3, #5
 80052fc:	e023      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 80052fe:	2304      	movs	r3, #4
 8005300:	e021      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 8005302:	2303      	movs	r3, #3
 8005304:	e01f      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 8005306:	2302      	movs	r3, #2
 8005308:	e01d      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 800530a:	2301      	movs	r3, #1
 800530c:	e01b      	b.n	8005346 <HAL_GPIO_Init+0x26a>
 800530e:	bf00      	nop
 8005310:	58000080 	.word	0x58000080
 8005314:	58024400 	.word	0x58024400
 8005318:	58000400 	.word	0x58000400
 800531c:	58020000 	.word	0x58020000
 8005320:	58020400 	.word	0x58020400
 8005324:	58020800 	.word	0x58020800
 8005328:	58020c00 	.word	0x58020c00
 800532c:	58021000 	.word	0x58021000
 8005330:	58021400 	.word	0x58021400
 8005334:	58021800 	.word	0x58021800
 8005338:	58021c00 	.word	0x58021c00
 800533c:	58022000 	.word	0x58022000
 8005340:	58022400 	.word	0x58022400
 8005344:	2300      	movs	r3, #0
 8005346:	69fa      	ldr	r2, [r7, #28]
 8005348:	f002 0203 	and.w	r2, r2, #3
 800534c:	0092      	lsls	r2, r2, #2
 800534e:	4093      	lsls	r3, r2
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005356:	4938      	ldr	r1, [pc, #224]	@ (8005438 <HAL_GPIO_Init+0x35c>)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	089b      	lsrs	r3, r3, #2
 800535c:	3302      	adds	r3, #2
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800538a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	43db      	mvns	r3, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	4013      	ands	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80053b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	43db      	mvns	r3, r3
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	4013      	ands	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	43db      	mvns	r3, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	4013      	ands	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	3301      	adds	r3, #1
 8005418:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	f47f ae63 	bne.w	80050f0 <HAL_GPIO_Init+0x14>
  }
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	3724      	adds	r7, #36	@ 0x24
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	58000400 	.word	0x58000400

0800543c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	807b      	strh	r3, [r7, #2]
 8005448:	4613      	mov	r3, r2
 800544a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800544c:	787b      	ldrb	r3, [r7, #1]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005452:	887a      	ldrh	r2, [r7, #2]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005458:	e003      	b.n	8005462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800545a:	887b      	ldrh	r3, [r7, #2]
 800545c:	041a      	lsls	r2, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	619a      	str	r2, [r3, #24]
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	4603      	mov	r3, r0
 8005476:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800547c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005488:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	4618      	mov	r0, r3
 8005496:	f7fb fea9 	bl	80011ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e08b      	b.n	80055ce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fb fb9a 	bl	8000c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2224      	movs	r2, #36	@ 0x24
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80054f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005504:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d107      	bne.n	800551e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	e006      	b.n	800552c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800552a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d108      	bne.n	8005546 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	e007      	b.n	8005556 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005554:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6859      	ldr	r1, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4b1d      	ldr	r3, [pc, #116]	@ (80055d8 <HAL_I2C_Init+0x134>)
 8005562:	430b      	orrs	r3, r1
 8005564:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005574:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69d9      	ldr	r1, [r3, #28]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1a      	ldr	r2, [r3, #32]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	02008000 	.word	0x02008000

080055dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	4608      	mov	r0, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	461a      	mov	r2, r3
 80055ea:	4603      	mov	r3, r0
 80055ec:	817b      	strh	r3, [r7, #10]
 80055ee:	460b      	mov	r3, r1
 80055f0:	813b      	strh	r3, [r7, #8]
 80055f2:	4613      	mov	r3, r2
 80055f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b20      	cmp	r3, #32
 8005600:	f040 80f9 	bne.w	80057f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_I2C_Mem_Write+0x34>
 800560a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d105      	bne.n	800561c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005616:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e0ed      	b.n	80057f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_I2C_Mem_Write+0x4e>
 8005626:	2302      	movs	r3, #2
 8005628:	e0e6      	b.n	80057f8 <HAL_I2C_Mem_Write+0x21c>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005632:	f7fc fcb1 	bl	8001f98 <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	2319      	movs	r3, #25
 800563e:	2201      	movs	r2, #1
 8005640:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fbd5 	bl	8005df4 <I2C_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0d1      	b.n	80057f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2221      	movs	r2, #33	@ 0x21
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2240      	movs	r2, #64	@ 0x40
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a3a      	ldr	r2, [r7, #32]
 800566e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005674:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800567c:	88f8      	ldrh	r0, [r7, #6]
 800567e:	893a      	ldrh	r2, [r7, #8]
 8005680:	8979      	ldrh	r1, [r7, #10]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4603      	mov	r3, r0
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fae5 	bl	8005c5c <I2C_RequestMemoryWrite>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0a9      	b.n	80057f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2bff      	cmp	r3, #255	@ 0xff
 80056ac:	d90e      	bls.n	80056cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	22ff      	movs	r2, #255	@ 0xff
 80056b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	8979      	ldrh	r1, [r7, #10]
 80056bc:	2300      	movs	r3, #0
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fd59 	bl	800617c <I2C_TransferConfig>
 80056ca:	e00f      	b.n	80056ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	8979      	ldrh	r1, [r7, #10]
 80056de:	2300      	movs	r3, #0
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fd48 	bl	800617c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fbd8 	bl	8005ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e07b      	b.n	80057f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005704:	781a      	ldrb	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d034      	beq.n	80057a4 <HAL_I2C_Mem_Write+0x1c8>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d130      	bne.n	80057a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005748:	2200      	movs	r2, #0
 800574a:	2180      	movs	r1, #128	@ 0x80
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fb51 	bl	8005df4 <I2C_WaitOnFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e04d      	b.n	80057f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	2bff      	cmp	r3, #255	@ 0xff
 8005764:	d90e      	bls.n	8005784 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	22ff      	movs	r2, #255	@ 0xff
 800576a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005770:	b2da      	uxtb	r2, r3
 8005772:	8979      	ldrh	r1, [r7, #10]
 8005774:	2300      	movs	r3, #0
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 fcfd 	bl	800617c <I2C_TransferConfig>
 8005782:	e00f      	b.n	80057a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005792:	b2da      	uxtb	r2, r3
 8005794:	8979      	ldrh	r1, [r7, #10]
 8005796:	2300      	movs	r3, #0
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fcec 	bl	800617c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d19e      	bne.n	80056ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fbbe 	bl	8005f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e01a      	b.n	80057f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2220      	movs	r2, #32
 80057c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6859      	ldr	r1, [r3, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005800 <HAL_I2C_Mem_Write+0x224>)
 80057d6:	400b      	ands	r3, r1
 80057d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e000      	b.n	80057f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
  }
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	fe00e800 	.word	0xfe00e800

08005804 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	4608      	mov	r0, r1
 800580e:	4611      	mov	r1, r2
 8005810:	461a      	mov	r2, r3
 8005812:	4603      	mov	r3, r0
 8005814:	817b      	strh	r3, [r7, #10]
 8005816:	460b      	mov	r3, r1
 8005818:	813b      	strh	r3, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b20      	cmp	r3, #32
 8005828:	f040 80fd 	bne.w	8005a26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_I2C_Mem_Read+0x34>
 8005832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d105      	bne.n	8005844 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800583e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e0f1      	b.n	8005a28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_I2C_Mem_Read+0x4e>
 800584e:	2302      	movs	r3, #2
 8005850:	e0ea      	b.n	8005a28 <HAL_I2C_Mem_Read+0x224>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800585a:	f7fc fb9d 	bl	8001f98 <HAL_GetTick>
 800585e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	2319      	movs	r3, #25
 8005866:	2201      	movs	r2, #1
 8005868:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fac1 	bl	8005df4 <I2C_WaitOnFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e0d5      	b.n	8005a28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2222      	movs	r2, #34	@ 0x22
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2240      	movs	r2, #64	@ 0x40
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a3a      	ldr	r2, [r7, #32]
 8005896:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800589c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058a4:	88f8      	ldrh	r0, [r7, #6]
 80058a6:	893a      	ldrh	r2, [r7, #8]
 80058a8:	8979      	ldrh	r1, [r7, #10]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	4603      	mov	r3, r0
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fa25 	bl	8005d04 <I2C_RequestMemoryRead>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0ad      	b.n	8005a28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2bff      	cmp	r3, #255	@ 0xff
 80058d4:	d90e      	bls.n	80058f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	22ff      	movs	r2, #255	@ 0xff
 80058da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	8979      	ldrh	r1, [r7, #10]
 80058e4:	4b52      	ldr	r3, [pc, #328]	@ (8005a30 <HAL_I2C_Mem_Read+0x22c>)
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 fc45 	bl	800617c <I2C_TransferConfig>
 80058f2:	e00f      	b.n	8005914 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005902:	b2da      	uxtb	r2, r3
 8005904:	8979      	ldrh	r1, [r7, #10]
 8005906:	4b4a      	ldr	r3, [pc, #296]	@ (8005a30 <HAL_I2C_Mem_Read+0x22c>)
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fc34 	bl	800617c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	2200      	movs	r2, #0
 800591c:	2104      	movs	r1, #4
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fa68 	bl	8005df4 <I2C_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e07c      	b.n	8005a28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d034      	beq.n	80059d4 <HAL_I2C_Mem_Read+0x1d0>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d130      	bne.n	80059d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	2200      	movs	r2, #0
 800597a:	2180      	movs	r1, #128	@ 0x80
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fa39 	bl	8005df4 <I2C_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e04d      	b.n	8005a28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	2bff      	cmp	r3, #255	@ 0xff
 8005994:	d90e      	bls.n	80059b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	22ff      	movs	r2, #255	@ 0xff
 800599a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	8979      	ldrh	r1, [r7, #10]
 80059a4:	2300      	movs	r3, #0
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fbe5 	bl	800617c <I2C_TransferConfig>
 80059b2:	e00f      	b.n	80059d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	8979      	ldrh	r1, [r7, #10]
 80059c6:	2300      	movs	r3, #0
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fbd4 	bl	800617c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d19a      	bne.n	8005914 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 faa6 	bl	8005f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e01a      	b.n	8005a28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2220      	movs	r2, #32
 80059f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6859      	ldr	r1, [r3, #4]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b0b      	ldr	r3, [pc, #44]	@ (8005a34 <HAL_I2C_Mem_Read+0x230>)
 8005a06:	400b      	ands	r3, r1
 8005a08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e000      	b.n	8005a28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005a26:	2302      	movs	r3, #2
  }
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	80002400 	.word	0x80002400
 8005a34:	fe00e800 	.word	0xfe00e800

08005a38 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	@ 0x28
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	460b      	mov	r3, r1
 8005a46:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	f040 80e9 	bne.w	8005c30 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a6c:	d101      	bne.n	8005a72 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e0df      	b.n	8005c32 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_I2C_IsDeviceReady+0x48>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e0d8      	b.n	8005c32 <HAL_I2C_IsDeviceReady+0x1fa>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2224      	movs	r2, #36	@ 0x24
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d105      	bne.n	8005aaa <HAL_I2C_IsDeviceReady+0x72>
 8005a9e:	897b      	ldrh	r3, [r7, #10]
 8005aa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005aa4:	4b65      	ldr	r3, [pc, #404]	@ (8005c3c <HAL_I2C_IsDeviceReady+0x204>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	e004      	b.n	8005ab4 <HAL_I2C_IsDeviceReady+0x7c>
 8005aaa:	897b      	ldrh	r3, [r7, #10]
 8005aac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ab0:	4b63      	ldr	r3, [pc, #396]	@ (8005c40 <HAL_I2C_IsDeviceReady+0x208>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	6812      	ldr	r2, [r2, #0]
 8005ab8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005aba:	f7fc fa6d 	bl	8001f98 <HAL_GetTick>
 8005abe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	bf0c      	ite	eq
 8005ace:	2301      	moveq	r3, #1
 8005ad0:	2300      	movne	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	bf0c      	ite	eq
 8005ae4:	2301      	moveq	r3, #1
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005aec:	e034      	b.n	8005b58 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d01a      	beq.n	8005b2c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005af6:	f7fc fa4f 	bl	8001f98 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <HAL_I2C_IsDeviceReady+0xd4>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10f      	bne.n	8005b2c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b18:	f043 0220 	orr.w	r2, r3, #32
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e082      	b.n	8005c32 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	bf0c      	ite	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	2300      	movne	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005b58:	7fbb      	ldrb	r3, [r7, #30]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d102      	bne.n	8005b64 <HAL_I2C_IsDeviceReady+0x12c>
 8005b5e:	7f7b      	ldrb	r3, [r7, #29]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0c4      	beq.n	8005aee <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f003 0310 	and.w	r3, r3, #16
 8005b6e:	2b10      	cmp	r3, #16
 8005b70:	d027      	beq.n	8005bc2 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2120      	movs	r1, #32
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f939 	bl	8005df4 <I2C_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00e      	beq.n	8005ba6 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d107      	bne.n	8005ba0 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2220      	movs	r2, #32
 8005b96:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b9e:	e026      	b.n	8005bee <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e023      	b.n	8005bee <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2220      	movs	r2, #32
 8005bac:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e037      	b.n	8005c32 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2210      	movs	r2, #16
 8005bc8:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2120      	movs	r1, #32
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f90d 	bl	8005df4 <I2C_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	77fb      	strb	r3, [r7, #31]
 8005be4:	e003      	b.n	8005bee <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2220      	movs	r2, #32
 8005bec:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d904      	bls.n	8005c06 <HAL_I2C_IsDeviceReady+0x1ce>
 8005bfc:	7ffb      	ldrb	r3, [r7, #31]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	f63f af43 	bhi.w	8005a96 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1c:	f043 0220 	orr.w	r2, r3, #32
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	02002000 	.word	0x02002000
 8005c40:	02002800 	.word	0x02002800

08005c44 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	4608      	mov	r0, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	817b      	strh	r3, [r7, #10]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	813b      	strh	r3, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	8979      	ldrh	r1, [r7, #10]
 8005c7c:	4b20      	ldr	r3, [pc, #128]	@ (8005d00 <I2C_RequestMemoryWrite+0xa4>)
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 fa79 	bl	800617c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	69b9      	ldr	r1, [r7, #24]
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 f909 	bl	8005ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e02c      	b.n	8005cf8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d105      	bne.n	8005cb0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca4:	893b      	ldrh	r3, [r7, #8]
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cae:	e015      	b.n	8005cdc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cb0:	893b      	ldrh	r3, [r7, #8]
 8005cb2:	0a1b      	lsrs	r3, r3, #8
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	69b9      	ldr	r1, [r7, #24]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f8ef 	bl	8005ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e012      	b.n	8005cf8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cd2:	893b      	ldrh	r3, [r7, #8]
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2180      	movs	r1, #128	@ 0x80
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f884 	bl	8005df4 <I2C_WaitOnFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	80002000 	.word	0x80002000

08005d04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	461a      	mov	r2, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	817b      	strh	r3, [r7, #10]
 8005d16:	460b      	mov	r3, r1
 8005d18:	813b      	strh	r3, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	8979      	ldrh	r1, [r7, #10]
 8005d24:	4b20      	ldr	r3, [pc, #128]	@ (8005da8 <I2C_RequestMemoryRead+0xa4>)
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fa26 	bl	800617c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	69b9      	ldr	r1, [r7, #24]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f8b6 	bl	8005ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e02c      	b.n	8005d9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d105      	bne.n	8005d56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d4a:	893b      	ldrh	r3, [r7, #8]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d54:	e015      	b.n	8005d82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d56:	893b      	ldrh	r3, [r7, #8]
 8005d58:	0a1b      	lsrs	r3, r3, #8
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	69b9      	ldr	r1, [r7, #24]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f89c 	bl	8005ea6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e012      	b.n	8005d9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d78:	893b      	ldrh	r3, [r7, #8]
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2140      	movs	r1, #64	@ 0x40
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f831 	bl	8005df4 <I2C_WaitOnFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	80002000 	.word	0x80002000

08005dac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d103      	bne.n	8005dca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d007      	beq.n	8005de8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	619a      	str	r2, [r3, #24]
  }
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e04:	e03b      	b.n	8005e7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f8d6 	bl	8005fbc <I2C_IsErrorOccurred>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e041      	b.n	8005e9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d02d      	beq.n	8005e7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e22:	f7fc f8b9 	bl	8001f98 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d302      	bcc.n	8005e38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d122      	bne.n	8005e7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	4013      	ands	r3, r2
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	bf0c      	ite	eq
 8005e48:	2301      	moveq	r3, #1
 8005e4a:	2300      	movne	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d113      	bne.n	8005e7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e00f      	b.n	8005e9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d0b4      	beq.n	8005e06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005eb2:	e033      	b.n	8005f1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f87f 	bl	8005fbc <I2C_IsErrorOccurred>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e031      	b.n	8005f2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ece:	d025      	beq.n	8005f1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed0:	f7fc f862 	bl	8001f98 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d302      	bcc.n	8005ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d11a      	bne.n	8005f1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d013      	beq.n	8005f1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e007      	b.n	8005f2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d1c4      	bne.n	8005eb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f40:	e02f      	b.n	8005fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 f838 	bl	8005fbc <I2C_IsErrorOccurred>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e02d      	b.n	8005fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f56:	f7fc f81f 	bl	8001f98 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d302      	bcc.n	8005f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d11a      	bne.n	8005fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d013      	beq.n	8005fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e007      	b.n	8005fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d1c8      	bne.n	8005f42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	@ 0x28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d068      	beq.n	80060ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2210      	movs	r2, #16
 8005fee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ff0:	e049      	b.n	8006086 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff8:	d045      	beq.n	8006086 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ffa:	f7fb ffcd 	bl	8001f98 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	429a      	cmp	r2, r3
 8006008:	d302      	bcc.n	8006010 <I2C_IsErrorOccurred+0x54>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d13a      	bne.n	8006086 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800601a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006022:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006032:	d121      	bne.n	8006078 <I2C_IsErrorOccurred+0xbc>
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800603a:	d01d      	beq.n	8006078 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	2b20      	cmp	r3, #32
 8006040:	d01a      	beq.n	8006078 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006050:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006052:	f7fb ffa1 	bl	8001f98 <HAL_GetTick>
 8006056:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006058:	e00e      	b.n	8006078 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800605a:	f7fb ff9d 	bl	8001f98 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b19      	cmp	r3, #25
 8006066:	d907      	bls.n	8006078 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	f043 0320 	orr.w	r3, r3, #32
 800606e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006076:	e006      	b.n	8006086 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b20      	cmp	r3, #32
 8006084:	d1e9      	bne.n	800605a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b20      	cmp	r3, #32
 8006092:	d003      	beq.n	800609c <I2C_IsErrorOccurred+0xe0>
 8006094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0aa      	beq.n	8005ff2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800609c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d103      	bne.n	80060ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2220      	movs	r2, #32
 80060aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	f043 0304 	orr.w	r3, r3, #4
 80060b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	f043 0308 	orr.w	r3, r3, #8
 80060f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	f043 0302 	orr.w	r3, r3, #2
 8006116:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01c      	beq.n	800616a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff fe3b 	bl	8005dac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6859      	ldr	r1, [r3, #4]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4b0d      	ldr	r3, [pc, #52]	@ (8006178 <I2C_IsErrorOccurred+0x1bc>)
 8006142:	400b      	ands	r3, r1
 8006144:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	431a      	orrs	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800616a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800616e:	4618      	mov	r0, r3
 8006170:	3728      	adds	r7, #40	@ 0x28
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	fe00e800 	.word	0xfe00e800

0800617c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	607b      	str	r3, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	817b      	strh	r3, [r7, #10]
 800618a:	4613      	mov	r3, r2
 800618c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800618e:	897b      	ldrh	r3, [r7, #10]
 8006190:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006194:	7a7b      	ldrb	r3, [r7, #9]
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800619c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061aa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	0d5b      	lsrs	r3, r3, #21
 80061b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80061ba:	4b08      	ldr	r3, [pc, #32]	@ (80061dc <I2C_TransferConfig+0x60>)
 80061bc:	430b      	orrs	r3, r1
 80061be:	43db      	mvns	r3, r3
 80061c0:	ea02 0103 	and.w	r1, r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	03ff63ff 	.word	0x03ff63ff

080061e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	d138      	bne.n	8006268 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006200:	2302      	movs	r3, #2
 8006202:	e032      	b.n	800626a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2224      	movs	r2, #36	@ 0x24
 8006210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0201 	bic.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006232:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	e000      	b.n	800626a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006268:	2302      	movs	r3, #2
  }
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006276:	b480      	push	{r7}
 8006278:	b085      	sub	sp, #20
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b20      	cmp	r3, #32
 800628a:	d139      	bne.n	8006300 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006296:	2302      	movs	r3, #2
 8006298:	e033      	b.n	8006302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2224      	movs	r2, #36	@ 0x24
 80062a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0201 	bic.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80062c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	e000      	b.n	8006302 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006300:	2302      	movs	r3, #2
  }
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006318:	4b29      	ldr	r3, [pc, #164]	@ (80063c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	2b06      	cmp	r3, #6
 8006322:	d00a      	beq.n	800633a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006324:	4b26      	ldr	r3, [pc, #152]	@ (80063c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	429a      	cmp	r2, r3
 8006330:	d001      	beq.n	8006336 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e040      	b.n	80063b8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	e03e      	b.n	80063b8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800633a:	4b21      	ldr	r3, [pc, #132]	@ (80063c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006342:	491f      	ldr	r1, [pc, #124]	@ (80063c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4313      	orrs	r3, r2
 8006348:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800634a:	f7fb fe25 	bl	8001f98 <HAL_GetTick>
 800634e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006350:	e009      	b.n	8006366 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006352:	f7fb fe21 	bl	8001f98 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006360:	d901      	bls.n	8006366 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e028      	b.n	80063b8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006366:	4b16      	ldr	r3, [pc, #88]	@ (80063c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800636e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006372:	d1ee      	bne.n	8006352 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b1e      	cmp	r3, #30
 8006378:	d008      	beq.n	800638c <HAL_PWREx_ConfigSupply+0x7c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b2e      	cmp	r3, #46	@ 0x2e
 800637e:	d005      	beq.n	800638c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b1d      	cmp	r3, #29
 8006384:	d002      	beq.n	800638c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b2d      	cmp	r3, #45	@ 0x2d
 800638a:	d114      	bne.n	80063b6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800638c:	f7fb fe04 	bl	8001f98 <HAL_GetTick>
 8006390:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006392:	e009      	b.n	80063a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006394:	f7fb fe00 	bl	8001f98 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063a2:	d901      	bls.n	80063a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e007      	b.n	80063b8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b4:	d1ee      	bne.n	8006394 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	58024800 	.word	0x58024800

080063c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08c      	sub	sp, #48	@ 0x30
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f000 bc1f 	b.w	8006c16 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80b3 	beq.w	800654c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063e6:	4b95      	ldr	r3, [pc, #596]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063f0:	4b92      	ldr	r3, [pc, #584]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f8:	2b10      	cmp	r3, #16
 80063fa:	d007      	beq.n	800640c <HAL_RCC_OscConfig+0x48>
 80063fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fe:	2b18      	cmp	r3, #24
 8006400:	d112      	bne.n	8006428 <HAL_RCC_OscConfig+0x64>
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	f003 0303 	and.w	r3, r3, #3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d10d      	bne.n	8006428 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800640c:	4b8b      	ldr	r3, [pc, #556]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8098 	beq.w	800654a <HAL_RCC_OscConfig+0x186>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 8093 	bne.w	800654a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e3f6      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006430:	d106      	bne.n	8006440 <HAL_RCC_OscConfig+0x7c>
 8006432:	4b82      	ldr	r3, [pc, #520]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a81      	ldr	r2, [pc, #516]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	e058      	b.n	80064f2 <HAL_RCC_OscConfig+0x12e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d112      	bne.n	800646e <HAL_RCC_OscConfig+0xaa>
 8006448:	4b7c      	ldr	r3, [pc, #496]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a7b      	ldr	r2, [pc, #492]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800644e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	4b79      	ldr	r3, [pc, #484]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a78      	ldr	r2, [pc, #480]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800645a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	4b76      	ldr	r3, [pc, #472]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a75      	ldr	r2, [pc, #468]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	e041      	b.n	80064f2 <HAL_RCC_OscConfig+0x12e>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006476:	d112      	bne.n	800649e <HAL_RCC_OscConfig+0xda>
 8006478:	4b70      	ldr	r3, [pc, #448]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a6f      	ldr	r2, [pc, #444]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800647e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	4b6d      	ldr	r3, [pc, #436]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a6c      	ldr	r2, [pc, #432]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800648a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	4b6a      	ldr	r3, [pc, #424]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a69      	ldr	r2, [pc, #420]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	e029      	b.n	80064f2 <HAL_RCC_OscConfig+0x12e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80064a6:	d112      	bne.n	80064ce <HAL_RCC_OscConfig+0x10a>
 80064a8:	4b64      	ldr	r3, [pc, #400]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a63      	ldr	r2, [pc, #396]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	4b61      	ldr	r3, [pc, #388]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a60      	ldr	r2, [pc, #384]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	4b5e      	ldr	r3, [pc, #376]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a5d      	ldr	r2, [pc, #372]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	e011      	b.n	80064f2 <HAL_RCC_OscConfig+0x12e>
 80064ce:	4b5b      	ldr	r3, [pc, #364]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a5a      	ldr	r2, [pc, #360]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	4b58      	ldr	r3, [pc, #352]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a57      	ldr	r2, [pc, #348]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	4b55      	ldr	r3, [pc, #340]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a54      	ldr	r2, [pc, #336]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80064ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80064f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d013      	beq.n	8006522 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fa:	f7fb fd4d 	bl	8001f98 <HAL_GetTick>
 80064fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006502:	f7fb fd49 	bl	8001f98 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b64      	cmp	r3, #100	@ 0x64
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e380      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006514:	4b49      	ldr	r3, [pc, #292]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0f0      	beq.n	8006502 <HAL_RCC_OscConfig+0x13e>
 8006520:	e014      	b.n	800654c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006522:	f7fb fd39 	bl	8001f98 <HAL_GetTick>
 8006526:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800652a:	f7fb fd35 	bl	8001f98 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b64      	cmp	r3, #100	@ 0x64
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e36c      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800653c:	4b3f      	ldr	r3, [pc, #252]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f0      	bne.n	800652a <HAL_RCC_OscConfig+0x166>
 8006548:	e000      	b.n	800654c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800654a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 808c 	beq.w	8006672 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800655a:	4b38      	ldr	r3, [pc, #224]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006562:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006564:	4b35      	ldr	r3, [pc, #212]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006568:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <HAL_RCC_OscConfig+0x1bc>
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	2b18      	cmp	r3, #24
 8006574:	d137      	bne.n	80065e6 <HAL_RCC_OscConfig+0x222>
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d132      	bne.n	80065e6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006580:	4b2e      	ldr	r3, [pc, #184]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_RCC_OscConfig+0x1d4>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e33e      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006598:	4b28      	ldr	r3, [pc, #160]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f023 0219 	bic.w	r2, r3, #25
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4925      	ldr	r1, [pc, #148]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065aa:	f7fb fcf5 	bl	8001f98 <HAL_GetTick>
 80065ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065b2:	f7fb fcf1 	bl	8001f98 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e328      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065c4:	4b1d      	ldr	r3, [pc, #116]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d0:	4b1a      	ldr	r3, [pc, #104]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	061b      	lsls	r3, r3, #24
 80065de:	4917      	ldr	r1, [pc, #92]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065e4:	e045      	b.n	8006672 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d028      	beq.n	8006640 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065ee:	4b13      	ldr	r3, [pc, #76]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f023 0219 	bic.w	r2, r3, #25
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	4910      	ldr	r1, [pc, #64]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006600:	f7fb fcca 	bl	8001f98 <HAL_GetTick>
 8006604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006608:	f7fb fcc6 	bl	8001f98 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e2fd      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800661a:	4b08      	ldr	r3, [pc, #32]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006626:	4b05      	ldr	r3, [pc, #20]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	061b      	lsls	r3, r3, #24
 8006634:	4901      	ldr	r1, [pc, #4]	@ (800663c <HAL_RCC_OscConfig+0x278>)
 8006636:	4313      	orrs	r3, r2
 8006638:	604b      	str	r3, [r1, #4]
 800663a:	e01a      	b.n	8006672 <HAL_RCC_OscConfig+0x2ae>
 800663c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006640:	4b97      	ldr	r3, [pc, #604]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a96      	ldr	r2, [pc, #600]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7fb fca4 	bl	8001f98 <HAL_GetTick>
 8006650:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006654:	f7fb fca0 	bl	8001f98 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e2d7      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006666:	4b8e      	ldr	r3, [pc, #568]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0310 	and.w	r3, r3, #16
 800667a:	2b00      	cmp	r3, #0
 800667c:	d06a      	beq.n	8006754 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800667e:	4b88      	ldr	r3, [pc, #544]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006686:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006688:	4b85      	ldr	r3, [pc, #532]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d007      	beq.n	80066a4 <HAL_RCC_OscConfig+0x2e0>
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b18      	cmp	r3, #24
 8006698:	d11b      	bne.n	80066d2 <HAL_RCC_OscConfig+0x30e>
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d116      	bne.n	80066d2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066a4:	4b7e      	ldr	r3, [pc, #504]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <HAL_RCC_OscConfig+0x2f8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	2b80      	cmp	r3, #128	@ 0x80
 80066b6:	d001      	beq.n	80066bc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e2ac      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066bc:	4b78      	ldr	r3, [pc, #480]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	061b      	lsls	r3, r3, #24
 80066ca:	4975      	ldr	r1, [pc, #468]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066d0:	e040      	b.n	8006754 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d023      	beq.n	8006722 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066da:	4b71      	ldr	r3, [pc, #452]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a70      	ldr	r2, [pc, #448]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 80066e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e6:	f7fb fc57 	bl	8001f98 <HAL_GetTick>
 80066ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066ec:	e008      	b.n	8006700 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066ee:	f7fb fc53 	bl	8001f98 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e28a      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006700:	4b67      	ldr	r3, [pc, #412]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0f0      	beq.n	80066ee <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800670c:	4b64      	ldr	r3, [pc, #400]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	061b      	lsls	r3, r3, #24
 800671a:	4961      	ldr	r1, [pc, #388]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 800671c:	4313      	orrs	r3, r2
 800671e:	60cb      	str	r3, [r1, #12]
 8006720:	e018      	b.n	8006754 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006722:	4b5f      	ldr	r3, [pc, #380]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a5e      	ldr	r2, [pc, #376]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800672c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672e:	f7fb fc33 	bl	8001f98 <HAL_GetTick>
 8006732:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006736:	f7fb fc2f 	bl	8001f98 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e266      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006748:	4b55      	ldr	r3, [pc, #340]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f0      	bne.n	8006736 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d036      	beq.n	80067ce <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d019      	beq.n	800679c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006768:	4b4d      	ldr	r3, [pc, #308]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 800676a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800676c:	4a4c      	ldr	r2, [pc, #304]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 800676e:	f043 0301 	orr.w	r3, r3, #1
 8006772:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fb fc10 	bl	8001f98 <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800677c:	f7fb fc0c 	bl	8001f98 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e243      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800678e:	4b44      	ldr	r3, [pc, #272]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0x3b8>
 800679a:	e018      	b.n	80067ce <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800679c:	4b40      	ldr	r3, [pc, #256]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 800679e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a0:	4a3f      	ldr	r2, [pc, #252]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 80067a2:	f023 0301 	bic.w	r3, r3, #1
 80067a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a8:	f7fb fbf6 	bl	8001f98 <HAL_GetTick>
 80067ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b0:	f7fb fbf2 	bl	8001f98 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e229      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067c2:	4b37      	ldr	r3, [pc, #220]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 80067c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d036      	beq.n	8006848 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d019      	beq.n	8006816 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067e2:	4b2f      	ldr	r3, [pc, #188]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a2e      	ldr	r2, [pc, #184]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 80067e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80067ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067ee:	f7fb fbd3 	bl	8001f98 <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067f6:	f7fb fbcf 	bl	8001f98 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e206      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006808:	4b25      	ldr	r3, [pc, #148]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f0      	beq.n	80067f6 <HAL_RCC_OscConfig+0x432>
 8006814:	e018      	b.n	8006848 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006816:	4b22      	ldr	r3, [pc, #136]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a21      	ldr	r2, [pc, #132]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 800681c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006820:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006822:	f7fb fbb9 	bl	8001f98 <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800682a:	f7fb fbb5 	bl	8001f98 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e1ec      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800683c:	4b18      	ldr	r3, [pc, #96]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f0      	bne.n	800682a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80af 	beq.w	80069b4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006856:	4b13      	ldr	r3, [pc, #76]	@ (80068a4 <HAL_RCC_OscConfig+0x4e0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a12      	ldr	r2, [pc, #72]	@ (80068a4 <HAL_RCC_OscConfig+0x4e0>)
 800685c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006862:	f7fb fb99 	bl	8001f98 <HAL_GetTick>
 8006866:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686a:	f7fb fb95 	bl	8001f98 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b64      	cmp	r3, #100	@ 0x64
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e1cc      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800687c:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <HAL_RCC_OscConfig+0x4e0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10b      	bne.n	80068a8 <HAL_RCC_OscConfig+0x4e4>
 8006890:	4b03      	ldr	r3, [pc, #12]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006894:	4a02      	ldr	r2, [pc, #8]	@ (80068a0 <HAL_RCC_OscConfig+0x4dc>)
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	@ 0x70
 800689c:	e05b      	b.n	8006956 <HAL_RCC_OscConfig+0x592>
 800689e:	bf00      	nop
 80068a0:	58024400 	.word	0x58024400
 80068a4:	58024800 	.word	0x58024800
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d112      	bne.n	80068d6 <HAL_RCC_OscConfig+0x512>
 80068b0:	4b9d      	ldr	r3, [pc, #628]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b4:	4a9c      	ldr	r2, [pc, #624]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068b6:	f023 0301 	bic.w	r3, r3, #1
 80068ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80068bc:	4b9a      	ldr	r3, [pc, #616]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c0:	4a99      	ldr	r2, [pc, #612]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80068c8:	4b97      	ldr	r3, [pc, #604]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068cc:	4a96      	ldr	r2, [pc, #600]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068ce:	f023 0304 	bic.w	r3, r3, #4
 80068d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d4:	e03f      	b.n	8006956 <HAL_RCC_OscConfig+0x592>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d112      	bne.n	8006904 <HAL_RCC_OscConfig+0x540>
 80068de:	4b92      	ldr	r3, [pc, #584]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e2:	4a91      	ldr	r2, [pc, #580]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068e4:	f043 0304 	orr.w	r3, r3, #4
 80068e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ea:	4b8f      	ldr	r3, [pc, #572]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ee:	4a8e      	ldr	r2, [pc, #568]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f6:	4b8c      	ldr	r3, [pc, #560]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fa:	4a8b      	ldr	r2, [pc, #556]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	6713      	str	r3, [r2, #112]	@ 0x70
 8006902:	e028      	b.n	8006956 <HAL_RCC_OscConfig+0x592>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b85      	cmp	r3, #133	@ 0x85
 800690a:	d112      	bne.n	8006932 <HAL_RCC_OscConfig+0x56e>
 800690c:	4b86      	ldr	r3, [pc, #536]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006910:	4a85      	ldr	r2, [pc, #532]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006912:	f043 0304 	orr.w	r3, r3, #4
 8006916:	6713      	str	r3, [r2, #112]	@ 0x70
 8006918:	4b83      	ldr	r3, [pc, #524]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 800691a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691c:	4a82      	ldr	r2, [pc, #520]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 800691e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006922:	6713      	str	r3, [r2, #112]	@ 0x70
 8006924:	4b80      	ldr	r3, [pc, #512]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006928:	4a7f      	ldr	r2, [pc, #508]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006930:	e011      	b.n	8006956 <HAL_RCC_OscConfig+0x592>
 8006932:	4b7d      	ldr	r3, [pc, #500]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006936:	4a7c      	ldr	r2, [pc, #496]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	6713      	str	r3, [r2, #112]	@ 0x70
 800693e:	4b7a      	ldr	r3, [pc, #488]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006942:	4a79      	ldr	r2, [pc, #484]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006944:	f023 0304 	bic.w	r3, r3, #4
 8006948:	6713      	str	r3, [r2, #112]	@ 0x70
 800694a:	4b77      	ldr	r3, [pc, #476]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 800694c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694e:	4a76      	ldr	r2, [pc, #472]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006950:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006954:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d015      	beq.n	800698a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695e:	f7fb fb1b 	bl	8001f98 <HAL_GetTick>
 8006962:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006964:	e00a      	b.n	800697c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006966:	f7fb fb17 	bl	8001f98 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e14c      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800697c:	4b6a      	ldr	r3, [pc, #424]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0ee      	beq.n	8006966 <HAL_RCC_OscConfig+0x5a2>
 8006988:	e014      	b.n	80069b4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800698a:	f7fb fb05 	bl	8001f98 <HAL_GetTick>
 800698e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006990:	e00a      	b.n	80069a8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006992:	f7fb fb01 	bl	8001f98 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e136      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069a8:	4b5f      	ldr	r3, [pc, #380]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1ee      	bne.n	8006992 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 812b 	beq.w	8006c14 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069be:	4b5a      	ldr	r3, [pc, #360]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069c6:	2b18      	cmp	r3, #24
 80069c8:	f000 80bb 	beq.w	8006b42 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	f040 8095 	bne.w	8006b00 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d6:	4b54      	ldr	r3, [pc, #336]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a53      	ldr	r2, [pc, #332]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80069dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e2:	f7fb fad9 	bl	8001f98 <HAL_GetTick>
 80069e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069e8:	e008      	b.n	80069fc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ea:	f7fb fad5 	bl	8001f98 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e10c      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1f0      	bne.n	80069ea <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a08:	4b47      	ldr	r3, [pc, #284]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a0c:	4b47      	ldr	r3, [pc, #284]	@ (8006b2c <HAL_RCC_OscConfig+0x768>)
 8006a0e:	4013      	ands	r3, r2
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a18:	0112      	lsls	r2, r2, #4
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	4942      	ldr	r1, [pc, #264]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a26:	3b01      	subs	r3, #1
 8006a28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a30:	3b01      	subs	r3, #1
 8006a32:	025b      	lsls	r3, r3, #9
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	061b      	lsls	r3, r3, #24
 8006a4e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a52:	4935      	ldr	r1, [pc, #212]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a58:	4b33      	ldr	r3, [pc, #204]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	4a32      	ldr	r2, [pc, #200]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a5e:	f023 0301 	bic.w	r3, r3, #1
 8006a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a64:	4b30      	ldr	r3, [pc, #192]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a68:	4b31      	ldr	r3, [pc, #196]	@ (8006b30 <HAL_RCC_OscConfig+0x76c>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a70:	00d2      	lsls	r2, r2, #3
 8006a72:	492d      	ldr	r1, [pc, #180]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a78:	4b2b      	ldr	r3, [pc, #172]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7c:	f023 020c 	bic.w	r2, r3, #12
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a84:	4928      	ldr	r1, [pc, #160]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a8a:	4b27      	ldr	r3, [pc, #156]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8e:	f023 0202 	bic.w	r2, r3, #2
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a96:	4924      	ldr	r1, [pc, #144]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a9c:	4b22      	ldr	r3, [pc, #136]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa0:	4a21      	ldr	r2, [pc, #132]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	4a1e      	ldr	r2, [pc, #120]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006aba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ac0:	4b19      	ldr	r3, [pc, #100]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	4a18      	ldr	r2, [pc, #96]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006acc:	4b16      	ldr	r3, [pc, #88]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a15      	ldr	r2, [pc, #84]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fb fa5e 	bl	8001f98 <HAL_GetTick>
 8006adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae0:	f7fb fa5a 	bl	8001f98 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e091      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006af2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x71c>
 8006afe:	e089      	b.n	8006c14 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b00:	4b09      	ldr	r3, [pc, #36]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a08      	ldr	r2, [pc, #32]	@ (8006b28 <HAL_RCC_OscConfig+0x764>)
 8006b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fb fa44 	bl	8001f98 <HAL_GetTick>
 8006b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b12:	e00f      	b.n	8006b34 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b14:	f7fb fa40 	bl	8001f98 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d908      	bls.n	8006b34 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e077      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
 8006b26:	bf00      	nop
 8006b28:	58024400 	.word	0x58024400
 8006b2c:	fffffc0c 	.word	0xfffffc0c
 8006b30:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b34:	4b3a      	ldr	r3, [pc, #232]	@ (8006c20 <HAL_RCC_OscConfig+0x85c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e9      	bne.n	8006b14 <HAL_RCC_OscConfig+0x750>
 8006b40:	e068      	b.n	8006c14 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b42:	4b37      	ldr	r3, [pc, #220]	@ (8006c20 <HAL_RCC_OscConfig+0x85c>)
 8006b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b46:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b48:	4b35      	ldr	r3, [pc, #212]	@ (8006c20 <HAL_RCC_OscConfig+0x85c>)
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d031      	beq.n	8006bba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f003 0203 	and.w	r2, r3, #3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d12a      	bne.n	8006bba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	091b      	lsrs	r3, r3, #4
 8006b68:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d122      	bne.n	8006bba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d11a      	bne.n	8006bba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	0a5b      	lsrs	r3, r3, #9
 8006b88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b90:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d111      	bne.n	8006bba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	0c1b      	lsrs	r3, r3, #16
 8006b9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d108      	bne.n	8006bba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	0e1b      	lsrs	r3, r3, #24
 8006bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d001      	beq.n	8006bbe <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e02b      	b.n	8006c16 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006bbe:	4b18      	ldr	r3, [pc, #96]	@ (8006c20 <HAL_RCC_OscConfig+0x85c>)
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc2:	08db      	lsrs	r3, r3, #3
 8006bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bc8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d01f      	beq.n	8006c14 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bd4:	4b12      	ldr	r3, [pc, #72]	@ (8006c20 <HAL_RCC_OscConfig+0x85c>)
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	4a11      	ldr	r2, [pc, #68]	@ (8006c20 <HAL_RCC_OscConfig+0x85c>)
 8006bda:	f023 0301 	bic.w	r3, r3, #1
 8006bde:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006be0:	f7fb f9da 	bl	8001f98 <HAL_GetTick>
 8006be4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006be6:	bf00      	nop
 8006be8:	f7fb f9d6 	bl	8001f98 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d0f9      	beq.n	8006be8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c20 <HAL_RCC_OscConfig+0x85c>)
 8006bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <HAL_RCC_OscConfig+0x860>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c00:	00d2      	lsls	r2, r2, #3
 8006c02:	4907      	ldr	r1, [pc, #28]	@ (8006c20 <HAL_RCC_OscConfig+0x85c>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c08:	4b05      	ldr	r3, [pc, #20]	@ (8006c20 <HAL_RCC_OscConfig+0x85c>)
 8006c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0c:	4a04      	ldr	r2, [pc, #16]	@ (8006c20 <HAL_RCC_OscConfig+0x85c>)
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3730      	adds	r7, #48	@ 0x30
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	58024400 	.word	0x58024400
 8006c24:	ffff0007 	.word	0xffff0007

08006c28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e19c      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c3c:	4b8a      	ldr	r3, [pc, #552]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d910      	bls.n	8006c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4a:	4b87      	ldr	r3, [pc, #540]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f023 020f 	bic.w	r2, r3, #15
 8006c52:	4985      	ldr	r1, [pc, #532]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5a:	4b83      	ldr	r3, [pc, #524]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e184      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d010      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d908      	bls.n	8006c9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c88:	4b78      	ldr	r3, [pc, #480]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	4975      	ldr	r1, [pc, #468]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d010      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	4b70      	ldr	r3, [pc, #448]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d908      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	496a      	ldr	r1, [pc, #424]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d010      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	4b64      	ldr	r3, [pc, #400]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d908      	bls.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ce4:	4b61      	ldr	r3, [pc, #388]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	495e      	ldr	r1, [pc, #376]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d010      	beq.n	8006d24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69da      	ldr	r2, [r3, #28]
 8006d06:	4b59      	ldr	r3, [pc, #356]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d908      	bls.n	8006d24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d12:	4b56      	ldr	r3, [pc, #344]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	4953      	ldr	r1, [pc, #332]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d010      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	4b4d      	ldr	r3, [pc, #308]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d908      	bls.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b4a      	ldr	r3, [pc, #296]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f023 020f 	bic.w	r2, r3, #15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4947      	ldr	r1, [pc, #284]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d055      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d5e:	4b43      	ldr	r3, [pc, #268]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	4940      	ldr	r1, [pc, #256]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d78:	4b3c      	ldr	r3, [pc, #240]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d121      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0f6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d107      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d90:	4b36      	ldr	r3, [pc, #216]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0ea      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d107      	bne.n	8006db8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006da8:	4b30      	ldr	r3, [pc, #192]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0de      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006db8:	4b2c      	ldr	r3, [pc, #176]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0d6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dc8:	4b28      	ldr	r3, [pc, #160]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f023 0207 	bic.w	r2, r3, #7
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	4925      	ldr	r1, [pc, #148]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dda:	f7fb f8dd 	bl	8001f98 <HAL_GetTick>
 8006dde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de0:	e00a      	b.n	8006df8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de2:	f7fb f8d9 	bl	8001f98 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e0be      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df8:	4b1c      	ldr	r3, [pc, #112]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d1eb      	bne.n	8006de2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d010      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	4b14      	ldr	r3, [pc, #80]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d208      	bcs.n	8006e38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e26:	4b11      	ldr	r3, [pc, #68]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f023 020f 	bic.w	r2, r3, #15
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	490e      	ldr	r1, [pc, #56]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e38:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d214      	bcs.n	8006e70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b08      	ldr	r3, [pc, #32]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f023 020f 	bic.w	r2, r3, #15
 8006e4e:	4906      	ldr	r1, [pc, #24]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e56:	4b04      	ldr	r3, [pc, #16]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d005      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e086      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
 8006e68:	52002000 	.word	0x52002000
 8006e6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	4b3f      	ldr	r3, [pc, #252]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d208      	bcs.n	8006e9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	4939      	ldr	r1, [pc, #228]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d010      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	4b34      	ldr	r3, [pc, #208]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d208      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eba:	4b31      	ldr	r3, [pc, #196]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	492e      	ldr	r1, [pc, #184]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d010      	beq.n	8006efa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699a      	ldr	r2, [r3, #24]
 8006edc:	4b28      	ldr	r3, [pc, #160]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d208      	bcs.n	8006efa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ee8:	4b25      	ldr	r3, [pc, #148]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	4922      	ldr	r1, [pc, #136]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d010      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69da      	ldr	r2, [r3, #28]
 8006f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d208      	bcs.n	8006f28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f16:	4b1a      	ldr	r3, [pc, #104]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	4917      	ldr	r1, [pc, #92]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006f28:	f000 f834 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b14      	ldr	r3, [pc, #80]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	4912      	ldr	r1, [pc, #72]	@ (8006f84 <HAL_RCC_ClockConfig+0x35c>)
 8006f3a:	5ccb      	ldrb	r3, [r1, r3]
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
 8006f44:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006f46:	4b0e      	ldr	r3, [pc, #56]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8006f84 <HAL_RCC_ClockConfig+0x35c>)
 8006f50:	5cd3      	ldrb	r3, [r2, r3]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f88 <HAL_RCC_ClockConfig+0x360>)
 8006f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f60:	4a0a      	ldr	r2, [pc, #40]	@ (8006f8c <HAL_RCC_ClockConfig+0x364>)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f66:	4b0a      	ldr	r3, [pc, #40]	@ (8006f90 <HAL_RCC_ClockConfig+0x368>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fa ffca 	bl	8001f04 <HAL_InitTick>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	58024400 	.word	0x58024400
 8006f84:	0800efdc 	.word	0x0800efdc
 8006f88:	24000004 	.word	0x24000004
 8006f8c:	24000000 	.word	0x24000000
 8006f90:	24000008 	.word	0x24000008

08006f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b089      	sub	sp, #36	@ 0x24
 8006f98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f9a:	4bb3      	ldr	r3, [pc, #716]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fa2:	2b18      	cmp	r3, #24
 8006fa4:	f200 8155 	bhi.w	8007252 <HAL_RCC_GetSysClockFreq+0x2be>
 8006fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08007015 	.word	0x08007015
 8006fb4:	08007253 	.word	0x08007253
 8006fb8:	08007253 	.word	0x08007253
 8006fbc:	08007253 	.word	0x08007253
 8006fc0:	08007253 	.word	0x08007253
 8006fc4:	08007253 	.word	0x08007253
 8006fc8:	08007253 	.word	0x08007253
 8006fcc:	08007253 	.word	0x08007253
 8006fd0:	0800703b 	.word	0x0800703b
 8006fd4:	08007253 	.word	0x08007253
 8006fd8:	08007253 	.word	0x08007253
 8006fdc:	08007253 	.word	0x08007253
 8006fe0:	08007253 	.word	0x08007253
 8006fe4:	08007253 	.word	0x08007253
 8006fe8:	08007253 	.word	0x08007253
 8006fec:	08007253 	.word	0x08007253
 8006ff0:	08007041 	.word	0x08007041
 8006ff4:	08007253 	.word	0x08007253
 8006ff8:	08007253 	.word	0x08007253
 8006ffc:	08007253 	.word	0x08007253
 8007000:	08007253 	.word	0x08007253
 8007004:	08007253 	.word	0x08007253
 8007008:	08007253 	.word	0x08007253
 800700c:	08007253 	.word	0x08007253
 8007010:	08007047 	.word	0x08007047
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007014:	4b94      	ldr	r3, [pc, #592]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007020:	4b91      	ldr	r3, [pc, #580]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	4a90      	ldr	r2, [pc, #576]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007032:	e111      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007034:	4b8d      	ldr	r3, [pc, #564]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007036:	61bb      	str	r3, [r7, #24]
      break;
 8007038:	e10e      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800703a:	4b8d      	ldr	r3, [pc, #564]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800703c:	61bb      	str	r3, [r7, #24]
      break;
 800703e:	e10b      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007040:	4b8c      	ldr	r3, [pc, #560]	@ (8007274 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007042:	61bb      	str	r3, [r7, #24]
      break;
 8007044:	e108      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007046:	4b88      	ldr	r3, [pc, #544]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007050:	4b85      	ldr	r3, [pc, #532]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800705a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800705c:	4b82      	ldr	r3, [pc, #520]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007066:	4b80      	ldr	r3, [pc, #512]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80e1 	beq.w	800724c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b02      	cmp	r3, #2
 800708e:	f000 8083 	beq.w	8007198 <HAL_RCC_GetSysClockFreq+0x204>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b02      	cmp	r3, #2
 8007096:	f200 80a1 	bhi.w	80071dc <HAL_RCC_GetSysClockFreq+0x248>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_RCC_GetSysClockFreq+0x114>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d056      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0x1c0>
 80070a6:	e099      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02d      	beq.n	8007110 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070b4:	4b6c      	ldr	r3, [pc, #432]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	08db      	lsrs	r3, r3, #3
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	4a6b      	ldr	r2, [pc, #428]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
 80070c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	4b62      	ldr	r3, [pc, #392]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800710e:	e087      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800727c <HAL_RCC_GetSysClockFreq+0x2e8>
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007122:	4b51      	ldr	r3, [pc, #324]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007132:	ed97 6a02 	vldr	s12, [r7, #8]
 8007136:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800713a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007152:	e065      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007280 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007166:	4b40      	ldr	r3, [pc, #256]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a02 	vldr	s12, [r7, #8]
 800717a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007196:	e043      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007284 <HAL_RCC_GetSysClockFreq+0x2f0>
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80071be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071da:	e021      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007280 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007202:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800721e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007220:	4b11      	ldr	r3, [pc, #68]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007224:	0a5b      	lsrs	r3, r3, #9
 8007226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800722a:	3301      	adds	r3, #1
 800722c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007238:	edd7 6a07 	vldr	s13, [r7, #28]
 800723c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007244:	ee17 3a90 	vmov	r3, s15
 8007248:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800724a:	e005      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
      break;
 8007250:	e002      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007252:	4b07      	ldr	r3, [pc, #28]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007254:	61bb      	str	r3, [r7, #24]
      break;
 8007256:	bf00      	nop
  }

  return sysclockfreq;
 8007258:	69bb      	ldr	r3, [r7, #24]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3724      	adds	r7, #36	@ 0x24
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	58024400 	.word	0x58024400
 800726c:	03d09000 	.word	0x03d09000
 8007270:	003d0900 	.word	0x003d0900
 8007274:	007a1200 	.word	0x007a1200
 8007278:	46000000 	.word	0x46000000
 800727c:	4c742400 	.word	0x4c742400
 8007280:	4a742400 	.word	0x4a742400
 8007284:	4af42400 	.word	0x4af42400

08007288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800728e:	f7ff fe81 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8007292:	4602      	mov	r2, r0
 8007294:	4b10      	ldr	r3, [pc, #64]	@ (80072d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	490f      	ldr	r1, [pc, #60]	@ (80072dc <HAL_RCC_GetHCLKFreq+0x54>)
 80072a0:	5ccb      	ldrb	r3, [r1, r3]
 80072a2:	f003 031f 	and.w	r3, r3, #31
 80072a6:	fa22 f303 	lsr.w	r3, r2, r3
 80072aa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80072ac:	4b0a      	ldr	r3, [pc, #40]	@ (80072d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	4a09      	ldr	r2, [pc, #36]	@ (80072dc <HAL_RCC_GetHCLKFreq+0x54>)
 80072b6:	5cd3      	ldrb	r3, [r2, r3]
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	fa22 f303 	lsr.w	r3, r2, r3
 80072c2:	4a07      	ldr	r2, [pc, #28]	@ (80072e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072c6:	4a07      	ldr	r2, [pc, #28]	@ (80072e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072cc:	4b04      	ldr	r3, [pc, #16]	@ (80072e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ce:	681b      	ldr	r3, [r3, #0]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	58024400 	.word	0x58024400
 80072dc:	0800efdc 	.word	0x0800efdc
 80072e0:	24000004 	.word	0x24000004
 80072e4:	24000000 	.word	0x24000000

080072e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80072ec:	f7ff ffcc 	bl	8007288 <HAL_RCC_GetHCLKFreq>
 80072f0:	4602      	mov	r2, r0
 80072f2:	4b06      	ldr	r3, [pc, #24]	@ (800730c <HAL_RCC_GetPCLK1Freq+0x24>)
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	091b      	lsrs	r3, r3, #4
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	4904      	ldr	r1, [pc, #16]	@ (8007310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072fe:	5ccb      	ldrb	r3, [r1, r3]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007308:	4618      	mov	r0, r3
 800730a:	bd80      	pop	{r7, pc}
 800730c:	58024400 	.word	0x58024400
 8007310:	0800efdc 	.word	0x0800efdc

08007314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007318:	f7ff ffb6 	bl	8007288 <HAL_RCC_GetHCLKFreq>
 800731c:	4602      	mov	r2, r0
 800731e:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	0a1b      	lsrs	r3, r3, #8
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	4904      	ldr	r1, [pc, #16]	@ (800733c <HAL_RCC_GetPCLK2Freq+0x28>)
 800732a:	5ccb      	ldrb	r3, [r1, r3]
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007334:	4618      	mov	r0, r3
 8007336:	bd80      	pop	{r7, pc}
 8007338:	58024400 	.word	0x58024400
 800733c:	0800efdc 	.word	0x0800efdc

08007340 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007344:	b0c8      	sub	sp, #288	@ 0x120
 8007346:	af00      	add	r7, sp, #0
 8007348:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800734c:	2300      	movs	r3, #0
 800734e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007352:	2300      	movs	r3, #0
 8007354:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007364:	2500      	movs	r5, #0
 8007366:	ea54 0305 	orrs.w	r3, r4, r5
 800736a:	d049      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800736c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007372:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007376:	d02f      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007378:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800737c:	d828      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800737e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007382:	d01a      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007384:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007388:	d822      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800738e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007392:	d007      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007394:	e01c      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007396:	4ba7      	ldr	r3, [pc, #668]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739a:	4aa6      	ldr	r2, [pc, #664]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800739c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073a2:	e01a      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073a8:	3308      	adds	r3, #8
 80073aa:	2102      	movs	r1, #2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fc43 	bl	8008c38 <RCCEx_PLL2_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073b8:	e00f      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073be:	3328      	adds	r3, #40	@ 0x28
 80073c0:	2102      	movs	r1, #2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 fcea 	bl	8008d9c <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073ce:	e004      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073d6:	e000      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073e2:	4b94      	ldr	r3, [pc, #592]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073f0:	4a90      	ldr	r2, [pc, #576]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073f2:	430b      	orrs	r3, r1
 80073f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80073f6:	e003      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800740c:	f04f 0900 	mov.w	r9, #0
 8007410:	ea58 0309 	orrs.w	r3, r8, r9
 8007414:	d047      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800741a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741c:	2b04      	cmp	r3, #4
 800741e:	d82a      	bhi.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007420:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	0800743d 	.word	0x0800743d
 800742c:	0800744b 	.word	0x0800744b
 8007430:	08007461 	.word	0x08007461
 8007434:	0800747f 	.word	0x0800747f
 8007438:	0800747f 	.word	0x0800747f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743c:	4b7d      	ldr	r3, [pc, #500]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007440:	4a7c      	ldr	r2, [pc, #496]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007448:	e01a      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800744a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800744e:	3308      	adds	r3, #8
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f001 fbf0 	bl	8008c38 <RCCEx_PLL2_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800745e:	e00f      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007464:	3328      	adds	r3, #40	@ 0x28
 8007466:	2100      	movs	r1, #0
 8007468:	4618      	mov	r0, r3
 800746a:	f001 fc97 	bl	8008d9c <RCCEx_PLL3_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007474:	e004      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800747c:	e000      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800747e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007480:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007488:	4b6a      	ldr	r3, [pc, #424]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800748a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800748c:	f023 0107 	bic.w	r1, r3, #7
 8007490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007496:	4a67      	ldr	r2, [pc, #412]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007498:	430b      	orrs	r3, r1
 800749a:	6513      	str	r3, [r2, #80]	@ 0x50
 800749c:	e003      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80074a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80074b2:	f04f 0b00 	mov.w	fp, #0
 80074b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80074ba:	d054      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80074bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074c2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80074c6:	d036      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80074c8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80074cc:	d82f      	bhi.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074d2:	d032      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80074d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074d8:	d829      	bhi.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074da:	2bc0      	cmp	r3, #192	@ 0xc0
 80074dc:	d02f      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80074de:	2bc0      	cmp	r3, #192	@ 0xc0
 80074e0:	d825      	bhi.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074e2:	2b80      	cmp	r3, #128	@ 0x80
 80074e4:	d018      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80074e6:	2b80      	cmp	r3, #128	@ 0x80
 80074e8:	d821      	bhi.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80074ee:	2b40      	cmp	r3, #64	@ 0x40
 80074f0:	d007      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80074f2:	e01c      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f8:	4a4e      	ldr	r2, [pc, #312]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007500:	e01e      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007506:	3308      	adds	r3, #8
 8007508:	2100      	movs	r1, #0
 800750a:	4618      	mov	r0, r3
 800750c:	f001 fb94 	bl	8008c38 <RCCEx_PLL2_Config>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007516:	e013      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800751c:	3328      	adds	r3, #40	@ 0x28
 800751e:	2100      	movs	r1, #0
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fc3b 	bl	8008d9c <RCCEx_PLL3_Config>
 8007526:	4603      	mov	r3, r0
 8007528:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800752c:	e008      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007534:	e004      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007536:	bf00      	nop
 8007538:	e002      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800753a:	bf00      	nop
 800753c:	e000      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800753e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007540:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10a      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007548:	4b3a      	ldr	r3, [pc, #232]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800754a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800754c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007556:	4a37      	ldr	r2, [pc, #220]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007558:	430b      	orrs	r3, r1
 800755a:	6513      	str	r3, [r2, #80]	@ 0x50
 800755c:	e003      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007562:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007572:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007576:	2300      	movs	r3, #0
 8007578:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800757c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007580:	460b      	mov	r3, r1
 8007582:	4313      	orrs	r3, r2
 8007584:	d05c      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800758a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800758c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007590:	d03b      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007592:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007596:	d834      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800759c:	d037      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800759e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075a2:	d82e      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80075a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80075a8:	d033      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075aa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80075ae:	d828      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80075b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075b4:	d01a      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80075b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ba:	d822      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80075c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075c4:	d007      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80075c6:	e01c      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	4a19      	ldr	r2, [pc, #100]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80075d4:	e01e      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075da:	3308      	adds	r3, #8
 80075dc:	2100      	movs	r1, #0
 80075de:	4618      	mov	r0, r3
 80075e0:	f001 fb2a 	bl	8008c38 <RCCEx_PLL2_Config>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80075ea:	e013      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075f0:	3328      	adds	r3, #40	@ 0x28
 80075f2:	2100      	movs	r1, #0
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 fbd1 	bl	8008d9c <RCCEx_PLL3_Config>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007600:	e008      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007608:	e004      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800760a:	bf00      	nop
 800760c:	e002      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007614:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10d      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800761c:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800761e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007620:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800762a:	4a02      	ldr	r2, [pc, #8]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800762c:	430b      	orrs	r3, r1
 800762e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007630:	e006      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007632:	bf00      	nop
 8007634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007638:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800763c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007640:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800764c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007650:	2300      	movs	r3, #0
 8007652:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007656:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800765a:	460b      	mov	r3, r1
 800765c:	4313      	orrs	r3, r2
 800765e:	d03a      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007666:	2b30      	cmp	r3, #48	@ 0x30
 8007668:	d01f      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800766a:	2b30      	cmp	r3, #48	@ 0x30
 800766c:	d819      	bhi.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800766e:	2b20      	cmp	r3, #32
 8007670:	d00c      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007672:	2b20      	cmp	r3, #32
 8007674:	d815      	bhi.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d019      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800767a:	2b10      	cmp	r3, #16
 800767c:	d111      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800767e:	4bae      	ldr	r3, [pc, #696]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007682:	4aad      	ldr	r2, [pc, #692]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007688:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800768a:	e011      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800768c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007690:	3308      	adds	r3, #8
 8007692:	2102      	movs	r1, #2
 8007694:	4618      	mov	r0, r3
 8007696:	f001 facf 	bl	8008c38 <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80076a0:	e006      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076a8:	e002      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80076aa:	bf00      	nop
 80076ac:	e000      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80076ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10a      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80076b8:	4b9f      	ldr	r3, [pc, #636]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80076c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076c6:	4a9c      	ldr	r2, [pc, #624]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076c8:	430b      	orrs	r3, r1
 80076ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076cc:	e003      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80076d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80076e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80076e6:	2300      	movs	r3, #0
 80076e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80076ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4313      	orrs	r3, r2
 80076f4:	d051      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80076f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007700:	d035      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007706:	d82e      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007708:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800770c:	d031      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800770e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007712:	d828      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007718:	d01a      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800771a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800771e:	d822      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007728:	d007      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800772a:	e01c      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800772c:	4b82      	ldr	r3, [pc, #520]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	4a81      	ldr	r2, [pc, #516]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007738:	e01c      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800773a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800773e:	3308      	adds	r3, #8
 8007740:	2100      	movs	r1, #0
 8007742:	4618      	mov	r0, r3
 8007744:	f001 fa78 	bl	8008c38 <RCCEx_PLL2_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800774e:	e011      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007754:	3328      	adds	r3, #40	@ 0x28
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f001 fb1f 	bl	8008d9c <RCCEx_PLL3_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007764:	e006      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800776c:	e002      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800776e:	bf00      	nop
 8007770:	e000      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007774:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800777c:	4b6e      	ldr	r3, [pc, #440]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800777e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007780:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800778a:	4a6b      	ldr	r2, [pc, #428]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800778c:	430b      	orrs	r3, r1
 800778e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007790:	e003      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007792:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007796:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800779a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80077a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077aa:	2300      	movs	r3, #0
 80077ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80077b4:	460b      	mov	r3, r1
 80077b6:	4313      	orrs	r3, r2
 80077b8:	d053      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80077ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077c4:	d033      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80077c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077ca:	d82c      	bhi.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80077cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077d0:	d02f      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80077d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077d6:	d826      	bhi.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80077d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077dc:	d02b      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80077de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80077e2:	d820      	bhi.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80077e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077e8:	d012      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80077ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ee:	d81a      	bhi.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d022      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80077f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077f8:	d115      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077fe:	3308      	adds	r3, #8
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f001 fa18 	bl	8008c38 <RCCEx_PLL2_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800780e:	e015      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007814:	3328      	adds	r3, #40	@ 0x28
 8007816:	2101      	movs	r1, #1
 8007818:	4618      	mov	r0, r3
 800781a:	f001 fabf 	bl	8008d9c <RCCEx_PLL3_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007824:	e00a      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800782c:	e006      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800782e:	bf00      	nop
 8007830:	e004      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007832:	bf00      	nop
 8007834:	e002      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007836:	bf00      	nop
 8007838:	e000      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800783a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800783c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10a      	bne.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007844:	4b3c      	ldr	r3, [pc, #240]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007848:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800784c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007852:	4a39      	ldr	r2, [pc, #228]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007854:	430b      	orrs	r3, r1
 8007856:	6513      	str	r3, [r2, #80]	@ 0x50
 8007858:	e003      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800785e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800786e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007872:	2300      	movs	r3, #0
 8007874:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007878:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800787c:	460b      	mov	r3, r1
 800787e:	4313      	orrs	r3, r2
 8007880:	d060      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007886:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800788a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800788e:	d039      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007890:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007894:	d832      	bhi.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007896:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800789a:	d035      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800789c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078a0:	d82c      	bhi.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078a6:	d031      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80078a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ac:	d826      	bhi.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078b2:	d02d      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80078b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078b8:	d820      	bhi.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078be:	d012      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80078c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c4:	d81a      	bhi.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d024      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ce:	d115      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078d4:	3308      	adds	r3, #8
 80078d6:	2101      	movs	r1, #1
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 f9ad 	bl	8008c38 <RCCEx_PLL2_Config>
 80078de:	4603      	mov	r3, r0
 80078e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078e4:	e017      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ea:	3328      	adds	r3, #40	@ 0x28
 80078ec:	2101      	movs	r1, #1
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 fa54 	bl	8008d9c <RCCEx_PLL3_Config>
 80078f4:	4603      	mov	r3, r0
 80078f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078fa:	e00c      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007902:	e008      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007904:	bf00      	nop
 8007906:	e006      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007908:	bf00      	nop
 800790a:	e004      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800790c:	bf00      	nop
 800790e:	e002      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007910:	bf00      	nop
 8007912:	e000      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007916:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10e      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800791e:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007922:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800792a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800792e:	4a02      	ldr	r2, [pc, #8]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007930:	430b      	orrs	r3, r1
 8007932:	6593      	str	r3, [r2, #88]	@ 0x58
 8007934:	e006      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007936:	bf00      	nop
 8007938:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007940:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007954:	2300      	movs	r3, #0
 8007956:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800795a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800795e:	460b      	mov	r3, r1
 8007960:	4313      	orrs	r3, r2
 8007962:	d037      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800796a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800796e:	d00e      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007974:	d816      	bhi.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d018      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800797a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800797e:	d111      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007980:	4bc4      	ldr	r3, [pc, #784]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007984:	4ac3      	ldr	r2, [pc, #780]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800798a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800798c:	e00f      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800798e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007992:	3308      	adds	r3, #8
 8007994:	2101      	movs	r1, #1
 8007996:	4618      	mov	r0, r3
 8007998:	f001 f94e 	bl	8008c38 <RCCEx_PLL2_Config>
 800799c:	4603      	mov	r3, r0
 800799e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079a2:	e004      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80079aa:	e000      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80079ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079b6:	4bb7      	ldr	r3, [pc, #732]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80079be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079c4:	4ab3      	ldr	r2, [pc, #716]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079c6:	430b      	orrs	r3, r1
 80079c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80079ca:	e003      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80079d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80079e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079e4:	2300      	movs	r3, #0
 80079e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80079ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4313      	orrs	r3, r2
 80079f2:	d039      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80079f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d81c      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80079fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007a04 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a04:	08007a41 	.word	0x08007a41
 8007a08:	08007a15 	.word	0x08007a15
 8007a0c:	08007a23 	.word	0x08007a23
 8007a10:	08007a41 	.word	0x08007a41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a14:	4b9f      	ldr	r3, [pc, #636]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a18:	4a9e      	ldr	r2, [pc, #632]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a20:	e00f      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a26:	3308      	adds	r3, #8
 8007a28:	2102      	movs	r1, #2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 f904 	bl	8008c38 <RCCEx_PLL2_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a36:	e004      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a3e:	e000      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a4a:	4b92      	ldr	r3, [pc, #584]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a4e:	f023 0103 	bic.w	r1, r3, #3
 8007a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a58:	4a8e      	ldr	r2, [pc, #568]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a5e:	e003      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007a82:	460b      	mov	r3, r1
 8007a84:	4313      	orrs	r3, r2
 8007a86:	f000 8099 	beq.w	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a8a:	4b83      	ldr	r3, [pc, #524]	@ (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a82      	ldr	r2, [pc, #520]	@ (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a96:	f7fa fa7f 	bl	8001f98 <HAL_GetTick>
 8007a9a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a9e:	e00b      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa0:	f7fa fa7a 	bl	8001f98 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b64      	cmp	r3, #100	@ 0x64
 8007aae:	d903      	bls.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ab6:	e005      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ab8:	4b77      	ldr	r3, [pc, #476]	@ (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0ed      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d173      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007acc:	4b71      	ldr	r3, [pc, #452]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ace:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ad4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ad8:	4053      	eors	r3, r2
 8007ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d015      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ae2:	4b6c      	ldr	r3, [pc, #432]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007aee:	4b69      	ldr	r3, [pc, #420]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007af2:	4a68      	ldr	r2, [pc, #416]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007af8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007afa:	4b66      	ldr	r3, [pc, #408]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007afe:	4a65      	ldr	r2, [pc, #404]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b04:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b06:	4a63      	ldr	r2, [pc, #396]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b1a:	d118      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1c:	f7fa fa3c 	bl	8001f98 <HAL_GetTick>
 8007b20:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b24:	e00d      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b26:	f7fa fa37 	bl	8001f98 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007b30:	1ad2      	subs	r2, r2, r3
 8007b32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d903      	bls.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8007b40:	e005      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b42:	4b54      	ldr	r3, [pc, #336]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0eb      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007b4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d129      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b66:	d10e      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007b68:	4b4a      	ldr	r3, [pc, #296]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b78:	091a      	lsrs	r2, r3, #4
 8007b7a:	4b48      	ldr	r3, [pc, #288]	@ (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	4a45      	ldr	r2, [pc, #276]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b80:	430b      	orrs	r3, r1
 8007b82:	6113      	str	r3, [r2, #16]
 8007b84:	e005      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007b86:	4b43      	ldr	r3, [pc, #268]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	4a42      	ldr	r2, [pc, #264]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007b90:	6113      	str	r3, [r2, #16]
 8007b92:	4b40      	ldr	r3, [pc, #256]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b94:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ba8:	e008      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007baa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007bb2:	e003      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f002 0301 	and.w	r3, r2, #1
 8007bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f000 8090 	beq.w	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007be6:	2b28      	cmp	r3, #40	@ 0x28
 8007be8:	d870      	bhi.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007bea:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007cd5 	.word	0x08007cd5
 8007bf4:	08007ccd 	.word	0x08007ccd
 8007bf8:	08007ccd 	.word	0x08007ccd
 8007bfc:	08007ccd 	.word	0x08007ccd
 8007c00:	08007ccd 	.word	0x08007ccd
 8007c04:	08007ccd 	.word	0x08007ccd
 8007c08:	08007ccd 	.word	0x08007ccd
 8007c0c:	08007ccd 	.word	0x08007ccd
 8007c10:	08007ca1 	.word	0x08007ca1
 8007c14:	08007ccd 	.word	0x08007ccd
 8007c18:	08007ccd 	.word	0x08007ccd
 8007c1c:	08007ccd 	.word	0x08007ccd
 8007c20:	08007ccd 	.word	0x08007ccd
 8007c24:	08007ccd 	.word	0x08007ccd
 8007c28:	08007ccd 	.word	0x08007ccd
 8007c2c:	08007ccd 	.word	0x08007ccd
 8007c30:	08007cb7 	.word	0x08007cb7
 8007c34:	08007ccd 	.word	0x08007ccd
 8007c38:	08007ccd 	.word	0x08007ccd
 8007c3c:	08007ccd 	.word	0x08007ccd
 8007c40:	08007ccd 	.word	0x08007ccd
 8007c44:	08007ccd 	.word	0x08007ccd
 8007c48:	08007ccd 	.word	0x08007ccd
 8007c4c:	08007ccd 	.word	0x08007ccd
 8007c50:	08007cd5 	.word	0x08007cd5
 8007c54:	08007ccd 	.word	0x08007ccd
 8007c58:	08007ccd 	.word	0x08007ccd
 8007c5c:	08007ccd 	.word	0x08007ccd
 8007c60:	08007ccd 	.word	0x08007ccd
 8007c64:	08007ccd 	.word	0x08007ccd
 8007c68:	08007ccd 	.word	0x08007ccd
 8007c6c:	08007ccd 	.word	0x08007ccd
 8007c70:	08007cd5 	.word	0x08007cd5
 8007c74:	08007ccd 	.word	0x08007ccd
 8007c78:	08007ccd 	.word	0x08007ccd
 8007c7c:	08007ccd 	.word	0x08007ccd
 8007c80:	08007ccd 	.word	0x08007ccd
 8007c84:	08007ccd 	.word	0x08007ccd
 8007c88:	08007ccd 	.word	0x08007ccd
 8007c8c:	08007ccd 	.word	0x08007ccd
 8007c90:	08007cd5 	.word	0x08007cd5
 8007c94:	58024400 	.word	0x58024400
 8007c98:	58024800 	.word	0x58024800
 8007c9c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 ffc5 	bl	8008c38 <RCCEx_PLL2_Config>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cb4:	e00f      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cba:	3328      	adds	r3, #40	@ 0x28
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 f86c 	bl	8008d9c <RCCEx_PLL3_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cca:	e004      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cd2:	e000      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10b      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007cde:	4bc0      	ldr	r3, [pc, #768]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cee:	4abc      	ldr	r2, [pc, #752]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cf4:	e003      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cfa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	f002 0302 	and.w	r3, r2, #2
 8007d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d14:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	d043      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d824      	bhi.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d7d 	.word	0x08007d7d
 8007d34:	08007d49 	.word	0x08007d49
 8007d38:	08007d5f 	.word	0x08007d5f
 8007d3c:	08007d7d 	.word	0x08007d7d
 8007d40:	08007d7d 	.word	0x08007d7d
 8007d44:	08007d7d 	.word	0x08007d7d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	2101      	movs	r1, #1
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 ff71 	bl	8008c38 <RCCEx_PLL2_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d5c:	e00f      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d62:	3328      	adds	r3, #40	@ 0x28
 8007d64:	2101      	movs	r1, #1
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 f818 	bl	8008d9c <RCCEx_PLL3_Config>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d72:	e004      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d7a:	e000      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d86:	4b96      	ldr	r3, [pc, #600]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d8a:	f023 0107 	bic.w	r1, r3, #7
 8007d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d96:	4a92      	ldr	r2, [pc, #584]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d9c:	e003      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007da2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f002 0304 	and.w	r3, r2, #4
 8007db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007db6:	2300      	movs	r3, #0
 8007db8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dbc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	d043      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d824      	bhi.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007e25 	.word	0x08007e25
 8007ddc:	08007df1 	.word	0x08007df1
 8007de0:	08007e07 	.word	0x08007e07
 8007de4:	08007e25 	.word	0x08007e25
 8007de8:	08007e25 	.word	0x08007e25
 8007dec:	08007e25 	.word	0x08007e25
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007df4:	3308      	adds	r3, #8
 8007df6:	2101      	movs	r1, #1
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 ff1d 	bl	8008c38 <RCCEx_PLL2_Config>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e04:	e00f      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e0a:	3328      	adds	r3, #40	@ 0x28
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 ffc4 	bl	8008d9c <RCCEx_PLL3_Config>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e1a:	e004      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e22:	e000      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10b      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e32:	f023 0107 	bic.w	r1, r3, #7
 8007e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e3e:	4a68      	ldr	r2, [pc, #416]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e40:	430b      	orrs	r3, r1
 8007e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e44:	e003      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f002 0320 	and.w	r3, r2, #32
 8007e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	d055      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e7a:	d033      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e80:	d82c      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e86:	d02f      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e8c:	d826      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007e8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e92:	d02b      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007e94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e98:	d820      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e9e:	d012      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ea4:	d81a      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d022      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007eaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eae:	d115      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 febd 	bl	8008c38 <RCCEx_PLL2_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ec4:	e015      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eca:	3328      	adds	r3, #40	@ 0x28
 8007ecc:	2102      	movs	r1, #2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 ff64 	bl	8008d9c <RCCEx_PLL3_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007eda:	e00a      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ee2:	e006      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007ee4:	bf00      	nop
 8007ee6:	e004      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007ee8:	bf00      	nop
 8007eea:	e002      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007eec:	bf00      	nop
 8007eee:	e000      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ef2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007efa:	4b39      	ldr	r3, [pc, #228]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f0a:	4a35      	ldr	r2, [pc, #212]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f10:	e003      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4313      	orrs	r3, r2
 8007f38:	d058      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f42:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f46:	d033      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007f48:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f4c:	d82c      	bhi.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f52:	d02f      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f58:	d826      	bhi.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007f5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f5e:	d02b      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007f60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f64:	d820      	bhi.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007f66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f6a:	d012      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f70:	d81a      	bhi.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d022      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f7a:	d115      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f80:	3308      	adds	r3, #8
 8007f82:	2100      	movs	r1, #0
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 fe57 	bl	8008c38 <RCCEx_PLL2_Config>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f90:	e015      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f96:	3328      	adds	r3, #40	@ 0x28
 8007f98:	2102      	movs	r1, #2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fefe 	bl	8008d9c <RCCEx_PLL3_Config>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fa6:	e00a      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fae:	e006      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007fb0:	bf00      	nop
 8007fb2:	e004      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007fb4:	bf00      	nop
 8007fb6:	e002      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007fb8:	bf00      	nop
 8007fba:	e000      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10e      	bne.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fc6:	4b06      	ldr	r3, [pc, #24]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fd6:	4a02      	ldr	r2, [pc, #8]	@ (8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fdc:	e006      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007fde:	bf00      	nop
 8007fe0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fe8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007ff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008002:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008006:	460b      	mov	r3, r1
 8008008:	4313      	orrs	r3, r2
 800800a:	d055      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800800c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008010:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008014:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008018:	d033      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800801a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800801e:	d82c      	bhi.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008024:	d02f      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800802a:	d826      	bhi.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800802c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008030:	d02b      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008032:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008036:	d820      	bhi.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800803c:	d012      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800803e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008042:	d81a      	bhi.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d022      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800804c:	d115      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800804e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008052:	3308      	adds	r3, #8
 8008054:	2100      	movs	r1, #0
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fdee 	bl	8008c38 <RCCEx_PLL2_Config>
 800805c:	4603      	mov	r3, r0
 800805e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008062:	e015      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008068:	3328      	adds	r3, #40	@ 0x28
 800806a:	2102      	movs	r1, #2
 800806c:	4618      	mov	r0, r3
 800806e:	f000 fe95 	bl	8008d9c <RCCEx_PLL3_Config>
 8008072:	4603      	mov	r3, r0
 8008074:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008078:	e00a      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008080:	e006      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008082:	bf00      	nop
 8008084:	e004      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008086:	bf00      	nop
 8008088:	e002      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800808a:	bf00      	nop
 800808c:	e000      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800808e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008090:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10b      	bne.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008098:	4ba1      	ldr	r3, [pc, #644]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800809a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80080a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80080a8:	4a9d      	ldr	r2, [pc, #628]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080aa:	430b      	orrs	r3, r1
 80080ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80080ae:	e003      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80080b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	f002 0308 	and.w	r3, r2, #8
 80080c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080c8:	2300      	movs	r3, #0
 80080ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80080d2:	460b      	mov	r3, r1
 80080d4:	4313      	orrs	r3, r2
 80080d6:	d01e      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80080d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e4:	d10c      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080ea:	3328      	adds	r3, #40	@ 0x28
 80080ec:	2102      	movs	r1, #2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 fe54 	bl	8008d9c <RCCEx_PLL3_Config>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008100:	4b87      	ldr	r3, [pc, #540]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008104:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800810c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008110:	4a83      	ldr	r2, [pc, #524]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008112:	430b      	orrs	r3, r1
 8008114:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f002 0310 	and.w	r3, r2, #16
 8008122:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008126:	2300      	movs	r3, #0
 8008128:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800812c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008130:	460b      	mov	r3, r1
 8008132:	4313      	orrs	r3, r2
 8008134:	d01e      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800813a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800813e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008142:	d10c      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008148:	3328      	adds	r3, #40	@ 0x28
 800814a:	2102      	movs	r1, #2
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fe25 	bl	8008d9c <RCCEx_PLL3_Config>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800815e:	4b70      	ldr	r3, [pc, #448]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008162:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800816a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800816e:	4a6c      	ldr	r2, [pc, #432]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008170:	430b      	orrs	r3, r1
 8008172:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008180:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008184:	2300      	movs	r3, #0
 8008186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800818a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800818e:	460b      	mov	r3, r1
 8008190:	4313      	orrs	r3, r2
 8008192:	d03e      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008198:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800819c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081a0:	d022      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80081a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081a6:	d81b      	bhi.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80081ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081b0:	d00b      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80081b2:	e015      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081b8:	3308      	adds	r3, #8
 80081ba:	2100      	movs	r1, #0
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fd3b 	bl	8008c38 <RCCEx_PLL2_Config>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081c8:	e00f      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ce:	3328      	adds	r3, #40	@ 0x28
 80081d0:	2102      	movs	r1, #2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fde2 	bl	8008d9c <RCCEx_PLL3_Config>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081de:	e004      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081e6:	e000      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80081e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10b      	bne.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80081f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80081fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008202:	4a47      	ldr	r2, [pc, #284]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008204:	430b      	orrs	r3, r1
 8008206:	6593      	str	r3, [r2, #88]	@ 0x58
 8008208:	e003      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800820e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800821e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008220:	2300      	movs	r3, #0
 8008222:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008224:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008228:	460b      	mov	r3, r1
 800822a:	4313      	orrs	r3, r2
 800822c:	d03b      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800822e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008236:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800823a:	d01f      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800823c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008240:	d818      	bhi.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008246:	d003      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008248:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800824c:	d007      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800824e:	e011      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008250:	4b33      	ldr	r3, [pc, #204]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008254:	4a32      	ldr	r2, [pc, #200]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800825a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800825c:	e00f      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800825e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008262:	3328      	adds	r3, #40	@ 0x28
 8008264:	2101      	movs	r1, #1
 8008266:	4618      	mov	r0, r3
 8008268:	f000 fd98 	bl	8008d9c <RCCEx_PLL3_Config>
 800826c:	4603      	mov	r3, r0
 800826e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008272:	e004      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800827a:	e000      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800827c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800827e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10b      	bne.n	800829e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008286:	4b26      	ldr	r3, [pc, #152]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800828e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008296:	4a22      	ldr	r2, [pc, #136]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008298:	430b      	orrs	r3, r1
 800829a:	6553      	str	r3, [r2, #84]	@ 0x54
 800829c:	e003      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80082b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80082b4:	2300      	movs	r3, #0
 80082b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80082b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80082bc:	460b      	mov	r3, r1
 80082be:	4313      	orrs	r3, r2
 80082c0:	d034      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80082c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80082cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082d0:	d007      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80082d2:	e011      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d4:	4b12      	ldr	r3, [pc, #72]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d8:	4a11      	ldr	r2, [pc, #68]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80082da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80082e0:	e00e      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e6:	3308      	adds	r3, #8
 80082e8:	2102      	movs	r1, #2
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fca4 	bl	8008c38 <RCCEx_PLL2_Config>
 80082f0:	4603      	mov	r3, r0
 80082f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80082f6:	e003      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008300:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10d      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008308:	4b05      	ldr	r3, [pc, #20]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800830a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800830c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008316:	4a02      	ldr	r2, [pc, #8]	@ (8008320 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008318:	430b      	orrs	r3, r1
 800831a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800831c:	e006      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800831e:	bf00      	nop
 8008320:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008324:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008328:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800832c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800833a:	2300      	movs	r3, #0
 800833c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800833e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008342:	460b      	mov	r3, r1
 8008344:	4313      	orrs	r3, r2
 8008346:	d00c      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800834c:	3328      	adds	r3, #40	@ 0x28
 800834e:	2102      	movs	r1, #2
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fd23 	bl	8008d9c <RCCEx_PLL3_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800836e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008370:	2300      	movs	r3, #0
 8008372:	667b      	str	r3, [r7, #100]	@ 0x64
 8008374:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008378:	460b      	mov	r3, r1
 800837a:	4313      	orrs	r3, r2
 800837c:	d038      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800837e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008386:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800838a:	d018      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800838c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008390:	d811      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008396:	d014      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800839c:	d80b      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d011      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80083a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083a6:	d106      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a8:	4bc3      	ldr	r3, [pc, #780]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ac:	4ac2      	ldr	r2, [pc, #776]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80083b4:	e008      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083bc:	e004      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80083be:	bf00      	nop
 80083c0:	e002      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80083c2:	bf00      	nop
 80083c4:	e000      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80083c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10b      	bne.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083d0:	4bb9      	ldr	r3, [pc, #740]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e0:	4ab5      	ldr	r2, [pc, #724]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083e2:	430b      	orrs	r3, r1
 80083e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80083e6:	e003      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80083f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80083fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083fe:	2300      	movs	r3, #0
 8008400:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008402:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008406:	460b      	mov	r3, r1
 8008408:	4313      	orrs	r3, r2
 800840a:	d009      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800840c:	4baa      	ldr	r3, [pc, #680]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800840e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008410:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800841a:	4aa7      	ldr	r2, [pc, #668]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800841c:	430b      	orrs	r3, r1
 800841e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800842c:	653b      	str	r3, [r7, #80]	@ 0x50
 800842e:	2300      	movs	r3, #0
 8008430:	657b      	str	r3, [r7, #84]	@ 0x54
 8008432:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008436:	460b      	mov	r3, r1
 8008438:	4313      	orrs	r3, r2
 800843a:	d009      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800843c:	4b9e      	ldr	r3, [pc, #632]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800843e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008440:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800844a:	4a9b      	ldr	r2, [pc, #620]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800844c:	430b      	orrs	r3, r1
 800844e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800845c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800845e:	2300      	movs	r3, #0
 8008460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008462:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008466:	460b      	mov	r3, r1
 8008468:	4313      	orrs	r3, r2
 800846a:	d009      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800846c:	4b92      	ldr	r3, [pc, #584]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800846e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008470:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800847a:	4a8f      	ldr	r2, [pc, #572]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800847c:	430b      	orrs	r3, r1
 800847e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800848c:	643b      	str	r3, [r7, #64]	@ 0x40
 800848e:	2300      	movs	r3, #0
 8008490:	647b      	str	r3, [r7, #68]	@ 0x44
 8008492:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008496:	460b      	mov	r3, r1
 8008498:	4313      	orrs	r3, r2
 800849a:	d00e      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800849c:	4b86      	ldr	r3, [pc, #536]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	4a85      	ldr	r2, [pc, #532]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084a6:	6113      	str	r3, [r2, #16]
 80084a8:	4b83      	ldr	r3, [pc, #524]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084aa:	6919      	ldr	r1, [r3, #16]
 80084ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80084b4:	4a80      	ldr	r2, [pc, #512]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084b6:	430b      	orrs	r3, r1
 80084b8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80084c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084cc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80084d0:	460b      	mov	r3, r1
 80084d2:	4313      	orrs	r3, r2
 80084d4:	d009      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084d6:	4b78      	ldr	r3, [pc, #480]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80084de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e4:	4a74      	ldr	r2, [pc, #464]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084e6:	430b      	orrs	r3, r1
 80084e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80084f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80084f8:	2300      	movs	r3, #0
 80084fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80084fc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008500:	460b      	mov	r3, r1
 8008502:	4313      	orrs	r3, r2
 8008504:	d00a      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008506:	4b6c      	ldr	r3, [pc, #432]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800850e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008516:	4a68      	ldr	r2, [pc, #416]	@ (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008518:	430b      	orrs	r3, r1
 800851a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800851c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	2100      	movs	r1, #0
 8008526:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800852e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008532:	460b      	mov	r3, r1
 8008534:	4313      	orrs	r3, r2
 8008536:	d011      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800853c:	3308      	adds	r3, #8
 800853e:	2100      	movs	r1, #0
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fb79 	bl	8008c38 <RCCEx_PLL2_Config>
 8008546:	4603      	mov	r3, r0
 8008548:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800854c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008554:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008558:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800855c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	2100      	movs	r1, #0
 8008566:	6239      	str	r1, [r7, #32]
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	627b      	str	r3, [r7, #36]	@ 0x24
 800856e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008572:	460b      	mov	r3, r1
 8008574:	4313      	orrs	r3, r2
 8008576:	d011      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800857c:	3308      	adds	r3, #8
 800857e:	2101      	movs	r1, #1
 8008580:	4618      	mov	r0, r3
 8008582:	f000 fb59 	bl	8008c38 <RCCEx_PLL2_Config>
 8008586:	4603      	mov	r3, r0
 8008588:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800858c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008594:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008598:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800859c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	2100      	movs	r1, #0
 80085a6:	61b9      	str	r1, [r7, #24]
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	61fb      	str	r3, [r7, #28]
 80085ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80085b2:	460b      	mov	r3, r1
 80085b4:	4313      	orrs	r3, r2
 80085b6:	d011      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085bc:	3308      	adds	r3, #8
 80085be:	2102      	movs	r1, #2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 fb39 	bl	8008c38 <RCCEx_PLL2_Config>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80085cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80085dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	2100      	movs	r1, #0
 80085e6:	6139      	str	r1, [r7, #16]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80085f2:	460b      	mov	r3, r1
 80085f4:	4313      	orrs	r3, r2
 80085f6:	d011      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085fc:	3328      	adds	r3, #40	@ 0x28
 80085fe:	2100      	movs	r1, #0
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fbcb 	bl	8008d9c <RCCEx_PLL3_Config>
 8008606:	4603      	mov	r3, r0
 8008608:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800860c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008614:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008618:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800861c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008624:	2100      	movs	r1, #0
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	f003 0310 	and.w	r3, r3, #16
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008632:	460b      	mov	r3, r1
 8008634:	4313      	orrs	r3, r2
 8008636:	d011      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800863c:	3328      	adds	r3, #40	@ 0x28
 800863e:	2101      	movs	r1, #1
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fbab 	bl	8008d9c <RCCEx_PLL3_Config>
 8008646:	4603      	mov	r3, r0
 8008648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800864c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008658:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800865c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	2100      	movs	r1, #0
 8008666:	6039      	str	r1, [r7, #0]
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	607b      	str	r3, [r7, #4]
 800866e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008672:	460b      	mov	r3, r1
 8008674:	4313      	orrs	r3, r2
 8008676:	d011      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800867c:	3328      	adds	r3, #40	@ 0x28
 800867e:	2102      	movs	r1, #2
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fb8b 	bl	8008d9c <RCCEx_PLL3_Config>
 8008686:	4603      	mov	r3, r0
 8008688:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800868c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008690:	2b00      	cmp	r3, #0
 8008692:	d003      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008694:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008698:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800869c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	e000      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80086b0:	46bd      	mov	sp, r7
 80086b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086b6:	bf00      	nop
 80086b8:	58024400 	.word	0x58024400

080086bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80086c0:	f7fe fde2 	bl	8007288 <HAL_RCC_GetHCLKFreq>
 80086c4:	4602      	mov	r2, r0
 80086c6:	4b06      	ldr	r3, [pc, #24]	@ (80086e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	091b      	lsrs	r3, r3, #4
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	4904      	ldr	r1, [pc, #16]	@ (80086e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80086d2:	5ccb      	ldrb	r3, [r1, r3]
 80086d4:	f003 031f 	and.w	r3, r3, #31
 80086d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80086dc:	4618      	mov	r0, r3
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	58024400 	.word	0x58024400
 80086e4:	0800efdc 	.word	0x0800efdc

080086e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b089      	sub	sp, #36	@ 0x24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086f0:	4ba1      	ldr	r3, [pc, #644]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80086fa:	4b9f      	ldr	r3, [pc, #636]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fe:	0b1b      	lsrs	r3, r3, #12
 8008700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008704:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008706:	4b9c      	ldr	r3, [pc, #624]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870a:	091b      	lsrs	r3, r3, #4
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008712:	4b99      	ldr	r3, [pc, #612]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008716:	08db      	lsrs	r3, r3, #3
 8008718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8111 	beq.w	8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	2b02      	cmp	r3, #2
 800873a:	f000 8083 	beq.w	8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	2b02      	cmp	r3, #2
 8008742:	f200 80a1 	bhi.w	8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d056      	beq.n	8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008752:	e099      	b.n	8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008754:	4b88      	ldr	r3, [pc, #544]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d02d      	beq.n	80087bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008760:	4b85      	ldr	r3, [pc, #532]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	08db      	lsrs	r3, r3, #3
 8008766:	f003 0303 	and.w	r3, r3, #3
 800876a:	4a84      	ldr	r2, [pc, #528]	@ (800897c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800876c:	fa22 f303 	lsr.w	r3, r2, r3
 8008770:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	ee07 3a90 	vmov	s15, r3
 8008778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800878a:	4b7b      	ldr	r3, [pc, #492]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800878c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800879a:	ed97 6a03 	vldr	s12, [r7, #12]
 800879e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087ba:	e087      	b.n	80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008984 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80087ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ce:	4b6a      	ldr	r3, [pc, #424]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087de:	ed97 6a03 	vldr	s12, [r7, #12]
 80087e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087fe:	e065      	b.n	80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800880e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008812:	4b59      	ldr	r3, [pc, #356]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008822:	ed97 6a03 	vldr	s12, [r7, #12]
 8008826:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800882a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800883a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008842:	e043      	b.n	80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800898c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008856:	4b48      	ldr	r3, [pc, #288]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008866:	ed97 6a03 	vldr	s12, [r7, #12]
 800886a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800886e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800887a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800887e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008886:	e021      	b.n	80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008892:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800889a:	4b37      	ldr	r3, [pc, #220]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800889c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80088cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d0:	0a5b      	lsrs	r3, r3, #9
 80088d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088f2:	ee17 2a90 	vmov	r2, s15
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80088fa:	4b1f      	ldr	r3, [pc, #124]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fe:	0c1b      	lsrs	r3, r3, #16
 8008900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008904:	ee07 3a90 	vmov	s15, r3
 8008908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008910:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008914:	edd7 6a07 	vldr	s13, [r7, #28]
 8008918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800891c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008920:	ee17 2a90 	vmov	r2, s15
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008928:	4b13      	ldr	r3, [pc, #76]	@ (8008978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800892a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892c:	0e1b      	lsrs	r3, r3, #24
 800892e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800893e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008942:	edd7 6a07 	vldr	s13, [r7, #28]
 8008946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800894a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800894e:	ee17 2a90 	vmov	r2, s15
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008956:	e008      	b.n	800896a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	609a      	str	r2, [r3, #8]
}
 800896a:	bf00      	nop
 800896c:	3724      	adds	r7, #36	@ 0x24
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	58024400 	.word	0x58024400
 800897c:	03d09000 	.word	0x03d09000
 8008980:	46000000 	.word	0x46000000
 8008984:	4c742400 	.word	0x4c742400
 8008988:	4a742400 	.word	0x4a742400
 800898c:	4af42400 	.word	0x4af42400

08008990 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008990:	b480      	push	{r7}
 8008992:	b089      	sub	sp, #36	@ 0x24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008998:	4ba1      	ldr	r3, [pc, #644]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800899a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80089a2:	4b9f      	ldr	r3, [pc, #636]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a6:	0d1b      	lsrs	r3, r3, #20
 80089a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80089ae:	4b9c      	ldr	r3, [pc, #624]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80089ba:	4b99      	ldr	r3, [pc, #612]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089be:	08db      	lsrs	r3, r3, #3
 80089c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	fb02 f303 	mul.w	r3, r2, r3
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 8111 	beq.w	8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	f000 8083 	beq.w	8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	f200 80a1 	bhi.w	8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d056      	beq.n	8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80089fa:	e099      	b.n	8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089fc:	4b88      	ldr	r3, [pc, #544]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0320 	and.w	r3, r3, #32
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d02d      	beq.n	8008a64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a08:	4b85      	ldr	r3, [pc, #532]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	08db      	lsrs	r3, r3, #3
 8008a0e:	f003 0303 	and.w	r3, r3, #3
 8008a12:	4a84      	ldr	r2, [pc, #528]	@ (8008c24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a14:	fa22 f303 	lsr.w	r3, r2, r3
 8008a18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	ee07 3a90 	vmov	s15, r3
 8008a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a32:	4b7b      	ldr	r3, [pc, #492]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a62:	e087      	b.n	8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a76:	4b6a      	ldr	r3, [pc, #424]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aa6:	e065      	b.n	8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aba:	4b59      	ldr	r3, [pc, #356]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ace:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aea:	e043      	b.n	8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afe:	4b48      	ldr	r3, [pc, #288]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b2e:	e021      	b.n	8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b42:	4b37      	ldr	r3, [pc, #220]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008b74:	4b2a      	ldr	r3, [pc, #168]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b78:	0a5b      	lsrs	r3, r3, #9
 8008b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b9a:	ee17 2a90 	vmov	r2, s15
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba6:	0c1b      	lsrs	r3, r3, #16
 8008ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bac:	ee07 3a90 	vmov	s15, r3
 8008bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc8:	ee17 2a90 	vmov	r2, s15
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008bd0:	4b13      	ldr	r3, [pc, #76]	@ (8008c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd4:	0e1b      	lsrs	r3, r3, #24
 8008bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bf6:	ee17 2a90 	vmov	r2, s15
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008bfe:	e008      	b.n	8008c12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	609a      	str	r2, [r3, #8]
}
 8008c12:	bf00      	nop
 8008c14:	3724      	adds	r7, #36	@ 0x24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	58024400 	.word	0x58024400
 8008c24:	03d09000 	.word	0x03d09000
 8008c28:	46000000 	.word	0x46000000
 8008c2c:	4c742400 	.word	0x4c742400
 8008c30:	4a742400 	.word	0x4a742400
 8008c34:	4af42400 	.word	0x4af42400

08008c38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c46:	4b53      	ldr	r3, [pc, #332]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d101      	bne.n	8008c56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e099      	b.n	8008d8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c56:	4b4f      	ldr	r3, [pc, #316]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a4e      	ldr	r2, [pc, #312]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c62:	f7f9 f999 	bl	8001f98 <HAL_GetTick>
 8008c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c68:	e008      	b.n	8008c7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c6a:	f7f9 f995 	bl	8001f98 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e086      	b.n	8008d8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c7c:	4b45      	ldr	r3, [pc, #276]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f0      	bne.n	8008c6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c88:	4b42      	ldr	r3, [pc, #264]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	031b      	lsls	r3, r3, #12
 8008c96:	493f      	ldr	r1, [pc, #252]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	025b      	lsls	r3, r3, #9
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	041b      	lsls	r3, r3, #16
 8008cba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	061b      	lsls	r3, r3, #24
 8008cc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ccc:	4931      	ldr	r1, [pc, #196]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008cd2:	4b30      	ldr	r3, [pc, #192]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	492d      	ldr	r1, [pc, #180]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce8:	f023 0220 	bic.w	r2, r3, #32
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	4928      	ldr	r1, [pc, #160]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008cf6:	4b27      	ldr	r3, [pc, #156]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfa:	4a26      	ldr	r2, [pc, #152]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008cfc:	f023 0310 	bic.w	r3, r3, #16
 8008d00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d02:	4b24      	ldr	r3, [pc, #144]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d06:	4b24      	ldr	r3, [pc, #144]	@ (8008d98 <RCCEx_PLL2_Config+0x160>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	69d2      	ldr	r2, [r2, #28]
 8008d0e:	00d2      	lsls	r2, r2, #3
 8008d10:	4920      	ldr	r1, [pc, #128]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008d16:	4b1f      	ldr	r3, [pc, #124]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d1c:	f043 0310 	orr.w	r3, r3, #16
 8008d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d106      	bne.n	8008d36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d28:	4b1a      	ldr	r3, [pc, #104]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2c:	4a19      	ldr	r2, [pc, #100]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d34:	e00f      	b.n	8008d56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d106      	bne.n	8008d4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d3c:	4b15      	ldr	r3, [pc, #84]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d40:	4a14      	ldr	r2, [pc, #80]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d48:	e005      	b.n	8008d56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d4a:	4b12      	ldr	r3, [pc, #72]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	4a11      	ldr	r2, [pc, #68]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d56:	4b0f      	ldr	r3, [pc, #60]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d62:	f7f9 f919 	bl	8001f98 <HAL_GetTick>
 8008d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d68:	e008      	b.n	8008d7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d6a:	f7f9 f915 	bl	8001f98 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d901      	bls.n	8008d7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e006      	b.n	8008d8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d7c:	4b05      	ldr	r3, [pc, #20]	@ (8008d94 <RCCEx_PLL2_Config+0x15c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0f0      	beq.n	8008d6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	58024400 	.word	0x58024400
 8008d98:	ffff0007 	.word	0xffff0007

08008d9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008daa:	4b53      	ldr	r3, [pc, #332]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d101      	bne.n	8008dba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e099      	b.n	8008eee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008dba:	4b4f      	ldr	r3, [pc, #316]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dc6:	f7f9 f8e7 	bl	8001f98 <HAL_GetTick>
 8008dca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dcc:	e008      	b.n	8008de0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dce:	f7f9 f8e3 	bl	8001f98 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d901      	bls.n	8008de0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e086      	b.n	8008eee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008de0:	4b45      	ldr	r3, [pc, #276]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1f0      	bne.n	8008dce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008dec:	4b42      	ldr	r3, [pc, #264]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	051b      	lsls	r3, r3, #20
 8008dfa:	493f      	ldr	r1, [pc, #252]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	025b      	lsls	r3, r3, #9
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	431a      	orrs	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	041b      	lsls	r3, r3, #16
 8008e1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008e22:	431a      	orrs	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	061b      	lsls	r3, r3, #24
 8008e2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008e30:	4931      	ldr	r1, [pc, #196]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e36:	4b30      	ldr	r3, [pc, #192]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	492d      	ldr	r1, [pc, #180]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e44:	4313      	orrs	r3, r2
 8008e46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e48:	4b2b      	ldr	r3, [pc, #172]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	4928      	ldr	r1, [pc, #160]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e5a:	4b27      	ldr	r3, [pc, #156]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5e:	4a26      	ldr	r2, [pc, #152]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e66:	4b24      	ldr	r3, [pc, #144]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e6a:	4b24      	ldr	r3, [pc, #144]	@ (8008efc <RCCEx_PLL3_Config+0x160>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	69d2      	ldr	r2, [r2, #28]
 8008e72:	00d2      	lsls	r2, r2, #3
 8008e74:	4920      	ldr	r1, [pc, #128]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d106      	bne.n	8008e9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e90:	4a19      	ldr	r2, [pc, #100]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008e92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008e96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e98:	e00f      	b.n	8008eba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d106      	bne.n	8008eae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ea0:	4b15      	ldr	r3, [pc, #84]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea4:	4a14      	ldr	r2, [pc, #80]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008ea6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008eac:	e005      	b.n	8008eba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008eae:	4b12      	ldr	r3, [pc, #72]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb2:	4a11      	ldr	r2, [pc, #68]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008eb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008eba:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ec6:	f7f9 f867 	bl	8001f98 <HAL_GetTick>
 8008eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ecc:	e008      	b.n	8008ee0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ece:	f7f9 f863 	bl	8001f98 <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d901      	bls.n	8008ee0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e006      	b.n	8008eee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ee0:	4b05      	ldr	r3, [pc, #20]	@ (8008ef8 <RCCEx_PLL3_Config+0x15c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0f0      	beq.n	8008ece <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	58024400 	.word	0x58024400
 8008efc:	ffff0007 	.word	0xffff0007

08008f00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e10f      	b.n	8009132 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a87      	ldr	r2, [pc, #540]	@ (800913c <HAL_SPI_Init+0x23c>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d00f      	beq.n	8008f42 <HAL_SPI_Init+0x42>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a86      	ldr	r2, [pc, #536]	@ (8009140 <HAL_SPI_Init+0x240>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00a      	beq.n	8008f42 <HAL_SPI_Init+0x42>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a84      	ldr	r2, [pc, #528]	@ (8009144 <HAL_SPI_Init+0x244>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d005      	beq.n	8008f42 <HAL_SPI_Init+0x42>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	2b0f      	cmp	r3, #15
 8008f3c:	d901      	bls.n	8008f42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e0f7      	b.n	8009132 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fbba 	bl	80096bc <SPI_GetPacketSize>
 8008f48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a7b      	ldr	r2, [pc, #492]	@ (800913c <HAL_SPI_Init+0x23c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00c      	beq.n	8008f6e <HAL_SPI_Init+0x6e>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a79      	ldr	r2, [pc, #484]	@ (8009140 <HAL_SPI_Init+0x240>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d007      	beq.n	8008f6e <HAL_SPI_Init+0x6e>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a78      	ldr	r2, [pc, #480]	@ (8009144 <HAL_SPI_Init+0x244>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d002      	beq.n	8008f6e <HAL_SPI_Init+0x6e>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b08      	cmp	r3, #8
 8008f6c:	d811      	bhi.n	8008f92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f72:	4a72      	ldr	r2, [pc, #456]	@ (800913c <HAL_SPI_Init+0x23c>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d009      	beq.n	8008f8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a70      	ldr	r2, [pc, #448]	@ (8009140 <HAL_SPI_Init+0x240>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d004      	beq.n	8008f8c <HAL_SPI_Init+0x8c>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a6f      	ldr	r2, [pc, #444]	@ (8009144 <HAL_SPI_Init+0x244>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d104      	bne.n	8008f96 <HAL_SPI_Init+0x96>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b10      	cmp	r3, #16
 8008f90:	d901      	bls.n	8008f96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e0cd      	b.n	8009132 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7f8 f9c0 	bl	8001330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 0201 	bic.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008fd2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008fdc:	d119      	bne.n	8009012 <HAL_SPI_Init+0x112>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fe6:	d103      	bne.n	8008ff0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d008      	beq.n	8009002 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10c      	bne.n	8009012 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009000:	d107      	bne.n	8009012 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009010:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00f      	beq.n	800903e <HAL_SPI_Init+0x13e>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	2b06      	cmp	r3, #6
 8009024:	d90b      	bls.n	800903e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	e007      	b.n	800904e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800904c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69da      	ldr	r2, [r3, #28]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009056:	431a      	orrs	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009060:	ea42 0103 	orr.w	r1, r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68da      	ldr	r2, [r3, #12]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	430a      	orrs	r2, r1
 800906e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	431a      	orrs	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	431a      	orrs	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	431a      	orrs	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	431a      	orrs	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090ae:	ea42 0103 	orr.w	r1, r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d113      	bne.n	80090ee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80090ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0201 	bic.w	r2, r2, #1
 80090fc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	430a      	orrs	r2, r1
 800911e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	40013000 	.word	0x40013000
 8009140:	40003800 	.word	0x40003800
 8009144:	40003c00 	.word	0x40003c00

08009148 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08a      	sub	sp, #40	@ 0x28
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009160:	6a3a      	ldr	r2, [r7, #32]
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	4013      	ands	r3, r2
 8009166:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009170:	2300      	movs	r3, #0
 8009172:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800917a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3330      	adds	r3, #48	@ 0x30
 8009182:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800918a:	2b00      	cmp	r3, #0
 800918c:	d010      	beq.n	80091b0 <HAL_SPI_IRQHandler+0x68>
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00b      	beq.n	80091b0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699a      	ldr	r2, [r3, #24]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091a6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f9c3 	bl	8009534 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80091ae:	e192      	b.n	80094d6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d113      	bne.n	80091e2 <HAL_SPI_IRQHandler+0x9a>
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	f003 0320 	and.w	r3, r3, #32
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10e      	bne.n	80091e2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d009      	beq.n	80091e2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	4798      	blx	r3
    handled = 1UL;
 80091de:	2301      	movs	r3, #1
 80091e0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10f      	bne.n	800920c <HAL_SPI_IRQHandler+0xc4>
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d105      	bne.n	800920c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	4798      	blx	r3
    handled = 1UL;
 8009208:	2301      	movs	r3, #1
 800920a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10f      	bne.n	8009236 <HAL_SPI_IRQHandler+0xee>
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00a      	beq.n	8009236 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009226:	2b00      	cmp	r3, #0
 8009228:	d105      	bne.n	8009236 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	4798      	blx	r3
    handled = 1UL;
 8009232:	2301      	movs	r3, #1
 8009234:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	f040 8147 	bne.w	80094cc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	f003 0308 	and.w	r3, r3, #8
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 808b 	beq.w	8009360 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	699a      	ldr	r2, [r3, #24]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0208 	orr.w	r2, r2, #8
 8009258:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	699a      	ldr	r2, [r3, #24]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f042 0210 	orr.w	r2, r2, #16
 8009268:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	699a      	ldr	r2, [r3, #24]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009278:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0208 	bic.w	r2, r2, #8
 8009288:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d13d      	bne.n	8009314 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009298:	e036      	b.n	8009308 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	2b0f      	cmp	r3, #15
 80092a0:	d90b      	bls.n	80092ba <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80092ac:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092b2:	1d1a      	adds	r2, r3, #4
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	665a      	str	r2, [r3, #100]	@ 0x64
 80092b8:	e01d      	b.n	80092f6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	2b07      	cmp	r3, #7
 80092c0:	d90b      	bls.n	80092da <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	8812      	ldrh	r2, [r2, #0]
 80092ca:	b292      	uxth	r2, r2
 80092cc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092d2:	1c9a      	adds	r2, r3, #2
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	665a      	str	r2, [r3, #100]	@ 0x64
 80092d8:	e00d      	b.n	80092f6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092e6:	7812      	ldrb	r2, [r2, #0]
 80092e8:	b2d2      	uxtb	r2, r2
 80092ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	3b01      	subs	r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800930e:	b29b      	uxth	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1c2      	bne.n	800929a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f931 	bl	800957c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009328:	2b00      	cmp	r3, #0
 800932a:	d003      	beq.n	8009334 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f8f7 	bl	8009520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009332:	e0d0      	b.n	80094d6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009334:	7cfb      	ldrb	r3, [r7, #19]
 8009336:	2b05      	cmp	r3, #5
 8009338:	d103      	bne.n	8009342 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f8e6 	bl	800950c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009340:	e0c6      	b.n	80094d0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009342:	7cfb      	ldrb	r3, [r7, #19]
 8009344:	2b04      	cmp	r3, #4
 8009346:	d103      	bne.n	8009350 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f8d5 	bl	80094f8 <HAL_SPI_RxCpltCallback>
    return;
 800934e:	e0bf      	b.n	80094d0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009350:	7cfb      	ldrb	r3, [r7, #19]
 8009352:	2b03      	cmp	r3, #3
 8009354:	f040 80bc 	bne.w	80094d0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f8c3 	bl	80094e4 <HAL_SPI_TxCpltCallback>
    return;
 800935e:	e0b7      	b.n	80094d0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 80b5 	beq.w	80094d6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00f      	beq.n	8009396 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800937c:	f043 0204 	orr.w	r2, r3, #4
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	699a      	ldr	r2, [r3, #24]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009394:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00f      	beq.n	80093c0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093a6:	f043 0201 	orr.w	r2, r3, #1
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699a      	ldr	r2, [r3, #24]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093be:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00f      	beq.n	80093ea <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093d0:	f043 0208 	orr.w	r2, r3, #8
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	699a      	ldr	r2, [r3, #24]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093e8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	f003 0320 	and.w	r3, r3, #32
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00f      	beq.n	8009414 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	699a      	ldr	r2, [r3, #24]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f042 0220 	orr.w	r2, r2, #32
 8009412:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800941a:	2b00      	cmp	r3, #0
 800941c:	d05a      	beq.n	80094d4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0201 	bic.w	r2, r2, #1
 800942c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6919      	ldr	r1, [r3, #16]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4b28      	ldr	r3, [pc, #160]	@ (80094dc <HAL_SPI_IRQHandler+0x394>)
 800943a:	400b      	ands	r3, r1
 800943c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009444:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009448:	d138      	bne.n	80094bc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009458:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d013      	beq.n	800948a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009466:	4a1e      	ldr	r2, [pc, #120]	@ (80094e0 <HAL_SPI_IRQHandler+0x398>)
 8009468:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800946e:	4618      	mov	r0, r3
 8009470:	f7fa f860 	bl	8003534 <HAL_DMA_Abort_IT>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d007      	beq.n	800948a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009480:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800948e:	2b00      	cmp	r3, #0
 8009490:	d020      	beq.n	80094d4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009496:	4a12      	ldr	r2, [pc, #72]	@ (80094e0 <HAL_SPI_IRQHandler+0x398>)
 8009498:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fa f848 	bl	8003534 <HAL_DMA_Abort_IT>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d014      	beq.n	80094d4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80094ba:	e00b      	b.n	80094d4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f82b 	bl	8009520 <HAL_SPI_ErrorCallback>
    return;
 80094ca:	e003      	b.n	80094d4 <HAL_SPI_IRQHandler+0x38c>
    return;
 80094cc:	bf00      	nop
 80094ce:	e002      	b.n	80094d6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80094d0:	bf00      	nop
 80094d2:	e000      	b.n	80094d6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80094d4:	bf00      	nop
  }
}
 80094d6:	3728      	adds	r7, #40	@ 0x28
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	fffffc94 	.word	0xfffffc94
 80094e0:	08009549 	.word	0x08009549

080094e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009554:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7ff ffd6 	bl	8009520 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699a      	ldr	r2, [r3, #24]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0208 	orr.w	r2, r2, #8
 800959a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	699a      	ldr	r2, [r3, #24]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0210 	orr.w	r2, r2, #16
 80095aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0201 	bic.w	r2, r2, #1
 80095ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6919      	ldr	r1, [r3, #16]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	4b3c      	ldr	r3, [pc, #240]	@ (80096b8 <SPI_CloseTransfer+0x13c>)
 80095c8:	400b      	ands	r3, r1
 80095ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80095da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b04      	cmp	r3, #4
 80095e6:	d014      	beq.n	8009612 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00f      	beq.n	8009612 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	699a      	ldr	r2, [r3, #24]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f042 0220 	orr.w	r2, r2, #32
 8009610:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b03      	cmp	r3, #3
 800961c:	d014      	beq.n	8009648 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00f      	beq.n	8009648 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800962e:	f043 0204 	orr.w	r2, r3, #4
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009646:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00f      	beq.n	8009672 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009658:	f043 0201 	orr.w	r2, r3, #1
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	699a      	ldr	r2, [r3, #24]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009670:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00f      	beq.n	800969c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009682:	f043 0208 	orr.w	r2, r3, #8
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800969a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80096ac:	bf00      	nop
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	fffffc90 	.word	0xfffffc90

080096bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c8:	095b      	lsrs	r3, r3, #5
 80096ca:	3301      	adds	r3, #1
 80096cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	3301      	adds	r3, #1
 80096d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	3307      	adds	r3, #7
 80096da:	08db      	lsrs	r3, r3, #3
 80096dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e042      	b.n	800978a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800970a:	2b00      	cmp	r3, #0
 800970c:	d106      	bne.n	800971c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7f8 f9a6 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2224      	movs	r2, #36	@ 0x24
 8009720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 0201 	bic.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009738:	2b00      	cmp	r3, #0
 800973a:	d002      	beq.n	8009742 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 fbd7 	bl	800aef0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fd68 	bl	800a218 <UART_SetConfig>
 8009748:	4603      	mov	r3, r0
 800974a:	2b01      	cmp	r3, #1
 800974c:	d101      	bne.n	8009752 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e01b      	b.n	800978a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009760:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689a      	ldr	r2, [r3, #8]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009770:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f042 0201 	orr.w	r2, r2, #1
 8009780:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 fc56 	bl	800b034 <UART_CheckIdleState>
 8009788:	4603      	mov	r3, r0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b08a      	sub	sp, #40	@ 0x28
 8009796:	af02      	add	r7, sp, #8
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	603b      	str	r3, [r7, #0]
 800979e:	4613      	mov	r3, r2
 80097a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	d17b      	bne.n	80098a4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <HAL_UART_Transmit+0x26>
 80097b2:	88fb      	ldrh	r3, [r7, #6]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e074      	b.n	80098a6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2221      	movs	r2, #33	@ 0x21
 80097c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097cc:	f7f8 fbe4 	bl	8001f98 <HAL_GetTick>
 80097d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	88fa      	ldrh	r2, [r7, #6]
 80097d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	88fa      	ldrh	r2, [r7, #6]
 80097de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ea:	d108      	bne.n	80097fe <HAL_UART_Transmit+0x6c>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d104      	bne.n	80097fe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	61bb      	str	r3, [r7, #24]
 80097fc:	e003      	b.n	8009806 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009802:	2300      	movs	r3, #0
 8009804:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009806:	e030      	b.n	800986a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	2200      	movs	r2, #0
 8009810:	2180      	movs	r1, #128	@ 0x80
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f001 fcb8 	bl	800b188 <UART_WaitOnFlagUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d005      	beq.n	800982a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2220      	movs	r2, #32
 8009822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e03d      	b.n	80098a6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10b      	bne.n	8009848 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800983e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	3302      	adds	r3, #2
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	e007      	b.n	8009858 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	781a      	ldrb	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	3301      	adds	r3, #1
 8009856:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	b29a      	uxth	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009870:	b29b      	uxth	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d1c8      	bne.n	8009808 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2200      	movs	r2, #0
 800987e:	2140      	movs	r1, #64	@ 0x40
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f001 fc81 	bl	800b188 <UART_WaitOnFlagUntilTimeout>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2220      	movs	r2, #32
 8009890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e006      	b.n	80098a6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2220      	movs	r2, #32
 800989c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	e000      	b.n	80098a6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80098a4:	2302      	movs	r3, #2
  }
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3720      	adds	r7, #32
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b09a      	sub	sp, #104	@ 0x68
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80098d8:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80098e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e6      	bne.n	80098b8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3308      	adds	r3, #8
 80098f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098fc:	4b46      	ldr	r3, [pc, #280]	@ (8009a18 <HAL_UART_AbortReceive+0x168>)
 80098fe:	4013      	ands	r3, r2
 8009900:	663b      	str	r3, [r7, #96]	@ 0x60
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3308      	adds	r3, #8
 8009908:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800990a:	643a      	str	r2, [r7, #64]	@ 0x40
 800990c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009910:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e5      	bne.n	80098ea <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d118      	bne.n	8009958 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992c:	6a3b      	ldr	r3, [r7, #32]
 800992e:	e853 3f00 	ldrex	r3, [r3]
 8009932:	61fb      	str	r3, [r7, #28]
   return(result);
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	f023 0310 	bic.w	r3, r3, #16
 800993a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	461a      	mov	r2, r3
 8009942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009946:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800994a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800994c:	e841 2300 	strex	r3, r2, [r1]
 8009950:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1e6      	bne.n	8009926 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009962:	2b40      	cmp	r3, #64	@ 0x40
 8009964:	d13b      	bne.n	80099de <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3308      	adds	r3, #8
 800996c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	e853 3f00 	ldrex	r3, [r3]
 8009974:	60bb      	str	r3, [r7, #8]
   return(result);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800997c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3308      	adds	r3, #8
 8009984:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009986:	61ba      	str	r2, [r7, #24]
 8009988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6979      	ldr	r1, [r7, #20]
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	613b      	str	r3, [r7, #16]
   return(result);
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e5      	bne.n	8009966 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d01c      	beq.n	80099de <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099aa:	2200      	movs	r2, #0
 80099ac:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7f9 fa9f 	bl	8002ef8 <HAL_DMA_Abort>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00e      	beq.n	80099de <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fa ff5c 	bl	8004884 <HAL_DMA_GetError>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	d105      	bne.n	80099de <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2210      	movs	r2, #16
 80099d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e017      	b.n	8009a0e <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	220f      	movs	r2, #15
 80099ec:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699a      	ldr	r2, [r3, #24]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f042 0208 	orr.w	r2, r2, #8
 80099fc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2220      	movs	r2, #32
 8009a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3768      	adds	r7, #104	@ 0x68
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	effffffe 	.word	0xeffffffe

08009a1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b0ba      	sub	sp, #232	@ 0xe8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d11b      	bne.n	8009a90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a5c:	f003 0320 	and.w	r3, r3, #32
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d015      	beq.n	8009a90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d105      	bne.n	8009a7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d009      	beq.n	8009a90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 8393 	beq.w	800a1ac <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	4798      	blx	r3
      }
      return;
 8009a8e:	e38d      	b.n	800a1ac <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f000 8123 	beq.w	8009ce0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8009cd4 <HAL_UART_IRQHandler+0x2b8>)
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d106      	bne.n	8009ab4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009aa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009aaa:	4b8b      	ldr	r3, [pc, #556]	@ (8009cd8 <HAL_UART_IRQHandler+0x2bc>)
 8009aac:	4013      	ands	r3, r2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 8116 	beq.w	8009ce0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d011      	beq.n	8009ae4 <HAL_UART_IRQHandler+0xc8>
 8009ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ada:	f043 0201 	orr.w	r2, r3, #1
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d011      	beq.n	8009b14 <HAL_UART_IRQHandler+0xf8>
 8009af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00b      	beq.n	8009b14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2202      	movs	r2, #2
 8009b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0a:	f043 0204 	orr.w	r2, r3, #4
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d011      	beq.n	8009b44 <HAL_UART_IRQHandler+0x128>
 8009b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00b      	beq.n	8009b44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2204      	movs	r2, #4
 8009b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b3a:	f043 0202 	orr.w	r2, r3, #2
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b48:	f003 0308 	and.w	r3, r3, #8
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d017      	beq.n	8009b80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d105      	bne.n	8009b68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b60:	4b5c      	ldr	r3, [pc, #368]	@ (8009cd4 <HAL_UART_IRQHandler+0x2b8>)
 8009b62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2208      	movs	r2, #8
 8009b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b76:	f043 0208 	orr.w	r2, r3, #8
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d012      	beq.n	8009bb2 <HAL_UART_IRQHandler+0x196>
 8009b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00c      	beq.n	8009bb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ba0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ba8:	f043 0220 	orr.w	r2, r3, #32
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 82f9 	beq.w	800a1b0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc2:	f003 0320 	and.w	r3, r3, #32
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d013      	beq.n	8009bf2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bce:	f003 0320 	and.w	r3, r3, #32
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d105      	bne.n	8009be2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d007      	beq.n	8009bf2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c06:	2b40      	cmp	r3, #64	@ 0x40
 8009c08:	d005      	beq.n	8009c16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d054      	beq.n	8009cc0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 fc0c 	bl	800b434 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c26:	2b40      	cmp	r3, #64	@ 0x40
 8009c28:	d146      	bne.n	8009cb8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	3308      	adds	r3, #8
 8009c30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c38:	e853 3f00 	ldrex	r3, [r3]
 8009c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3308      	adds	r3, #8
 8009c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009c66:	e841 2300 	strex	r3, r2, [r1]
 8009c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1d9      	bne.n	8009c2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d017      	beq.n	8009cb0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c86:	4a15      	ldr	r2, [pc, #84]	@ (8009cdc <HAL_UART_IRQHandler+0x2c0>)
 8009c88:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7f9 fc4f 	bl	8003534 <HAL_DMA_Abort_IT>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d019      	beq.n	8009cd0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009caa:	4610      	mov	r0, r2
 8009cac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cae:	e00f      	b.n	8009cd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 faa7 	bl	800a204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb6:	e00b      	b.n	8009cd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 faa3 	bl	800a204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cbe:	e007      	b.n	8009cd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fa9f 	bl	800a204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009cce:	e26f      	b.n	800a1b0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd0:	bf00      	nop
    return;
 8009cd2:	e26d      	b.n	800a1b0 <HAL_UART_IRQHandler+0x794>
 8009cd4:	10000001 	.word	0x10000001
 8009cd8:	04000120 	.word	0x04000120
 8009cdc:	0800b6e7 	.word	0x0800b6e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	f040 8203 	bne.w	800a0f0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cee:	f003 0310 	and.w	r3, r3, #16
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 81fc 	beq.w	800a0f0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cfc:	f003 0310 	and.w	r3, r3, #16
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 81f5 	beq.w	800a0f0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2210      	movs	r2, #16
 8009d0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d18:	2b40      	cmp	r3, #64	@ 0x40
 8009d1a:	f040 816d 	bne.w	8009ff8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4aa4      	ldr	r2, [pc, #656]	@ (8009fb8 <HAL_UART_IRQHandler+0x59c>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d068      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4aa1      	ldr	r2, [pc, #644]	@ (8009fbc <HAL_UART_IRQHandler+0x5a0>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d061      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a9f      	ldr	r2, [pc, #636]	@ (8009fc0 <HAL_UART_IRQHandler+0x5a4>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d05a      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a9c      	ldr	r2, [pc, #624]	@ (8009fc4 <HAL_UART_IRQHandler+0x5a8>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d053      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a9a      	ldr	r2, [pc, #616]	@ (8009fc8 <HAL_UART_IRQHandler+0x5ac>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d04c      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a97      	ldr	r2, [pc, #604]	@ (8009fcc <HAL_UART_IRQHandler+0x5b0>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d045      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a95      	ldr	r2, [pc, #596]	@ (8009fd0 <HAL_UART_IRQHandler+0x5b4>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d03e      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a92      	ldr	r2, [pc, #584]	@ (8009fd4 <HAL_UART_IRQHandler+0x5b8>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d037      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a90      	ldr	r2, [pc, #576]	@ (8009fd8 <HAL_UART_IRQHandler+0x5bc>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d030      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a8d      	ldr	r2, [pc, #564]	@ (8009fdc <HAL_UART_IRQHandler+0x5c0>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d029      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a8b      	ldr	r2, [pc, #556]	@ (8009fe0 <HAL_UART_IRQHandler+0x5c4>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d022      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a88      	ldr	r2, [pc, #544]	@ (8009fe4 <HAL_UART_IRQHandler+0x5c8>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d01b      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a86      	ldr	r2, [pc, #536]	@ (8009fe8 <HAL_UART_IRQHandler+0x5cc>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d014      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a83      	ldr	r2, [pc, #524]	@ (8009fec <HAL_UART_IRQHandler+0x5d0>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00d      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a81      	ldr	r2, [pc, #516]	@ (8009ff0 <HAL_UART_IRQHandler+0x5d4>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d006      	beq.n	8009dfe <HAL_UART_IRQHandler+0x3e2>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a7e      	ldr	r2, [pc, #504]	@ (8009ff4 <HAL_UART_IRQHandler+0x5d8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d106      	bne.n	8009e0c <HAL_UART_IRQHandler+0x3f0>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	e005      	b.n	8009e18 <HAL_UART_IRQHandler+0x3fc>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 80ad 	beq.w	8009f80 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e30:	429a      	cmp	r2, r3
 8009e32:	f080 80a5 	bcs.w	8009f80 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e46:	69db      	ldr	r3, [r3, #28]
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e4c:	f000 8087 	beq.w	8009f5e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	461a      	mov	r2, r3
 8009e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e8a:	e841 2300 	strex	r3, r2, [r1]
 8009e8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1da      	bne.n	8009e50 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3308      	adds	r3, #8
 8009ea0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ea4:	e853 3f00 	ldrex	r3, [r3]
 8009ea8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009eaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009eac:	f023 0301 	bic.w	r3, r3, #1
 8009eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3308      	adds	r3, #8
 8009eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ebe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ec2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009eca:	e841 2300 	strex	r3, r2, [r1]
 8009ece:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1e1      	bne.n	8009e9a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3308      	adds	r3, #8
 8009edc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ede:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ee0:	e853 3f00 	ldrex	r3, [r3]
 8009ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ee6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ee8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3308      	adds	r3, #8
 8009ef6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009efa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009efc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e3      	bne.n	8009ed6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f2c:	f023 0310 	bic.w	r3, r3, #16
 8009f30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f46:	e841 2300 	strex	r3, r2, [r1]
 8009f4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1e4      	bne.n	8009f1c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7f8 ffcd 	bl	8002ef8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2202      	movs	r2, #2
 8009f62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7f7 f859 	bl	8001030 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009f7e:	e119      	b.n	800a1b4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	f040 8112 	bne.w	800a1b4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f9c:	f040 810a 	bne.w	800a1b4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7f7 f83e 	bl	8001030 <HAL_UARTEx_RxEventCallback>
      return;
 8009fb4:	e0fe      	b.n	800a1b4 <HAL_UART_IRQHandler+0x798>
 8009fb6:	bf00      	nop
 8009fb8:	40020010 	.word	0x40020010
 8009fbc:	40020028 	.word	0x40020028
 8009fc0:	40020040 	.word	0x40020040
 8009fc4:	40020058 	.word	0x40020058
 8009fc8:	40020070 	.word	0x40020070
 8009fcc:	40020088 	.word	0x40020088
 8009fd0:	400200a0 	.word	0x400200a0
 8009fd4:	400200b8 	.word	0x400200b8
 8009fd8:	40020410 	.word	0x40020410
 8009fdc:	40020428 	.word	0x40020428
 8009fe0:	40020440 	.word	0x40020440
 8009fe4:	40020458 	.word	0x40020458
 8009fe8:	40020470 	.word	0x40020470
 8009fec:	40020488 	.word	0x40020488
 8009ff0:	400204a0 	.word	0x400204a0
 8009ff4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a004:	b29b      	uxth	r3, r3
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a012:	b29b      	uxth	r3, r3
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 80cf 	beq.w	800a1b8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800a01a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 80ca 	beq.w	800a1b8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a046:	647b      	str	r3, [r7, #68]	@ 0x44
 800a048:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a04c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a04e:	e841 2300 	strex	r3, r2, [r1]
 800a052:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1e4      	bne.n	800a024 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3308      	adds	r3, #8
 800a060:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	e853 3f00 	ldrex	r3, [r3]
 800a068:	623b      	str	r3, [r7, #32]
   return(result);
 800a06a:	6a3a      	ldr	r2, [r7, #32]
 800a06c:	4b55      	ldr	r3, [pc, #340]	@ (800a1c4 <HAL_UART_IRQHandler+0x7a8>)
 800a06e:	4013      	ands	r3, r2
 800a070:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3308      	adds	r3, #8
 800a07a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a07e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a080:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e3      	bne.n	800a05a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2220      	movs	r2, #32
 800a096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f023 0310 	bic.w	r3, r3, #16
 800a0ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a0c8:	61fb      	str	r3, [r7, #28]
 800a0ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0cc:	69b9      	ldr	r1, [r7, #24]
 800a0ce:	69fa      	ldr	r2, [r7, #28]
 800a0d0:	e841 2300 	strex	r3, r2, [r1]
 800a0d4:	617b      	str	r3, [r7, #20]
   return(result);
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e4      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2202      	movs	r2, #2
 800a0e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7f6 ffa1 	bl	8001030 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0ee:	e063      	b.n	800a1b8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00e      	beq.n	800a11a <HAL_UART_IRQHandler+0x6fe>
 800a0fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d008      	beq.n	800a11a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a110:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f001 fb24 	bl	800b760 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a118:	e051      	b.n	800a1be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a11e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a122:	2b00      	cmp	r3, #0
 800a124:	d014      	beq.n	800a150 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a12a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d105      	bne.n	800a13e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d008      	beq.n	800a150 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a142:	2b00      	cmp	r3, #0
 800a144:	d03a      	beq.n	800a1bc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	4798      	blx	r3
    }
    return;
 800a14e:	e035      	b.n	800a1bc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <HAL_UART_IRQHandler+0x754>
 800a15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a164:	2b00      	cmp	r3, #0
 800a166:	d003      	beq.n	800a170 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 face 	bl	800b70a <UART_EndTransmit_IT>
    return;
 800a16e:	e026      	b.n	800a1be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a174:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d009      	beq.n	800a190 <HAL_UART_IRQHandler+0x774>
 800a17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a180:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f001 fafd 	bl	800b788 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a18e:	e016      	b.n	800a1be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a194:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d010      	beq.n	800a1be <HAL_UART_IRQHandler+0x7a2>
 800a19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	da0c      	bge.n	800a1be <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f001 fae5 	bl	800b774 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1aa:	e008      	b.n	800a1be <HAL_UART_IRQHandler+0x7a2>
      return;
 800a1ac:	bf00      	nop
 800a1ae:	e006      	b.n	800a1be <HAL_UART_IRQHandler+0x7a2>
    return;
 800a1b0:	bf00      	nop
 800a1b2:	e004      	b.n	800a1be <HAL_UART_IRQHandler+0x7a2>
      return;
 800a1b4:	bf00      	nop
 800a1b6:	e002      	b.n	800a1be <HAL_UART_IRQHandler+0x7a2>
      return;
 800a1b8:	bf00      	nop
 800a1ba:	e000      	b.n	800a1be <HAL_UART_IRQHandler+0x7a2>
    return;
 800a1bc:	bf00      	nop
  }
}
 800a1be:	37e8      	adds	r7, #232	@ 0xe8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	effffffe 	.word	0xeffffffe

0800a1c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a21c:	b092      	sub	sp, #72	@ 0x48
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	689a      	ldr	r2, [r3, #8]
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	431a      	orrs	r2, r3
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	431a      	orrs	r2, r3
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	4bbe      	ldr	r3, [pc, #760]	@ (800a540 <UART_SetConfig+0x328>)
 800a248:	4013      	ands	r3, r2
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	6812      	ldr	r2, [r2, #0]
 800a24e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a250:	430b      	orrs	r3, r1
 800a252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4ab3      	ldr	r2, [pc, #716]	@ (800a544 <UART_SetConfig+0x32c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d004      	beq.n	800a284 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a280:	4313      	orrs	r3, r2
 800a282:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	689a      	ldr	r2, [r3, #8]
 800a28a:	4baf      	ldr	r3, [pc, #700]	@ (800a548 <UART_SetConfig+0x330>)
 800a28c:	4013      	ands	r3, r2
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	6812      	ldr	r2, [r2, #0]
 800a292:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a294:	430b      	orrs	r3, r1
 800a296:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29e:	f023 010f 	bic.w	r1, r3, #15
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4aa6      	ldr	r2, [pc, #664]	@ (800a54c <UART_SetConfig+0x334>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d177      	bne.n	800a3a8 <UART_SetConfig+0x190>
 800a2b8:	4ba5      	ldr	r3, [pc, #660]	@ (800a550 <UART_SetConfig+0x338>)
 800a2ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2c0:	2b28      	cmp	r3, #40	@ 0x28
 800a2c2:	d86d      	bhi.n	800a3a0 <UART_SetConfig+0x188>
 800a2c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2cc <UART_SetConfig+0xb4>)
 800a2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ca:	bf00      	nop
 800a2cc:	0800a371 	.word	0x0800a371
 800a2d0:	0800a3a1 	.word	0x0800a3a1
 800a2d4:	0800a3a1 	.word	0x0800a3a1
 800a2d8:	0800a3a1 	.word	0x0800a3a1
 800a2dc:	0800a3a1 	.word	0x0800a3a1
 800a2e0:	0800a3a1 	.word	0x0800a3a1
 800a2e4:	0800a3a1 	.word	0x0800a3a1
 800a2e8:	0800a3a1 	.word	0x0800a3a1
 800a2ec:	0800a379 	.word	0x0800a379
 800a2f0:	0800a3a1 	.word	0x0800a3a1
 800a2f4:	0800a3a1 	.word	0x0800a3a1
 800a2f8:	0800a3a1 	.word	0x0800a3a1
 800a2fc:	0800a3a1 	.word	0x0800a3a1
 800a300:	0800a3a1 	.word	0x0800a3a1
 800a304:	0800a3a1 	.word	0x0800a3a1
 800a308:	0800a3a1 	.word	0x0800a3a1
 800a30c:	0800a381 	.word	0x0800a381
 800a310:	0800a3a1 	.word	0x0800a3a1
 800a314:	0800a3a1 	.word	0x0800a3a1
 800a318:	0800a3a1 	.word	0x0800a3a1
 800a31c:	0800a3a1 	.word	0x0800a3a1
 800a320:	0800a3a1 	.word	0x0800a3a1
 800a324:	0800a3a1 	.word	0x0800a3a1
 800a328:	0800a3a1 	.word	0x0800a3a1
 800a32c:	0800a389 	.word	0x0800a389
 800a330:	0800a3a1 	.word	0x0800a3a1
 800a334:	0800a3a1 	.word	0x0800a3a1
 800a338:	0800a3a1 	.word	0x0800a3a1
 800a33c:	0800a3a1 	.word	0x0800a3a1
 800a340:	0800a3a1 	.word	0x0800a3a1
 800a344:	0800a3a1 	.word	0x0800a3a1
 800a348:	0800a3a1 	.word	0x0800a3a1
 800a34c:	0800a391 	.word	0x0800a391
 800a350:	0800a3a1 	.word	0x0800a3a1
 800a354:	0800a3a1 	.word	0x0800a3a1
 800a358:	0800a3a1 	.word	0x0800a3a1
 800a35c:	0800a3a1 	.word	0x0800a3a1
 800a360:	0800a3a1 	.word	0x0800a3a1
 800a364:	0800a3a1 	.word	0x0800a3a1
 800a368:	0800a3a1 	.word	0x0800a3a1
 800a36c:	0800a399 	.word	0x0800a399
 800a370:	2301      	movs	r3, #1
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a376:	e326      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a378:	2304      	movs	r3, #4
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37e:	e322      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a380:	2308      	movs	r3, #8
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a386:	e31e      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a388:	2310      	movs	r3, #16
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38e:	e31a      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a390:	2320      	movs	r3, #32
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e316      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a398:	2340      	movs	r3, #64	@ 0x40
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39e:	e312      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a3a0:	2380      	movs	r3, #128	@ 0x80
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a6:	e30e      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a69      	ldr	r2, [pc, #420]	@ (800a554 <UART_SetConfig+0x33c>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d130      	bne.n	800a414 <UART_SetConfig+0x1fc>
 800a3b2:	4b67      	ldr	r3, [pc, #412]	@ (800a550 <UART_SetConfig+0x338>)
 800a3b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b05      	cmp	r3, #5
 800a3bc:	d826      	bhi.n	800a40c <UART_SetConfig+0x1f4>
 800a3be:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c4 <UART_SetConfig+0x1ac>)
 800a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c4:	0800a3dd 	.word	0x0800a3dd
 800a3c8:	0800a3e5 	.word	0x0800a3e5
 800a3cc:	0800a3ed 	.word	0x0800a3ed
 800a3d0:	0800a3f5 	.word	0x0800a3f5
 800a3d4:	0800a3fd 	.word	0x0800a3fd
 800a3d8:	0800a405 	.word	0x0800a405
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e2:	e2f0      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a3e4:	2304      	movs	r3, #4
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ea:	e2ec      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a3ec:	2308      	movs	r3, #8
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f2:	e2e8      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a3f4:	2310      	movs	r3, #16
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fa:	e2e4      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e2e0      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a404:	2340      	movs	r3, #64	@ 0x40
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e2dc      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a40c:	2380      	movs	r3, #128	@ 0x80
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a412:	e2d8      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a4f      	ldr	r2, [pc, #316]	@ (800a558 <UART_SetConfig+0x340>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d130      	bne.n	800a480 <UART_SetConfig+0x268>
 800a41e:	4b4c      	ldr	r3, [pc, #304]	@ (800a550 <UART_SetConfig+0x338>)
 800a420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a422:	f003 0307 	and.w	r3, r3, #7
 800a426:	2b05      	cmp	r3, #5
 800a428:	d826      	bhi.n	800a478 <UART_SetConfig+0x260>
 800a42a:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <UART_SetConfig+0x218>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a449 	.word	0x0800a449
 800a434:	0800a451 	.word	0x0800a451
 800a438:	0800a459 	.word	0x0800a459
 800a43c:	0800a461 	.word	0x0800a461
 800a440:	0800a469 	.word	0x0800a469
 800a444:	0800a471 	.word	0x0800a471
 800a448:	2300      	movs	r3, #0
 800a44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44e:	e2ba      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a450:	2304      	movs	r3, #4
 800a452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a456:	e2b6      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a458:	2308      	movs	r3, #8
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45e:	e2b2      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a460:	2310      	movs	r3, #16
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a466:	e2ae      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a468:	2320      	movs	r3, #32
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46e:	e2aa      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a470:	2340      	movs	r3, #64	@ 0x40
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e2a6      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a478:	2380      	movs	r3, #128	@ 0x80
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47e:	e2a2      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a35      	ldr	r2, [pc, #212]	@ (800a55c <UART_SetConfig+0x344>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d130      	bne.n	800a4ec <UART_SetConfig+0x2d4>
 800a48a:	4b31      	ldr	r3, [pc, #196]	@ (800a550 <UART_SetConfig+0x338>)
 800a48c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a48e:	f003 0307 	and.w	r3, r3, #7
 800a492:	2b05      	cmp	r3, #5
 800a494:	d826      	bhi.n	800a4e4 <UART_SetConfig+0x2cc>
 800a496:	a201      	add	r2, pc, #4	@ (adr r2, 800a49c <UART_SetConfig+0x284>)
 800a498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49c:	0800a4b5 	.word	0x0800a4b5
 800a4a0:	0800a4bd 	.word	0x0800a4bd
 800a4a4:	0800a4c5 	.word	0x0800a4c5
 800a4a8:	0800a4cd 	.word	0x0800a4cd
 800a4ac:	0800a4d5 	.word	0x0800a4d5
 800a4b0:	0800a4dd 	.word	0x0800a4dd
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e284      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a4bc:	2304      	movs	r3, #4
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e280      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a4c4:	2308      	movs	r3, #8
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ca:	e27c      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a4cc:	2310      	movs	r3, #16
 800a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d2:	e278      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a4d4:	2320      	movs	r3, #32
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4da:	e274      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a4dc:	2340      	movs	r3, #64	@ 0x40
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e270      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a4e4:	2380      	movs	r3, #128	@ 0x80
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ea:	e26c      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a1b      	ldr	r2, [pc, #108]	@ (800a560 <UART_SetConfig+0x348>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d142      	bne.n	800a57c <UART_SetConfig+0x364>
 800a4f6:	4b16      	ldr	r3, [pc, #88]	@ (800a550 <UART_SetConfig+0x338>)
 800a4f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4fa:	f003 0307 	and.w	r3, r3, #7
 800a4fe:	2b05      	cmp	r3, #5
 800a500:	d838      	bhi.n	800a574 <UART_SetConfig+0x35c>
 800a502:	a201      	add	r2, pc, #4	@ (adr r2, 800a508 <UART_SetConfig+0x2f0>)
 800a504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a508:	0800a521 	.word	0x0800a521
 800a50c:	0800a529 	.word	0x0800a529
 800a510:	0800a531 	.word	0x0800a531
 800a514:	0800a539 	.word	0x0800a539
 800a518:	0800a565 	.word	0x0800a565
 800a51c:	0800a56d 	.word	0x0800a56d
 800a520:	2300      	movs	r3, #0
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a526:	e24e      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a528:	2304      	movs	r3, #4
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52e:	e24a      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a530:	2308      	movs	r3, #8
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a536:	e246      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a538:	2310      	movs	r3, #16
 800a53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53e:	e242      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a540:	cfff69f3 	.word	0xcfff69f3
 800a544:	58000c00 	.word	0x58000c00
 800a548:	11fff4ff 	.word	0x11fff4ff
 800a54c:	40011000 	.word	0x40011000
 800a550:	58024400 	.word	0x58024400
 800a554:	40004400 	.word	0x40004400
 800a558:	40004800 	.word	0x40004800
 800a55c:	40004c00 	.word	0x40004c00
 800a560:	40005000 	.word	0x40005000
 800a564:	2320      	movs	r3, #32
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56a:	e22c      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a56c:	2340      	movs	r3, #64	@ 0x40
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a572:	e228      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a574:	2380      	movs	r3, #128	@ 0x80
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57a:	e224      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4ab1      	ldr	r2, [pc, #708]	@ (800a848 <UART_SetConfig+0x630>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d176      	bne.n	800a674 <UART_SetConfig+0x45c>
 800a586:	4bb1      	ldr	r3, [pc, #708]	@ (800a84c <UART_SetConfig+0x634>)
 800a588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a58a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a58e:	2b28      	cmp	r3, #40	@ 0x28
 800a590:	d86c      	bhi.n	800a66c <UART_SetConfig+0x454>
 800a592:	a201      	add	r2, pc, #4	@ (adr r2, 800a598 <UART_SetConfig+0x380>)
 800a594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a598:	0800a63d 	.word	0x0800a63d
 800a59c:	0800a66d 	.word	0x0800a66d
 800a5a0:	0800a66d 	.word	0x0800a66d
 800a5a4:	0800a66d 	.word	0x0800a66d
 800a5a8:	0800a66d 	.word	0x0800a66d
 800a5ac:	0800a66d 	.word	0x0800a66d
 800a5b0:	0800a66d 	.word	0x0800a66d
 800a5b4:	0800a66d 	.word	0x0800a66d
 800a5b8:	0800a645 	.word	0x0800a645
 800a5bc:	0800a66d 	.word	0x0800a66d
 800a5c0:	0800a66d 	.word	0x0800a66d
 800a5c4:	0800a66d 	.word	0x0800a66d
 800a5c8:	0800a66d 	.word	0x0800a66d
 800a5cc:	0800a66d 	.word	0x0800a66d
 800a5d0:	0800a66d 	.word	0x0800a66d
 800a5d4:	0800a66d 	.word	0x0800a66d
 800a5d8:	0800a64d 	.word	0x0800a64d
 800a5dc:	0800a66d 	.word	0x0800a66d
 800a5e0:	0800a66d 	.word	0x0800a66d
 800a5e4:	0800a66d 	.word	0x0800a66d
 800a5e8:	0800a66d 	.word	0x0800a66d
 800a5ec:	0800a66d 	.word	0x0800a66d
 800a5f0:	0800a66d 	.word	0x0800a66d
 800a5f4:	0800a66d 	.word	0x0800a66d
 800a5f8:	0800a655 	.word	0x0800a655
 800a5fc:	0800a66d 	.word	0x0800a66d
 800a600:	0800a66d 	.word	0x0800a66d
 800a604:	0800a66d 	.word	0x0800a66d
 800a608:	0800a66d 	.word	0x0800a66d
 800a60c:	0800a66d 	.word	0x0800a66d
 800a610:	0800a66d 	.word	0x0800a66d
 800a614:	0800a66d 	.word	0x0800a66d
 800a618:	0800a65d 	.word	0x0800a65d
 800a61c:	0800a66d 	.word	0x0800a66d
 800a620:	0800a66d 	.word	0x0800a66d
 800a624:	0800a66d 	.word	0x0800a66d
 800a628:	0800a66d 	.word	0x0800a66d
 800a62c:	0800a66d 	.word	0x0800a66d
 800a630:	0800a66d 	.word	0x0800a66d
 800a634:	0800a66d 	.word	0x0800a66d
 800a638:	0800a665 	.word	0x0800a665
 800a63c:	2301      	movs	r3, #1
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a642:	e1c0      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a644:	2304      	movs	r3, #4
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64a:	e1bc      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a64c:	2308      	movs	r3, #8
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a652:	e1b8      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a654:	2310      	movs	r3, #16
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e1b4      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a65c:	2320      	movs	r3, #32
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e1b0      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a664:	2340      	movs	r3, #64	@ 0x40
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e1ac      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a66c:	2380      	movs	r3, #128	@ 0x80
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a672:	e1a8      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a75      	ldr	r2, [pc, #468]	@ (800a850 <UART_SetConfig+0x638>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d130      	bne.n	800a6e0 <UART_SetConfig+0x4c8>
 800a67e:	4b73      	ldr	r3, [pc, #460]	@ (800a84c <UART_SetConfig+0x634>)
 800a680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	2b05      	cmp	r3, #5
 800a688:	d826      	bhi.n	800a6d8 <UART_SetConfig+0x4c0>
 800a68a:	a201      	add	r2, pc, #4	@ (adr r2, 800a690 <UART_SetConfig+0x478>)
 800a68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a690:	0800a6a9 	.word	0x0800a6a9
 800a694:	0800a6b1 	.word	0x0800a6b1
 800a698:	0800a6b9 	.word	0x0800a6b9
 800a69c:	0800a6c1 	.word	0x0800a6c1
 800a6a0:	0800a6c9 	.word	0x0800a6c9
 800a6a4:	0800a6d1 	.word	0x0800a6d1
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ae:	e18a      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a6b0:	2304      	movs	r3, #4
 800a6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b6:	e186      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a6b8:	2308      	movs	r3, #8
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6be:	e182      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c6:	e17e      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ce:	e17a      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a6d0:	2340      	movs	r3, #64	@ 0x40
 800a6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d6:	e176      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a6d8:	2380      	movs	r3, #128	@ 0x80
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6de:	e172      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a5b      	ldr	r2, [pc, #364]	@ (800a854 <UART_SetConfig+0x63c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d130      	bne.n	800a74c <UART_SetConfig+0x534>
 800a6ea:	4b58      	ldr	r3, [pc, #352]	@ (800a84c <UART_SetConfig+0x634>)
 800a6ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ee:	f003 0307 	and.w	r3, r3, #7
 800a6f2:	2b05      	cmp	r3, #5
 800a6f4:	d826      	bhi.n	800a744 <UART_SetConfig+0x52c>
 800a6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6fc <UART_SetConfig+0x4e4>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a715 	.word	0x0800a715
 800a700:	0800a71d 	.word	0x0800a71d
 800a704:	0800a725 	.word	0x0800a725
 800a708:	0800a72d 	.word	0x0800a72d
 800a70c:	0800a735 	.word	0x0800a735
 800a710:	0800a73d 	.word	0x0800a73d
 800a714:	2300      	movs	r3, #0
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71a:	e154      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a71c:	2304      	movs	r3, #4
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a722:	e150      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a724:	2308      	movs	r3, #8
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72a:	e14c      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a72c:	2310      	movs	r3, #16
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a732:	e148      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a734:	2320      	movs	r3, #32
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73a:	e144      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a73c:	2340      	movs	r3, #64	@ 0x40
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e140      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a744:	2380      	movs	r3, #128	@ 0x80
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74a:	e13c      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a41      	ldr	r2, [pc, #260]	@ (800a858 <UART_SetConfig+0x640>)
 800a752:	4293      	cmp	r3, r2
 800a754:	f040 8082 	bne.w	800a85c <UART_SetConfig+0x644>
 800a758:	4b3c      	ldr	r3, [pc, #240]	@ (800a84c <UART_SetConfig+0x634>)
 800a75a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a75c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a760:	2b28      	cmp	r3, #40	@ 0x28
 800a762:	d86d      	bhi.n	800a840 <UART_SetConfig+0x628>
 800a764:	a201      	add	r2, pc, #4	@ (adr r2, 800a76c <UART_SetConfig+0x554>)
 800a766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76a:	bf00      	nop
 800a76c:	0800a811 	.word	0x0800a811
 800a770:	0800a841 	.word	0x0800a841
 800a774:	0800a841 	.word	0x0800a841
 800a778:	0800a841 	.word	0x0800a841
 800a77c:	0800a841 	.word	0x0800a841
 800a780:	0800a841 	.word	0x0800a841
 800a784:	0800a841 	.word	0x0800a841
 800a788:	0800a841 	.word	0x0800a841
 800a78c:	0800a819 	.word	0x0800a819
 800a790:	0800a841 	.word	0x0800a841
 800a794:	0800a841 	.word	0x0800a841
 800a798:	0800a841 	.word	0x0800a841
 800a79c:	0800a841 	.word	0x0800a841
 800a7a0:	0800a841 	.word	0x0800a841
 800a7a4:	0800a841 	.word	0x0800a841
 800a7a8:	0800a841 	.word	0x0800a841
 800a7ac:	0800a821 	.word	0x0800a821
 800a7b0:	0800a841 	.word	0x0800a841
 800a7b4:	0800a841 	.word	0x0800a841
 800a7b8:	0800a841 	.word	0x0800a841
 800a7bc:	0800a841 	.word	0x0800a841
 800a7c0:	0800a841 	.word	0x0800a841
 800a7c4:	0800a841 	.word	0x0800a841
 800a7c8:	0800a841 	.word	0x0800a841
 800a7cc:	0800a829 	.word	0x0800a829
 800a7d0:	0800a841 	.word	0x0800a841
 800a7d4:	0800a841 	.word	0x0800a841
 800a7d8:	0800a841 	.word	0x0800a841
 800a7dc:	0800a841 	.word	0x0800a841
 800a7e0:	0800a841 	.word	0x0800a841
 800a7e4:	0800a841 	.word	0x0800a841
 800a7e8:	0800a841 	.word	0x0800a841
 800a7ec:	0800a831 	.word	0x0800a831
 800a7f0:	0800a841 	.word	0x0800a841
 800a7f4:	0800a841 	.word	0x0800a841
 800a7f8:	0800a841 	.word	0x0800a841
 800a7fc:	0800a841 	.word	0x0800a841
 800a800:	0800a841 	.word	0x0800a841
 800a804:	0800a841 	.word	0x0800a841
 800a808:	0800a841 	.word	0x0800a841
 800a80c:	0800a839 	.word	0x0800a839
 800a810:	2301      	movs	r3, #1
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a816:	e0d6      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a818:	2304      	movs	r3, #4
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81e:	e0d2      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a820:	2308      	movs	r3, #8
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a826:	e0ce      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a828:	2310      	movs	r3, #16
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82e:	e0ca      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a830:	2320      	movs	r3, #32
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a836:	e0c6      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a838:	2340      	movs	r3, #64	@ 0x40
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83e:	e0c2      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a840:	2380      	movs	r3, #128	@ 0x80
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a846:	e0be      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a848:	40011400 	.word	0x40011400
 800a84c:	58024400 	.word	0x58024400
 800a850:	40007800 	.word	0x40007800
 800a854:	40007c00 	.word	0x40007c00
 800a858:	40011800 	.word	0x40011800
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4aad      	ldr	r2, [pc, #692]	@ (800ab18 <UART_SetConfig+0x900>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d176      	bne.n	800a954 <UART_SetConfig+0x73c>
 800a866:	4bad      	ldr	r3, [pc, #692]	@ (800ab1c <UART_SetConfig+0x904>)
 800a868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a86a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a86e:	2b28      	cmp	r3, #40	@ 0x28
 800a870:	d86c      	bhi.n	800a94c <UART_SetConfig+0x734>
 800a872:	a201      	add	r2, pc, #4	@ (adr r2, 800a878 <UART_SetConfig+0x660>)
 800a874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a878:	0800a91d 	.word	0x0800a91d
 800a87c:	0800a94d 	.word	0x0800a94d
 800a880:	0800a94d 	.word	0x0800a94d
 800a884:	0800a94d 	.word	0x0800a94d
 800a888:	0800a94d 	.word	0x0800a94d
 800a88c:	0800a94d 	.word	0x0800a94d
 800a890:	0800a94d 	.word	0x0800a94d
 800a894:	0800a94d 	.word	0x0800a94d
 800a898:	0800a925 	.word	0x0800a925
 800a89c:	0800a94d 	.word	0x0800a94d
 800a8a0:	0800a94d 	.word	0x0800a94d
 800a8a4:	0800a94d 	.word	0x0800a94d
 800a8a8:	0800a94d 	.word	0x0800a94d
 800a8ac:	0800a94d 	.word	0x0800a94d
 800a8b0:	0800a94d 	.word	0x0800a94d
 800a8b4:	0800a94d 	.word	0x0800a94d
 800a8b8:	0800a92d 	.word	0x0800a92d
 800a8bc:	0800a94d 	.word	0x0800a94d
 800a8c0:	0800a94d 	.word	0x0800a94d
 800a8c4:	0800a94d 	.word	0x0800a94d
 800a8c8:	0800a94d 	.word	0x0800a94d
 800a8cc:	0800a94d 	.word	0x0800a94d
 800a8d0:	0800a94d 	.word	0x0800a94d
 800a8d4:	0800a94d 	.word	0x0800a94d
 800a8d8:	0800a935 	.word	0x0800a935
 800a8dc:	0800a94d 	.word	0x0800a94d
 800a8e0:	0800a94d 	.word	0x0800a94d
 800a8e4:	0800a94d 	.word	0x0800a94d
 800a8e8:	0800a94d 	.word	0x0800a94d
 800a8ec:	0800a94d 	.word	0x0800a94d
 800a8f0:	0800a94d 	.word	0x0800a94d
 800a8f4:	0800a94d 	.word	0x0800a94d
 800a8f8:	0800a93d 	.word	0x0800a93d
 800a8fc:	0800a94d 	.word	0x0800a94d
 800a900:	0800a94d 	.word	0x0800a94d
 800a904:	0800a94d 	.word	0x0800a94d
 800a908:	0800a94d 	.word	0x0800a94d
 800a90c:	0800a94d 	.word	0x0800a94d
 800a910:	0800a94d 	.word	0x0800a94d
 800a914:	0800a94d 	.word	0x0800a94d
 800a918:	0800a945 	.word	0x0800a945
 800a91c:	2301      	movs	r3, #1
 800a91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a922:	e050      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a924:	2304      	movs	r3, #4
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92a:	e04c      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a92c:	2308      	movs	r3, #8
 800a92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a932:	e048      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a934:	2310      	movs	r3, #16
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93a:	e044      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a93c:	2320      	movs	r3, #32
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a942:	e040      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a944:	2340      	movs	r3, #64	@ 0x40
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94a:	e03c      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a94c:	2380      	movs	r3, #128	@ 0x80
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a952:	e038      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a71      	ldr	r2, [pc, #452]	@ (800ab20 <UART_SetConfig+0x908>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d130      	bne.n	800a9c0 <UART_SetConfig+0x7a8>
 800a95e:	4b6f      	ldr	r3, [pc, #444]	@ (800ab1c <UART_SetConfig+0x904>)
 800a960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a962:	f003 0307 	and.w	r3, r3, #7
 800a966:	2b05      	cmp	r3, #5
 800a968:	d826      	bhi.n	800a9b8 <UART_SetConfig+0x7a0>
 800a96a:	a201      	add	r2, pc, #4	@ (adr r2, 800a970 <UART_SetConfig+0x758>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a989 	.word	0x0800a989
 800a974:	0800a991 	.word	0x0800a991
 800a978:	0800a999 	.word	0x0800a999
 800a97c:	0800a9a1 	.word	0x0800a9a1
 800a980:	0800a9a9 	.word	0x0800a9a9
 800a984:	0800a9b1 	.word	0x0800a9b1
 800a988:	2302      	movs	r3, #2
 800a98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a98e:	e01a      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a990:	2304      	movs	r3, #4
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a996:	e016      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a998:	2308      	movs	r3, #8
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a99e:	e012      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a9a0:	2310      	movs	r3, #16
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9a6:	e00e      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a9a8:	2320      	movs	r3, #32
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ae:	e00a      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a9b0:	2340      	movs	r3, #64	@ 0x40
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9b6:	e006      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a9b8:	2380      	movs	r3, #128	@ 0x80
 800a9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9be:	e002      	b.n	800a9c6 <UART_SetConfig+0x7ae>
 800a9c0:	2380      	movs	r3, #128	@ 0x80
 800a9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a55      	ldr	r2, [pc, #340]	@ (800ab20 <UART_SetConfig+0x908>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	f040 80f8 	bne.w	800abc2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9d6:	2b20      	cmp	r3, #32
 800a9d8:	dc46      	bgt.n	800aa68 <UART_SetConfig+0x850>
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	db75      	blt.n	800aaca <UART_SetConfig+0x8b2>
 800a9de:	3b02      	subs	r3, #2
 800a9e0:	2b1e      	cmp	r3, #30
 800a9e2:	d872      	bhi.n	800aaca <UART_SetConfig+0x8b2>
 800a9e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a9ec <UART_SetConfig+0x7d4>)
 800a9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ea:	bf00      	nop
 800a9ec:	0800aa6f 	.word	0x0800aa6f
 800a9f0:	0800aacb 	.word	0x0800aacb
 800a9f4:	0800aa77 	.word	0x0800aa77
 800a9f8:	0800aacb 	.word	0x0800aacb
 800a9fc:	0800aacb 	.word	0x0800aacb
 800aa00:	0800aacb 	.word	0x0800aacb
 800aa04:	0800aa87 	.word	0x0800aa87
 800aa08:	0800aacb 	.word	0x0800aacb
 800aa0c:	0800aacb 	.word	0x0800aacb
 800aa10:	0800aacb 	.word	0x0800aacb
 800aa14:	0800aacb 	.word	0x0800aacb
 800aa18:	0800aacb 	.word	0x0800aacb
 800aa1c:	0800aacb 	.word	0x0800aacb
 800aa20:	0800aacb 	.word	0x0800aacb
 800aa24:	0800aa97 	.word	0x0800aa97
 800aa28:	0800aacb 	.word	0x0800aacb
 800aa2c:	0800aacb 	.word	0x0800aacb
 800aa30:	0800aacb 	.word	0x0800aacb
 800aa34:	0800aacb 	.word	0x0800aacb
 800aa38:	0800aacb 	.word	0x0800aacb
 800aa3c:	0800aacb 	.word	0x0800aacb
 800aa40:	0800aacb 	.word	0x0800aacb
 800aa44:	0800aacb 	.word	0x0800aacb
 800aa48:	0800aacb 	.word	0x0800aacb
 800aa4c:	0800aacb 	.word	0x0800aacb
 800aa50:	0800aacb 	.word	0x0800aacb
 800aa54:	0800aacb 	.word	0x0800aacb
 800aa58:	0800aacb 	.word	0x0800aacb
 800aa5c:	0800aacb 	.word	0x0800aacb
 800aa60:	0800aacb 	.word	0x0800aacb
 800aa64:	0800aabd 	.word	0x0800aabd
 800aa68:	2b40      	cmp	r3, #64	@ 0x40
 800aa6a:	d02a      	beq.n	800aac2 <UART_SetConfig+0x8aa>
 800aa6c:	e02d      	b.n	800aaca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa6e:	f7fd fe25 	bl	80086bc <HAL_RCCEx_GetD3PCLK1Freq>
 800aa72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa74:	e02f      	b.n	800aad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fd fe34 	bl	80086e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa84:	e027      	b.n	800aad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa86:	f107 0318 	add.w	r3, r7, #24
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fd ff80 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa94:	e01f      	b.n	800aad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa96:	4b21      	ldr	r3, [pc, #132]	@ (800ab1c <UART_SetConfig+0x904>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 0320 	and.w	r3, r3, #32
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d009      	beq.n	800aab6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aaa2:	4b1e      	ldr	r3, [pc, #120]	@ (800ab1c <UART_SetConfig+0x904>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	08db      	lsrs	r3, r3, #3
 800aaa8:	f003 0303 	and.w	r3, r3, #3
 800aaac:	4a1d      	ldr	r2, [pc, #116]	@ (800ab24 <UART_SetConfig+0x90c>)
 800aaae:	fa22 f303 	lsr.w	r3, r2, r3
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aab4:	e00f      	b.n	800aad6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aab6:	4b1b      	ldr	r3, [pc, #108]	@ (800ab24 <UART_SetConfig+0x90c>)
 800aab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaba:	e00c      	b.n	800aad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aabc:	4b1a      	ldr	r3, [pc, #104]	@ (800ab28 <UART_SetConfig+0x910>)
 800aabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac0:	e009      	b.n	800aad6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac8:	e005      	b.n	800aad6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aaca:	2300      	movs	r3, #0
 800aacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aad4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 81ee 	beq.w	800aeba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae2:	4a12      	ldr	r2, [pc, #72]	@ (800ab2c <UART_SetConfig+0x914>)
 800aae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aae8:	461a      	mov	r2, r3
 800aaea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaec:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaf0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	4413      	add	r3, r2
 800aafc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d305      	bcc.n	800ab0e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d910      	bls.n	800ab30 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab14:	e1d1      	b.n	800aeba <UART_SetConfig+0xca2>
 800ab16:	bf00      	nop
 800ab18:	40011c00 	.word	0x40011c00
 800ab1c:	58024400 	.word	0x58024400
 800ab20:	58000c00 	.word	0x58000c00
 800ab24:	03d09000 	.word	0x03d09000
 800ab28:	003d0900 	.word	0x003d0900
 800ab2c:	0800eff4 	.word	0x0800eff4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab32:	2200      	movs	r2, #0
 800ab34:	60bb      	str	r3, [r7, #8]
 800ab36:	60fa      	str	r2, [r7, #12]
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3c:	4ac0      	ldr	r2, [pc, #768]	@ (800ae40 <UART_SetConfig+0xc28>)
 800ab3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	2200      	movs	r2, #0
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	607a      	str	r2, [r7, #4]
 800ab4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab52:	f7f5 fc75 	bl	8000440 <__aeabi_uldivmod>
 800ab56:	4602      	mov	r2, r0
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4610      	mov	r0, r2
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	f04f 0200 	mov.w	r2, #0
 800ab62:	f04f 0300 	mov.w	r3, #0
 800ab66:	020b      	lsls	r3, r1, #8
 800ab68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab6c:	0202      	lsls	r2, r0, #8
 800ab6e:	6979      	ldr	r1, [r7, #20]
 800ab70:	6849      	ldr	r1, [r1, #4]
 800ab72:	0849      	lsrs	r1, r1, #1
 800ab74:	2000      	movs	r0, #0
 800ab76:	460c      	mov	r4, r1
 800ab78:	4605      	mov	r5, r0
 800ab7a:	eb12 0804 	adds.w	r8, r2, r4
 800ab7e:	eb43 0905 	adc.w	r9, r3, r5
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	469a      	mov	sl, r3
 800ab8a:	4693      	mov	fp, r2
 800ab8c:	4652      	mov	r2, sl
 800ab8e:	465b      	mov	r3, fp
 800ab90:	4640      	mov	r0, r8
 800ab92:	4649      	mov	r1, r9
 800ab94:	f7f5 fc54 	bl	8000440 <__aeabi_uldivmod>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aba6:	d308      	bcc.n	800abba <UART_SetConfig+0x9a2>
 800aba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abae:	d204      	bcs.n	800abba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abb6:	60da      	str	r2, [r3, #12]
 800abb8:	e17f      	b.n	800aeba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800abc0:	e17b      	b.n	800aeba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abca:	f040 80bd 	bne.w	800ad48 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800abce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abd2:	2b20      	cmp	r3, #32
 800abd4:	dc48      	bgt.n	800ac68 <UART_SetConfig+0xa50>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	db7b      	blt.n	800acd2 <UART_SetConfig+0xaba>
 800abda:	2b20      	cmp	r3, #32
 800abdc:	d879      	bhi.n	800acd2 <UART_SetConfig+0xaba>
 800abde:	a201      	add	r2, pc, #4	@ (adr r2, 800abe4 <UART_SetConfig+0x9cc>)
 800abe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe4:	0800ac6f 	.word	0x0800ac6f
 800abe8:	0800ac77 	.word	0x0800ac77
 800abec:	0800acd3 	.word	0x0800acd3
 800abf0:	0800acd3 	.word	0x0800acd3
 800abf4:	0800ac7f 	.word	0x0800ac7f
 800abf8:	0800acd3 	.word	0x0800acd3
 800abfc:	0800acd3 	.word	0x0800acd3
 800ac00:	0800acd3 	.word	0x0800acd3
 800ac04:	0800ac8f 	.word	0x0800ac8f
 800ac08:	0800acd3 	.word	0x0800acd3
 800ac0c:	0800acd3 	.word	0x0800acd3
 800ac10:	0800acd3 	.word	0x0800acd3
 800ac14:	0800acd3 	.word	0x0800acd3
 800ac18:	0800acd3 	.word	0x0800acd3
 800ac1c:	0800acd3 	.word	0x0800acd3
 800ac20:	0800acd3 	.word	0x0800acd3
 800ac24:	0800ac9f 	.word	0x0800ac9f
 800ac28:	0800acd3 	.word	0x0800acd3
 800ac2c:	0800acd3 	.word	0x0800acd3
 800ac30:	0800acd3 	.word	0x0800acd3
 800ac34:	0800acd3 	.word	0x0800acd3
 800ac38:	0800acd3 	.word	0x0800acd3
 800ac3c:	0800acd3 	.word	0x0800acd3
 800ac40:	0800acd3 	.word	0x0800acd3
 800ac44:	0800acd3 	.word	0x0800acd3
 800ac48:	0800acd3 	.word	0x0800acd3
 800ac4c:	0800acd3 	.word	0x0800acd3
 800ac50:	0800acd3 	.word	0x0800acd3
 800ac54:	0800acd3 	.word	0x0800acd3
 800ac58:	0800acd3 	.word	0x0800acd3
 800ac5c:	0800acd3 	.word	0x0800acd3
 800ac60:	0800acd3 	.word	0x0800acd3
 800ac64:	0800acc5 	.word	0x0800acc5
 800ac68:	2b40      	cmp	r3, #64	@ 0x40
 800ac6a:	d02e      	beq.n	800acca <UART_SetConfig+0xab2>
 800ac6c:	e031      	b.n	800acd2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac6e:	f7fc fb3b 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 800ac72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac74:	e033      	b.n	800acde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac76:	f7fc fb4d 	bl	8007314 <HAL_RCC_GetPCLK2Freq>
 800ac7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac7c:	e02f      	b.n	800acde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fd fd30 	bl	80086e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac8c:	e027      	b.n	800acde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac8e:	f107 0318 	add.w	r3, r7, #24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fd fe7c 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac9c:	e01f      	b.n	800acde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac9e:	4b69      	ldr	r3, [pc, #420]	@ (800ae44 <UART_SetConfig+0xc2c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0320 	and.w	r3, r3, #32
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d009      	beq.n	800acbe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acaa:	4b66      	ldr	r3, [pc, #408]	@ (800ae44 <UART_SetConfig+0xc2c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	08db      	lsrs	r3, r3, #3
 800acb0:	f003 0303 	and.w	r3, r3, #3
 800acb4:	4a64      	ldr	r2, [pc, #400]	@ (800ae48 <UART_SetConfig+0xc30>)
 800acb6:	fa22 f303 	lsr.w	r3, r2, r3
 800acba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acbc:	e00f      	b.n	800acde <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800acbe:	4b62      	ldr	r3, [pc, #392]	@ (800ae48 <UART_SetConfig+0xc30>)
 800acc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc2:	e00c      	b.n	800acde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acc4:	4b61      	ldr	r3, [pc, #388]	@ (800ae4c <UART_SetConfig+0xc34>)
 800acc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc8:	e009      	b.n	800acde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd0:	e005      	b.n	800acde <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800acd2:	2300      	movs	r3, #0
 800acd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800acdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 80ea 	beq.w	800aeba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acea:	4a55      	ldr	r2, [pc, #340]	@ (800ae40 <UART_SetConfig+0xc28>)
 800acec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acf0:	461a      	mov	r2, r3
 800acf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800acf8:	005a      	lsls	r2, r3, #1
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	085b      	lsrs	r3, r3, #1
 800ad00:	441a      	add	r2, r3
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0e:	2b0f      	cmp	r3, #15
 800ad10:	d916      	bls.n	800ad40 <UART_SetConfig+0xb28>
 800ad12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad18:	d212      	bcs.n	800ad40 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	f023 030f 	bic.w	r3, r3, #15
 800ad22:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad26:	085b      	lsrs	r3, r3, #1
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	f003 0307 	and.w	r3, r3, #7
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad32:	4313      	orrs	r3, r2
 800ad34:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ad3c:	60da      	str	r2, [r3, #12]
 800ad3e:	e0bc      	b.n	800aeba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ad46:	e0b8      	b.n	800aeba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad4c:	2b20      	cmp	r3, #32
 800ad4e:	dc4b      	bgt.n	800ade8 <UART_SetConfig+0xbd0>
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f2c0 8087 	blt.w	800ae64 <UART_SetConfig+0xc4c>
 800ad56:	2b20      	cmp	r3, #32
 800ad58:	f200 8084 	bhi.w	800ae64 <UART_SetConfig+0xc4c>
 800ad5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad64 <UART_SetConfig+0xb4c>)
 800ad5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad62:	bf00      	nop
 800ad64:	0800adef 	.word	0x0800adef
 800ad68:	0800adf7 	.word	0x0800adf7
 800ad6c:	0800ae65 	.word	0x0800ae65
 800ad70:	0800ae65 	.word	0x0800ae65
 800ad74:	0800adff 	.word	0x0800adff
 800ad78:	0800ae65 	.word	0x0800ae65
 800ad7c:	0800ae65 	.word	0x0800ae65
 800ad80:	0800ae65 	.word	0x0800ae65
 800ad84:	0800ae0f 	.word	0x0800ae0f
 800ad88:	0800ae65 	.word	0x0800ae65
 800ad8c:	0800ae65 	.word	0x0800ae65
 800ad90:	0800ae65 	.word	0x0800ae65
 800ad94:	0800ae65 	.word	0x0800ae65
 800ad98:	0800ae65 	.word	0x0800ae65
 800ad9c:	0800ae65 	.word	0x0800ae65
 800ada0:	0800ae65 	.word	0x0800ae65
 800ada4:	0800ae1f 	.word	0x0800ae1f
 800ada8:	0800ae65 	.word	0x0800ae65
 800adac:	0800ae65 	.word	0x0800ae65
 800adb0:	0800ae65 	.word	0x0800ae65
 800adb4:	0800ae65 	.word	0x0800ae65
 800adb8:	0800ae65 	.word	0x0800ae65
 800adbc:	0800ae65 	.word	0x0800ae65
 800adc0:	0800ae65 	.word	0x0800ae65
 800adc4:	0800ae65 	.word	0x0800ae65
 800adc8:	0800ae65 	.word	0x0800ae65
 800adcc:	0800ae65 	.word	0x0800ae65
 800add0:	0800ae65 	.word	0x0800ae65
 800add4:	0800ae65 	.word	0x0800ae65
 800add8:	0800ae65 	.word	0x0800ae65
 800addc:	0800ae65 	.word	0x0800ae65
 800ade0:	0800ae65 	.word	0x0800ae65
 800ade4:	0800ae57 	.word	0x0800ae57
 800ade8:	2b40      	cmp	r3, #64	@ 0x40
 800adea:	d037      	beq.n	800ae5c <UART_SetConfig+0xc44>
 800adec:	e03a      	b.n	800ae64 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adee:	f7fc fa7b 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 800adf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adf4:	e03c      	b.n	800ae70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adf6:	f7fc fa8d 	bl	8007314 <HAL_RCC_GetPCLK2Freq>
 800adfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adfc:	e038      	b.n	800ae70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fd fc70 	bl	80086e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae0c:	e030      	b.n	800ae70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae0e:	f107 0318 	add.w	r3, r7, #24
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fd fdbc 	bl	8008990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae1c:	e028      	b.n	800ae70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae1e:	4b09      	ldr	r3, [pc, #36]	@ (800ae44 <UART_SetConfig+0xc2c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 0320 	and.w	r3, r3, #32
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d012      	beq.n	800ae50 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae2a:	4b06      	ldr	r3, [pc, #24]	@ (800ae44 <UART_SetConfig+0xc2c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	08db      	lsrs	r3, r3, #3
 800ae30:	f003 0303 	and.w	r3, r3, #3
 800ae34:	4a04      	ldr	r2, [pc, #16]	@ (800ae48 <UART_SetConfig+0xc30>)
 800ae36:	fa22 f303 	lsr.w	r3, r2, r3
 800ae3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae3c:	e018      	b.n	800ae70 <UART_SetConfig+0xc58>
 800ae3e:	bf00      	nop
 800ae40:	0800eff4 	.word	0x0800eff4
 800ae44:	58024400 	.word	0x58024400
 800ae48:	03d09000 	.word	0x03d09000
 800ae4c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ae50:	4b24      	ldr	r3, [pc, #144]	@ (800aee4 <UART_SetConfig+0xccc>)
 800ae52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae54:	e00c      	b.n	800ae70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae56:	4b24      	ldr	r3, [pc, #144]	@ (800aee8 <UART_SetConfig+0xcd0>)
 800ae58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae5a:	e009      	b.n	800ae70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae62:	e005      	b.n	800ae70 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ae6e:	bf00      	nop
    }

    if (pclk != 0U)
 800ae70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d021      	beq.n	800aeba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae7a:	4a1c      	ldr	r2, [pc, #112]	@ (800aeec <UART_SetConfig+0xcd4>)
 800ae7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae80:	461a      	mov	r2, r3
 800ae82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae84:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	085b      	lsrs	r3, r3, #1
 800ae8e:	441a      	add	r2, r3
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae98:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9c:	2b0f      	cmp	r3, #15
 800ae9e:	d909      	bls.n	800aeb4 <UART_SetConfig+0xc9c>
 800aea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aea6:	d205      	bcs.n	800aeb4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	60da      	str	r2, [r3, #12]
 800aeb2:	e002      	b.n	800aeba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2200      	movs	r2, #0
 800aece:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	2200      	movs	r2, #0
 800aed4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aed6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3748      	adds	r7, #72	@ 0x48
 800aede:	46bd      	mov	sp, r7
 800aee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aee4:	03d09000 	.word	0x03d09000
 800aee8:	003d0900 	.word	0x003d0900
 800aeec:	0800eff4 	.word	0x0800eff4

0800aef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefc:	f003 0308 	and.w	r3, r3, #8
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00a      	beq.n	800af1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	430a      	orrs	r2, r1
 800af18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00a      	beq.n	800af3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	430a      	orrs	r2, r1
 800af3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00a      	beq.n	800af5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	430a      	orrs	r2, r1
 800af5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00a      	beq.n	800af80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	430a      	orrs	r2, r1
 800af7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af84:	f003 0310 	and.w	r3, r3, #16
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00a      	beq.n	800afa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	430a      	orrs	r2, r1
 800afa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa6:	f003 0320 	and.w	r3, r3, #32
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00a      	beq.n	800afc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	430a      	orrs	r2, r1
 800afc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d01a      	beq.n	800b006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afee:	d10a      	bne.n	800b006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	430a      	orrs	r2, r1
 800b004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b00a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00a      	beq.n	800b028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	430a      	orrs	r2, r1
 800b026:	605a      	str	r2, [r3, #4]
  }
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b098      	sub	sp, #96	@ 0x60
 800b038:	af02      	add	r7, sp, #8
 800b03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b044:	f7f6 ffa8 	bl	8001f98 <HAL_GetTick>
 800b048:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0308 	and.w	r3, r3, #8
 800b054:	2b08      	cmp	r3, #8
 800b056:	d12f      	bne.n	800b0b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b060:	2200      	movs	r2, #0
 800b062:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f88e 	bl	800b188 <UART_WaitOnFlagUntilTimeout>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d022      	beq.n	800b0b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07a:	e853 3f00 	ldrex	r3, [r3]
 800b07e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b086:	653b      	str	r3, [r7, #80]	@ 0x50
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	461a      	mov	r2, r3
 800b08e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b090:	647b      	str	r3, [r7, #68]	@ 0x44
 800b092:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b098:	e841 2300 	strex	r3, r2, [r1]
 800b09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e6      	bne.n	800b072 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2220      	movs	r2, #32
 800b0a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e063      	b.n	800b180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 0304 	and.w	r3, r3, #4
 800b0c2:	2b04      	cmp	r3, #4
 800b0c4:	d149      	bne.n	800b15a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f857 	bl	800b188 <UART_WaitOnFlagUntilTimeout>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d03c      	beq.n	800b15a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800b100:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b106:	e841 2300 	strex	r3, r2, [r1]
 800b10a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e6      	bne.n	800b0e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3308      	adds	r3, #8
 800b118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	e853 3f00 	ldrex	r3, [r3]
 800b120:	60fb      	str	r3, [r7, #12]
   return(result);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f023 0301 	bic.w	r3, r3, #1
 800b128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3308      	adds	r3, #8
 800b130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b132:	61fa      	str	r2, [r7, #28]
 800b134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b136:	69b9      	ldr	r1, [r7, #24]
 800b138:	69fa      	ldr	r2, [r7, #28]
 800b13a:	e841 2300 	strex	r3, r2, [r1]
 800b13e:	617b      	str	r3, [r7, #20]
   return(result);
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1e5      	bne.n	800b112 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2220      	movs	r2, #32
 800b14a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b156:	2303      	movs	r3, #3
 800b158:	e012      	b.n	800b180 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2220      	movs	r2, #32
 800b15e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2220      	movs	r2, #32
 800b166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3758      	adds	r7, #88	@ 0x58
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	603b      	str	r3, [r7, #0]
 800b194:	4613      	mov	r3, r2
 800b196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b198:	e04f      	b.n	800b23a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a0:	d04b      	beq.n	800b23a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1a2:	f7f6 fef9 	bl	8001f98 <HAL_GetTick>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	69ba      	ldr	r2, [r7, #24]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d302      	bcc.n	800b1b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e04e      	b.n	800b25a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 0304 	and.w	r3, r3, #4
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d037      	beq.n	800b23a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2b80      	cmp	r3, #128	@ 0x80
 800b1ce:	d034      	beq.n	800b23a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2b40      	cmp	r3, #64	@ 0x40
 800b1d4:	d031      	beq.n	800b23a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	69db      	ldr	r3, [r3, #28]
 800b1dc:	f003 0308 	and.w	r3, r3, #8
 800b1e0:	2b08      	cmp	r3, #8
 800b1e2:	d110      	bne.n	800b206 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2208      	movs	r2, #8
 800b1ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 f921 	bl	800b434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2208      	movs	r2, #8
 800b1f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e029      	b.n	800b25a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	69db      	ldr	r3, [r3, #28]
 800b20c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b214:	d111      	bne.n	800b23a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b21e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 f907 	bl	800b434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2220      	movs	r2, #32
 800b22a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b236:	2303      	movs	r3, #3
 800b238:	e00f      	b.n	800b25a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	69da      	ldr	r2, [r3, #28]
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	4013      	ands	r3, r2
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	429a      	cmp	r2, r3
 800b248:	bf0c      	ite	eq
 800b24a:	2301      	moveq	r3, #1
 800b24c:	2300      	movne	r3, #0
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	461a      	mov	r2, r3
 800b252:	79fb      	ldrb	r3, [r7, #7]
 800b254:	429a      	cmp	r2, r3
 800b256:	d0a0      	beq.n	800b19a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b096      	sub	sp, #88	@ 0x58
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	4613      	mov	r3, r2
 800b270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	88fa      	ldrh	r2, [r7, #6]
 800b27c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2222      	movs	r2, #34	@ 0x22
 800b28c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b296:	2b00      	cmp	r3, #0
 800b298:	d02d      	beq.n	800b2f6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2a0:	4a40      	ldr	r2, [pc, #256]	@ (800b3a4 <UART_Start_Receive_DMA+0x140>)
 800b2a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2aa:	4a3f      	ldr	r2, [pc, #252]	@ (800b3a8 <UART_Start_Receive_DMA+0x144>)
 800b2ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2b4:	4a3d      	ldr	r2, [pc, #244]	@ (800b3ac <UART_Start_Receive_DMA+0x148>)
 800b2b6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2be:	2200      	movs	r2, #0
 800b2c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3324      	adds	r3, #36	@ 0x24
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	88fb      	ldrh	r3, [r7, #6]
 800b2d8:	f7f7 fba4 	bl	8002a24 <HAL_DMA_Start_IT>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d009      	beq.n	800b2f6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2210      	movs	r2, #16
 800b2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2220      	movs	r2, #32
 800b2ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e051      	b.n	800b39a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d018      	beq.n	800b330 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b306:	e853 3f00 	ldrex	r3, [r3]
 800b30a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b312:	657b      	str	r3, [r7, #84]	@ 0x54
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	461a      	mov	r2, r3
 800b31a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b31c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b31e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b320:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b324:	e841 2300 	strex	r3, r2, [r1]
 800b328:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b32a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1e6      	bne.n	800b2fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3308      	adds	r3, #8
 800b336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33a:	e853 3f00 	ldrex	r3, [r3]
 800b33e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b342:	f043 0301 	orr.w	r3, r3, #1
 800b346:	653b      	str	r3, [r7, #80]	@ 0x50
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	3308      	adds	r3, #8
 800b34e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b350:	637a      	str	r2, [r7, #52]	@ 0x34
 800b352:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b354:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b358:	e841 2300 	strex	r3, r2, [r1]
 800b35c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1e5      	bne.n	800b330 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3308      	adds	r3, #8
 800b36a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	e853 3f00 	ldrex	r3, [r3]
 800b372:	613b      	str	r3, [r7, #16]
   return(result);
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b37a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3308      	adds	r3, #8
 800b382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b384:	623a      	str	r2, [r7, #32]
 800b386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b388:	69f9      	ldr	r1, [r7, #28]
 800b38a:	6a3a      	ldr	r2, [r7, #32]
 800b38c:	e841 2300 	strex	r3, r2, [r1]
 800b390:	61bb      	str	r3, [r7, #24]
   return(result);
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1e5      	bne.n	800b364 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3758      	adds	r7, #88	@ 0x58
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	0800b501 	.word	0x0800b501
 800b3a8:	0800b629 	.word	0x0800b629
 800b3ac:	0800b667 	.word	0x0800b667

0800b3b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b08f      	sub	sp, #60	@ 0x3c
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	e853 3f00 	ldrex	r3, [r3]
 800b3c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b3cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3d8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3de:	e841 2300 	strex	r3, r2, [r1]
 800b3e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1e6      	bne.n	800b3b8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	e853 3f00 	ldrex	r3, [r3]
 800b3f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b400:	633b      	str	r3, [r7, #48]	@ 0x30
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3308      	adds	r3, #8
 800b408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b40a:	61ba      	str	r2, [r7, #24]
 800b40c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40e:	6979      	ldr	r1, [r7, #20]
 800b410:	69ba      	ldr	r2, [r7, #24]
 800b412:	e841 2300 	strex	r3, r2, [r1]
 800b416:	613b      	str	r3, [r7, #16]
   return(result);
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1e5      	bne.n	800b3ea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2220      	movs	r2, #32
 800b422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b426:	bf00      	nop
 800b428:	373c      	adds	r7, #60	@ 0x3c
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
	...

0800b434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b434:	b480      	push	{r7}
 800b436:	b095      	sub	sp, #84	@ 0x54
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b444:	e853 3f00 	ldrex	r3, [r3]
 800b448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b45a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b45c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b462:	e841 2300 	strex	r3, r2, [r1]
 800b466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1e6      	bne.n	800b43c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3308      	adds	r3, #8
 800b474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b476:	6a3b      	ldr	r3, [r7, #32]
 800b478:	e853 3f00 	ldrex	r3, [r3]
 800b47c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b47e:	69fa      	ldr	r2, [r7, #28]
 800b480:	4b1e      	ldr	r3, [pc, #120]	@ (800b4fc <UART_EndRxTransfer+0xc8>)
 800b482:	4013      	ands	r3, r2
 800b484:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3308      	adds	r3, #8
 800b48c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b48e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b496:	e841 2300 	strex	r3, r2, [r1]
 800b49a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1e5      	bne.n	800b46e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d118      	bne.n	800b4dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	e853 3f00 	ldrex	r3, [r3]
 800b4b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f023 0310 	bic.w	r3, r3, #16
 800b4be:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4c8:	61bb      	str	r3, [r7, #24]
 800b4ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4cc:	6979      	ldr	r1, [r7, #20]
 800b4ce:	69ba      	ldr	r2, [r7, #24]
 800b4d0:	e841 2300 	strex	r3, r2, [r1]
 800b4d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1e6      	bne.n	800b4aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2220      	movs	r2, #32
 800b4e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b4f0:	bf00      	nop
 800b4f2:	3754      	adds	r7, #84	@ 0x54
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	effffffe 	.word	0xeffffffe

0800b500 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b09c      	sub	sp, #112	@ 0x70
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b516:	d071      	beq.n	800b5fc <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b528:	e853 3f00 	ldrex	r3, [r3]
 800b52c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b52e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b534:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	461a      	mov	r2, r3
 800b53c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b53e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b540:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b542:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b544:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b546:	e841 2300 	strex	r3, r2, [r1]
 800b54a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b54c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1e6      	bne.n	800b520 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3308      	adds	r3, #8
 800b558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55c:	e853 3f00 	ldrex	r3, [r3]
 800b560:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b564:	f023 0301 	bic.w	r3, r3, #1
 800b568:	667b      	str	r3, [r7, #100]	@ 0x64
 800b56a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	3308      	adds	r3, #8
 800b570:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b572:	647a      	str	r2, [r7, #68]	@ 0x44
 800b574:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b576:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b578:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b57a:	e841 2300 	strex	r3, r2, [r1]
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1e5      	bne.n	800b552 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3308      	adds	r3, #8
 800b58c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b590:	e853 3f00 	ldrex	r3, [r3]
 800b594:	623b      	str	r3, [r7, #32]
   return(result);
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b59c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b59e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	3308      	adds	r3, #8
 800b5a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b5a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b5a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5ae:	e841 2300 	strex	r3, r2, [r1]
 800b5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1e5      	bne.n	800b586 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b5ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5bc:	2220      	movs	r2, #32
 800b5be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d118      	bne.n	800b5fc <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	e853 3f00 	ldrex	r3, [r3]
 800b5d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f023 0310 	bic.w	r3, r3, #16
 800b5de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b5e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5e8:	61fb      	str	r3, [r7, #28]
 800b5ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ec:	69b9      	ldr	r1, [r7, #24]
 800b5ee:	69fa      	ldr	r2, [r7, #28]
 800b5f0:	e841 2300 	strex	r3, r2, [r1]
 800b5f4:	617b      	str	r3, [r7, #20]
   return(result);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e6      	bne.n	800b5ca <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5fe:	2200      	movs	r2, #0
 800b600:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b606:	2b01      	cmp	r3, #1
 800b608:	d107      	bne.n	800b61a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b60a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b60c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b610:	4619      	mov	r1, r3
 800b612:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b614:	f7f5 fd0c 	bl	8001030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b618:	e002      	b.n	800b620 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b61a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b61c:	f7fe fdde 	bl	800a1dc <HAL_UART_RxCpltCallback>
}
 800b620:	bf00      	nop
 800b622:	3770      	adds	r7, #112	@ 0x70
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b634:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2201      	movs	r2, #1
 800b63a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b640:	2b01      	cmp	r3, #1
 800b642:	d109      	bne.n	800b658 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b64a:	085b      	lsrs	r3, r3, #1
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	4619      	mov	r1, r3
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7f5 fced 	bl	8001030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b656:	e002      	b.n	800b65e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f7fe fdc9 	bl	800a1f0 <HAL_UART_RxHalfCpltCallback>
}
 800b65e:	bf00      	nop
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b086      	sub	sp, #24
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b672:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b67a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b682:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b68e:	2b80      	cmp	r3, #128	@ 0x80
 800b690:	d109      	bne.n	800b6a6 <UART_DMAError+0x40>
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	2b21      	cmp	r3, #33	@ 0x21
 800b696:	d106      	bne.n	800b6a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b6a0:	6978      	ldr	r0, [r7, #20]
 800b6a2:	f7ff fe85 	bl	800b3b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6b0:	2b40      	cmp	r3, #64	@ 0x40
 800b6b2:	d109      	bne.n	800b6c8 <UART_DMAError+0x62>
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b22      	cmp	r3, #34	@ 0x22
 800b6b8:	d106      	bne.n	800b6c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b6c2:	6978      	ldr	r0, [r7, #20]
 800b6c4:	f7ff feb6 	bl	800b434 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ce:	f043 0210 	orr.w	r2, r3, #16
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6d8:	6978      	ldr	r0, [r7, #20]
 800b6da:	f7fe fd93 	bl	800a204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6de:	bf00      	nop
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b084      	sub	sp, #16
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f7fe fd81 	bl	800a204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b702:	bf00      	nop
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b088      	sub	sp, #32
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	e853 3f00 	ldrex	r3, [r3]
 800b71e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b726:	61fb      	str	r3, [r7, #28]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	461a      	mov	r2, r3
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	61bb      	str	r3, [r7, #24]
 800b732:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b734:	6979      	ldr	r1, [r7, #20]
 800b736:	69ba      	ldr	r2, [r7, #24]
 800b738:	e841 2300 	strex	r3, r2, [r1]
 800b73c:	613b      	str	r3, [r7, #16]
   return(result);
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e6      	bne.n	800b712 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2220      	movs	r2, #32
 800b748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7fe fd38 	bl	800a1c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b758:	bf00      	nop
 800b75a:	3720      	adds	r7, #32
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d101      	bne.n	800b7b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	e027      	b.n	800b802 <HAL_UARTEx_DisableFifoMode+0x66>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2224      	movs	r2, #36	@ 0x24
 800b7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f022 0201 	bic.w	r2, r2, #1
 800b7d8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b7e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d101      	bne.n	800b826 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b822:	2302      	movs	r3, #2
 800b824:	e02d      	b.n	800b882 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2224      	movs	r2, #36	@ 0x24
 800b832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f022 0201 	bic.w	r2, r2, #1
 800b84c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	430a      	orrs	r2, r1
 800b860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f8a4 	bl	800b9b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2220      	movs	r2, #32
 800b874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b084      	sub	sp, #16
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d101      	bne.n	800b8a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b89e:	2302      	movs	r3, #2
 800b8a0:	e02d      	b.n	800b8fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2224      	movs	r2, #36	@ 0x24
 800b8ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f022 0201 	bic.w	r2, r2, #1
 800b8c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	430a      	orrs	r2, r1
 800b8dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f866 	bl	800b9b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b08c      	sub	sp, #48	@ 0x30
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	60f8      	str	r0, [r7, #12]
 800b90e:	60b9      	str	r1, [r7, #8]
 800b910:	4613      	mov	r3, r2
 800b912:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b91a:	2b20      	cmp	r3, #32
 800b91c:	d142      	bne.n	800b9a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d002      	beq.n	800b92a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b924:	88fb      	ldrh	r3, [r7, #6]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e03b      	b.n	800b9a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2201      	movs	r2, #1
 800b932:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b93a:	88fb      	ldrh	r3, [r7, #6]
 800b93c:	461a      	mov	r2, r3
 800b93e:	68b9      	ldr	r1, [r7, #8]
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f7ff fc8f 	bl	800b264 <UART_Start_Receive_DMA>
 800b946:	4603      	mov	r3, r0
 800b948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b94c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b950:	2b00      	cmp	r3, #0
 800b952:	d124      	bne.n	800b99e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d11d      	bne.n	800b998 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2210      	movs	r2, #16
 800b962:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	e853 3f00 	ldrex	r3, [r3]
 800b970:	617b      	str	r3, [r7, #20]
   return(result);
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f043 0310 	orr.w	r3, r3, #16
 800b978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b982:	627b      	str	r3, [r7, #36]	@ 0x24
 800b984:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b986:	6a39      	ldr	r1, [r7, #32]
 800b988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b98a:	e841 2300 	strex	r3, r2, [r1]
 800b98e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1e6      	bne.n	800b964 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b996:	e002      	b.n	800b99e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b99e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b9a2:	e000      	b.n	800b9a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b9a4:	2302      	movs	r3, #2
  }
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3730      	adds	r7, #48	@ 0x30
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
	...

0800b9b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d108      	bne.n	800b9d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9d0:	e031      	b.n	800ba36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9d2:	2310      	movs	r3, #16
 800b9d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9d6:	2310      	movs	r3, #16
 800b9d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	0e5b      	lsrs	r3, r3, #25
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	f003 0307 	and.w	r3, r3, #7
 800b9e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	0f5b      	lsrs	r3, r3, #29
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	f003 0307 	and.w	r3, r3, #7
 800b9f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	7b3a      	ldrb	r2, [r7, #12]
 800b9fe:	4911      	ldr	r1, [pc, #68]	@ (800ba44 <UARTEx_SetNbDataToProcess+0x94>)
 800ba00:	5c8a      	ldrb	r2, [r1, r2]
 800ba02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba06:	7b3a      	ldrb	r2, [r7, #12]
 800ba08:	490f      	ldr	r1, [pc, #60]	@ (800ba48 <UARTEx_SetNbDataToProcess+0x98>)
 800ba0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	7b7a      	ldrb	r2, [r7, #13]
 800ba1c:	4909      	ldr	r1, [pc, #36]	@ (800ba44 <UARTEx_SetNbDataToProcess+0x94>)
 800ba1e:	5c8a      	ldrb	r2, [r1, r2]
 800ba20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba24:	7b7a      	ldrb	r2, [r7, #13]
 800ba26:	4908      	ldr	r1, [pc, #32]	@ (800ba48 <UARTEx_SetNbDataToProcess+0x98>)
 800ba28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba36:	bf00      	nop
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	0800f00c 	.word	0x0800f00c
 800ba48:	0800f014 	.word	0x0800f014

0800ba4c <Sensor_BMP280_init>:
		printf("MPU6500 read failed with status: %u\r\n", status);
	}
}

void Sensor_BMP280_init(BMP280_HandleTypedef *bmp280)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
//	HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &txData, 1, 100);
//	HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR,
//			rxData, 1, 100);
//	printf("Received: 0x%02X \r\n", rxData[0]);  // Print response

	bmp280_init_default_params(&bmp280->params);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	332c      	adds	r3, #44	@ 0x2c
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f000 f830 	bl	800babe <bmp280_init_default_params>
	bmp280->addr = BMP280_I2C_ADDRESS_0;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2276      	movs	r2, #118	@ 0x76
 800ba62:	849a      	strh	r2, [r3, #36]	@ 0x24
	bmp280->i2c = &BME280_I2C;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a0b      	ldr	r2, [pc, #44]	@ (800ba94 <Sensor_BMP280_init+0x48>)
 800ba68:	629a      	str	r2, [r3, #40]	@ 0x28

    // 3) try to initialize until the chip acks
    while (!bmp280_init(bmp280, &bmp280->params)) {
 800ba6a:	e002      	b.n	800ba72 <Sensor_BMP280_init+0x26>
        // Optional: blink an LED, print a message, delay, etc.
        HAL_Delay(200);
 800ba6c:	20c8      	movs	r0, #200	@ 0xc8
 800ba6e:	f7f6 fa9f 	bl	8001fb0 <HAL_Delay>
    while (!bmp280_init(bmp280, &bmp280->params)) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	332c      	adds	r3, #44	@ 0x2c
 800ba76:	4619      	mov	r1, r3
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 f99c 	bl	800bdb6 <bmp280_init>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f083 0301 	eor.w	r3, r3, #1
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1f0      	bne.n	800ba6c <Sensor_BMP280_init+0x20>
    }
//	bool bme280p = bmp280.id == BME280_CHIP_ID;
//	size = sprintf((char*) Data, "BMP280: found %s \r\n",
//			bme280p ? "BME280" : "BMP280");
//	HAL_UART_Transmit(&STLINK_UART, Data, size, 1000);
}
 800ba8a:	bf00      	nop
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	24000248 	.word	0x24000248

0800ba98 <Sensor_BMP280_read_data>:

void Sensor_BMP280_read_data(SmartWatchData_t *SmartWatchData)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
	bmp280_read_float(&SmartWatchData->bmp280, &SmartWatchData->temperature,
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	333c      	adds	r3, #60	@ 0x3c
 800bab2:	f000 fded 	bl	800c690 <bmp280_read_float>
			&SmartWatchData->pressure, &SmartWatchData->humidity);

}
 800bab6:	bf00      	nop
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2203      	movs	r2, #3
 800baca:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2203      	movs	r2, #3
 800bad6:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2203      	movs	r2, #3
 800badc:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2203      	movs	r2, #3
 800bae2:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2203      	movs	r2, #3
 800bae8:	715a      	strb	r2, [r3, #5]
}
 800baea:	bf00      	nop
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b08a      	sub	sp, #40	@ 0x28
 800bafa:	af04      	add	r7, sp, #16
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	460b      	mov	r3, r1
 800bb00:	607a      	str	r2, [r7, #4]
 800bb02:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bb10:	7afb      	ldrb	r3, [r7, #11]
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	8af9      	ldrh	r1, [r7, #22]
 800bb16:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bb1a:	9302      	str	r3, [sp, #8]
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	9301      	str	r3, [sp, #4]
 800bb20:	f107 0314 	add.w	r3, r7, #20
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	2301      	movs	r3, #1
 800bb28:	f7f9 fe6c 	bl	8005804 <HAL_I2C_Mem_Read>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10c      	bne.n	800bb4c <read_register16+0x56>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800bb32:	7d7b      	ldrb	r3, [r7, #21]
 800bb34:	b21b      	sxth	r3, r3
 800bb36:	021b      	lsls	r3, r3, #8
 800bb38:	b21a      	sxth	r2, r3
 800bb3a:	7d3b      	ldrb	r3, [r7, #20]
 800bb3c:	b21b      	sxth	r3, r3
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	b21b      	sxth	r3, r3
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	801a      	strh	r2, [r3, #0]
		return true;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e000      	b.n	800bb4e <read_register16+0x58>
	} else
		return false;
 800bb4c:	2300      	movs	r3, #0

}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3718      	adds	r7, #24
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800bb56:	b590      	push	{r4, r7, lr}
 800bb58:	b08b      	sub	sp, #44	@ 0x2c
 800bb5a:	af04      	add	r7, sp, #16
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	461a      	mov	r2, r3
 800bb62:	460b      	mov	r3, r1
 800bb64:	72fb      	strb	r3, [r7, #11]
 800bb66:	4613      	mov	r3, r2
 800bb68:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bb6e:	005b      	lsls	r3, r3, #1
 800bb70:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bb76:	7afb      	ldrb	r3, [r7, #11]
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	7abb      	ldrb	r3, [r7, #10]
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	8af9      	ldrh	r1, [r7, #22]
 800bb80:	f241 3488 	movw	r4, #5000	@ 0x1388
 800bb84:	9402      	str	r4, [sp, #8]
 800bb86:	9301      	str	r3, [sp, #4]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	f7f9 fe39 	bl	8005804 <HAL_I2C_Mem_Read>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <read_data+0x46>
		return 0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	e000      	b.n	800bb9e <read_data+0x48>
	else
		return 1;
 800bb9c:	2301      	movs	r3, #1

}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd90      	pop	{r4, r7, pc}

0800bba6 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b082      	sub	sp, #8
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	2188      	movs	r1, #136	@ 0x88
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f7ff ff9e 	bl	800baf6 <read_register16>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d06f      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	3302      	adds	r3, #2
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	218a      	movs	r1, #138	@ 0x8a
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7ff ff94 	bl	800baf6 <read_register16>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d065      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	461a      	mov	r2, r3
 800bbda:	218c      	movs	r1, #140	@ 0x8c
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff ff8a 	bl	800baf6 <read_register16>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d05b      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	3306      	adds	r3, #6
 800bbec:	461a      	mov	r2, r3
 800bbee:	218e      	movs	r1, #142	@ 0x8e
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff ff80 	bl	800baf6 <read_register16>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d051      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	3308      	adds	r3, #8
 800bc00:	461a      	mov	r2, r3
 800bc02:	2190      	movs	r1, #144	@ 0x90
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff ff76 	bl	800baf6 <read_register16>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d047      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	330a      	adds	r3, #10
 800bc14:	461a      	mov	r2, r3
 800bc16:	2192      	movs	r1, #146	@ 0x92
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7ff ff6c 	bl	800baf6 <read_register16>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d03d      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	330c      	adds	r3, #12
 800bc28:	461a      	mov	r2, r3
 800bc2a:	2194      	movs	r1, #148	@ 0x94
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7ff ff62 	bl	800baf6 <read_register16>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d033      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	330e      	adds	r3, #14
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	2196      	movs	r1, #150	@ 0x96
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7ff ff58 	bl	800baf6 <read_register16>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d029      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3310      	adds	r3, #16
 800bc50:	461a      	mov	r2, r3
 800bc52:	2198      	movs	r1, #152	@ 0x98
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7ff ff4e 	bl	800baf6 <read_register16>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01f      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	3312      	adds	r3, #18
 800bc64:	461a      	mov	r2, r3
 800bc66:	219a      	movs	r1, #154	@ 0x9a
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff ff44 	bl	800baf6 <read_register16>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d015      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	3314      	adds	r3, #20
 800bc78:	461a      	mov	r2, r3
 800bc7a:	219c      	movs	r1, #156	@ 0x9c
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff ff3a 	bl	800baf6 <read_register16>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00b      	beq.n	800bca0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	219e      	movs	r1, #158	@ 0x9e
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7ff ff30 	bl	800baf6 <read_register16>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d001      	beq.n	800bca0 <read_calibration_data+0xfa>

		return true;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e000      	b.n	800bca2 <read_calibration_data+0xfc>
	}

	return false;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f103 0218 	add.w	r2, r3, #24
 800bcb8:	2301      	movs	r3, #1
 800bcba:	21a1      	movs	r1, #161	@ 0xa1
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7ff ff4a 	bl	800bb56 <read_data>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d14c      	bne.n	800bd62 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	331a      	adds	r3, #26
 800bccc:	461a      	mov	r2, r3
 800bcce:	21e1      	movs	r1, #225	@ 0xe1
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff ff10 	bl	800baf6 <read_register16>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d042      	beq.n	800bd62 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f103 021c 	add.w	r2, r3, #28
 800bce2:	2301      	movs	r3, #1
 800bce4:	21e3      	movs	r1, #227	@ 0xe3
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff ff35 	bl	800bb56 <read_data>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d137      	bne.n	800bd62 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 800bcf2:	f107 030e 	add.w	r3, r7, #14
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	21e4      	movs	r1, #228	@ 0xe4
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7ff fefb 	bl	800baf6 <read_register16>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d02d      	beq.n	800bd62 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 800bd06:	f107 030c 	add.w	r3, r7, #12
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	21e5      	movs	r1, #229	@ 0xe5
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7ff fef1 	bl	800baf6 <read_register16>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d023      	beq.n	800bd62 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800bd20:	2301      	movs	r3, #1
 800bd22:	21e7      	movs	r1, #231	@ 0xe7
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7ff ff16 	bl	800bb56 <read_data>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d118      	bne.n	800bd62 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800bd30:	89fb      	ldrh	r3, [r7, #14]
 800bd32:	b21b      	sxth	r3, r3
 800bd34:	011b      	lsls	r3, r3, #4
 800bd36:	b21b      	sxth	r3, r3
 800bd38:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800bd3c:	b21a      	sxth	r2, r3
 800bd3e:	89fb      	ldrh	r3, [r7, #14]
 800bd40:	121b      	asrs	r3, r3, #8
 800bd42:	b21b      	sxth	r3, r3
 800bd44:	f003 030f 	and.w	r3, r3, #15
 800bd48:	b21b      	sxth	r3, r3
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	b21a      	sxth	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800bd52:	89bb      	ldrh	r3, [r7, #12]
 800bd54:	091b      	lsrs	r3, r3, #4
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	b21a      	sxth	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	841a      	strh	r2, [r3, #32]

		return true;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e000      	b.n	800bd64 <read_hum_calibration_data+0xba>
	}

	return false;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af04      	add	r7, sp, #16
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	460b      	mov	r3, r1
 800bd76:	70fb      	strb	r3, [r7, #3]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bd80:	005b      	lsls	r3, r3, #1
 800bd82:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bd88:	78fb      	ldrb	r3, [r7, #3]
 800bd8a:	b29a      	uxth	r2, r3
 800bd8c:	89f9      	ldrh	r1, [r7, #14]
 800bd8e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800bd92:	9302      	str	r3, [sp, #8]
 800bd94:	2301      	movs	r3, #1
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	1cbb      	adds	r3, r7, #2
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	f7f9 fc1d 	bl	80055dc <HAL_I2C_Mem_Write>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d101      	bne.n	800bdac <write_register8+0x40>
		return false;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	e000      	b.n	800bdae <write_register8+0x42>
	else
		return true;
 800bdac:	2301      	movs	r3, #1
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b084      	sub	sp, #16
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bdc4:	2b76      	cmp	r3, #118	@ 0x76
 800bdc6:	d005      	beq.n	800bdd4 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bdcc:	2b77      	cmp	r3, #119	@ 0x77
 800bdce:	d001      	beq.n	800bdd4 <bmp280_init+0x1e>

		return false;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	e09d      	b.n	800bf10 <bmp280_init+0x15a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bdda:	2301      	movs	r3, #1
 800bddc:	21d0      	movs	r1, #208	@ 0xd0
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7ff feb9 	bl	800bb56 <read_data>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <bmp280_init+0x38>
		return false;
 800bdea:	2300      	movs	r3, #0
 800bdec:	e090      	b.n	800bf10 <bmp280_init+0x15a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bdf4:	2b58      	cmp	r3, #88	@ 0x58
 800bdf6:	d006      	beq.n	800be06 <bmp280_init+0x50>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bdfe:	2b60      	cmp	r3, #96	@ 0x60
 800be00:	d001      	beq.n	800be06 <bmp280_init+0x50>

		return false;
 800be02:	2300      	movs	r3, #0
 800be04:	e084      	b.n	800bf10 <bmp280_init+0x15a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800be06:	22b6      	movs	r2, #182	@ 0xb6
 800be08:	21e0      	movs	r1, #224	@ 0xe0
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7ff ffae 	bl	800bd6c <write_register8>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <bmp280_init+0x64>
		return false;
 800be16:	2300      	movs	r3, #0
 800be18:	e07a      	b.n	800bf10 <bmp280_init+0x15a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800be1a:	f107 020c 	add.w	r2, r7, #12
 800be1e:	2301      	movs	r3, #1
 800be20:	21f3      	movs	r1, #243	@ 0xf3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7ff fe97 	bl	800bb56 <read_data>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1f5      	bne.n	800be1a <bmp280_init+0x64>
				&& (status & 1) == 0)
 800be2e:	7b3b      	ldrb	r3, [r7, #12]
 800be30:	f003 0301 	and.w	r3, r3, #1
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1f0      	bne.n	800be1a <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff feb4 	bl	800bba6 <read_calibration_data>
 800be3e:	4603      	mov	r3, r0
 800be40:	f083 0301 	eor.w	r3, r3, #1
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d100      	bne.n	800be4c <bmp280_init+0x96>
 800be4a:	e001      	b.n	800be50 <bmp280_init+0x9a>
		return false;
 800be4c:	2300      	movs	r3, #0
 800be4e:	e05f      	b.n	800bf10 <bmp280_init+0x15a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800be56:	2b60      	cmp	r3, #96	@ 0x60
 800be58:	d10a      	bne.n	800be70 <bmp280_init+0xba>
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff ff25 	bl	800bcaa <read_hum_calibration_data>
 800be60:	4603      	mov	r3, r0
 800be62:	f083 0301 	eor.w	r3, r3, #1
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <bmp280_init+0xba>
		return false;
 800be6c:	2300      	movs	r3, #0
 800be6e:	e04f      	b.n	800bf10 <bmp280_init+0x15a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	795b      	ldrb	r3, [r3, #5]
 800be74:	b25b      	sxtb	r3, r3
 800be76:	015b      	lsls	r3, r3, #5
 800be78:	b25a      	sxtb	r2, r3
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	785b      	ldrb	r3, [r3, #1]
 800be7e:	b25b      	sxtb	r3, r3
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	b25b      	sxtb	r3, r3
 800be84:	4313      	orrs	r3, r2
 800be86:	b25b      	sxtb	r3, r3
 800be88:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	461a      	mov	r2, r3
 800be8e:	21f5      	movs	r1, #245	@ 0xf5
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff ff6b 	bl	800bd6c <write_register8>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d001      	beq.n	800bea0 <bmp280_init+0xea>
		return false;
 800be9c:	2300      	movs	r3, #0
 800be9e:	e037      	b.n	800bf10 <bmp280_init+0x15a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d102      	bne.n	800beae <bmp280_init+0xf8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2200      	movs	r2, #0
 800beac:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 800beb2:	b25b      	sxtb	r3, r3
 800beb4:	015b      	lsls	r3, r3, #5
 800beb6:	b25a      	sxtb	r2, r3
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	789b      	ldrb	r3, [r3, #2]
 800bebc:	b25b      	sxtb	r3, r3
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	b25b      	sxtb	r3, r3
 800bec2:	4313      	orrs	r3, r2
 800bec4:	b25a      	sxtb	r2, r3
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	b25b      	sxtb	r3, r3
 800becc:	4313      	orrs	r3, r2
 800bece:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800bed0:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bed8:	2b60      	cmp	r3, #96	@ 0x60
 800beda:	d10d      	bne.n	800bef8 <bmp280_init+0x142>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	791b      	ldrb	r3, [r3, #4]
 800bee0:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800bee2:	7b7b      	ldrb	r3, [r7, #13]
 800bee4:	461a      	mov	r2, r3
 800bee6:	21f2      	movs	r1, #242	@ 0xf2
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff ff3f 	bl	800bd6c <write_register8>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d001      	beq.n	800bef8 <bmp280_init+0x142>
			return false;
 800bef4:	2300      	movs	r3, #0
 800bef6:	e00b      	b.n	800bf10 <bmp280_init+0x15a>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800bef8:	7bbb      	ldrb	r3, [r7, #14]
 800befa:	461a      	mov	r2, r3
 800befc:	21f4      	movs	r1, #244	@ 0xf4
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff ff34 	bl	800bd6c <write_register8>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <bmp280_init+0x158>
		return false;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e000      	b.n	800bf10 <bmp280_init+0x15a>
	}

	return true;
 800bf0e:	2301      	movs	r3, #1
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800bf18:	b480      	push	{r7}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	10da      	asrs	r2, r3, #3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	005b      	lsls	r3, r3, #1
 800bf2e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800bf36:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800bf3a:	12db      	asrs	r3, r3, #11
 800bf3c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	111b      	asrs	r3, r3, #4
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	8812      	ldrh	r2, [r2, #0]
 800bf46:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	1112      	asrs	r2, r2, #4
 800bf4c:	68f9      	ldr	r1, [r7, #12]
 800bf4e:	8809      	ldrh	r1, [r1, #0]
 800bf50:	1a52      	subs	r2, r2, r1
 800bf52:	fb02 f303 	mul.w	r3, r2, r3
 800bf56:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800bf5e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800bf62:	139b      	asrs	r3, r3, #14
 800bf64:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	441a      	add	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	4613      	mov	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	3380      	adds	r3, #128	@ 0x80
 800bf7c:	121b      	asrs	r3, r3, #8
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	371c      	adds	r7, #28
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800bf8a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf8e:	b0cc      	sub	sp, #304	@ 0x130
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800bf96:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800bf9a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800bf9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfa2:	17da      	asrs	r2, r3, #31
 800bfa4:	461c      	mov	r4, r3
 800bfa6:	4615      	mov	r5, r2
 800bfa8:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800bfac:	f145 3bff 	adc.w	fp, r5, #4294967295
 800bfb0:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800bfb4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800bfb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bfbc:	fb03 f102 	mul.w	r1, r3, r2
 800bfc0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800bfc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bfc8:	fb02 f303 	mul.w	r3, r2, r3
 800bfcc:	18ca      	adds	r2, r1, r3
 800bfce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bfd2:	fba3 8903 	umull	r8, r9, r3, r3
 800bfd6:	eb02 0309 	add.w	r3, r2, r9
 800bfda:	4699      	mov	r9, r3
 800bfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bfe0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800bfe4:	b21b      	sxth	r3, r3
 800bfe6:	17da      	asrs	r2, r3, #31
 800bfe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bfec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bff0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800bff4:	4603      	mov	r3, r0
 800bff6:	fb03 f209 	mul.w	r2, r3, r9
 800bffa:	460b      	mov	r3, r1
 800bffc:	fb08 f303 	mul.w	r3, r8, r3
 800c000:	4413      	add	r3, r2
 800c002:	4602      	mov	r2, r0
 800c004:	fba8 1202 	umull	r1, r2, r8, r2
 800c008:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c00c:	460a      	mov	r2, r1
 800c00e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800c012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c016:	4413      	add	r3, r2
 800c018:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c01c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800c020:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 800c024:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800c028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c02c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c030:	b21b      	sxth	r3, r3
 800c032:	17da      	asrs	r2, r3, #31
 800c034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c038:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c03c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c040:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800c044:	462a      	mov	r2, r5
 800c046:	fb02 f203 	mul.w	r2, r2, r3
 800c04a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c04e:	4621      	mov	r1, r4
 800c050:	fb01 f303 	mul.w	r3, r1, r3
 800c054:	441a      	add	r2, r3
 800c056:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c05a:	4621      	mov	r1, r4
 800c05c:	fba3 1301 	umull	r1, r3, r3, r1
 800c060:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c064:	460b      	mov	r3, r1
 800c066:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c06e:	18d3      	adds	r3, r2, r3
 800c070:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c074:	f04f 0000 	mov.w	r0, #0
 800c078:	f04f 0100 	mov.w	r1, #0
 800c07c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800c080:	462b      	mov	r3, r5
 800c082:	0459      	lsls	r1, r3, #17
 800c084:	4623      	mov	r3, r4
 800c086:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800c08a:	4623      	mov	r3, r4
 800c08c:	0458      	lsls	r0, r3, #17
 800c08e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800c092:	1814      	adds	r4, r2, r0
 800c094:	643c      	str	r4, [r7, #64]	@ 0x40
 800c096:	414b      	adcs	r3, r1
 800c098:	647b      	str	r3, [r7, #68]	@ 0x44
 800c09a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800c09e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800c0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800c0aa:	b21b      	sxth	r3, r3
 800c0ac:	17da      	asrs	r2, r3, #31
 800c0ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c0b2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c0b6:	f04f 0000 	mov.w	r0, #0
 800c0ba:	f04f 0100 	mov.w	r1, #0
 800c0be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c0c2:	00d9      	lsls	r1, r3, #3
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800c0ca:	1814      	adds	r4, r2, r0
 800c0cc:	63bc      	str	r4, [r7, #56]	@ 0x38
 800c0ce:	414b      	adcs	r3, r1
 800c0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0d2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800c0d6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800c0da:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800c0de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c0e2:	fb03 f102 	mul.w	r1, r3, r2
 800c0e6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800c0ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c0ee:	fb02 f303 	mul.w	r3, r2, r3
 800c0f2:	18ca      	adds	r2, r1, r3
 800c0f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c0f8:	fba3 1303 	umull	r1, r3, r3, r3
 800c0fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c100:	460b      	mov	r3, r1
 800c102:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c10a:	18d3      	adds	r3, r2, r3
 800c10c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c114:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c118:	b21b      	sxth	r3, r3
 800c11a:	17da      	asrs	r2, r3, #31
 800c11c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c120:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c124:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800c128:	462b      	mov	r3, r5
 800c12a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c12e:	4642      	mov	r2, r8
 800c130:	fb02 f203 	mul.w	r2, r2, r3
 800c134:	464b      	mov	r3, r9
 800c136:	4621      	mov	r1, r4
 800c138:	fb01 f303 	mul.w	r3, r1, r3
 800c13c:	4413      	add	r3, r2
 800c13e:	4622      	mov	r2, r4
 800c140:	4641      	mov	r1, r8
 800c142:	fba2 1201 	umull	r1, r2, r2, r1
 800c146:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800c14a:	460a      	mov	r2, r1
 800c14c:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800c150:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800c154:	4413      	add	r3, r2
 800c156:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c15a:	f04f 0000 	mov.w	r0, #0
 800c15e:	f04f 0100 	mov.w	r1, #0
 800c162:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800c166:	4623      	mov	r3, r4
 800c168:	0a18      	lsrs	r0, r3, #8
 800c16a:	462b      	mov	r3, r5
 800c16c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800c170:	462b      	mov	r3, r5
 800c172:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800c174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c178:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c17c:	b21b      	sxth	r3, r3
 800c17e:	17da      	asrs	r2, r3, #31
 800c180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c184:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c188:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c18c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800c190:	464a      	mov	r2, r9
 800c192:	fb02 f203 	mul.w	r2, r2, r3
 800c196:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c19a:	4644      	mov	r4, r8
 800c19c:	fb04 f303 	mul.w	r3, r4, r3
 800c1a0:	441a      	add	r2, r3
 800c1a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c1a6:	4644      	mov	r4, r8
 800c1a8:	fba3 4304 	umull	r4, r3, r3, r4
 800c1ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c1b0:	4623      	mov	r3, r4
 800c1b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c1b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c1ba:	18d3      	adds	r3, r2, r3
 800c1bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c1c0:	f04f 0200 	mov.w	r2, #0
 800c1c4:	f04f 0300 	mov.w	r3, #0
 800c1c8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800c1cc:	464c      	mov	r4, r9
 800c1ce:	0323      	lsls	r3, r4, #12
 800c1d0:	4644      	mov	r4, r8
 800c1d2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800c1d6:	4644      	mov	r4, r8
 800c1d8:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800c1da:	1884      	adds	r4, r0, r2
 800c1dc:	633c      	str	r4, [r7, #48]	@ 0x30
 800c1de:	eb41 0303 	adc.w	r3, r1, r3
 800c1e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800c1e8:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800c1ec:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800c1f0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800c1f4:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800c1f8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c200:	88db      	ldrh	r3, [r3, #6]
 800c202:	b29b      	uxth	r3, r3
 800c204:	2200      	movs	r2, #0
 800c206:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c20a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c20e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c212:	462b      	mov	r3, r5
 800c214:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c218:	4642      	mov	r2, r8
 800c21a:	fb02 f203 	mul.w	r2, r2, r3
 800c21e:	464b      	mov	r3, r9
 800c220:	4621      	mov	r1, r4
 800c222:	fb01 f303 	mul.w	r3, r1, r3
 800c226:	4413      	add	r3, r2
 800c228:	4622      	mov	r2, r4
 800c22a:	4641      	mov	r1, r8
 800c22c:	fba2 1201 	umull	r1, r2, r2, r1
 800c230:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c234:	460a      	mov	r2, r1
 800c236:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800c23a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c23e:	4413      	add	r3, r2
 800c240:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c244:	f04f 0200 	mov.w	r2, #0
 800c248:	f04f 0300 	mov.w	r3, #0
 800c24c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800c250:	4629      	mov	r1, r5
 800c252:	104a      	asrs	r2, r1, #1
 800c254:	4629      	mov	r1, r5
 800c256:	17cb      	asrs	r3, r1, #31
 800c258:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 800c25c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800c260:	4313      	orrs	r3, r2
 800c262:	d101      	bne.n	800c268 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 800c264:	2300      	movs	r3, #0
 800c266:	e148      	b.n	800c4fa <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800c268:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c26c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800c270:	17da      	asrs	r2, r3, #31
 800c272:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c274:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c276:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800c27a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800c27e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c282:	105b      	asrs	r3, r3, #1
 800c284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c288:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c28c:	07db      	lsls	r3, r3, #31
 800c28e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c292:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800c296:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800c29a:	4621      	mov	r1, r4
 800c29c:	1a89      	subs	r1, r1, r2
 800c29e:	67b9      	str	r1, [r7, #120]	@ 0x78
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	eb61 0303 	sbc.w	r3, r1, r3
 800c2a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c2a8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800c2ac:	4622      	mov	r2, r4
 800c2ae:	462b      	mov	r3, r5
 800c2b0:	1891      	adds	r1, r2, r2
 800c2b2:	6239      	str	r1, [r7, #32]
 800c2b4:	415b      	adcs	r3, r3
 800c2b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c2bc:	4621      	mov	r1, r4
 800c2be:	1851      	adds	r1, r2, r1
 800c2c0:	61b9      	str	r1, [r7, #24]
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	414b      	adcs	r3, r1
 800c2c6:	61fb      	str	r3, [r7, #28]
 800c2c8:	f04f 0200 	mov.w	r2, #0
 800c2cc:	f04f 0300 	mov.w	r3, #0
 800c2d0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	018b      	lsls	r3, r1, #6
 800c2d8:	4641      	mov	r1, r8
 800c2da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c2de:	4641      	mov	r1, r8
 800c2e0:	018a      	lsls	r2, r1, #6
 800c2e2:	4641      	mov	r1, r8
 800c2e4:	1889      	adds	r1, r1, r2
 800c2e6:	6139      	str	r1, [r7, #16]
 800c2e8:	4649      	mov	r1, r9
 800c2ea:	eb43 0101 	adc.w	r1, r3, r1
 800c2ee:	6179      	str	r1, [r7, #20]
 800c2f0:	f04f 0200 	mov.w	r2, #0
 800c2f4:	f04f 0300 	mov.w	r3, #0
 800c2f8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800c2fc:	4649      	mov	r1, r9
 800c2fe:	008b      	lsls	r3, r1, #2
 800c300:	4641      	mov	r1, r8
 800c302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c306:	4641      	mov	r1, r8
 800c308:	008a      	lsls	r2, r1, #2
 800c30a:	4610      	mov	r0, r2
 800c30c:	4619      	mov	r1, r3
 800c30e:	4603      	mov	r3, r0
 800c310:	4622      	mov	r2, r4
 800c312:	189b      	adds	r3, r3, r2
 800c314:	60bb      	str	r3, [r7, #8]
 800c316:	460b      	mov	r3, r1
 800c318:	462a      	mov	r2, r5
 800c31a:	eb42 0303 	adc.w	r3, r2, r3
 800c31e:	60fb      	str	r3, [r7, #12]
 800c320:	f04f 0200 	mov.w	r2, #0
 800c324:	f04f 0300 	mov.w	r3, #0
 800c328:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800c32c:	4649      	mov	r1, r9
 800c32e:	008b      	lsls	r3, r1, #2
 800c330:	4641      	mov	r1, r8
 800c332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c336:	4641      	mov	r1, r8
 800c338:	008a      	lsls	r2, r1, #2
 800c33a:	4610      	mov	r0, r2
 800c33c:	4619      	mov	r1, r3
 800c33e:	4603      	mov	r3, r0
 800c340:	4622      	mov	r2, r4
 800c342:	189b      	adds	r3, r3, r2
 800c344:	673b      	str	r3, [r7, #112]	@ 0x70
 800c346:	462b      	mov	r3, r5
 800c348:	460a      	mov	r2, r1
 800c34a:	eb42 0303 	adc.w	r3, r2, r3
 800c34e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c350:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800c354:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800c358:	f7f4 f822 	bl	80003a0 <__aeabi_ldivmod>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800c364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c368:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c36c:	b21b      	sxth	r3, r3
 800c36e:	17da      	asrs	r2, r3, #31
 800c370:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c372:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c374:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c378:	f04f 0000 	mov.w	r0, #0
 800c37c:	f04f 0100 	mov.w	r1, #0
 800c380:	0b50      	lsrs	r0, r2, #13
 800c382:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800c386:	1359      	asrs	r1, r3, #13
 800c388:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800c38c:	462b      	mov	r3, r5
 800c38e:	fb00 f203 	mul.w	r2, r0, r3
 800c392:	4623      	mov	r3, r4
 800c394:	fb03 f301 	mul.w	r3, r3, r1
 800c398:	4413      	add	r3, r2
 800c39a:	4622      	mov	r2, r4
 800c39c:	fba2 1200 	umull	r1, r2, r2, r0
 800c3a0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c3a4:	460a      	mov	r2, r1
 800c3a6:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800c3aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c3b4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800c3b8:	f04f 0000 	mov.w	r0, #0
 800c3bc:	f04f 0100 	mov.w	r1, #0
 800c3c0:	0b50      	lsrs	r0, r2, #13
 800c3c2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800c3c6:	1359      	asrs	r1, r3, #13
 800c3c8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800c3cc:	462b      	mov	r3, r5
 800c3ce:	fb00 f203 	mul.w	r2, r0, r3
 800c3d2:	4623      	mov	r3, r4
 800c3d4:	fb03 f301 	mul.w	r3, r3, r1
 800c3d8:	4413      	add	r3, r2
 800c3da:	4622      	mov	r2, r4
 800c3dc:	fba2 1200 	umull	r1, r2, r2, r0
 800c3e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c3e4:	460a      	mov	r2, r1
 800c3e6:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800c3ea:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c3ee:	4413      	add	r3, r2
 800c3f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c3f4:	f04f 0200 	mov.w	r2, #0
 800c3f8:	f04f 0300 	mov.w	r3, #0
 800c3fc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800c400:	4621      	mov	r1, r4
 800c402:	0e4a      	lsrs	r2, r1, #25
 800c404:	4629      	mov	r1, r5
 800c406:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800c40a:	4629      	mov	r1, r5
 800c40c:	164b      	asrs	r3, r1, #25
 800c40e:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800c412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c416:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c41a:	b21b      	sxth	r3, r3
 800c41c:	17da      	asrs	r2, r3, #31
 800c41e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c420:	667a      	str	r2, [r7, #100]	@ 0x64
 800c422:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c426:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c42a:	462a      	mov	r2, r5
 800c42c:	fb02 f203 	mul.w	r2, r2, r3
 800c430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c434:	4621      	mov	r1, r4
 800c436:	fb01 f303 	mul.w	r3, r1, r3
 800c43a:	4413      	add	r3, r2
 800c43c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800c440:	4621      	mov	r1, r4
 800c442:	fba2 1201 	umull	r1, r2, r2, r1
 800c446:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800c44a:	460a      	mov	r2, r1
 800c44c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800c450:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800c454:	4413      	add	r3, r2
 800c456:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c45a:	f04f 0200 	mov.w	r2, #0
 800c45e:	f04f 0300 	mov.w	r3, #0
 800c462:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800c466:	4621      	mov	r1, r4
 800c468:	0cca      	lsrs	r2, r1, #19
 800c46a:	4629      	mov	r1, r5
 800c46c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c470:	4629      	mov	r1, r5
 800c472:	14cb      	asrs	r3, r1, #19
 800c474:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800c478:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800c47c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800c480:	1884      	adds	r4, r0, r2
 800c482:	65bc      	str	r4, [r7, #88]	@ 0x58
 800c484:	eb41 0303 	adc.w	r3, r1, r3
 800c488:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c48a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800c48e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800c492:	4621      	mov	r1, r4
 800c494:	1889      	adds	r1, r1, r2
 800c496:	6539      	str	r1, [r7, #80]	@ 0x50
 800c498:	4629      	mov	r1, r5
 800c49a:	eb43 0101 	adc.w	r1, r3, r1
 800c49e:	6579      	str	r1, [r7, #84]	@ 0x54
 800c4a0:	f04f 0000 	mov.w	r0, #0
 800c4a4:	f04f 0100 	mov.w	r1, #0
 800c4a8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800c4ac:	4623      	mov	r3, r4
 800c4ae:	0a18      	lsrs	r0, r3, #8
 800c4b0:	462b      	mov	r3, r5
 800c4b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800c4b6:	462b      	mov	r3, r5
 800c4b8:	1219      	asrs	r1, r3, #8
 800c4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4be:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c4c2:	b21b      	sxth	r3, r3
 800c4c4:	17da      	asrs	r2, r3, #31
 800c4c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4c8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c4ca:	f04f 0200 	mov.w	r2, #0
 800c4ce:	f04f 0300 	mov.w	r3, #0
 800c4d2:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800c4d6:	464c      	mov	r4, r9
 800c4d8:	0123      	lsls	r3, r4, #4
 800c4da:	4644      	mov	r4, r8
 800c4dc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800c4e0:	4644      	mov	r4, r8
 800c4e2:	0122      	lsls	r2, r4, #4
 800c4e4:	1884      	adds	r4, r0, r2
 800c4e6:	603c      	str	r4, [r7, #0]
 800c4e8:	eb41 0303 	adc.w	r3, r1, r3
 800c4ec:	607b      	str	r3, [r7, #4]
 800c4ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c4f2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 800c4f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c500:	46bd      	mov	sp, r7
 800c502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c506 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800c506:	b480      	push	{r7}
 800c508:	b087      	sub	sp, #28
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	60f8      	str	r0, [r7, #12]
 800c50e:	60b9      	str	r1, [r7, #8]
 800c510:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800c518:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	039a      	lsls	r2, r3, #14
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800c524:	051b      	lsls	r3, r3, #20
 800c526:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800c52e:	4619      	mov	r1, r3
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	fb01 f303 	mul.w	r3, r1, r3
 800c536:	1ad3      	subs	r3, r2, r3
 800c538:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800c53c:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800c544:	4611      	mov	r1, r2
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	fb01 f202 	mul.w	r2, r1, r2
 800c54c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800c54e:	68f9      	ldr	r1, [r7, #12]
 800c550:	7f09      	ldrb	r1, [r1, #28]
 800c552:	4608      	mov	r0, r1
 800c554:	6979      	ldr	r1, [r7, #20]
 800c556:	fb00 f101 	mul.w	r1, r0, r1
 800c55a:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800c55c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800c560:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800c564:	1292      	asrs	r2, r2, #10
 800c566:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800c56a:	68f9      	ldr	r1, [r7, #12]
 800c56c:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800c570:	fb01 f202 	mul.w	r2, r1, r2
 800c574:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800c578:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800c57a:	fb02 f303 	mul.w	r3, r2, r3
 800c57e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	13db      	asrs	r3, r3, #15
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	13d2      	asrs	r2, r2, #15
 800c588:	fb02 f303 	mul.w	r3, r2, r3
 800c58c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	7e12      	ldrb	r2, [r2, #24]
 800c592:	fb02 f303 	mul.w	r3, r2, r3
 800c596:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800c598:	697a      	ldr	r2, [r7, #20]
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c5a4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800c5ac:	bfa8      	it	ge
 800c5ae:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800c5b2:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	131b      	asrs	r3, r3, #12
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	371c      	adds	r7, #28
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08c      	sub	sp, #48	@ 0x30
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c5d8:	2b60      	cmp	r3, #96	@ 0x60
 800c5da:	d007      	beq.n	800c5ec <bmp280_read_fixed+0x28>
		if (humidity)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d002      	beq.n	800c5e8 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d001      	beq.n	800c5f6 <bmp280_read_fixed+0x32>
 800c5f2:	2308      	movs	r3, #8
 800c5f4:	e000      	b.n	800c5f8 <bmp280_read_fixed+0x34>
 800c5f6:	2306      	movs	r3, #6
 800c5f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800c5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	f107 0218 	add.w	r2, r7, #24
 800c602:	21f7      	movs	r1, #247	@ 0xf7
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f7ff faa6 	bl	800bb56 <read_data>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d001      	beq.n	800c614 <bmp280_read_fixed+0x50>
		return false;
 800c610:	2300      	movs	r3, #0
 800c612:	e038      	b.n	800c686 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800c614:	7e3b      	ldrb	r3, [r7, #24]
 800c616:	031a      	lsls	r2, r3, #12
 800c618:	7e7b      	ldrb	r3, [r7, #25]
 800c61a:	011b      	lsls	r3, r3, #4
 800c61c:	4313      	orrs	r3, r2
 800c61e:	7eba      	ldrb	r2, [r7, #26]
 800c620:	0912      	lsrs	r2, r2, #4
 800c622:	b2d2      	uxtb	r2, r2
 800c624:	4313      	orrs	r3, r2
 800c626:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800c628:	7efb      	ldrb	r3, [r7, #27]
 800c62a:	031a      	lsls	r2, r3, #12
 800c62c:	7f3b      	ldrb	r3, [r7, #28]
 800c62e:	011b      	lsls	r3, r3, #4
 800c630:	4313      	orrs	r3, r2
 800c632:	7f7a      	ldrb	r2, [r7, #29]
 800c634:	0912      	lsrs	r2, r2, #4
 800c636:	b2d2      	uxtb	r2, r2
 800c638:	4313      	orrs	r3, r2
 800c63a:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800c63c:	f107 0314 	add.w	r3, r7, #20
 800c640:	461a      	mov	r2, r3
 800c642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f7ff fc67 	bl	800bf18 <compensate_temperature>
 800c64a:	4602      	mov	r2, r0
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	461a      	mov	r2, r3
 800c654:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f7ff fc97 	bl	800bf8a <compensate_pressure>
 800c65c:	4602      	mov	r2, r0
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00d      	beq.n	800c684 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800c668:	7fbb      	ldrb	r3, [r7, #30]
 800c66a:	021b      	lsls	r3, r3, #8
 800c66c:	7ffa      	ldrb	r2, [r7, #31]
 800c66e:	4313      	orrs	r3, r2
 800c670:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	461a      	mov	r2, r3
 800c676:	6a39      	ldr	r1, [r7, #32]
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f7ff ff44 	bl	800c506 <compensate_humidity>
 800c67e:	4602      	mov	r2, r0
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	601a      	str	r2, [r3, #0]
	}

	return true;
 800c684:	2301      	movs	r3, #1
}
 800c686:	4618      	mov	r0, r3
 800c688:	3730      	adds	r7, #48	@ 0x30
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
	...

0800c690 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 800c690:	b580      	push	{r7, lr}
 800c692:	b088      	sub	sp, #32
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
 800c69c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d002      	beq.n	800c6aa <bmp280_read_float+0x1a>
 800c6a4:	f107 0314 	add.w	r3, r7, #20
 800c6a8:	e000      	b.n	800c6ac <bmp280_read_float+0x1c>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f107 0218 	add.w	r2, r7, #24
 800c6b0:	f107 011c 	add.w	r1, r7, #28
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f7ff ff85 	bl	800c5c4 <bmp280_read_fixed>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d028      	beq.n	800c712 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	ee07 3a90 	vmov	s15, r3
 800c6c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c6ca:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800c71c <bmp280_read_float+0x8c>
 800c6ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	ee07 3a90 	vmov	s15, r3
 800c6de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c6e2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800c720 <bmp280_read_float+0x90>
 800c6e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00b      	beq.n	800c70e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	ee07 3a90 	vmov	s15, r3
 800c6fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c700:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800c724 <bmp280_read_float+0x94>
 800c704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800c70e:	2301      	movs	r3, #1
 800c710:	e000      	b.n	800c714 <bmp280_read_float+0x84>
	}

	return false;
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3720      	adds	r7, #32
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	42c80000 	.word	0x42c80000
 800c720:	43800000 	.word	0x43800000
 800c724:	44800000 	.word	0x44800000

0800c728 <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <malloc>:
 800c744:	4b02      	ldr	r3, [pc, #8]	@ (800c750 <malloc+0xc>)
 800c746:	4601      	mov	r1, r0
 800c748:	6818      	ldr	r0, [r3, #0]
 800c74a:	f000 b825 	b.w	800c798 <_malloc_r>
 800c74e:	bf00      	nop
 800c750:	2400001c 	.word	0x2400001c

0800c754 <sbrk_aligned>:
 800c754:	b570      	push	{r4, r5, r6, lr}
 800c756:	4e0f      	ldr	r6, [pc, #60]	@ (800c794 <sbrk_aligned+0x40>)
 800c758:	460c      	mov	r4, r1
 800c75a:	6831      	ldr	r1, [r6, #0]
 800c75c:	4605      	mov	r5, r0
 800c75e:	b911      	cbnz	r1, 800c766 <sbrk_aligned+0x12>
 800c760:	f000 fe34 	bl	800d3cc <_sbrk_r>
 800c764:	6030      	str	r0, [r6, #0]
 800c766:	4621      	mov	r1, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	f000 fe2f 	bl	800d3cc <_sbrk_r>
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	d103      	bne.n	800c77a <sbrk_aligned+0x26>
 800c772:	f04f 34ff 	mov.w	r4, #4294967295
 800c776:	4620      	mov	r0, r4
 800c778:	bd70      	pop	{r4, r5, r6, pc}
 800c77a:	1cc4      	adds	r4, r0, #3
 800c77c:	f024 0403 	bic.w	r4, r4, #3
 800c780:	42a0      	cmp	r0, r4
 800c782:	d0f8      	beq.n	800c776 <sbrk_aligned+0x22>
 800c784:	1a21      	subs	r1, r4, r0
 800c786:	4628      	mov	r0, r5
 800c788:	f000 fe20 	bl	800d3cc <_sbrk_r>
 800c78c:	3001      	adds	r0, #1
 800c78e:	d1f2      	bne.n	800c776 <sbrk_aligned+0x22>
 800c790:	e7ef      	b.n	800c772 <sbrk_aligned+0x1e>
 800c792:	bf00      	nop
 800c794:	24000cb4 	.word	0x24000cb4

0800c798 <_malloc_r>:
 800c798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c79c:	1ccd      	adds	r5, r1, #3
 800c79e:	f025 0503 	bic.w	r5, r5, #3
 800c7a2:	3508      	adds	r5, #8
 800c7a4:	2d0c      	cmp	r5, #12
 800c7a6:	bf38      	it	cc
 800c7a8:	250c      	movcc	r5, #12
 800c7aa:	2d00      	cmp	r5, #0
 800c7ac:	4606      	mov	r6, r0
 800c7ae:	db01      	blt.n	800c7b4 <_malloc_r+0x1c>
 800c7b0:	42a9      	cmp	r1, r5
 800c7b2:	d904      	bls.n	800c7be <_malloc_r+0x26>
 800c7b4:	230c      	movs	r3, #12
 800c7b6:	6033      	str	r3, [r6, #0]
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c894 <_malloc_r+0xfc>
 800c7c2:	f000 f869 	bl	800c898 <__malloc_lock>
 800c7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c7ca:	461c      	mov	r4, r3
 800c7cc:	bb44      	cbnz	r4, 800c820 <_malloc_r+0x88>
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f7ff ffbf 	bl	800c754 <sbrk_aligned>
 800c7d6:	1c43      	adds	r3, r0, #1
 800c7d8:	4604      	mov	r4, r0
 800c7da:	d158      	bne.n	800c88e <_malloc_r+0xf6>
 800c7dc:	f8d8 4000 	ldr.w	r4, [r8]
 800c7e0:	4627      	mov	r7, r4
 800c7e2:	2f00      	cmp	r7, #0
 800c7e4:	d143      	bne.n	800c86e <_malloc_r+0xd6>
 800c7e6:	2c00      	cmp	r4, #0
 800c7e8:	d04b      	beq.n	800c882 <_malloc_r+0xea>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	4639      	mov	r1, r7
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	eb04 0903 	add.w	r9, r4, r3
 800c7f4:	f000 fdea 	bl	800d3cc <_sbrk_r>
 800c7f8:	4581      	cmp	r9, r0
 800c7fa:	d142      	bne.n	800c882 <_malloc_r+0xea>
 800c7fc:	6821      	ldr	r1, [r4, #0]
 800c7fe:	1a6d      	subs	r5, r5, r1
 800c800:	4629      	mov	r1, r5
 800c802:	4630      	mov	r0, r6
 800c804:	f7ff ffa6 	bl	800c754 <sbrk_aligned>
 800c808:	3001      	adds	r0, #1
 800c80a:	d03a      	beq.n	800c882 <_malloc_r+0xea>
 800c80c:	6823      	ldr	r3, [r4, #0]
 800c80e:	442b      	add	r3, r5
 800c810:	6023      	str	r3, [r4, #0]
 800c812:	f8d8 3000 	ldr.w	r3, [r8]
 800c816:	685a      	ldr	r2, [r3, #4]
 800c818:	bb62      	cbnz	r2, 800c874 <_malloc_r+0xdc>
 800c81a:	f8c8 7000 	str.w	r7, [r8]
 800c81e:	e00f      	b.n	800c840 <_malloc_r+0xa8>
 800c820:	6822      	ldr	r2, [r4, #0]
 800c822:	1b52      	subs	r2, r2, r5
 800c824:	d420      	bmi.n	800c868 <_malloc_r+0xd0>
 800c826:	2a0b      	cmp	r2, #11
 800c828:	d917      	bls.n	800c85a <_malloc_r+0xc2>
 800c82a:	1961      	adds	r1, r4, r5
 800c82c:	42a3      	cmp	r3, r4
 800c82e:	6025      	str	r5, [r4, #0]
 800c830:	bf18      	it	ne
 800c832:	6059      	strne	r1, [r3, #4]
 800c834:	6863      	ldr	r3, [r4, #4]
 800c836:	bf08      	it	eq
 800c838:	f8c8 1000 	streq.w	r1, [r8]
 800c83c:	5162      	str	r2, [r4, r5]
 800c83e:	604b      	str	r3, [r1, #4]
 800c840:	4630      	mov	r0, r6
 800c842:	f000 f82f 	bl	800c8a4 <__malloc_unlock>
 800c846:	f104 000b 	add.w	r0, r4, #11
 800c84a:	1d23      	adds	r3, r4, #4
 800c84c:	f020 0007 	bic.w	r0, r0, #7
 800c850:	1ac2      	subs	r2, r0, r3
 800c852:	bf1c      	itt	ne
 800c854:	1a1b      	subne	r3, r3, r0
 800c856:	50a3      	strne	r3, [r4, r2]
 800c858:	e7af      	b.n	800c7ba <_malloc_r+0x22>
 800c85a:	6862      	ldr	r2, [r4, #4]
 800c85c:	42a3      	cmp	r3, r4
 800c85e:	bf0c      	ite	eq
 800c860:	f8c8 2000 	streq.w	r2, [r8]
 800c864:	605a      	strne	r2, [r3, #4]
 800c866:	e7eb      	b.n	800c840 <_malloc_r+0xa8>
 800c868:	4623      	mov	r3, r4
 800c86a:	6864      	ldr	r4, [r4, #4]
 800c86c:	e7ae      	b.n	800c7cc <_malloc_r+0x34>
 800c86e:	463c      	mov	r4, r7
 800c870:	687f      	ldr	r7, [r7, #4]
 800c872:	e7b6      	b.n	800c7e2 <_malloc_r+0x4a>
 800c874:	461a      	mov	r2, r3
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	42a3      	cmp	r3, r4
 800c87a:	d1fb      	bne.n	800c874 <_malloc_r+0xdc>
 800c87c:	2300      	movs	r3, #0
 800c87e:	6053      	str	r3, [r2, #4]
 800c880:	e7de      	b.n	800c840 <_malloc_r+0xa8>
 800c882:	230c      	movs	r3, #12
 800c884:	6033      	str	r3, [r6, #0]
 800c886:	4630      	mov	r0, r6
 800c888:	f000 f80c 	bl	800c8a4 <__malloc_unlock>
 800c88c:	e794      	b.n	800c7b8 <_malloc_r+0x20>
 800c88e:	6005      	str	r5, [r0, #0]
 800c890:	e7d6      	b.n	800c840 <_malloc_r+0xa8>
 800c892:	bf00      	nop
 800c894:	24000cb8 	.word	0x24000cb8

0800c898 <__malloc_lock>:
 800c898:	4801      	ldr	r0, [pc, #4]	@ (800c8a0 <__malloc_lock+0x8>)
 800c89a:	f000 bde4 	b.w	800d466 <__retarget_lock_acquire_recursive>
 800c89e:	bf00      	nop
 800c8a0:	24000dfc 	.word	0x24000dfc

0800c8a4 <__malloc_unlock>:
 800c8a4:	4801      	ldr	r0, [pc, #4]	@ (800c8ac <__malloc_unlock+0x8>)
 800c8a6:	f000 bddf 	b.w	800d468 <__retarget_lock_release_recursive>
 800c8aa:	bf00      	nop
 800c8ac:	24000dfc 	.word	0x24000dfc

0800c8b0 <__cvt>:
 800c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8b2:	ed2d 8b02 	vpush	{d8}
 800c8b6:	eeb0 8b40 	vmov.f64	d8, d0
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	4617      	mov	r7, r2
 800c8be:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c8c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8c2:	ee18 2a90 	vmov	r2, s17
 800c8c6:	f025 0520 	bic.w	r5, r5, #32
 800c8ca:	2a00      	cmp	r2, #0
 800c8cc:	bfb6      	itet	lt
 800c8ce:	222d      	movlt	r2, #45	@ 0x2d
 800c8d0:	2200      	movge	r2, #0
 800c8d2:	eeb1 8b40 	vneglt.f64	d8, d0
 800c8d6:	2d46      	cmp	r5, #70	@ 0x46
 800c8d8:	460c      	mov	r4, r1
 800c8da:	701a      	strb	r2, [r3, #0]
 800c8dc:	d004      	beq.n	800c8e8 <__cvt+0x38>
 800c8de:	2d45      	cmp	r5, #69	@ 0x45
 800c8e0:	d100      	bne.n	800c8e4 <__cvt+0x34>
 800c8e2:	3401      	adds	r4, #1
 800c8e4:	2102      	movs	r1, #2
 800c8e6:	e000      	b.n	800c8ea <__cvt+0x3a>
 800c8e8:	2103      	movs	r1, #3
 800c8ea:	ab03      	add	r3, sp, #12
 800c8ec:	9301      	str	r3, [sp, #4]
 800c8ee:	ab02      	add	r3, sp, #8
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	4622      	mov	r2, r4
 800c8f4:	4633      	mov	r3, r6
 800c8f6:	eeb0 0b48 	vmov.f64	d0, d8
 800c8fa:	f000 fe4d 	bl	800d598 <_dtoa_r>
 800c8fe:	2d47      	cmp	r5, #71	@ 0x47
 800c900:	d114      	bne.n	800c92c <__cvt+0x7c>
 800c902:	07fb      	lsls	r3, r7, #31
 800c904:	d50a      	bpl.n	800c91c <__cvt+0x6c>
 800c906:	1902      	adds	r2, r0, r4
 800c908:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c910:	bf08      	it	eq
 800c912:	9203      	streq	r2, [sp, #12]
 800c914:	2130      	movs	r1, #48	@ 0x30
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	4293      	cmp	r3, r2
 800c91a:	d319      	bcc.n	800c950 <__cvt+0xa0>
 800c91c:	9b03      	ldr	r3, [sp, #12]
 800c91e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c920:	1a1b      	subs	r3, r3, r0
 800c922:	6013      	str	r3, [r2, #0]
 800c924:	b005      	add	sp, #20
 800c926:	ecbd 8b02 	vpop	{d8}
 800c92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c92c:	2d46      	cmp	r5, #70	@ 0x46
 800c92e:	eb00 0204 	add.w	r2, r0, r4
 800c932:	d1e9      	bne.n	800c908 <__cvt+0x58>
 800c934:	7803      	ldrb	r3, [r0, #0]
 800c936:	2b30      	cmp	r3, #48	@ 0x30
 800c938:	d107      	bne.n	800c94a <__cvt+0x9a>
 800c93a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c942:	bf1c      	itt	ne
 800c944:	f1c4 0401 	rsbne	r4, r4, #1
 800c948:	6034      	strne	r4, [r6, #0]
 800c94a:	6833      	ldr	r3, [r6, #0]
 800c94c:	441a      	add	r2, r3
 800c94e:	e7db      	b.n	800c908 <__cvt+0x58>
 800c950:	1c5c      	adds	r4, r3, #1
 800c952:	9403      	str	r4, [sp, #12]
 800c954:	7019      	strb	r1, [r3, #0]
 800c956:	e7de      	b.n	800c916 <__cvt+0x66>

0800c958 <__exponent>:
 800c958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c95a:	2900      	cmp	r1, #0
 800c95c:	bfba      	itte	lt
 800c95e:	4249      	neglt	r1, r1
 800c960:	232d      	movlt	r3, #45	@ 0x2d
 800c962:	232b      	movge	r3, #43	@ 0x2b
 800c964:	2909      	cmp	r1, #9
 800c966:	7002      	strb	r2, [r0, #0]
 800c968:	7043      	strb	r3, [r0, #1]
 800c96a:	dd29      	ble.n	800c9c0 <__exponent+0x68>
 800c96c:	f10d 0307 	add.w	r3, sp, #7
 800c970:	461d      	mov	r5, r3
 800c972:	270a      	movs	r7, #10
 800c974:	461a      	mov	r2, r3
 800c976:	fbb1 f6f7 	udiv	r6, r1, r7
 800c97a:	fb07 1416 	mls	r4, r7, r6, r1
 800c97e:	3430      	adds	r4, #48	@ 0x30
 800c980:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c984:	460c      	mov	r4, r1
 800c986:	2c63      	cmp	r4, #99	@ 0x63
 800c988:	f103 33ff 	add.w	r3, r3, #4294967295
 800c98c:	4631      	mov	r1, r6
 800c98e:	dcf1      	bgt.n	800c974 <__exponent+0x1c>
 800c990:	3130      	adds	r1, #48	@ 0x30
 800c992:	1e94      	subs	r4, r2, #2
 800c994:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c998:	1c41      	adds	r1, r0, #1
 800c99a:	4623      	mov	r3, r4
 800c99c:	42ab      	cmp	r3, r5
 800c99e:	d30a      	bcc.n	800c9b6 <__exponent+0x5e>
 800c9a0:	f10d 0309 	add.w	r3, sp, #9
 800c9a4:	1a9b      	subs	r3, r3, r2
 800c9a6:	42ac      	cmp	r4, r5
 800c9a8:	bf88      	it	hi
 800c9aa:	2300      	movhi	r3, #0
 800c9ac:	3302      	adds	r3, #2
 800c9ae:	4403      	add	r3, r0
 800c9b0:	1a18      	subs	r0, r3, r0
 800c9b2:	b003      	add	sp, #12
 800c9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c9ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c9be:	e7ed      	b.n	800c99c <__exponent+0x44>
 800c9c0:	2330      	movs	r3, #48	@ 0x30
 800c9c2:	3130      	adds	r1, #48	@ 0x30
 800c9c4:	7083      	strb	r3, [r0, #2]
 800c9c6:	70c1      	strb	r1, [r0, #3]
 800c9c8:	1d03      	adds	r3, r0, #4
 800c9ca:	e7f1      	b.n	800c9b0 <__exponent+0x58>
 800c9cc:	0000      	movs	r0, r0
	...

0800c9d0 <_printf_float>:
 800c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	b08d      	sub	sp, #52	@ 0x34
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c9dc:	4616      	mov	r6, r2
 800c9de:	461f      	mov	r7, r3
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	f000 fcbb 	bl	800d35c <_localeconv_r>
 800c9e6:	f8d0 b000 	ldr.w	fp, [r0]
 800c9ea:	4658      	mov	r0, fp
 800c9ec:	f7f3 fcd0 	bl	8000390 <strlen>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c9f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c9fc:	6822      	ldr	r2, [r4, #0]
 800c9fe:	9005      	str	r0, [sp, #20]
 800ca00:	3307      	adds	r3, #7
 800ca02:	f023 0307 	bic.w	r3, r3, #7
 800ca06:	f103 0108 	add.w	r1, r3, #8
 800ca0a:	f8c8 1000 	str.w	r1, [r8]
 800ca0e:	ed93 0b00 	vldr	d0, [r3]
 800ca12:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800cc70 <_printf_float+0x2a0>
 800ca16:	eeb0 7bc0 	vabs.f64	d7, d0
 800ca1a:	eeb4 7b46 	vcmp.f64	d7, d6
 800ca1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca22:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ca26:	dd24      	ble.n	800ca72 <_printf_float+0xa2>
 800ca28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ca2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca30:	d502      	bpl.n	800ca38 <_printf_float+0x68>
 800ca32:	232d      	movs	r3, #45	@ 0x2d
 800ca34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca38:	498f      	ldr	r1, [pc, #572]	@ (800cc78 <_printf_float+0x2a8>)
 800ca3a:	4b90      	ldr	r3, [pc, #576]	@ (800cc7c <_printf_float+0x2ac>)
 800ca3c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ca40:	bf8c      	ite	hi
 800ca42:	4688      	movhi	r8, r1
 800ca44:	4698      	movls	r8, r3
 800ca46:	f022 0204 	bic.w	r2, r2, #4
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	6123      	str	r3, [r4, #16]
 800ca4e:	6022      	str	r2, [r4, #0]
 800ca50:	f04f 0a00 	mov.w	sl, #0
 800ca54:	9700      	str	r7, [sp, #0]
 800ca56:	4633      	mov	r3, r6
 800ca58:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f000 f9d1 	bl	800ce04 <_printf_common>
 800ca62:	3001      	adds	r0, #1
 800ca64:	f040 8089 	bne.w	800cb7a <_printf_float+0x1aa>
 800ca68:	f04f 30ff 	mov.w	r0, #4294967295
 800ca6c:	b00d      	add	sp, #52	@ 0x34
 800ca6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca72:	eeb4 0b40 	vcmp.f64	d0, d0
 800ca76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca7a:	d709      	bvc.n	800ca90 <_printf_float+0xc0>
 800ca7c:	ee10 3a90 	vmov	r3, s1
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	bfbc      	itt	lt
 800ca84:	232d      	movlt	r3, #45	@ 0x2d
 800ca86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ca8a:	497d      	ldr	r1, [pc, #500]	@ (800cc80 <_printf_float+0x2b0>)
 800ca8c:	4b7d      	ldr	r3, [pc, #500]	@ (800cc84 <_printf_float+0x2b4>)
 800ca8e:	e7d5      	b.n	800ca3c <_printf_float+0x6c>
 800ca90:	6863      	ldr	r3, [r4, #4]
 800ca92:	1c59      	adds	r1, r3, #1
 800ca94:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ca98:	d139      	bne.n	800cb0e <_printf_float+0x13e>
 800ca9a:	2306      	movs	r3, #6
 800ca9c:	6063      	str	r3, [r4, #4]
 800ca9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800caa2:	2300      	movs	r3, #0
 800caa4:	6022      	str	r2, [r4, #0]
 800caa6:	9303      	str	r3, [sp, #12]
 800caa8:	ab0a      	add	r3, sp, #40	@ 0x28
 800caaa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800caae:	ab09      	add	r3, sp, #36	@ 0x24
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	6861      	ldr	r1, [r4, #4]
 800cab4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cab8:	4628      	mov	r0, r5
 800caba:	f7ff fef9 	bl	800c8b0 <__cvt>
 800cabe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cac2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cac4:	4680      	mov	r8, r0
 800cac6:	d129      	bne.n	800cb1c <_printf_float+0x14c>
 800cac8:	1cc8      	adds	r0, r1, #3
 800caca:	db02      	blt.n	800cad2 <_printf_float+0x102>
 800cacc:	6863      	ldr	r3, [r4, #4]
 800cace:	4299      	cmp	r1, r3
 800cad0:	dd41      	ble.n	800cb56 <_printf_float+0x186>
 800cad2:	f1a9 0902 	sub.w	r9, r9, #2
 800cad6:	fa5f f989 	uxtb.w	r9, r9
 800cada:	3901      	subs	r1, #1
 800cadc:	464a      	mov	r2, r9
 800cade:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cae2:	9109      	str	r1, [sp, #36]	@ 0x24
 800cae4:	f7ff ff38 	bl	800c958 <__exponent>
 800cae8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800caea:	1813      	adds	r3, r2, r0
 800caec:	2a01      	cmp	r2, #1
 800caee:	4682      	mov	sl, r0
 800caf0:	6123      	str	r3, [r4, #16]
 800caf2:	dc02      	bgt.n	800cafa <_printf_float+0x12a>
 800caf4:	6822      	ldr	r2, [r4, #0]
 800caf6:	07d2      	lsls	r2, r2, #31
 800caf8:	d501      	bpl.n	800cafe <_printf_float+0x12e>
 800cafa:	3301      	adds	r3, #1
 800cafc:	6123      	str	r3, [r4, #16]
 800cafe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d0a6      	beq.n	800ca54 <_printf_float+0x84>
 800cb06:	232d      	movs	r3, #45	@ 0x2d
 800cb08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb0c:	e7a2      	b.n	800ca54 <_printf_float+0x84>
 800cb0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cb12:	d1c4      	bne.n	800ca9e <_printf_float+0xce>
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1c2      	bne.n	800ca9e <_printf_float+0xce>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e7bf      	b.n	800ca9c <_printf_float+0xcc>
 800cb1c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cb20:	d9db      	bls.n	800cada <_printf_float+0x10a>
 800cb22:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800cb26:	d118      	bne.n	800cb5a <_printf_float+0x18a>
 800cb28:	2900      	cmp	r1, #0
 800cb2a:	6863      	ldr	r3, [r4, #4]
 800cb2c:	dd0b      	ble.n	800cb46 <_printf_float+0x176>
 800cb2e:	6121      	str	r1, [r4, #16]
 800cb30:	b913      	cbnz	r3, 800cb38 <_printf_float+0x168>
 800cb32:	6822      	ldr	r2, [r4, #0]
 800cb34:	07d0      	lsls	r0, r2, #31
 800cb36:	d502      	bpl.n	800cb3e <_printf_float+0x16e>
 800cb38:	3301      	adds	r3, #1
 800cb3a:	440b      	add	r3, r1
 800cb3c:	6123      	str	r3, [r4, #16]
 800cb3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cb40:	f04f 0a00 	mov.w	sl, #0
 800cb44:	e7db      	b.n	800cafe <_printf_float+0x12e>
 800cb46:	b913      	cbnz	r3, 800cb4e <_printf_float+0x17e>
 800cb48:	6822      	ldr	r2, [r4, #0]
 800cb4a:	07d2      	lsls	r2, r2, #31
 800cb4c:	d501      	bpl.n	800cb52 <_printf_float+0x182>
 800cb4e:	3302      	adds	r3, #2
 800cb50:	e7f4      	b.n	800cb3c <_printf_float+0x16c>
 800cb52:	2301      	movs	r3, #1
 800cb54:	e7f2      	b.n	800cb3c <_printf_float+0x16c>
 800cb56:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800cb5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb5c:	4299      	cmp	r1, r3
 800cb5e:	db05      	blt.n	800cb6c <_printf_float+0x19c>
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	6121      	str	r1, [r4, #16]
 800cb64:	07d8      	lsls	r0, r3, #31
 800cb66:	d5ea      	bpl.n	800cb3e <_printf_float+0x16e>
 800cb68:	1c4b      	adds	r3, r1, #1
 800cb6a:	e7e7      	b.n	800cb3c <_printf_float+0x16c>
 800cb6c:	2900      	cmp	r1, #0
 800cb6e:	bfd4      	ite	le
 800cb70:	f1c1 0202 	rsble	r2, r1, #2
 800cb74:	2201      	movgt	r2, #1
 800cb76:	4413      	add	r3, r2
 800cb78:	e7e0      	b.n	800cb3c <_printf_float+0x16c>
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	055a      	lsls	r2, r3, #21
 800cb7e:	d407      	bmi.n	800cb90 <_printf_float+0x1c0>
 800cb80:	6923      	ldr	r3, [r4, #16]
 800cb82:	4642      	mov	r2, r8
 800cb84:	4631      	mov	r1, r6
 800cb86:	4628      	mov	r0, r5
 800cb88:	47b8      	blx	r7
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d12a      	bne.n	800cbe4 <_printf_float+0x214>
 800cb8e:	e76b      	b.n	800ca68 <_printf_float+0x98>
 800cb90:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800cb94:	f240 80e0 	bls.w	800cd58 <_printf_float+0x388>
 800cb98:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800cb9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba4:	d133      	bne.n	800cc0e <_printf_float+0x23e>
 800cba6:	4a38      	ldr	r2, [pc, #224]	@ (800cc88 <_printf_float+0x2b8>)
 800cba8:	2301      	movs	r3, #1
 800cbaa:	4631      	mov	r1, r6
 800cbac:	4628      	mov	r0, r5
 800cbae:	47b8      	blx	r7
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	f43f af59 	beq.w	800ca68 <_printf_float+0x98>
 800cbb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cbba:	4543      	cmp	r3, r8
 800cbbc:	db02      	blt.n	800cbc4 <_printf_float+0x1f4>
 800cbbe:	6823      	ldr	r3, [r4, #0]
 800cbc0:	07d8      	lsls	r0, r3, #31
 800cbc2:	d50f      	bpl.n	800cbe4 <_printf_float+0x214>
 800cbc4:	9b05      	ldr	r3, [sp, #20]
 800cbc6:	465a      	mov	r2, fp
 800cbc8:	4631      	mov	r1, r6
 800cbca:	4628      	mov	r0, r5
 800cbcc:	47b8      	blx	r7
 800cbce:	3001      	adds	r0, #1
 800cbd0:	f43f af4a 	beq.w	800ca68 <_printf_float+0x98>
 800cbd4:	f04f 0900 	mov.w	r9, #0
 800cbd8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbdc:	f104 0a1a 	add.w	sl, r4, #26
 800cbe0:	45c8      	cmp	r8, r9
 800cbe2:	dc09      	bgt.n	800cbf8 <_printf_float+0x228>
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	079b      	lsls	r3, r3, #30
 800cbe8:	f100 8107 	bmi.w	800cdfa <_printf_float+0x42a>
 800cbec:	68e0      	ldr	r0, [r4, #12]
 800cbee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbf0:	4298      	cmp	r0, r3
 800cbf2:	bfb8      	it	lt
 800cbf4:	4618      	movlt	r0, r3
 800cbf6:	e739      	b.n	800ca6c <_printf_float+0x9c>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	4652      	mov	r2, sl
 800cbfc:	4631      	mov	r1, r6
 800cbfe:	4628      	mov	r0, r5
 800cc00:	47b8      	blx	r7
 800cc02:	3001      	adds	r0, #1
 800cc04:	f43f af30 	beq.w	800ca68 <_printf_float+0x98>
 800cc08:	f109 0901 	add.w	r9, r9, #1
 800cc0c:	e7e8      	b.n	800cbe0 <_printf_float+0x210>
 800cc0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	dc3b      	bgt.n	800cc8c <_printf_float+0x2bc>
 800cc14:	4a1c      	ldr	r2, [pc, #112]	@ (800cc88 <_printf_float+0x2b8>)
 800cc16:	2301      	movs	r3, #1
 800cc18:	4631      	mov	r1, r6
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	47b8      	blx	r7
 800cc1e:	3001      	adds	r0, #1
 800cc20:	f43f af22 	beq.w	800ca68 <_printf_float+0x98>
 800cc24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cc28:	ea59 0303 	orrs.w	r3, r9, r3
 800cc2c:	d102      	bne.n	800cc34 <_printf_float+0x264>
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	07d9      	lsls	r1, r3, #31
 800cc32:	d5d7      	bpl.n	800cbe4 <_printf_float+0x214>
 800cc34:	9b05      	ldr	r3, [sp, #20]
 800cc36:	465a      	mov	r2, fp
 800cc38:	4631      	mov	r1, r6
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	47b8      	blx	r7
 800cc3e:	3001      	adds	r0, #1
 800cc40:	f43f af12 	beq.w	800ca68 <_printf_float+0x98>
 800cc44:	f04f 0a00 	mov.w	sl, #0
 800cc48:	f104 0b1a 	add.w	fp, r4, #26
 800cc4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc4e:	425b      	negs	r3, r3
 800cc50:	4553      	cmp	r3, sl
 800cc52:	dc01      	bgt.n	800cc58 <_printf_float+0x288>
 800cc54:	464b      	mov	r3, r9
 800cc56:	e794      	b.n	800cb82 <_printf_float+0x1b2>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	465a      	mov	r2, fp
 800cc5c:	4631      	mov	r1, r6
 800cc5e:	4628      	mov	r0, r5
 800cc60:	47b8      	blx	r7
 800cc62:	3001      	adds	r0, #1
 800cc64:	f43f af00 	beq.w	800ca68 <_printf_float+0x98>
 800cc68:	f10a 0a01 	add.w	sl, sl, #1
 800cc6c:	e7ee      	b.n	800cc4c <_printf_float+0x27c>
 800cc6e:	bf00      	nop
 800cc70:	ffffffff 	.word	0xffffffff
 800cc74:	7fefffff 	.word	0x7fefffff
 800cc78:	0800f020 	.word	0x0800f020
 800cc7c:	0800f01c 	.word	0x0800f01c
 800cc80:	0800f028 	.word	0x0800f028
 800cc84:	0800f024 	.word	0x0800f024
 800cc88:	0800f02c 	.word	0x0800f02c
 800cc8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cc8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cc92:	4553      	cmp	r3, sl
 800cc94:	bfa8      	it	ge
 800cc96:	4653      	movge	r3, sl
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	4699      	mov	r9, r3
 800cc9c:	dc37      	bgt.n	800cd0e <_printf_float+0x33e>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	9307      	str	r3, [sp, #28]
 800cca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cca6:	f104 021a 	add.w	r2, r4, #26
 800ccaa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ccac:	9907      	ldr	r1, [sp, #28]
 800ccae:	9306      	str	r3, [sp, #24]
 800ccb0:	eba3 0309 	sub.w	r3, r3, r9
 800ccb4:	428b      	cmp	r3, r1
 800ccb6:	dc31      	bgt.n	800cd1c <_printf_float+0x34c>
 800ccb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccba:	459a      	cmp	sl, r3
 800ccbc:	dc3b      	bgt.n	800cd36 <_printf_float+0x366>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	07da      	lsls	r2, r3, #31
 800ccc2:	d438      	bmi.n	800cd36 <_printf_float+0x366>
 800ccc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccc6:	ebaa 0903 	sub.w	r9, sl, r3
 800ccca:	9b06      	ldr	r3, [sp, #24]
 800cccc:	ebaa 0303 	sub.w	r3, sl, r3
 800ccd0:	4599      	cmp	r9, r3
 800ccd2:	bfa8      	it	ge
 800ccd4:	4699      	movge	r9, r3
 800ccd6:	f1b9 0f00 	cmp.w	r9, #0
 800ccda:	dc34      	bgt.n	800cd46 <_printf_float+0x376>
 800ccdc:	f04f 0800 	mov.w	r8, #0
 800cce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cce4:	f104 0b1a 	add.w	fp, r4, #26
 800cce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccea:	ebaa 0303 	sub.w	r3, sl, r3
 800ccee:	eba3 0309 	sub.w	r3, r3, r9
 800ccf2:	4543      	cmp	r3, r8
 800ccf4:	f77f af76 	ble.w	800cbe4 <_printf_float+0x214>
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	465a      	mov	r2, fp
 800ccfc:	4631      	mov	r1, r6
 800ccfe:	4628      	mov	r0, r5
 800cd00:	47b8      	blx	r7
 800cd02:	3001      	adds	r0, #1
 800cd04:	f43f aeb0 	beq.w	800ca68 <_printf_float+0x98>
 800cd08:	f108 0801 	add.w	r8, r8, #1
 800cd0c:	e7ec      	b.n	800cce8 <_printf_float+0x318>
 800cd0e:	4642      	mov	r2, r8
 800cd10:	4631      	mov	r1, r6
 800cd12:	4628      	mov	r0, r5
 800cd14:	47b8      	blx	r7
 800cd16:	3001      	adds	r0, #1
 800cd18:	d1c1      	bne.n	800cc9e <_printf_float+0x2ce>
 800cd1a:	e6a5      	b.n	800ca68 <_printf_float+0x98>
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	4631      	mov	r1, r6
 800cd20:	4628      	mov	r0, r5
 800cd22:	9206      	str	r2, [sp, #24]
 800cd24:	47b8      	blx	r7
 800cd26:	3001      	adds	r0, #1
 800cd28:	f43f ae9e 	beq.w	800ca68 <_printf_float+0x98>
 800cd2c:	9b07      	ldr	r3, [sp, #28]
 800cd2e:	9a06      	ldr	r2, [sp, #24]
 800cd30:	3301      	adds	r3, #1
 800cd32:	9307      	str	r3, [sp, #28]
 800cd34:	e7b9      	b.n	800ccaa <_printf_float+0x2da>
 800cd36:	9b05      	ldr	r3, [sp, #20]
 800cd38:	465a      	mov	r2, fp
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	47b8      	blx	r7
 800cd40:	3001      	adds	r0, #1
 800cd42:	d1bf      	bne.n	800ccc4 <_printf_float+0x2f4>
 800cd44:	e690      	b.n	800ca68 <_printf_float+0x98>
 800cd46:	9a06      	ldr	r2, [sp, #24]
 800cd48:	464b      	mov	r3, r9
 800cd4a:	4442      	add	r2, r8
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b8      	blx	r7
 800cd52:	3001      	adds	r0, #1
 800cd54:	d1c2      	bne.n	800ccdc <_printf_float+0x30c>
 800cd56:	e687      	b.n	800ca68 <_printf_float+0x98>
 800cd58:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800cd5c:	f1b9 0f01 	cmp.w	r9, #1
 800cd60:	dc01      	bgt.n	800cd66 <_printf_float+0x396>
 800cd62:	07db      	lsls	r3, r3, #31
 800cd64:	d536      	bpl.n	800cdd4 <_printf_float+0x404>
 800cd66:	2301      	movs	r3, #1
 800cd68:	4642      	mov	r2, r8
 800cd6a:	4631      	mov	r1, r6
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	47b8      	blx	r7
 800cd70:	3001      	adds	r0, #1
 800cd72:	f43f ae79 	beq.w	800ca68 <_printf_float+0x98>
 800cd76:	9b05      	ldr	r3, [sp, #20]
 800cd78:	465a      	mov	r2, fp
 800cd7a:	4631      	mov	r1, r6
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	47b8      	blx	r7
 800cd80:	3001      	adds	r0, #1
 800cd82:	f43f ae71 	beq.w	800ca68 <_printf_float+0x98>
 800cd86:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800cd8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd92:	f109 39ff 	add.w	r9, r9, #4294967295
 800cd96:	d018      	beq.n	800cdca <_printf_float+0x3fa>
 800cd98:	464b      	mov	r3, r9
 800cd9a:	f108 0201 	add.w	r2, r8, #1
 800cd9e:	4631      	mov	r1, r6
 800cda0:	4628      	mov	r0, r5
 800cda2:	47b8      	blx	r7
 800cda4:	3001      	adds	r0, #1
 800cda6:	d10c      	bne.n	800cdc2 <_printf_float+0x3f2>
 800cda8:	e65e      	b.n	800ca68 <_printf_float+0x98>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	465a      	mov	r2, fp
 800cdae:	4631      	mov	r1, r6
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	47b8      	blx	r7
 800cdb4:	3001      	adds	r0, #1
 800cdb6:	f43f ae57 	beq.w	800ca68 <_printf_float+0x98>
 800cdba:	f108 0801 	add.w	r8, r8, #1
 800cdbe:	45c8      	cmp	r8, r9
 800cdc0:	dbf3      	blt.n	800cdaa <_printf_float+0x3da>
 800cdc2:	4653      	mov	r3, sl
 800cdc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cdc8:	e6dc      	b.n	800cb84 <_printf_float+0x1b4>
 800cdca:	f04f 0800 	mov.w	r8, #0
 800cdce:	f104 0b1a 	add.w	fp, r4, #26
 800cdd2:	e7f4      	b.n	800cdbe <_printf_float+0x3ee>
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	4642      	mov	r2, r8
 800cdd8:	e7e1      	b.n	800cd9e <_printf_float+0x3ce>
 800cdda:	2301      	movs	r3, #1
 800cddc:	464a      	mov	r2, r9
 800cdde:	4631      	mov	r1, r6
 800cde0:	4628      	mov	r0, r5
 800cde2:	47b8      	blx	r7
 800cde4:	3001      	adds	r0, #1
 800cde6:	f43f ae3f 	beq.w	800ca68 <_printf_float+0x98>
 800cdea:	f108 0801 	add.w	r8, r8, #1
 800cdee:	68e3      	ldr	r3, [r4, #12]
 800cdf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cdf2:	1a5b      	subs	r3, r3, r1
 800cdf4:	4543      	cmp	r3, r8
 800cdf6:	dcf0      	bgt.n	800cdda <_printf_float+0x40a>
 800cdf8:	e6f8      	b.n	800cbec <_printf_float+0x21c>
 800cdfa:	f04f 0800 	mov.w	r8, #0
 800cdfe:	f104 0919 	add.w	r9, r4, #25
 800ce02:	e7f4      	b.n	800cdee <_printf_float+0x41e>

0800ce04 <_printf_common>:
 800ce04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce08:	4616      	mov	r6, r2
 800ce0a:	4698      	mov	r8, r3
 800ce0c:	688a      	ldr	r2, [r1, #8]
 800ce0e:	690b      	ldr	r3, [r1, #16]
 800ce10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce14:	4293      	cmp	r3, r2
 800ce16:	bfb8      	it	lt
 800ce18:	4613      	movlt	r3, r2
 800ce1a:	6033      	str	r3, [r6, #0]
 800ce1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ce20:	4607      	mov	r7, r0
 800ce22:	460c      	mov	r4, r1
 800ce24:	b10a      	cbz	r2, 800ce2a <_printf_common+0x26>
 800ce26:	3301      	adds	r3, #1
 800ce28:	6033      	str	r3, [r6, #0]
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	0699      	lsls	r1, r3, #26
 800ce2e:	bf42      	ittt	mi
 800ce30:	6833      	ldrmi	r3, [r6, #0]
 800ce32:	3302      	addmi	r3, #2
 800ce34:	6033      	strmi	r3, [r6, #0]
 800ce36:	6825      	ldr	r5, [r4, #0]
 800ce38:	f015 0506 	ands.w	r5, r5, #6
 800ce3c:	d106      	bne.n	800ce4c <_printf_common+0x48>
 800ce3e:	f104 0a19 	add.w	sl, r4, #25
 800ce42:	68e3      	ldr	r3, [r4, #12]
 800ce44:	6832      	ldr	r2, [r6, #0]
 800ce46:	1a9b      	subs	r3, r3, r2
 800ce48:	42ab      	cmp	r3, r5
 800ce4a:	dc26      	bgt.n	800ce9a <_printf_common+0x96>
 800ce4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ce50:	6822      	ldr	r2, [r4, #0]
 800ce52:	3b00      	subs	r3, #0
 800ce54:	bf18      	it	ne
 800ce56:	2301      	movne	r3, #1
 800ce58:	0692      	lsls	r2, r2, #26
 800ce5a:	d42b      	bmi.n	800ceb4 <_printf_common+0xb0>
 800ce5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ce60:	4641      	mov	r1, r8
 800ce62:	4638      	mov	r0, r7
 800ce64:	47c8      	blx	r9
 800ce66:	3001      	adds	r0, #1
 800ce68:	d01e      	beq.n	800cea8 <_printf_common+0xa4>
 800ce6a:	6823      	ldr	r3, [r4, #0]
 800ce6c:	6922      	ldr	r2, [r4, #16]
 800ce6e:	f003 0306 	and.w	r3, r3, #6
 800ce72:	2b04      	cmp	r3, #4
 800ce74:	bf02      	ittt	eq
 800ce76:	68e5      	ldreq	r5, [r4, #12]
 800ce78:	6833      	ldreq	r3, [r6, #0]
 800ce7a:	1aed      	subeq	r5, r5, r3
 800ce7c:	68a3      	ldr	r3, [r4, #8]
 800ce7e:	bf0c      	ite	eq
 800ce80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce84:	2500      	movne	r5, #0
 800ce86:	4293      	cmp	r3, r2
 800ce88:	bfc4      	itt	gt
 800ce8a:	1a9b      	subgt	r3, r3, r2
 800ce8c:	18ed      	addgt	r5, r5, r3
 800ce8e:	2600      	movs	r6, #0
 800ce90:	341a      	adds	r4, #26
 800ce92:	42b5      	cmp	r5, r6
 800ce94:	d11a      	bne.n	800cecc <_printf_common+0xc8>
 800ce96:	2000      	movs	r0, #0
 800ce98:	e008      	b.n	800ceac <_printf_common+0xa8>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	4652      	mov	r2, sl
 800ce9e:	4641      	mov	r1, r8
 800cea0:	4638      	mov	r0, r7
 800cea2:	47c8      	blx	r9
 800cea4:	3001      	adds	r0, #1
 800cea6:	d103      	bne.n	800ceb0 <_printf_common+0xac>
 800cea8:	f04f 30ff 	mov.w	r0, #4294967295
 800ceac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb0:	3501      	adds	r5, #1
 800ceb2:	e7c6      	b.n	800ce42 <_printf_common+0x3e>
 800ceb4:	18e1      	adds	r1, r4, r3
 800ceb6:	1c5a      	adds	r2, r3, #1
 800ceb8:	2030      	movs	r0, #48	@ 0x30
 800ceba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cebe:	4422      	add	r2, r4
 800cec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cec4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cec8:	3302      	adds	r3, #2
 800ceca:	e7c7      	b.n	800ce5c <_printf_common+0x58>
 800cecc:	2301      	movs	r3, #1
 800cece:	4622      	mov	r2, r4
 800ced0:	4641      	mov	r1, r8
 800ced2:	4638      	mov	r0, r7
 800ced4:	47c8      	blx	r9
 800ced6:	3001      	adds	r0, #1
 800ced8:	d0e6      	beq.n	800cea8 <_printf_common+0xa4>
 800ceda:	3601      	adds	r6, #1
 800cedc:	e7d9      	b.n	800ce92 <_printf_common+0x8e>
	...

0800cee0 <_printf_i>:
 800cee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cee4:	7e0f      	ldrb	r7, [r1, #24]
 800cee6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cee8:	2f78      	cmp	r7, #120	@ 0x78
 800ceea:	4691      	mov	r9, r2
 800ceec:	4680      	mov	r8, r0
 800ceee:	460c      	mov	r4, r1
 800cef0:	469a      	mov	sl, r3
 800cef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cef6:	d807      	bhi.n	800cf08 <_printf_i+0x28>
 800cef8:	2f62      	cmp	r7, #98	@ 0x62
 800cefa:	d80a      	bhi.n	800cf12 <_printf_i+0x32>
 800cefc:	2f00      	cmp	r7, #0
 800cefe:	f000 80d1 	beq.w	800d0a4 <_printf_i+0x1c4>
 800cf02:	2f58      	cmp	r7, #88	@ 0x58
 800cf04:	f000 80b8 	beq.w	800d078 <_printf_i+0x198>
 800cf08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cf10:	e03a      	b.n	800cf88 <_printf_i+0xa8>
 800cf12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cf16:	2b15      	cmp	r3, #21
 800cf18:	d8f6      	bhi.n	800cf08 <_printf_i+0x28>
 800cf1a:	a101      	add	r1, pc, #4	@ (adr r1, 800cf20 <_printf_i+0x40>)
 800cf1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf20:	0800cf79 	.word	0x0800cf79
 800cf24:	0800cf8d 	.word	0x0800cf8d
 800cf28:	0800cf09 	.word	0x0800cf09
 800cf2c:	0800cf09 	.word	0x0800cf09
 800cf30:	0800cf09 	.word	0x0800cf09
 800cf34:	0800cf09 	.word	0x0800cf09
 800cf38:	0800cf8d 	.word	0x0800cf8d
 800cf3c:	0800cf09 	.word	0x0800cf09
 800cf40:	0800cf09 	.word	0x0800cf09
 800cf44:	0800cf09 	.word	0x0800cf09
 800cf48:	0800cf09 	.word	0x0800cf09
 800cf4c:	0800d08b 	.word	0x0800d08b
 800cf50:	0800cfb7 	.word	0x0800cfb7
 800cf54:	0800d045 	.word	0x0800d045
 800cf58:	0800cf09 	.word	0x0800cf09
 800cf5c:	0800cf09 	.word	0x0800cf09
 800cf60:	0800d0ad 	.word	0x0800d0ad
 800cf64:	0800cf09 	.word	0x0800cf09
 800cf68:	0800cfb7 	.word	0x0800cfb7
 800cf6c:	0800cf09 	.word	0x0800cf09
 800cf70:	0800cf09 	.word	0x0800cf09
 800cf74:	0800d04d 	.word	0x0800d04d
 800cf78:	6833      	ldr	r3, [r6, #0]
 800cf7a:	1d1a      	adds	r2, r3, #4
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	6032      	str	r2, [r6, #0]
 800cf80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e09c      	b.n	800d0c6 <_printf_i+0x1e6>
 800cf8c:	6833      	ldr	r3, [r6, #0]
 800cf8e:	6820      	ldr	r0, [r4, #0]
 800cf90:	1d19      	adds	r1, r3, #4
 800cf92:	6031      	str	r1, [r6, #0]
 800cf94:	0606      	lsls	r6, r0, #24
 800cf96:	d501      	bpl.n	800cf9c <_printf_i+0xbc>
 800cf98:	681d      	ldr	r5, [r3, #0]
 800cf9a:	e003      	b.n	800cfa4 <_printf_i+0xc4>
 800cf9c:	0645      	lsls	r5, r0, #25
 800cf9e:	d5fb      	bpl.n	800cf98 <_printf_i+0xb8>
 800cfa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cfa4:	2d00      	cmp	r5, #0
 800cfa6:	da03      	bge.n	800cfb0 <_printf_i+0xd0>
 800cfa8:	232d      	movs	r3, #45	@ 0x2d
 800cfaa:	426d      	negs	r5, r5
 800cfac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfb0:	4858      	ldr	r0, [pc, #352]	@ (800d114 <_printf_i+0x234>)
 800cfb2:	230a      	movs	r3, #10
 800cfb4:	e011      	b.n	800cfda <_printf_i+0xfa>
 800cfb6:	6821      	ldr	r1, [r4, #0]
 800cfb8:	6833      	ldr	r3, [r6, #0]
 800cfba:	0608      	lsls	r0, r1, #24
 800cfbc:	f853 5b04 	ldr.w	r5, [r3], #4
 800cfc0:	d402      	bmi.n	800cfc8 <_printf_i+0xe8>
 800cfc2:	0649      	lsls	r1, r1, #25
 800cfc4:	bf48      	it	mi
 800cfc6:	b2ad      	uxthmi	r5, r5
 800cfc8:	2f6f      	cmp	r7, #111	@ 0x6f
 800cfca:	4852      	ldr	r0, [pc, #328]	@ (800d114 <_printf_i+0x234>)
 800cfcc:	6033      	str	r3, [r6, #0]
 800cfce:	bf14      	ite	ne
 800cfd0:	230a      	movne	r3, #10
 800cfd2:	2308      	moveq	r3, #8
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cfda:	6866      	ldr	r6, [r4, #4]
 800cfdc:	60a6      	str	r6, [r4, #8]
 800cfde:	2e00      	cmp	r6, #0
 800cfe0:	db05      	blt.n	800cfee <_printf_i+0x10e>
 800cfe2:	6821      	ldr	r1, [r4, #0]
 800cfe4:	432e      	orrs	r6, r5
 800cfe6:	f021 0104 	bic.w	r1, r1, #4
 800cfea:	6021      	str	r1, [r4, #0]
 800cfec:	d04b      	beq.n	800d086 <_printf_i+0x1a6>
 800cfee:	4616      	mov	r6, r2
 800cff0:	fbb5 f1f3 	udiv	r1, r5, r3
 800cff4:	fb03 5711 	mls	r7, r3, r1, r5
 800cff8:	5dc7      	ldrb	r7, [r0, r7]
 800cffa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cffe:	462f      	mov	r7, r5
 800d000:	42bb      	cmp	r3, r7
 800d002:	460d      	mov	r5, r1
 800d004:	d9f4      	bls.n	800cff0 <_printf_i+0x110>
 800d006:	2b08      	cmp	r3, #8
 800d008:	d10b      	bne.n	800d022 <_printf_i+0x142>
 800d00a:	6823      	ldr	r3, [r4, #0]
 800d00c:	07df      	lsls	r7, r3, #31
 800d00e:	d508      	bpl.n	800d022 <_printf_i+0x142>
 800d010:	6923      	ldr	r3, [r4, #16]
 800d012:	6861      	ldr	r1, [r4, #4]
 800d014:	4299      	cmp	r1, r3
 800d016:	bfde      	ittt	le
 800d018:	2330      	movle	r3, #48	@ 0x30
 800d01a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d01e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d022:	1b92      	subs	r2, r2, r6
 800d024:	6122      	str	r2, [r4, #16]
 800d026:	f8cd a000 	str.w	sl, [sp]
 800d02a:	464b      	mov	r3, r9
 800d02c:	aa03      	add	r2, sp, #12
 800d02e:	4621      	mov	r1, r4
 800d030:	4640      	mov	r0, r8
 800d032:	f7ff fee7 	bl	800ce04 <_printf_common>
 800d036:	3001      	adds	r0, #1
 800d038:	d14a      	bne.n	800d0d0 <_printf_i+0x1f0>
 800d03a:	f04f 30ff 	mov.w	r0, #4294967295
 800d03e:	b004      	add	sp, #16
 800d040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	f043 0320 	orr.w	r3, r3, #32
 800d04a:	6023      	str	r3, [r4, #0]
 800d04c:	4832      	ldr	r0, [pc, #200]	@ (800d118 <_printf_i+0x238>)
 800d04e:	2778      	movs	r7, #120	@ 0x78
 800d050:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	6831      	ldr	r1, [r6, #0]
 800d058:	061f      	lsls	r7, r3, #24
 800d05a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d05e:	d402      	bmi.n	800d066 <_printf_i+0x186>
 800d060:	065f      	lsls	r7, r3, #25
 800d062:	bf48      	it	mi
 800d064:	b2ad      	uxthmi	r5, r5
 800d066:	6031      	str	r1, [r6, #0]
 800d068:	07d9      	lsls	r1, r3, #31
 800d06a:	bf44      	itt	mi
 800d06c:	f043 0320 	orrmi.w	r3, r3, #32
 800d070:	6023      	strmi	r3, [r4, #0]
 800d072:	b11d      	cbz	r5, 800d07c <_printf_i+0x19c>
 800d074:	2310      	movs	r3, #16
 800d076:	e7ad      	b.n	800cfd4 <_printf_i+0xf4>
 800d078:	4826      	ldr	r0, [pc, #152]	@ (800d114 <_printf_i+0x234>)
 800d07a:	e7e9      	b.n	800d050 <_printf_i+0x170>
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	f023 0320 	bic.w	r3, r3, #32
 800d082:	6023      	str	r3, [r4, #0]
 800d084:	e7f6      	b.n	800d074 <_printf_i+0x194>
 800d086:	4616      	mov	r6, r2
 800d088:	e7bd      	b.n	800d006 <_printf_i+0x126>
 800d08a:	6833      	ldr	r3, [r6, #0]
 800d08c:	6825      	ldr	r5, [r4, #0]
 800d08e:	6961      	ldr	r1, [r4, #20]
 800d090:	1d18      	adds	r0, r3, #4
 800d092:	6030      	str	r0, [r6, #0]
 800d094:	062e      	lsls	r6, r5, #24
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	d501      	bpl.n	800d09e <_printf_i+0x1be>
 800d09a:	6019      	str	r1, [r3, #0]
 800d09c:	e002      	b.n	800d0a4 <_printf_i+0x1c4>
 800d09e:	0668      	lsls	r0, r5, #25
 800d0a0:	d5fb      	bpl.n	800d09a <_printf_i+0x1ba>
 800d0a2:	8019      	strh	r1, [r3, #0]
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	6123      	str	r3, [r4, #16]
 800d0a8:	4616      	mov	r6, r2
 800d0aa:	e7bc      	b.n	800d026 <_printf_i+0x146>
 800d0ac:	6833      	ldr	r3, [r6, #0]
 800d0ae:	1d1a      	adds	r2, r3, #4
 800d0b0:	6032      	str	r2, [r6, #0]
 800d0b2:	681e      	ldr	r6, [r3, #0]
 800d0b4:	6862      	ldr	r2, [r4, #4]
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	f7f3 f919 	bl	80002f0 <memchr>
 800d0be:	b108      	cbz	r0, 800d0c4 <_printf_i+0x1e4>
 800d0c0:	1b80      	subs	r0, r0, r6
 800d0c2:	6060      	str	r0, [r4, #4]
 800d0c4:	6863      	ldr	r3, [r4, #4]
 800d0c6:	6123      	str	r3, [r4, #16]
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0ce:	e7aa      	b.n	800d026 <_printf_i+0x146>
 800d0d0:	6923      	ldr	r3, [r4, #16]
 800d0d2:	4632      	mov	r2, r6
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	4640      	mov	r0, r8
 800d0d8:	47d0      	blx	sl
 800d0da:	3001      	adds	r0, #1
 800d0dc:	d0ad      	beq.n	800d03a <_printf_i+0x15a>
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	079b      	lsls	r3, r3, #30
 800d0e2:	d413      	bmi.n	800d10c <_printf_i+0x22c>
 800d0e4:	68e0      	ldr	r0, [r4, #12]
 800d0e6:	9b03      	ldr	r3, [sp, #12]
 800d0e8:	4298      	cmp	r0, r3
 800d0ea:	bfb8      	it	lt
 800d0ec:	4618      	movlt	r0, r3
 800d0ee:	e7a6      	b.n	800d03e <_printf_i+0x15e>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	4632      	mov	r2, r6
 800d0f4:	4649      	mov	r1, r9
 800d0f6:	4640      	mov	r0, r8
 800d0f8:	47d0      	blx	sl
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	d09d      	beq.n	800d03a <_printf_i+0x15a>
 800d0fe:	3501      	adds	r5, #1
 800d100:	68e3      	ldr	r3, [r4, #12]
 800d102:	9903      	ldr	r1, [sp, #12]
 800d104:	1a5b      	subs	r3, r3, r1
 800d106:	42ab      	cmp	r3, r5
 800d108:	dcf2      	bgt.n	800d0f0 <_printf_i+0x210>
 800d10a:	e7eb      	b.n	800d0e4 <_printf_i+0x204>
 800d10c:	2500      	movs	r5, #0
 800d10e:	f104 0619 	add.w	r6, r4, #25
 800d112:	e7f5      	b.n	800d100 <_printf_i+0x220>
 800d114:	0800f02e 	.word	0x0800f02e
 800d118:	0800f03f 	.word	0x0800f03f

0800d11c <std>:
 800d11c:	2300      	movs	r3, #0
 800d11e:	b510      	push	{r4, lr}
 800d120:	4604      	mov	r4, r0
 800d122:	e9c0 3300 	strd	r3, r3, [r0]
 800d126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d12a:	6083      	str	r3, [r0, #8]
 800d12c:	8181      	strh	r1, [r0, #12]
 800d12e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d130:	81c2      	strh	r2, [r0, #14]
 800d132:	6183      	str	r3, [r0, #24]
 800d134:	4619      	mov	r1, r3
 800d136:	2208      	movs	r2, #8
 800d138:	305c      	adds	r0, #92	@ 0x5c
 800d13a:	f000 f906 	bl	800d34a <memset>
 800d13e:	4b0d      	ldr	r3, [pc, #52]	@ (800d174 <std+0x58>)
 800d140:	6263      	str	r3, [r4, #36]	@ 0x24
 800d142:	4b0d      	ldr	r3, [pc, #52]	@ (800d178 <std+0x5c>)
 800d144:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d146:	4b0d      	ldr	r3, [pc, #52]	@ (800d17c <std+0x60>)
 800d148:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d14a:	4b0d      	ldr	r3, [pc, #52]	@ (800d180 <std+0x64>)
 800d14c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d14e:	4b0d      	ldr	r3, [pc, #52]	@ (800d184 <std+0x68>)
 800d150:	6224      	str	r4, [r4, #32]
 800d152:	429c      	cmp	r4, r3
 800d154:	d006      	beq.n	800d164 <std+0x48>
 800d156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d15a:	4294      	cmp	r4, r2
 800d15c:	d002      	beq.n	800d164 <std+0x48>
 800d15e:	33d0      	adds	r3, #208	@ 0xd0
 800d160:	429c      	cmp	r4, r3
 800d162:	d105      	bne.n	800d170 <std+0x54>
 800d164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d16c:	f000 b97a 	b.w	800d464 <__retarget_lock_init_recursive>
 800d170:	bd10      	pop	{r4, pc}
 800d172:	bf00      	nop
 800d174:	0800d2c5 	.word	0x0800d2c5
 800d178:	0800d2e7 	.word	0x0800d2e7
 800d17c:	0800d31f 	.word	0x0800d31f
 800d180:	0800d343 	.word	0x0800d343
 800d184:	24000cbc 	.word	0x24000cbc

0800d188 <stdio_exit_handler>:
 800d188:	4a02      	ldr	r2, [pc, #8]	@ (800d194 <stdio_exit_handler+0xc>)
 800d18a:	4903      	ldr	r1, [pc, #12]	@ (800d198 <stdio_exit_handler+0x10>)
 800d18c:	4803      	ldr	r0, [pc, #12]	@ (800d19c <stdio_exit_handler+0x14>)
 800d18e:	f000 b869 	b.w	800d264 <_fwalk_sglue>
 800d192:	bf00      	nop
 800d194:	24000010 	.word	0x24000010
 800d198:	0800eb69 	.word	0x0800eb69
 800d19c:	24000020 	.word	0x24000020

0800d1a0 <cleanup_stdio>:
 800d1a0:	6841      	ldr	r1, [r0, #4]
 800d1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d1d4 <cleanup_stdio+0x34>)
 800d1a4:	4299      	cmp	r1, r3
 800d1a6:	b510      	push	{r4, lr}
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	d001      	beq.n	800d1b0 <cleanup_stdio+0x10>
 800d1ac:	f001 fcdc 	bl	800eb68 <_fflush_r>
 800d1b0:	68a1      	ldr	r1, [r4, #8]
 800d1b2:	4b09      	ldr	r3, [pc, #36]	@ (800d1d8 <cleanup_stdio+0x38>)
 800d1b4:	4299      	cmp	r1, r3
 800d1b6:	d002      	beq.n	800d1be <cleanup_stdio+0x1e>
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f001 fcd5 	bl	800eb68 <_fflush_r>
 800d1be:	68e1      	ldr	r1, [r4, #12]
 800d1c0:	4b06      	ldr	r3, [pc, #24]	@ (800d1dc <cleanup_stdio+0x3c>)
 800d1c2:	4299      	cmp	r1, r3
 800d1c4:	d004      	beq.n	800d1d0 <cleanup_stdio+0x30>
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1cc:	f001 bccc 	b.w	800eb68 <_fflush_r>
 800d1d0:	bd10      	pop	{r4, pc}
 800d1d2:	bf00      	nop
 800d1d4:	24000cbc 	.word	0x24000cbc
 800d1d8:	24000d24 	.word	0x24000d24
 800d1dc:	24000d8c 	.word	0x24000d8c

0800d1e0 <global_stdio_init.part.0>:
 800d1e0:	b510      	push	{r4, lr}
 800d1e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d210 <global_stdio_init.part.0+0x30>)
 800d1e4:	4c0b      	ldr	r4, [pc, #44]	@ (800d214 <global_stdio_init.part.0+0x34>)
 800d1e6:	4a0c      	ldr	r2, [pc, #48]	@ (800d218 <global_stdio_init.part.0+0x38>)
 800d1e8:	601a      	str	r2, [r3, #0]
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	2104      	movs	r1, #4
 800d1f0:	f7ff ff94 	bl	800d11c <std>
 800d1f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	2109      	movs	r1, #9
 800d1fc:	f7ff ff8e 	bl	800d11c <std>
 800d200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d204:	2202      	movs	r2, #2
 800d206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d20a:	2112      	movs	r1, #18
 800d20c:	f7ff bf86 	b.w	800d11c <std>
 800d210:	24000df4 	.word	0x24000df4
 800d214:	24000cbc 	.word	0x24000cbc
 800d218:	0800d189 	.word	0x0800d189

0800d21c <__sfp_lock_acquire>:
 800d21c:	4801      	ldr	r0, [pc, #4]	@ (800d224 <__sfp_lock_acquire+0x8>)
 800d21e:	f000 b922 	b.w	800d466 <__retarget_lock_acquire_recursive>
 800d222:	bf00      	nop
 800d224:	24000dfd 	.word	0x24000dfd

0800d228 <__sfp_lock_release>:
 800d228:	4801      	ldr	r0, [pc, #4]	@ (800d230 <__sfp_lock_release+0x8>)
 800d22a:	f000 b91d 	b.w	800d468 <__retarget_lock_release_recursive>
 800d22e:	bf00      	nop
 800d230:	24000dfd 	.word	0x24000dfd

0800d234 <__sinit>:
 800d234:	b510      	push	{r4, lr}
 800d236:	4604      	mov	r4, r0
 800d238:	f7ff fff0 	bl	800d21c <__sfp_lock_acquire>
 800d23c:	6a23      	ldr	r3, [r4, #32]
 800d23e:	b11b      	cbz	r3, 800d248 <__sinit+0x14>
 800d240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d244:	f7ff bff0 	b.w	800d228 <__sfp_lock_release>
 800d248:	4b04      	ldr	r3, [pc, #16]	@ (800d25c <__sinit+0x28>)
 800d24a:	6223      	str	r3, [r4, #32]
 800d24c:	4b04      	ldr	r3, [pc, #16]	@ (800d260 <__sinit+0x2c>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1f5      	bne.n	800d240 <__sinit+0xc>
 800d254:	f7ff ffc4 	bl	800d1e0 <global_stdio_init.part.0>
 800d258:	e7f2      	b.n	800d240 <__sinit+0xc>
 800d25a:	bf00      	nop
 800d25c:	0800d1a1 	.word	0x0800d1a1
 800d260:	24000df4 	.word	0x24000df4

0800d264 <_fwalk_sglue>:
 800d264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d268:	4607      	mov	r7, r0
 800d26a:	4688      	mov	r8, r1
 800d26c:	4614      	mov	r4, r2
 800d26e:	2600      	movs	r6, #0
 800d270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d274:	f1b9 0901 	subs.w	r9, r9, #1
 800d278:	d505      	bpl.n	800d286 <_fwalk_sglue+0x22>
 800d27a:	6824      	ldr	r4, [r4, #0]
 800d27c:	2c00      	cmp	r4, #0
 800d27e:	d1f7      	bne.n	800d270 <_fwalk_sglue+0xc>
 800d280:	4630      	mov	r0, r6
 800d282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d286:	89ab      	ldrh	r3, [r5, #12]
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d907      	bls.n	800d29c <_fwalk_sglue+0x38>
 800d28c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d290:	3301      	adds	r3, #1
 800d292:	d003      	beq.n	800d29c <_fwalk_sglue+0x38>
 800d294:	4629      	mov	r1, r5
 800d296:	4638      	mov	r0, r7
 800d298:	47c0      	blx	r8
 800d29a:	4306      	orrs	r6, r0
 800d29c:	3568      	adds	r5, #104	@ 0x68
 800d29e:	e7e9      	b.n	800d274 <_fwalk_sglue+0x10>

0800d2a0 <iprintf>:
 800d2a0:	b40f      	push	{r0, r1, r2, r3}
 800d2a2:	b507      	push	{r0, r1, r2, lr}
 800d2a4:	4906      	ldr	r1, [pc, #24]	@ (800d2c0 <iprintf+0x20>)
 800d2a6:	ab04      	add	r3, sp, #16
 800d2a8:	6808      	ldr	r0, [r1, #0]
 800d2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ae:	6881      	ldr	r1, [r0, #8]
 800d2b0:	9301      	str	r3, [sp, #4]
 800d2b2:	f001 fabd 	bl	800e830 <_vfiprintf_r>
 800d2b6:	b003      	add	sp, #12
 800d2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2bc:	b004      	add	sp, #16
 800d2be:	4770      	bx	lr
 800d2c0:	2400001c 	.word	0x2400001c

0800d2c4 <__sread>:
 800d2c4:	b510      	push	{r4, lr}
 800d2c6:	460c      	mov	r4, r1
 800d2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2cc:	f000 f86c 	bl	800d3a8 <_read_r>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	bfab      	itete	ge
 800d2d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d2d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d2d8:	181b      	addge	r3, r3, r0
 800d2da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d2de:	bfac      	ite	ge
 800d2e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d2e2:	81a3      	strhlt	r3, [r4, #12]
 800d2e4:	bd10      	pop	{r4, pc}

0800d2e6 <__swrite>:
 800d2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ea:	461f      	mov	r7, r3
 800d2ec:	898b      	ldrh	r3, [r1, #12]
 800d2ee:	05db      	lsls	r3, r3, #23
 800d2f0:	4605      	mov	r5, r0
 800d2f2:	460c      	mov	r4, r1
 800d2f4:	4616      	mov	r6, r2
 800d2f6:	d505      	bpl.n	800d304 <__swrite+0x1e>
 800d2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2fc:	2302      	movs	r3, #2
 800d2fe:	2200      	movs	r2, #0
 800d300:	f000 f840 	bl	800d384 <_lseek_r>
 800d304:	89a3      	ldrh	r3, [r4, #12]
 800d306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d30a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d30e:	81a3      	strh	r3, [r4, #12]
 800d310:	4632      	mov	r2, r6
 800d312:	463b      	mov	r3, r7
 800d314:	4628      	mov	r0, r5
 800d316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d31a:	f000 b867 	b.w	800d3ec <_write_r>

0800d31e <__sseek>:
 800d31e:	b510      	push	{r4, lr}
 800d320:	460c      	mov	r4, r1
 800d322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d326:	f000 f82d 	bl	800d384 <_lseek_r>
 800d32a:	1c43      	adds	r3, r0, #1
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	bf15      	itete	ne
 800d330:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d332:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d336:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d33a:	81a3      	strheq	r3, [r4, #12]
 800d33c:	bf18      	it	ne
 800d33e:	81a3      	strhne	r3, [r4, #12]
 800d340:	bd10      	pop	{r4, pc}

0800d342 <__sclose>:
 800d342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d346:	f000 b80d 	b.w	800d364 <_close_r>

0800d34a <memset>:
 800d34a:	4402      	add	r2, r0
 800d34c:	4603      	mov	r3, r0
 800d34e:	4293      	cmp	r3, r2
 800d350:	d100      	bne.n	800d354 <memset+0xa>
 800d352:	4770      	bx	lr
 800d354:	f803 1b01 	strb.w	r1, [r3], #1
 800d358:	e7f9      	b.n	800d34e <memset+0x4>
	...

0800d35c <_localeconv_r>:
 800d35c:	4800      	ldr	r0, [pc, #0]	@ (800d360 <_localeconv_r+0x4>)
 800d35e:	4770      	bx	lr
 800d360:	2400015c 	.word	0x2400015c

0800d364 <_close_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	4d06      	ldr	r5, [pc, #24]	@ (800d380 <_close_r+0x1c>)
 800d368:	2300      	movs	r3, #0
 800d36a:	4604      	mov	r4, r0
 800d36c:	4608      	mov	r0, r1
 800d36e:	602b      	str	r3, [r5, #0]
 800d370:	f7f4 f984 	bl	800167c <_close>
 800d374:	1c43      	adds	r3, r0, #1
 800d376:	d102      	bne.n	800d37e <_close_r+0x1a>
 800d378:	682b      	ldr	r3, [r5, #0]
 800d37a:	b103      	cbz	r3, 800d37e <_close_r+0x1a>
 800d37c:	6023      	str	r3, [r4, #0]
 800d37e:	bd38      	pop	{r3, r4, r5, pc}
 800d380:	24000df8 	.word	0x24000df8

0800d384 <_lseek_r>:
 800d384:	b538      	push	{r3, r4, r5, lr}
 800d386:	4d07      	ldr	r5, [pc, #28]	@ (800d3a4 <_lseek_r+0x20>)
 800d388:	4604      	mov	r4, r0
 800d38a:	4608      	mov	r0, r1
 800d38c:	4611      	mov	r1, r2
 800d38e:	2200      	movs	r2, #0
 800d390:	602a      	str	r2, [r5, #0]
 800d392:	461a      	mov	r2, r3
 800d394:	f7f4 f999 	bl	80016ca <_lseek>
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	d102      	bne.n	800d3a2 <_lseek_r+0x1e>
 800d39c:	682b      	ldr	r3, [r5, #0]
 800d39e:	b103      	cbz	r3, 800d3a2 <_lseek_r+0x1e>
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
 800d3a4:	24000df8 	.word	0x24000df8

0800d3a8 <_read_r>:
 800d3a8:	b538      	push	{r3, r4, r5, lr}
 800d3aa:	4d07      	ldr	r5, [pc, #28]	@ (800d3c8 <_read_r+0x20>)
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	4608      	mov	r0, r1
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	602a      	str	r2, [r5, #0]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	f7f4 f927 	bl	800160a <_read>
 800d3bc:	1c43      	adds	r3, r0, #1
 800d3be:	d102      	bne.n	800d3c6 <_read_r+0x1e>
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	b103      	cbz	r3, 800d3c6 <_read_r+0x1e>
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	bd38      	pop	{r3, r4, r5, pc}
 800d3c8:	24000df8 	.word	0x24000df8

0800d3cc <_sbrk_r>:
 800d3cc:	b538      	push	{r3, r4, r5, lr}
 800d3ce:	4d06      	ldr	r5, [pc, #24]	@ (800d3e8 <_sbrk_r+0x1c>)
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	4608      	mov	r0, r1
 800d3d6:	602b      	str	r3, [r5, #0]
 800d3d8:	f7f4 f984 	bl	80016e4 <_sbrk>
 800d3dc:	1c43      	adds	r3, r0, #1
 800d3de:	d102      	bne.n	800d3e6 <_sbrk_r+0x1a>
 800d3e0:	682b      	ldr	r3, [r5, #0]
 800d3e2:	b103      	cbz	r3, 800d3e6 <_sbrk_r+0x1a>
 800d3e4:	6023      	str	r3, [r4, #0]
 800d3e6:	bd38      	pop	{r3, r4, r5, pc}
 800d3e8:	24000df8 	.word	0x24000df8

0800d3ec <_write_r>:
 800d3ec:	b538      	push	{r3, r4, r5, lr}
 800d3ee:	4d07      	ldr	r5, [pc, #28]	@ (800d40c <_write_r+0x20>)
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	4608      	mov	r0, r1
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	602a      	str	r2, [r5, #0]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	f7f4 f922 	bl	8001644 <_write>
 800d400:	1c43      	adds	r3, r0, #1
 800d402:	d102      	bne.n	800d40a <_write_r+0x1e>
 800d404:	682b      	ldr	r3, [r5, #0]
 800d406:	b103      	cbz	r3, 800d40a <_write_r+0x1e>
 800d408:	6023      	str	r3, [r4, #0]
 800d40a:	bd38      	pop	{r3, r4, r5, pc}
 800d40c:	24000df8 	.word	0x24000df8

0800d410 <__errno>:
 800d410:	4b01      	ldr	r3, [pc, #4]	@ (800d418 <__errno+0x8>)
 800d412:	6818      	ldr	r0, [r3, #0]
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	2400001c 	.word	0x2400001c

0800d41c <__libc_init_array>:
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	4d0d      	ldr	r5, [pc, #52]	@ (800d454 <__libc_init_array+0x38>)
 800d420:	4c0d      	ldr	r4, [pc, #52]	@ (800d458 <__libc_init_array+0x3c>)
 800d422:	1b64      	subs	r4, r4, r5
 800d424:	10a4      	asrs	r4, r4, #2
 800d426:	2600      	movs	r6, #0
 800d428:	42a6      	cmp	r6, r4
 800d42a:	d109      	bne.n	800d440 <__libc_init_array+0x24>
 800d42c:	4d0b      	ldr	r5, [pc, #44]	@ (800d45c <__libc_init_array+0x40>)
 800d42e:	4c0c      	ldr	r4, [pc, #48]	@ (800d460 <__libc_init_array+0x44>)
 800d430:	f001 fd8a 	bl	800ef48 <_init>
 800d434:	1b64      	subs	r4, r4, r5
 800d436:	10a4      	asrs	r4, r4, #2
 800d438:	2600      	movs	r6, #0
 800d43a:	42a6      	cmp	r6, r4
 800d43c:	d105      	bne.n	800d44a <__libc_init_array+0x2e>
 800d43e:	bd70      	pop	{r4, r5, r6, pc}
 800d440:	f855 3b04 	ldr.w	r3, [r5], #4
 800d444:	4798      	blx	r3
 800d446:	3601      	adds	r6, #1
 800d448:	e7ee      	b.n	800d428 <__libc_init_array+0xc>
 800d44a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d44e:	4798      	blx	r3
 800d450:	3601      	adds	r6, #1
 800d452:	e7f2      	b.n	800d43a <__libc_init_array+0x1e>
 800d454:	0800f39c 	.word	0x0800f39c
 800d458:	0800f39c 	.word	0x0800f39c
 800d45c:	0800f39c 	.word	0x0800f39c
 800d460:	0800f3a0 	.word	0x0800f3a0

0800d464 <__retarget_lock_init_recursive>:
 800d464:	4770      	bx	lr

0800d466 <__retarget_lock_acquire_recursive>:
 800d466:	4770      	bx	lr

0800d468 <__retarget_lock_release_recursive>:
 800d468:	4770      	bx	lr

0800d46a <memcpy>:
 800d46a:	440a      	add	r2, r1
 800d46c:	4291      	cmp	r1, r2
 800d46e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d472:	d100      	bne.n	800d476 <memcpy+0xc>
 800d474:	4770      	bx	lr
 800d476:	b510      	push	{r4, lr}
 800d478:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d47c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d480:	4291      	cmp	r1, r2
 800d482:	d1f9      	bne.n	800d478 <memcpy+0xe>
 800d484:	bd10      	pop	{r4, pc}

0800d486 <quorem>:
 800d486:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d48a:	6903      	ldr	r3, [r0, #16]
 800d48c:	690c      	ldr	r4, [r1, #16]
 800d48e:	42a3      	cmp	r3, r4
 800d490:	4607      	mov	r7, r0
 800d492:	db7e      	blt.n	800d592 <quorem+0x10c>
 800d494:	3c01      	subs	r4, #1
 800d496:	f101 0814 	add.w	r8, r1, #20
 800d49a:	00a3      	lsls	r3, r4, #2
 800d49c:	f100 0514 	add.w	r5, r0, #20
 800d4a0:	9300      	str	r3, [sp, #0]
 800d4a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4bc:	d32e      	bcc.n	800d51c <quorem+0x96>
 800d4be:	f04f 0a00 	mov.w	sl, #0
 800d4c2:	46c4      	mov	ip, r8
 800d4c4:	46ae      	mov	lr, r5
 800d4c6:	46d3      	mov	fp, sl
 800d4c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d4cc:	b298      	uxth	r0, r3
 800d4ce:	fb06 a000 	mla	r0, r6, r0, sl
 800d4d2:	0c02      	lsrs	r2, r0, #16
 800d4d4:	0c1b      	lsrs	r3, r3, #16
 800d4d6:	fb06 2303 	mla	r3, r6, r3, r2
 800d4da:	f8de 2000 	ldr.w	r2, [lr]
 800d4de:	b280      	uxth	r0, r0
 800d4e0:	b292      	uxth	r2, r2
 800d4e2:	1a12      	subs	r2, r2, r0
 800d4e4:	445a      	add	r2, fp
 800d4e6:	f8de 0000 	ldr.w	r0, [lr]
 800d4ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d4f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d4f8:	b292      	uxth	r2, r2
 800d4fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d4fe:	45e1      	cmp	r9, ip
 800d500:	f84e 2b04 	str.w	r2, [lr], #4
 800d504:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d508:	d2de      	bcs.n	800d4c8 <quorem+0x42>
 800d50a:	9b00      	ldr	r3, [sp, #0]
 800d50c:	58eb      	ldr	r3, [r5, r3]
 800d50e:	b92b      	cbnz	r3, 800d51c <quorem+0x96>
 800d510:	9b01      	ldr	r3, [sp, #4]
 800d512:	3b04      	subs	r3, #4
 800d514:	429d      	cmp	r5, r3
 800d516:	461a      	mov	r2, r3
 800d518:	d32f      	bcc.n	800d57a <quorem+0xf4>
 800d51a:	613c      	str	r4, [r7, #16]
 800d51c:	4638      	mov	r0, r7
 800d51e:	f001 f855 	bl	800e5cc <__mcmp>
 800d522:	2800      	cmp	r0, #0
 800d524:	db25      	blt.n	800d572 <quorem+0xec>
 800d526:	4629      	mov	r1, r5
 800d528:	2000      	movs	r0, #0
 800d52a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d52e:	f8d1 c000 	ldr.w	ip, [r1]
 800d532:	fa1f fe82 	uxth.w	lr, r2
 800d536:	fa1f f38c 	uxth.w	r3, ip
 800d53a:	eba3 030e 	sub.w	r3, r3, lr
 800d53e:	4403      	add	r3, r0
 800d540:	0c12      	lsrs	r2, r2, #16
 800d542:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d546:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d550:	45c1      	cmp	r9, r8
 800d552:	f841 3b04 	str.w	r3, [r1], #4
 800d556:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d55a:	d2e6      	bcs.n	800d52a <quorem+0xa4>
 800d55c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d560:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d564:	b922      	cbnz	r2, 800d570 <quorem+0xea>
 800d566:	3b04      	subs	r3, #4
 800d568:	429d      	cmp	r5, r3
 800d56a:	461a      	mov	r2, r3
 800d56c:	d30b      	bcc.n	800d586 <quorem+0x100>
 800d56e:	613c      	str	r4, [r7, #16]
 800d570:	3601      	adds	r6, #1
 800d572:	4630      	mov	r0, r6
 800d574:	b003      	add	sp, #12
 800d576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57a:	6812      	ldr	r2, [r2, #0]
 800d57c:	3b04      	subs	r3, #4
 800d57e:	2a00      	cmp	r2, #0
 800d580:	d1cb      	bne.n	800d51a <quorem+0x94>
 800d582:	3c01      	subs	r4, #1
 800d584:	e7c6      	b.n	800d514 <quorem+0x8e>
 800d586:	6812      	ldr	r2, [r2, #0]
 800d588:	3b04      	subs	r3, #4
 800d58a:	2a00      	cmp	r2, #0
 800d58c:	d1ef      	bne.n	800d56e <quorem+0xe8>
 800d58e:	3c01      	subs	r4, #1
 800d590:	e7ea      	b.n	800d568 <quorem+0xe2>
 800d592:	2000      	movs	r0, #0
 800d594:	e7ee      	b.n	800d574 <quorem+0xee>
	...

0800d598 <_dtoa_r>:
 800d598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59c:	ed2d 8b02 	vpush	{d8}
 800d5a0:	69c7      	ldr	r7, [r0, #28]
 800d5a2:	b091      	sub	sp, #68	@ 0x44
 800d5a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d5a8:	ec55 4b10 	vmov	r4, r5, d0
 800d5ac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d5ae:	9107      	str	r1, [sp, #28]
 800d5b0:	4681      	mov	r9, r0
 800d5b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5b4:	930d      	str	r3, [sp, #52]	@ 0x34
 800d5b6:	b97f      	cbnz	r7, 800d5d8 <_dtoa_r+0x40>
 800d5b8:	2010      	movs	r0, #16
 800d5ba:	f7ff f8c3 	bl	800c744 <malloc>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	f8c9 001c 	str.w	r0, [r9, #28]
 800d5c4:	b920      	cbnz	r0, 800d5d0 <_dtoa_r+0x38>
 800d5c6:	4ba0      	ldr	r3, [pc, #640]	@ (800d848 <_dtoa_r+0x2b0>)
 800d5c8:	21ef      	movs	r1, #239	@ 0xef
 800d5ca:	48a0      	ldr	r0, [pc, #640]	@ (800d84c <_dtoa_r+0x2b4>)
 800d5cc:	f001 fb88 	bl	800ece0 <__assert_func>
 800d5d0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d5d4:	6007      	str	r7, [r0, #0]
 800d5d6:	60c7      	str	r7, [r0, #12]
 800d5d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d5dc:	6819      	ldr	r1, [r3, #0]
 800d5de:	b159      	cbz	r1, 800d5f8 <_dtoa_r+0x60>
 800d5e0:	685a      	ldr	r2, [r3, #4]
 800d5e2:	604a      	str	r2, [r1, #4]
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	4093      	lsls	r3, r2
 800d5e8:	608b      	str	r3, [r1, #8]
 800d5ea:	4648      	mov	r0, r9
 800d5ec:	f000 fdbc 	bl	800e168 <_Bfree>
 800d5f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	601a      	str	r2, [r3, #0]
 800d5f8:	1e2b      	subs	r3, r5, #0
 800d5fa:	bfbb      	ittet	lt
 800d5fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d600:	9303      	strlt	r3, [sp, #12]
 800d602:	2300      	movge	r3, #0
 800d604:	2201      	movlt	r2, #1
 800d606:	bfac      	ite	ge
 800d608:	6033      	strge	r3, [r6, #0]
 800d60a:	6032      	strlt	r2, [r6, #0]
 800d60c:	4b90      	ldr	r3, [pc, #576]	@ (800d850 <_dtoa_r+0x2b8>)
 800d60e:	9e03      	ldr	r6, [sp, #12]
 800d610:	43b3      	bics	r3, r6
 800d612:	d110      	bne.n	800d636 <_dtoa_r+0x9e>
 800d614:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d616:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d61a:	6013      	str	r3, [r2, #0]
 800d61c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d620:	4323      	orrs	r3, r4
 800d622:	f000 84e6 	beq.w	800dff2 <_dtoa_r+0xa5a>
 800d626:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d628:	4f8a      	ldr	r7, [pc, #552]	@ (800d854 <_dtoa_r+0x2bc>)
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f000 84e8 	beq.w	800e000 <_dtoa_r+0xa68>
 800d630:	1cfb      	adds	r3, r7, #3
 800d632:	f000 bce3 	b.w	800dffc <_dtoa_r+0xa64>
 800d636:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d63a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d642:	d10a      	bne.n	800d65a <_dtoa_r+0xc2>
 800d644:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d646:	2301      	movs	r3, #1
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d64c:	b113      	cbz	r3, 800d654 <_dtoa_r+0xbc>
 800d64e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d650:	4b81      	ldr	r3, [pc, #516]	@ (800d858 <_dtoa_r+0x2c0>)
 800d652:	6013      	str	r3, [r2, #0]
 800d654:	4f81      	ldr	r7, [pc, #516]	@ (800d85c <_dtoa_r+0x2c4>)
 800d656:	f000 bcd3 	b.w	800e000 <_dtoa_r+0xa68>
 800d65a:	aa0e      	add	r2, sp, #56	@ 0x38
 800d65c:	a90f      	add	r1, sp, #60	@ 0x3c
 800d65e:	4648      	mov	r0, r9
 800d660:	eeb0 0b48 	vmov.f64	d0, d8
 800d664:	f001 f862 	bl	800e72c <__d2b>
 800d668:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d66c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d66e:	9001      	str	r0, [sp, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d045      	beq.n	800d700 <_dtoa_r+0x168>
 800d674:	eeb0 7b48 	vmov.f64	d7, d8
 800d678:	ee18 1a90 	vmov	r1, s17
 800d67c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d680:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d684:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d688:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d68c:	2500      	movs	r5, #0
 800d68e:	ee07 1a90 	vmov	s15, r1
 800d692:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d696:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d830 <_dtoa_r+0x298>
 800d69a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d69e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800d838 <_dtoa_r+0x2a0>
 800d6a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d6a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800d840 <_dtoa_r+0x2a8>
 800d6aa:	ee07 3a90 	vmov	s15, r3
 800d6ae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d6b2:	eeb0 7b46 	vmov.f64	d7, d6
 800d6b6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d6ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d6be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c6:	ee16 8a90 	vmov	r8, s13
 800d6ca:	d508      	bpl.n	800d6de <_dtoa_r+0x146>
 800d6cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d6d0:	eeb4 6b47 	vcmp.f64	d6, d7
 800d6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d8:	bf18      	it	ne
 800d6da:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d6de:	f1b8 0f16 	cmp.w	r8, #22
 800d6e2:	d82b      	bhi.n	800d73c <_dtoa_r+0x1a4>
 800d6e4:	495e      	ldr	r1, [pc, #376]	@ (800d860 <_dtoa_r+0x2c8>)
 800d6e6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d6ea:	ed91 7b00 	vldr	d7, [r1]
 800d6ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f6:	d501      	bpl.n	800d6fc <_dtoa_r+0x164>
 800d6f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	e01e      	b.n	800d73e <_dtoa_r+0x1a6>
 800d700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d702:	4413      	add	r3, r2
 800d704:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800d708:	2920      	cmp	r1, #32
 800d70a:	bfc1      	itttt	gt
 800d70c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800d710:	408e      	lslgt	r6, r1
 800d712:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800d716:	fa24 f101 	lsrgt.w	r1, r4, r1
 800d71a:	bfd6      	itet	le
 800d71c:	f1c1 0120 	rsble	r1, r1, #32
 800d720:	4331      	orrgt	r1, r6
 800d722:	fa04 f101 	lslle.w	r1, r4, r1
 800d726:	ee07 1a90 	vmov	s15, r1
 800d72a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d72e:	3b01      	subs	r3, #1
 800d730:	ee17 1a90 	vmov	r1, s15
 800d734:	2501      	movs	r5, #1
 800d736:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800d73a:	e7a8      	b.n	800d68e <_dtoa_r+0xf6>
 800d73c:	2101      	movs	r1, #1
 800d73e:	1ad2      	subs	r2, r2, r3
 800d740:	1e53      	subs	r3, r2, #1
 800d742:	9306      	str	r3, [sp, #24]
 800d744:	bf45      	ittet	mi
 800d746:	f1c2 0301 	rsbmi	r3, r2, #1
 800d74a:	9304      	strmi	r3, [sp, #16]
 800d74c:	2300      	movpl	r3, #0
 800d74e:	2300      	movmi	r3, #0
 800d750:	bf4c      	ite	mi
 800d752:	9306      	strmi	r3, [sp, #24]
 800d754:	9304      	strpl	r3, [sp, #16]
 800d756:	f1b8 0f00 	cmp.w	r8, #0
 800d75a:	910c      	str	r1, [sp, #48]	@ 0x30
 800d75c:	db18      	blt.n	800d790 <_dtoa_r+0x1f8>
 800d75e:	9b06      	ldr	r3, [sp, #24]
 800d760:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d764:	4443      	add	r3, r8
 800d766:	9306      	str	r3, [sp, #24]
 800d768:	2300      	movs	r3, #0
 800d76a:	9a07      	ldr	r2, [sp, #28]
 800d76c:	2a09      	cmp	r2, #9
 800d76e:	d845      	bhi.n	800d7fc <_dtoa_r+0x264>
 800d770:	2a05      	cmp	r2, #5
 800d772:	bfc4      	itt	gt
 800d774:	3a04      	subgt	r2, #4
 800d776:	9207      	strgt	r2, [sp, #28]
 800d778:	9a07      	ldr	r2, [sp, #28]
 800d77a:	f1a2 0202 	sub.w	r2, r2, #2
 800d77e:	bfcc      	ite	gt
 800d780:	2400      	movgt	r4, #0
 800d782:	2401      	movle	r4, #1
 800d784:	2a03      	cmp	r2, #3
 800d786:	d844      	bhi.n	800d812 <_dtoa_r+0x27a>
 800d788:	e8df f002 	tbb	[pc, r2]
 800d78c:	0b173634 	.word	0x0b173634
 800d790:	9b04      	ldr	r3, [sp, #16]
 800d792:	2200      	movs	r2, #0
 800d794:	eba3 0308 	sub.w	r3, r3, r8
 800d798:	9304      	str	r3, [sp, #16]
 800d79a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d79c:	f1c8 0300 	rsb	r3, r8, #0
 800d7a0:	e7e3      	b.n	800d76a <_dtoa_r+0x1d2>
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	9208      	str	r2, [sp, #32]
 800d7a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7a8:	eb08 0b02 	add.w	fp, r8, r2
 800d7ac:	f10b 0a01 	add.w	sl, fp, #1
 800d7b0:	4652      	mov	r2, sl
 800d7b2:	2a01      	cmp	r2, #1
 800d7b4:	bfb8      	it	lt
 800d7b6:	2201      	movlt	r2, #1
 800d7b8:	e006      	b.n	800d7c8 <_dtoa_r+0x230>
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	9208      	str	r2, [sp, #32]
 800d7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7c0:	2a00      	cmp	r2, #0
 800d7c2:	dd29      	ble.n	800d818 <_dtoa_r+0x280>
 800d7c4:	4693      	mov	fp, r2
 800d7c6:	4692      	mov	sl, r2
 800d7c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	2004      	movs	r0, #4
 800d7d0:	f100 0614 	add.w	r6, r0, #20
 800d7d4:	4296      	cmp	r6, r2
 800d7d6:	d926      	bls.n	800d826 <_dtoa_r+0x28e>
 800d7d8:	6079      	str	r1, [r7, #4]
 800d7da:	4648      	mov	r0, r9
 800d7dc:	9305      	str	r3, [sp, #20]
 800d7de:	f000 fc83 	bl	800e0e8 <_Balloc>
 800d7e2:	9b05      	ldr	r3, [sp, #20]
 800d7e4:	4607      	mov	r7, r0
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d13e      	bne.n	800d868 <_dtoa_r+0x2d0>
 800d7ea:	4b1e      	ldr	r3, [pc, #120]	@ (800d864 <_dtoa_r+0x2cc>)
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800d7f2:	e6ea      	b.n	800d5ca <_dtoa_r+0x32>
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	e7e1      	b.n	800d7bc <_dtoa_r+0x224>
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	e7d3      	b.n	800d7a4 <_dtoa_r+0x20c>
 800d7fc:	2401      	movs	r4, #1
 800d7fe:	2200      	movs	r2, #0
 800d800:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d804:	f04f 3bff 	mov.w	fp, #4294967295
 800d808:	2100      	movs	r1, #0
 800d80a:	46da      	mov	sl, fp
 800d80c:	2212      	movs	r2, #18
 800d80e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d810:	e7da      	b.n	800d7c8 <_dtoa_r+0x230>
 800d812:	2201      	movs	r2, #1
 800d814:	9208      	str	r2, [sp, #32]
 800d816:	e7f5      	b.n	800d804 <_dtoa_r+0x26c>
 800d818:	f04f 0b01 	mov.w	fp, #1
 800d81c:	46da      	mov	sl, fp
 800d81e:	465a      	mov	r2, fp
 800d820:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800d824:	e7d0      	b.n	800d7c8 <_dtoa_r+0x230>
 800d826:	3101      	adds	r1, #1
 800d828:	0040      	lsls	r0, r0, #1
 800d82a:	e7d1      	b.n	800d7d0 <_dtoa_r+0x238>
 800d82c:	f3af 8000 	nop.w
 800d830:	636f4361 	.word	0x636f4361
 800d834:	3fd287a7 	.word	0x3fd287a7
 800d838:	8b60c8b3 	.word	0x8b60c8b3
 800d83c:	3fc68a28 	.word	0x3fc68a28
 800d840:	509f79fb 	.word	0x509f79fb
 800d844:	3fd34413 	.word	0x3fd34413
 800d848:	0800f05d 	.word	0x0800f05d
 800d84c:	0800f074 	.word	0x0800f074
 800d850:	7ff00000 	.word	0x7ff00000
 800d854:	0800f059 	.word	0x0800f059
 800d858:	0800f02d 	.word	0x0800f02d
 800d85c:	0800f02c 	.word	0x0800f02c
 800d860:	0800f1c8 	.word	0x0800f1c8
 800d864:	0800f0cc 	.word	0x0800f0cc
 800d868:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800d86c:	f1ba 0f0e 	cmp.w	sl, #14
 800d870:	6010      	str	r0, [r2, #0]
 800d872:	d86e      	bhi.n	800d952 <_dtoa_r+0x3ba>
 800d874:	2c00      	cmp	r4, #0
 800d876:	d06c      	beq.n	800d952 <_dtoa_r+0x3ba>
 800d878:	f1b8 0f00 	cmp.w	r8, #0
 800d87c:	f340 80b4 	ble.w	800d9e8 <_dtoa_r+0x450>
 800d880:	4ac8      	ldr	r2, [pc, #800]	@ (800dba4 <_dtoa_r+0x60c>)
 800d882:	f008 010f 	and.w	r1, r8, #15
 800d886:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d88a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800d88e:	ed92 7b00 	vldr	d7, [r2]
 800d892:	ea4f 1128 	mov.w	r1, r8, asr #4
 800d896:	f000 809b 	beq.w	800d9d0 <_dtoa_r+0x438>
 800d89a:	4ac3      	ldr	r2, [pc, #780]	@ (800dba8 <_dtoa_r+0x610>)
 800d89c:	ed92 6b08 	vldr	d6, [r2, #32]
 800d8a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d8a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d8a8:	f001 010f 	and.w	r1, r1, #15
 800d8ac:	2203      	movs	r2, #3
 800d8ae:	48be      	ldr	r0, [pc, #760]	@ (800dba8 <_dtoa_r+0x610>)
 800d8b0:	2900      	cmp	r1, #0
 800d8b2:	f040 808f 	bne.w	800d9d4 <_dtoa_r+0x43c>
 800d8b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d8ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d8be:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d8c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8c8:	2900      	cmp	r1, #0
 800d8ca:	f000 80b3 	beq.w	800da34 <_dtoa_r+0x49c>
 800d8ce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d8d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8da:	f140 80ab 	bpl.w	800da34 <_dtoa_r+0x49c>
 800d8de:	f1ba 0f00 	cmp.w	sl, #0
 800d8e2:	f000 80a7 	beq.w	800da34 <_dtoa_r+0x49c>
 800d8e6:	f1bb 0f00 	cmp.w	fp, #0
 800d8ea:	dd30      	ble.n	800d94e <_dtoa_r+0x3b6>
 800d8ec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d8f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d8f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8f8:	f108 31ff 	add.w	r1, r8, #4294967295
 800d8fc:	9105      	str	r1, [sp, #20]
 800d8fe:	3201      	adds	r2, #1
 800d900:	465c      	mov	r4, fp
 800d902:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d906:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d90a:	ee07 2a90 	vmov	s15, r2
 800d90e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d912:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d916:	ee15 2a90 	vmov	r2, s11
 800d91a:	ec51 0b15 	vmov	r0, r1, d5
 800d91e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d922:	2c00      	cmp	r4, #0
 800d924:	f040 808a 	bne.w	800da3c <_dtoa_r+0x4a4>
 800d928:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d92c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d930:	ec41 0b17 	vmov	d7, r0, r1
 800d934:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93c:	f300 826a 	bgt.w	800de14 <_dtoa_r+0x87c>
 800d940:	eeb1 7b47 	vneg.f64	d7, d7
 800d944:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d94c:	d423      	bmi.n	800d996 <_dtoa_r+0x3fe>
 800d94e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d952:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d954:	2a00      	cmp	r2, #0
 800d956:	f2c0 8129 	blt.w	800dbac <_dtoa_r+0x614>
 800d95a:	f1b8 0f0e 	cmp.w	r8, #14
 800d95e:	f300 8125 	bgt.w	800dbac <_dtoa_r+0x614>
 800d962:	4b90      	ldr	r3, [pc, #576]	@ (800dba4 <_dtoa_r+0x60c>)
 800d964:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d968:	ed93 6b00 	vldr	d6, [r3]
 800d96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f280 80c8 	bge.w	800db04 <_dtoa_r+0x56c>
 800d974:	f1ba 0f00 	cmp.w	sl, #0
 800d978:	f300 80c4 	bgt.w	800db04 <_dtoa_r+0x56c>
 800d97c:	d10b      	bne.n	800d996 <_dtoa_r+0x3fe>
 800d97e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d982:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d986:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d98a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d992:	f2c0 823c 	blt.w	800de0e <_dtoa_r+0x876>
 800d996:	2400      	movs	r4, #0
 800d998:	4625      	mov	r5, r4
 800d99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d99c:	43db      	mvns	r3, r3
 800d99e:	9305      	str	r3, [sp, #20]
 800d9a0:	463e      	mov	r6, r7
 800d9a2:	f04f 0800 	mov.w	r8, #0
 800d9a6:	4621      	mov	r1, r4
 800d9a8:	4648      	mov	r0, r9
 800d9aa:	f000 fbdd 	bl	800e168 <_Bfree>
 800d9ae:	2d00      	cmp	r5, #0
 800d9b0:	f000 80a2 	beq.w	800daf8 <_dtoa_r+0x560>
 800d9b4:	f1b8 0f00 	cmp.w	r8, #0
 800d9b8:	d005      	beq.n	800d9c6 <_dtoa_r+0x42e>
 800d9ba:	45a8      	cmp	r8, r5
 800d9bc:	d003      	beq.n	800d9c6 <_dtoa_r+0x42e>
 800d9be:	4641      	mov	r1, r8
 800d9c0:	4648      	mov	r0, r9
 800d9c2:	f000 fbd1 	bl	800e168 <_Bfree>
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	4648      	mov	r0, r9
 800d9ca:	f000 fbcd 	bl	800e168 <_Bfree>
 800d9ce:	e093      	b.n	800daf8 <_dtoa_r+0x560>
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	e76c      	b.n	800d8ae <_dtoa_r+0x316>
 800d9d4:	07cc      	lsls	r4, r1, #31
 800d9d6:	d504      	bpl.n	800d9e2 <_dtoa_r+0x44a>
 800d9d8:	ed90 6b00 	vldr	d6, [r0]
 800d9dc:	3201      	adds	r2, #1
 800d9de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9e2:	1049      	asrs	r1, r1, #1
 800d9e4:	3008      	adds	r0, #8
 800d9e6:	e763      	b.n	800d8b0 <_dtoa_r+0x318>
 800d9e8:	d022      	beq.n	800da30 <_dtoa_r+0x498>
 800d9ea:	f1c8 0100 	rsb	r1, r8, #0
 800d9ee:	4a6d      	ldr	r2, [pc, #436]	@ (800dba4 <_dtoa_r+0x60c>)
 800d9f0:	f001 000f 	and.w	r0, r1, #15
 800d9f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d9f8:	ed92 7b00 	vldr	d7, [r2]
 800d9fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800da00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da04:	4868      	ldr	r0, [pc, #416]	@ (800dba8 <_dtoa_r+0x610>)
 800da06:	1109      	asrs	r1, r1, #4
 800da08:	2400      	movs	r4, #0
 800da0a:	2202      	movs	r2, #2
 800da0c:	b929      	cbnz	r1, 800da1a <_dtoa_r+0x482>
 800da0e:	2c00      	cmp	r4, #0
 800da10:	f43f af57 	beq.w	800d8c2 <_dtoa_r+0x32a>
 800da14:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da18:	e753      	b.n	800d8c2 <_dtoa_r+0x32a>
 800da1a:	07ce      	lsls	r6, r1, #31
 800da1c:	d505      	bpl.n	800da2a <_dtoa_r+0x492>
 800da1e:	ed90 6b00 	vldr	d6, [r0]
 800da22:	3201      	adds	r2, #1
 800da24:	2401      	movs	r4, #1
 800da26:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da2a:	1049      	asrs	r1, r1, #1
 800da2c:	3008      	adds	r0, #8
 800da2e:	e7ed      	b.n	800da0c <_dtoa_r+0x474>
 800da30:	2202      	movs	r2, #2
 800da32:	e746      	b.n	800d8c2 <_dtoa_r+0x32a>
 800da34:	f8cd 8014 	str.w	r8, [sp, #20]
 800da38:	4654      	mov	r4, sl
 800da3a:	e762      	b.n	800d902 <_dtoa_r+0x36a>
 800da3c:	4a59      	ldr	r2, [pc, #356]	@ (800dba4 <_dtoa_r+0x60c>)
 800da3e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800da42:	ed12 4b02 	vldr	d4, [r2, #-8]
 800da46:	9a08      	ldr	r2, [sp, #32]
 800da48:	ec41 0b17 	vmov	d7, r0, r1
 800da4c:	443c      	add	r4, r7
 800da4e:	b34a      	cbz	r2, 800daa4 <_dtoa_r+0x50c>
 800da50:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800da54:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800da58:	463e      	mov	r6, r7
 800da5a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800da5e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800da62:	ee35 7b47 	vsub.f64	d7, d5, d7
 800da66:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800da6a:	ee14 2a90 	vmov	r2, s9
 800da6e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800da72:	3230      	adds	r2, #48	@ 0x30
 800da74:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da80:	f806 2b01 	strb.w	r2, [r6], #1
 800da84:	d438      	bmi.n	800daf8 <_dtoa_r+0x560>
 800da86:	ee32 5b46 	vsub.f64	d5, d2, d6
 800da8a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800da8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da92:	d46e      	bmi.n	800db72 <_dtoa_r+0x5da>
 800da94:	42a6      	cmp	r6, r4
 800da96:	f43f af5a 	beq.w	800d94e <_dtoa_r+0x3b6>
 800da9a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800da9e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800daa2:	e7e0      	b.n	800da66 <_dtoa_r+0x4ce>
 800daa4:	4621      	mov	r1, r4
 800daa6:	463e      	mov	r6, r7
 800daa8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800daac:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800dab0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dab4:	ee14 2a90 	vmov	r2, s9
 800dab8:	3230      	adds	r2, #48	@ 0x30
 800daba:	f806 2b01 	strb.w	r2, [r6], #1
 800dabe:	42a6      	cmp	r6, r4
 800dac0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dac4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dac8:	d119      	bne.n	800dafe <_dtoa_r+0x566>
 800daca:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800dace:	ee37 4b05 	vadd.f64	d4, d7, d5
 800dad2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800dad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dada:	dc4a      	bgt.n	800db72 <_dtoa_r+0x5da>
 800dadc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800dae0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800dae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae8:	f57f af31 	bpl.w	800d94e <_dtoa_r+0x3b6>
 800daec:	460e      	mov	r6, r1
 800daee:	3901      	subs	r1, #1
 800daf0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800daf4:	2b30      	cmp	r3, #48	@ 0x30
 800daf6:	d0f9      	beq.n	800daec <_dtoa_r+0x554>
 800daf8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dafc:	e027      	b.n	800db4e <_dtoa_r+0x5b6>
 800dafe:	ee26 6b03 	vmul.f64	d6, d6, d3
 800db02:	e7d5      	b.n	800dab0 <_dtoa_r+0x518>
 800db04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db08:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800db0c:	463e      	mov	r6, r7
 800db0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800db12:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800db16:	ee15 3a10 	vmov	r3, s10
 800db1a:	3330      	adds	r3, #48	@ 0x30
 800db1c:	f806 3b01 	strb.w	r3, [r6], #1
 800db20:	1bf3      	subs	r3, r6, r7
 800db22:	459a      	cmp	sl, r3
 800db24:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800db28:	eea3 7b46 	vfms.f64	d7, d3, d6
 800db2c:	d132      	bne.n	800db94 <_dtoa_r+0x5fc>
 800db2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800db32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800db36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3a:	dc18      	bgt.n	800db6e <_dtoa_r+0x5d6>
 800db3c:	eeb4 7b46 	vcmp.f64	d7, d6
 800db40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db44:	d103      	bne.n	800db4e <_dtoa_r+0x5b6>
 800db46:	ee15 3a10 	vmov	r3, s10
 800db4a:	07db      	lsls	r3, r3, #31
 800db4c:	d40f      	bmi.n	800db6e <_dtoa_r+0x5d6>
 800db4e:	9901      	ldr	r1, [sp, #4]
 800db50:	4648      	mov	r0, r9
 800db52:	f000 fb09 	bl	800e168 <_Bfree>
 800db56:	2300      	movs	r3, #0
 800db58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800db5a:	7033      	strb	r3, [r6, #0]
 800db5c:	f108 0301 	add.w	r3, r8, #1
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db64:	2b00      	cmp	r3, #0
 800db66:	f000 824b 	beq.w	800e000 <_dtoa_r+0xa68>
 800db6a:	601e      	str	r6, [r3, #0]
 800db6c:	e248      	b.n	800e000 <_dtoa_r+0xa68>
 800db6e:	f8cd 8014 	str.w	r8, [sp, #20]
 800db72:	4633      	mov	r3, r6
 800db74:	461e      	mov	r6, r3
 800db76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db7a:	2a39      	cmp	r2, #57	@ 0x39
 800db7c:	d106      	bne.n	800db8c <_dtoa_r+0x5f4>
 800db7e:	429f      	cmp	r7, r3
 800db80:	d1f8      	bne.n	800db74 <_dtoa_r+0x5dc>
 800db82:	9a05      	ldr	r2, [sp, #20]
 800db84:	3201      	adds	r2, #1
 800db86:	9205      	str	r2, [sp, #20]
 800db88:	2230      	movs	r2, #48	@ 0x30
 800db8a:	703a      	strb	r2, [r7, #0]
 800db8c:	781a      	ldrb	r2, [r3, #0]
 800db8e:	3201      	adds	r2, #1
 800db90:	701a      	strb	r2, [r3, #0]
 800db92:	e7b1      	b.n	800daf8 <_dtoa_r+0x560>
 800db94:	ee27 7b04 	vmul.f64	d7, d7, d4
 800db98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dba0:	d1b5      	bne.n	800db0e <_dtoa_r+0x576>
 800dba2:	e7d4      	b.n	800db4e <_dtoa_r+0x5b6>
 800dba4:	0800f1c8 	.word	0x0800f1c8
 800dba8:	0800f1a0 	.word	0x0800f1a0
 800dbac:	9908      	ldr	r1, [sp, #32]
 800dbae:	2900      	cmp	r1, #0
 800dbb0:	f000 80e9 	beq.w	800dd86 <_dtoa_r+0x7ee>
 800dbb4:	9907      	ldr	r1, [sp, #28]
 800dbb6:	2901      	cmp	r1, #1
 800dbb8:	f300 80cb 	bgt.w	800dd52 <_dtoa_r+0x7ba>
 800dbbc:	2d00      	cmp	r5, #0
 800dbbe:	f000 80c4 	beq.w	800dd4a <_dtoa_r+0x7b2>
 800dbc2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dbc6:	9e04      	ldr	r6, [sp, #16]
 800dbc8:	461c      	mov	r4, r3
 800dbca:	9305      	str	r3, [sp, #20]
 800dbcc:	9b04      	ldr	r3, [sp, #16]
 800dbce:	4413      	add	r3, r2
 800dbd0:	9304      	str	r3, [sp, #16]
 800dbd2:	9b06      	ldr	r3, [sp, #24]
 800dbd4:	2101      	movs	r1, #1
 800dbd6:	4413      	add	r3, r2
 800dbd8:	4648      	mov	r0, r9
 800dbda:	9306      	str	r3, [sp, #24]
 800dbdc:	f000 fb78 	bl	800e2d0 <__i2b>
 800dbe0:	9b05      	ldr	r3, [sp, #20]
 800dbe2:	4605      	mov	r5, r0
 800dbe4:	b166      	cbz	r6, 800dc00 <_dtoa_r+0x668>
 800dbe6:	9a06      	ldr	r2, [sp, #24]
 800dbe8:	2a00      	cmp	r2, #0
 800dbea:	dd09      	ble.n	800dc00 <_dtoa_r+0x668>
 800dbec:	42b2      	cmp	r2, r6
 800dbee:	9904      	ldr	r1, [sp, #16]
 800dbf0:	bfa8      	it	ge
 800dbf2:	4632      	movge	r2, r6
 800dbf4:	1a89      	subs	r1, r1, r2
 800dbf6:	9104      	str	r1, [sp, #16]
 800dbf8:	9906      	ldr	r1, [sp, #24]
 800dbfa:	1ab6      	subs	r6, r6, r2
 800dbfc:	1a8a      	subs	r2, r1, r2
 800dbfe:	9206      	str	r2, [sp, #24]
 800dc00:	b30b      	cbz	r3, 800dc46 <_dtoa_r+0x6ae>
 800dc02:	9a08      	ldr	r2, [sp, #32]
 800dc04:	2a00      	cmp	r2, #0
 800dc06:	f000 80c5 	beq.w	800dd94 <_dtoa_r+0x7fc>
 800dc0a:	2c00      	cmp	r4, #0
 800dc0c:	f000 80bf 	beq.w	800dd8e <_dtoa_r+0x7f6>
 800dc10:	4629      	mov	r1, r5
 800dc12:	4622      	mov	r2, r4
 800dc14:	4648      	mov	r0, r9
 800dc16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc18:	f000 fc12 	bl	800e440 <__pow5mult>
 800dc1c:	9a01      	ldr	r2, [sp, #4]
 800dc1e:	4601      	mov	r1, r0
 800dc20:	4605      	mov	r5, r0
 800dc22:	4648      	mov	r0, r9
 800dc24:	f000 fb6a 	bl	800e2fc <__multiply>
 800dc28:	9901      	ldr	r1, [sp, #4]
 800dc2a:	9005      	str	r0, [sp, #20]
 800dc2c:	4648      	mov	r0, r9
 800dc2e:	f000 fa9b 	bl	800e168 <_Bfree>
 800dc32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc34:	1b1b      	subs	r3, r3, r4
 800dc36:	f000 80b0 	beq.w	800dd9a <_dtoa_r+0x802>
 800dc3a:	9905      	ldr	r1, [sp, #20]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	4648      	mov	r0, r9
 800dc40:	f000 fbfe 	bl	800e440 <__pow5mult>
 800dc44:	9001      	str	r0, [sp, #4]
 800dc46:	2101      	movs	r1, #1
 800dc48:	4648      	mov	r0, r9
 800dc4a:	f000 fb41 	bl	800e2d0 <__i2b>
 800dc4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc50:	4604      	mov	r4, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 81da 	beq.w	800e00c <_dtoa_r+0xa74>
 800dc58:	461a      	mov	r2, r3
 800dc5a:	4601      	mov	r1, r0
 800dc5c:	4648      	mov	r0, r9
 800dc5e:	f000 fbef 	bl	800e440 <__pow5mult>
 800dc62:	9b07      	ldr	r3, [sp, #28]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	4604      	mov	r4, r0
 800dc68:	f300 80a0 	bgt.w	800ddac <_dtoa_r+0x814>
 800dc6c:	9b02      	ldr	r3, [sp, #8]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f040 8096 	bne.w	800dda0 <_dtoa_r+0x808>
 800dc74:	9b03      	ldr	r3, [sp, #12]
 800dc76:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dc7a:	2a00      	cmp	r2, #0
 800dc7c:	f040 8092 	bne.w	800dda4 <_dtoa_r+0x80c>
 800dc80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dc84:	0d12      	lsrs	r2, r2, #20
 800dc86:	0512      	lsls	r2, r2, #20
 800dc88:	2a00      	cmp	r2, #0
 800dc8a:	f000 808d 	beq.w	800dda8 <_dtoa_r+0x810>
 800dc8e:	9b04      	ldr	r3, [sp, #16]
 800dc90:	3301      	adds	r3, #1
 800dc92:	9304      	str	r3, [sp, #16]
 800dc94:	9b06      	ldr	r3, [sp, #24]
 800dc96:	3301      	adds	r3, #1
 800dc98:	9306      	str	r3, [sp, #24]
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f000 81b9 	beq.w	800e018 <_dtoa_r+0xa80>
 800dca6:	6922      	ldr	r2, [r4, #16]
 800dca8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dcac:	6910      	ldr	r0, [r2, #16]
 800dcae:	f000 fac3 	bl	800e238 <__hi0bits>
 800dcb2:	f1c0 0020 	rsb	r0, r0, #32
 800dcb6:	9b06      	ldr	r3, [sp, #24]
 800dcb8:	4418      	add	r0, r3
 800dcba:	f010 001f 	ands.w	r0, r0, #31
 800dcbe:	f000 8081 	beq.w	800ddc4 <_dtoa_r+0x82c>
 800dcc2:	f1c0 0220 	rsb	r2, r0, #32
 800dcc6:	2a04      	cmp	r2, #4
 800dcc8:	dd73      	ble.n	800ddb2 <_dtoa_r+0x81a>
 800dcca:	9b04      	ldr	r3, [sp, #16]
 800dccc:	f1c0 001c 	rsb	r0, r0, #28
 800dcd0:	4403      	add	r3, r0
 800dcd2:	9304      	str	r3, [sp, #16]
 800dcd4:	9b06      	ldr	r3, [sp, #24]
 800dcd6:	4406      	add	r6, r0
 800dcd8:	4403      	add	r3, r0
 800dcda:	9306      	str	r3, [sp, #24]
 800dcdc:	9b04      	ldr	r3, [sp, #16]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	dd05      	ble.n	800dcee <_dtoa_r+0x756>
 800dce2:	9901      	ldr	r1, [sp, #4]
 800dce4:	461a      	mov	r2, r3
 800dce6:	4648      	mov	r0, r9
 800dce8:	f000 fc04 	bl	800e4f4 <__lshift>
 800dcec:	9001      	str	r0, [sp, #4]
 800dcee:	9b06      	ldr	r3, [sp, #24]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	dd05      	ble.n	800dd00 <_dtoa_r+0x768>
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	4648      	mov	r0, r9
 800dcfa:	f000 fbfb 	bl	800e4f4 <__lshift>
 800dcfe:	4604      	mov	r4, r0
 800dd00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d060      	beq.n	800ddc8 <_dtoa_r+0x830>
 800dd06:	9801      	ldr	r0, [sp, #4]
 800dd08:	4621      	mov	r1, r4
 800dd0a:	f000 fc5f 	bl	800e5cc <__mcmp>
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	da5a      	bge.n	800ddc8 <_dtoa_r+0x830>
 800dd12:	f108 33ff 	add.w	r3, r8, #4294967295
 800dd16:	9305      	str	r3, [sp, #20]
 800dd18:	9901      	ldr	r1, [sp, #4]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	220a      	movs	r2, #10
 800dd1e:	4648      	mov	r0, r9
 800dd20:	f000 fa44 	bl	800e1ac <__multadd>
 800dd24:	9b08      	ldr	r3, [sp, #32]
 800dd26:	9001      	str	r0, [sp, #4]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 8177 	beq.w	800e01c <_dtoa_r+0xa84>
 800dd2e:	4629      	mov	r1, r5
 800dd30:	2300      	movs	r3, #0
 800dd32:	220a      	movs	r2, #10
 800dd34:	4648      	mov	r0, r9
 800dd36:	f000 fa39 	bl	800e1ac <__multadd>
 800dd3a:	f1bb 0f00 	cmp.w	fp, #0
 800dd3e:	4605      	mov	r5, r0
 800dd40:	dc6e      	bgt.n	800de20 <_dtoa_r+0x888>
 800dd42:	9b07      	ldr	r3, [sp, #28]
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	dc48      	bgt.n	800ddda <_dtoa_r+0x842>
 800dd48:	e06a      	b.n	800de20 <_dtoa_r+0x888>
 800dd4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd4c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dd50:	e739      	b.n	800dbc6 <_dtoa_r+0x62e>
 800dd52:	f10a 34ff 	add.w	r4, sl, #4294967295
 800dd56:	42a3      	cmp	r3, r4
 800dd58:	db07      	blt.n	800dd6a <_dtoa_r+0x7d2>
 800dd5a:	f1ba 0f00 	cmp.w	sl, #0
 800dd5e:	eba3 0404 	sub.w	r4, r3, r4
 800dd62:	db0b      	blt.n	800dd7c <_dtoa_r+0x7e4>
 800dd64:	9e04      	ldr	r6, [sp, #16]
 800dd66:	4652      	mov	r2, sl
 800dd68:	e72f      	b.n	800dbca <_dtoa_r+0x632>
 800dd6a:	1ae2      	subs	r2, r4, r3
 800dd6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd6e:	9e04      	ldr	r6, [sp, #16]
 800dd70:	4413      	add	r3, r2
 800dd72:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd74:	4652      	mov	r2, sl
 800dd76:	4623      	mov	r3, r4
 800dd78:	2400      	movs	r4, #0
 800dd7a:	e726      	b.n	800dbca <_dtoa_r+0x632>
 800dd7c:	9a04      	ldr	r2, [sp, #16]
 800dd7e:	eba2 060a 	sub.w	r6, r2, sl
 800dd82:	2200      	movs	r2, #0
 800dd84:	e721      	b.n	800dbca <_dtoa_r+0x632>
 800dd86:	9e04      	ldr	r6, [sp, #16]
 800dd88:	9d08      	ldr	r5, [sp, #32]
 800dd8a:	461c      	mov	r4, r3
 800dd8c:	e72a      	b.n	800dbe4 <_dtoa_r+0x64c>
 800dd8e:	9a01      	ldr	r2, [sp, #4]
 800dd90:	9205      	str	r2, [sp, #20]
 800dd92:	e752      	b.n	800dc3a <_dtoa_r+0x6a2>
 800dd94:	9901      	ldr	r1, [sp, #4]
 800dd96:	461a      	mov	r2, r3
 800dd98:	e751      	b.n	800dc3e <_dtoa_r+0x6a6>
 800dd9a:	9b05      	ldr	r3, [sp, #20]
 800dd9c:	9301      	str	r3, [sp, #4]
 800dd9e:	e752      	b.n	800dc46 <_dtoa_r+0x6ae>
 800dda0:	2300      	movs	r3, #0
 800dda2:	e77b      	b.n	800dc9c <_dtoa_r+0x704>
 800dda4:	9b02      	ldr	r3, [sp, #8]
 800dda6:	e779      	b.n	800dc9c <_dtoa_r+0x704>
 800dda8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ddaa:	e778      	b.n	800dc9e <_dtoa_r+0x706>
 800ddac:	2300      	movs	r3, #0
 800ddae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddb0:	e779      	b.n	800dca6 <_dtoa_r+0x70e>
 800ddb2:	d093      	beq.n	800dcdc <_dtoa_r+0x744>
 800ddb4:	9b04      	ldr	r3, [sp, #16]
 800ddb6:	321c      	adds	r2, #28
 800ddb8:	4413      	add	r3, r2
 800ddba:	9304      	str	r3, [sp, #16]
 800ddbc:	9b06      	ldr	r3, [sp, #24]
 800ddbe:	4416      	add	r6, r2
 800ddc0:	4413      	add	r3, r2
 800ddc2:	e78a      	b.n	800dcda <_dtoa_r+0x742>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	e7f5      	b.n	800ddb4 <_dtoa_r+0x81c>
 800ddc8:	f1ba 0f00 	cmp.w	sl, #0
 800ddcc:	f8cd 8014 	str.w	r8, [sp, #20]
 800ddd0:	46d3      	mov	fp, sl
 800ddd2:	dc21      	bgt.n	800de18 <_dtoa_r+0x880>
 800ddd4:	9b07      	ldr	r3, [sp, #28]
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	dd1e      	ble.n	800de18 <_dtoa_r+0x880>
 800ddda:	f1bb 0f00 	cmp.w	fp, #0
 800ddde:	f47f addc 	bne.w	800d99a <_dtoa_r+0x402>
 800dde2:	4621      	mov	r1, r4
 800dde4:	465b      	mov	r3, fp
 800dde6:	2205      	movs	r2, #5
 800dde8:	4648      	mov	r0, r9
 800ddea:	f000 f9df 	bl	800e1ac <__multadd>
 800ddee:	4601      	mov	r1, r0
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	9801      	ldr	r0, [sp, #4]
 800ddf4:	f000 fbea 	bl	800e5cc <__mcmp>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	f77f adce 	ble.w	800d99a <_dtoa_r+0x402>
 800ddfe:	463e      	mov	r6, r7
 800de00:	2331      	movs	r3, #49	@ 0x31
 800de02:	f806 3b01 	strb.w	r3, [r6], #1
 800de06:	9b05      	ldr	r3, [sp, #20]
 800de08:	3301      	adds	r3, #1
 800de0a:	9305      	str	r3, [sp, #20]
 800de0c:	e5c9      	b.n	800d9a2 <_dtoa_r+0x40a>
 800de0e:	f8cd 8014 	str.w	r8, [sp, #20]
 800de12:	4654      	mov	r4, sl
 800de14:	4625      	mov	r5, r4
 800de16:	e7f2      	b.n	800ddfe <_dtoa_r+0x866>
 800de18:	9b08      	ldr	r3, [sp, #32]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 8102 	beq.w	800e024 <_dtoa_r+0xa8c>
 800de20:	2e00      	cmp	r6, #0
 800de22:	dd05      	ble.n	800de30 <_dtoa_r+0x898>
 800de24:	4629      	mov	r1, r5
 800de26:	4632      	mov	r2, r6
 800de28:	4648      	mov	r0, r9
 800de2a:	f000 fb63 	bl	800e4f4 <__lshift>
 800de2e:	4605      	mov	r5, r0
 800de30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de32:	2b00      	cmp	r3, #0
 800de34:	d058      	beq.n	800dee8 <_dtoa_r+0x950>
 800de36:	6869      	ldr	r1, [r5, #4]
 800de38:	4648      	mov	r0, r9
 800de3a:	f000 f955 	bl	800e0e8 <_Balloc>
 800de3e:	4606      	mov	r6, r0
 800de40:	b928      	cbnz	r0, 800de4e <_dtoa_r+0x8b6>
 800de42:	4b82      	ldr	r3, [pc, #520]	@ (800e04c <_dtoa_r+0xab4>)
 800de44:	4602      	mov	r2, r0
 800de46:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800de4a:	f7ff bbbe 	b.w	800d5ca <_dtoa_r+0x32>
 800de4e:	692a      	ldr	r2, [r5, #16]
 800de50:	3202      	adds	r2, #2
 800de52:	0092      	lsls	r2, r2, #2
 800de54:	f105 010c 	add.w	r1, r5, #12
 800de58:	300c      	adds	r0, #12
 800de5a:	f7ff fb06 	bl	800d46a <memcpy>
 800de5e:	2201      	movs	r2, #1
 800de60:	4631      	mov	r1, r6
 800de62:	4648      	mov	r0, r9
 800de64:	f000 fb46 	bl	800e4f4 <__lshift>
 800de68:	1c7b      	adds	r3, r7, #1
 800de6a:	9304      	str	r3, [sp, #16]
 800de6c:	eb07 030b 	add.w	r3, r7, fp
 800de70:	9309      	str	r3, [sp, #36]	@ 0x24
 800de72:	9b02      	ldr	r3, [sp, #8]
 800de74:	f003 0301 	and.w	r3, r3, #1
 800de78:	46a8      	mov	r8, r5
 800de7a:	9308      	str	r3, [sp, #32]
 800de7c:	4605      	mov	r5, r0
 800de7e:	9b04      	ldr	r3, [sp, #16]
 800de80:	9801      	ldr	r0, [sp, #4]
 800de82:	4621      	mov	r1, r4
 800de84:	f103 3bff 	add.w	fp, r3, #4294967295
 800de88:	f7ff fafd 	bl	800d486 <quorem>
 800de8c:	4641      	mov	r1, r8
 800de8e:	9002      	str	r0, [sp, #8]
 800de90:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800de94:	9801      	ldr	r0, [sp, #4]
 800de96:	f000 fb99 	bl	800e5cc <__mcmp>
 800de9a:	462a      	mov	r2, r5
 800de9c:	9006      	str	r0, [sp, #24]
 800de9e:	4621      	mov	r1, r4
 800dea0:	4648      	mov	r0, r9
 800dea2:	f000 fbaf 	bl	800e604 <__mdiff>
 800dea6:	68c2      	ldr	r2, [r0, #12]
 800dea8:	4606      	mov	r6, r0
 800deaa:	b9fa      	cbnz	r2, 800deec <_dtoa_r+0x954>
 800deac:	4601      	mov	r1, r0
 800deae:	9801      	ldr	r0, [sp, #4]
 800deb0:	f000 fb8c 	bl	800e5cc <__mcmp>
 800deb4:	4602      	mov	r2, r0
 800deb6:	4631      	mov	r1, r6
 800deb8:	4648      	mov	r0, r9
 800deba:	920a      	str	r2, [sp, #40]	@ 0x28
 800debc:	f000 f954 	bl	800e168 <_Bfree>
 800dec0:	9b07      	ldr	r3, [sp, #28]
 800dec2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dec4:	9e04      	ldr	r6, [sp, #16]
 800dec6:	ea42 0103 	orr.w	r1, r2, r3
 800deca:	9b08      	ldr	r3, [sp, #32]
 800decc:	4319      	orrs	r1, r3
 800dece:	d10f      	bne.n	800def0 <_dtoa_r+0x958>
 800ded0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ded4:	d028      	beq.n	800df28 <_dtoa_r+0x990>
 800ded6:	9b06      	ldr	r3, [sp, #24]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	dd02      	ble.n	800dee2 <_dtoa_r+0x94a>
 800dedc:	9b02      	ldr	r3, [sp, #8]
 800dede:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800dee2:	f88b a000 	strb.w	sl, [fp]
 800dee6:	e55e      	b.n	800d9a6 <_dtoa_r+0x40e>
 800dee8:	4628      	mov	r0, r5
 800deea:	e7bd      	b.n	800de68 <_dtoa_r+0x8d0>
 800deec:	2201      	movs	r2, #1
 800deee:	e7e2      	b.n	800deb6 <_dtoa_r+0x91e>
 800def0:	9b06      	ldr	r3, [sp, #24]
 800def2:	2b00      	cmp	r3, #0
 800def4:	db04      	blt.n	800df00 <_dtoa_r+0x968>
 800def6:	9907      	ldr	r1, [sp, #28]
 800def8:	430b      	orrs	r3, r1
 800defa:	9908      	ldr	r1, [sp, #32]
 800defc:	430b      	orrs	r3, r1
 800defe:	d120      	bne.n	800df42 <_dtoa_r+0x9aa>
 800df00:	2a00      	cmp	r2, #0
 800df02:	ddee      	ble.n	800dee2 <_dtoa_r+0x94a>
 800df04:	9901      	ldr	r1, [sp, #4]
 800df06:	2201      	movs	r2, #1
 800df08:	4648      	mov	r0, r9
 800df0a:	f000 faf3 	bl	800e4f4 <__lshift>
 800df0e:	4621      	mov	r1, r4
 800df10:	9001      	str	r0, [sp, #4]
 800df12:	f000 fb5b 	bl	800e5cc <__mcmp>
 800df16:	2800      	cmp	r0, #0
 800df18:	dc03      	bgt.n	800df22 <_dtoa_r+0x98a>
 800df1a:	d1e2      	bne.n	800dee2 <_dtoa_r+0x94a>
 800df1c:	f01a 0f01 	tst.w	sl, #1
 800df20:	d0df      	beq.n	800dee2 <_dtoa_r+0x94a>
 800df22:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800df26:	d1d9      	bne.n	800dedc <_dtoa_r+0x944>
 800df28:	2339      	movs	r3, #57	@ 0x39
 800df2a:	f88b 3000 	strb.w	r3, [fp]
 800df2e:	4633      	mov	r3, r6
 800df30:	461e      	mov	r6, r3
 800df32:	3b01      	subs	r3, #1
 800df34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800df38:	2a39      	cmp	r2, #57	@ 0x39
 800df3a:	d052      	beq.n	800dfe2 <_dtoa_r+0xa4a>
 800df3c:	3201      	adds	r2, #1
 800df3e:	701a      	strb	r2, [r3, #0]
 800df40:	e531      	b.n	800d9a6 <_dtoa_r+0x40e>
 800df42:	2a00      	cmp	r2, #0
 800df44:	dd07      	ble.n	800df56 <_dtoa_r+0x9be>
 800df46:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800df4a:	d0ed      	beq.n	800df28 <_dtoa_r+0x990>
 800df4c:	f10a 0301 	add.w	r3, sl, #1
 800df50:	f88b 3000 	strb.w	r3, [fp]
 800df54:	e527      	b.n	800d9a6 <_dtoa_r+0x40e>
 800df56:	9b04      	ldr	r3, [sp, #16]
 800df58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df5a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800df5e:	4293      	cmp	r3, r2
 800df60:	d029      	beq.n	800dfb6 <_dtoa_r+0xa1e>
 800df62:	9901      	ldr	r1, [sp, #4]
 800df64:	2300      	movs	r3, #0
 800df66:	220a      	movs	r2, #10
 800df68:	4648      	mov	r0, r9
 800df6a:	f000 f91f 	bl	800e1ac <__multadd>
 800df6e:	45a8      	cmp	r8, r5
 800df70:	9001      	str	r0, [sp, #4]
 800df72:	f04f 0300 	mov.w	r3, #0
 800df76:	f04f 020a 	mov.w	r2, #10
 800df7a:	4641      	mov	r1, r8
 800df7c:	4648      	mov	r0, r9
 800df7e:	d107      	bne.n	800df90 <_dtoa_r+0x9f8>
 800df80:	f000 f914 	bl	800e1ac <__multadd>
 800df84:	4680      	mov	r8, r0
 800df86:	4605      	mov	r5, r0
 800df88:	9b04      	ldr	r3, [sp, #16]
 800df8a:	3301      	adds	r3, #1
 800df8c:	9304      	str	r3, [sp, #16]
 800df8e:	e776      	b.n	800de7e <_dtoa_r+0x8e6>
 800df90:	f000 f90c 	bl	800e1ac <__multadd>
 800df94:	4629      	mov	r1, r5
 800df96:	4680      	mov	r8, r0
 800df98:	2300      	movs	r3, #0
 800df9a:	220a      	movs	r2, #10
 800df9c:	4648      	mov	r0, r9
 800df9e:	f000 f905 	bl	800e1ac <__multadd>
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	e7f0      	b.n	800df88 <_dtoa_r+0x9f0>
 800dfa6:	f1bb 0f00 	cmp.w	fp, #0
 800dfaa:	bfcc      	ite	gt
 800dfac:	465e      	movgt	r6, fp
 800dfae:	2601      	movle	r6, #1
 800dfb0:	443e      	add	r6, r7
 800dfb2:	f04f 0800 	mov.w	r8, #0
 800dfb6:	9901      	ldr	r1, [sp, #4]
 800dfb8:	2201      	movs	r2, #1
 800dfba:	4648      	mov	r0, r9
 800dfbc:	f000 fa9a 	bl	800e4f4 <__lshift>
 800dfc0:	4621      	mov	r1, r4
 800dfc2:	9001      	str	r0, [sp, #4]
 800dfc4:	f000 fb02 	bl	800e5cc <__mcmp>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	dcb0      	bgt.n	800df2e <_dtoa_r+0x996>
 800dfcc:	d102      	bne.n	800dfd4 <_dtoa_r+0xa3c>
 800dfce:	f01a 0f01 	tst.w	sl, #1
 800dfd2:	d1ac      	bne.n	800df2e <_dtoa_r+0x996>
 800dfd4:	4633      	mov	r3, r6
 800dfd6:	461e      	mov	r6, r3
 800dfd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfdc:	2a30      	cmp	r2, #48	@ 0x30
 800dfde:	d0fa      	beq.n	800dfd6 <_dtoa_r+0xa3e>
 800dfe0:	e4e1      	b.n	800d9a6 <_dtoa_r+0x40e>
 800dfe2:	429f      	cmp	r7, r3
 800dfe4:	d1a4      	bne.n	800df30 <_dtoa_r+0x998>
 800dfe6:	9b05      	ldr	r3, [sp, #20]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	9305      	str	r3, [sp, #20]
 800dfec:	2331      	movs	r3, #49	@ 0x31
 800dfee:	703b      	strb	r3, [r7, #0]
 800dff0:	e4d9      	b.n	800d9a6 <_dtoa_r+0x40e>
 800dff2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dff4:	4f16      	ldr	r7, [pc, #88]	@ (800e050 <_dtoa_r+0xab8>)
 800dff6:	b11b      	cbz	r3, 800e000 <_dtoa_r+0xa68>
 800dff8:	f107 0308 	add.w	r3, r7, #8
 800dffc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800dffe:	6013      	str	r3, [r2, #0]
 800e000:	4638      	mov	r0, r7
 800e002:	b011      	add	sp, #68	@ 0x44
 800e004:	ecbd 8b02 	vpop	{d8}
 800e008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00c:	9b07      	ldr	r3, [sp, #28]
 800e00e:	2b01      	cmp	r3, #1
 800e010:	f77f ae2c 	ble.w	800dc6c <_dtoa_r+0x6d4>
 800e014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e016:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e018:	2001      	movs	r0, #1
 800e01a:	e64c      	b.n	800dcb6 <_dtoa_r+0x71e>
 800e01c:	f1bb 0f00 	cmp.w	fp, #0
 800e020:	f77f aed8 	ble.w	800ddd4 <_dtoa_r+0x83c>
 800e024:	463e      	mov	r6, r7
 800e026:	9801      	ldr	r0, [sp, #4]
 800e028:	4621      	mov	r1, r4
 800e02a:	f7ff fa2c 	bl	800d486 <quorem>
 800e02e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e032:	f806 ab01 	strb.w	sl, [r6], #1
 800e036:	1bf2      	subs	r2, r6, r7
 800e038:	4593      	cmp	fp, r2
 800e03a:	ddb4      	ble.n	800dfa6 <_dtoa_r+0xa0e>
 800e03c:	9901      	ldr	r1, [sp, #4]
 800e03e:	2300      	movs	r3, #0
 800e040:	220a      	movs	r2, #10
 800e042:	4648      	mov	r0, r9
 800e044:	f000 f8b2 	bl	800e1ac <__multadd>
 800e048:	9001      	str	r0, [sp, #4]
 800e04a:	e7ec      	b.n	800e026 <_dtoa_r+0xa8e>
 800e04c:	0800f0cc 	.word	0x0800f0cc
 800e050:	0800f050 	.word	0x0800f050

0800e054 <_free_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	4605      	mov	r5, r0
 800e058:	2900      	cmp	r1, #0
 800e05a:	d041      	beq.n	800e0e0 <_free_r+0x8c>
 800e05c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e060:	1f0c      	subs	r4, r1, #4
 800e062:	2b00      	cmp	r3, #0
 800e064:	bfb8      	it	lt
 800e066:	18e4      	addlt	r4, r4, r3
 800e068:	f7fe fc16 	bl	800c898 <__malloc_lock>
 800e06c:	4a1d      	ldr	r2, [pc, #116]	@ (800e0e4 <_free_r+0x90>)
 800e06e:	6813      	ldr	r3, [r2, #0]
 800e070:	b933      	cbnz	r3, 800e080 <_free_r+0x2c>
 800e072:	6063      	str	r3, [r4, #4]
 800e074:	6014      	str	r4, [r2, #0]
 800e076:	4628      	mov	r0, r5
 800e078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e07c:	f7fe bc12 	b.w	800c8a4 <__malloc_unlock>
 800e080:	42a3      	cmp	r3, r4
 800e082:	d908      	bls.n	800e096 <_free_r+0x42>
 800e084:	6820      	ldr	r0, [r4, #0]
 800e086:	1821      	adds	r1, r4, r0
 800e088:	428b      	cmp	r3, r1
 800e08a:	bf01      	itttt	eq
 800e08c:	6819      	ldreq	r1, [r3, #0]
 800e08e:	685b      	ldreq	r3, [r3, #4]
 800e090:	1809      	addeq	r1, r1, r0
 800e092:	6021      	streq	r1, [r4, #0]
 800e094:	e7ed      	b.n	800e072 <_free_r+0x1e>
 800e096:	461a      	mov	r2, r3
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	b10b      	cbz	r3, 800e0a0 <_free_r+0x4c>
 800e09c:	42a3      	cmp	r3, r4
 800e09e:	d9fa      	bls.n	800e096 <_free_r+0x42>
 800e0a0:	6811      	ldr	r1, [r2, #0]
 800e0a2:	1850      	adds	r0, r2, r1
 800e0a4:	42a0      	cmp	r0, r4
 800e0a6:	d10b      	bne.n	800e0c0 <_free_r+0x6c>
 800e0a8:	6820      	ldr	r0, [r4, #0]
 800e0aa:	4401      	add	r1, r0
 800e0ac:	1850      	adds	r0, r2, r1
 800e0ae:	4283      	cmp	r3, r0
 800e0b0:	6011      	str	r1, [r2, #0]
 800e0b2:	d1e0      	bne.n	800e076 <_free_r+0x22>
 800e0b4:	6818      	ldr	r0, [r3, #0]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	6053      	str	r3, [r2, #4]
 800e0ba:	4408      	add	r0, r1
 800e0bc:	6010      	str	r0, [r2, #0]
 800e0be:	e7da      	b.n	800e076 <_free_r+0x22>
 800e0c0:	d902      	bls.n	800e0c8 <_free_r+0x74>
 800e0c2:	230c      	movs	r3, #12
 800e0c4:	602b      	str	r3, [r5, #0]
 800e0c6:	e7d6      	b.n	800e076 <_free_r+0x22>
 800e0c8:	6820      	ldr	r0, [r4, #0]
 800e0ca:	1821      	adds	r1, r4, r0
 800e0cc:	428b      	cmp	r3, r1
 800e0ce:	bf04      	itt	eq
 800e0d0:	6819      	ldreq	r1, [r3, #0]
 800e0d2:	685b      	ldreq	r3, [r3, #4]
 800e0d4:	6063      	str	r3, [r4, #4]
 800e0d6:	bf04      	itt	eq
 800e0d8:	1809      	addeq	r1, r1, r0
 800e0da:	6021      	streq	r1, [r4, #0]
 800e0dc:	6054      	str	r4, [r2, #4]
 800e0de:	e7ca      	b.n	800e076 <_free_r+0x22>
 800e0e0:	bd38      	pop	{r3, r4, r5, pc}
 800e0e2:	bf00      	nop
 800e0e4:	24000cb8 	.word	0x24000cb8

0800e0e8 <_Balloc>:
 800e0e8:	b570      	push	{r4, r5, r6, lr}
 800e0ea:	69c6      	ldr	r6, [r0, #28]
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	460d      	mov	r5, r1
 800e0f0:	b976      	cbnz	r6, 800e110 <_Balloc+0x28>
 800e0f2:	2010      	movs	r0, #16
 800e0f4:	f7fe fb26 	bl	800c744 <malloc>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	61e0      	str	r0, [r4, #28]
 800e0fc:	b920      	cbnz	r0, 800e108 <_Balloc+0x20>
 800e0fe:	4b18      	ldr	r3, [pc, #96]	@ (800e160 <_Balloc+0x78>)
 800e100:	4818      	ldr	r0, [pc, #96]	@ (800e164 <_Balloc+0x7c>)
 800e102:	216b      	movs	r1, #107	@ 0x6b
 800e104:	f000 fdec 	bl	800ece0 <__assert_func>
 800e108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e10c:	6006      	str	r6, [r0, #0]
 800e10e:	60c6      	str	r6, [r0, #12]
 800e110:	69e6      	ldr	r6, [r4, #28]
 800e112:	68f3      	ldr	r3, [r6, #12]
 800e114:	b183      	cbz	r3, 800e138 <_Balloc+0x50>
 800e116:	69e3      	ldr	r3, [r4, #28]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e11e:	b9b8      	cbnz	r0, 800e150 <_Balloc+0x68>
 800e120:	2101      	movs	r1, #1
 800e122:	fa01 f605 	lsl.w	r6, r1, r5
 800e126:	1d72      	adds	r2, r6, #5
 800e128:	0092      	lsls	r2, r2, #2
 800e12a:	4620      	mov	r0, r4
 800e12c:	f000 fdf6 	bl	800ed1c <_calloc_r>
 800e130:	b160      	cbz	r0, 800e14c <_Balloc+0x64>
 800e132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e136:	e00e      	b.n	800e156 <_Balloc+0x6e>
 800e138:	2221      	movs	r2, #33	@ 0x21
 800e13a:	2104      	movs	r1, #4
 800e13c:	4620      	mov	r0, r4
 800e13e:	f000 fded 	bl	800ed1c <_calloc_r>
 800e142:	69e3      	ldr	r3, [r4, #28]
 800e144:	60f0      	str	r0, [r6, #12]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1e4      	bne.n	800e116 <_Balloc+0x2e>
 800e14c:	2000      	movs	r0, #0
 800e14e:	bd70      	pop	{r4, r5, r6, pc}
 800e150:	6802      	ldr	r2, [r0, #0]
 800e152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e156:	2300      	movs	r3, #0
 800e158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e15c:	e7f7      	b.n	800e14e <_Balloc+0x66>
 800e15e:	bf00      	nop
 800e160:	0800f05d 	.word	0x0800f05d
 800e164:	0800f0dd 	.word	0x0800f0dd

0800e168 <_Bfree>:
 800e168:	b570      	push	{r4, r5, r6, lr}
 800e16a:	69c6      	ldr	r6, [r0, #28]
 800e16c:	4605      	mov	r5, r0
 800e16e:	460c      	mov	r4, r1
 800e170:	b976      	cbnz	r6, 800e190 <_Bfree+0x28>
 800e172:	2010      	movs	r0, #16
 800e174:	f7fe fae6 	bl	800c744 <malloc>
 800e178:	4602      	mov	r2, r0
 800e17a:	61e8      	str	r0, [r5, #28]
 800e17c:	b920      	cbnz	r0, 800e188 <_Bfree+0x20>
 800e17e:	4b09      	ldr	r3, [pc, #36]	@ (800e1a4 <_Bfree+0x3c>)
 800e180:	4809      	ldr	r0, [pc, #36]	@ (800e1a8 <_Bfree+0x40>)
 800e182:	218f      	movs	r1, #143	@ 0x8f
 800e184:	f000 fdac 	bl	800ece0 <__assert_func>
 800e188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e18c:	6006      	str	r6, [r0, #0]
 800e18e:	60c6      	str	r6, [r0, #12]
 800e190:	b13c      	cbz	r4, 800e1a2 <_Bfree+0x3a>
 800e192:	69eb      	ldr	r3, [r5, #28]
 800e194:	6862      	ldr	r2, [r4, #4]
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e19c:	6021      	str	r1, [r4, #0]
 800e19e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}
 800e1a4:	0800f05d 	.word	0x0800f05d
 800e1a8:	0800f0dd 	.word	0x0800f0dd

0800e1ac <__multadd>:
 800e1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b0:	690d      	ldr	r5, [r1, #16]
 800e1b2:	4607      	mov	r7, r0
 800e1b4:	460c      	mov	r4, r1
 800e1b6:	461e      	mov	r6, r3
 800e1b8:	f101 0c14 	add.w	ip, r1, #20
 800e1bc:	2000      	movs	r0, #0
 800e1be:	f8dc 3000 	ldr.w	r3, [ip]
 800e1c2:	b299      	uxth	r1, r3
 800e1c4:	fb02 6101 	mla	r1, r2, r1, r6
 800e1c8:	0c1e      	lsrs	r6, r3, #16
 800e1ca:	0c0b      	lsrs	r3, r1, #16
 800e1cc:	fb02 3306 	mla	r3, r2, r6, r3
 800e1d0:	b289      	uxth	r1, r1
 800e1d2:	3001      	adds	r0, #1
 800e1d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1d8:	4285      	cmp	r5, r0
 800e1da:	f84c 1b04 	str.w	r1, [ip], #4
 800e1de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1e2:	dcec      	bgt.n	800e1be <__multadd+0x12>
 800e1e4:	b30e      	cbz	r6, 800e22a <__multadd+0x7e>
 800e1e6:	68a3      	ldr	r3, [r4, #8]
 800e1e8:	42ab      	cmp	r3, r5
 800e1ea:	dc19      	bgt.n	800e220 <__multadd+0x74>
 800e1ec:	6861      	ldr	r1, [r4, #4]
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	3101      	adds	r1, #1
 800e1f2:	f7ff ff79 	bl	800e0e8 <_Balloc>
 800e1f6:	4680      	mov	r8, r0
 800e1f8:	b928      	cbnz	r0, 800e206 <__multadd+0x5a>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	4b0c      	ldr	r3, [pc, #48]	@ (800e230 <__multadd+0x84>)
 800e1fe:	480d      	ldr	r0, [pc, #52]	@ (800e234 <__multadd+0x88>)
 800e200:	21ba      	movs	r1, #186	@ 0xba
 800e202:	f000 fd6d 	bl	800ece0 <__assert_func>
 800e206:	6922      	ldr	r2, [r4, #16]
 800e208:	3202      	adds	r2, #2
 800e20a:	f104 010c 	add.w	r1, r4, #12
 800e20e:	0092      	lsls	r2, r2, #2
 800e210:	300c      	adds	r0, #12
 800e212:	f7ff f92a 	bl	800d46a <memcpy>
 800e216:	4621      	mov	r1, r4
 800e218:	4638      	mov	r0, r7
 800e21a:	f7ff ffa5 	bl	800e168 <_Bfree>
 800e21e:	4644      	mov	r4, r8
 800e220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e224:	3501      	adds	r5, #1
 800e226:	615e      	str	r6, [r3, #20]
 800e228:	6125      	str	r5, [r4, #16]
 800e22a:	4620      	mov	r0, r4
 800e22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e230:	0800f0cc 	.word	0x0800f0cc
 800e234:	0800f0dd 	.word	0x0800f0dd

0800e238 <__hi0bits>:
 800e238:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e23c:	4603      	mov	r3, r0
 800e23e:	bf36      	itet	cc
 800e240:	0403      	lslcc	r3, r0, #16
 800e242:	2000      	movcs	r0, #0
 800e244:	2010      	movcc	r0, #16
 800e246:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e24a:	bf3c      	itt	cc
 800e24c:	021b      	lslcc	r3, r3, #8
 800e24e:	3008      	addcc	r0, #8
 800e250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e254:	bf3c      	itt	cc
 800e256:	011b      	lslcc	r3, r3, #4
 800e258:	3004      	addcc	r0, #4
 800e25a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e25e:	bf3c      	itt	cc
 800e260:	009b      	lslcc	r3, r3, #2
 800e262:	3002      	addcc	r0, #2
 800e264:	2b00      	cmp	r3, #0
 800e266:	db05      	blt.n	800e274 <__hi0bits+0x3c>
 800e268:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e26c:	f100 0001 	add.w	r0, r0, #1
 800e270:	bf08      	it	eq
 800e272:	2020      	moveq	r0, #32
 800e274:	4770      	bx	lr

0800e276 <__lo0bits>:
 800e276:	6803      	ldr	r3, [r0, #0]
 800e278:	4602      	mov	r2, r0
 800e27a:	f013 0007 	ands.w	r0, r3, #7
 800e27e:	d00b      	beq.n	800e298 <__lo0bits+0x22>
 800e280:	07d9      	lsls	r1, r3, #31
 800e282:	d421      	bmi.n	800e2c8 <__lo0bits+0x52>
 800e284:	0798      	lsls	r0, r3, #30
 800e286:	bf49      	itett	mi
 800e288:	085b      	lsrmi	r3, r3, #1
 800e28a:	089b      	lsrpl	r3, r3, #2
 800e28c:	2001      	movmi	r0, #1
 800e28e:	6013      	strmi	r3, [r2, #0]
 800e290:	bf5c      	itt	pl
 800e292:	6013      	strpl	r3, [r2, #0]
 800e294:	2002      	movpl	r0, #2
 800e296:	4770      	bx	lr
 800e298:	b299      	uxth	r1, r3
 800e29a:	b909      	cbnz	r1, 800e2a0 <__lo0bits+0x2a>
 800e29c:	0c1b      	lsrs	r3, r3, #16
 800e29e:	2010      	movs	r0, #16
 800e2a0:	b2d9      	uxtb	r1, r3
 800e2a2:	b909      	cbnz	r1, 800e2a8 <__lo0bits+0x32>
 800e2a4:	3008      	adds	r0, #8
 800e2a6:	0a1b      	lsrs	r3, r3, #8
 800e2a8:	0719      	lsls	r1, r3, #28
 800e2aa:	bf04      	itt	eq
 800e2ac:	091b      	lsreq	r3, r3, #4
 800e2ae:	3004      	addeq	r0, #4
 800e2b0:	0799      	lsls	r1, r3, #30
 800e2b2:	bf04      	itt	eq
 800e2b4:	089b      	lsreq	r3, r3, #2
 800e2b6:	3002      	addeq	r0, #2
 800e2b8:	07d9      	lsls	r1, r3, #31
 800e2ba:	d403      	bmi.n	800e2c4 <__lo0bits+0x4e>
 800e2bc:	085b      	lsrs	r3, r3, #1
 800e2be:	f100 0001 	add.w	r0, r0, #1
 800e2c2:	d003      	beq.n	800e2cc <__lo0bits+0x56>
 800e2c4:	6013      	str	r3, [r2, #0]
 800e2c6:	4770      	bx	lr
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	4770      	bx	lr
 800e2cc:	2020      	movs	r0, #32
 800e2ce:	4770      	bx	lr

0800e2d0 <__i2b>:
 800e2d0:	b510      	push	{r4, lr}
 800e2d2:	460c      	mov	r4, r1
 800e2d4:	2101      	movs	r1, #1
 800e2d6:	f7ff ff07 	bl	800e0e8 <_Balloc>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	b928      	cbnz	r0, 800e2ea <__i2b+0x1a>
 800e2de:	4b05      	ldr	r3, [pc, #20]	@ (800e2f4 <__i2b+0x24>)
 800e2e0:	4805      	ldr	r0, [pc, #20]	@ (800e2f8 <__i2b+0x28>)
 800e2e2:	f240 1145 	movw	r1, #325	@ 0x145
 800e2e6:	f000 fcfb 	bl	800ece0 <__assert_func>
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	6144      	str	r4, [r0, #20]
 800e2ee:	6103      	str	r3, [r0, #16]
 800e2f0:	bd10      	pop	{r4, pc}
 800e2f2:	bf00      	nop
 800e2f4:	0800f0cc 	.word	0x0800f0cc
 800e2f8:	0800f0dd 	.word	0x0800f0dd

0800e2fc <__multiply>:
 800e2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e300:	4617      	mov	r7, r2
 800e302:	690a      	ldr	r2, [r1, #16]
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	429a      	cmp	r2, r3
 800e308:	bfa8      	it	ge
 800e30a:	463b      	movge	r3, r7
 800e30c:	4689      	mov	r9, r1
 800e30e:	bfa4      	itt	ge
 800e310:	460f      	movge	r7, r1
 800e312:	4699      	movge	r9, r3
 800e314:	693d      	ldr	r5, [r7, #16]
 800e316:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	6879      	ldr	r1, [r7, #4]
 800e31e:	eb05 060a 	add.w	r6, r5, sl
 800e322:	42b3      	cmp	r3, r6
 800e324:	b085      	sub	sp, #20
 800e326:	bfb8      	it	lt
 800e328:	3101      	addlt	r1, #1
 800e32a:	f7ff fedd 	bl	800e0e8 <_Balloc>
 800e32e:	b930      	cbnz	r0, 800e33e <__multiply+0x42>
 800e330:	4602      	mov	r2, r0
 800e332:	4b41      	ldr	r3, [pc, #260]	@ (800e438 <__multiply+0x13c>)
 800e334:	4841      	ldr	r0, [pc, #260]	@ (800e43c <__multiply+0x140>)
 800e336:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e33a:	f000 fcd1 	bl	800ece0 <__assert_func>
 800e33e:	f100 0414 	add.w	r4, r0, #20
 800e342:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e346:	4623      	mov	r3, r4
 800e348:	2200      	movs	r2, #0
 800e34a:	4573      	cmp	r3, lr
 800e34c:	d320      	bcc.n	800e390 <__multiply+0x94>
 800e34e:	f107 0814 	add.w	r8, r7, #20
 800e352:	f109 0114 	add.w	r1, r9, #20
 800e356:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e35a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e35e:	9302      	str	r3, [sp, #8]
 800e360:	1beb      	subs	r3, r5, r7
 800e362:	3b15      	subs	r3, #21
 800e364:	f023 0303 	bic.w	r3, r3, #3
 800e368:	3304      	adds	r3, #4
 800e36a:	3715      	adds	r7, #21
 800e36c:	42bd      	cmp	r5, r7
 800e36e:	bf38      	it	cc
 800e370:	2304      	movcc	r3, #4
 800e372:	9301      	str	r3, [sp, #4]
 800e374:	9b02      	ldr	r3, [sp, #8]
 800e376:	9103      	str	r1, [sp, #12]
 800e378:	428b      	cmp	r3, r1
 800e37a:	d80c      	bhi.n	800e396 <__multiply+0x9a>
 800e37c:	2e00      	cmp	r6, #0
 800e37e:	dd03      	ble.n	800e388 <__multiply+0x8c>
 800e380:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e384:	2b00      	cmp	r3, #0
 800e386:	d055      	beq.n	800e434 <__multiply+0x138>
 800e388:	6106      	str	r6, [r0, #16]
 800e38a:	b005      	add	sp, #20
 800e38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e390:	f843 2b04 	str.w	r2, [r3], #4
 800e394:	e7d9      	b.n	800e34a <__multiply+0x4e>
 800e396:	f8b1 a000 	ldrh.w	sl, [r1]
 800e39a:	f1ba 0f00 	cmp.w	sl, #0
 800e39e:	d01f      	beq.n	800e3e0 <__multiply+0xe4>
 800e3a0:	46c4      	mov	ip, r8
 800e3a2:	46a1      	mov	r9, r4
 800e3a4:	2700      	movs	r7, #0
 800e3a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e3aa:	f8d9 3000 	ldr.w	r3, [r9]
 800e3ae:	fa1f fb82 	uxth.w	fp, r2
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800e3b8:	443b      	add	r3, r7
 800e3ba:	f8d9 7000 	ldr.w	r7, [r9]
 800e3be:	0c12      	lsrs	r2, r2, #16
 800e3c0:	0c3f      	lsrs	r7, r7, #16
 800e3c2:	fb0a 7202 	mla	r2, sl, r2, r7
 800e3c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3d0:	4565      	cmp	r5, ip
 800e3d2:	f849 3b04 	str.w	r3, [r9], #4
 800e3d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e3da:	d8e4      	bhi.n	800e3a6 <__multiply+0xaa>
 800e3dc:	9b01      	ldr	r3, [sp, #4]
 800e3de:	50e7      	str	r7, [r4, r3]
 800e3e0:	9b03      	ldr	r3, [sp, #12]
 800e3e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e3e6:	3104      	adds	r1, #4
 800e3e8:	f1b9 0f00 	cmp.w	r9, #0
 800e3ec:	d020      	beq.n	800e430 <__multiply+0x134>
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	4647      	mov	r7, r8
 800e3f2:	46a4      	mov	ip, r4
 800e3f4:	f04f 0a00 	mov.w	sl, #0
 800e3f8:	f8b7 b000 	ldrh.w	fp, [r7]
 800e3fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e400:	fb09 220b 	mla	r2, r9, fp, r2
 800e404:	4452      	add	r2, sl
 800e406:	b29b      	uxth	r3, r3
 800e408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e40c:	f84c 3b04 	str.w	r3, [ip], #4
 800e410:	f857 3b04 	ldr.w	r3, [r7], #4
 800e414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e418:	f8bc 3000 	ldrh.w	r3, [ip]
 800e41c:	fb09 330a 	mla	r3, r9, sl, r3
 800e420:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e424:	42bd      	cmp	r5, r7
 800e426:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e42a:	d8e5      	bhi.n	800e3f8 <__multiply+0xfc>
 800e42c:	9a01      	ldr	r2, [sp, #4]
 800e42e:	50a3      	str	r3, [r4, r2]
 800e430:	3404      	adds	r4, #4
 800e432:	e79f      	b.n	800e374 <__multiply+0x78>
 800e434:	3e01      	subs	r6, #1
 800e436:	e7a1      	b.n	800e37c <__multiply+0x80>
 800e438:	0800f0cc 	.word	0x0800f0cc
 800e43c:	0800f0dd 	.word	0x0800f0dd

0800e440 <__pow5mult>:
 800e440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e444:	4615      	mov	r5, r2
 800e446:	f012 0203 	ands.w	r2, r2, #3
 800e44a:	4607      	mov	r7, r0
 800e44c:	460e      	mov	r6, r1
 800e44e:	d007      	beq.n	800e460 <__pow5mult+0x20>
 800e450:	4c25      	ldr	r4, [pc, #148]	@ (800e4e8 <__pow5mult+0xa8>)
 800e452:	3a01      	subs	r2, #1
 800e454:	2300      	movs	r3, #0
 800e456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e45a:	f7ff fea7 	bl	800e1ac <__multadd>
 800e45e:	4606      	mov	r6, r0
 800e460:	10ad      	asrs	r5, r5, #2
 800e462:	d03d      	beq.n	800e4e0 <__pow5mult+0xa0>
 800e464:	69fc      	ldr	r4, [r7, #28]
 800e466:	b97c      	cbnz	r4, 800e488 <__pow5mult+0x48>
 800e468:	2010      	movs	r0, #16
 800e46a:	f7fe f96b 	bl	800c744 <malloc>
 800e46e:	4602      	mov	r2, r0
 800e470:	61f8      	str	r0, [r7, #28]
 800e472:	b928      	cbnz	r0, 800e480 <__pow5mult+0x40>
 800e474:	4b1d      	ldr	r3, [pc, #116]	@ (800e4ec <__pow5mult+0xac>)
 800e476:	481e      	ldr	r0, [pc, #120]	@ (800e4f0 <__pow5mult+0xb0>)
 800e478:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e47c:	f000 fc30 	bl	800ece0 <__assert_func>
 800e480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e484:	6004      	str	r4, [r0, #0]
 800e486:	60c4      	str	r4, [r0, #12]
 800e488:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e48c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e490:	b94c      	cbnz	r4, 800e4a6 <__pow5mult+0x66>
 800e492:	f240 2171 	movw	r1, #625	@ 0x271
 800e496:	4638      	mov	r0, r7
 800e498:	f7ff ff1a 	bl	800e2d0 <__i2b>
 800e49c:	2300      	movs	r3, #0
 800e49e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	6003      	str	r3, [r0, #0]
 800e4a6:	f04f 0900 	mov.w	r9, #0
 800e4aa:	07eb      	lsls	r3, r5, #31
 800e4ac:	d50a      	bpl.n	800e4c4 <__pow5mult+0x84>
 800e4ae:	4631      	mov	r1, r6
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	f7ff ff22 	bl	800e2fc <__multiply>
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	4680      	mov	r8, r0
 800e4bc:	4638      	mov	r0, r7
 800e4be:	f7ff fe53 	bl	800e168 <_Bfree>
 800e4c2:	4646      	mov	r6, r8
 800e4c4:	106d      	asrs	r5, r5, #1
 800e4c6:	d00b      	beq.n	800e4e0 <__pow5mult+0xa0>
 800e4c8:	6820      	ldr	r0, [r4, #0]
 800e4ca:	b938      	cbnz	r0, 800e4dc <__pow5mult+0x9c>
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	4621      	mov	r1, r4
 800e4d0:	4638      	mov	r0, r7
 800e4d2:	f7ff ff13 	bl	800e2fc <__multiply>
 800e4d6:	6020      	str	r0, [r4, #0]
 800e4d8:	f8c0 9000 	str.w	r9, [r0]
 800e4dc:	4604      	mov	r4, r0
 800e4de:	e7e4      	b.n	800e4aa <__pow5mult+0x6a>
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4e6:	bf00      	nop
 800e4e8:	0800f190 	.word	0x0800f190
 800e4ec:	0800f05d 	.word	0x0800f05d
 800e4f0:	0800f0dd 	.word	0x0800f0dd

0800e4f4 <__lshift>:
 800e4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	6849      	ldr	r1, [r1, #4]
 800e4fc:	6923      	ldr	r3, [r4, #16]
 800e4fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e502:	68a3      	ldr	r3, [r4, #8]
 800e504:	4607      	mov	r7, r0
 800e506:	4691      	mov	r9, r2
 800e508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e50c:	f108 0601 	add.w	r6, r8, #1
 800e510:	42b3      	cmp	r3, r6
 800e512:	db0b      	blt.n	800e52c <__lshift+0x38>
 800e514:	4638      	mov	r0, r7
 800e516:	f7ff fde7 	bl	800e0e8 <_Balloc>
 800e51a:	4605      	mov	r5, r0
 800e51c:	b948      	cbnz	r0, 800e532 <__lshift+0x3e>
 800e51e:	4602      	mov	r2, r0
 800e520:	4b28      	ldr	r3, [pc, #160]	@ (800e5c4 <__lshift+0xd0>)
 800e522:	4829      	ldr	r0, [pc, #164]	@ (800e5c8 <__lshift+0xd4>)
 800e524:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e528:	f000 fbda 	bl	800ece0 <__assert_func>
 800e52c:	3101      	adds	r1, #1
 800e52e:	005b      	lsls	r3, r3, #1
 800e530:	e7ee      	b.n	800e510 <__lshift+0x1c>
 800e532:	2300      	movs	r3, #0
 800e534:	f100 0114 	add.w	r1, r0, #20
 800e538:	f100 0210 	add.w	r2, r0, #16
 800e53c:	4618      	mov	r0, r3
 800e53e:	4553      	cmp	r3, sl
 800e540:	db33      	blt.n	800e5aa <__lshift+0xb6>
 800e542:	6920      	ldr	r0, [r4, #16]
 800e544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e548:	f104 0314 	add.w	r3, r4, #20
 800e54c:	f019 091f 	ands.w	r9, r9, #31
 800e550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e558:	d02b      	beq.n	800e5b2 <__lshift+0xbe>
 800e55a:	f1c9 0e20 	rsb	lr, r9, #32
 800e55e:	468a      	mov	sl, r1
 800e560:	2200      	movs	r2, #0
 800e562:	6818      	ldr	r0, [r3, #0]
 800e564:	fa00 f009 	lsl.w	r0, r0, r9
 800e568:	4310      	orrs	r0, r2
 800e56a:	f84a 0b04 	str.w	r0, [sl], #4
 800e56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e572:	459c      	cmp	ip, r3
 800e574:	fa22 f20e 	lsr.w	r2, r2, lr
 800e578:	d8f3      	bhi.n	800e562 <__lshift+0x6e>
 800e57a:	ebac 0304 	sub.w	r3, ip, r4
 800e57e:	3b15      	subs	r3, #21
 800e580:	f023 0303 	bic.w	r3, r3, #3
 800e584:	3304      	adds	r3, #4
 800e586:	f104 0015 	add.w	r0, r4, #21
 800e58a:	4560      	cmp	r0, ip
 800e58c:	bf88      	it	hi
 800e58e:	2304      	movhi	r3, #4
 800e590:	50ca      	str	r2, [r1, r3]
 800e592:	b10a      	cbz	r2, 800e598 <__lshift+0xa4>
 800e594:	f108 0602 	add.w	r6, r8, #2
 800e598:	3e01      	subs	r6, #1
 800e59a:	4638      	mov	r0, r7
 800e59c:	612e      	str	r6, [r5, #16]
 800e59e:	4621      	mov	r1, r4
 800e5a0:	f7ff fde2 	bl	800e168 <_Bfree>
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	e7c5      	b.n	800e53e <__lshift+0x4a>
 800e5b2:	3904      	subs	r1, #4
 800e5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5bc:	459c      	cmp	ip, r3
 800e5be:	d8f9      	bhi.n	800e5b4 <__lshift+0xc0>
 800e5c0:	e7ea      	b.n	800e598 <__lshift+0xa4>
 800e5c2:	bf00      	nop
 800e5c4:	0800f0cc 	.word	0x0800f0cc
 800e5c8:	0800f0dd 	.word	0x0800f0dd

0800e5cc <__mcmp>:
 800e5cc:	690a      	ldr	r2, [r1, #16]
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	6900      	ldr	r0, [r0, #16]
 800e5d2:	1a80      	subs	r0, r0, r2
 800e5d4:	b530      	push	{r4, r5, lr}
 800e5d6:	d10e      	bne.n	800e5f6 <__mcmp+0x2a>
 800e5d8:	3314      	adds	r3, #20
 800e5da:	3114      	adds	r1, #20
 800e5dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e5e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e5e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e5e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e5ec:	4295      	cmp	r5, r2
 800e5ee:	d003      	beq.n	800e5f8 <__mcmp+0x2c>
 800e5f0:	d205      	bcs.n	800e5fe <__mcmp+0x32>
 800e5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f6:	bd30      	pop	{r4, r5, pc}
 800e5f8:	42a3      	cmp	r3, r4
 800e5fa:	d3f3      	bcc.n	800e5e4 <__mcmp+0x18>
 800e5fc:	e7fb      	b.n	800e5f6 <__mcmp+0x2a>
 800e5fe:	2001      	movs	r0, #1
 800e600:	e7f9      	b.n	800e5f6 <__mcmp+0x2a>
	...

0800e604 <__mdiff>:
 800e604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e608:	4689      	mov	r9, r1
 800e60a:	4606      	mov	r6, r0
 800e60c:	4611      	mov	r1, r2
 800e60e:	4648      	mov	r0, r9
 800e610:	4614      	mov	r4, r2
 800e612:	f7ff ffdb 	bl	800e5cc <__mcmp>
 800e616:	1e05      	subs	r5, r0, #0
 800e618:	d112      	bne.n	800e640 <__mdiff+0x3c>
 800e61a:	4629      	mov	r1, r5
 800e61c:	4630      	mov	r0, r6
 800e61e:	f7ff fd63 	bl	800e0e8 <_Balloc>
 800e622:	4602      	mov	r2, r0
 800e624:	b928      	cbnz	r0, 800e632 <__mdiff+0x2e>
 800e626:	4b3f      	ldr	r3, [pc, #252]	@ (800e724 <__mdiff+0x120>)
 800e628:	f240 2137 	movw	r1, #567	@ 0x237
 800e62c:	483e      	ldr	r0, [pc, #248]	@ (800e728 <__mdiff+0x124>)
 800e62e:	f000 fb57 	bl	800ece0 <__assert_func>
 800e632:	2301      	movs	r3, #1
 800e634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e638:	4610      	mov	r0, r2
 800e63a:	b003      	add	sp, #12
 800e63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e640:	bfbc      	itt	lt
 800e642:	464b      	movlt	r3, r9
 800e644:	46a1      	movlt	r9, r4
 800e646:	4630      	mov	r0, r6
 800e648:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e64c:	bfba      	itte	lt
 800e64e:	461c      	movlt	r4, r3
 800e650:	2501      	movlt	r5, #1
 800e652:	2500      	movge	r5, #0
 800e654:	f7ff fd48 	bl	800e0e8 <_Balloc>
 800e658:	4602      	mov	r2, r0
 800e65a:	b918      	cbnz	r0, 800e664 <__mdiff+0x60>
 800e65c:	4b31      	ldr	r3, [pc, #196]	@ (800e724 <__mdiff+0x120>)
 800e65e:	f240 2145 	movw	r1, #581	@ 0x245
 800e662:	e7e3      	b.n	800e62c <__mdiff+0x28>
 800e664:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e668:	6926      	ldr	r6, [r4, #16]
 800e66a:	60c5      	str	r5, [r0, #12]
 800e66c:	f109 0310 	add.w	r3, r9, #16
 800e670:	f109 0514 	add.w	r5, r9, #20
 800e674:	f104 0e14 	add.w	lr, r4, #20
 800e678:	f100 0b14 	add.w	fp, r0, #20
 800e67c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e680:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e684:	9301      	str	r3, [sp, #4]
 800e686:	46d9      	mov	r9, fp
 800e688:	f04f 0c00 	mov.w	ip, #0
 800e68c:	9b01      	ldr	r3, [sp, #4]
 800e68e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e692:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e696:	9301      	str	r3, [sp, #4]
 800e698:	fa1f f38a 	uxth.w	r3, sl
 800e69c:	4619      	mov	r1, r3
 800e69e:	b283      	uxth	r3, r0
 800e6a0:	1acb      	subs	r3, r1, r3
 800e6a2:	0c00      	lsrs	r0, r0, #16
 800e6a4:	4463      	add	r3, ip
 800e6a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e6aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e6b4:	4576      	cmp	r6, lr
 800e6b6:	f849 3b04 	str.w	r3, [r9], #4
 800e6ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6be:	d8e5      	bhi.n	800e68c <__mdiff+0x88>
 800e6c0:	1b33      	subs	r3, r6, r4
 800e6c2:	3b15      	subs	r3, #21
 800e6c4:	f023 0303 	bic.w	r3, r3, #3
 800e6c8:	3415      	adds	r4, #21
 800e6ca:	3304      	adds	r3, #4
 800e6cc:	42a6      	cmp	r6, r4
 800e6ce:	bf38      	it	cc
 800e6d0:	2304      	movcc	r3, #4
 800e6d2:	441d      	add	r5, r3
 800e6d4:	445b      	add	r3, fp
 800e6d6:	461e      	mov	r6, r3
 800e6d8:	462c      	mov	r4, r5
 800e6da:	4544      	cmp	r4, r8
 800e6dc:	d30e      	bcc.n	800e6fc <__mdiff+0xf8>
 800e6de:	f108 0103 	add.w	r1, r8, #3
 800e6e2:	1b49      	subs	r1, r1, r5
 800e6e4:	f021 0103 	bic.w	r1, r1, #3
 800e6e8:	3d03      	subs	r5, #3
 800e6ea:	45a8      	cmp	r8, r5
 800e6ec:	bf38      	it	cc
 800e6ee:	2100      	movcc	r1, #0
 800e6f0:	440b      	add	r3, r1
 800e6f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6f6:	b191      	cbz	r1, 800e71e <__mdiff+0x11a>
 800e6f8:	6117      	str	r7, [r2, #16]
 800e6fa:	e79d      	b.n	800e638 <__mdiff+0x34>
 800e6fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800e700:	46e6      	mov	lr, ip
 800e702:	0c08      	lsrs	r0, r1, #16
 800e704:	fa1c fc81 	uxtah	ip, ip, r1
 800e708:	4471      	add	r1, lr
 800e70a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e70e:	b289      	uxth	r1, r1
 800e710:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e714:	f846 1b04 	str.w	r1, [r6], #4
 800e718:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e71c:	e7dd      	b.n	800e6da <__mdiff+0xd6>
 800e71e:	3f01      	subs	r7, #1
 800e720:	e7e7      	b.n	800e6f2 <__mdiff+0xee>
 800e722:	bf00      	nop
 800e724:	0800f0cc 	.word	0x0800f0cc
 800e728:	0800f0dd 	.word	0x0800f0dd

0800e72c <__d2b>:
 800e72c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e730:	460f      	mov	r7, r1
 800e732:	2101      	movs	r1, #1
 800e734:	ec59 8b10 	vmov	r8, r9, d0
 800e738:	4616      	mov	r6, r2
 800e73a:	f7ff fcd5 	bl	800e0e8 <_Balloc>
 800e73e:	4604      	mov	r4, r0
 800e740:	b930      	cbnz	r0, 800e750 <__d2b+0x24>
 800e742:	4602      	mov	r2, r0
 800e744:	4b23      	ldr	r3, [pc, #140]	@ (800e7d4 <__d2b+0xa8>)
 800e746:	4824      	ldr	r0, [pc, #144]	@ (800e7d8 <__d2b+0xac>)
 800e748:	f240 310f 	movw	r1, #783	@ 0x30f
 800e74c:	f000 fac8 	bl	800ece0 <__assert_func>
 800e750:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e754:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e758:	b10d      	cbz	r5, 800e75e <__d2b+0x32>
 800e75a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e75e:	9301      	str	r3, [sp, #4]
 800e760:	f1b8 0300 	subs.w	r3, r8, #0
 800e764:	d023      	beq.n	800e7ae <__d2b+0x82>
 800e766:	4668      	mov	r0, sp
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	f7ff fd84 	bl	800e276 <__lo0bits>
 800e76e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e772:	b1d0      	cbz	r0, 800e7aa <__d2b+0x7e>
 800e774:	f1c0 0320 	rsb	r3, r0, #32
 800e778:	fa02 f303 	lsl.w	r3, r2, r3
 800e77c:	430b      	orrs	r3, r1
 800e77e:	40c2      	lsrs	r2, r0
 800e780:	6163      	str	r3, [r4, #20]
 800e782:	9201      	str	r2, [sp, #4]
 800e784:	9b01      	ldr	r3, [sp, #4]
 800e786:	61a3      	str	r3, [r4, #24]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	bf0c      	ite	eq
 800e78c:	2201      	moveq	r2, #1
 800e78e:	2202      	movne	r2, #2
 800e790:	6122      	str	r2, [r4, #16]
 800e792:	b1a5      	cbz	r5, 800e7be <__d2b+0x92>
 800e794:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e798:	4405      	add	r5, r0
 800e79a:	603d      	str	r5, [r7, #0]
 800e79c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e7a0:	6030      	str	r0, [r6, #0]
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	b003      	add	sp, #12
 800e7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7aa:	6161      	str	r1, [r4, #20]
 800e7ac:	e7ea      	b.n	800e784 <__d2b+0x58>
 800e7ae:	a801      	add	r0, sp, #4
 800e7b0:	f7ff fd61 	bl	800e276 <__lo0bits>
 800e7b4:	9b01      	ldr	r3, [sp, #4]
 800e7b6:	6163      	str	r3, [r4, #20]
 800e7b8:	3020      	adds	r0, #32
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	e7e8      	b.n	800e790 <__d2b+0x64>
 800e7be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e7c6:	6038      	str	r0, [r7, #0]
 800e7c8:	6918      	ldr	r0, [r3, #16]
 800e7ca:	f7ff fd35 	bl	800e238 <__hi0bits>
 800e7ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7d2:	e7e5      	b.n	800e7a0 <__d2b+0x74>
 800e7d4:	0800f0cc 	.word	0x0800f0cc
 800e7d8:	0800f0dd 	.word	0x0800f0dd

0800e7dc <__sfputc_r>:
 800e7dc:	6893      	ldr	r3, [r2, #8]
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	b410      	push	{r4}
 800e7e4:	6093      	str	r3, [r2, #8]
 800e7e6:	da08      	bge.n	800e7fa <__sfputc_r+0x1e>
 800e7e8:	6994      	ldr	r4, [r2, #24]
 800e7ea:	42a3      	cmp	r3, r4
 800e7ec:	db01      	blt.n	800e7f2 <__sfputc_r+0x16>
 800e7ee:	290a      	cmp	r1, #10
 800e7f0:	d103      	bne.n	800e7fa <__sfputc_r+0x1e>
 800e7f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7f6:	f000 b9df 	b.w	800ebb8 <__swbuf_r>
 800e7fa:	6813      	ldr	r3, [r2, #0]
 800e7fc:	1c58      	adds	r0, r3, #1
 800e7fe:	6010      	str	r0, [r2, #0]
 800e800:	7019      	strb	r1, [r3, #0]
 800e802:	4608      	mov	r0, r1
 800e804:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e808:	4770      	bx	lr

0800e80a <__sfputs_r>:
 800e80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e80c:	4606      	mov	r6, r0
 800e80e:	460f      	mov	r7, r1
 800e810:	4614      	mov	r4, r2
 800e812:	18d5      	adds	r5, r2, r3
 800e814:	42ac      	cmp	r4, r5
 800e816:	d101      	bne.n	800e81c <__sfputs_r+0x12>
 800e818:	2000      	movs	r0, #0
 800e81a:	e007      	b.n	800e82c <__sfputs_r+0x22>
 800e81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e820:	463a      	mov	r2, r7
 800e822:	4630      	mov	r0, r6
 800e824:	f7ff ffda 	bl	800e7dc <__sfputc_r>
 800e828:	1c43      	adds	r3, r0, #1
 800e82a:	d1f3      	bne.n	800e814 <__sfputs_r+0xa>
 800e82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e830 <_vfiprintf_r>:
 800e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e834:	460d      	mov	r5, r1
 800e836:	b09d      	sub	sp, #116	@ 0x74
 800e838:	4614      	mov	r4, r2
 800e83a:	4698      	mov	r8, r3
 800e83c:	4606      	mov	r6, r0
 800e83e:	b118      	cbz	r0, 800e848 <_vfiprintf_r+0x18>
 800e840:	6a03      	ldr	r3, [r0, #32]
 800e842:	b90b      	cbnz	r3, 800e848 <_vfiprintf_r+0x18>
 800e844:	f7fe fcf6 	bl	800d234 <__sinit>
 800e848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e84a:	07d9      	lsls	r1, r3, #31
 800e84c:	d405      	bmi.n	800e85a <_vfiprintf_r+0x2a>
 800e84e:	89ab      	ldrh	r3, [r5, #12]
 800e850:	059a      	lsls	r2, r3, #22
 800e852:	d402      	bmi.n	800e85a <_vfiprintf_r+0x2a>
 800e854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e856:	f7fe fe06 	bl	800d466 <__retarget_lock_acquire_recursive>
 800e85a:	89ab      	ldrh	r3, [r5, #12]
 800e85c:	071b      	lsls	r3, r3, #28
 800e85e:	d501      	bpl.n	800e864 <_vfiprintf_r+0x34>
 800e860:	692b      	ldr	r3, [r5, #16]
 800e862:	b99b      	cbnz	r3, 800e88c <_vfiprintf_r+0x5c>
 800e864:	4629      	mov	r1, r5
 800e866:	4630      	mov	r0, r6
 800e868:	f000 f9e4 	bl	800ec34 <__swsetup_r>
 800e86c:	b170      	cbz	r0, 800e88c <_vfiprintf_r+0x5c>
 800e86e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e870:	07dc      	lsls	r4, r3, #31
 800e872:	d504      	bpl.n	800e87e <_vfiprintf_r+0x4e>
 800e874:	f04f 30ff 	mov.w	r0, #4294967295
 800e878:	b01d      	add	sp, #116	@ 0x74
 800e87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e87e:	89ab      	ldrh	r3, [r5, #12]
 800e880:	0598      	lsls	r0, r3, #22
 800e882:	d4f7      	bmi.n	800e874 <_vfiprintf_r+0x44>
 800e884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e886:	f7fe fdef 	bl	800d468 <__retarget_lock_release_recursive>
 800e88a:	e7f3      	b.n	800e874 <_vfiprintf_r+0x44>
 800e88c:	2300      	movs	r3, #0
 800e88e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e890:	2320      	movs	r3, #32
 800e892:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e896:	f8cd 800c 	str.w	r8, [sp, #12]
 800e89a:	2330      	movs	r3, #48	@ 0x30
 800e89c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea4c <_vfiprintf_r+0x21c>
 800e8a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8a4:	f04f 0901 	mov.w	r9, #1
 800e8a8:	4623      	mov	r3, r4
 800e8aa:	469a      	mov	sl, r3
 800e8ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8b0:	b10a      	cbz	r2, 800e8b6 <_vfiprintf_r+0x86>
 800e8b2:	2a25      	cmp	r2, #37	@ 0x25
 800e8b4:	d1f9      	bne.n	800e8aa <_vfiprintf_r+0x7a>
 800e8b6:	ebba 0b04 	subs.w	fp, sl, r4
 800e8ba:	d00b      	beq.n	800e8d4 <_vfiprintf_r+0xa4>
 800e8bc:	465b      	mov	r3, fp
 800e8be:	4622      	mov	r2, r4
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	f7ff ffa1 	bl	800e80a <__sfputs_r>
 800e8c8:	3001      	adds	r0, #1
 800e8ca:	f000 80a7 	beq.w	800ea1c <_vfiprintf_r+0x1ec>
 800e8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8d0:	445a      	add	r2, fp
 800e8d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f000 809f 	beq.w	800ea1c <_vfiprintf_r+0x1ec>
 800e8de:	2300      	movs	r3, #0
 800e8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8e8:	f10a 0a01 	add.w	sl, sl, #1
 800e8ec:	9304      	str	r3, [sp, #16]
 800e8ee:	9307      	str	r3, [sp, #28]
 800e8f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8f6:	4654      	mov	r4, sl
 800e8f8:	2205      	movs	r2, #5
 800e8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8fe:	4853      	ldr	r0, [pc, #332]	@ (800ea4c <_vfiprintf_r+0x21c>)
 800e900:	f7f1 fcf6 	bl	80002f0 <memchr>
 800e904:	9a04      	ldr	r2, [sp, #16]
 800e906:	b9d8      	cbnz	r0, 800e940 <_vfiprintf_r+0x110>
 800e908:	06d1      	lsls	r1, r2, #27
 800e90a:	bf44      	itt	mi
 800e90c:	2320      	movmi	r3, #32
 800e90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e912:	0713      	lsls	r3, r2, #28
 800e914:	bf44      	itt	mi
 800e916:	232b      	movmi	r3, #43	@ 0x2b
 800e918:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e91c:	f89a 3000 	ldrb.w	r3, [sl]
 800e920:	2b2a      	cmp	r3, #42	@ 0x2a
 800e922:	d015      	beq.n	800e950 <_vfiprintf_r+0x120>
 800e924:	9a07      	ldr	r2, [sp, #28]
 800e926:	4654      	mov	r4, sl
 800e928:	2000      	movs	r0, #0
 800e92a:	f04f 0c0a 	mov.w	ip, #10
 800e92e:	4621      	mov	r1, r4
 800e930:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e934:	3b30      	subs	r3, #48	@ 0x30
 800e936:	2b09      	cmp	r3, #9
 800e938:	d94b      	bls.n	800e9d2 <_vfiprintf_r+0x1a2>
 800e93a:	b1b0      	cbz	r0, 800e96a <_vfiprintf_r+0x13a>
 800e93c:	9207      	str	r2, [sp, #28]
 800e93e:	e014      	b.n	800e96a <_vfiprintf_r+0x13a>
 800e940:	eba0 0308 	sub.w	r3, r0, r8
 800e944:	fa09 f303 	lsl.w	r3, r9, r3
 800e948:	4313      	orrs	r3, r2
 800e94a:	9304      	str	r3, [sp, #16]
 800e94c:	46a2      	mov	sl, r4
 800e94e:	e7d2      	b.n	800e8f6 <_vfiprintf_r+0xc6>
 800e950:	9b03      	ldr	r3, [sp, #12]
 800e952:	1d19      	adds	r1, r3, #4
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	9103      	str	r1, [sp, #12]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	bfbb      	ittet	lt
 800e95c:	425b      	neglt	r3, r3
 800e95e:	f042 0202 	orrlt.w	r2, r2, #2
 800e962:	9307      	strge	r3, [sp, #28]
 800e964:	9307      	strlt	r3, [sp, #28]
 800e966:	bfb8      	it	lt
 800e968:	9204      	strlt	r2, [sp, #16]
 800e96a:	7823      	ldrb	r3, [r4, #0]
 800e96c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e96e:	d10a      	bne.n	800e986 <_vfiprintf_r+0x156>
 800e970:	7863      	ldrb	r3, [r4, #1]
 800e972:	2b2a      	cmp	r3, #42	@ 0x2a
 800e974:	d132      	bne.n	800e9dc <_vfiprintf_r+0x1ac>
 800e976:	9b03      	ldr	r3, [sp, #12]
 800e978:	1d1a      	adds	r2, r3, #4
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	9203      	str	r2, [sp, #12]
 800e97e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e982:	3402      	adds	r4, #2
 800e984:	9305      	str	r3, [sp, #20]
 800e986:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea5c <_vfiprintf_r+0x22c>
 800e98a:	7821      	ldrb	r1, [r4, #0]
 800e98c:	2203      	movs	r2, #3
 800e98e:	4650      	mov	r0, sl
 800e990:	f7f1 fcae 	bl	80002f0 <memchr>
 800e994:	b138      	cbz	r0, 800e9a6 <_vfiprintf_r+0x176>
 800e996:	9b04      	ldr	r3, [sp, #16]
 800e998:	eba0 000a 	sub.w	r0, r0, sl
 800e99c:	2240      	movs	r2, #64	@ 0x40
 800e99e:	4082      	lsls	r2, r0
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	3401      	adds	r4, #1
 800e9a4:	9304      	str	r3, [sp, #16]
 800e9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9aa:	4829      	ldr	r0, [pc, #164]	@ (800ea50 <_vfiprintf_r+0x220>)
 800e9ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9b0:	2206      	movs	r2, #6
 800e9b2:	f7f1 fc9d 	bl	80002f0 <memchr>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	d03f      	beq.n	800ea3a <_vfiprintf_r+0x20a>
 800e9ba:	4b26      	ldr	r3, [pc, #152]	@ (800ea54 <_vfiprintf_r+0x224>)
 800e9bc:	bb1b      	cbnz	r3, 800ea06 <_vfiprintf_r+0x1d6>
 800e9be:	9b03      	ldr	r3, [sp, #12]
 800e9c0:	3307      	adds	r3, #7
 800e9c2:	f023 0307 	bic.w	r3, r3, #7
 800e9c6:	3308      	adds	r3, #8
 800e9c8:	9303      	str	r3, [sp, #12]
 800e9ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9cc:	443b      	add	r3, r7
 800e9ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9d0:	e76a      	b.n	800e8a8 <_vfiprintf_r+0x78>
 800e9d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	2001      	movs	r0, #1
 800e9da:	e7a8      	b.n	800e92e <_vfiprintf_r+0xfe>
 800e9dc:	2300      	movs	r3, #0
 800e9de:	3401      	adds	r4, #1
 800e9e0:	9305      	str	r3, [sp, #20]
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	f04f 0c0a 	mov.w	ip, #10
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9ee:	3a30      	subs	r2, #48	@ 0x30
 800e9f0:	2a09      	cmp	r2, #9
 800e9f2:	d903      	bls.n	800e9fc <_vfiprintf_r+0x1cc>
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d0c6      	beq.n	800e986 <_vfiprintf_r+0x156>
 800e9f8:	9105      	str	r1, [sp, #20]
 800e9fa:	e7c4      	b.n	800e986 <_vfiprintf_r+0x156>
 800e9fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea00:	4604      	mov	r4, r0
 800ea02:	2301      	movs	r3, #1
 800ea04:	e7f0      	b.n	800e9e8 <_vfiprintf_r+0x1b8>
 800ea06:	ab03      	add	r3, sp, #12
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	462a      	mov	r2, r5
 800ea0c:	4b12      	ldr	r3, [pc, #72]	@ (800ea58 <_vfiprintf_r+0x228>)
 800ea0e:	a904      	add	r1, sp, #16
 800ea10:	4630      	mov	r0, r6
 800ea12:	f7fd ffdd 	bl	800c9d0 <_printf_float>
 800ea16:	4607      	mov	r7, r0
 800ea18:	1c78      	adds	r0, r7, #1
 800ea1a:	d1d6      	bne.n	800e9ca <_vfiprintf_r+0x19a>
 800ea1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea1e:	07d9      	lsls	r1, r3, #31
 800ea20:	d405      	bmi.n	800ea2e <_vfiprintf_r+0x1fe>
 800ea22:	89ab      	ldrh	r3, [r5, #12]
 800ea24:	059a      	lsls	r2, r3, #22
 800ea26:	d402      	bmi.n	800ea2e <_vfiprintf_r+0x1fe>
 800ea28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea2a:	f7fe fd1d 	bl	800d468 <__retarget_lock_release_recursive>
 800ea2e:	89ab      	ldrh	r3, [r5, #12]
 800ea30:	065b      	lsls	r3, r3, #25
 800ea32:	f53f af1f 	bmi.w	800e874 <_vfiprintf_r+0x44>
 800ea36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea38:	e71e      	b.n	800e878 <_vfiprintf_r+0x48>
 800ea3a:	ab03      	add	r3, sp, #12
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	462a      	mov	r2, r5
 800ea40:	4b05      	ldr	r3, [pc, #20]	@ (800ea58 <_vfiprintf_r+0x228>)
 800ea42:	a904      	add	r1, sp, #16
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7fe fa4b 	bl	800cee0 <_printf_i>
 800ea4a:	e7e4      	b.n	800ea16 <_vfiprintf_r+0x1e6>
 800ea4c:	0800f136 	.word	0x0800f136
 800ea50:	0800f140 	.word	0x0800f140
 800ea54:	0800c9d1 	.word	0x0800c9d1
 800ea58:	0800e80b 	.word	0x0800e80b
 800ea5c:	0800f13c 	.word	0x0800f13c

0800ea60 <__sflush_r>:
 800ea60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea68:	0716      	lsls	r6, r2, #28
 800ea6a:	4605      	mov	r5, r0
 800ea6c:	460c      	mov	r4, r1
 800ea6e:	d454      	bmi.n	800eb1a <__sflush_r+0xba>
 800ea70:	684b      	ldr	r3, [r1, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	dc02      	bgt.n	800ea7c <__sflush_r+0x1c>
 800ea76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	dd48      	ble.n	800eb0e <__sflush_r+0xae>
 800ea7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea7e:	2e00      	cmp	r6, #0
 800ea80:	d045      	beq.n	800eb0e <__sflush_r+0xae>
 800ea82:	2300      	movs	r3, #0
 800ea84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ea88:	682f      	ldr	r7, [r5, #0]
 800ea8a:	6a21      	ldr	r1, [r4, #32]
 800ea8c:	602b      	str	r3, [r5, #0]
 800ea8e:	d030      	beq.n	800eaf2 <__sflush_r+0x92>
 800ea90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ea92:	89a3      	ldrh	r3, [r4, #12]
 800ea94:	0759      	lsls	r1, r3, #29
 800ea96:	d505      	bpl.n	800eaa4 <__sflush_r+0x44>
 800ea98:	6863      	ldr	r3, [r4, #4]
 800ea9a:	1ad2      	subs	r2, r2, r3
 800ea9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea9e:	b10b      	cbz	r3, 800eaa4 <__sflush_r+0x44>
 800eaa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eaa2:	1ad2      	subs	r2, r2, r3
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eaa8:	6a21      	ldr	r1, [r4, #32]
 800eaaa:	4628      	mov	r0, r5
 800eaac:	47b0      	blx	r6
 800eaae:	1c43      	adds	r3, r0, #1
 800eab0:	89a3      	ldrh	r3, [r4, #12]
 800eab2:	d106      	bne.n	800eac2 <__sflush_r+0x62>
 800eab4:	6829      	ldr	r1, [r5, #0]
 800eab6:	291d      	cmp	r1, #29
 800eab8:	d82b      	bhi.n	800eb12 <__sflush_r+0xb2>
 800eaba:	4a2a      	ldr	r2, [pc, #168]	@ (800eb64 <__sflush_r+0x104>)
 800eabc:	40ca      	lsrs	r2, r1
 800eabe:	07d6      	lsls	r6, r2, #31
 800eac0:	d527      	bpl.n	800eb12 <__sflush_r+0xb2>
 800eac2:	2200      	movs	r2, #0
 800eac4:	6062      	str	r2, [r4, #4]
 800eac6:	04d9      	lsls	r1, r3, #19
 800eac8:	6922      	ldr	r2, [r4, #16]
 800eaca:	6022      	str	r2, [r4, #0]
 800eacc:	d504      	bpl.n	800ead8 <__sflush_r+0x78>
 800eace:	1c42      	adds	r2, r0, #1
 800ead0:	d101      	bne.n	800ead6 <__sflush_r+0x76>
 800ead2:	682b      	ldr	r3, [r5, #0]
 800ead4:	b903      	cbnz	r3, 800ead8 <__sflush_r+0x78>
 800ead6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ead8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eada:	602f      	str	r7, [r5, #0]
 800eadc:	b1b9      	cbz	r1, 800eb0e <__sflush_r+0xae>
 800eade:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eae2:	4299      	cmp	r1, r3
 800eae4:	d002      	beq.n	800eaec <__sflush_r+0x8c>
 800eae6:	4628      	mov	r0, r5
 800eae8:	f7ff fab4 	bl	800e054 <_free_r>
 800eaec:	2300      	movs	r3, #0
 800eaee:	6363      	str	r3, [r4, #52]	@ 0x34
 800eaf0:	e00d      	b.n	800eb0e <__sflush_r+0xae>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	47b0      	blx	r6
 800eaf8:	4602      	mov	r2, r0
 800eafa:	1c50      	adds	r0, r2, #1
 800eafc:	d1c9      	bne.n	800ea92 <__sflush_r+0x32>
 800eafe:	682b      	ldr	r3, [r5, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d0c6      	beq.n	800ea92 <__sflush_r+0x32>
 800eb04:	2b1d      	cmp	r3, #29
 800eb06:	d001      	beq.n	800eb0c <__sflush_r+0xac>
 800eb08:	2b16      	cmp	r3, #22
 800eb0a:	d11e      	bne.n	800eb4a <__sflush_r+0xea>
 800eb0c:	602f      	str	r7, [r5, #0]
 800eb0e:	2000      	movs	r0, #0
 800eb10:	e022      	b.n	800eb58 <__sflush_r+0xf8>
 800eb12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb16:	b21b      	sxth	r3, r3
 800eb18:	e01b      	b.n	800eb52 <__sflush_r+0xf2>
 800eb1a:	690f      	ldr	r7, [r1, #16]
 800eb1c:	2f00      	cmp	r7, #0
 800eb1e:	d0f6      	beq.n	800eb0e <__sflush_r+0xae>
 800eb20:	0793      	lsls	r3, r2, #30
 800eb22:	680e      	ldr	r6, [r1, #0]
 800eb24:	bf08      	it	eq
 800eb26:	694b      	ldreq	r3, [r1, #20]
 800eb28:	600f      	str	r7, [r1, #0]
 800eb2a:	bf18      	it	ne
 800eb2c:	2300      	movne	r3, #0
 800eb2e:	eba6 0807 	sub.w	r8, r6, r7
 800eb32:	608b      	str	r3, [r1, #8]
 800eb34:	f1b8 0f00 	cmp.w	r8, #0
 800eb38:	dde9      	ble.n	800eb0e <__sflush_r+0xae>
 800eb3a:	6a21      	ldr	r1, [r4, #32]
 800eb3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eb3e:	4643      	mov	r3, r8
 800eb40:	463a      	mov	r2, r7
 800eb42:	4628      	mov	r0, r5
 800eb44:	47b0      	blx	r6
 800eb46:	2800      	cmp	r0, #0
 800eb48:	dc08      	bgt.n	800eb5c <__sflush_r+0xfc>
 800eb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb52:	81a3      	strh	r3, [r4, #12]
 800eb54:	f04f 30ff 	mov.w	r0, #4294967295
 800eb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb5c:	4407      	add	r7, r0
 800eb5e:	eba8 0800 	sub.w	r8, r8, r0
 800eb62:	e7e7      	b.n	800eb34 <__sflush_r+0xd4>
 800eb64:	20400001 	.word	0x20400001

0800eb68 <_fflush_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	690b      	ldr	r3, [r1, #16]
 800eb6c:	4605      	mov	r5, r0
 800eb6e:	460c      	mov	r4, r1
 800eb70:	b913      	cbnz	r3, 800eb78 <_fflush_r+0x10>
 800eb72:	2500      	movs	r5, #0
 800eb74:	4628      	mov	r0, r5
 800eb76:	bd38      	pop	{r3, r4, r5, pc}
 800eb78:	b118      	cbz	r0, 800eb82 <_fflush_r+0x1a>
 800eb7a:	6a03      	ldr	r3, [r0, #32]
 800eb7c:	b90b      	cbnz	r3, 800eb82 <_fflush_r+0x1a>
 800eb7e:	f7fe fb59 	bl	800d234 <__sinit>
 800eb82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d0f3      	beq.n	800eb72 <_fflush_r+0xa>
 800eb8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eb8c:	07d0      	lsls	r0, r2, #31
 800eb8e:	d404      	bmi.n	800eb9a <_fflush_r+0x32>
 800eb90:	0599      	lsls	r1, r3, #22
 800eb92:	d402      	bmi.n	800eb9a <_fflush_r+0x32>
 800eb94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb96:	f7fe fc66 	bl	800d466 <__retarget_lock_acquire_recursive>
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	f7ff ff5f 	bl	800ea60 <__sflush_r>
 800eba2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eba4:	07da      	lsls	r2, r3, #31
 800eba6:	4605      	mov	r5, r0
 800eba8:	d4e4      	bmi.n	800eb74 <_fflush_r+0xc>
 800ebaa:	89a3      	ldrh	r3, [r4, #12]
 800ebac:	059b      	lsls	r3, r3, #22
 800ebae:	d4e1      	bmi.n	800eb74 <_fflush_r+0xc>
 800ebb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebb2:	f7fe fc59 	bl	800d468 <__retarget_lock_release_recursive>
 800ebb6:	e7dd      	b.n	800eb74 <_fflush_r+0xc>

0800ebb8 <__swbuf_r>:
 800ebb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebba:	460e      	mov	r6, r1
 800ebbc:	4614      	mov	r4, r2
 800ebbe:	4605      	mov	r5, r0
 800ebc0:	b118      	cbz	r0, 800ebca <__swbuf_r+0x12>
 800ebc2:	6a03      	ldr	r3, [r0, #32]
 800ebc4:	b90b      	cbnz	r3, 800ebca <__swbuf_r+0x12>
 800ebc6:	f7fe fb35 	bl	800d234 <__sinit>
 800ebca:	69a3      	ldr	r3, [r4, #24]
 800ebcc:	60a3      	str	r3, [r4, #8]
 800ebce:	89a3      	ldrh	r3, [r4, #12]
 800ebd0:	071a      	lsls	r2, r3, #28
 800ebd2:	d501      	bpl.n	800ebd8 <__swbuf_r+0x20>
 800ebd4:	6923      	ldr	r3, [r4, #16]
 800ebd6:	b943      	cbnz	r3, 800ebea <__swbuf_r+0x32>
 800ebd8:	4621      	mov	r1, r4
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f000 f82a 	bl	800ec34 <__swsetup_r>
 800ebe0:	b118      	cbz	r0, 800ebea <__swbuf_r+0x32>
 800ebe2:	f04f 37ff 	mov.w	r7, #4294967295
 800ebe6:	4638      	mov	r0, r7
 800ebe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	6922      	ldr	r2, [r4, #16]
 800ebee:	1a98      	subs	r0, r3, r2
 800ebf0:	6963      	ldr	r3, [r4, #20]
 800ebf2:	b2f6      	uxtb	r6, r6
 800ebf4:	4283      	cmp	r3, r0
 800ebf6:	4637      	mov	r7, r6
 800ebf8:	dc05      	bgt.n	800ec06 <__swbuf_r+0x4e>
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f7ff ffb3 	bl	800eb68 <_fflush_r>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d1ed      	bne.n	800ebe2 <__swbuf_r+0x2a>
 800ec06:	68a3      	ldr	r3, [r4, #8]
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	60a3      	str	r3, [r4, #8]
 800ec0c:	6823      	ldr	r3, [r4, #0]
 800ec0e:	1c5a      	adds	r2, r3, #1
 800ec10:	6022      	str	r2, [r4, #0]
 800ec12:	701e      	strb	r6, [r3, #0]
 800ec14:	6962      	ldr	r2, [r4, #20]
 800ec16:	1c43      	adds	r3, r0, #1
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d004      	beq.n	800ec26 <__swbuf_r+0x6e>
 800ec1c:	89a3      	ldrh	r3, [r4, #12]
 800ec1e:	07db      	lsls	r3, r3, #31
 800ec20:	d5e1      	bpl.n	800ebe6 <__swbuf_r+0x2e>
 800ec22:	2e0a      	cmp	r6, #10
 800ec24:	d1df      	bne.n	800ebe6 <__swbuf_r+0x2e>
 800ec26:	4621      	mov	r1, r4
 800ec28:	4628      	mov	r0, r5
 800ec2a:	f7ff ff9d 	bl	800eb68 <_fflush_r>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d0d9      	beq.n	800ebe6 <__swbuf_r+0x2e>
 800ec32:	e7d6      	b.n	800ebe2 <__swbuf_r+0x2a>

0800ec34 <__swsetup_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4b29      	ldr	r3, [pc, #164]	@ (800ecdc <__swsetup_r+0xa8>)
 800ec38:	4605      	mov	r5, r0
 800ec3a:	6818      	ldr	r0, [r3, #0]
 800ec3c:	460c      	mov	r4, r1
 800ec3e:	b118      	cbz	r0, 800ec48 <__swsetup_r+0x14>
 800ec40:	6a03      	ldr	r3, [r0, #32]
 800ec42:	b90b      	cbnz	r3, 800ec48 <__swsetup_r+0x14>
 800ec44:	f7fe faf6 	bl	800d234 <__sinit>
 800ec48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec4c:	0719      	lsls	r1, r3, #28
 800ec4e:	d422      	bmi.n	800ec96 <__swsetup_r+0x62>
 800ec50:	06da      	lsls	r2, r3, #27
 800ec52:	d407      	bmi.n	800ec64 <__swsetup_r+0x30>
 800ec54:	2209      	movs	r2, #9
 800ec56:	602a      	str	r2, [r5, #0]
 800ec58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec5c:	81a3      	strh	r3, [r4, #12]
 800ec5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec62:	e033      	b.n	800eccc <__swsetup_r+0x98>
 800ec64:	0758      	lsls	r0, r3, #29
 800ec66:	d512      	bpl.n	800ec8e <__swsetup_r+0x5a>
 800ec68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec6a:	b141      	cbz	r1, 800ec7e <__swsetup_r+0x4a>
 800ec6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec70:	4299      	cmp	r1, r3
 800ec72:	d002      	beq.n	800ec7a <__swsetup_r+0x46>
 800ec74:	4628      	mov	r0, r5
 800ec76:	f7ff f9ed 	bl	800e054 <_free_r>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec7e:	89a3      	ldrh	r3, [r4, #12]
 800ec80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec84:	81a3      	strh	r3, [r4, #12]
 800ec86:	2300      	movs	r3, #0
 800ec88:	6063      	str	r3, [r4, #4]
 800ec8a:	6923      	ldr	r3, [r4, #16]
 800ec8c:	6023      	str	r3, [r4, #0]
 800ec8e:	89a3      	ldrh	r3, [r4, #12]
 800ec90:	f043 0308 	orr.w	r3, r3, #8
 800ec94:	81a3      	strh	r3, [r4, #12]
 800ec96:	6923      	ldr	r3, [r4, #16]
 800ec98:	b94b      	cbnz	r3, 800ecae <__swsetup_r+0x7a>
 800ec9a:	89a3      	ldrh	r3, [r4, #12]
 800ec9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eca4:	d003      	beq.n	800ecae <__swsetup_r+0x7a>
 800eca6:	4621      	mov	r1, r4
 800eca8:	4628      	mov	r0, r5
 800ecaa:	f000 f8a3 	bl	800edf4 <__smakebuf_r>
 800ecae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecb2:	f013 0201 	ands.w	r2, r3, #1
 800ecb6:	d00a      	beq.n	800ecce <__swsetup_r+0x9a>
 800ecb8:	2200      	movs	r2, #0
 800ecba:	60a2      	str	r2, [r4, #8]
 800ecbc:	6962      	ldr	r2, [r4, #20]
 800ecbe:	4252      	negs	r2, r2
 800ecc0:	61a2      	str	r2, [r4, #24]
 800ecc2:	6922      	ldr	r2, [r4, #16]
 800ecc4:	b942      	cbnz	r2, 800ecd8 <__swsetup_r+0xa4>
 800ecc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecca:	d1c5      	bne.n	800ec58 <__swsetup_r+0x24>
 800eccc:	bd38      	pop	{r3, r4, r5, pc}
 800ecce:	0799      	lsls	r1, r3, #30
 800ecd0:	bf58      	it	pl
 800ecd2:	6962      	ldrpl	r2, [r4, #20]
 800ecd4:	60a2      	str	r2, [r4, #8]
 800ecd6:	e7f4      	b.n	800ecc2 <__swsetup_r+0x8e>
 800ecd8:	2000      	movs	r0, #0
 800ecda:	e7f7      	b.n	800eccc <__swsetup_r+0x98>
 800ecdc:	2400001c 	.word	0x2400001c

0800ece0 <__assert_func>:
 800ece0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ece2:	4614      	mov	r4, r2
 800ece4:	461a      	mov	r2, r3
 800ece6:	4b09      	ldr	r3, [pc, #36]	@ (800ed0c <__assert_func+0x2c>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4605      	mov	r5, r0
 800ecec:	68d8      	ldr	r0, [r3, #12]
 800ecee:	b14c      	cbz	r4, 800ed04 <__assert_func+0x24>
 800ecf0:	4b07      	ldr	r3, [pc, #28]	@ (800ed10 <__assert_func+0x30>)
 800ecf2:	9100      	str	r1, [sp, #0]
 800ecf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecf8:	4906      	ldr	r1, [pc, #24]	@ (800ed14 <__assert_func+0x34>)
 800ecfa:	462b      	mov	r3, r5
 800ecfc:	f000 f842 	bl	800ed84 <fiprintf>
 800ed00:	f000 f8d6 	bl	800eeb0 <abort>
 800ed04:	4b04      	ldr	r3, [pc, #16]	@ (800ed18 <__assert_func+0x38>)
 800ed06:	461c      	mov	r4, r3
 800ed08:	e7f3      	b.n	800ecf2 <__assert_func+0x12>
 800ed0a:	bf00      	nop
 800ed0c:	2400001c 	.word	0x2400001c
 800ed10:	0800f151 	.word	0x0800f151
 800ed14:	0800f15e 	.word	0x0800f15e
 800ed18:	0800f18c 	.word	0x0800f18c

0800ed1c <_calloc_r>:
 800ed1c:	b570      	push	{r4, r5, r6, lr}
 800ed1e:	fba1 5402 	umull	r5, r4, r1, r2
 800ed22:	b934      	cbnz	r4, 800ed32 <_calloc_r+0x16>
 800ed24:	4629      	mov	r1, r5
 800ed26:	f7fd fd37 	bl	800c798 <_malloc_r>
 800ed2a:	4606      	mov	r6, r0
 800ed2c:	b928      	cbnz	r0, 800ed3a <_calloc_r+0x1e>
 800ed2e:	4630      	mov	r0, r6
 800ed30:	bd70      	pop	{r4, r5, r6, pc}
 800ed32:	220c      	movs	r2, #12
 800ed34:	6002      	str	r2, [r0, #0]
 800ed36:	2600      	movs	r6, #0
 800ed38:	e7f9      	b.n	800ed2e <_calloc_r+0x12>
 800ed3a:	462a      	mov	r2, r5
 800ed3c:	4621      	mov	r1, r4
 800ed3e:	f7fe fb04 	bl	800d34a <memset>
 800ed42:	e7f4      	b.n	800ed2e <_calloc_r+0x12>

0800ed44 <__ascii_mbtowc>:
 800ed44:	b082      	sub	sp, #8
 800ed46:	b901      	cbnz	r1, 800ed4a <__ascii_mbtowc+0x6>
 800ed48:	a901      	add	r1, sp, #4
 800ed4a:	b142      	cbz	r2, 800ed5e <__ascii_mbtowc+0x1a>
 800ed4c:	b14b      	cbz	r3, 800ed62 <__ascii_mbtowc+0x1e>
 800ed4e:	7813      	ldrb	r3, [r2, #0]
 800ed50:	600b      	str	r3, [r1, #0]
 800ed52:	7812      	ldrb	r2, [r2, #0]
 800ed54:	1e10      	subs	r0, r2, #0
 800ed56:	bf18      	it	ne
 800ed58:	2001      	movne	r0, #1
 800ed5a:	b002      	add	sp, #8
 800ed5c:	4770      	bx	lr
 800ed5e:	4610      	mov	r0, r2
 800ed60:	e7fb      	b.n	800ed5a <__ascii_mbtowc+0x16>
 800ed62:	f06f 0001 	mvn.w	r0, #1
 800ed66:	e7f8      	b.n	800ed5a <__ascii_mbtowc+0x16>

0800ed68 <__ascii_wctomb>:
 800ed68:	4603      	mov	r3, r0
 800ed6a:	4608      	mov	r0, r1
 800ed6c:	b141      	cbz	r1, 800ed80 <__ascii_wctomb+0x18>
 800ed6e:	2aff      	cmp	r2, #255	@ 0xff
 800ed70:	d904      	bls.n	800ed7c <__ascii_wctomb+0x14>
 800ed72:	228a      	movs	r2, #138	@ 0x8a
 800ed74:	601a      	str	r2, [r3, #0]
 800ed76:	f04f 30ff 	mov.w	r0, #4294967295
 800ed7a:	4770      	bx	lr
 800ed7c:	700a      	strb	r2, [r1, #0]
 800ed7e:	2001      	movs	r0, #1
 800ed80:	4770      	bx	lr
	...

0800ed84 <fiprintf>:
 800ed84:	b40e      	push	{r1, r2, r3}
 800ed86:	b503      	push	{r0, r1, lr}
 800ed88:	4601      	mov	r1, r0
 800ed8a:	ab03      	add	r3, sp, #12
 800ed8c:	4805      	ldr	r0, [pc, #20]	@ (800eda4 <fiprintf+0x20>)
 800ed8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed92:	6800      	ldr	r0, [r0, #0]
 800ed94:	9301      	str	r3, [sp, #4]
 800ed96:	f7ff fd4b 	bl	800e830 <_vfiprintf_r>
 800ed9a:	b002      	add	sp, #8
 800ed9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eda0:	b003      	add	sp, #12
 800eda2:	4770      	bx	lr
 800eda4:	2400001c 	.word	0x2400001c

0800eda8 <__swhatbuf_r>:
 800eda8:	b570      	push	{r4, r5, r6, lr}
 800edaa:	460c      	mov	r4, r1
 800edac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edb0:	2900      	cmp	r1, #0
 800edb2:	b096      	sub	sp, #88	@ 0x58
 800edb4:	4615      	mov	r5, r2
 800edb6:	461e      	mov	r6, r3
 800edb8:	da0d      	bge.n	800edd6 <__swhatbuf_r+0x2e>
 800edba:	89a3      	ldrh	r3, [r4, #12]
 800edbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800edc0:	f04f 0100 	mov.w	r1, #0
 800edc4:	bf14      	ite	ne
 800edc6:	2340      	movne	r3, #64	@ 0x40
 800edc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800edcc:	2000      	movs	r0, #0
 800edce:	6031      	str	r1, [r6, #0]
 800edd0:	602b      	str	r3, [r5, #0]
 800edd2:	b016      	add	sp, #88	@ 0x58
 800edd4:	bd70      	pop	{r4, r5, r6, pc}
 800edd6:	466a      	mov	r2, sp
 800edd8:	f000 f848 	bl	800ee6c <_fstat_r>
 800eddc:	2800      	cmp	r0, #0
 800edde:	dbec      	blt.n	800edba <__swhatbuf_r+0x12>
 800ede0:	9901      	ldr	r1, [sp, #4]
 800ede2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ede6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800edea:	4259      	negs	r1, r3
 800edec:	4159      	adcs	r1, r3
 800edee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edf2:	e7eb      	b.n	800edcc <__swhatbuf_r+0x24>

0800edf4 <__smakebuf_r>:
 800edf4:	898b      	ldrh	r3, [r1, #12]
 800edf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edf8:	079d      	lsls	r5, r3, #30
 800edfa:	4606      	mov	r6, r0
 800edfc:	460c      	mov	r4, r1
 800edfe:	d507      	bpl.n	800ee10 <__smakebuf_r+0x1c>
 800ee00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ee04:	6023      	str	r3, [r4, #0]
 800ee06:	6123      	str	r3, [r4, #16]
 800ee08:	2301      	movs	r3, #1
 800ee0a:	6163      	str	r3, [r4, #20]
 800ee0c:	b003      	add	sp, #12
 800ee0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee10:	ab01      	add	r3, sp, #4
 800ee12:	466a      	mov	r2, sp
 800ee14:	f7ff ffc8 	bl	800eda8 <__swhatbuf_r>
 800ee18:	9f00      	ldr	r7, [sp, #0]
 800ee1a:	4605      	mov	r5, r0
 800ee1c:	4639      	mov	r1, r7
 800ee1e:	4630      	mov	r0, r6
 800ee20:	f7fd fcba 	bl	800c798 <_malloc_r>
 800ee24:	b948      	cbnz	r0, 800ee3a <__smakebuf_r+0x46>
 800ee26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee2a:	059a      	lsls	r2, r3, #22
 800ee2c:	d4ee      	bmi.n	800ee0c <__smakebuf_r+0x18>
 800ee2e:	f023 0303 	bic.w	r3, r3, #3
 800ee32:	f043 0302 	orr.w	r3, r3, #2
 800ee36:	81a3      	strh	r3, [r4, #12]
 800ee38:	e7e2      	b.n	800ee00 <__smakebuf_r+0xc>
 800ee3a:	89a3      	ldrh	r3, [r4, #12]
 800ee3c:	6020      	str	r0, [r4, #0]
 800ee3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee42:	81a3      	strh	r3, [r4, #12]
 800ee44:	9b01      	ldr	r3, [sp, #4]
 800ee46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee4a:	b15b      	cbz	r3, 800ee64 <__smakebuf_r+0x70>
 800ee4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee50:	4630      	mov	r0, r6
 800ee52:	f000 f81d 	bl	800ee90 <_isatty_r>
 800ee56:	b128      	cbz	r0, 800ee64 <__smakebuf_r+0x70>
 800ee58:	89a3      	ldrh	r3, [r4, #12]
 800ee5a:	f023 0303 	bic.w	r3, r3, #3
 800ee5e:	f043 0301 	orr.w	r3, r3, #1
 800ee62:	81a3      	strh	r3, [r4, #12]
 800ee64:	89a3      	ldrh	r3, [r4, #12]
 800ee66:	431d      	orrs	r5, r3
 800ee68:	81a5      	strh	r5, [r4, #12]
 800ee6a:	e7cf      	b.n	800ee0c <__smakebuf_r+0x18>

0800ee6c <_fstat_r>:
 800ee6c:	b538      	push	{r3, r4, r5, lr}
 800ee6e:	4d07      	ldr	r5, [pc, #28]	@ (800ee8c <_fstat_r+0x20>)
 800ee70:	2300      	movs	r3, #0
 800ee72:	4604      	mov	r4, r0
 800ee74:	4608      	mov	r0, r1
 800ee76:	4611      	mov	r1, r2
 800ee78:	602b      	str	r3, [r5, #0]
 800ee7a:	f7f2 fc0b 	bl	8001694 <_fstat>
 800ee7e:	1c43      	adds	r3, r0, #1
 800ee80:	d102      	bne.n	800ee88 <_fstat_r+0x1c>
 800ee82:	682b      	ldr	r3, [r5, #0]
 800ee84:	b103      	cbz	r3, 800ee88 <_fstat_r+0x1c>
 800ee86:	6023      	str	r3, [r4, #0]
 800ee88:	bd38      	pop	{r3, r4, r5, pc}
 800ee8a:	bf00      	nop
 800ee8c:	24000df8 	.word	0x24000df8

0800ee90 <_isatty_r>:
 800ee90:	b538      	push	{r3, r4, r5, lr}
 800ee92:	4d06      	ldr	r5, [pc, #24]	@ (800eeac <_isatty_r+0x1c>)
 800ee94:	2300      	movs	r3, #0
 800ee96:	4604      	mov	r4, r0
 800ee98:	4608      	mov	r0, r1
 800ee9a:	602b      	str	r3, [r5, #0]
 800ee9c:	f7f2 fc0a 	bl	80016b4 <_isatty>
 800eea0:	1c43      	adds	r3, r0, #1
 800eea2:	d102      	bne.n	800eeaa <_isatty_r+0x1a>
 800eea4:	682b      	ldr	r3, [r5, #0]
 800eea6:	b103      	cbz	r3, 800eeaa <_isatty_r+0x1a>
 800eea8:	6023      	str	r3, [r4, #0]
 800eeaa:	bd38      	pop	{r3, r4, r5, pc}
 800eeac:	24000df8 	.word	0x24000df8

0800eeb0 <abort>:
 800eeb0:	b508      	push	{r3, lr}
 800eeb2:	2006      	movs	r0, #6
 800eeb4:	f000 f82c 	bl	800ef10 <raise>
 800eeb8:	2001      	movs	r0, #1
 800eeba:	f7f2 fb9b 	bl	80015f4 <_exit>

0800eebe <_raise_r>:
 800eebe:	291f      	cmp	r1, #31
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	4605      	mov	r5, r0
 800eec4:	460c      	mov	r4, r1
 800eec6:	d904      	bls.n	800eed2 <_raise_r+0x14>
 800eec8:	2316      	movs	r3, #22
 800eeca:	6003      	str	r3, [r0, #0]
 800eecc:	f04f 30ff 	mov.w	r0, #4294967295
 800eed0:	bd38      	pop	{r3, r4, r5, pc}
 800eed2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eed4:	b112      	cbz	r2, 800eedc <_raise_r+0x1e>
 800eed6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eeda:	b94b      	cbnz	r3, 800eef0 <_raise_r+0x32>
 800eedc:	4628      	mov	r0, r5
 800eede:	f000 f831 	bl	800ef44 <_getpid_r>
 800eee2:	4622      	mov	r2, r4
 800eee4:	4601      	mov	r1, r0
 800eee6:	4628      	mov	r0, r5
 800eee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eeec:	f000 b818 	b.w	800ef20 <_kill_r>
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d00a      	beq.n	800ef0a <_raise_r+0x4c>
 800eef4:	1c59      	adds	r1, r3, #1
 800eef6:	d103      	bne.n	800ef00 <_raise_r+0x42>
 800eef8:	2316      	movs	r3, #22
 800eefa:	6003      	str	r3, [r0, #0]
 800eefc:	2001      	movs	r0, #1
 800eefe:	e7e7      	b.n	800eed0 <_raise_r+0x12>
 800ef00:	2100      	movs	r1, #0
 800ef02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ef06:	4620      	mov	r0, r4
 800ef08:	4798      	blx	r3
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	e7e0      	b.n	800eed0 <_raise_r+0x12>
	...

0800ef10 <raise>:
 800ef10:	4b02      	ldr	r3, [pc, #8]	@ (800ef1c <raise+0xc>)
 800ef12:	4601      	mov	r1, r0
 800ef14:	6818      	ldr	r0, [r3, #0]
 800ef16:	f7ff bfd2 	b.w	800eebe <_raise_r>
 800ef1a:	bf00      	nop
 800ef1c:	2400001c 	.word	0x2400001c

0800ef20 <_kill_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4d07      	ldr	r5, [pc, #28]	@ (800ef40 <_kill_r+0x20>)
 800ef24:	2300      	movs	r3, #0
 800ef26:	4604      	mov	r4, r0
 800ef28:	4608      	mov	r0, r1
 800ef2a:	4611      	mov	r1, r2
 800ef2c:	602b      	str	r3, [r5, #0]
 800ef2e:	f7f2 fb51 	bl	80015d4 <_kill>
 800ef32:	1c43      	adds	r3, r0, #1
 800ef34:	d102      	bne.n	800ef3c <_kill_r+0x1c>
 800ef36:	682b      	ldr	r3, [r5, #0]
 800ef38:	b103      	cbz	r3, 800ef3c <_kill_r+0x1c>
 800ef3a:	6023      	str	r3, [r4, #0]
 800ef3c:	bd38      	pop	{r3, r4, r5, pc}
 800ef3e:	bf00      	nop
 800ef40:	24000df8 	.word	0x24000df8

0800ef44 <_getpid_r>:
 800ef44:	f7f2 bb3e 	b.w	80015c4 <_getpid>

0800ef48 <_init>:
 800ef48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4a:	bf00      	nop
 800ef4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef4e:	bc08      	pop	{r3}
 800ef50:	469e      	mov	lr, r3
 800ef52:	4770      	bx	lr

0800ef54 <_fini>:
 800ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef56:	bf00      	nop
 800ef58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef5a:	bc08      	pop	{r3}
 800ef5c:	469e      	mov	lr, r3
 800ef5e:	4770      	bx	lr
