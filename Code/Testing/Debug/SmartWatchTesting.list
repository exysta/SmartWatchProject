
SmartWatchTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc38  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c4  0800dee8  0800dee8  0000eee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f0ac  0800f0ac  000100ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f0b4  0800f0b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f0b8  0800f0b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e4  24000000  0800f0bc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000014e4  240001e4  0800f2a0  000111e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240016c8  0800f2a0  000116c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ab44  00000000  00000000  00011212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000369c  00000000  00000000  0002bd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001238  00000000  00000000  0002f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dff  00000000  00000000  00030630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000535f  00000000  00000000  0003142f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c40b  00000000  00000000  0003678e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ca7e  00000000  00000000  00052b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0018f617  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000058b0  00000000  00000000  0018f65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000087  00000000  00000000  00194f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e4 	.word	0x240001e4
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ded0 	.word	0x0800ded0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	0800ded0 	.word	0x0800ded0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_DMA_Init+0x7c>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	200b      	movs	r0, #11
 80006f6:	f001 fe0c 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 fe23 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	200c      	movs	r0, #12
 8000706:	f001 fe04 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800070a:	200c      	movs	r0, #12
 800070c:	f001 fe1b 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	200d      	movs	r0, #13
 8000716:	f001 fdfc 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800071a:	200d      	movs	r0, #13
 800071c:	f001 fe13 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200e      	movs	r0, #14
 8000726:	f001 fdf4 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800072a:	200e      	movs	r0, #14
 800072c:	f001 fe0b 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2010      	movs	r0, #16
 8000736:	f001 fdec 	bl	8002312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800073a:	2010      	movs	r0, #16
 800073c:	f001 fe03 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58024400 	.word	0x58024400

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b76      	ldr	r3, [pc, #472]	@ (800093c <MX_GPIO_Init+0x1f0>)
 8000764:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000768:	4a74      	ldr	r2, [pc, #464]	@ (800093c <MX_GPIO_Init+0x1f0>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000772:	4b72      	ldr	r3, [pc, #456]	@ (800093c <MX_GPIO_Init+0x1f0>)
 8000774:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000780:	4b6e      	ldr	r3, [pc, #440]	@ (800093c <MX_GPIO_Init+0x1f0>)
 8000782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000786:	4a6d      	ldr	r2, [pc, #436]	@ (800093c <MX_GPIO_Init+0x1f0>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000790:	4b6a      	ldr	r3, [pc, #424]	@ (800093c <MX_GPIO_Init+0x1f0>)
 8000792:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b67      	ldr	r3, [pc, #412]	@ (800093c <MX_GPIO_Init+0x1f0>)
 80007a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a4:	4a65      	ldr	r2, [pc, #404]	@ (800093c <MX_GPIO_Init+0x1f0>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ae:	4b63      	ldr	r3, [pc, #396]	@ (800093c <MX_GPIO_Init+0x1f0>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b5f      	ldr	r3, [pc, #380]	@ (800093c <MX_GPIO_Init+0x1f0>)
 80007be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c2:	4a5e      	ldr	r2, [pc, #376]	@ (800093c <MX_GPIO_Init+0x1f0>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007cc:	4b5b      	ldr	r3, [pc, #364]	@ (800093c <MX_GPIO_Init+0x1f0>)
 80007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	4b58      	ldr	r3, [pc, #352]	@ (800093c <MX_GPIO_Init+0x1f0>)
 80007dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007e0:	4a56      	ldr	r2, [pc, #344]	@ (800093c <MX_GPIO_Init+0x1f0>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ea:	4b54      	ldr	r3, [pc, #336]	@ (800093c <MX_GPIO_Init+0x1f0>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b50      	ldr	r3, [pc, #320]	@ (800093c <MX_GPIO_Init+0x1f0>)
 80007fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007fe:	4a4f      	ldr	r2, [pc, #316]	@ (800093c <MX_GPIO_Init+0x1f0>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000808:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x1f0>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x1f0>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800081c:	4a47      	ldr	r2, [pc, #284]	@ (800093c <MX_GPIO_Init+0x1f0>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000822:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000826:	4b45      	ldr	r3, [pc, #276]	@ (800093c <MX_GPIO_Init+0x1f0>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800082c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f244 0101 	movw	r1, #16385	@ 0x4001
 800083a:	4841      	ldr	r0, [pc, #260]	@ (8000940 <MX_GPIO_Init+0x1f4>)
 800083c:	f004 feb0 	bl	80055a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000846:	483f      	ldr	r0, [pc, #252]	@ (8000944 <MX_GPIO_Init+0x1f8>)
 8000848:	f004 feaa 	bl	80055a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000852:	483d      	ldr	r0, [pc, #244]	@ (8000948 <MX_GPIO_Init+0x1fc>)
 8000854:	f004 fea4 	bl	80055a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800085e:	483a      	ldr	r0, [pc, #232]	@ (8000948 <MX_GPIO_Init+0x1fc>)
 8000860:	f004 fe9e 	bl	80055a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800086a:	4838      	ldr	r0, [pc, #224]	@ (800094c <MX_GPIO_Init+0x200>)
 800086c:	f004 fe98 	bl	80055a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2110      	movs	r1, #16
 8000874:	4832      	ldr	r0, [pc, #200]	@ (8000940 <MX_GPIO_Init+0x1f4>)
 8000876:	f004 fe93 	bl	80055a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2102      	movs	r1, #2
 800087e:	4831      	ldr	r0, [pc, #196]	@ (8000944 <MX_GPIO_Init+0x1f8>)
 8000880:	f004 fe8e 	bl	80055a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	482d      	ldr	r0, [pc, #180]	@ (8000950 <MX_GPIO_Init+0x204>)
 800089a:	f004 fcd1 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4;
 800089e:	f244 0311 	movw	r3, #16401	@ 0x4011
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4822      	ldr	r0, [pc, #136]	@ (8000940 <MX_GPIO_Init+0x1f4>)
 80008b8:	f004 fcc2 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|LD2_Pin;
 80008bc:	f248 0302 	movw	r3, #32770	@ 0x8002
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	481b      	ldr	r0, [pc, #108]	@ (8000944 <MX_GPIO_Init+0x1f8>)
 80008d6:	f004 fcb3 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 80008da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e8:	2302      	movs	r3, #2
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4815      	ldr	r0, [pc, #84]	@ (8000948 <MX_GPIO_Init+0x1fc>)
 80008f4:	f004 fca4 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 80008f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	480d      	ldr	r0, [pc, #52]	@ (8000948 <MX_GPIO_Init+0x1fc>)
 8000912:	f004 fc95 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8000916:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4807      	ldr	r0, [pc, #28]	@ (800094c <MX_GPIO_Init+0x200>)
 8000930:	f004 fc86 	bl	8005240 <HAL_GPIO_Init>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	58024400 	.word	0x58024400
 8000940:	58020400 	.word	0x58020400
 8000944:	58021000 	.word	0x58021000
 8000948:	58020c00 	.word	0x58020c00
 800094c:	58021800 	.word	0x58021800
 8000950:	58020800 	.word	0x58020800

08000954 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000958:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_I2C2_Init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	@ (80009cc <MX_I2C2_Init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 800095e:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_I2C2_Init+0x74>)
 8000960:	4a1b      	ldr	r2, [pc, #108]	@ (80009d0 <MX_I2C2_Init+0x7c>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <MX_I2C2_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_I2C2_Init+0x74>)
 800096c:	2201      	movs	r2, #1
 800096e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000970:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_I2C2_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000976:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_I2C2_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <MX_I2C2_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_I2C2_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <MX_I2C2_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800098e:	480e      	ldr	r0, [pc, #56]	@ (80009c8 <MX_I2C2_Init+0x74>)
 8000990:	f004 fe20 	bl	80055d4 <HAL_I2C_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800099a:	f000 fa49 	bl	8000e30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099e:	2100      	movs	r1, #0
 80009a0:	4809      	ldr	r0, [pc, #36]	@ (80009c8 <MX_I2C2_Init+0x74>)
 80009a2:	f004 feb3 	bl	800570c <HAL_I2CEx_ConfigAnalogFilter>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009ac:	f000 fa40 	bl	8000e30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009b0:	2100      	movs	r1, #0
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_I2C2_Init+0x74>)
 80009b4:	f004 fef5 	bl	80057a2 <HAL_I2CEx_ConfigDigitalFilter>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009be:	f000 fa37 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000200 	.word	0x24000200
 80009cc:	40005800 	.word	0x40005800
 80009d0:	20b0ccff 	.word	0x20b0ccff

080009d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0ba      	sub	sp, #232	@ 0xe8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	22c0      	movs	r2, #192	@ 0xc0
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f00b fbb6 	bl	800c166 <memset>
  if(i2cHandle->Instance==I2C2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a27      	ldr	r2, [pc, #156]	@ (8000a9c <HAL_I2C_MspInit+0xc8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d146      	bne.n	8000a92 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a04:	f04f 0208 	mov.w	r2, #8
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 ff26 	bl	800686c <HAL_RCCEx_PeriphCLKConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000a26:	f000 fa03 	bl	8000e30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <HAL_I2C_MspInit+0xcc>)
 8000a2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a30:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <HAL_I2C_MspInit+0xcc>)
 8000a32:	f043 0302 	orr.w	r3, r3, #2
 8000a36:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_I2C_MspInit+0xcc>)
 8000a3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a48:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a50:	2312      	movs	r3, #18
 8000a52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a62:	2304      	movs	r3, #4
 8000a64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <HAL_I2C_MspInit+0xd0>)
 8000a70:	f004 fbe6 	bl	8005240 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_I2C_MspInit+0xcc>)
 8000a76:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a7a:	4a09      	ldr	r2, [pc, #36]	@ (8000aa0 <HAL_I2C_MspInit+0xcc>)
 8000a7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a80:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_I2C_MspInit+0xcc>)
 8000a86:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a92:	bf00      	nop
 8000a94:	37e8      	adds	r7, #232	@ 0xe8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40005800 	.word	0x40005800
 8000aa0:	58024400 	.word	0x58024400
 8000aa4:	58020400 	.word	0x58020400

08000aa8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000ab0:	1d39      	adds	r1, r7, #4
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <__io_putchar+0x20>)
 8000aba:	f008 fcbc 	bl	8009436 <HAL_UART_Transmit>
	return chr;
 8000abe:	687b      	ldr	r3, [r7, #4]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24001304 	.word	0x24001304

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ad2:	f000 f981 	bl	8000dd8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad6:	f001 fa8b 	bl	8001ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 f82b 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ade:	f7ff fe35 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ae2:	f7ff fdf3 	bl	80006cc <MX_DMA_Init>
  MX_UART4_Init();
 8000ae6:	f000 ff8f 	bl	8001a08 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000aea:	f001 f825 	bl	8001b38 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000aee:	f7ff ff31 	bl	8000954 <MX_I2C2_Init>
  MX_UART5_Init();
 8000af2:	f000 ffd5 	bl	8001aa0 <MX_UART5_Init>
  MX_SPI1_Init();
 8000af6:	f000 f9a1 	bl	8000e3c <MX_SPI1_Init>
	GNSS_LoadConfig(&GNSS_Handle);
	uint32_t Timer = HAL_GetTick();
#endif

#ifdef SCREEN_TEST
	ST7789_Init();
 8000afa:	f000 fbc7 	bl	800128c <ST7789_Init>
            messageReady = 0;
        }
#endif

#ifdef SCREEN_TEST
        ST7789_Fill_Color(BLACK);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f000 fc6e 	bl	80013e0 <ST7789_Fill_Color>
    	ST7789_WriteString(40, 20, " hello it's me lucas", Font_11x18, WHITE, BLACK);
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <main+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	9202      	str	r2, [sp, #8]
 8000b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	9200      	str	r2, [sp, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <main+0x64>)
 8000b18:	2114      	movs	r1, #20
 8000b1a:	2028      	movs	r0, #40	@ 0x28
 8000b1c:	f000 fd16 	bl	800154c <ST7789_WriteString>
		HAL_Delay(4000);
 8000b20:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000b24:	f001 faf6 	bl	8002114 <HAL_Delay>
        ST7789_Fill_Color(BLACK);
 8000b28:	bf00      	nop
 8000b2a:	e7e8      	b.n	8000afe <main+0x32>
 8000b2c:	24000000 	.word	0x24000000
 8000b30:	0800dee8 	.word	0x0800dee8

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b09c      	sub	sp, #112	@ 0x70
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	224c      	movs	r2, #76	@ 0x4c
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f00b fb0f 	bl	800c166 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00b fb09 	bl	800c166 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b54:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <SystemClock_Config+0xe0>)
 8000b56:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b5e:	2004      	movs	r0, #4
 8000b60:	f004 fe6c 	bl	800583c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b64:	2300      	movs	r3, #0
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	4b2b      	ldr	r3, [pc, #172]	@ (8000c18 <SystemClock_Config+0xe4>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8000c18 <SystemClock_Config+0xe4>)
 8000b6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <SystemClock_Config+0xe4>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b80:	bf00      	nop
 8000b82:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <SystemClock_Config+0xe4>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b8e:	d1f8      	bne.n	8000b82 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b90:	2301      	movs	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000ba6:	2346      	movs	r3, #70	@ 0x46
 8000ba8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f004 fe92 	bl	80058f0 <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bd2:	f000 f92d 	bl	8000e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	233f      	movs	r3, #63	@ 0x3f
 8000bd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000be6:	2340      	movs	r3, #64	@ 0x40
 8000be8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bea:	2340      	movs	r3, #64	@ 0x40
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bf4:	2340      	movs	r3, #64	@ 0x40
 8000bf6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2106      	movs	r1, #6
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f005 faa9 	bl	8006154 <HAL_RCC_ClockConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000c08:	f000 f912 	bl	8000e30 <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3770      	adds	r7, #112	@ 0x70
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	58024400 	.word	0x58024400
 8000c18:	58024800 	.word	0x58024800

08000c1c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
// This callback is called when idle line is detected or buffer is full
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == UART4)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a56      	ldr	r2, [pc, #344]	@ (8000d88 <HAL_UARTEx_RxEventCallback+0x16c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	f040 80a5 	bne.w	8000d7e <HAL_UARTEx_RxEventCallback+0x162>
    {
        // Copy the data from DMA buffer to message buffer
        memcpy(messageBuffer, rxBuffer, Size);
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	461a      	mov	r2, r3
 8000c38:	4954      	ldr	r1, [pc, #336]	@ (8000d8c <HAL_UARTEx_RxEventCallback+0x170>)
 8000c3a:	4855      	ldr	r0, [pc, #340]	@ (8000d90 <HAL_UARTEx_RxEventCallback+0x174>)
 8000c3c:	f00b fb13 	bl	800c266 <memcpy>

        // Null-terminate the string
        messageBuffer[Size] = '\0';
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	4a53      	ldr	r2, [pc, #332]	@ (8000d90 <HAL_UARTEx_RxEventCallback+0x174>)
 8000c44:	2100      	movs	r1, #0
 8000c46:	54d1      	strb	r1, [r2, r3]

        // Set flag for main loop
        messageReady = 1;
 8000c48:	4b52      	ldr	r3, [pc, #328]	@ (8000d94 <HAL_UARTEx_RxEventCallback+0x178>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]

        HAL_UART_AbortReceive(huart);  // Stop DMA
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f008 fc80 	bl	8009554 <HAL_UART_AbortReceive>
        memset(rxBuffer, 0, sizeof(rxBuffer));  // Reset buffer
 8000c54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c58:	2100      	movs	r1, #0
 8000c5a:	484c      	ldr	r0, [pc, #304]	@ (8000d8c <HAL_UARTEx_RxEventCallback+0x170>)
 8000c5c:	f00b fa83 	bl	800c166 <memset>

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(huart, rxBuffer, RX_BUFFER_SIZE);
 8000c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c64:	4949      	ldr	r1, [pc, #292]	@ (8000d8c <HAL_UARTEx_RxEventCallback+0x170>)
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f00a fc9f 	bl	800b5aa <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a48      	ldr	r2, [pc, #288]	@ (8000d98 <HAL_UARTEx_RxEventCallback+0x17c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d068      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a46      	ldr	r2, [pc, #280]	@ (8000d9c <HAL_UARTEx_RxEventCallback+0x180>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d061      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a43      	ldr	r2, [pc, #268]	@ (8000da0 <HAL_UARTEx_RxEventCallback+0x184>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d05a      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a41      	ldr	r2, [pc, #260]	@ (8000da4 <HAL_UARTEx_RxEventCallback+0x188>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d053      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a3e      	ldr	r2, [pc, #248]	@ (8000da8 <HAL_UARTEx_RxEventCallback+0x18c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d04c      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a3c      	ldr	r2, [pc, #240]	@ (8000dac <HAL_UARTEx_RxEventCallback+0x190>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d045      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a39      	ldr	r2, [pc, #228]	@ (8000db0 <HAL_UARTEx_RxEventCallback+0x194>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d03e      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a37      	ldr	r2, [pc, #220]	@ (8000db4 <HAL_UARTEx_RxEventCallback+0x198>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d037      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a34      	ldr	r2, [pc, #208]	@ (8000db8 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d030      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a32      	ldr	r2, [pc, #200]	@ (8000dbc <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d029      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc0 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d022      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000dc4 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d01b      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8000dc8 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d014      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a28      	ldr	r2, [pc, #160]	@ (8000dcc <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d00d      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a25      	ldr	r2, [pc, #148]	@ (8000dd0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d006      	beq.n	8000d4c <HAL_UARTEx_RxEventCallback+0x130>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a23      	ldr	r2, [pc, #140]	@ (8000dd4 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d10c      	bne.n	8000d66 <HAL_UARTEx_RxEventCallback+0x14a>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0208 	bic.w	r2, r2, #8
 8000d62:	601a      	str	r2, [r3, #0]
    }
}
 8000d64:	e00b      	b.n	8000d7e <HAL_UARTEx_RxEventCallback+0x162>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0204 	bic.w	r2, r2, #4
 8000d7c:	601a      	str	r2, [r3, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40004c00 	.word	0x40004c00
 8000d8c:	24000254 	.word	0x24000254
 8000d90:	24000354 	.word	0x24000354
 8000d94:	24000454 	.word	0x24000454
 8000d98:	40020010 	.word	0x40020010
 8000d9c:	40020028 	.word	0x40020028
 8000da0:	40020040 	.word	0x40020040
 8000da4:	40020058 	.word	0x40020058
 8000da8:	40020070 	.word	0x40020070
 8000dac:	40020088 	.word	0x40020088
 8000db0:	400200a0 	.word	0x400200a0
 8000db4:	400200b8 	.word	0x400200b8
 8000db8:	40020410 	.word	0x40020410
 8000dbc:	40020428 	.word	0x40020428
 8000dc0:	40020440 	.word	0x40020440
 8000dc4:	40020458 	.word	0x40020458
 8000dc8:	40020470 	.word	0x40020470
 8000dcc:	40020488 	.word	0x40020488
 8000dd0:	400204a0 	.word	0x400204a0
 8000dd4:	400204b8 	.word	0x400204b8

08000dd8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dea:	f001 fac7 	bl	800237c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000dfa:	231f      	movs	r3, #31
 8000dfc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000dfe:	2387      	movs	r3, #135	@ 0x87
 8000e00:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e06:	2300      	movs	r3, #0
 8000e08:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 fae5 	bl	80023ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e22:	2004      	movs	r0, #4
 8000e24:	f001 fac2 	bl	80023ac <HAL_MPU_Enable>

}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <Error_Handler+0x8>

08000e3c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e40:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e42:	4a2a      	ldr	r2, [pc, #168]	@ (8000eec <MX_SPI1_Init+0xb0>)
 8000e44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e46:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e48:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e54:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e56:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e58:	2207      	movs	r2, #7
 8000e5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e64:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e6e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000ed4:	f007 faaa 	bl	800842c <HAL_SPI_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 8000ede:	f7ff ffa7 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	24000458 	.word	0x24000458
 8000eec:	40013000 	.word	0x40013000

08000ef0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	22c0      	movs	r2, #192	@ 0xc0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00b f928 	bl	800c166 <memset>
  if(spiHandle->Instance==SPI1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a40      	ldr	r2, [pc, #256]	@ (800101c <HAL_SPI_MspInit+0x12c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d179      	bne.n	8001014 <HAL_SPI_MspInit+0x124>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4618      	mov	r0, r3
 8000f36:	f005 fc99 	bl	800686c <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f40:	f7ff ff76 	bl	8000e30 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f44:	4b36      	ldr	r3, [pc, #216]	@ (8001020 <HAL_SPI_MspInit+0x130>)
 8000f46:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f4a:	4a35      	ldr	r2, [pc, #212]	@ (8001020 <HAL_SPI_MspInit+0x130>)
 8000f4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f50:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000f54:	4b32      	ldr	r3, [pc, #200]	@ (8001020 <HAL_SPI_MspInit+0x130>)
 8000f56:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <HAL_SPI_MspInit+0x130>)
 8000f64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f68:	4a2d      	ldr	r2, [pc, #180]	@ (8001020 <HAL_SPI_MspInit+0x130>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f72:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <HAL_SPI_MspInit+0x130>)
 8000f74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f80:	23a0      	movs	r3, #160	@ 0xa0
 8000f82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f98:	2305      	movs	r3, #5
 8000f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481f      	ldr	r0, [pc, #124]	@ (8001024 <HAL_SPI_MspInit+0x134>)
 8000fa6:	f004 f94b 	bl	8005240 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8000faa:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fac:	4a1f      	ldr	r2, [pc, #124]	@ (800102c <HAL_SPI_MspInit+0x13c>)
 8000fae:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fb2:	2226      	movs	r2, #38	@ 0x26
 8000fb4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fb8:	2240      	movs	r2, #64	@ 0x40
 8000fba:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fca:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fe8:	480f      	ldr	r0, [pc, #60]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000fea:	f001 fa3f 	bl	800246c <HAL_DMA_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8000ff4:	f7ff ff1c 	bl	8000e30 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8000ffc:	679a      	str	r2, [r3, #120]	@ 0x78
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_SPI_MspInit+0x138>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2023      	movs	r0, #35	@ 0x23
 800100a:	f001 f982 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800100e:	2023      	movs	r0, #35	@ 0x23
 8001010:	f001 f999 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001014:	bf00      	nop
 8001016:	37e8      	adds	r7, #232	@ 0xe8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013000 	.word	0x40013000
 8001020:	58024400 	.word	0x58024400
 8001024:	58020000 	.word	0x58020000
 8001028:	240004e0 	.word	0x240004e0
 800102c:	40020088 	.word	0x40020088

08001030 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <ST7789_WriteCommand+0x44>)
 8001042:	f004 faad 	bl	80055a0 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800104c:	480a      	ldr	r0, [pc, #40]	@ (8001078 <ST7789_WriteCommand+0x48>)
 800104e:	f004 faa7 	bl	80055a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001052:	1df9      	adds	r1, r7, #7
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	2201      	movs	r2, #1
 800105a:	4808      	ldr	r0, [pc, #32]	@ (800107c <ST7789_WriteCommand+0x4c>)
 800105c:	f007 fb0a 	bl	8008674 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001066:	4803      	ldr	r0, [pc, #12]	@ (8001074 <ST7789_WriteCommand+0x44>)
 8001068:	f004 fa9a 	bl	80055a0 <HAL_GPIO_WritePin>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	58021800 	.word	0x58021800
 8001078:	58020c00 	.word	0x58020c00
 800107c:	24000458 	.word	0x24000458

08001080 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001090:	4820      	ldr	r0, [pc, #128]	@ (8001114 <ST7789_WriteData+0x94>)
 8001092:	f004 fa85 	bl	80055a0 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800109c:	481e      	ldr	r0, [pc, #120]	@ (8001118 <ST7789_WriteData+0x98>)
 800109e:	f004 fa7f 	bl	80055a0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80010a2:	e02a      	b.n	80010fa <ST7789_WriteData+0x7a>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010aa:	4293      	cmp	r3, r2
 80010ac:	bf28      	it	cs
 80010ae:	4613      	movcs	r3, r2
 80010b0:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <ST7789_WriteData+0x9c>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d30e      	bcc.n	80010dc <ST7789_WriteData+0x5c>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	461a      	mov	r2, r3
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4816      	ldr	r0, [pc, #88]	@ (8001120 <ST7789_WriteData+0xa0>)
 80010c6:	f007 fcc3 	bl	8008a50 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 80010ca:	bf00      	nop
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <ST7789_WriteData+0xa0>)
 80010ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80010d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d1f8      	bne.n	80010cc <ST7789_WriteData+0x4c>
 80010da:	e006      	b.n	80010ea <ST7789_WriteData+0x6a>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80010dc:	89fa      	ldrh	r2, [r7, #14]
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	480e      	ldr	r0, [pc, #56]	@ (8001120 <ST7789_WriteData+0xa0>)
 80010e6:	f007 fac5 	bl	8008674 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80010f2:	89fb      	ldrh	r3, [r7, #14]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1d1      	bne.n	80010a4 <ST7789_WriteData+0x24>
	}

	ST7789_UnSelect();
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001106:	4803      	ldr	r0, [pc, #12]	@ (8001114 <ST7789_WriteData+0x94>)
 8001108:	f004 fa4a 	bl	80055a0 <HAL_GPIO_WritePin>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	58021800 	.word	0x58021800
 8001118:	58020c00 	.word	0x58020c00
 800111c:	24000008 	.word	0x24000008
 8001120:	24000458 	.word	0x24000458

08001124 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <ST7789_WriteSmallData+0x44>)
 8001136:	f004 fa33 	bl	80055a0 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001140:	480a      	ldr	r0, [pc, #40]	@ (800116c <ST7789_WriteSmallData+0x48>)
 8001142:	f004 fa2d 	bl	80055a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001146:	1df9      	adds	r1, r7, #7
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	2201      	movs	r2, #1
 800114e:	4808      	ldr	r0, [pc, #32]	@ (8001170 <ST7789_WriteSmallData+0x4c>)
 8001150:	f007 fa90 	bl	8008674 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800115a:	4803      	ldr	r0, [pc, #12]	@ (8001168 <ST7789_WriteSmallData+0x44>)
 800115c:	f004 fa20 	bl	80055a0 <HAL_GPIO_WritePin>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58021800 	.word	0x58021800
 800116c:	58020c00 	.word	0x58020c00
 8001170:	24000458 	.word	0x24000458

08001174 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 800117e:	2036      	movs	r0, #54	@ 0x36
 8001180:	f7ff ff56 	bl	8001030 <ST7789_WriteCommand>
	switch (m) {
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d81a      	bhi.n	80011c0 <ST7789_SetRotation+0x4c>
 800118a:	a201      	add	r2, pc, #4	@ (adr r2, 8001190 <ST7789_SetRotation+0x1c>)
 800118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001190:	080011a1 	.word	0x080011a1
 8001194:	080011a9 	.word	0x080011a9
 8001198:	080011b1 	.word	0x080011b1
 800119c:	080011b9 	.word	0x080011b9
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80011a0:	20c0      	movs	r0, #192	@ 0xc0
 80011a2:	f7ff ffbf 	bl	8001124 <ST7789_WriteSmallData>
		break;
 80011a6:	e00c      	b.n	80011c2 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80011a8:	20a0      	movs	r0, #160	@ 0xa0
 80011aa:	f7ff ffbb 	bl	8001124 <ST7789_WriteSmallData>
		break;
 80011ae:	e008      	b.n	80011c2 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff ffb7 	bl	8001124 <ST7789_WriteSmallData>
		break;
 80011b6:	e004      	b.n	80011c2 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80011b8:	2060      	movs	r0, #96	@ 0x60
 80011ba:	f7ff ffb3 	bl	8001124 <ST7789_WriteSmallData>
		break;
 80011be:	e000      	b.n	80011c2 <ST7789_SetRotation+0x4e>
	default:
		break;
 80011c0:	bf00      	nop
	}
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop

080011cc <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4604      	mov	r4, r0
 80011d4:	4608      	mov	r0, r1
 80011d6:	4611      	mov	r1, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	4623      	mov	r3, r4
 80011dc:	80fb      	strh	r3, [r7, #6]
 80011de:	4603      	mov	r3, r0
 80011e0:	80bb      	strh	r3, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	807b      	strh	r3, [r7, #2]
 80011e6:	4613      	mov	r3, r2
 80011e8:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f0:	4825      	ldr	r0, [pc, #148]	@ (8001288 <ST7789_SetAddressWindow+0xbc>)
 80011f2:	f004 f9d5 	bl	80055a0 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	82fb      	strh	r3, [r7, #22]
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80011fe:	88bb      	ldrh	r3, [r7, #4]
 8001200:	3323      	adds	r3, #35	@ 0x23
 8001202:	827b      	strh	r3, [r7, #18]
 8001204:	883b      	ldrh	r3, [r7, #0]
 8001206:	3323      	adds	r3, #35	@ 0x23
 8001208:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800120a:	202a      	movs	r0, #42	@ 0x2a
 800120c:	f7ff ff10 	bl	8001030 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001210:	8afb      	ldrh	r3, [r7, #22]
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	b29b      	uxth	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	733b      	strb	r3, [r7, #12]
 800121a:	8afb      	ldrh	r3, [r7, #22]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	737b      	strb	r3, [r7, #13]
 8001220:	8abb      	ldrh	r3, [r7, #20]
 8001222:	0a1b      	lsrs	r3, r3, #8
 8001224:	b29b      	uxth	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	73bb      	strb	r3, [r7, #14]
 800122a:	8abb      	ldrh	r3, [r7, #20]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2104      	movs	r1, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff22 	bl	8001080 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800123c:	202b      	movs	r0, #43	@ 0x2b
 800123e:	f7ff fef7 	bl	8001030 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001242:	8a7b      	ldrh	r3, [r7, #18]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	b29b      	uxth	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	723b      	strb	r3, [r7, #8]
 800124c:	8a7b      	ldrh	r3, [r7, #18]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	727b      	strb	r3, [r7, #9]
 8001252:	8a3b      	ldrh	r3, [r7, #16]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	b29b      	uxth	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	72bb      	strb	r3, [r7, #10]
 800125c:	8a3b      	ldrh	r3, [r7, #16]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2104      	movs	r1, #4
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff09 	bl	8001080 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800126e:	202c      	movs	r0, #44	@ 0x2c
 8001270:	f7ff fede 	bl	8001030 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800127a:	4803      	ldr	r0, [pc, #12]	@ (8001288 <ST7789_SetAddressWindow+0xbc>)
 800127c:	f004 f990 	bl	80055a0 <HAL_GPIO_WritePin>
}
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	58021800 	.word	0x58021800

0800128c <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b08b      	sub	sp, #44	@ 0x2c
 8001290:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8001292:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001296:	2100      	movs	r1, #0
 8001298:	484c      	ldr	r0, [pc, #304]	@ (80013cc <ST7789_Init+0x140>)
 800129a:	f00a ff64 	bl	800c166 <memset>
	#endif
	HAL_Delay(10);
 800129e:	200a      	movs	r0, #10
 80012a0:	f000 ff38 	bl	8002114 <HAL_Delay>
    ST7789_RST_Clr();
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012aa:	4849      	ldr	r0, [pc, #292]	@ (80013d0 <ST7789_Init+0x144>)
 80012ac:	f004 f978 	bl	80055a0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80012b0:	200a      	movs	r0, #10
 80012b2:	f000 ff2f 	bl	8002114 <HAL_Delay>
    ST7789_RST_Set();
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012bc:	4844      	ldr	r0, [pc, #272]	@ (80013d0 <ST7789_Init+0x144>)
 80012be:	f004 f96f 	bl	80055a0 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80012c2:	2014      	movs	r0, #20
 80012c4:	f000 ff26 	bl	8002114 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80012c8:	203a      	movs	r0, #58	@ 0x3a
 80012ca:	f7ff feb1 	bl	8001030 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80012ce:	2055      	movs	r0, #85	@ 0x55
 80012d0:	f7ff ff28 	bl	8001124 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80012d4:	20b2      	movs	r0, #178	@ 0xb2
 80012d6:	f7ff feab 	bl	8001030 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80012da:	4a3e      	ldr	r2, [pc, #248]	@ (80013d4 <ST7789_Init+0x148>)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e4:	6018      	str	r0, [r3, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2105      	movs	r1, #5
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fec5 	bl	8001080 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80012f6:	2003      	movs	r0, #3
 80012f8:	f7ff ff3c 	bl	8001174 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80012fc:	20b7      	movs	r0, #183	@ 0xb7
 80012fe:	f7ff fe97 	bl	8001030 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001302:	2035      	movs	r0, #53	@ 0x35
 8001304:	f7ff ff0e 	bl	8001124 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001308:	20bb      	movs	r0, #187	@ 0xbb
 800130a:	f7ff fe91 	bl	8001030 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800130e:	2019      	movs	r0, #25
 8001310:	f7ff ff08 	bl	8001124 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001314:	20c0      	movs	r0, #192	@ 0xc0
 8001316:	f7ff fe8b 	bl	8001030 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800131a:	202c      	movs	r0, #44	@ 0x2c
 800131c:	f7ff ff02 	bl	8001124 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001320:	20c2      	movs	r0, #194	@ 0xc2
 8001322:	f7ff fe85 	bl	8001030 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001326:	2001      	movs	r0, #1
 8001328:	f7ff fefc 	bl	8001124 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 800132c:	20c3      	movs	r0, #195	@ 0xc3
 800132e:	f7ff fe7f 	bl	8001030 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001332:	2012      	movs	r0, #18
 8001334:	f7ff fef6 	bl	8001124 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001338:	20c4      	movs	r0, #196	@ 0xc4
 800133a:	f7ff fe79 	bl	8001030 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800133e:	2020      	movs	r0, #32
 8001340:	f7ff fef0 	bl	8001124 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001344:	20c6      	movs	r0, #198	@ 0xc6
 8001346:	f7ff fe73 	bl	8001030 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800134a:	200f      	movs	r0, #15
 800134c:	f7ff feea 	bl	8001124 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001350:	20d0      	movs	r0, #208	@ 0xd0
 8001352:	f7ff fe6d 	bl	8001030 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001356:	20a4      	movs	r0, #164	@ 0xa4
 8001358:	f7ff fee4 	bl	8001124 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 800135c:	20a1      	movs	r0, #161	@ 0xa1
 800135e:	f7ff fee1 	bl	8001124 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001362:	20e0      	movs	r0, #224	@ 0xe0
 8001364:	f7ff fe64 	bl	8001030 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <ST7789_Init+0x14c>)
 800136a:	f107 0410 	add.w	r4, r7, #16
 800136e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001370:	c407      	stmia	r4!, {r0, r1, r2}
 8001372:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	210e      	movs	r1, #14
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fe80 	bl	8001080 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001380:	20e1      	movs	r0, #225	@ 0xe1
 8001382:	f7ff fe55 	bl	8001030 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <ST7789_Init+0x150>)
 8001388:	463c      	mov	r4, r7
 800138a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138c:	c407      	stmia	r4!, {r0, r1, r2}
 800138e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001390:	463b      	mov	r3, r7
 8001392:	210e      	movs	r1, #14
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe73 	bl	8001080 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 800139a:	2021      	movs	r0, #33	@ 0x21
 800139c:	f7ff fe48 	bl	8001030 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80013a0:	2011      	movs	r0, #17
 80013a2:	f7ff fe45 	bl	8001030 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80013a6:	2013      	movs	r0, #19
 80013a8:	f7ff fe42 	bl	8001030 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 80013ac:	2029      	movs	r0, #41	@ 0x29
 80013ae:	f7ff fe3f 	bl	8001030 <ST7789_WriteCommand>

	HAL_Delay(50);
 80013b2:	2032      	movs	r0, #50	@ 0x32
 80013b4:	f000 feae 	bl	8002114 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 f811 	bl	80013e0 <ST7789_Fill_Color>
	HAL_Delay(50);
 80013be:	2032      	movs	r0, #50	@ 0x32
 80013c0:	f000 fea8 	bl	8002114 <HAL_Delay>

}
 80013c4:	bf00      	nop
 80013c6:	372c      	adds	r7, #44	@ 0x2c
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	24000558 	.word	0x24000558
 80013d0:	58020c00 	.word	0x58020c00
 80013d4:	0800df00 	.word	0x0800df00
 80013d8:	0800df08 	.word	0x0800df08
 80013dc:	0800df18 	.word	0x0800df18

080013e0 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80013ea:	23a9      	movs	r3, #169	@ 0xa9
 80013ec:	f240 123f 	movw	r2, #319	@ 0x13f
 80013f0:	2100      	movs	r1, #0
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff feea 	bl	80011cc <ST7789_SetAddressWindow>
	ST7789_Select();
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013fe:	4811      	ldr	r0, [pc, #68]	@ (8001444 <ST7789_Fill_Color+0x64>)
 8001400:	f004 f8ce 	bl	80055a0 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	81fb      	strh	r3, [r7, #14]
 8001408:	e00e      	b.n	8001428 <ST7789_Fill_Color+0x48>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001410:	4619      	mov	r1, r3
 8001412:	480d      	ldr	r0, [pc, #52]	@ (8001448 <ST7789_Fill_Color+0x68>)
 8001414:	f00a fea7 	bl	800c166 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001418:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 800141c:	480a      	ldr	r0, [pc, #40]	@ (8001448 <ST7789_Fill_Color+0x68>)
 800141e:	f7ff fe2f 	bl	8001080 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	3301      	adds	r3, #1
 8001426:	81fb      	strh	r3, [r7, #14]
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	2b21      	cmp	r3, #33	@ 0x21
 800142c:	d9ed      	bls.n	800140a <ST7789_Fill_Color+0x2a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001434:	4803      	ldr	r0, [pc, #12]	@ (8001444 <ST7789_Fill_Color+0x64>)
 8001436:	f004 f8b3 	bl	80055a0 <HAL_GPIO_WritePin>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	58021800 	.word	0x58021800
 8001448:	24000558 	.word	0x24000558

0800144c <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800144c:	b082      	sub	sp, #8
 800144e:	b580      	push	{r7, lr}
 8001450:	b088      	sub	sp, #32
 8001452:	af00      	add	r7, sp, #0
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
 800145a:	460b      	mov	r3, r1
 800145c:	80bb      	strh	r3, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001468:	4837      	ldr	r0, [pc, #220]	@ (8001548 <ST7789_WriteChar+0xfc>)
 800146a:	f004 f899 	bl	80055a0 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800146e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001472:	461a      	mov	r2, r3
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	3b01      	subs	r3, #1
 800147c:	b29a      	uxth	r2, r3
 800147e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001482:	4619      	mov	r1, r3
 8001484:	88bb      	ldrh	r3, [r7, #4]
 8001486:	440b      	add	r3, r1
 8001488:	b29b      	uxth	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	88b9      	ldrh	r1, [r7, #4]
 8001490:	88f8      	ldrh	r0, [r7, #6]
 8001492:	f7ff fe9b 	bl	80011cc <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
 800149a:	e041      	b.n	8001520 <ST7789_WriteChar+0xd4>
		b = font.data[(ch - 32) * font.height + i];
 800149c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	3b20      	subs	r3, #32
 80014a2:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	440b      	add	r3, r1
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	e027      	b.n	800150e <ST7789_WriteChar+0xc2>
			if ((b << j) & 0x8000) {
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00e      	beq.n	80014ec <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80014ce:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	743b      	strb	r3, [r7, #16]
 80014d8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	2102      	movs	r1, #2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fdcb 	bl	8001080 <ST7789_WriteData>
 80014ea:	e00d      	b.n	8001508 <ST7789_WriteChar+0xbc>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80014ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	733b      	strb	r3, [r7, #12]
 80014f6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2102      	movs	r1, #2
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fdbc 	bl	8001080 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	3301      	adds	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001512:	461a      	mov	r2, r3
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	4293      	cmp	r3, r2
 8001518:	d3d1      	bcc.n	80014be <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3301      	adds	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001524:	461a      	mov	r2, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4293      	cmp	r3, r2
 800152a:	d3b7      	bcc.n	800149c <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001532:	4805      	ldr	r0, [pc, #20]	@ (8001548 <ST7789_WriteChar+0xfc>)
 8001534:	f004 f834 	bl	80055a0 <HAL_GPIO_WritePin>
}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001542:	b002      	add	sp, #8
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	58021800 	.word	0x58021800

0800154c <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800154c:	b082      	sub	sp, #8
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af04      	add	r7, sp, #16
 8001554:	603a      	str	r2, [r7, #0]
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	4603      	mov	r3, r0
 800155a:	80fb      	strh	r3, [r7, #6]
 800155c:	460b      	mov	r3, r1
 800155e:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001566:	4823      	ldr	r0, [pc, #140]	@ (80015f4 <ST7789_WriteString+0xa8>)
 8001568:	f004 f81a 	bl	80055a0 <HAL_GPIO_WritePin>
	while (*str) {
 800156c:	e02e      	b.n	80015cc <ST7789_WriteString+0x80>
		if (x + font.width >= ST7789_WIDTH) {
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	7d3a      	ldrb	r2, [r7, #20]
 8001572:	4413      	add	r3, r2
 8001574:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001578:	db13      	blt.n	80015a2 <ST7789_WriteString+0x56>
			x = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800157e:	7d7b      	ldrb	r3, [r7, #21]
 8001580:	461a      	mov	r2, r3
 8001582:	88bb      	ldrh	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	7d7a      	ldrb	r2, [r7, #21]
 800158c:	4413      	add	r3, r2
 800158e:	2ba9      	cmp	r3, #169	@ 0xa9
 8001590:	dc21      	bgt.n	80015d6 <ST7789_WriteString+0x8a>
				break;
			}

			if (*str == ' ') {
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b20      	cmp	r3, #32
 8001598:	d103      	bne.n	80015a2 <ST7789_WriteString+0x56>
				// skip spaces in the beginning of the new line
				str++;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	603b      	str	r3, [r7, #0]
				continue;
 80015a0:	e014      	b.n	80015cc <ST7789_WriteString+0x80>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	781a      	ldrb	r2, [r3, #0]
 80015a6:	88b9      	ldrh	r1, [r7, #4]
 80015a8:	88f8      	ldrh	r0, [r7, #6]
 80015aa:	8c3b      	ldrh	r3, [r7, #32]
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	8bbb      	ldrh	r3, [r7, #28]
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f7ff ff48 	bl	800144c <ST7789_WriteChar>
		x += font.width;
 80015bc:	7d3b      	ldrb	r3, [r7, #20]
 80015be:	461a      	mov	r2, r3
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	4413      	add	r3, r2
 80015c4:	80fb      	strh	r3, [r7, #6]
		str++;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	603b      	str	r3, [r7, #0]
	while (*str) {
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1cc      	bne.n	800156e <ST7789_WriteString+0x22>
 80015d4:	e000      	b.n	80015d8 <ST7789_WriteString+0x8c>
				break;
 80015d6:	bf00      	nop
	}
	ST7789_UnSelect();
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <ST7789_WriteString+0xa8>)
 80015e0:	f003 ffde 	bl	80055a0 <HAL_GPIO_WritePin>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015ee:	b002      	add	sp, #8
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	58021800 	.word	0x58021800

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_MspInit+0x30>)
 8001600:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001604:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <HAL_MspInit+0x30>)
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_MspInit+0x30>)
 8001610:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	58024400 	.word	0x58024400

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 fd27 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <DMA1_Stream0_IRQHandler+0x10>)
 8001692:	f002 fa47 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	24001488 	.word	0x24001488

080016a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <DMA1_Stream1_IRQHandler+0x10>)
 80016a6:	f002 fa3d 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	24001500 	.word	0x24001500

080016b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <DMA1_Stream2_IRQHandler+0x10>)
 80016ba:	f002 fa33 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	24001398 	.word	0x24001398

080016c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <DMA1_Stream3_IRQHandler+0x10>)
 80016ce:	f002 fa29 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	24001410 	.word	0x24001410

080016dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <DMA1_Stream5_IRQHandler+0x10>)
 80016e2:	f002 fa1f 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	240004e0 	.word	0x240004e0

080016f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <SPI1_IRQHandler+0x10>)
 80016f6:	f007 faed 	bl	8008cd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000458 	.word	0x24000458

08001704 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <UART4_IRQHandler+0x10>)
 800170a:	f007 ffd9 	bl	80096c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	240011dc 	.word	0x240011dc

08001718 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <UART5_IRQHandler+0x10>)
 800171e:	f007 ffcf 	bl	80096c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24001270 	.word	0x24001270

0800172c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return 1;
 8001730:	2301      	movs	r3, #1
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_kill>:

int _kill(int pid, int sig)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001746:	f00a fd61 	bl	800c20c <__errno>
 800174a:	4603      	mov	r3, r0
 800174c:	2216      	movs	r2, #22
 800174e:	601a      	str	r2, [r3, #0]
  return -1;
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_exit>:

void _exit (int status)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ffe7 	bl	800173c <_kill>
  while (1) {}    /* Make sure we hang here */
 800176e:	bf00      	nop
 8001770:	e7fd      	b.n	800176e <_exit+0x12>

08001772 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e00a      	b.n	800179a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001784:	f3af 8000 	nop.w
 8001788:	4601      	mov	r1, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	60ba      	str	r2, [r7, #8]
 8001790:	b2ca      	uxtb	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbf0      	blt.n	8001784 <_read+0x12>
  }

  return len;
 80017a2:	687b      	ldr	r3, [r7, #4]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e009      	b.n	80017d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	60ba      	str	r2, [r7, #8]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f96e 	bl	8000aa8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	dbf1      	blt.n	80017be <_write+0x12>
  }
  return len;
 80017da:	687b      	ldr	r3, [r7, #4]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_close>:

int _close(int file)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800180c:	605a      	str	r2, [r3, #4]
  return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_isatty>:

int _isatty(int file)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001824:	2301      	movs	r3, #1
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f00a fcc6 	bl	800c20c <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	24100000 	.word	0x24100000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	240011d8 	.word	0x240011d8
 80018b4:	240016c8 	.word	0x240016c8

080018b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018bc:	4b3e      	ldr	r3, [pc, #248]	@ (80019b8 <SystemInit+0x100>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c2:	4a3d      	ldr	r2, [pc, #244]	@ (80019b8 <SystemInit+0x100>)
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018cc:	4b3b      	ldr	r3, [pc, #236]	@ (80019bc <SystemInit+0x104>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d807      	bhi.n	80018e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018d8:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <SystemInit+0x104>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 030f 	bic.w	r3, r3, #15
 80018e0:	4a36      	ldr	r2, [pc, #216]	@ (80019bc <SystemInit+0x104>)
 80018e2:	f043 0303 	orr.w	r3, r3, #3
 80018e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018e8:	4b35      	ldr	r3, [pc, #212]	@ (80019c0 <SystemInit+0x108>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a34      	ldr	r2, [pc, #208]	@ (80019c0 <SystemInit+0x108>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018f4:	4b32      	ldr	r3, [pc, #200]	@ (80019c0 <SystemInit+0x108>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018fa:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <SystemInit+0x108>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4930      	ldr	r1, [pc, #192]	@ (80019c0 <SystemInit+0x108>)
 8001900:	4b30      	ldr	r3, [pc, #192]	@ (80019c4 <SystemInit+0x10c>)
 8001902:	4013      	ands	r3, r2
 8001904:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <SystemInit+0x104>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001912:	4b2a      	ldr	r3, [pc, #168]	@ (80019bc <SystemInit+0x104>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 030f 	bic.w	r3, r3, #15
 800191a:	4a28      	ldr	r2, [pc, #160]	@ (80019bc <SystemInit+0x104>)
 800191c:	f043 0303 	orr.w	r3, r3, #3
 8001920:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001922:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <SystemInit+0x108>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <SystemInit+0x108>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800192e:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <SystemInit+0x108>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001934:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <SystemInit+0x108>)
 8001936:	4a24      	ldr	r2, [pc, #144]	@ (80019c8 <SystemInit+0x110>)
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800193a:	4b21      	ldr	r3, [pc, #132]	@ (80019c0 <SystemInit+0x108>)
 800193c:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <SystemInit+0x114>)
 800193e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001940:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <SystemInit+0x108>)
 8001942:	4a23      	ldr	r2, [pc, #140]	@ (80019d0 <SystemInit+0x118>)
 8001944:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001946:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <SystemInit+0x108>)
 8001948:	2200      	movs	r2, #0
 800194a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800194c:	4b1c      	ldr	r3, [pc, #112]	@ (80019c0 <SystemInit+0x108>)
 800194e:	4a20      	ldr	r2, [pc, #128]	@ (80019d0 <SystemInit+0x118>)
 8001950:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001952:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <SystemInit+0x108>)
 8001954:	2200      	movs	r2, #0
 8001956:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001958:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <SystemInit+0x108>)
 800195a:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <SystemInit+0x118>)
 800195c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800195e:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <SystemInit+0x108>)
 8001960:	2200      	movs	r2, #0
 8001962:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <SystemInit+0x108>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a15      	ldr	r2, [pc, #84]	@ (80019c0 <SystemInit+0x108>)
 800196a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800196e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <SystemInit+0x108>)
 8001972:	2200      	movs	r2, #0
 8001974:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001976:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <SystemInit+0x108>)
 8001978:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800197c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d113      	bne.n	80019ac <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001984:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <SystemInit+0x108>)
 8001986:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800198a:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <SystemInit+0x108>)
 800198c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001990:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <SystemInit+0x11c>)
 8001996:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800199a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <SystemInit+0x108>)
 800199e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80019a2:	4a07      	ldr	r2, [pc, #28]	@ (80019c0 <SystemInit+0x108>)
 80019a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019a8:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00
 80019bc:	52002000 	.word	0x52002000
 80019c0:	58024400 	.word	0x58024400
 80019c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80019c8:	02020200 	.word	0x02020200
 80019cc:	01ff0000 	.word	0x01ff0000
 80019d0:	01010280 	.word	0x01010280
 80019d4:	52004000 	.word	0x52004000

080019d8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <ExitRun0Mode+0x2c>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a08      	ldr	r2, [pc, #32]	@ (8001a04 <ExitRun0Mode+0x2c>)
 80019e2:	f023 0302 	bic.w	r3, r3, #2
 80019e6:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80019e8:	bf00      	nop
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <ExitRun0Mode+0x2c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f9      	beq.n	80019ea <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	58024800 	.word	0x58024800

08001a08 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a0c:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a0e:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <MX_UART4_Init+0x94>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001a12:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a44:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a50:	4811      	ldr	r0, [pc, #68]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a52:	f007 fca0 	bl	8009396 <HAL_UART_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001a5c:	f7ff f9e8 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a60:	2100      	movs	r1, #0
 8001a62:	480d      	ldr	r0, [pc, #52]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a64:	f009 fd25 	bl	800b4b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a6e:	f7ff f9df 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a72:	2100      	movs	r1, #0
 8001a74:	4808      	ldr	r0, [pc, #32]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a76:	f009 fd5a 	bl	800b52e <HAL_UARTEx_SetRxFifoThreshold>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a80:	f7ff f9d6 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	@ (8001a98 <MX_UART4_Init+0x90>)
 8001a86:	f009 fcdb 	bl	800b440 <HAL_UARTEx_DisableFifoMode>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a90:	f7ff f9ce 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	240011dc 	.word	0x240011dc
 8001a9c:	40004c00 	.word	0x40004c00

08001aa0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001aa6:	4a23      	ldr	r2, [pc, #140]	@ (8001b34 <MX_UART5_Init+0x94>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001aac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ab0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ae8:	4811      	ldr	r0, [pc, #68]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001aea:	f007 fc54 	bl	8009396 <HAL_UART_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001af4:	f7ff f99c 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af8:	2100      	movs	r1, #0
 8001afa:	480d      	ldr	r0, [pc, #52]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001afc:	f009 fcd9 	bl	800b4b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001b06:	f7ff f993 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4808      	ldr	r0, [pc, #32]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001b0e:	f009 fd0e 	bl	800b52e <HAL_UARTEx_SetRxFifoThreshold>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001b18:	f7ff f98a 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	@ (8001b30 <MX_UART5_Init+0x90>)
 8001b1e:	f009 fc8f 	bl	800b440 <HAL_UARTEx_DisableFifoMode>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001b28:	f7ff f982 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	24001270 	.word	0x24001270
 8001b34:	40005000 	.word	0x40005000

08001b38 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b3c:	4b22      	ldr	r3, [pc, #136]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b3e:	4a23      	ldr	r2, [pc, #140]	@ (8001bcc <MX_USART3_UART_Init+0x94>)
 8001b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b42:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b80:	4811      	ldr	r0, [pc, #68]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b82:	f007 fc08 	bl	8009396 <HAL_UART_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001b8c:	f7ff f950 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b90:	2100      	movs	r1, #0
 8001b92:	480d      	ldr	r0, [pc, #52]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001b94:	f009 fc8d 	bl	800b4b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001b9e:	f7ff f947 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4808      	ldr	r0, [pc, #32]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001ba6:	f009 fcc2 	bl	800b52e <HAL_UARTEx_SetRxFifoThreshold>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001bb0:	f7ff f93e 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001bb4:	4804      	ldr	r0, [pc, #16]	@ (8001bc8 <MX_USART3_UART_Init+0x90>)
 8001bb6:	f009 fc43 	bl	800b440 <HAL_UARTEx_DisableFifoMode>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001bc0:	f7ff f936 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	24001304 	.word	0x24001304
 8001bcc:	40004800 	.word	0x40004800

08001bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b0be      	sub	sp, #248	@ 0xf8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be8:	f107 0320 	add.w	r3, r7, #32
 8001bec:	22c0      	movs	r2, #192	@ 0xc0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00a fab8 	bl	800c166 <memset>
  if(uartHandle->Instance==UART4)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4ab0      	ldr	r2, [pc, #704]	@ (8001ebc <HAL_UART_MspInit+0x2ec>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	f040 80ac 	bne.w	8001d5a <HAL_UART_MspInit+0x18a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c02:	f04f 0202 	mov.w	r2, #2
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 fe27 	bl	800686c <HAL_RCCEx_PeriphCLKConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001c24:	f7ff f904 	bl	8000e30 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c28:	4ba5      	ldr	r3, [pc, #660]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001c2a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c2e:	4aa4      	ldr	r2, [pc, #656]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001c30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c34:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001c38:	4ba1      	ldr	r3, [pc, #644]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001c3a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	4b9e      	ldr	r3, [pc, #632]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c4c:	4a9c      	ldr	r2, [pc, #624]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c56:	4b9a      	ldr	r3, [pc, #616]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001c58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c64:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	488e      	ldr	r0, [pc, #568]	@ (8001ec4 <HAL_UART_MspInit+0x2f4>)
 8001c8c:	f003 fad8 	bl	8005240 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001c90:	4b8d      	ldr	r3, [pc, #564]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001c92:	4a8e      	ldr	r2, [pc, #568]	@ (8001ecc <HAL_UART_MspInit+0x2fc>)
 8001c94:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001c96:	4b8c      	ldr	r3, [pc, #560]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001c98:	223f      	movs	r2, #63	@ 0x3f
 8001c9a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca2:	4b89      	ldr	r3, [pc, #548]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca8:	4b87      	ldr	r3, [pc, #540]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001caa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cae:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb0:	4b85      	ldr	r3, [pc, #532]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb6:	4b84      	ldr	r3, [pc, #528]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001cbc:	4b82      	ldr	r3, [pc, #520]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001cbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cc4:	4b80      	ldr	r3, [pc, #512]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cca:	4b7f      	ldr	r3, [pc, #508]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001cd0:	487d      	ldr	r0, [pc, #500]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001cd2:	f000 fbcb 	bl	800246c <HAL_DMA_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001cdc:	f7ff f8a8 	bl	8000e30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a79      	ldr	r2, [pc, #484]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001ce4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001ce8:	4a77      	ldr	r2, [pc, #476]	@ (8001ec8 <HAL_UART_MspInit+0x2f8>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 8001cee:	4b78      	ldr	r3, [pc, #480]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001cf0:	4a78      	ldr	r2, [pc, #480]	@ (8001ed4 <HAL_UART_MspInit+0x304>)
 8001cf2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001cf4:	4b76      	ldr	r3, [pc, #472]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001cf6:	2240      	movs	r2, #64	@ 0x40
 8001cf8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cfa:	4b75      	ldr	r3, [pc, #468]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001cfc:	2240      	movs	r2, #64	@ 0x40
 8001cfe:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d00:	4b73      	ldr	r3, [pc, #460]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d06:	4b72      	ldr	r3, [pc, #456]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001d08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d0c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0e:	4b70      	ldr	r3, [pc, #448]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d14:	4b6e      	ldr	r3, [pc, #440]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d20:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d26:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001d2c:	4868      	ldr	r0, [pc, #416]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001d2e:	f000 fb9d 	bl	800246c <HAL_DMA_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8001d38:	f7ff f87a 	bl	8000e30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a64      	ldr	r2, [pc, #400]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001d40:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d42:	4a63      	ldr	r2, [pc, #396]	@ (8001ed0 <HAL_UART_MspInit+0x300>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2034      	movs	r0, #52	@ 0x34
 8001d4e:	f000 fae0 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d52:	2034      	movs	r0, #52	@ 0x34
 8001d54:	f000 faf7 	bl	8002346 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d58:	e114      	b.n	8001f84 <HAL_UART_MspInit+0x3b4>
  else if(uartHandle->Instance==UART5)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ed8 <HAL_UART_MspInit+0x308>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	f040 80c3 	bne.w	8001eec <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001d66:	f04f 0202 	mov.w	r2, #2
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 fd75 	bl	800686c <HAL_RCCEx_PeriphCLKConfig>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001d88:	f7ff f852 	bl	8000e30 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d8c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001d8e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d92:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001d94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d98:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001d9c:	4b48      	ldr	r3, [pc, #288]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001d9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b45      	ldr	r3, [pc, #276]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001dac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001db0:	4a43      	ldr	r2, [pc, #268]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001dba:	4b41      	ldr	r3, [pc, #260]	@ (8001ec0 <HAL_UART_MspInit+0x2f0>)
 8001dbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001dc8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001dcc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001de2:	230e      	movs	r3, #14
 8001de4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4835      	ldr	r0, [pc, #212]	@ (8001ec4 <HAL_UART_MspInit+0x2f4>)
 8001df0:	f003 fa26 	bl	8005240 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001df4:	4b39      	ldr	r3, [pc, #228]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001df6:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee0 <HAL_UART_MspInit+0x310>)
 8001df8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001dfa:	4b38      	ldr	r3, [pc, #224]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001dfc:	2241      	movs	r2, #65	@ 0x41
 8001dfe:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e00:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e06:	4b35      	ldr	r3, [pc, #212]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e0c:	4b33      	ldr	r3, [pc, #204]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e12:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e14:	4b31      	ldr	r3, [pc, #196]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e1a:	4b30      	ldr	r3, [pc, #192]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001e20:	4b2e      	ldr	r3, [pc, #184]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e26:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001e32:	482a      	ldr	r0, [pc, #168]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e34:	f000 fb1a 	bl	800246c <HAL_DMA_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001e3e:	f7fe fff7 	bl	8000e30 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a25      	ldr	r2, [pc, #148]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001e4a:	4a24      	ldr	r2, [pc, #144]	@ (8001edc <HAL_UART_MspInit+0x30c>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8001e50:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e52:	4a25      	ldr	r2, [pc, #148]	@ (8001ee8 <HAL_UART_MspInit+0x318>)
 8001e54:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8001e56:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e58:	2242      	movs	r2, #66	@ 0x42
 8001e5a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e5e:	2240      	movs	r2, #64	@ 0x40
 8001e60:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e6e:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e88:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001e8e:	4815      	ldr	r0, [pc, #84]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001e90:	f000 faec 	bl	800246c <HAL_DMA_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8001e9a:	f7fe ffc9 	bl	8000e30 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001ea2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee4 <HAL_UART_MspInit+0x314>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2035      	movs	r0, #53	@ 0x35
 8001eb0:	f000 fa2f 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001eb4:	2035      	movs	r0, #53	@ 0x35
 8001eb6:	f000 fa46 	bl	8002346 <HAL_NVIC_EnableIRQ>
}
 8001eba:	e063      	b.n	8001f84 <HAL_UART_MspInit+0x3b4>
 8001ebc:	40004c00 	.word	0x40004c00
 8001ec0:	58024400 	.word	0x58024400
 8001ec4:	58020400 	.word	0x58020400
 8001ec8:	24001398 	.word	0x24001398
 8001ecc:	40020040 	.word	0x40020040
 8001ed0:	24001410 	.word	0x24001410
 8001ed4:	40020058 	.word	0x40020058
 8001ed8:	40005000 	.word	0x40005000
 8001edc:	24001488 	.word	0x24001488
 8001ee0:	40020010 	.word	0x40020010
 8001ee4:	24001500 	.word	0x24001500
 8001ee8:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <HAL_UART_MspInit+0x3bc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d146      	bne.n	8001f84 <HAL_UART_MspInit+0x3b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ef6:	f04f 0202 	mov.w	r2, #2
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f08:	f107 0320 	add.w	r3, r7, #32
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fcad 	bl	800686c <HAL_RCCEx_PeriphCLKConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_UART_MspInit+0x34c>
      Error_Handler();
 8001f18:	f7fe ff8a 	bl	8000e30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <HAL_UART_MspInit+0x3c0>)
 8001f1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001f22:	4a1b      	ldr	r2, [pc, #108]	@ (8001f90 <HAL_UART_MspInit+0x3c0>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f28:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001f2c:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <HAL_UART_MspInit+0x3c0>)
 8001f2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_UART_MspInit+0x3c0>)
 8001f3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f40:	4a13      	ldr	r2, [pc, #76]	@ (8001f90 <HAL_UART_MspInit+0x3c0>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_UART_MspInit+0x3c0>)
 8001f4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001f58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f72:	2307      	movs	r3, #7
 8001f74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f78:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <HAL_UART_MspInit+0x3c4>)
 8001f80:	f003 f95e 	bl	8005240 <HAL_GPIO_Init>
}
 8001f84:	bf00      	nop
 8001f86:	37f8      	adds	r7, #248	@ 0xf8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40004800 	.word	0x40004800
 8001f90:	58024400 	.word	0x58024400
 8001f94:	58020c00 	.word	0x58020c00

08001f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f98:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001fd4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001f9c:	f7ff fd1c 	bl	80019d8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa0:	f7ff fc8a 	bl	80018b8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	@ (8001fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fca:	f00a f925 	bl	800c218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fce:	f7fe fd7d 	bl	8000acc <main>
  bx  lr
 8001fd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001fd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fdc:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001fe0:	0800f0bc 	.word	0x0800f0bc
  ldr r2, =_sbss
 8001fe4:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8001fe8:	240016c8 	.word	0x240016c8

08001fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC_IRQHandler>
	...

08001ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	f000 f980 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ffc:	f004 fa60 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_Init+0x68>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	4913      	ldr	r1, [pc, #76]	@ (800205c <HAL_Init+0x6c>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
 8002018:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800201a:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <HAL_Init+0x68>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	4a0e      	ldr	r2, [pc, #56]	@ (800205c <HAL_Init+0x6c>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	4a0b      	ldr	r2, [pc, #44]	@ (8002060 <HAL_Init+0x70>)
 8002032:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002034:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <HAL_Init+0x74>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203a:	2000      	movs	r0, #0
 800203c:	f000 f814 	bl	8002068 <HAL_InitTick>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e002      	b.n	8002050 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800204a:	f7ff fad5 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	58024400 	.word	0x58024400
 800205c:	0800ecf4 	.word	0x0800ecf4
 8002060:	24000010 	.word	0x24000010
 8002064:	2400000c 	.word	0x2400000c

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_InitTick+0x60>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e021      	b.n	80020c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800207c:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <HAL_InitTick+0x64>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <HAL_InitTick+0x60>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f965 	bl	8002362 <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 f92f 	bl	8002312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <HAL_InitTick+0x68>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	24000018 	.word	0x24000018
 80020cc:	2400000c 	.word	0x2400000c
 80020d0:	24000014 	.word	0x24000014

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_IncTick+0x20>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_IncTick+0x24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	@ (80020f8 <HAL_IncTick+0x24>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	24000018 	.word	0x24000018
 80020f8:	24001578 	.word	0x24001578

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b03      	ldr	r3, [pc, #12]	@ (8002110 <HAL_GetTick+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	24001578 	.word	0x24001578

08002114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff ffee 	bl	80020fc <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d005      	beq.n	800213a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212e:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <HAL_Delay+0x44>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213a:	bf00      	nop
 800213c:	f7ff ffde 	bl	80020fc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d8f7      	bhi.n	800213c <HAL_Delay+0x28>
  {
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	24000018 	.word	0x24000018

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <__NVIC_SetPriorityGrouping+0x40>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	4313      	orrs	r3, r2
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	@ (800219c <__NVIC_SetPriorityGrouping+0x40>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00
 80021a0:	05fa0000 	.word	0x05fa0000

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4907      	ldr	r1, [pc, #28]	@ (80021f8 <__NVIC_EnableIRQ+0x38>)
 80021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db0a      	blt.n	8002226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	@ (8002248 <__NVIC_SetPriority+0x4c>)
 8002216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	440b      	add	r3, r1
 8002220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002224:	e00a      	b.n	800223c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4908      	ldr	r1, [pc, #32]	@ (800224c <__NVIC_SetPriority+0x50>)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	3b04      	subs	r3, #4
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	440b      	add	r3, r1
 800223a:	761a      	strb	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	@ 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f1c3 0307 	rsb	r3, r3, #7
 800226a:	2b04      	cmp	r3, #4
 800226c:	bf28      	it	cs
 800226e:	2304      	movcs	r3, #4
 8002270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3304      	adds	r3, #4
 8002276:	2b06      	cmp	r3, #6
 8002278:	d902      	bls.n	8002280 <NVIC_EncodePriority+0x30>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b03      	subs	r3, #3
 800227e:	e000      	b.n	8002282 <NVIC_EncodePriority+0x32>
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	4313      	orrs	r3, r2
         );
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	@ 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022c8:	d301      	bcc.n	80022ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00f      	b.n	80022ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ce:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <SysTick_Config+0x40>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d6:	210f      	movs	r1, #15
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f7ff ff8e 	bl	80021fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <SysTick_Config+0x40>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <SysTick_Config+0x40>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff29 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff40 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff90 	bl	8002250 <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff5f 	bl	80021fc <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff33 	bl	80021c0 <__NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffa4 	bl	80022b8 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002380:	f3bf 8f5f 	dmb	sy
}
 8002384:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002386:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <HAL_MPU_Disable+0x28>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	4a06      	ldr	r2, [pc, #24]	@ (80023a4 <HAL_MPU_Disable+0x28>)
 800238c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002390:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002392:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_MPU_Disable+0x2c>)
 8002394:	2200      	movs	r2, #0
 8002396:	605a      	str	r2, [r3, #4]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000ed00 	.word	0xe000ed00
 80023a8:	e000ed90 	.word	0xe000ed90

080023ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80023b4:	4a0b      	ldr	r2, [pc, #44]	@ (80023e4 <HAL_MPU_Enable+0x38>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_MPU_Enable+0x3c>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	4a09      	ldr	r2, [pc, #36]	@ (80023e8 <HAL_MPU_Enable+0x3c>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80023ca:	f3bf 8f4f 	dsb	sy
}
 80023ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023d0:	f3bf 8f6f 	isb	sy
}
 80023d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed90 	.word	0xe000ed90
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	785a      	ldrb	r2, [r3, #1]
 80023f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_MPU_ConfigRegion+0x7c>)
 80023fa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80023fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <HAL_MPU_ConfigRegion+0x7c>)
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_MPU_ConfigRegion+0x7c>)
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002408:	4a17      	ldr	r2, [pc, #92]	@ (8002468 <HAL_MPU_ConfigRegion+0x7c>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7b1b      	ldrb	r3, [r3, #12]
 8002414:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7adb      	ldrb	r3, [r3, #11]
 800241a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800241c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7a9b      	ldrb	r3, [r3, #10]
 8002422:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002424:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7b5b      	ldrb	r3, [r3, #13]
 800242a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800242c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7b9b      	ldrb	r3, [r3, #14]
 8002432:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002434:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7bdb      	ldrb	r3, [r3, #15]
 800243a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800243c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7a5b      	ldrb	r3, [r3, #9]
 8002442:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002444:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7a1b      	ldrb	r3, [r3, #8]
 800244a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800244c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002454:	4a04      	ldr	r2, [pc, #16]	@ (8002468 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002456:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002458:	6113      	str	r3, [r2, #16]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed90 	.word	0xe000ed90

0800246c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff fe42 	bl	80020fc <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e37d      	b.n	8002b80 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a66      	ldr	r2, [pc, #408]	@ (8002624 <HAL_DMA_Init+0x1b8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d04a      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a65      	ldr	r2, [pc, #404]	@ (8002628 <HAL_DMA_Init+0x1bc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d045      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a63      	ldr	r2, [pc, #396]	@ (800262c <HAL_DMA_Init+0x1c0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d040      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a62      	ldr	r2, [pc, #392]	@ (8002630 <HAL_DMA_Init+0x1c4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d03b      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a60      	ldr	r2, [pc, #384]	@ (8002634 <HAL_DMA_Init+0x1c8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d036      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002638 <HAL_DMA_Init+0x1cc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d031      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a5d      	ldr	r2, [pc, #372]	@ (800263c <HAL_DMA_Init+0x1d0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d02c      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002640 <HAL_DMA_Init+0x1d4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d027      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002644 <HAL_DMA_Init+0x1d8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d022      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a59      	ldr	r2, [pc, #356]	@ (8002648 <HAL_DMA_Init+0x1dc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d01d      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a57      	ldr	r2, [pc, #348]	@ (800264c <HAL_DMA_Init+0x1e0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d018      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a56      	ldr	r2, [pc, #344]	@ (8002650 <HAL_DMA_Init+0x1e4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a54      	ldr	r2, [pc, #336]	@ (8002654 <HAL_DMA_Init+0x1e8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00e      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a53      	ldr	r2, [pc, #332]	@ (8002658 <HAL_DMA_Init+0x1ec>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a51      	ldr	r2, [pc, #324]	@ (800265c <HAL_DMA_Init+0x1f0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_DMA_Init+0xb8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a50      	ldr	r2, [pc, #320]	@ (8002660 <HAL_DMA_Init+0x1f4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_DMA_Init+0xbc>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_DMA_Init+0xbe>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 813c 	beq.w	80027a8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a37      	ldr	r2, [pc, #220]	@ (8002624 <HAL_DMA_Init+0x1b8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d04a      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a36      	ldr	r2, [pc, #216]	@ (8002628 <HAL_DMA_Init+0x1bc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d045      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a34      	ldr	r2, [pc, #208]	@ (800262c <HAL_DMA_Init+0x1c0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d040      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a33      	ldr	r2, [pc, #204]	@ (8002630 <HAL_DMA_Init+0x1c4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d03b      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a31      	ldr	r2, [pc, #196]	@ (8002634 <HAL_DMA_Init+0x1c8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d036      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a30      	ldr	r2, [pc, #192]	@ (8002638 <HAL_DMA_Init+0x1cc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d031      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a2e      	ldr	r2, [pc, #184]	@ (800263c <HAL_DMA_Init+0x1d0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d02c      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2d      	ldr	r2, [pc, #180]	@ (8002640 <HAL_DMA_Init+0x1d4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d027      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a2b      	ldr	r2, [pc, #172]	@ (8002644 <HAL_DMA_Init+0x1d8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d022      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a2a      	ldr	r2, [pc, #168]	@ (8002648 <HAL_DMA_Init+0x1dc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d01d      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a28      	ldr	r2, [pc, #160]	@ (800264c <HAL_DMA_Init+0x1e0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d018      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a27      	ldr	r2, [pc, #156]	@ (8002650 <HAL_DMA_Init+0x1e4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a25      	ldr	r2, [pc, #148]	@ (8002654 <HAL_DMA_Init+0x1e8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00e      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a24      	ldr	r2, [pc, #144]	@ (8002658 <HAL_DMA_Init+0x1ec>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d009      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a22      	ldr	r2, [pc, #136]	@ (800265c <HAL_DMA_Init+0x1f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_DMA_Init+0x174>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a21      	ldr	r2, [pc, #132]	@ (8002660 <HAL_DMA_Init+0x1f4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d108      	bne.n	80025f2 <HAL_DMA_Init+0x186>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e007      	b.n	8002602 <HAL_DMA_Init+0x196>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002602:	e02f      	b.n	8002664 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002604:	f7ff fd7a 	bl	80020fc <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b05      	cmp	r3, #5
 8002610:	d928      	bls.n	8002664 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2203      	movs	r2, #3
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e2ad      	b.n	8002b80 <HAL_DMA_Init+0x714>
 8002624:	40020010 	.word	0x40020010
 8002628:	40020028 	.word	0x40020028
 800262c:	40020040 	.word	0x40020040
 8002630:	40020058 	.word	0x40020058
 8002634:	40020070 	.word	0x40020070
 8002638:	40020088 	.word	0x40020088
 800263c:	400200a0 	.word	0x400200a0
 8002640:	400200b8 	.word	0x400200b8
 8002644:	40020410 	.word	0x40020410
 8002648:	40020428 	.word	0x40020428
 800264c:	40020440 	.word	0x40020440
 8002650:	40020458 	.word	0x40020458
 8002654:	40020470 	.word	0x40020470
 8002658:	40020488 	.word	0x40020488
 800265c:	400204a0 	.word	0x400204a0
 8002660:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1c8      	bne.n	8002604 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4b73      	ldr	r3, [pc, #460]	@ (800284c <HAL_DMA_Init+0x3e0>)
 800267e:	4013      	ands	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800268a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002696:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d107      	bne.n	80026c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	4313      	orrs	r3, r2
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b28      	cmp	r3, #40	@ 0x28
 80026ce:	d903      	bls.n	80026d8 <HAL_DMA_Init+0x26c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80026d6:	d91f      	bls.n	8002718 <HAL_DMA_Init+0x2ac>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80026de:	d903      	bls.n	80026e8 <HAL_DMA_Init+0x27c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b42      	cmp	r3, #66	@ 0x42
 80026e6:	d917      	bls.n	8002718 <HAL_DMA_Init+0x2ac>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b46      	cmp	r3, #70	@ 0x46
 80026ee:	d903      	bls.n	80026f8 <HAL_DMA_Init+0x28c>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b48      	cmp	r3, #72	@ 0x48
 80026f6:	d90f      	bls.n	8002718 <HAL_DMA_Init+0x2ac>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b4e      	cmp	r3, #78	@ 0x4e
 80026fe:	d903      	bls.n	8002708 <HAL_DMA_Init+0x29c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b52      	cmp	r3, #82	@ 0x52
 8002706:	d907      	bls.n	8002718 <HAL_DMA_Init+0x2ac>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b73      	cmp	r3, #115	@ 0x73
 800270e:	d905      	bls.n	800271c <HAL_DMA_Init+0x2b0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b77      	cmp	r3, #119	@ 0x77
 8002716:	d801      	bhi.n	800271c <HAL_DMA_Init+0x2b0>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_DMA_Init+0x2b2>
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002728:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 0307 	bic.w	r3, r3, #7
 8002740:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	2b04      	cmp	r3, #4
 8002752:	d117      	bne.n	8002784 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00e      	beq.n	8002784 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f002 fbe0 	bl	8004f2c <DMA_CheckFifoParam>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2240      	movs	r2, #64	@ 0x40
 8002776:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e1fd      	b.n	8002b80 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f002 fb1b 	bl	8004dc8 <DMA_CalcBaseAndBitshift>
 8002792:	4603      	mov	r3, r0
 8002794:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	223f      	movs	r2, #63	@ 0x3f
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	e0fd      	b.n	80029a4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a28      	ldr	r2, [pc, #160]	@ (8002850 <HAL_DMA_Init+0x3e4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d04a      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a27      	ldr	r2, [pc, #156]	@ (8002854 <HAL_DMA_Init+0x3e8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d045      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a25      	ldr	r2, [pc, #148]	@ (8002858 <HAL_DMA_Init+0x3ec>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d040      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a24      	ldr	r2, [pc, #144]	@ (800285c <HAL_DMA_Init+0x3f0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d03b      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a22      	ldr	r2, [pc, #136]	@ (8002860 <HAL_DMA_Init+0x3f4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d036      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a21      	ldr	r2, [pc, #132]	@ (8002864 <HAL_DMA_Init+0x3f8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d031      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002868 <HAL_DMA_Init+0x3fc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02c      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1e      	ldr	r2, [pc, #120]	@ (800286c <HAL_DMA_Init+0x400>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d027      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002870 <HAL_DMA_Init+0x404>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d022      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1b      	ldr	r2, [pc, #108]	@ (8002874 <HAL_DMA_Init+0x408>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d01d      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a19      	ldr	r2, [pc, #100]	@ (8002878 <HAL_DMA_Init+0x40c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d018      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a18      	ldr	r2, [pc, #96]	@ (800287c <HAL_DMA_Init+0x410>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a16      	ldr	r2, [pc, #88]	@ (8002880 <HAL_DMA_Init+0x414>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a15      	ldr	r2, [pc, #84]	@ (8002884 <HAL_DMA_Init+0x418>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <HAL_DMA_Init+0x41c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_DMA_Init+0x3dc>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a12      	ldr	r2, [pc, #72]	@ (800288c <HAL_DMA_Init+0x420>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d123      	bne.n	8002890 <HAL_DMA_Init+0x424>
 8002848:	2301      	movs	r3, #1
 800284a:	e022      	b.n	8002892 <HAL_DMA_Init+0x426>
 800284c:	fe10803f 	.word	0xfe10803f
 8002850:	48022c08 	.word	0x48022c08
 8002854:	48022c1c 	.word	0x48022c1c
 8002858:	48022c30 	.word	0x48022c30
 800285c:	48022c44 	.word	0x48022c44
 8002860:	48022c58 	.word	0x48022c58
 8002864:	48022c6c 	.word	0x48022c6c
 8002868:	48022c80 	.word	0x48022c80
 800286c:	48022c94 	.word	0x48022c94
 8002870:	58025408 	.word	0x58025408
 8002874:	5802541c 	.word	0x5802541c
 8002878:	58025430 	.word	0x58025430
 800287c:	58025444 	.word	0x58025444
 8002880:	58025458 	.word	0x58025458
 8002884:	5802546c 	.word	0x5802546c
 8002888:	58025480 	.word	0x58025480
 800288c:	58025494 	.word	0x58025494
 8002890:	2300      	movs	r3, #0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d07d      	beq.n	8002992 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7f      	ldr	r2, [pc, #508]	@ (8002a98 <HAL_DMA_Init+0x62c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d021      	beq.n	80028e4 <HAL_DMA_Init+0x478>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a7d      	ldr	r2, [pc, #500]	@ (8002a9c <HAL_DMA_Init+0x630>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01c      	beq.n	80028e4 <HAL_DMA_Init+0x478>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002aa0 <HAL_DMA_Init+0x634>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d017      	beq.n	80028e4 <HAL_DMA_Init+0x478>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a7a      	ldr	r2, [pc, #488]	@ (8002aa4 <HAL_DMA_Init+0x638>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d012      	beq.n	80028e4 <HAL_DMA_Init+0x478>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a79      	ldr	r2, [pc, #484]	@ (8002aa8 <HAL_DMA_Init+0x63c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00d      	beq.n	80028e4 <HAL_DMA_Init+0x478>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a77      	ldr	r2, [pc, #476]	@ (8002aac <HAL_DMA_Init+0x640>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d008      	beq.n	80028e4 <HAL_DMA_Init+0x478>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a76      	ldr	r2, [pc, #472]	@ (8002ab0 <HAL_DMA_Init+0x644>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d003      	beq.n	80028e4 <HAL_DMA_Init+0x478>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a74      	ldr	r2, [pc, #464]	@ (8002ab4 <HAL_DMA_Init+0x648>)
 80028e2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab8 <HAL_DMA_Init+0x64c>)
 8002900:	4013      	ands	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b40      	cmp	r3, #64	@ 0x40
 800290a:	d008      	beq.n	800291e <HAL_DMA_Init+0x4b2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b80      	cmp	r3, #128	@ 0x80
 8002912:	d102      	bne.n	800291a <HAL_DMA_Init+0x4ae>
 8002914:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002918:	e002      	b.n	8002920 <HAL_DMA_Init+0x4b4>
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <HAL_DMA_Init+0x4b4>
 800291e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68d2      	ldr	r2, [r2, #12]
 8002924:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002926:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800292e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002936:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800293e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002946:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800294e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	4b55      	ldr	r3, [pc, #340]	@ (8002abc <HAL_DMA_Init+0x650>)
 8002966:	4413      	add	r3, r2
 8002968:	4a55      	ldr	r2, [pc, #340]	@ (8002ac0 <HAL_DMA_Init+0x654>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	009a      	lsls	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f002 fa26 	bl	8004dc8 <DMA_CalcBaseAndBitshift>
 800297c:	4603      	mov	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2201      	movs	r2, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	e008      	b.n	80029a4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2240      	movs	r2, #64	@ 0x40
 8002996:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2203      	movs	r2, #3
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0ed      	b.n	8002b80 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a46      	ldr	r2, [pc, #280]	@ (8002ac4 <HAL_DMA_Init+0x658>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d072      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a45      	ldr	r2, [pc, #276]	@ (8002ac8 <HAL_DMA_Init+0x65c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d06d      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a43      	ldr	r2, [pc, #268]	@ (8002acc <HAL_DMA_Init+0x660>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d068      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a42      	ldr	r2, [pc, #264]	@ (8002ad0 <HAL_DMA_Init+0x664>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d063      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a40      	ldr	r2, [pc, #256]	@ (8002ad4 <HAL_DMA_Init+0x668>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d05e      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3f      	ldr	r2, [pc, #252]	@ (8002ad8 <HAL_DMA_Init+0x66c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d059      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a3d      	ldr	r2, [pc, #244]	@ (8002adc <HAL_DMA_Init+0x670>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d054      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a3c      	ldr	r2, [pc, #240]	@ (8002ae0 <HAL_DMA_Init+0x674>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d04f      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ae4 <HAL_DMA_Init+0x678>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d04a      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a39      	ldr	r2, [pc, #228]	@ (8002ae8 <HAL_DMA_Init+0x67c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d045      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a37      	ldr	r2, [pc, #220]	@ (8002aec <HAL_DMA_Init+0x680>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d040      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a36      	ldr	r2, [pc, #216]	@ (8002af0 <HAL_DMA_Init+0x684>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d03b      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a34      	ldr	r2, [pc, #208]	@ (8002af4 <HAL_DMA_Init+0x688>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d036      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a33      	ldr	r2, [pc, #204]	@ (8002af8 <HAL_DMA_Init+0x68c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d031      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a31      	ldr	r2, [pc, #196]	@ (8002afc <HAL_DMA_Init+0x690>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02c      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a30      	ldr	r2, [pc, #192]	@ (8002b00 <HAL_DMA_Init+0x694>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d027      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a13      	ldr	r2, [pc, #76]	@ (8002a98 <HAL_DMA_Init+0x62c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <HAL_DMA_Init+0x630>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d01d      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a10      	ldr	r2, [pc, #64]	@ (8002aa0 <HAL_DMA_Init+0x634>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa4 <HAL_DMA_Init+0x638>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <HAL_DMA_Init+0x63c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002aac <HAL_DMA_Init+0x640>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <HAL_DMA_Init+0x644>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_Init+0x628>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <HAL_DMA_Init+0x648>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d137      	bne.n	8002b04 <HAL_DMA_Init+0x698>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e036      	b.n	8002b06 <HAL_DMA_Init+0x69a>
 8002a98:	58025408 	.word	0x58025408
 8002a9c:	5802541c 	.word	0x5802541c
 8002aa0:	58025430 	.word	0x58025430
 8002aa4:	58025444 	.word	0x58025444
 8002aa8:	58025458 	.word	0x58025458
 8002aac:	5802546c 	.word	0x5802546c
 8002ab0:	58025480 	.word	0x58025480
 8002ab4:	58025494 	.word	0x58025494
 8002ab8:	fffe000f 	.word	0xfffe000f
 8002abc:	a7fdabf8 	.word	0xa7fdabf8
 8002ac0:	cccccccd 	.word	0xcccccccd
 8002ac4:	40020010 	.word	0x40020010
 8002ac8:	40020028 	.word	0x40020028
 8002acc:	40020040 	.word	0x40020040
 8002ad0:	40020058 	.word	0x40020058
 8002ad4:	40020070 	.word	0x40020070
 8002ad8:	40020088 	.word	0x40020088
 8002adc:	400200a0 	.word	0x400200a0
 8002ae0:	400200b8 	.word	0x400200b8
 8002ae4:	40020410 	.word	0x40020410
 8002ae8:	40020428 	.word	0x40020428
 8002aec:	40020440 	.word	0x40020440
 8002af0:	40020458 	.word	0x40020458
 8002af4:	40020470 	.word	0x40020470
 8002af8:	40020488 	.word	0x40020488
 8002afc:	400204a0 	.word	0x400204a0
 8002b00:	400204b8 	.word	0x400204b8
 8002b04:	2300      	movs	r3, #0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d032      	beq.n	8002b70 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f002 fa8a 	bl	8005024 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b80      	cmp	r3, #128	@ 0x80
 8002b16:	d102      	bne.n	8002b1e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b32:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <HAL_DMA_Init+0x6f2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d80c      	bhi.n	8002b5e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f002 fb07 	bl	8005158 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	e008      	b.n	8002b70 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e226      	b.n	8002ff2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_DMA_Start_IT+0x2a>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e21f      	b.n	8002ff2 <HAL_DMA_Start_IT+0x46a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	f040 820a 	bne.w	8002fdc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a68      	ldr	r2, [pc, #416]	@ (8002d7c <HAL_DMA_Start_IT+0x1f4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d04a      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a66      	ldr	r2, [pc, #408]	@ (8002d80 <HAL_DMA_Start_IT+0x1f8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d045      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a65      	ldr	r2, [pc, #404]	@ (8002d84 <HAL_DMA_Start_IT+0x1fc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d040      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a63      	ldr	r2, [pc, #396]	@ (8002d88 <HAL_DMA_Start_IT+0x200>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d03b      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a62      	ldr	r2, [pc, #392]	@ (8002d8c <HAL_DMA_Start_IT+0x204>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d036      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a60      	ldr	r2, [pc, #384]	@ (8002d90 <HAL_DMA_Start_IT+0x208>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d031      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5f      	ldr	r2, [pc, #380]	@ (8002d94 <HAL_DMA_Start_IT+0x20c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d02c      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5d      	ldr	r2, [pc, #372]	@ (8002d98 <HAL_DMA_Start_IT+0x210>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d027      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5c      	ldr	r2, [pc, #368]	@ (8002d9c <HAL_DMA_Start_IT+0x214>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5a      	ldr	r2, [pc, #360]	@ (8002da0 <HAL_DMA_Start_IT+0x218>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01d      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a59      	ldr	r2, [pc, #356]	@ (8002da4 <HAL_DMA_Start_IT+0x21c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d018      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a57      	ldr	r2, [pc, #348]	@ (8002da8 <HAL_DMA_Start_IT+0x220>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a56      	ldr	r2, [pc, #344]	@ (8002dac <HAL_DMA_Start_IT+0x224>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00e      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a54      	ldr	r2, [pc, #336]	@ (8002db0 <HAL_DMA_Start_IT+0x228>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a53      	ldr	r2, [pc, #332]	@ (8002db4 <HAL_DMA_Start_IT+0x22c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a51      	ldr	r2, [pc, #324]	@ (8002db8 <HAL_DMA_Start_IT+0x230>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d108      	bne.n	8002c88 <HAL_DMA_Start_IT+0x100>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e007      	b.n	8002c98 <HAL_DMA_Start_IT+0x110>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f001 feae 	bl	8004a00 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a34      	ldr	r2, [pc, #208]	@ (8002d7c <HAL_DMA_Start_IT+0x1f4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d04a      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a33      	ldr	r2, [pc, #204]	@ (8002d80 <HAL_DMA_Start_IT+0x1f8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d045      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a31      	ldr	r2, [pc, #196]	@ (8002d84 <HAL_DMA_Start_IT+0x1fc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d040      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a30      	ldr	r2, [pc, #192]	@ (8002d88 <HAL_DMA_Start_IT+0x200>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d03b      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8002d8c <HAL_DMA_Start_IT+0x204>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d036      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2d      	ldr	r2, [pc, #180]	@ (8002d90 <HAL_DMA_Start_IT+0x208>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d031      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d94 <HAL_DMA_Start_IT+0x20c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02c      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2a      	ldr	r2, [pc, #168]	@ (8002d98 <HAL_DMA_Start_IT+0x210>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d027      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a28      	ldr	r2, [pc, #160]	@ (8002d9c <HAL_DMA_Start_IT+0x214>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d022      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a27      	ldr	r2, [pc, #156]	@ (8002da0 <HAL_DMA_Start_IT+0x218>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d01d      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a25      	ldr	r2, [pc, #148]	@ (8002da4 <HAL_DMA_Start_IT+0x21c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d018      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a24      	ldr	r2, [pc, #144]	@ (8002da8 <HAL_DMA_Start_IT+0x220>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a22      	ldr	r2, [pc, #136]	@ (8002dac <HAL_DMA_Start_IT+0x224>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00e      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a21      	ldr	r2, [pc, #132]	@ (8002db0 <HAL_DMA_Start_IT+0x228>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d009      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1f      	ldr	r2, [pc, #124]	@ (8002db4 <HAL_DMA_Start_IT+0x22c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002db8 <HAL_DMA_Start_IT+0x230>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_DMA_Start_IT+0x1c0>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_DMA_Start_IT+0x1c2>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d036      	beq.n	8002dbc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 021e 	bic.w	r2, r3, #30
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0216 	orr.w	r2, r2, #22
 8002d60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03e      	beq.n	8002de8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0208 	orr.w	r2, r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e035      	b.n	8002de8 <HAL_DMA_Start_IT+0x260>
 8002d7c:	40020010 	.word	0x40020010
 8002d80:	40020028 	.word	0x40020028
 8002d84:	40020040 	.word	0x40020040
 8002d88:	40020058 	.word	0x40020058
 8002d8c:	40020070 	.word	0x40020070
 8002d90:	40020088 	.word	0x40020088
 8002d94:	400200a0 	.word	0x400200a0
 8002d98:	400200b8 	.word	0x400200b8
 8002d9c:	40020410 	.word	0x40020410
 8002da0:	40020428 	.word	0x40020428
 8002da4:	40020440 	.word	0x40020440
 8002da8:	40020458 	.word	0x40020458
 8002dac:	40020470 	.word	0x40020470
 8002db0:	40020488 	.word	0x40020488
 8002db4:	400204a0 	.word	0x400204a0
 8002db8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 020e 	bic.w	r2, r3, #14
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 020a 	orr.w	r2, r2, #10
 8002dce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0204 	orr.w	r2, r2, #4
 8002de6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a83      	ldr	r2, [pc, #524]	@ (8002ffc <HAL_DMA_Start_IT+0x474>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d072      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a82      	ldr	r2, [pc, #520]	@ (8003000 <HAL_DMA_Start_IT+0x478>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d06d      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a80      	ldr	r2, [pc, #512]	@ (8003004 <HAL_DMA_Start_IT+0x47c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d068      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7f      	ldr	r2, [pc, #508]	@ (8003008 <HAL_DMA_Start_IT+0x480>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d063      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a7d      	ldr	r2, [pc, #500]	@ (800300c <HAL_DMA_Start_IT+0x484>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d05e      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8003010 <HAL_DMA_Start_IT+0x488>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d059      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a7a      	ldr	r2, [pc, #488]	@ (8003014 <HAL_DMA_Start_IT+0x48c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d054      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a79      	ldr	r2, [pc, #484]	@ (8003018 <HAL_DMA_Start_IT+0x490>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04f      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a77      	ldr	r2, [pc, #476]	@ (800301c <HAL_DMA_Start_IT+0x494>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d04a      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a76      	ldr	r2, [pc, #472]	@ (8003020 <HAL_DMA_Start_IT+0x498>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d045      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a74      	ldr	r2, [pc, #464]	@ (8003024 <HAL_DMA_Start_IT+0x49c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d040      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a73      	ldr	r2, [pc, #460]	@ (8003028 <HAL_DMA_Start_IT+0x4a0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d03b      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a71      	ldr	r2, [pc, #452]	@ (800302c <HAL_DMA_Start_IT+0x4a4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d036      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a70      	ldr	r2, [pc, #448]	@ (8003030 <HAL_DMA_Start_IT+0x4a8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d031      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a6e      	ldr	r2, [pc, #440]	@ (8003034 <HAL_DMA_Start_IT+0x4ac>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d02c      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6d      	ldr	r2, [pc, #436]	@ (8003038 <HAL_DMA_Start_IT+0x4b0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d027      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6b      	ldr	r2, [pc, #428]	@ (800303c <HAL_DMA_Start_IT+0x4b4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d022      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6a      	ldr	r2, [pc, #424]	@ (8003040 <HAL_DMA_Start_IT+0x4b8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d01d      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a68      	ldr	r2, [pc, #416]	@ (8003044 <HAL_DMA_Start_IT+0x4bc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d018      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a67      	ldr	r2, [pc, #412]	@ (8003048 <HAL_DMA_Start_IT+0x4c0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a65      	ldr	r2, [pc, #404]	@ (800304c <HAL_DMA_Start_IT+0x4c4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a64      	ldr	r2, [pc, #400]	@ (8003050 <HAL_DMA_Start_IT+0x4c8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a62      	ldr	r2, [pc, #392]	@ (8003054 <HAL_DMA_Start_IT+0x4cc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a61      	ldr	r2, [pc, #388]	@ (8003058 <HAL_DMA_Start_IT+0x4d0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d101      	bne.n	8002edc <HAL_DMA_Start_IT+0x354>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_DMA_Start_IT+0x356>
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01a      	beq.n	8002f18 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002efe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f16:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a37      	ldr	r2, [pc, #220]	@ (8002ffc <HAL_DMA_Start_IT+0x474>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d04a      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a36      	ldr	r2, [pc, #216]	@ (8003000 <HAL_DMA_Start_IT+0x478>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d045      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a34      	ldr	r2, [pc, #208]	@ (8003004 <HAL_DMA_Start_IT+0x47c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d040      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a33      	ldr	r2, [pc, #204]	@ (8003008 <HAL_DMA_Start_IT+0x480>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d03b      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a31      	ldr	r2, [pc, #196]	@ (800300c <HAL_DMA_Start_IT+0x484>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d036      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a30      	ldr	r2, [pc, #192]	@ (8003010 <HAL_DMA_Start_IT+0x488>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d031      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2e      	ldr	r2, [pc, #184]	@ (8003014 <HAL_DMA_Start_IT+0x48c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d02c      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2d      	ldr	r2, [pc, #180]	@ (8003018 <HAL_DMA_Start_IT+0x490>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d027      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800301c <HAL_DMA_Start_IT+0x494>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d022      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2a      	ldr	r2, [pc, #168]	@ (8003020 <HAL_DMA_Start_IT+0x498>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d01d      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a28      	ldr	r2, [pc, #160]	@ (8003024 <HAL_DMA_Start_IT+0x49c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d018      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a27      	ldr	r2, [pc, #156]	@ (8003028 <HAL_DMA_Start_IT+0x4a0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d013      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a25      	ldr	r2, [pc, #148]	@ (800302c <HAL_DMA_Start_IT+0x4a4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00e      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a24      	ldr	r2, [pc, #144]	@ (8003030 <HAL_DMA_Start_IT+0x4a8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a22      	ldr	r2, [pc, #136]	@ (8003034 <HAL_DMA_Start_IT+0x4ac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a21      	ldr	r2, [pc, #132]	@ (8003038 <HAL_DMA_Start_IT+0x4b0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d108      	bne.n	8002fca <HAL_DMA_Start_IT+0x442>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e012      	b.n	8002ff0 <HAL_DMA_Start_IT+0x468>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e009      	b.n	8002ff0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fe2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40020010 	.word	0x40020010
 8003000:	40020028 	.word	0x40020028
 8003004:	40020040 	.word	0x40020040
 8003008:	40020058 	.word	0x40020058
 800300c:	40020070 	.word	0x40020070
 8003010:	40020088 	.word	0x40020088
 8003014:	400200a0 	.word	0x400200a0
 8003018:	400200b8 	.word	0x400200b8
 800301c:	40020410 	.word	0x40020410
 8003020:	40020428 	.word	0x40020428
 8003024:	40020440 	.word	0x40020440
 8003028:	40020458 	.word	0x40020458
 800302c:	40020470 	.word	0x40020470
 8003030:	40020488 	.word	0x40020488
 8003034:	400204a0 	.word	0x400204a0
 8003038:	400204b8 	.word	0x400204b8
 800303c:	58025408 	.word	0x58025408
 8003040:	5802541c 	.word	0x5802541c
 8003044:	58025430 	.word	0x58025430
 8003048:	58025444 	.word	0x58025444
 800304c:	58025458 	.word	0x58025458
 8003050:	5802546c 	.word	0x5802546c
 8003054:	58025480 	.word	0x58025480
 8003058:	58025494 	.word	0x58025494

0800305c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003064:	f7ff f84a 	bl	80020fc <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e2dc      	b.n	800362e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d008      	beq.n	8003092 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2280      	movs	r2, #128	@ 0x80
 8003084:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e2cd      	b.n	800362e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a76      	ldr	r2, [pc, #472]	@ (8003270 <HAL_DMA_Abort+0x214>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d04a      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a74      	ldr	r2, [pc, #464]	@ (8003274 <HAL_DMA_Abort+0x218>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d045      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a73      	ldr	r2, [pc, #460]	@ (8003278 <HAL_DMA_Abort+0x21c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d040      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a71      	ldr	r2, [pc, #452]	@ (800327c <HAL_DMA_Abort+0x220>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d03b      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a70      	ldr	r2, [pc, #448]	@ (8003280 <HAL_DMA_Abort+0x224>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d036      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003284 <HAL_DMA_Abort+0x228>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d031      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6d      	ldr	r2, [pc, #436]	@ (8003288 <HAL_DMA_Abort+0x22c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d02c      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6b      	ldr	r2, [pc, #428]	@ (800328c <HAL_DMA_Abort+0x230>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d027      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003290 <HAL_DMA_Abort+0x234>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d022      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a68      	ldr	r2, [pc, #416]	@ (8003294 <HAL_DMA_Abort+0x238>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01d      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a67      	ldr	r2, [pc, #412]	@ (8003298 <HAL_DMA_Abort+0x23c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d018      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a65      	ldr	r2, [pc, #404]	@ (800329c <HAL_DMA_Abort+0x240>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a64      	ldr	r2, [pc, #400]	@ (80032a0 <HAL_DMA_Abort+0x244>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00e      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a62      	ldr	r2, [pc, #392]	@ (80032a4 <HAL_DMA_Abort+0x248>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a61      	ldr	r2, [pc, #388]	@ (80032a8 <HAL_DMA_Abort+0x24c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a5f      	ldr	r2, [pc, #380]	@ (80032ac <HAL_DMA_Abort+0x250>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_DMA_Abort+0xda>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_DMA_Abort+0xdc>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 021e 	bic.w	r2, r2, #30
 800314a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800315a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e00a      	b.n	800317a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 020e 	bic.w	r2, r2, #14
 8003172:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a3c      	ldr	r2, [pc, #240]	@ (8003270 <HAL_DMA_Abort+0x214>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d072      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a3a      	ldr	r2, [pc, #232]	@ (8003274 <HAL_DMA_Abort+0x218>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d06d      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a39      	ldr	r2, [pc, #228]	@ (8003278 <HAL_DMA_Abort+0x21c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d068      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a37      	ldr	r2, [pc, #220]	@ (800327c <HAL_DMA_Abort+0x220>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d063      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a36      	ldr	r2, [pc, #216]	@ (8003280 <HAL_DMA_Abort+0x224>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d05e      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a34      	ldr	r2, [pc, #208]	@ (8003284 <HAL_DMA_Abort+0x228>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d059      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a33      	ldr	r2, [pc, #204]	@ (8003288 <HAL_DMA_Abort+0x22c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d054      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a31      	ldr	r2, [pc, #196]	@ (800328c <HAL_DMA_Abort+0x230>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d04f      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a30      	ldr	r2, [pc, #192]	@ (8003290 <HAL_DMA_Abort+0x234>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d04a      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003294 <HAL_DMA_Abort+0x238>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d045      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003298 <HAL_DMA_Abort+0x23c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d040      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	@ (800329c <HAL_DMA_Abort+0x240>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d03b      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2a      	ldr	r2, [pc, #168]	@ (80032a0 <HAL_DMA_Abort+0x244>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d036      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a28      	ldr	r2, [pc, #160]	@ (80032a4 <HAL_DMA_Abort+0x248>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d031      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a27      	ldr	r2, [pc, #156]	@ (80032a8 <HAL_DMA_Abort+0x24c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d02c      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a25      	ldr	r2, [pc, #148]	@ (80032ac <HAL_DMA_Abort+0x250>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d027      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a24      	ldr	r2, [pc, #144]	@ (80032b0 <HAL_DMA_Abort+0x254>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	@ (80032b4 <HAL_DMA_Abort+0x258>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01d      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a21      	ldr	r2, [pc, #132]	@ (80032b8 <HAL_DMA_Abort+0x25c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d018      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1f      	ldr	r2, [pc, #124]	@ (80032bc <HAL_DMA_Abort+0x260>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1e      	ldr	r2, [pc, #120]	@ (80032c0 <HAL_DMA_Abort+0x264>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1c      	ldr	r2, [pc, #112]	@ (80032c4 <HAL_DMA_Abort+0x268>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1b      	ldr	r2, [pc, #108]	@ (80032c8 <HAL_DMA_Abort+0x26c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <HAL_DMA_Abort+0x270>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d132      	bne.n	80032d0 <HAL_DMA_Abort+0x274>
 800326a:	2301      	movs	r3, #1
 800326c:	e031      	b.n	80032d2 <HAL_DMA_Abort+0x276>
 800326e:	bf00      	nop
 8003270:	40020010 	.word	0x40020010
 8003274:	40020028 	.word	0x40020028
 8003278:	40020040 	.word	0x40020040
 800327c:	40020058 	.word	0x40020058
 8003280:	40020070 	.word	0x40020070
 8003284:	40020088 	.word	0x40020088
 8003288:	400200a0 	.word	0x400200a0
 800328c:	400200b8 	.word	0x400200b8
 8003290:	40020410 	.word	0x40020410
 8003294:	40020428 	.word	0x40020428
 8003298:	40020440 	.word	0x40020440
 800329c:	40020458 	.word	0x40020458
 80032a0:	40020470 	.word	0x40020470
 80032a4:	40020488 	.word	0x40020488
 80032a8:	400204a0 	.word	0x400204a0
 80032ac:	400204b8 	.word	0x400204b8
 80032b0:	58025408 	.word	0x58025408
 80032b4:	5802541c 	.word	0x5802541c
 80032b8:	58025430 	.word	0x58025430
 80032bc:	58025444 	.word	0x58025444
 80032c0:	58025458 	.word	0x58025458
 80032c4:	5802546c 	.word	0x5802546c
 80032c8:	58025480 	.word	0x58025480
 80032cc:	58025494 	.word	0x58025494
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6d      	ldr	r2, [pc, #436]	@ (80034a0 <HAL_DMA_Abort+0x444>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d04a      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6b      	ldr	r2, [pc, #428]	@ (80034a4 <HAL_DMA_Abort+0x448>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d045      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a6a      	ldr	r2, [pc, #424]	@ (80034a8 <HAL_DMA_Abort+0x44c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d040      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a68      	ldr	r2, [pc, #416]	@ (80034ac <HAL_DMA_Abort+0x450>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d03b      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a67      	ldr	r2, [pc, #412]	@ (80034b0 <HAL_DMA_Abort+0x454>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d036      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a65      	ldr	r2, [pc, #404]	@ (80034b4 <HAL_DMA_Abort+0x458>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d031      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a64      	ldr	r2, [pc, #400]	@ (80034b8 <HAL_DMA_Abort+0x45c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d02c      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a62      	ldr	r2, [pc, #392]	@ (80034bc <HAL_DMA_Abort+0x460>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d027      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a61      	ldr	r2, [pc, #388]	@ (80034c0 <HAL_DMA_Abort+0x464>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5f      	ldr	r2, [pc, #380]	@ (80034c4 <HAL_DMA_Abort+0x468>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5e      	ldr	r2, [pc, #376]	@ (80034c8 <HAL_DMA_Abort+0x46c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d018      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5c      	ldr	r2, [pc, #368]	@ (80034cc <HAL_DMA_Abort+0x470>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a5b      	ldr	r2, [pc, #364]	@ (80034d0 <HAL_DMA_Abort+0x474>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a59      	ldr	r2, [pc, #356]	@ (80034d4 <HAL_DMA_Abort+0x478>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a58      	ldr	r2, [pc, #352]	@ (80034d8 <HAL_DMA_Abort+0x47c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a56      	ldr	r2, [pc, #344]	@ (80034dc <HAL_DMA_Abort+0x480>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d108      	bne.n	8003398 <HAL_DMA_Abort+0x33c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e007      	b.n	80033a8 <HAL_DMA_Abort+0x34c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033a8:	e013      	b.n	80033d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033aa:	f7fe fea7 	bl	80020fc <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d90c      	bls.n	80033d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2203      	movs	r2, #3
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e12d      	b.n	800362e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e5      	bne.n	80033aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2f      	ldr	r2, [pc, #188]	@ (80034a0 <HAL_DMA_Abort+0x444>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d04a      	beq.n	800347e <HAL_DMA_Abort+0x422>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2d      	ldr	r2, [pc, #180]	@ (80034a4 <HAL_DMA_Abort+0x448>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d045      	beq.n	800347e <HAL_DMA_Abort+0x422>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a2c      	ldr	r2, [pc, #176]	@ (80034a8 <HAL_DMA_Abort+0x44c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d040      	beq.n	800347e <HAL_DMA_Abort+0x422>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2a      	ldr	r2, [pc, #168]	@ (80034ac <HAL_DMA_Abort+0x450>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d03b      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a29      	ldr	r2, [pc, #164]	@ (80034b0 <HAL_DMA_Abort+0x454>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d036      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a27      	ldr	r2, [pc, #156]	@ (80034b4 <HAL_DMA_Abort+0x458>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d031      	beq.n	800347e <HAL_DMA_Abort+0x422>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a26      	ldr	r2, [pc, #152]	@ (80034b8 <HAL_DMA_Abort+0x45c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d02c      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a24      	ldr	r2, [pc, #144]	@ (80034bc <HAL_DMA_Abort+0x460>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d027      	beq.n	800347e <HAL_DMA_Abort+0x422>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a23      	ldr	r2, [pc, #140]	@ (80034c0 <HAL_DMA_Abort+0x464>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d022      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a21      	ldr	r2, [pc, #132]	@ (80034c4 <HAL_DMA_Abort+0x468>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01d      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a20      	ldr	r2, [pc, #128]	@ (80034c8 <HAL_DMA_Abort+0x46c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d018      	beq.n	800347e <HAL_DMA_Abort+0x422>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1e      	ldr	r2, [pc, #120]	@ (80034cc <HAL_DMA_Abort+0x470>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1d      	ldr	r2, [pc, #116]	@ (80034d0 <HAL_DMA_Abort+0x474>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1b      	ldr	r2, [pc, #108]	@ (80034d4 <HAL_DMA_Abort+0x478>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_DMA_Abort+0x422>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <HAL_DMA_Abort+0x47c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a18      	ldr	r2, [pc, #96]	@ (80034dc <HAL_DMA_Abort+0x480>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_DMA_Abort+0x426>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_DMA_Abort+0x428>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d02b      	beq.n	80034e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	223f      	movs	r2, #63	@ 0x3f
 8003498:	409a      	lsls	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	e02a      	b.n	80034f6 <HAL_DMA_Abort+0x49a>
 80034a0:	40020010 	.word	0x40020010
 80034a4:	40020028 	.word	0x40020028
 80034a8:	40020040 	.word	0x40020040
 80034ac:	40020058 	.word	0x40020058
 80034b0:	40020070 	.word	0x40020070
 80034b4:	40020088 	.word	0x40020088
 80034b8:	400200a0 	.word	0x400200a0
 80034bc:	400200b8 	.word	0x400200b8
 80034c0:	40020410 	.word	0x40020410
 80034c4:	40020428 	.word	0x40020428
 80034c8:	40020440 	.word	0x40020440
 80034cc:	40020458 	.word	0x40020458
 80034d0:	40020470 	.word	0x40020470
 80034d4:	40020488 	.word	0x40020488
 80034d8:	400204a0 	.word	0x400204a0
 80034dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2201      	movs	r2, #1
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a4f      	ldr	r2, [pc, #316]	@ (8003638 <HAL_DMA_Abort+0x5dc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d072      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a4d      	ldr	r2, [pc, #308]	@ (800363c <HAL_DMA_Abort+0x5e0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d06d      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a4c      	ldr	r2, [pc, #304]	@ (8003640 <HAL_DMA_Abort+0x5e4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d068      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a4a      	ldr	r2, [pc, #296]	@ (8003644 <HAL_DMA_Abort+0x5e8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d063      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a49      	ldr	r2, [pc, #292]	@ (8003648 <HAL_DMA_Abort+0x5ec>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d05e      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a47      	ldr	r2, [pc, #284]	@ (800364c <HAL_DMA_Abort+0x5f0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d059      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a46      	ldr	r2, [pc, #280]	@ (8003650 <HAL_DMA_Abort+0x5f4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d054      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a44      	ldr	r2, [pc, #272]	@ (8003654 <HAL_DMA_Abort+0x5f8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d04f      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a43      	ldr	r2, [pc, #268]	@ (8003658 <HAL_DMA_Abort+0x5fc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d04a      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a41      	ldr	r2, [pc, #260]	@ (800365c <HAL_DMA_Abort+0x600>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d045      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a40      	ldr	r2, [pc, #256]	@ (8003660 <HAL_DMA_Abort+0x604>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d040      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a3e      	ldr	r2, [pc, #248]	@ (8003664 <HAL_DMA_Abort+0x608>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d03b      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3d      	ldr	r2, [pc, #244]	@ (8003668 <HAL_DMA_Abort+0x60c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d036      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a3b      	ldr	r2, [pc, #236]	@ (800366c <HAL_DMA_Abort+0x610>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d031      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a3a      	ldr	r2, [pc, #232]	@ (8003670 <HAL_DMA_Abort+0x614>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d02c      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a38      	ldr	r2, [pc, #224]	@ (8003674 <HAL_DMA_Abort+0x618>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d027      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a37      	ldr	r2, [pc, #220]	@ (8003678 <HAL_DMA_Abort+0x61c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d022      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a35      	ldr	r2, [pc, #212]	@ (800367c <HAL_DMA_Abort+0x620>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01d      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a34      	ldr	r2, [pc, #208]	@ (8003680 <HAL_DMA_Abort+0x624>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d018      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a32      	ldr	r2, [pc, #200]	@ (8003684 <HAL_DMA_Abort+0x628>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a31      	ldr	r2, [pc, #196]	@ (8003688 <HAL_DMA_Abort+0x62c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a2f      	ldr	r2, [pc, #188]	@ (800368c <HAL_DMA_Abort+0x630>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003690 <HAL_DMA_Abort+0x634>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003694 <HAL_DMA_Abort+0x638>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_DMA_Abort+0x58e>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_DMA_Abort+0x590>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80035f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800360c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003610:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800361a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40020010 	.word	0x40020010
 800363c:	40020028 	.word	0x40020028
 8003640:	40020040 	.word	0x40020040
 8003644:	40020058 	.word	0x40020058
 8003648:	40020070 	.word	0x40020070
 800364c:	40020088 	.word	0x40020088
 8003650:	400200a0 	.word	0x400200a0
 8003654:	400200b8 	.word	0x400200b8
 8003658:	40020410 	.word	0x40020410
 800365c:	40020428 	.word	0x40020428
 8003660:	40020440 	.word	0x40020440
 8003664:	40020458 	.word	0x40020458
 8003668:	40020470 	.word	0x40020470
 800366c:	40020488 	.word	0x40020488
 8003670:	400204a0 	.word	0x400204a0
 8003674:	400204b8 	.word	0x400204b8
 8003678:	58025408 	.word	0x58025408
 800367c:	5802541c 	.word	0x5802541c
 8003680:	58025430 	.word	0x58025430
 8003684:	58025444 	.word	0x58025444
 8003688:	58025458 	.word	0x58025458
 800368c:	5802546c 	.word	0x5802546c
 8003690:	58025480 	.word	0x58025480
 8003694:	58025494 	.word	0x58025494

08003698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e237      	b.n	8003b1a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2280      	movs	r2, #128	@ 0x80
 80036ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e22c      	b.n	8003b1a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003838 <HAL_DMA_Abort_IT+0x1a0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d04a      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5b      	ldr	r2, [pc, #364]	@ (800383c <HAL_DMA_Abort_IT+0x1a4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d045      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a59      	ldr	r2, [pc, #356]	@ (8003840 <HAL_DMA_Abort_IT+0x1a8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d040      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a58      	ldr	r2, [pc, #352]	@ (8003844 <HAL_DMA_Abort_IT+0x1ac>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d03b      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a56      	ldr	r2, [pc, #344]	@ (8003848 <HAL_DMA_Abort_IT+0x1b0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d036      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a55      	ldr	r2, [pc, #340]	@ (800384c <HAL_DMA_Abort_IT+0x1b4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d031      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a53      	ldr	r2, [pc, #332]	@ (8003850 <HAL_DMA_Abort_IT+0x1b8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d02c      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a52      	ldr	r2, [pc, #328]	@ (8003854 <HAL_DMA_Abort_IT+0x1bc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d027      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a50      	ldr	r2, [pc, #320]	@ (8003858 <HAL_DMA_Abort_IT+0x1c0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d022      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a4f      	ldr	r2, [pc, #316]	@ (800385c <HAL_DMA_Abort_IT+0x1c4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d01d      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a4d      	ldr	r2, [pc, #308]	@ (8003860 <HAL_DMA_Abort_IT+0x1c8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d018      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4c      	ldr	r2, [pc, #304]	@ (8003864 <HAL_DMA_Abort_IT+0x1cc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a4a      	ldr	r2, [pc, #296]	@ (8003868 <HAL_DMA_Abort_IT+0x1d0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00e      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a49      	ldr	r2, [pc, #292]	@ (800386c <HAL_DMA_Abort_IT+0x1d4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a47      	ldr	r2, [pc, #284]	@ (8003870 <HAL_DMA_Abort_IT+0x1d8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a46      	ldr	r2, [pc, #280]	@ (8003874 <HAL_DMA_Abort_IT+0x1dc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_DMA_Abort_IT+0xcc>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_DMA_Abort_IT+0xce>
 8003764:	2300      	movs	r3, #0
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8086 	beq.w	8003878 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2204      	movs	r2, #4
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2f      	ldr	r2, [pc, #188]	@ (8003838 <HAL_DMA_Abort_IT+0x1a0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d04a      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2e      	ldr	r2, [pc, #184]	@ (800383c <HAL_DMA_Abort_IT+0x1a4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d045      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2c      	ldr	r2, [pc, #176]	@ (8003840 <HAL_DMA_Abort_IT+0x1a8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d040      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2b      	ldr	r2, [pc, #172]	@ (8003844 <HAL_DMA_Abort_IT+0x1ac>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d03b      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a29      	ldr	r2, [pc, #164]	@ (8003848 <HAL_DMA_Abort_IT+0x1b0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d036      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a28      	ldr	r2, [pc, #160]	@ (800384c <HAL_DMA_Abort_IT+0x1b4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d031      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a26      	ldr	r2, [pc, #152]	@ (8003850 <HAL_DMA_Abort_IT+0x1b8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d02c      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a25      	ldr	r2, [pc, #148]	@ (8003854 <HAL_DMA_Abort_IT+0x1bc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d027      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a23      	ldr	r2, [pc, #140]	@ (8003858 <HAL_DMA_Abort_IT+0x1c0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a22      	ldr	r2, [pc, #136]	@ (800385c <HAL_DMA_Abort_IT+0x1c4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d01d      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a20      	ldr	r2, [pc, #128]	@ (8003860 <HAL_DMA_Abort_IT+0x1c8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d018      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003864 <HAL_DMA_Abort_IT+0x1cc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003868 <HAL_DMA_Abort_IT+0x1d0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1c      	ldr	r2, [pc, #112]	@ (800386c <HAL_DMA_Abort_IT+0x1d4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d009      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1a      	ldr	r2, [pc, #104]	@ (8003870 <HAL_DMA_Abort_IT+0x1d8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a19      	ldr	r2, [pc, #100]	@ (8003874 <HAL_DMA_Abort_IT+0x1dc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d108      	bne.n	8003826 <HAL_DMA_Abort_IT+0x18e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e178      	b.n	8003b18 <HAL_DMA_Abort_IT+0x480>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e16f      	b.n	8003b18 <HAL_DMA_Abort_IT+0x480>
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 020e 	bic.w	r2, r2, #14
 8003886:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a6c      	ldr	r2, [pc, #432]	@ (8003a40 <HAL_DMA_Abort_IT+0x3a8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d04a      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6b      	ldr	r2, [pc, #428]	@ (8003a44 <HAL_DMA_Abort_IT+0x3ac>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d045      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a69      	ldr	r2, [pc, #420]	@ (8003a48 <HAL_DMA_Abort_IT+0x3b0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d040      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a68      	ldr	r2, [pc, #416]	@ (8003a4c <HAL_DMA_Abort_IT+0x3b4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d03b      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a66      	ldr	r2, [pc, #408]	@ (8003a50 <HAL_DMA_Abort_IT+0x3b8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d036      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a65      	ldr	r2, [pc, #404]	@ (8003a54 <HAL_DMA_Abort_IT+0x3bc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d031      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a63      	ldr	r2, [pc, #396]	@ (8003a58 <HAL_DMA_Abort_IT+0x3c0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d02c      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a62      	ldr	r2, [pc, #392]	@ (8003a5c <HAL_DMA_Abort_IT+0x3c4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d027      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a60      	ldr	r2, [pc, #384]	@ (8003a60 <HAL_DMA_Abort_IT+0x3c8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d022      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003a64 <HAL_DMA_Abort_IT+0x3cc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d01d      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a68 <HAL_DMA_Abort_IT+0x3d0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d018      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5c      	ldr	r2, [pc, #368]	@ (8003a6c <HAL_DMA_Abort_IT+0x3d4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a5a      	ldr	r2, [pc, #360]	@ (8003a70 <HAL_DMA_Abort_IT+0x3d8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a59      	ldr	r2, [pc, #356]	@ (8003a74 <HAL_DMA_Abort_IT+0x3dc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d009      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a57      	ldr	r2, [pc, #348]	@ (8003a78 <HAL_DMA_Abort_IT+0x3e0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a56      	ldr	r2, [pc, #344]	@ (8003a7c <HAL_DMA_Abort_IT+0x3e4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <HAL_DMA_Abort_IT+0x2a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e007      	b.n	800394a <HAL_DMA_Abort_IT+0x2b2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a40 <HAL_DMA_Abort_IT+0x3a8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d072      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a3a      	ldr	r2, [pc, #232]	@ (8003a44 <HAL_DMA_Abort_IT+0x3ac>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d06d      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a39      	ldr	r2, [pc, #228]	@ (8003a48 <HAL_DMA_Abort_IT+0x3b0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d068      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a37      	ldr	r2, [pc, #220]	@ (8003a4c <HAL_DMA_Abort_IT+0x3b4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d063      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a36      	ldr	r2, [pc, #216]	@ (8003a50 <HAL_DMA_Abort_IT+0x3b8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d05e      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a34      	ldr	r2, [pc, #208]	@ (8003a54 <HAL_DMA_Abort_IT+0x3bc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d059      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a33      	ldr	r2, [pc, #204]	@ (8003a58 <HAL_DMA_Abort_IT+0x3c0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d054      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a31      	ldr	r2, [pc, #196]	@ (8003a5c <HAL_DMA_Abort_IT+0x3c4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d04f      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a30      	ldr	r2, [pc, #192]	@ (8003a60 <HAL_DMA_Abort_IT+0x3c8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d04a      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003a64 <HAL_DMA_Abort_IT+0x3cc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d045      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003a68 <HAL_DMA_Abort_IT+0x3d0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d040      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a6c <HAL_DMA_Abort_IT+0x3d4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d03b      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a70 <HAL_DMA_Abort_IT+0x3d8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d036      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a28      	ldr	r2, [pc, #160]	@ (8003a74 <HAL_DMA_Abort_IT+0x3dc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d031      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a27      	ldr	r2, [pc, #156]	@ (8003a78 <HAL_DMA_Abort_IT+0x3e0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d02c      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a25      	ldr	r2, [pc, #148]	@ (8003a7c <HAL_DMA_Abort_IT+0x3e4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d027      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a24      	ldr	r2, [pc, #144]	@ (8003a80 <HAL_DMA_Abort_IT+0x3e8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d022      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a22      	ldr	r2, [pc, #136]	@ (8003a84 <HAL_DMA_Abort_IT+0x3ec>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01d      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a21      	ldr	r2, [pc, #132]	@ (8003a88 <HAL_DMA_Abort_IT+0x3f0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a8c <HAL_DMA_Abort_IT+0x3f4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1e      	ldr	r2, [pc, #120]	@ (8003a90 <HAL_DMA_Abort_IT+0x3f8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1c      	ldr	r2, [pc, #112]	@ (8003a94 <HAL_DMA_Abort_IT+0x3fc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a98 <HAL_DMA_Abort_IT+0x400>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a19      	ldr	r2, [pc, #100]	@ (8003a9c <HAL_DMA_Abort_IT+0x404>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d132      	bne.n	8003aa0 <HAL_DMA_Abort_IT+0x408>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e031      	b.n	8003aa2 <HAL_DMA_Abort_IT+0x40a>
 8003a3e:	bf00      	nop
 8003a40:	40020010 	.word	0x40020010
 8003a44:	40020028 	.word	0x40020028
 8003a48:	40020040 	.word	0x40020040
 8003a4c:	40020058 	.word	0x40020058
 8003a50:	40020070 	.word	0x40020070
 8003a54:	40020088 	.word	0x40020088
 8003a58:	400200a0 	.word	0x400200a0
 8003a5c:	400200b8 	.word	0x400200b8
 8003a60:	40020410 	.word	0x40020410
 8003a64:	40020428 	.word	0x40020428
 8003a68:	40020440 	.word	0x40020440
 8003a6c:	40020458 	.word	0x40020458
 8003a70:	40020470 	.word	0x40020470
 8003a74:	40020488 	.word	0x40020488
 8003a78:	400204a0 	.word	0x400204a0
 8003a7c:	400204b8 	.word	0x400204b8
 8003a80:	58025408 	.word	0x58025408
 8003a84:	5802541c 	.word	0x5802541c
 8003a88:	58025430 	.word	0x58025430
 8003a8c:	58025444 	.word	0x58025444
 8003a90:	58025458 	.word	0x58025458
 8003a94:	5802546c 	.word	0x5802546c
 8003a98:	58025480 	.word	0x58025480
 8003a9c:	58025494 	.word	0x58025494
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d028      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ad4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003af6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop

08003b24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	@ 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b30:	4b67      	ldr	r3, [pc, #412]	@ (8003cd0 <HAL_DMA_IRQHandler+0x1ac>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a67      	ldr	r2, [pc, #412]	@ (8003cd4 <HAL_DMA_IRQHandler+0x1b0>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	0a9b      	lsrs	r3, r3, #10
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a5f      	ldr	r2, [pc, #380]	@ (8003cd8 <HAL_DMA_IRQHandler+0x1b4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d04a      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5d      	ldr	r2, [pc, #372]	@ (8003cdc <HAL_DMA_IRQHandler+0x1b8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d045      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ce0 <HAL_DMA_IRQHandler+0x1bc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d040      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a5a      	ldr	r2, [pc, #360]	@ (8003ce4 <HAL_DMA_IRQHandler+0x1c0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d03b      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a59      	ldr	r2, [pc, #356]	@ (8003ce8 <HAL_DMA_IRQHandler+0x1c4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d036      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a57      	ldr	r2, [pc, #348]	@ (8003cec <HAL_DMA_IRQHandler+0x1c8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d031      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a56      	ldr	r2, [pc, #344]	@ (8003cf0 <HAL_DMA_IRQHandler+0x1cc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d02c      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a54      	ldr	r2, [pc, #336]	@ (8003cf4 <HAL_DMA_IRQHandler+0x1d0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d027      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a53      	ldr	r2, [pc, #332]	@ (8003cf8 <HAL_DMA_IRQHandler+0x1d4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a51      	ldr	r2, [pc, #324]	@ (8003cfc <HAL_DMA_IRQHandler+0x1d8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01d      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a50      	ldr	r2, [pc, #320]	@ (8003d00 <HAL_DMA_IRQHandler+0x1dc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a4e      	ldr	r2, [pc, #312]	@ (8003d04 <HAL_DMA_IRQHandler+0x1e0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a4d      	ldr	r2, [pc, #308]	@ (8003d08 <HAL_DMA_IRQHandler+0x1e4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a4b      	ldr	r2, [pc, #300]	@ (8003d0c <HAL_DMA_IRQHandler+0x1e8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a4a      	ldr	r2, [pc, #296]	@ (8003d10 <HAL_DMA_IRQHandler+0x1ec>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a48      	ldr	r2, [pc, #288]	@ (8003d14 <HAL_DMA_IRQHandler+0x1f0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_DMA_IRQHandler+0xd6>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_DMA_IRQHandler+0xd8>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 842b 	beq.w	8004458 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80a2 	beq.w	8003d5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd8 <HAL_DMA_IRQHandler+0x1b4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d04a      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2d      	ldr	r2, [pc, #180]	@ (8003cdc <HAL_DMA_IRQHandler+0x1b8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d045      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce0 <HAL_DMA_IRQHandler+0x1bc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d040      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce4 <HAL_DMA_IRQHandler+0x1c0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d03b      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a28      	ldr	r2, [pc, #160]	@ (8003ce8 <HAL_DMA_IRQHandler+0x1c4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d036      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a27      	ldr	r2, [pc, #156]	@ (8003cec <HAL_DMA_IRQHandler+0x1c8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d031      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a25      	ldr	r2, [pc, #148]	@ (8003cf0 <HAL_DMA_IRQHandler+0x1cc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d02c      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a24      	ldr	r2, [pc, #144]	@ (8003cf4 <HAL_DMA_IRQHandler+0x1d0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d027      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a22      	ldr	r2, [pc, #136]	@ (8003cf8 <HAL_DMA_IRQHandler+0x1d4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d022      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a21      	ldr	r2, [pc, #132]	@ (8003cfc <HAL_DMA_IRQHandler+0x1d8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d01d      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1f      	ldr	r2, [pc, #124]	@ (8003d00 <HAL_DMA_IRQHandler+0x1dc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d018      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d04 <HAL_DMA_IRQHandler+0x1e0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1c      	ldr	r2, [pc, #112]	@ (8003d08 <HAL_DMA_IRQHandler+0x1e4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00e      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d0c <HAL_DMA_IRQHandler+0x1e8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	@ (8003d10 <HAL_DMA_IRQHandler+0x1ec>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <HAL_DMA_IRQHandler+0x1f0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d12f      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x1f4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e02e      	b.n	8003d2c <HAL_DMA_IRQHandler+0x208>
 8003cce:	bf00      	nop
 8003cd0:	2400000c 	.word	0x2400000c
 8003cd4:	1b4e81b5 	.word	0x1b4e81b5
 8003cd8:	40020010 	.word	0x40020010
 8003cdc:	40020028 	.word	0x40020028
 8003ce0:	40020040 	.word	0x40020040
 8003ce4:	40020058 	.word	0x40020058
 8003ce8:	40020070 	.word	0x40020070
 8003cec:	40020088 	.word	0x40020088
 8003cf0:	400200a0 	.word	0x400200a0
 8003cf4:	400200b8 	.word	0x400200b8
 8003cf8:	40020410 	.word	0x40020410
 8003cfc:	40020428 	.word	0x40020428
 8003d00:	40020440 	.word	0x40020440
 8003d04:	40020458 	.word	0x40020458
 8003d08:	40020470 	.word	0x40020470
 8003d0c:	40020488 	.word	0x40020488
 8003d10:	400204a0 	.word	0x400204a0
 8003d14:	400204b8 	.word	0x400204b8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0204 	bic.w	r2, r2, #4
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2208      	movs	r2, #8
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d54:	f043 0201 	orr.w	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d06e      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a69      	ldr	r2, [pc, #420]	@ (8003f1c <HAL_DMA_IRQHandler+0x3f8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d04a      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a67      	ldr	r2, [pc, #412]	@ (8003f20 <HAL_DMA_IRQHandler+0x3fc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d045      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a66      	ldr	r2, [pc, #408]	@ (8003f24 <HAL_DMA_IRQHandler+0x400>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d040      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a64      	ldr	r2, [pc, #400]	@ (8003f28 <HAL_DMA_IRQHandler+0x404>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d03b      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a63      	ldr	r2, [pc, #396]	@ (8003f2c <HAL_DMA_IRQHandler+0x408>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d036      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a61      	ldr	r2, [pc, #388]	@ (8003f30 <HAL_DMA_IRQHandler+0x40c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d031      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a60      	ldr	r2, [pc, #384]	@ (8003f34 <HAL_DMA_IRQHandler+0x410>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d02c      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a5e      	ldr	r2, [pc, #376]	@ (8003f38 <HAL_DMA_IRQHandler+0x414>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d027      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a5d      	ldr	r2, [pc, #372]	@ (8003f3c <HAL_DMA_IRQHandler+0x418>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a5b      	ldr	r2, [pc, #364]	@ (8003f40 <HAL_DMA_IRQHandler+0x41c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a5a      	ldr	r2, [pc, #360]	@ (8003f44 <HAL_DMA_IRQHandler+0x420>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a58      	ldr	r2, [pc, #352]	@ (8003f48 <HAL_DMA_IRQHandler+0x424>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a57      	ldr	r2, [pc, #348]	@ (8003f4c <HAL_DMA_IRQHandler+0x428>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a55      	ldr	r2, [pc, #340]	@ (8003f50 <HAL_DMA_IRQHandler+0x42c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a54      	ldr	r2, [pc, #336]	@ (8003f54 <HAL_DMA_IRQHandler+0x430>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	@ (8003f58 <HAL_DMA_IRQHandler+0x434>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10a      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x304>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e003      	b.n	8003e30 <HAL_DMA_IRQHandler+0x30c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e48:	f043 0202 	orr.w	r2, r3, #2
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2204      	movs	r2, #4
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 808f 	beq.w	8003f84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f1c <HAL_DMA_IRQHandler+0x3f8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d04a      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2a      	ldr	r2, [pc, #168]	@ (8003f20 <HAL_DMA_IRQHandler+0x3fc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d045      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a29      	ldr	r2, [pc, #164]	@ (8003f24 <HAL_DMA_IRQHandler+0x400>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d040      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a27      	ldr	r2, [pc, #156]	@ (8003f28 <HAL_DMA_IRQHandler+0x404>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d03b      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a26      	ldr	r2, [pc, #152]	@ (8003f2c <HAL_DMA_IRQHandler+0x408>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d036      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a24      	ldr	r2, [pc, #144]	@ (8003f30 <HAL_DMA_IRQHandler+0x40c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d031      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a23      	ldr	r2, [pc, #140]	@ (8003f34 <HAL_DMA_IRQHandler+0x410>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d02c      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a21      	ldr	r2, [pc, #132]	@ (8003f38 <HAL_DMA_IRQHandler+0x414>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d027      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a20      	ldr	r2, [pc, #128]	@ (8003f3c <HAL_DMA_IRQHandler+0x418>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d022      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f40 <HAL_DMA_IRQHandler+0x41c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d01d      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <HAL_DMA_IRQHandler+0x420>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d018      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f48 <HAL_DMA_IRQHandler+0x424>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f4c <HAL_DMA_IRQHandler+0x428>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a18      	ldr	r2, [pc, #96]	@ (8003f50 <HAL_DMA_IRQHandler+0x42c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	@ (8003f54 <HAL_DMA_IRQHandler+0x430>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a15      	ldr	r2, [pc, #84]	@ (8003f58 <HAL_DMA_IRQHandler+0x434>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d12a      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x438>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e023      	b.n	8003f64 <HAL_DMA_IRQHandler+0x440>
 8003f1c:	40020010 	.word	0x40020010
 8003f20:	40020028 	.word	0x40020028
 8003f24:	40020040 	.word	0x40020040
 8003f28:	40020058 	.word	0x40020058
 8003f2c:	40020070 	.word	0x40020070
 8003f30:	40020088 	.word	0x40020088
 8003f34:	400200a0 	.word	0x400200a0
 8003f38:	400200b8 	.word	0x400200b8
 8003f3c:	40020410 	.word	0x40020410
 8003f40:	40020428 	.word	0x40020428
 8003f44:	40020440 	.word	0x40020440
 8003f48:	40020458 	.word	0x40020458
 8003f4c:	40020470 	.word	0x40020470
 8003f50:	40020488 	.word	0x40020488
 8003f54:	400204a0 	.word	0x400204a0
 8003f58:	400204b8 	.word	0x400204b8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2204      	movs	r2, #4
 8003f72:	409a      	lsls	r2, r3
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7c:	f043 0204 	orr.w	r2, r3, #4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a6 	beq.w	80040e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a85      	ldr	r2, [pc, #532]	@ (80041b4 <HAL_DMA_IRQHandler+0x690>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d04a      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a83      	ldr	r2, [pc, #524]	@ (80041b8 <HAL_DMA_IRQHandler+0x694>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d045      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a82      	ldr	r2, [pc, #520]	@ (80041bc <HAL_DMA_IRQHandler+0x698>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d040      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a80      	ldr	r2, [pc, #512]	@ (80041c0 <HAL_DMA_IRQHandler+0x69c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d03b      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a7f      	ldr	r2, [pc, #508]	@ (80041c4 <HAL_DMA_IRQHandler+0x6a0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d036      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a7d      	ldr	r2, [pc, #500]	@ (80041c8 <HAL_DMA_IRQHandler+0x6a4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d031      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a7c      	ldr	r2, [pc, #496]	@ (80041cc <HAL_DMA_IRQHandler+0x6a8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d02c      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a7a      	ldr	r2, [pc, #488]	@ (80041d0 <HAL_DMA_IRQHandler+0x6ac>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d027      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a79      	ldr	r2, [pc, #484]	@ (80041d4 <HAL_DMA_IRQHandler+0x6b0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a77      	ldr	r2, [pc, #476]	@ (80041d8 <HAL_DMA_IRQHandler+0x6b4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01d      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a76      	ldr	r2, [pc, #472]	@ (80041dc <HAL_DMA_IRQHandler+0x6b8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a74      	ldr	r2, [pc, #464]	@ (80041e0 <HAL_DMA_IRQHandler+0x6bc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a73      	ldr	r2, [pc, #460]	@ (80041e4 <HAL_DMA_IRQHandler+0x6c0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a71      	ldr	r2, [pc, #452]	@ (80041e8 <HAL_DMA_IRQHandler+0x6c4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a70      	ldr	r2, [pc, #448]	@ (80041ec <HAL_DMA_IRQHandler+0x6c8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a6e      	ldr	r2, [pc, #440]	@ (80041f0 <HAL_DMA_IRQHandler+0x6cc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10a      	bne.n	8004050 <HAL_DMA_IRQHandler+0x52c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf14      	ite	ne
 8004048:	2301      	movne	r3, #1
 800404a:	2300      	moveq	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e009      	b.n	8004064 <HAL_DMA_IRQHandler+0x540>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf14      	ite	ne
 800405e:	2301      	movne	r3, #1
 8004060:	2300      	moveq	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d03e      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2210      	movs	r2, #16
 8004072:	409a      	lsls	r2, r3
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d108      	bne.n	80040a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d024      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
 80040a4:	e01f      	b.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01b      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
 80040b6:	e016      	b.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d107      	bne.n	80040d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0208 	bic.w	r2, r2, #8
 80040d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	2220      	movs	r2, #32
 80040f0:	409a      	lsls	r2, r3
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8110 	beq.w	800431c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2c      	ldr	r2, [pc, #176]	@ (80041b4 <HAL_DMA_IRQHandler+0x690>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d04a      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2b      	ldr	r2, [pc, #172]	@ (80041b8 <HAL_DMA_IRQHandler+0x694>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d045      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a29      	ldr	r2, [pc, #164]	@ (80041bc <HAL_DMA_IRQHandler+0x698>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d040      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a28      	ldr	r2, [pc, #160]	@ (80041c0 <HAL_DMA_IRQHandler+0x69c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d03b      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a26      	ldr	r2, [pc, #152]	@ (80041c4 <HAL_DMA_IRQHandler+0x6a0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d036      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a25      	ldr	r2, [pc, #148]	@ (80041c8 <HAL_DMA_IRQHandler+0x6a4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d031      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a23      	ldr	r2, [pc, #140]	@ (80041cc <HAL_DMA_IRQHandler+0x6a8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d02c      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a22      	ldr	r2, [pc, #136]	@ (80041d0 <HAL_DMA_IRQHandler+0x6ac>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d027      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a20      	ldr	r2, [pc, #128]	@ (80041d4 <HAL_DMA_IRQHandler+0x6b0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d022      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1f      	ldr	r2, [pc, #124]	@ (80041d8 <HAL_DMA_IRQHandler+0x6b4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d01d      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1d      	ldr	r2, [pc, #116]	@ (80041dc <HAL_DMA_IRQHandler+0x6b8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d018      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1c      	ldr	r2, [pc, #112]	@ (80041e0 <HAL_DMA_IRQHandler+0x6bc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d013      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1a      	ldr	r2, [pc, #104]	@ (80041e4 <HAL_DMA_IRQHandler+0x6c0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00e      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a19      	ldr	r2, [pc, #100]	@ (80041e8 <HAL_DMA_IRQHandler+0x6c4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a17      	ldr	r2, [pc, #92]	@ (80041ec <HAL_DMA_IRQHandler+0x6c8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a16      	ldr	r2, [pc, #88]	@ (80041f0 <HAL_DMA_IRQHandler+0x6cc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d12b      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x6d0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf14      	ite	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	2300      	moveq	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	e02a      	b.n	8004208 <HAL_DMA_IRQHandler+0x6e4>
 80041b2:	bf00      	nop
 80041b4:	40020010 	.word	0x40020010
 80041b8:	40020028 	.word	0x40020028
 80041bc:	40020040 	.word	0x40020040
 80041c0:	40020058 	.word	0x40020058
 80041c4:	40020070 	.word	0x40020070
 80041c8:	40020088 	.word	0x40020088
 80041cc:	400200a0 	.word	0x400200a0
 80041d0:	400200b8 	.word	0x400200b8
 80041d4:	40020410 	.word	0x40020410
 80041d8:	40020428 	.word	0x40020428
 80041dc:	40020440 	.word	0x40020440
 80041e0:	40020458 	.word	0x40020458
 80041e4:	40020470 	.word	0x40020470
 80041e8:	40020488 	.word	0x40020488
 80041ec:	400204a0 	.word	0x400204a0
 80041f0:	400204b8 	.word	0x400204b8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf14      	ite	ne
 8004202:	2301      	movne	r3, #1
 8004204:	2300      	moveq	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8087 	beq.w	800431c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2220      	movs	r2, #32
 8004218:	409a      	lsls	r2, r3
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b04      	cmp	r3, #4
 8004228:	d139      	bne.n	800429e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0216 	bic.w	r2, r2, #22
 8004238:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004248:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d103      	bne.n	800425a <HAL_DMA_IRQHandler+0x736>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0208 	bic.w	r2, r2, #8
 8004268:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	223f      	movs	r2, #63	@ 0x3f
 8004274:	409a      	lsls	r2, r3
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8382 	beq.w	8004998 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
          }
          return;
 800429c:	e37c      	b.n	8004998 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d018      	beq.n	80042de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d108      	bne.n	80042cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d02c      	beq.n	800431c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
 80042ca:	e027      	b.n	800431c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d023      	beq.n	800431c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
 80042dc:	e01e      	b.n	800431c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10f      	bne.n	800430c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0210 	bic.w	r2, r2, #16
 80042fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 833e 	beq.w	80049a2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8088 	beq.w	8004444 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2204      	movs	r2, #4
 8004338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a89      	ldr	r2, [pc, #548]	@ (8004568 <HAL_DMA_IRQHandler+0xa44>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d04a      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a88      	ldr	r2, [pc, #544]	@ (800456c <HAL_DMA_IRQHandler+0xa48>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d045      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a86      	ldr	r2, [pc, #536]	@ (8004570 <HAL_DMA_IRQHandler+0xa4c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d040      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a85      	ldr	r2, [pc, #532]	@ (8004574 <HAL_DMA_IRQHandler+0xa50>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d03b      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a83      	ldr	r2, [pc, #524]	@ (8004578 <HAL_DMA_IRQHandler+0xa54>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d036      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a82      	ldr	r2, [pc, #520]	@ (800457c <HAL_DMA_IRQHandler+0xa58>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d031      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a80      	ldr	r2, [pc, #512]	@ (8004580 <HAL_DMA_IRQHandler+0xa5c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02c      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7f      	ldr	r2, [pc, #508]	@ (8004584 <HAL_DMA_IRQHandler+0xa60>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d027      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7d      	ldr	r2, [pc, #500]	@ (8004588 <HAL_DMA_IRQHandler+0xa64>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d022      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7c      	ldr	r2, [pc, #496]	@ (800458c <HAL_DMA_IRQHandler+0xa68>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d01d      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a7a      	ldr	r2, [pc, #488]	@ (8004590 <HAL_DMA_IRQHandler+0xa6c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d018      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a79      	ldr	r2, [pc, #484]	@ (8004594 <HAL_DMA_IRQHandler+0xa70>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a77      	ldr	r2, [pc, #476]	@ (8004598 <HAL_DMA_IRQHandler+0xa74>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00e      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a76      	ldr	r2, [pc, #472]	@ (800459c <HAL_DMA_IRQHandler+0xa78>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d009      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a74      	ldr	r2, [pc, #464]	@ (80045a0 <HAL_DMA_IRQHandler+0xa7c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a73      	ldr	r2, [pc, #460]	@ (80045a4 <HAL_DMA_IRQHandler+0xa80>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d108      	bne.n	80043ee <HAL_DMA_IRQHandler+0x8ca>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e007      	b.n	80043fe <HAL_DMA_IRQHandler+0x8da>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004406:	429a      	cmp	r2, r3
 8004408:	d307      	bcc.n	800441a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f2      	bne.n	80043fe <HAL_DMA_IRQHandler+0x8da>
 8004418:	e000      	b.n	800441c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800441a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2203      	movs	r2, #3
 800442e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004432:	e003      	b.n	800443c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 82aa 	beq.w	80049a2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
 8004456:	e2a4      	b.n	80049a2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a52      	ldr	r2, [pc, #328]	@ (80045a8 <HAL_DMA_IRQHandler+0xa84>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d04a      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a51      	ldr	r2, [pc, #324]	@ (80045ac <HAL_DMA_IRQHandler+0xa88>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d045      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a4f      	ldr	r2, [pc, #316]	@ (80045b0 <HAL_DMA_IRQHandler+0xa8c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d040      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a4e      	ldr	r2, [pc, #312]	@ (80045b4 <HAL_DMA_IRQHandler+0xa90>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d03b      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a4c      	ldr	r2, [pc, #304]	@ (80045b8 <HAL_DMA_IRQHandler+0xa94>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d036      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a4b      	ldr	r2, [pc, #300]	@ (80045bc <HAL_DMA_IRQHandler+0xa98>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d031      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a49      	ldr	r2, [pc, #292]	@ (80045c0 <HAL_DMA_IRQHandler+0xa9c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d02c      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a48      	ldr	r2, [pc, #288]	@ (80045c4 <HAL_DMA_IRQHandler+0xaa0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d027      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a46      	ldr	r2, [pc, #280]	@ (80045c8 <HAL_DMA_IRQHandler+0xaa4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d022      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a45      	ldr	r2, [pc, #276]	@ (80045cc <HAL_DMA_IRQHandler+0xaa8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d01d      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a43      	ldr	r2, [pc, #268]	@ (80045d0 <HAL_DMA_IRQHandler+0xaac>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d018      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a42      	ldr	r2, [pc, #264]	@ (80045d4 <HAL_DMA_IRQHandler+0xab0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d013      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a40      	ldr	r2, [pc, #256]	@ (80045d8 <HAL_DMA_IRQHandler+0xab4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00e      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3f      	ldr	r2, [pc, #252]	@ (80045dc <HAL_DMA_IRQHandler+0xab8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d009      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a3d      	ldr	r2, [pc, #244]	@ (80045e0 <HAL_DMA_IRQHandler+0xabc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x9d4>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a3c      	ldr	r2, [pc, #240]	@ (80045e4 <HAL_DMA_IRQHandler+0xac0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <HAL_DMA_IRQHandler+0x9d8>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_DMA_IRQHandler+0x9da>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 824f 	beq.w	80049a2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2204      	movs	r2, #4
 8004516:	409a      	lsls	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80dd 	beq.w	80046dc <HAL_DMA_IRQHandler+0xbb8>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80d7 	beq.w	80046dc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2204      	movs	r2, #4
 8004538:	409a      	lsls	r2, r3
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d059      	beq.n	80045fc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d14a      	bne.n	80045e8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8220 	beq.w	800499c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004564:	e21a      	b.n	800499c <HAL_DMA_IRQHandler+0xe78>
 8004566:	bf00      	nop
 8004568:	40020010 	.word	0x40020010
 800456c:	40020028 	.word	0x40020028
 8004570:	40020040 	.word	0x40020040
 8004574:	40020058 	.word	0x40020058
 8004578:	40020070 	.word	0x40020070
 800457c:	40020088 	.word	0x40020088
 8004580:	400200a0 	.word	0x400200a0
 8004584:	400200b8 	.word	0x400200b8
 8004588:	40020410 	.word	0x40020410
 800458c:	40020428 	.word	0x40020428
 8004590:	40020440 	.word	0x40020440
 8004594:	40020458 	.word	0x40020458
 8004598:	40020470 	.word	0x40020470
 800459c:	40020488 	.word	0x40020488
 80045a0:	400204a0 	.word	0x400204a0
 80045a4:	400204b8 	.word	0x400204b8
 80045a8:	48022c08 	.word	0x48022c08
 80045ac:	48022c1c 	.word	0x48022c1c
 80045b0:	48022c30 	.word	0x48022c30
 80045b4:	48022c44 	.word	0x48022c44
 80045b8:	48022c58 	.word	0x48022c58
 80045bc:	48022c6c 	.word	0x48022c6c
 80045c0:	48022c80 	.word	0x48022c80
 80045c4:	48022c94 	.word	0x48022c94
 80045c8:	58025408 	.word	0x58025408
 80045cc:	5802541c 	.word	0x5802541c
 80045d0:	58025430 	.word	0x58025430
 80045d4:	58025444 	.word	0x58025444
 80045d8:	58025458 	.word	0x58025458
 80045dc:	5802546c 	.word	0x5802546c
 80045e0:	58025480 	.word	0x58025480
 80045e4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 81d5 	beq.w	800499c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045fa:	e1cf      	b.n	800499c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d160      	bne.n	80046c8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a7f      	ldr	r2, [pc, #508]	@ (8004808 <HAL_DMA_IRQHandler+0xce4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d04a      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a7d      	ldr	r2, [pc, #500]	@ (800480c <HAL_DMA_IRQHandler+0xce8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d045      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a7c      	ldr	r2, [pc, #496]	@ (8004810 <HAL_DMA_IRQHandler+0xcec>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d040      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7a      	ldr	r2, [pc, #488]	@ (8004814 <HAL_DMA_IRQHandler+0xcf0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d03b      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a79      	ldr	r2, [pc, #484]	@ (8004818 <HAL_DMA_IRQHandler+0xcf4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d036      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a77      	ldr	r2, [pc, #476]	@ (800481c <HAL_DMA_IRQHandler+0xcf8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d031      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a76      	ldr	r2, [pc, #472]	@ (8004820 <HAL_DMA_IRQHandler+0xcfc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d02c      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a74      	ldr	r2, [pc, #464]	@ (8004824 <HAL_DMA_IRQHandler+0xd00>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d027      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a73      	ldr	r2, [pc, #460]	@ (8004828 <HAL_DMA_IRQHandler+0xd04>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d022      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a71      	ldr	r2, [pc, #452]	@ (800482c <HAL_DMA_IRQHandler+0xd08>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01d      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a70      	ldr	r2, [pc, #448]	@ (8004830 <HAL_DMA_IRQHandler+0xd0c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d018      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a6e      	ldr	r2, [pc, #440]	@ (8004834 <HAL_DMA_IRQHandler+0xd10>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a6d      	ldr	r2, [pc, #436]	@ (8004838 <HAL_DMA_IRQHandler+0xd14>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a6b      	ldr	r2, [pc, #428]	@ (800483c <HAL_DMA_IRQHandler+0xd18>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a6a      	ldr	r2, [pc, #424]	@ (8004840 <HAL_DMA_IRQHandler+0xd1c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xb82>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a68      	ldr	r2, [pc, #416]	@ (8004844 <HAL_DMA_IRQHandler+0xd20>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <HAL_DMA_IRQHandler+0xb94>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0208 	bic.w	r2, r2, #8
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e007      	b.n	80046c8 <HAL_DMA_IRQHandler+0xba4>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8165 	beq.w	800499c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046da:	e15f      	b.n	800499c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2202      	movs	r2, #2
 80046e6:	409a      	lsls	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80c5 	beq.w	800487c <HAL_DMA_IRQHandler+0xd58>
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80bf 	beq.w	800487c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2202      	movs	r2, #2
 8004708:	409a      	lsls	r2, r3
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d018      	beq.n	800474a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 813a 	beq.w	80049a0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004734:	e134      	b.n	80049a0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8130 	beq.w	80049a0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004748:	e12a      	b.n	80049a0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	f040 8089 	bne.w	8004868 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2b      	ldr	r2, [pc, #172]	@ (8004808 <HAL_DMA_IRQHandler+0xce4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d04a      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a29      	ldr	r2, [pc, #164]	@ (800480c <HAL_DMA_IRQHandler+0xce8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d045      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a28      	ldr	r2, [pc, #160]	@ (8004810 <HAL_DMA_IRQHandler+0xcec>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d040      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a26      	ldr	r2, [pc, #152]	@ (8004814 <HAL_DMA_IRQHandler+0xcf0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d03b      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a25      	ldr	r2, [pc, #148]	@ (8004818 <HAL_DMA_IRQHandler+0xcf4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d036      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a23      	ldr	r2, [pc, #140]	@ (800481c <HAL_DMA_IRQHandler+0xcf8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d031      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a22      	ldr	r2, [pc, #136]	@ (8004820 <HAL_DMA_IRQHandler+0xcfc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d02c      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a20      	ldr	r2, [pc, #128]	@ (8004824 <HAL_DMA_IRQHandler+0xd00>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d027      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004828 <HAL_DMA_IRQHandler+0xd04>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1d      	ldr	r2, [pc, #116]	@ (800482c <HAL_DMA_IRQHandler+0xd08>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01d      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1c      	ldr	r2, [pc, #112]	@ (8004830 <HAL_DMA_IRQHandler+0xd0c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004834 <HAL_DMA_IRQHandler+0xd10>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a19      	ldr	r2, [pc, #100]	@ (8004838 <HAL_DMA_IRQHandler+0xd14>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a17      	ldr	r2, [pc, #92]	@ (800483c <HAL_DMA_IRQHandler+0xd18>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a16      	ldr	r2, [pc, #88]	@ (8004840 <HAL_DMA_IRQHandler+0xd1c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xcd2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a14      	ldr	r2, [pc, #80]	@ (8004844 <HAL_DMA_IRQHandler+0xd20>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d128      	bne.n	8004848 <HAL_DMA_IRQHandler+0xd24>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0214 	bic.w	r2, r2, #20
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e027      	b.n	8004858 <HAL_DMA_IRQHandler+0xd34>
 8004808:	40020010 	.word	0x40020010
 800480c:	40020028 	.word	0x40020028
 8004810:	40020040 	.word	0x40020040
 8004814:	40020058 	.word	0x40020058
 8004818:	40020070 	.word	0x40020070
 800481c:	40020088 	.word	0x40020088
 8004820:	400200a0 	.word	0x400200a0
 8004824:	400200b8 	.word	0x400200b8
 8004828:	40020410 	.word	0x40020410
 800482c:	40020428 	.word	0x40020428
 8004830:	40020440 	.word	0x40020440
 8004834:	40020458 	.word	0x40020458
 8004838:	40020470 	.word	0x40020470
 800483c:	40020488 	.word	0x40020488
 8004840:	400204a0 	.word	0x400204a0
 8004844:	400204b8 	.word	0x400204b8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 020a 	bic.w	r2, r2, #10
 8004856:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8097 	beq.w	80049a0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800487a:	e091      	b.n	80049a0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	2208      	movs	r2, #8
 8004886:	409a      	lsls	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8088 	beq.w	80049a2 <HAL_DMA_IRQHandler+0xe7e>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8082 	beq.w	80049a2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a41      	ldr	r2, [pc, #260]	@ (80049a8 <HAL_DMA_IRQHandler+0xe84>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d04a      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a3f      	ldr	r2, [pc, #252]	@ (80049ac <HAL_DMA_IRQHandler+0xe88>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d045      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3e      	ldr	r2, [pc, #248]	@ (80049b0 <HAL_DMA_IRQHandler+0xe8c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d040      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3c      	ldr	r2, [pc, #240]	@ (80049b4 <HAL_DMA_IRQHandler+0xe90>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d03b      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a3b      	ldr	r2, [pc, #236]	@ (80049b8 <HAL_DMA_IRQHandler+0xe94>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d036      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a39      	ldr	r2, [pc, #228]	@ (80049bc <HAL_DMA_IRQHandler+0xe98>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d031      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a38      	ldr	r2, [pc, #224]	@ (80049c0 <HAL_DMA_IRQHandler+0xe9c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d02c      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a36      	ldr	r2, [pc, #216]	@ (80049c4 <HAL_DMA_IRQHandler+0xea0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d027      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a35      	ldr	r2, [pc, #212]	@ (80049c8 <HAL_DMA_IRQHandler+0xea4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d022      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a33      	ldr	r2, [pc, #204]	@ (80049cc <HAL_DMA_IRQHandler+0xea8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01d      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a32      	ldr	r2, [pc, #200]	@ (80049d0 <HAL_DMA_IRQHandler+0xeac>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d018      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a30      	ldr	r2, [pc, #192]	@ (80049d4 <HAL_DMA_IRQHandler+0xeb0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2f      	ldr	r2, [pc, #188]	@ (80049d8 <HAL_DMA_IRQHandler+0xeb4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00e      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2d      	ldr	r2, [pc, #180]	@ (80049dc <HAL_DMA_IRQHandler+0xeb8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d009      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <HAL_DMA_IRQHandler+0xebc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <HAL_DMA_IRQHandler+0xe1a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2a      	ldr	r2, [pc, #168]	@ (80049e4 <HAL_DMA_IRQHandler+0xec0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <HAL_DMA_IRQHandler+0xe2c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 021c 	bic.w	r2, r2, #28
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e007      	b.n	8004960 <HAL_DMA_IRQHandler+0xe3c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 020e 	bic.w	r2, r2, #14
 800495e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	2201      	movs	r2, #1
 800496a:	409a      	lsls	r2, r3
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
 8004996:	e004      	b.n	80049a2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004998:	bf00      	nop
 800499a:	e002      	b.n	80049a2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800499c:	bf00      	nop
 800499e:	e000      	b.n	80049a2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049a2:	3728      	adds	r7, #40	@ 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40020010 	.word	0x40020010
 80049ac:	40020028 	.word	0x40020028
 80049b0:	40020040 	.word	0x40020040
 80049b4:	40020058 	.word	0x40020058
 80049b8:	40020070 	.word	0x40020070
 80049bc:	40020088 	.word	0x40020088
 80049c0:	400200a0 	.word	0x400200a0
 80049c4:	400200b8 	.word	0x400200b8
 80049c8:	40020410 	.word	0x40020410
 80049cc:	40020428 	.word	0x40020428
 80049d0:	40020440 	.word	0x40020440
 80049d4:	40020458 	.word	0x40020458
 80049d8:	40020470 	.word	0x40020470
 80049dc:	40020488 	.word	0x40020488
 80049e0:	400204a0 	.word	0x400204a0
 80049e4:	400204b8 	.word	0x400204b8

080049e8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a12:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a18:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a7f      	ldr	r2, [pc, #508]	@ (8004c1c <DMA_SetConfig+0x21c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d072      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a7d      	ldr	r2, [pc, #500]	@ (8004c20 <DMA_SetConfig+0x220>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d06d      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a7c      	ldr	r2, [pc, #496]	@ (8004c24 <DMA_SetConfig+0x224>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d068      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a7a      	ldr	r2, [pc, #488]	@ (8004c28 <DMA_SetConfig+0x228>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d063      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a79      	ldr	r2, [pc, #484]	@ (8004c2c <DMA_SetConfig+0x22c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d05e      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a77      	ldr	r2, [pc, #476]	@ (8004c30 <DMA_SetConfig+0x230>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d059      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a76      	ldr	r2, [pc, #472]	@ (8004c34 <DMA_SetConfig+0x234>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d054      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a74      	ldr	r2, [pc, #464]	@ (8004c38 <DMA_SetConfig+0x238>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d04f      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a73      	ldr	r2, [pc, #460]	@ (8004c3c <DMA_SetConfig+0x23c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d04a      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a71      	ldr	r2, [pc, #452]	@ (8004c40 <DMA_SetConfig+0x240>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d045      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a70      	ldr	r2, [pc, #448]	@ (8004c44 <DMA_SetConfig+0x244>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d040      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8004c48 <DMA_SetConfig+0x248>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d03b      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a6d      	ldr	r2, [pc, #436]	@ (8004c4c <DMA_SetConfig+0x24c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d036      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a6b      	ldr	r2, [pc, #428]	@ (8004c50 <DMA_SetConfig+0x250>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d031      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a6a      	ldr	r2, [pc, #424]	@ (8004c54 <DMA_SetConfig+0x254>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d02c      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a68      	ldr	r2, [pc, #416]	@ (8004c58 <DMA_SetConfig+0x258>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d027      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a67      	ldr	r2, [pc, #412]	@ (8004c5c <DMA_SetConfig+0x25c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a65      	ldr	r2, [pc, #404]	@ (8004c60 <DMA_SetConfig+0x260>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a64      	ldr	r2, [pc, #400]	@ (8004c64 <DMA_SetConfig+0x264>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a62      	ldr	r2, [pc, #392]	@ (8004c68 <DMA_SetConfig+0x268>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a61      	ldr	r2, [pc, #388]	@ (8004c6c <DMA_SetConfig+0x26c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a5f      	ldr	r2, [pc, #380]	@ (8004c70 <DMA_SetConfig+0x270>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a5e      	ldr	r2, [pc, #376]	@ (8004c74 <DMA_SetConfig+0x274>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <DMA_SetConfig+0x10a>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a5c      	ldr	r2, [pc, #368]	@ (8004c78 <DMA_SetConfig+0x278>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <DMA_SetConfig+0x10e>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <DMA_SetConfig+0x110>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00d      	beq.n	8004b30 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b1c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d004      	beq.n	8004b30 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b2e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a39      	ldr	r2, [pc, #228]	@ (8004c1c <DMA_SetConfig+0x21c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d04a      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a38      	ldr	r2, [pc, #224]	@ (8004c20 <DMA_SetConfig+0x220>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d045      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a36      	ldr	r2, [pc, #216]	@ (8004c24 <DMA_SetConfig+0x224>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d040      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a35      	ldr	r2, [pc, #212]	@ (8004c28 <DMA_SetConfig+0x228>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d03b      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a33      	ldr	r2, [pc, #204]	@ (8004c2c <DMA_SetConfig+0x22c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d036      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a32      	ldr	r2, [pc, #200]	@ (8004c30 <DMA_SetConfig+0x230>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d031      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a30      	ldr	r2, [pc, #192]	@ (8004c34 <DMA_SetConfig+0x234>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d02c      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004c38 <DMA_SetConfig+0x238>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d027      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2d      	ldr	r2, [pc, #180]	@ (8004c3c <DMA_SetConfig+0x23c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d022      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004c40 <DMA_SetConfig+0x240>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d01d      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2a      	ldr	r2, [pc, #168]	@ (8004c44 <DMA_SetConfig+0x244>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d018      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a29      	ldr	r2, [pc, #164]	@ (8004c48 <DMA_SetConfig+0x248>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d013      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a27      	ldr	r2, [pc, #156]	@ (8004c4c <DMA_SetConfig+0x24c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00e      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a26      	ldr	r2, [pc, #152]	@ (8004c50 <DMA_SetConfig+0x250>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d009      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a24      	ldr	r2, [pc, #144]	@ (8004c54 <DMA_SetConfig+0x254>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <DMA_SetConfig+0x1d0>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a23      	ldr	r2, [pc, #140]	@ (8004c58 <DMA_SetConfig+0x258>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <DMA_SetConfig+0x1d4>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <DMA_SetConfig+0x1d6>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d059      	beq.n	8004c8e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	223f      	movs	r2, #63	@ 0x3f
 8004be4:	409a      	lsls	r2, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b40      	cmp	r3, #64	@ 0x40
 8004c08:	d138      	bne.n	8004c7c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c1a:	e0ae      	b.n	8004d7a <DMA_SetConfig+0x37a>
 8004c1c:	40020010 	.word	0x40020010
 8004c20:	40020028 	.word	0x40020028
 8004c24:	40020040 	.word	0x40020040
 8004c28:	40020058 	.word	0x40020058
 8004c2c:	40020070 	.word	0x40020070
 8004c30:	40020088 	.word	0x40020088
 8004c34:	400200a0 	.word	0x400200a0
 8004c38:	400200b8 	.word	0x400200b8
 8004c3c:	40020410 	.word	0x40020410
 8004c40:	40020428 	.word	0x40020428
 8004c44:	40020440 	.word	0x40020440
 8004c48:	40020458 	.word	0x40020458
 8004c4c:	40020470 	.word	0x40020470
 8004c50:	40020488 	.word	0x40020488
 8004c54:	400204a0 	.word	0x400204a0
 8004c58:	400204b8 	.word	0x400204b8
 8004c5c:	58025408 	.word	0x58025408
 8004c60:	5802541c 	.word	0x5802541c
 8004c64:	58025430 	.word	0x58025430
 8004c68:	58025444 	.word	0x58025444
 8004c6c:	58025458 	.word	0x58025458
 8004c70:	5802546c 	.word	0x5802546c
 8004c74:	58025480 	.word	0x58025480
 8004c78:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	60da      	str	r2, [r3, #12]
}
 8004c8c:	e075      	b.n	8004d7a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a3d      	ldr	r2, [pc, #244]	@ (8004d88 <DMA_SetConfig+0x388>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d04a      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d8c <DMA_SetConfig+0x38c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d045      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a3a      	ldr	r2, [pc, #232]	@ (8004d90 <DMA_SetConfig+0x390>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d040      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a38      	ldr	r2, [pc, #224]	@ (8004d94 <DMA_SetConfig+0x394>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d03b      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a37      	ldr	r2, [pc, #220]	@ (8004d98 <DMA_SetConfig+0x398>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d036      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a35      	ldr	r2, [pc, #212]	@ (8004d9c <DMA_SetConfig+0x39c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d031      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a34      	ldr	r2, [pc, #208]	@ (8004da0 <DMA_SetConfig+0x3a0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d02c      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a32      	ldr	r2, [pc, #200]	@ (8004da4 <DMA_SetConfig+0x3a4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d027      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a31      	ldr	r2, [pc, #196]	@ (8004da8 <DMA_SetConfig+0x3a8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d022      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a2f      	ldr	r2, [pc, #188]	@ (8004dac <DMA_SetConfig+0x3ac>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01d      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2e      	ldr	r2, [pc, #184]	@ (8004db0 <DMA_SetConfig+0x3b0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d018      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a2c      	ldr	r2, [pc, #176]	@ (8004db4 <DMA_SetConfig+0x3b4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004db8 <DMA_SetConfig+0x3b8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a29      	ldr	r2, [pc, #164]	@ (8004dbc <DMA_SetConfig+0x3bc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a28      	ldr	r2, [pc, #160]	@ (8004dc0 <DMA_SetConfig+0x3c0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <DMA_SetConfig+0x32e>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a26      	ldr	r2, [pc, #152]	@ (8004dc4 <DMA_SetConfig+0x3c4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <DMA_SetConfig+0x332>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <DMA_SetConfig+0x334>
 8004d32:	2300      	movs	r3, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d020      	beq.n	8004d7a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	2201      	movs	r2, #1
 8004d42:	409a      	lsls	r2, r3
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b40      	cmp	r3, #64	@ 0x40
 8004d56:	d108      	bne.n	8004d6a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	60da      	str	r2, [r3, #12]
}
 8004d68:	e007      	b.n	8004d7a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	60da      	str	r2, [r3, #12]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	48022c08 	.word	0x48022c08
 8004d8c:	48022c1c 	.word	0x48022c1c
 8004d90:	48022c30 	.word	0x48022c30
 8004d94:	48022c44 	.word	0x48022c44
 8004d98:	48022c58 	.word	0x48022c58
 8004d9c:	48022c6c 	.word	0x48022c6c
 8004da0:	48022c80 	.word	0x48022c80
 8004da4:	48022c94 	.word	0x48022c94
 8004da8:	58025408 	.word	0x58025408
 8004dac:	5802541c 	.word	0x5802541c
 8004db0:	58025430 	.word	0x58025430
 8004db4:	58025444 	.word	0x58025444
 8004db8:	58025458 	.word	0x58025458
 8004dbc:	5802546c 	.word	0x5802546c
 8004dc0:	58025480 	.word	0x58025480
 8004dc4:	58025494 	.word	0x58025494

08004dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a42      	ldr	r2, [pc, #264]	@ (8004ee0 <DMA_CalcBaseAndBitshift+0x118>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d04a      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a41      	ldr	r2, [pc, #260]	@ (8004ee4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d045      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3f      	ldr	r2, [pc, #252]	@ (8004ee8 <DMA_CalcBaseAndBitshift+0x120>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d040      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3e      	ldr	r2, [pc, #248]	@ (8004eec <DMA_CalcBaseAndBitshift+0x124>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d03b      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a3c      	ldr	r2, [pc, #240]	@ (8004ef0 <DMA_CalcBaseAndBitshift+0x128>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d036      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d031      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a39      	ldr	r2, [pc, #228]	@ (8004ef8 <DMA_CalcBaseAndBitshift+0x130>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02c      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a38      	ldr	r2, [pc, #224]	@ (8004efc <DMA_CalcBaseAndBitshift+0x134>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d027      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a36      	ldr	r2, [pc, #216]	@ (8004f00 <DMA_CalcBaseAndBitshift+0x138>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d022      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a35      	ldr	r2, [pc, #212]	@ (8004f04 <DMA_CalcBaseAndBitshift+0x13c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d01d      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a33      	ldr	r2, [pc, #204]	@ (8004f08 <DMA_CalcBaseAndBitshift+0x140>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d018      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a32      	ldr	r2, [pc, #200]	@ (8004f0c <DMA_CalcBaseAndBitshift+0x144>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a30      	ldr	r2, [pc, #192]	@ (8004f10 <DMA_CalcBaseAndBitshift+0x148>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00e      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2f      	ldr	r2, [pc, #188]	@ (8004f14 <DMA_CalcBaseAndBitshift+0x14c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2d      	ldr	r2, [pc, #180]	@ (8004f18 <DMA_CalcBaseAndBitshift+0x150>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <DMA_CalcBaseAndBitshift+0xa8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f1c <DMA_CalcBaseAndBitshift+0x154>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d101      	bne.n	8004e74 <DMA_CalcBaseAndBitshift+0xac>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <DMA_CalcBaseAndBitshift+0xae>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d024      	beq.n	8004ec4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	3b10      	subs	r3, #16
 8004e82:	4a27      	ldr	r2, [pc, #156]	@ (8004f20 <DMA_CalcBaseAndBitshift+0x158>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	4a24      	ldr	r2, [pc, #144]	@ (8004f24 <DMA_CalcBaseAndBitshift+0x15c>)
 8004e94:	5cd3      	ldrb	r3, [r2, r3]
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d908      	bls.n	8004eb4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f28 <DMA_CalcBaseAndBitshift+0x160>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	1d1a      	adds	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004eb2:	e00d      	b.n	8004ed0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4b1b      	ldr	r3, [pc, #108]	@ (8004f28 <DMA_CalcBaseAndBitshift+0x160>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ec2:	e005      	b.n	8004ed0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40020010 	.word	0x40020010
 8004ee4:	40020028 	.word	0x40020028
 8004ee8:	40020040 	.word	0x40020040
 8004eec:	40020058 	.word	0x40020058
 8004ef0:	40020070 	.word	0x40020070
 8004ef4:	40020088 	.word	0x40020088
 8004ef8:	400200a0 	.word	0x400200a0
 8004efc:	400200b8 	.word	0x400200b8
 8004f00:	40020410 	.word	0x40020410
 8004f04:	40020428 	.word	0x40020428
 8004f08:	40020440 	.word	0x40020440
 8004f0c:	40020458 	.word	0x40020458
 8004f10:	40020470 	.word	0x40020470
 8004f14:	40020488 	.word	0x40020488
 8004f18:	400204a0 	.word	0x400204a0
 8004f1c:	400204b8 	.word	0x400204b8
 8004f20:	aaaaaaab 	.word	0xaaaaaaab
 8004f24:	0800ed04 	.word	0x0800ed04
 8004f28:	fffffc00 	.word	0xfffffc00

08004f2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d120      	bne.n	8004f82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d858      	bhi.n	8004ffa <DMA_CheckFifoParam+0xce>
 8004f48:	a201      	add	r2, pc, #4	@ (adr r2, 8004f50 <DMA_CheckFifoParam+0x24>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f73 	.word	0x08004f73
 8004f58:	08004f61 	.word	0x08004f61
 8004f5c:	08004ffb 	.word	0x08004ffb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d048      	beq.n	8004ffe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f70:	e045      	b.n	8004ffe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f7a:	d142      	bne.n	8005002 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f80:	e03f      	b.n	8005002 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f8a:	d123      	bne.n	8004fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d838      	bhi.n	8005006 <DMA_CheckFifoParam+0xda>
 8004f94:	a201      	add	r2, pc, #4	@ (adr r2, 8004f9c <DMA_CheckFifoParam+0x70>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fad 	.word	0x08004fad
 8004fa0:	08004fb3 	.word	0x08004fb3
 8004fa4:	08004fad 	.word	0x08004fad
 8004fa8:	08004fc5 	.word	0x08004fc5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
        break;
 8004fb0:	e030      	b.n	8005014 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d025      	beq.n	800500a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fc2:	e022      	b.n	800500a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fcc:	d11f      	bne.n	800500e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fd2:	e01c      	b.n	800500e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d902      	bls.n	8004fe2 <DMA_CheckFifoParam+0xb6>
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d003      	beq.n	8004fe8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004fe0:	e018      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fe6:	e015      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8004ff8:	e00b      	b.n	8005012 <DMA_CheckFifoParam+0xe6>
        break;
 8004ffa:	bf00      	nop
 8004ffc:	e00a      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        break;
 8004ffe:	bf00      	nop
 8005000:	e008      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        break;
 8005002:	bf00      	nop
 8005004:	e006      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        break;
 8005006:	bf00      	nop
 8005008:	e004      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        break;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
        break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <DMA_CheckFifoParam+0xe8>
    break;
 8005012:	bf00      	nop
    }
  }

  return status;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop

08005024 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a38      	ldr	r2, [pc, #224]	@ (8005118 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d022      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a36      	ldr	r2, [pc, #216]	@ (800511c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01d      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a35      	ldr	r2, [pc, #212]	@ (8005120 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d018      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a33      	ldr	r2, [pc, #204]	@ (8005124 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a32      	ldr	r2, [pc, #200]	@ (8005128 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00e      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a30      	ldr	r2, [pc, #192]	@ (800512c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d009      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2f      	ldr	r2, [pc, #188]	@ (8005130 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d004      	beq.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2d      	ldr	r2, [pc, #180]	@ (8005134 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d101      	bne.n	8005086 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01a      	beq.n	80050c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	3b08      	subs	r3, #8
 8005094:	4a28      	ldr	r2, [pc, #160]	@ (8005138 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4b26      	ldr	r3, [pc, #152]	@ (800513c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	461a      	mov	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a24      	ldr	r2, [pc, #144]	@ (8005140 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80050b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	2201      	movs	r2, #1
 80050ba:	409a      	lsls	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80050c0:	e024      	b.n	800510c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	3b10      	subs	r3, #16
 80050ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005144 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005148 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d806      	bhi.n	80050ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a1b      	ldr	r2, [pc, #108]	@ (800514c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d902      	bls.n	80050ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3308      	adds	r3, #8
 80050e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4b18      	ldr	r3, [pc, #96]	@ (8005150 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	461a      	mov	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a16      	ldr	r2, [pc, #88]	@ (8005154 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80050fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	2201      	movs	r2, #1
 8005106:	409a      	lsls	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	58025408 	.word	0x58025408
 800511c:	5802541c 	.word	0x5802541c
 8005120:	58025430 	.word	0x58025430
 8005124:	58025444 	.word	0x58025444
 8005128:	58025458 	.word	0x58025458
 800512c:	5802546c 	.word	0x5802546c
 8005130:	58025480 	.word	0x58025480
 8005134:	58025494 	.word	0x58025494
 8005138:	cccccccd 	.word	0xcccccccd
 800513c:	16009600 	.word	0x16009600
 8005140:	58025880 	.word	0x58025880
 8005144:	aaaaaaab 	.word	0xaaaaaaab
 8005148:	400204b8 	.word	0x400204b8
 800514c:	4002040f 	.word	0x4002040f
 8005150:	10008200 	.word	0x10008200
 8005154:	40020880 	.word	0x40020880

08005158 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d04a      	beq.n	8005204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d847      	bhi.n	8005204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a25      	ldr	r2, [pc, #148]	@ (8005210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d022      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a24      	ldr	r2, [pc, #144]	@ (8005214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d01d      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a22      	ldr	r2, [pc, #136]	@ (8005218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d018      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a21      	ldr	r2, [pc, #132]	@ (800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1b      	ldr	r2, [pc, #108]	@ (800522c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d101      	bne.n	80051c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80051c8:	2300      	movs	r3, #0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4b17      	ldr	r3, [pc, #92]	@ (8005230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a15      	ldr	r2, [pc, #84]	@ (8005234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80051e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80051e2:	e009      	b.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4b14      	ldr	r3, [pc, #80]	@ (8005238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	461a      	mov	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a11      	ldr	r2, [pc, #68]	@ (800523c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80051f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	2201      	movs	r2, #1
 80051fe:	409a      	lsls	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	58025408 	.word	0x58025408
 8005214:	5802541c 	.word	0x5802541c
 8005218:	58025430 	.word	0x58025430
 800521c:	58025444 	.word	0x58025444
 8005220:	58025458 	.word	0x58025458
 8005224:	5802546c 	.word	0x5802546c
 8005228:	58025480 	.word	0x58025480
 800522c:	58025494 	.word	0x58025494
 8005230:	1600963f 	.word	0x1600963f
 8005234:	58025940 	.word	0x58025940
 8005238:	1000823f 	.word	0x1000823f
 800523c:	40020940 	.word	0x40020940

08005240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005240:	b480      	push	{r7}
 8005242:	b089      	sub	sp, #36	@ 0x24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800524a:	2300      	movs	r3, #0
 800524c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800524e:	4b89      	ldr	r3, [pc, #548]	@ (8005474 <HAL_GPIO_Init+0x234>)
 8005250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005252:	e194      	b.n	800557e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	2101      	movs	r1, #1
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	fa01 f303 	lsl.w	r3, r1, r3
 8005260:	4013      	ands	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 8186 	beq.w	8005578 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b01      	cmp	r3, #1
 8005276:	d005      	beq.n	8005284 <HAL_GPIO_Init+0x44>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d130      	bne.n	80052e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	2203      	movs	r2, #3
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	43db      	mvns	r3, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4013      	ands	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052ba:	2201      	movs	r2, #1
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	43db      	mvns	r3, r3
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	4013      	ands	r3, r2
 80052c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	f003 0201 	and.w	r2, r3, #1
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d017      	beq.n	8005322 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	2203      	movs	r2, #3
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	43db      	mvns	r3, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4013      	ands	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	fa02 f303 	lsl.w	r3, r2, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d123      	bne.n	8005376 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	08da      	lsrs	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3208      	adds	r2, #8
 8005336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	220f      	movs	r2, #15
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	4313      	orrs	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	08da      	lsrs	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3208      	adds	r2, #8
 8005370:	69b9      	ldr	r1, [r7, #24]
 8005372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	2203      	movs	r2, #3
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43db      	mvns	r3, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4013      	ands	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0203 	and.w	r2, r3, #3
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80e0 	beq.w	8005578 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005478 <HAL_GPIO_Init+0x238>)
 80053ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80053be:	4a2e      	ldr	r2, [pc, #184]	@ (8005478 <HAL_GPIO_Init+0x238>)
 80053c0:	f043 0302 	orr.w	r3, r3, #2
 80053c4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80053c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005478 <HAL_GPIO_Init+0x238>)
 80053ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053d6:	4a29      	ldr	r2, [pc, #164]	@ (800547c <HAL_GPIO_Init+0x23c>)
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	089b      	lsrs	r3, r3, #2
 80053dc:	3302      	adds	r3, #2
 80053de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	220f      	movs	r2, #15
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	4013      	ands	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a20      	ldr	r2, [pc, #128]	@ (8005480 <HAL_GPIO_Init+0x240>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d052      	beq.n	80054a8 <HAL_GPIO_Init+0x268>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1f      	ldr	r2, [pc, #124]	@ (8005484 <HAL_GPIO_Init+0x244>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d031      	beq.n	800546e <HAL_GPIO_Init+0x22e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1e      	ldr	r2, [pc, #120]	@ (8005488 <HAL_GPIO_Init+0x248>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d02b      	beq.n	800546a <HAL_GPIO_Init+0x22a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1d      	ldr	r2, [pc, #116]	@ (800548c <HAL_GPIO_Init+0x24c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d025      	beq.n	8005466 <HAL_GPIO_Init+0x226>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a1c      	ldr	r2, [pc, #112]	@ (8005490 <HAL_GPIO_Init+0x250>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01f      	beq.n	8005462 <HAL_GPIO_Init+0x222>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a1b      	ldr	r2, [pc, #108]	@ (8005494 <HAL_GPIO_Init+0x254>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d019      	beq.n	800545e <HAL_GPIO_Init+0x21e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a1a      	ldr	r2, [pc, #104]	@ (8005498 <HAL_GPIO_Init+0x258>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <HAL_GPIO_Init+0x21a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a19      	ldr	r2, [pc, #100]	@ (800549c <HAL_GPIO_Init+0x25c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00d      	beq.n	8005456 <HAL_GPIO_Init+0x216>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a18      	ldr	r2, [pc, #96]	@ (80054a0 <HAL_GPIO_Init+0x260>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d007      	beq.n	8005452 <HAL_GPIO_Init+0x212>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a17      	ldr	r2, [pc, #92]	@ (80054a4 <HAL_GPIO_Init+0x264>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <HAL_GPIO_Init+0x20e>
 800544a:	2309      	movs	r3, #9
 800544c:	e02d      	b.n	80054aa <HAL_GPIO_Init+0x26a>
 800544e:	230a      	movs	r3, #10
 8005450:	e02b      	b.n	80054aa <HAL_GPIO_Init+0x26a>
 8005452:	2308      	movs	r3, #8
 8005454:	e029      	b.n	80054aa <HAL_GPIO_Init+0x26a>
 8005456:	2307      	movs	r3, #7
 8005458:	e027      	b.n	80054aa <HAL_GPIO_Init+0x26a>
 800545a:	2306      	movs	r3, #6
 800545c:	e025      	b.n	80054aa <HAL_GPIO_Init+0x26a>
 800545e:	2305      	movs	r3, #5
 8005460:	e023      	b.n	80054aa <HAL_GPIO_Init+0x26a>
 8005462:	2304      	movs	r3, #4
 8005464:	e021      	b.n	80054aa <HAL_GPIO_Init+0x26a>
 8005466:	2303      	movs	r3, #3
 8005468:	e01f      	b.n	80054aa <HAL_GPIO_Init+0x26a>
 800546a:	2302      	movs	r3, #2
 800546c:	e01d      	b.n	80054aa <HAL_GPIO_Init+0x26a>
 800546e:	2301      	movs	r3, #1
 8005470:	e01b      	b.n	80054aa <HAL_GPIO_Init+0x26a>
 8005472:	bf00      	nop
 8005474:	58000080 	.word	0x58000080
 8005478:	58024400 	.word	0x58024400
 800547c:	58000400 	.word	0x58000400
 8005480:	58020000 	.word	0x58020000
 8005484:	58020400 	.word	0x58020400
 8005488:	58020800 	.word	0x58020800
 800548c:	58020c00 	.word	0x58020c00
 8005490:	58021000 	.word	0x58021000
 8005494:	58021400 	.word	0x58021400
 8005498:	58021800 	.word	0x58021800
 800549c:	58021c00 	.word	0x58021c00
 80054a0:	58022000 	.word	0x58022000
 80054a4:	58022400 	.word	0x58022400
 80054a8:	2300      	movs	r3, #0
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	f002 0203 	and.w	r2, r2, #3
 80054b0:	0092      	lsls	r2, r2, #2
 80054b2:	4093      	lsls	r3, r2
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054ba:	4938      	ldr	r1, [pc, #224]	@ (800559c <HAL_GPIO_Init+0x35c>)
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	089b      	lsrs	r3, r3, #2
 80054c0:	3302      	adds	r3, #2
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	43db      	mvns	r3, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80054ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80054f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800551c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	43db      	mvns	r3, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	43db      	mvns	r3, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4013      	ands	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	3301      	adds	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	f47f ae63 	bne.w	8005254 <HAL_GPIO_Init+0x14>
  }
}
 800558e:	bf00      	nop
 8005590:	bf00      	nop
 8005592:	3724      	adds	r7, #36	@ 0x24
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	58000400 	.word	0x58000400

080055a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	807b      	strh	r3, [r7, #2]
 80055ac:	4613      	mov	r3, r2
 80055ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055b0:	787b      	ldrb	r3, [r7, #1]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055b6:	887a      	ldrh	r2, [r7, #2]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80055bc:	e003      	b.n	80055c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80055be:	887b      	ldrh	r3, [r7, #2]
 80055c0:	041a      	lsls	r2, r3, #16
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	619a      	str	r2, [r3, #24]
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e08b      	b.n	80056fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fb f9ea 	bl	80009d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2224      	movs	r2, #36	@ 0x24
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0201 	bic.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005624:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005634:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d107      	bne.n	800564e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800564a:	609a      	str	r2, [r3, #8]
 800564c:	e006      	b.n	800565c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800565a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d108      	bne.n	8005676 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	e007      	b.n	8005686 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	4b1d      	ldr	r3, [pc, #116]	@ (8005708 <HAL_I2C_Init+0x134>)
 8005692:	430b      	orrs	r3, r1
 8005694:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68da      	ldr	r2, [r3, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69d9      	ldr	r1, [r3, #28]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1a      	ldr	r2, [r3, #32]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	02008000 	.word	0x02008000

0800570c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b20      	cmp	r3, #32
 8005720:	d138      	bne.n	8005794 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800572c:	2302      	movs	r3, #2
 800572e:	e032      	b.n	8005796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2224      	movs	r2, #36	@ 0x24
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800575e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	e000      	b.n	8005796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005794:	2302      	movs	r3, #2
  }
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d139      	bne.n	800582c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e033      	b.n	800582e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2224      	movs	r2, #36	@ 0x24
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80057f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	e000      	b.n	800582e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800582c:	2302      	movs	r3, #2
  }
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005844:	4b29      	ldr	r3, [pc, #164]	@ (80058ec <HAL_PWREx_ConfigSupply+0xb0>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	2b06      	cmp	r3, #6
 800584e:	d00a      	beq.n	8005866 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005850:	4b26      	ldr	r3, [pc, #152]	@ (80058ec <HAL_PWREx_ConfigSupply+0xb0>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d001      	beq.n	8005862 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e040      	b.n	80058e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	e03e      	b.n	80058e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005866:	4b21      	ldr	r3, [pc, #132]	@ (80058ec <HAL_PWREx_ConfigSupply+0xb0>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800586e:	491f      	ldr	r1, [pc, #124]	@ (80058ec <HAL_PWREx_ConfigSupply+0xb0>)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4313      	orrs	r3, r2
 8005874:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005876:	f7fc fc41 	bl	80020fc <HAL_GetTick>
 800587a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800587c:	e009      	b.n	8005892 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800587e:	f7fc fc3d 	bl	80020fc <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800588c:	d901      	bls.n	8005892 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e028      	b.n	80058e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005892:	4b16      	ldr	r3, [pc, #88]	@ (80058ec <HAL_PWREx_ConfigSupply+0xb0>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800589a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800589e:	d1ee      	bne.n	800587e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b1e      	cmp	r3, #30
 80058a4:	d008      	beq.n	80058b8 <HAL_PWREx_ConfigSupply+0x7c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80058aa:	d005      	beq.n	80058b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b1d      	cmp	r3, #29
 80058b0:	d002      	beq.n	80058b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80058b6:	d114      	bne.n	80058e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80058b8:	f7fc fc20 	bl	80020fc <HAL_GetTick>
 80058bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80058be:	e009      	b.n	80058d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058c0:	f7fc fc1c 	bl	80020fc <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058ce:	d901      	bls.n	80058d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e007      	b.n	80058e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80058d4:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <HAL_PWREx_ConfigSupply+0xb0>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e0:	d1ee      	bne.n	80058c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	58024800 	.word	0x58024800

080058f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	@ 0x30
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f000 bc1f 	b.w	8006142 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80b3 	beq.w	8005a78 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005912:	4b95      	ldr	r3, [pc, #596]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800591a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800591c:	4b92      	ldr	r3, [pc, #584]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 800591e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005920:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005924:	2b10      	cmp	r3, #16
 8005926:	d007      	beq.n	8005938 <HAL_RCC_OscConfig+0x48>
 8005928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592a:	2b18      	cmp	r3, #24
 800592c:	d112      	bne.n	8005954 <HAL_RCC_OscConfig+0x64>
 800592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d10d      	bne.n	8005954 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005938:	4b8b      	ldr	r3, [pc, #556]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8098 	beq.w	8005a76 <HAL_RCC_OscConfig+0x186>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 8093 	bne.w	8005a76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e3f6      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800595c:	d106      	bne.n	800596c <HAL_RCC_OscConfig+0x7c>
 800595e:	4b82      	ldr	r3, [pc, #520]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a81      	ldr	r2, [pc, #516]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e058      	b.n	8005a1e <HAL_RCC_OscConfig+0x12e>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d112      	bne.n	800599a <HAL_RCC_OscConfig+0xaa>
 8005974:	4b7c      	ldr	r3, [pc, #496]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a7b      	ldr	r2, [pc, #492]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 800597a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	4b79      	ldr	r3, [pc, #484]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a78      	ldr	r2, [pc, #480]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005986:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	4b76      	ldr	r3, [pc, #472]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a75      	ldr	r2, [pc, #468]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	e041      	b.n	8005a1e <HAL_RCC_OscConfig+0x12e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059a2:	d112      	bne.n	80059ca <HAL_RCC_OscConfig+0xda>
 80059a4:	4b70      	ldr	r3, [pc, #448]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a6f      	ldr	r2, [pc, #444]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4b6d      	ldr	r3, [pc, #436]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6c      	ldr	r2, [pc, #432]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059b6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a69      	ldr	r2, [pc, #420]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e029      	b.n	8005a1e <HAL_RCC_OscConfig+0x12e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80059d2:	d112      	bne.n	80059fa <HAL_RCC_OscConfig+0x10a>
 80059d4:	4b64      	ldr	r3, [pc, #400]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a63      	ldr	r2, [pc, #396]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	4b61      	ldr	r3, [pc, #388]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a60      	ldr	r2, [pc, #384]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	4b5e      	ldr	r3, [pc, #376]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	e011      	b.n	8005a1e <HAL_RCC_OscConfig+0x12e>
 80059fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a5a      	ldr	r2, [pc, #360]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005a00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	4b58      	ldr	r3, [pc, #352]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a57      	ldr	r2, [pc, #348]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005a0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4b55      	ldr	r3, [pc, #340]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a54      	ldr	r2, [pc, #336]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005a18:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005a1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d013      	beq.n	8005a4e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7fc fb69 	bl	80020fc <HAL_GetTick>
 8005a2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a2e:	f7fc fb65 	bl	80020fc <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b64      	cmp	r3, #100	@ 0x64
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e380      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a40:	4b49      	ldr	r3, [pc, #292]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x13e>
 8005a4c:	e014      	b.n	8005a78 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4e:	f7fc fb55 	bl	80020fc <HAL_GetTick>
 8005a52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a56:	f7fc fb51 	bl	80020fc <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b64      	cmp	r3, #100	@ 0x64
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e36c      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a68:	4b3f      	ldr	r3, [pc, #252]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1f0      	bne.n	8005a56 <HAL_RCC_OscConfig+0x166>
 8005a74:	e000      	b.n	8005a78 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 808c 	beq.w	8005b9e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a86:	4b38      	ldr	r3, [pc, #224]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a8e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a90:	4b35      	ldr	r3, [pc, #212]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a94:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <HAL_RCC_OscConfig+0x1bc>
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b18      	cmp	r3, #24
 8005aa0:	d137      	bne.n	8005b12 <HAL_RCC_OscConfig+0x222>
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d132      	bne.n	8005b12 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aac:	4b2e      	ldr	r3, [pc, #184]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x1d4>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e33e      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ac4:	4b28      	ldr	r3, [pc, #160]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f023 0219 	bic.w	r2, r3, #25
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4925      	ldr	r1, [pc, #148]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad6:	f7fc fb11 	bl	80020fc <HAL_GetTick>
 8005ada:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ade:	f7fc fb0d 	bl	80020fc <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e328      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005af0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f0      	beq.n	8005ade <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005afc:	4b1a      	ldr	r3, [pc, #104]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	061b      	lsls	r3, r3, #24
 8005b0a:	4917      	ldr	r1, [pc, #92]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b10:	e045      	b.n	8005b9e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d028      	beq.n	8005b6c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b1a:	4b13      	ldr	r3, [pc, #76]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 0219 	bic.w	r2, r3, #25
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	4910      	ldr	r1, [pc, #64]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2c:	f7fc fae6 	bl	80020fc <HAL_GetTick>
 8005b30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b34:	f7fc fae2 	bl	80020fc <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e2fd      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b46:	4b08      	ldr	r3, [pc, #32]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b52:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	061b      	lsls	r3, r3, #24
 8005b60:	4901      	ldr	r1, [pc, #4]	@ (8005b68 <HAL_RCC_OscConfig+0x278>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	604b      	str	r3, [r1, #4]
 8005b66:	e01a      	b.n	8005b9e <HAL_RCC_OscConfig+0x2ae>
 8005b68:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b6c:	4b97      	ldr	r3, [pc, #604]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a96      	ldr	r2, [pc, #600]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005b72:	f023 0301 	bic.w	r3, r3, #1
 8005b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fc fac0 	bl	80020fc <HAL_GetTick>
 8005b7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b80:	f7fc fabc 	bl	80020fc <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e2d7      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b92:	4b8e      	ldr	r3, [pc, #568]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d06a      	beq.n	8005c80 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005baa:	4b88      	ldr	r3, [pc, #544]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bb4:	4b85      	ldr	r3, [pc, #532]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d007      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x2e0>
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b18      	cmp	r3, #24
 8005bc4:	d11b      	bne.n	8005bfe <HAL_RCC_OscConfig+0x30e>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d116      	bne.n	8005bfe <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_RCC_OscConfig+0x2f8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	2b80      	cmp	r3, #128	@ 0x80
 8005be2:	d001      	beq.n	8005be8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e2ac      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005be8:	4b78      	ldr	r3, [pc, #480]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	061b      	lsls	r3, r3, #24
 8005bf6:	4975      	ldr	r1, [pc, #468]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bfc:	e040      	b.n	8005c80 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d023      	beq.n	8005c4e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c06:	4b71      	ldr	r3, [pc, #452]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a70      	ldr	r2, [pc, #448]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c12:	f7fc fa73 	bl	80020fc <HAL_GetTick>
 8005c16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c18:	e008      	b.n	8005c2c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c1a:	f7fc fa6f 	bl	80020fc <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d901      	bls.n	8005c2c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e28a      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c2c:	4b67      	ldr	r3, [pc, #412]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0f0      	beq.n	8005c1a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c38:	4b64      	ldr	r3, [pc, #400]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	061b      	lsls	r3, r3, #24
 8005c46:	4961      	ldr	r1, [pc, #388]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60cb      	str	r3, [r1, #12]
 8005c4c:	e018      	b.n	8005c80 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a5e      	ldr	r2, [pc, #376]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005c54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5a:	f7fc fa4f 	bl	80020fc <HAL_GetTick>
 8005c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c62:	f7fc fa4b 	bl	80020fc <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e266      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c74:	4b55      	ldr	r3, [pc, #340]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f0      	bne.n	8005c62 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d036      	beq.n	8005cfa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d019      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c94:	4b4d      	ldr	r3, [pc, #308]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c98:	4a4c      	ldr	r2, [pc, #304]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca0:	f7fc fa2c 	bl	80020fc <HAL_GetTick>
 8005ca4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca8:	f7fc fa28 	bl	80020fc <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e243      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cba:	4b44      	ldr	r3, [pc, #272]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x3b8>
 8005cc6:	e018      	b.n	8005cfa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc8:	4b40      	ldr	r3, [pc, #256]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005cce:	f023 0301 	bic.w	r3, r3, #1
 8005cd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd4:	f7fc fa12 	bl	80020fc <HAL_GetTick>
 8005cd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cdc:	f7fc fa0e 	bl	80020fc <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e229      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cee:	4b37      	ldr	r3, [pc, #220]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f0      	bne.n	8005cdc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d036      	beq.n	8005d74 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d019      	beq.n	8005d42 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a2e      	ldr	r2, [pc, #184]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005d14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d1a:	f7fc f9ef 	bl	80020fc <HAL_GetTick>
 8005d1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d20:	e008      	b.n	8005d34 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d22:	f7fc f9eb 	bl	80020fc <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e206      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d34:	4b25      	ldr	r3, [pc, #148]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0f0      	beq.n	8005d22 <HAL_RCC_OscConfig+0x432>
 8005d40:	e018      	b.n	8005d74 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d42:	4b22      	ldr	r3, [pc, #136]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a21      	ldr	r2, [pc, #132]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005d48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d4e:	f7fc f9d5 	bl	80020fc <HAL_GetTick>
 8005d52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d56:	f7fc f9d1 	bl	80020fc <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e1ec      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d68:	4b18      	ldr	r3, [pc, #96]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f0      	bne.n	8005d56 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80af 	beq.w	8005ee0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d82:	4b13      	ldr	r3, [pc, #76]	@ (8005dd0 <HAL_RCC_OscConfig+0x4e0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a12      	ldr	r2, [pc, #72]	@ (8005dd0 <HAL_RCC_OscConfig+0x4e0>)
 8005d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d8e:	f7fc f9b5 	bl	80020fc <HAL_GetTick>
 8005d92:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d96:	f7fc f9b1 	bl	80020fc <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b64      	cmp	r3, #100	@ 0x64
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e1cc      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005da8:	4b09      	ldr	r3, [pc, #36]	@ (8005dd0 <HAL_RCC_OscConfig+0x4e0>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d10b      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x4e4>
 8005dbc:	4b03      	ldr	r3, [pc, #12]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc0:	4a02      	ldr	r2, [pc, #8]	@ (8005dcc <HAL_RCC_OscConfig+0x4dc>)
 8005dc2:	f043 0301 	orr.w	r3, r3, #1
 8005dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dc8:	e05b      	b.n	8005e82 <HAL_RCC_OscConfig+0x592>
 8005dca:	bf00      	nop
 8005dcc:	58024400 	.word	0x58024400
 8005dd0:	58024800 	.word	0x58024800
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d112      	bne.n	8005e02 <HAL_RCC_OscConfig+0x512>
 8005ddc:	4b9d      	ldr	r3, [pc, #628]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de0:	4a9c      	ldr	r2, [pc, #624]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005de8:	4b9a      	ldr	r3, [pc, #616]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dec:	4a99      	ldr	r2, [pc, #612]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005df4:	4b97      	ldr	r3, [pc, #604]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df8:	4a96      	ldr	r2, [pc, #600]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005dfa:	f023 0304 	bic.w	r3, r3, #4
 8005dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e00:	e03f      	b.n	8005e82 <HAL_RCC_OscConfig+0x592>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b05      	cmp	r3, #5
 8005e08:	d112      	bne.n	8005e30 <HAL_RCC_OscConfig+0x540>
 8005e0a:	4b92      	ldr	r3, [pc, #584]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0e:	4a91      	ldr	r2, [pc, #580]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e10:	f043 0304 	orr.w	r3, r3, #4
 8005e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e16:	4b8f      	ldr	r3, [pc, #572]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1a:	4a8e      	ldr	r2, [pc, #568]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e22:	4b8c      	ldr	r3, [pc, #560]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e26:	4a8b      	ldr	r2, [pc, #556]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e2e:	e028      	b.n	8005e82 <HAL_RCC_OscConfig+0x592>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b85      	cmp	r3, #133	@ 0x85
 8005e36:	d112      	bne.n	8005e5e <HAL_RCC_OscConfig+0x56e>
 8005e38:	4b86      	ldr	r3, [pc, #536]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3c:	4a85      	ldr	r2, [pc, #532]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e3e:	f043 0304 	orr.w	r3, r3, #4
 8005e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e44:	4b83      	ldr	r3, [pc, #524]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e48:	4a82      	ldr	r2, [pc, #520]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e50:	4b80      	ldr	r3, [pc, #512]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e54:	4a7f      	ldr	r2, [pc, #508]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e5c:	e011      	b.n	8005e82 <HAL_RCC_OscConfig+0x592>
 8005e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e62:	4a7c      	ldr	r2, [pc, #496]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e6a:	4b7a      	ldr	r3, [pc, #488]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e6e:	4a79      	ldr	r2, [pc, #484]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e70:	f023 0304 	bic.w	r3, r3, #4
 8005e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e76:	4b77      	ldr	r3, [pc, #476]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	4a76      	ldr	r2, [pc, #472]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005e7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e80:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d015      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8a:	f7fc f937 	bl	80020fc <HAL_GetTick>
 8005e8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e90:	e00a      	b.n	8005ea8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e92:	f7fc f933 	bl	80020fc <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e14c      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0ee      	beq.n	8005e92 <HAL_RCC_OscConfig+0x5a2>
 8005eb4:	e014      	b.n	8005ee0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb6:	f7fc f921 	bl	80020fc <HAL_GetTick>
 8005eba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ebc:	e00a      	b.n	8005ed4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebe:	f7fc f91d 	bl	80020fc <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e136      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ed4:	4b5f      	ldr	r3, [pc, #380]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1ee      	bne.n	8005ebe <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 812b 	beq.w	8006140 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005eea:	4b5a      	ldr	r3, [pc, #360]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ef2:	2b18      	cmp	r3, #24
 8005ef4:	f000 80bb 	beq.w	800606e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	f040 8095 	bne.w	800602c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f02:	4b54      	ldr	r3, [pc, #336]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a53      	ldr	r2, [pc, #332]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005f08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0e:	f7fc f8f5 	bl	80020fc <HAL_GetTick>
 8005f12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f16:	f7fc f8f1 	bl	80020fc <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e10c      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f28:	4b4a      	ldr	r3, [pc, #296]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f0      	bne.n	8005f16 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f34:	4b47      	ldr	r3, [pc, #284]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005f36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f38:	4b47      	ldr	r3, [pc, #284]	@ (8006058 <HAL_RCC_OscConfig+0x768>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f44:	0112      	lsls	r2, r2, #4
 8005f46:	430a      	orrs	r2, r1
 8005f48:	4942      	ldr	r1, [pc, #264]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	628b      	str	r3, [r1, #40]	@ 0x28
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f52:	3b01      	subs	r3, #1
 8005f54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	025b      	lsls	r3, r3, #9
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	041b      	lsls	r3, r3, #16
 8005f6c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f76:	3b01      	subs	r3, #1
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f7e:	4935      	ldr	r1, [pc, #212]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005f84:	4b33      	ldr	r3, [pc, #204]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f88:	4a32      	ldr	r2, [pc, #200]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f90:	4b30      	ldr	r3, [pc, #192]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f94:	4b31      	ldr	r3, [pc, #196]	@ (800605c <HAL_RCC_OscConfig+0x76c>)
 8005f96:	4013      	ands	r3, r2
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f9c:	00d2      	lsls	r2, r2, #3
 8005f9e:	492d      	ldr	r1, [pc, #180]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa8:	f023 020c 	bic.w	r2, r3, #12
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb0:	4928      	ldr	r1, [pc, #160]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005fb6:	4b27      	ldr	r3, [pc, #156]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fba:	f023 0202 	bic.w	r2, r3, #2
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc2:	4924      	ldr	r1, [pc, #144]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fc8:	4b22      	ldr	r3, [pc, #136]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fcc:	4a21      	ldr	r2, [pc, #132]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fe6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005fec:	4b19      	ldr	r3, [pc, #100]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff0:	4a18      	ldr	r2, [pc, #96]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ff8:	4b16      	ldr	r3, [pc, #88]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a15      	ldr	r2, [pc, #84]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8005ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fc f87a 	bl	80020fc <HAL_GetTick>
 8006008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800600c:	f7fc f876 	bl	80020fc <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e091      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x71c>
 800602a:	e089      	b.n	8006140 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800602c:	4b09      	ldr	r3, [pc, #36]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a08      	ldr	r2, [pc, #32]	@ (8006054 <HAL_RCC_OscConfig+0x764>)
 8006032:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006038:	f7fc f860 	bl	80020fc <HAL_GetTick>
 800603c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800603e:	e00f      	b.n	8006060 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006040:	f7fc f85c 	bl	80020fc <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d908      	bls.n	8006060 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e077      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
 8006052:	bf00      	nop
 8006054:	58024400 	.word	0x58024400
 8006058:	fffffc0c 	.word	0xfffffc0c
 800605c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006060:	4b3a      	ldr	r3, [pc, #232]	@ (800614c <HAL_RCC_OscConfig+0x85c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e9      	bne.n	8006040 <HAL_RCC_OscConfig+0x750>
 800606c:	e068      	b.n	8006140 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800606e:	4b37      	ldr	r3, [pc, #220]	@ (800614c <HAL_RCC_OscConfig+0x85c>)
 8006070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006072:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006074:	4b35      	ldr	r3, [pc, #212]	@ (800614c <HAL_RCC_OscConfig+0x85c>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006078:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	2b01      	cmp	r3, #1
 8006080:	d031      	beq.n	80060e6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f003 0203 	and.w	r2, r3, #3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800608c:	429a      	cmp	r2, r3
 800608e:	d12a      	bne.n	80060e6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609c:	429a      	cmp	r2, r3
 800609e:	d122      	bne.n	80060e6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d11a      	bne.n	80060e6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	0a5b      	lsrs	r3, r3, #9
 80060b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060bc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060be:	429a      	cmp	r2, r3
 80060c0:	d111      	bne.n	80060e6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	0c1b      	lsrs	r3, r3, #16
 80060c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d108      	bne.n	80060e6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	0e1b      	lsrs	r3, r3, #24
 80060d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d001      	beq.n	80060ea <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e02b      	b.n	8006142 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80060ea:	4b18      	ldr	r3, [pc, #96]	@ (800614c <HAL_RCC_OscConfig+0x85c>)
 80060ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ee:	08db      	lsrs	r3, r3, #3
 80060f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060f4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d01f      	beq.n	8006140 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006100:	4b12      	ldr	r3, [pc, #72]	@ (800614c <HAL_RCC_OscConfig+0x85c>)
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	4a11      	ldr	r2, [pc, #68]	@ (800614c <HAL_RCC_OscConfig+0x85c>)
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800610c:	f7fb fff6 	bl	80020fc <HAL_GetTick>
 8006110:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006112:	bf00      	nop
 8006114:	f7fb fff2 	bl	80020fc <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	4293      	cmp	r3, r2
 800611e:	d0f9      	beq.n	8006114 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006120:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <HAL_RCC_OscConfig+0x85c>)
 8006122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006124:	4b0a      	ldr	r3, [pc, #40]	@ (8006150 <HAL_RCC_OscConfig+0x860>)
 8006126:	4013      	ands	r3, r2
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800612c:	00d2      	lsls	r2, r2, #3
 800612e:	4907      	ldr	r1, [pc, #28]	@ (800614c <HAL_RCC_OscConfig+0x85c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006134:	4b05      	ldr	r3, [pc, #20]	@ (800614c <HAL_RCC_OscConfig+0x85c>)
 8006136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006138:	4a04      	ldr	r2, [pc, #16]	@ (800614c <HAL_RCC_OscConfig+0x85c>)
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3730      	adds	r7, #48	@ 0x30
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	58024400 	.word	0x58024400
 8006150:	ffff0007 	.word	0xffff0007

08006154 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e19c      	b.n	80064a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006168:	4b8a      	ldr	r3, [pc, #552]	@ (8006394 <HAL_RCC_ClockConfig+0x240>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d910      	bls.n	8006198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006176:	4b87      	ldr	r3, [pc, #540]	@ (8006394 <HAL_RCC_ClockConfig+0x240>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f023 020f 	bic.w	r2, r3, #15
 800617e:	4985      	ldr	r1, [pc, #532]	@ (8006394 <HAL_RCC_ClockConfig+0x240>)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	4313      	orrs	r3, r2
 8006184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006186:	4b83      	ldr	r3, [pc, #524]	@ (8006394 <HAL_RCC_ClockConfig+0x240>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d001      	beq.n	8006198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e184      	b.n	80064a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d010      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	4b7b      	ldr	r3, [pc, #492]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d908      	bls.n	80061c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061b4:	4b78      	ldr	r3, [pc, #480]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	4975      	ldr	r1, [pc, #468]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d010      	beq.n	80061f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695a      	ldr	r2, [r3, #20]
 80061d6:	4b70      	ldr	r3, [pc, #448]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061de:	429a      	cmp	r2, r3
 80061e0:	d908      	bls.n	80061f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	496a      	ldr	r1, [pc, #424]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d010      	beq.n	8006222 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699a      	ldr	r2, [r3, #24]
 8006204:	4b64      	ldr	r3, [pc, #400]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800620c:	429a      	cmp	r2, r3
 800620e:	d908      	bls.n	8006222 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006210:	4b61      	ldr	r3, [pc, #388]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	495e      	ldr	r1, [pc, #376]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 800621e:	4313      	orrs	r3, r2
 8006220:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	d010      	beq.n	8006250 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69da      	ldr	r2, [r3, #28]
 8006232:	4b59      	ldr	r3, [pc, #356]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800623a:	429a      	cmp	r2, r3
 800623c:	d908      	bls.n	8006250 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800623e:	4b56      	ldr	r3, [pc, #344]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	4953      	ldr	r1, [pc, #332]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 800624c:	4313      	orrs	r3, r2
 800624e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d010      	beq.n	800627e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	4b4d      	ldr	r3, [pc, #308]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	429a      	cmp	r2, r3
 800626a:	d908      	bls.n	800627e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800626c:	4b4a      	ldr	r3, [pc, #296]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f023 020f 	bic.w	r2, r3, #15
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	4947      	ldr	r1, [pc, #284]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 800627a:	4313      	orrs	r3, r2
 800627c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d055      	beq.n	8006336 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800628a:	4b43      	ldr	r3, [pc, #268]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	4940      	ldr	r1, [pc, #256]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006298:	4313      	orrs	r3, r2
 800629a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d107      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d121      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0f6      	b.n	80064a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d107      	bne.n	80062cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062bc:	4b36      	ldr	r3, [pc, #216]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d115      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0ea      	b.n	80064a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d107      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062d4:	4b30      	ldr	r3, [pc, #192]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d109      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0de      	b.n	80064a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062e4:	4b2c      	ldr	r3, [pc, #176]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0d6      	b.n	80064a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062f4:	4b28      	ldr	r3, [pc, #160]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f023 0207 	bic.w	r2, r3, #7
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	4925      	ldr	r1, [pc, #148]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006302:	4313      	orrs	r3, r2
 8006304:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006306:	f7fb fef9 	bl	80020fc <HAL_GetTick>
 800630a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630c:	e00a      	b.n	8006324 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800630e:	f7fb fef5 	bl	80020fc <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800631c:	4293      	cmp	r3, r2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e0be      	b.n	80064a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006324:	4b1c      	ldr	r3, [pc, #112]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	429a      	cmp	r2, r3
 8006334:	d1eb      	bne.n	800630e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d010      	beq.n	8006364 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	4b14      	ldr	r3, [pc, #80]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	429a      	cmp	r2, r3
 8006350:	d208      	bcs.n	8006364 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006352:	4b11      	ldr	r3, [pc, #68]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f023 020f 	bic.w	r2, r3, #15
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	490e      	ldr	r1, [pc, #56]	@ (8006398 <HAL_RCC_ClockConfig+0x244>)
 8006360:	4313      	orrs	r3, r2
 8006362:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006364:	4b0b      	ldr	r3, [pc, #44]	@ (8006394 <HAL_RCC_ClockConfig+0x240>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d214      	bcs.n	800639c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006372:	4b08      	ldr	r3, [pc, #32]	@ (8006394 <HAL_RCC_ClockConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f023 020f 	bic.w	r2, r3, #15
 800637a:	4906      	ldr	r1, [pc, #24]	@ (8006394 <HAL_RCC_ClockConfig+0x240>)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006382:	4b04      	ldr	r3, [pc, #16]	@ (8006394 <HAL_RCC_ClockConfig+0x240>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d005      	beq.n	800639c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e086      	b.n	80064a2 <HAL_RCC_ClockConfig+0x34e>
 8006394:	52002000 	.word	0x52002000
 8006398:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d010      	beq.n	80063ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691a      	ldr	r2, [r3, #16]
 80063ac:	4b3f      	ldr	r3, [pc, #252]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d208      	bcs.n	80063ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063b8:	4b3c      	ldr	r3, [pc, #240]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	4939      	ldr	r1, [pc, #228]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d010      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	4b34      	ldr	r3, [pc, #208]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d208      	bcs.n	80063f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063e6:	4b31      	ldr	r3, [pc, #196]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	492e      	ldr	r1, [pc, #184]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	d010      	beq.n	8006426 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699a      	ldr	r2, [r3, #24]
 8006408:	4b28      	ldr	r3, [pc, #160]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006410:	429a      	cmp	r2, r3
 8006412:	d208      	bcs.n	8006426 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006414:	4b25      	ldr	r3, [pc, #148]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	4922      	ldr	r1, [pc, #136]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 8006422:	4313      	orrs	r3, r2
 8006424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d010      	beq.n	8006454 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69da      	ldr	r2, [r3, #28]
 8006436:	4b1d      	ldr	r3, [pc, #116]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800643e:	429a      	cmp	r2, r3
 8006440:	d208      	bcs.n	8006454 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006442:	4b1a      	ldr	r3, [pc, #104]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	4917      	ldr	r1, [pc, #92]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 8006450:	4313      	orrs	r3, r2
 8006452:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006454:	f000 f834 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8006458:	4602      	mov	r2, r0
 800645a:	4b14      	ldr	r3, [pc, #80]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	0a1b      	lsrs	r3, r3, #8
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	4912      	ldr	r1, [pc, #72]	@ (80064b0 <HAL_RCC_ClockConfig+0x35c>)
 8006466:	5ccb      	ldrb	r3, [r1, r3]
 8006468:	f003 031f 	and.w	r3, r3, #31
 800646c:	fa22 f303 	lsr.w	r3, r2, r3
 8006470:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006472:	4b0e      	ldr	r3, [pc, #56]	@ (80064ac <HAL_RCC_ClockConfig+0x358>)
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	4a0d      	ldr	r2, [pc, #52]	@ (80064b0 <HAL_RCC_ClockConfig+0x35c>)
 800647c:	5cd3      	ldrb	r3, [r2, r3]
 800647e:	f003 031f 	and.w	r3, r3, #31
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
 8006488:	4a0a      	ldr	r2, [pc, #40]	@ (80064b4 <HAL_RCC_ClockConfig+0x360>)
 800648a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800648c:	4a0a      	ldr	r2, [pc, #40]	@ (80064b8 <HAL_RCC_ClockConfig+0x364>)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006492:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <HAL_RCC_ClockConfig+0x368>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f7fb fde6 	bl	8002068 <HAL_InitTick>
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	58024400 	.word	0x58024400
 80064b0:	0800ecf4 	.word	0x0800ecf4
 80064b4:	24000010 	.word	0x24000010
 80064b8:	2400000c 	.word	0x2400000c
 80064bc:	24000014 	.word	0x24000014

080064c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b089      	sub	sp, #36	@ 0x24
 80064c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064c6:	4bb3      	ldr	r3, [pc, #716]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064ce:	2b18      	cmp	r3, #24
 80064d0:	f200 8155 	bhi.w	800677e <HAL_RCC_GetSysClockFreq+0x2be>
 80064d4:	a201      	add	r2, pc, #4	@ (adr r2, 80064dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064da:	bf00      	nop
 80064dc:	08006541 	.word	0x08006541
 80064e0:	0800677f 	.word	0x0800677f
 80064e4:	0800677f 	.word	0x0800677f
 80064e8:	0800677f 	.word	0x0800677f
 80064ec:	0800677f 	.word	0x0800677f
 80064f0:	0800677f 	.word	0x0800677f
 80064f4:	0800677f 	.word	0x0800677f
 80064f8:	0800677f 	.word	0x0800677f
 80064fc:	08006567 	.word	0x08006567
 8006500:	0800677f 	.word	0x0800677f
 8006504:	0800677f 	.word	0x0800677f
 8006508:	0800677f 	.word	0x0800677f
 800650c:	0800677f 	.word	0x0800677f
 8006510:	0800677f 	.word	0x0800677f
 8006514:	0800677f 	.word	0x0800677f
 8006518:	0800677f 	.word	0x0800677f
 800651c:	0800656d 	.word	0x0800656d
 8006520:	0800677f 	.word	0x0800677f
 8006524:	0800677f 	.word	0x0800677f
 8006528:	0800677f 	.word	0x0800677f
 800652c:	0800677f 	.word	0x0800677f
 8006530:	0800677f 	.word	0x0800677f
 8006534:	0800677f 	.word	0x0800677f
 8006538:	0800677f 	.word	0x0800677f
 800653c:	08006573 	.word	0x08006573
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006540:	4b94      	ldr	r3, [pc, #592]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800654c:	4b91      	ldr	r3, [pc, #580]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	08db      	lsrs	r3, r3, #3
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	4a90      	ldr	r2, [pc, #576]	@ (8006798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006558:	fa22 f303 	lsr.w	r3, r2, r3
 800655c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800655e:	e111      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006560:	4b8d      	ldr	r3, [pc, #564]	@ (8006798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006562:	61bb      	str	r3, [r7, #24]
      break;
 8006564:	e10e      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006566:	4b8d      	ldr	r3, [pc, #564]	@ (800679c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006568:	61bb      	str	r3, [r7, #24]
      break;
 800656a:	e10b      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800656c:	4b8c      	ldr	r3, [pc, #560]	@ (80067a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800656e:	61bb      	str	r3, [r7, #24]
      break;
 8006570:	e108      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006572:	4b88      	ldr	r3, [pc, #544]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800657c:	4b85      	ldr	r3, [pc, #532]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800657e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006586:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006588:	4b82      	ldr	r3, [pc, #520]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800658a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006592:	4b80      	ldr	r3, [pc, #512]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006596:	08db      	lsrs	r3, r3, #3
 8006598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	fb02 f303 	mul.w	r3, r2, r3
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80e1 	beq.w	8006778 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	f000 8083 	beq.w	80066c4 <HAL_RCC_GetSysClockFreq+0x204>
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	f200 80a1 	bhi.w	8006708 <HAL_RCC_GetSysClockFreq+0x248>
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_RCC_GetSysClockFreq+0x114>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d056      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0x1c0>
 80065d2:	e099      	b.n	8006708 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065d4:	4b6f      	ldr	r3, [pc, #444]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d02d      	beq.n	800663c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	08db      	lsrs	r3, r3, #3
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	4a6b      	ldr	r2, [pc, #428]	@ (8006798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065ec:	fa22 f303 	lsr.w	r3, r2, r3
 80065f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800660a:	4b62      	ldr	r3, [pc, #392]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800661a:	ed97 6a02 	vldr	s12, [r7, #8]
 800661e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80067a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800662a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800662e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006636:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800663a:	e087      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006646:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80067a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800664a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800664e:	4b51      	ldr	r3, [pc, #324]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006662:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80067a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800666e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800667e:	e065      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80067ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800668e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006692:	4b40      	ldr	r3, [pc, #256]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80066a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80067a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066c2:	e043      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80067b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80066d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80067a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006706:	e021      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006712:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80067ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	4b1e      	ldr	r3, [pc, #120]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	ed97 6a02 	vldr	s12, [r7, #8]
 800672e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80067a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800674a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800674c:	4b11      	ldr	r3, [pc, #68]	@ (8006794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800674e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006750:	0a5b      	lsrs	r3, r3, #9
 8006752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006756:	3301      	adds	r3, #1
 8006758:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	ee07 3a90 	vmov	s15, r3
 8006760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006764:	edd7 6a07 	vldr	s13, [r7, #28]
 8006768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800676c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006770:	ee17 3a90 	vmov	r3, s15
 8006774:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006776:	e005      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	61bb      	str	r3, [r7, #24]
      break;
 800677c:	e002      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800677e:	4b07      	ldr	r3, [pc, #28]	@ (800679c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006780:	61bb      	str	r3, [r7, #24]
      break;
 8006782:	bf00      	nop
  }

  return sysclockfreq;
 8006784:	69bb      	ldr	r3, [r7, #24]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3724      	adds	r7, #36	@ 0x24
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	58024400 	.word	0x58024400
 8006798:	03d09000 	.word	0x03d09000
 800679c:	003d0900 	.word	0x003d0900
 80067a0:	007a1200 	.word	0x007a1200
 80067a4:	46000000 	.word	0x46000000
 80067a8:	4c742400 	.word	0x4c742400
 80067ac:	4a742400 	.word	0x4a742400
 80067b0:	4af42400 	.word	0x4af42400

080067b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80067ba:	f7ff fe81 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <HAL_RCC_GetHCLKFreq+0x50>)
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	490f      	ldr	r1, [pc, #60]	@ (8006808 <HAL_RCC_GetHCLKFreq+0x54>)
 80067cc:	5ccb      	ldrb	r3, [r1, r3]
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	fa22 f303 	lsr.w	r3, r2, r3
 80067d6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80067d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006804 <HAL_RCC_GetHCLKFreq+0x50>)
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	4a09      	ldr	r2, [pc, #36]	@ (8006808 <HAL_RCC_GetHCLKFreq+0x54>)
 80067e2:	5cd3      	ldrb	r3, [r2, r3]
 80067e4:	f003 031f 	and.w	r3, r3, #31
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	fa22 f303 	lsr.w	r3, r2, r3
 80067ee:	4a07      	ldr	r2, [pc, #28]	@ (800680c <HAL_RCC_GetHCLKFreq+0x58>)
 80067f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067f2:	4a07      	ldr	r2, [pc, #28]	@ (8006810 <HAL_RCC_GetHCLKFreq+0x5c>)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80067f8:	4b04      	ldr	r3, [pc, #16]	@ (800680c <HAL_RCC_GetHCLKFreq+0x58>)
 80067fa:	681b      	ldr	r3, [r3, #0]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	58024400 	.word	0x58024400
 8006808:	0800ecf4 	.word	0x0800ecf4
 800680c:	24000010 	.word	0x24000010
 8006810:	2400000c 	.word	0x2400000c

08006814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006818:	f7ff ffcc 	bl	80067b4 <HAL_RCC_GetHCLKFreq>
 800681c:	4602      	mov	r2, r0
 800681e:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	091b      	lsrs	r3, r3, #4
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	4904      	ldr	r1, [pc, #16]	@ (800683c <HAL_RCC_GetPCLK1Freq+0x28>)
 800682a:	5ccb      	ldrb	r3, [r1, r3]
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006834:	4618      	mov	r0, r3
 8006836:	bd80      	pop	{r7, pc}
 8006838:	58024400 	.word	0x58024400
 800683c:	0800ecf4 	.word	0x0800ecf4

08006840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006844:	f7ff ffb6 	bl	80067b4 <HAL_RCC_GetHCLKFreq>
 8006848:	4602      	mov	r2, r0
 800684a:	4b06      	ldr	r3, [pc, #24]	@ (8006864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	0a1b      	lsrs	r3, r3, #8
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	4904      	ldr	r1, [pc, #16]	@ (8006868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006856:	5ccb      	ldrb	r3, [r1, r3]
 8006858:	f003 031f 	and.w	r3, r3, #31
 800685c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006860:	4618      	mov	r0, r3
 8006862:	bd80      	pop	{r7, pc}
 8006864:	58024400 	.word	0x58024400
 8006868:	0800ecf4 	.word	0x0800ecf4

0800686c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800686c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006870:	b0c8      	sub	sp, #288	@ 0x120
 8006872:	af00      	add	r7, sp, #0
 8006874:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006878:	2300      	movs	r3, #0
 800687a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800687e:	2300      	movs	r3, #0
 8006880:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006890:	2500      	movs	r5, #0
 8006892:	ea54 0305 	orrs.w	r3, r4, r5
 8006896:	d049      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800689c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800689e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068a2:	d02f      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80068a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068a8:	d828      	bhi.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068ae:	d01a      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80068b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068b4:	d822      	bhi.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80068ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068be:	d007      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068c0:	e01c      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c2:	4ba7      	ldr	r3, [pc, #668]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c6:	4aa6      	ldr	r2, [pc, #664]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068ce:	e01a      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068d4:	3308      	adds	r3, #8
 80068d6:	2102      	movs	r1, #2
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 fc43 	bl	8008164 <RCCEx_PLL2_Config>
 80068de:	4603      	mov	r3, r0
 80068e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068e4:	e00f      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068ea:	3328      	adds	r3, #40	@ 0x28
 80068ec:	2102      	movs	r1, #2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 fcea 	bl	80082c8 <RCCEx_PLL3_Config>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068fa:	e004      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006902:	e000      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006906:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800690e:	4b94      	ldr	r3, [pc, #592]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006912:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800691a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800691c:	4a90      	ldr	r2, [pc, #576]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800691e:	430b      	orrs	r3, r1
 8006920:	6513      	str	r3, [r2, #80]	@ 0x50
 8006922:	e003      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006924:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006928:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800692c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006938:	f04f 0900 	mov.w	r9, #0
 800693c:	ea58 0309 	orrs.w	r3, r8, r9
 8006940:	d047      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006948:	2b04      	cmp	r3, #4
 800694a:	d82a      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800694c:	a201      	add	r2, pc, #4	@ (adr r2, 8006954 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006969 	.word	0x08006969
 8006958:	08006977 	.word	0x08006977
 800695c:	0800698d 	.word	0x0800698d
 8006960:	080069ab 	.word	0x080069ab
 8006964:	080069ab 	.word	0x080069ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006968:	4b7d      	ldr	r3, [pc, #500]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800696a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696c:	4a7c      	ldr	r2, [pc, #496]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800696e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006974:	e01a      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800697a:	3308      	adds	r3, #8
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f001 fbf0 	bl	8008164 <RCCEx_PLL2_Config>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800698a:	e00f      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800698c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006990:	3328      	adds	r3, #40	@ 0x28
 8006992:	2100      	movs	r1, #0
 8006994:	4618      	mov	r0, r3
 8006996:	f001 fc97 	bl	80082c8 <RCCEx_PLL3_Config>
 800699a:	4603      	mov	r3, r0
 800699c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069a0:	e004      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80069a8:	e000      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80069aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b8:	f023 0107 	bic.w	r1, r3, #7
 80069bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c2:	4a67      	ldr	r2, [pc, #412]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80069c8:	e003      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80069d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80069de:	f04f 0b00 	mov.w	fp, #0
 80069e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80069e6:	d054      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80069e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80069f2:	d036      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80069f4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80069f8:	d82f      	bhi.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069fe:	d032      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a04:	d829      	bhi.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a08:	d02f      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006a0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a0c:	d825      	bhi.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a0e:	2b80      	cmp	r3, #128	@ 0x80
 8006a10:	d018      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006a12:	2b80      	cmp	r3, #128	@ 0x80
 8006a14:	d821      	bhi.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006a1a:	2b40      	cmp	r3, #64	@ 0x40
 8006a1c:	d007      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006a1e:	e01c      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a20:	4b4f      	ldr	r3, [pc, #316]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	4a4e      	ldr	r2, [pc, #312]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006a2c:	e01e      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a32:	3308      	adds	r3, #8
 8006a34:	2100      	movs	r1, #0
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 fb94 	bl	8008164 <RCCEx_PLL2_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006a42:	e013      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a48:	3328      	adds	r3, #40	@ 0x28
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 fc3b 	bl	80082c8 <RCCEx_PLL3_Config>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006a58:	e008      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a60:	e004      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006a62:	bf00      	nop
 8006a64:	e002      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006a66:	bf00      	nop
 8006a68:	e000      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10a      	bne.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006a74:	4b3a      	ldr	r3, [pc, #232]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a78:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a82:	4a37      	ldr	r2, [pc, #220]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a84:	430b      	orrs	r3, r1
 8006a86:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a88:	e003      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a8e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006a9e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006aa8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006aac:	460b      	mov	r3, r1
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	d05c      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ab8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006abc:	d03b      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006abe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006ac2:	d834      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ac8:	d037      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006aca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ace:	d82e      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006ad0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ad4:	d033      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ad6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ada:	d828      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ae0:	d01a      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ae6:	d822      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006af0:	d007      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006af2:	e01c      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	4a19      	ldr	r2, [pc, #100]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006b00:	e01e      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b06:	3308      	adds	r3, #8
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 fb2a 	bl	8008164 <RCCEx_PLL2_Config>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006b16:	e013      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b1c:	3328      	adds	r3, #40	@ 0x28
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 fbd1 	bl	80082c8 <RCCEx_PLL3_Config>
 8006b26:	4603      	mov	r3, r0
 8006b28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006b2c:	e008      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b34:	e004      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006b36:	bf00      	nop
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006b3a:	bf00      	nop
 8006b3c:	e000      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10d      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006b48:	4b05      	ldr	r3, [pc, #20]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b4c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b56:	4a02      	ldr	r2, [pc, #8]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b5c:	e006      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006b5e:	bf00      	nop
 8006b60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006b78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b82:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006b86:	460b      	mov	r3, r1
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	d03a      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b92:	2b30      	cmp	r3, #48	@ 0x30
 8006b94:	d01f      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006b96:	2b30      	cmp	r3, #48	@ 0x30
 8006b98:	d819      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d00c      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d815      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d019      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	d111      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006baa:	4bae      	ldr	r3, [pc, #696]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bae:	4aad      	ldr	r2, [pc, #692]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006bb6:	e011      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	2102      	movs	r1, #2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 facf 	bl	8008164 <RCCEx_PLL2_Config>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006bcc:	e006      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006bd4:	e002      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006bd6:	bf00      	nop
 8006bd8:	e000      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006be4:	4b9f      	ldr	r3, [pc, #636]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf2:	4a9c      	ldr	r2, [pc, #624]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bf8:	e003      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bfe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006c0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c12:	2300      	movs	r3, #0
 8006c14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d051      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c2c:	d035      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006c2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c32:	d82e      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006c34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c38:	d031      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006c3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c3e:	d828      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c44:	d01a      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c4a:	d822      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c54:	d007      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006c56:	e01c      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c58:	4b82      	ldr	r3, [pc, #520]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	4a81      	ldr	r2, [pc, #516]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c64:	e01c      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f001 fa78 	bl	8008164 <RCCEx_PLL2_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c7a:	e011      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c80:	3328      	adds	r3, #40	@ 0x28
 8006c82:	2100      	movs	r1, #0
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 fb1f 	bl	80082c8 <RCCEx_PLL3_Config>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c90:	e006      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c98:	e002      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006ca8:	4b6e      	ldr	r3, [pc, #440]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cb6:	4a6b      	ldr	r2, [pc, #428]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cbc:	e003      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cc2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006cdc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	d053      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cf0:	d033      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006cf2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cf6:	d82c      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006cf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cfc:	d02f      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006cfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d02:	d826      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006d04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d08:	d02b      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d0e:	d820      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d14:	d012      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d1a:	d81a      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d022      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d24:	d115      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fa18 	bl	8008164 <RCCEx_PLL2_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d3a:	e015      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d40:	3328      	adds	r3, #40	@ 0x28
 8006d42:	2101      	movs	r1, #1
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 fabf 	bl	80082c8 <RCCEx_PLL3_Config>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d50:	e00a      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d58:	e006      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006d5a:	bf00      	nop
 8006d5c:	e004      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006d5e:	bf00      	nop
 8006d60:	e002      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006d62:	bf00      	nop
 8006d64:	e000      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d70:	4b3c      	ldr	r3, [pc, #240]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d7e:	4a39      	ldr	r2, [pc, #228]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d80:	430b      	orrs	r3, r1
 8006d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d84:	e003      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006d9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006da4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4313      	orrs	r3, r2
 8006dac:	d060      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006db2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006db6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006dba:	d039      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006dbc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006dc0:	d832      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dc6:	d035      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dcc:	d82c      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd2:	d031      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd8:	d826      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006dda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dde:	d02d      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006de0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006de4:	d820      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dea:	d012      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df0:	d81a      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d024      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dfa:	d115      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e00:	3308      	adds	r3, #8
 8006e02:	2101      	movs	r1, #1
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 f9ad 	bl	8008164 <RCCEx_PLL2_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e10:	e017      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e16:	3328      	adds	r3, #40	@ 0x28
 8006e18:	2101      	movs	r1, #1
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 fa54 	bl	80082c8 <RCCEx_PLL3_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e26:	e00c      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e2e:	e008      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e30:	bf00      	nop
 8006e32:	e006      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e34:	bf00      	nop
 8006e36:	e004      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e38:	bf00      	nop
 8006e3a:	e002      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e3c:	bf00      	nop
 8006e3e:	e000      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10e      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e4a:	4b06      	ldr	r3, [pc, #24]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e5a:	4a02      	ldr	r2, [pc, #8]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e60:	e006      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006e62:	bf00      	nop
 8006e64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e80:	2300      	movs	r3, #0
 8006e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	d037      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e9a:	d00e      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ea0:	d816      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d018      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eaa:	d111      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eac:	4bc4      	ldr	r3, [pc, #784]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	4ac3      	ldr	r2, [pc, #780]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006eb8:	e00f      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 f94e 	bl	8008164 <RCCEx_PLL2_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ece:	e004      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ed6:	e000      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ee2:	4bb7      	ldr	r3, [pc, #732]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ef0:	4ab3      	ldr	r2, [pc, #716]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ef6:	e003      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006efc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f10:	2300      	movs	r3, #0
 8006f12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	d039      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d81c      	bhi.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f6d 	.word	0x08006f6d
 8006f34:	08006f41 	.word	0x08006f41
 8006f38:	08006f4f 	.word	0x08006f4f
 8006f3c:	08006f6d 	.word	0x08006f6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f40:	4b9f      	ldr	r3, [pc, #636]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	4a9e      	ldr	r2, [pc, #632]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f4c:	e00f      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f52:	3308      	adds	r3, #8
 8006f54:	2102      	movs	r1, #2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 f904 	bl	8008164 <RCCEx_PLL2_Config>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f62:	e004      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f6a:	e000      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f76:	4b92      	ldr	r3, [pc, #584]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f7a:	f023 0103 	bic.w	r1, r3, #3
 8006f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f84:	4a8e      	ldr	r2, [pc, #568]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f86:	430b      	orrs	r3, r1
 8006f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f8a:	e003      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006faa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	f000 8099 	beq.w	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fb6:	4b83      	ldr	r3, [pc, #524]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a82      	ldr	r2, [pc, #520]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fc2:	f7fb f89b 	bl	80020fc <HAL_GetTick>
 8006fc6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fca:	e00b      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fcc:	f7fb f896 	bl	80020fc <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b64      	cmp	r3, #100	@ 0x64
 8006fda:	d903      	bls.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006fe2:	e005      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe4:	4b77      	ldr	r3, [pc, #476]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0ed      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006ff0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d173      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ff8:	4b71      	ldr	r3, [pc, #452]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ffa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007000:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007004:	4053      	eors	r3, r2
 8007006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800700a:	2b00      	cmp	r3, #0
 800700c:	d015      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800700e:	4b6c      	ldr	r3, [pc, #432]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007016:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800701a:	4b69      	ldr	r3, [pc, #420]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701e:	4a68      	ldr	r2, [pc, #416]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007024:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007026:	4b66      	ldr	r3, [pc, #408]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702a:	4a65      	ldr	r2, [pc, #404]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800702c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007030:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007032:	4a63      	ldr	r2, [pc, #396]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007038:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800703a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800703e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007046:	d118      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007048:	f7fb f858 	bl	80020fc <HAL_GetTick>
 800704c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007050:	e00d      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007052:	f7fb f853 	bl	80020fc <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800705c:	1ad2      	subs	r2, r2, r3
 800705e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007062:	429a      	cmp	r2, r3
 8007064:	d903      	bls.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800706c:	e005      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800706e:	4b54      	ldr	r3, [pc, #336]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0eb      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800707a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800707e:	2b00      	cmp	r3, #0
 8007080:	d129      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007086:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800708a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800708e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007092:	d10e      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007094:	4b4a      	ldr	r3, [pc, #296]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800709c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070a4:	091a      	lsrs	r2, r3, #4
 80070a6:	4b48      	ldr	r3, [pc, #288]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	4a45      	ldr	r2, [pc, #276]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ac:	430b      	orrs	r3, r1
 80070ae:	6113      	str	r3, [r2, #16]
 80070b0:	e005      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x852>
 80070b2:	4b43      	ldr	r3, [pc, #268]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	4a42      	ldr	r2, [pc, #264]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070bc:	6113      	str	r3, [r2, #16]
 80070be:	4b40      	ldr	r3, [pc, #256]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070c0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80070c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ce:	4a3c      	ldr	r2, [pc, #240]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070d0:	430b      	orrs	r3, r1
 80070d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80070d4:	e008      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80070de:	e003      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80070e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f002 0301 	and.w	r3, r2, #1
 80070f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070f8:	2300      	movs	r3, #0
 80070fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007102:	460b      	mov	r3, r1
 8007104:	4313      	orrs	r3, r2
 8007106:	f000 8090 	beq.w	800722a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800710a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800710e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007112:	2b28      	cmp	r3, #40	@ 0x28
 8007114:	d870      	bhi.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007116:	a201      	add	r2, pc, #4	@ (adr r2, 800711c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007201 	.word	0x08007201
 8007120:	080071f9 	.word	0x080071f9
 8007124:	080071f9 	.word	0x080071f9
 8007128:	080071f9 	.word	0x080071f9
 800712c:	080071f9 	.word	0x080071f9
 8007130:	080071f9 	.word	0x080071f9
 8007134:	080071f9 	.word	0x080071f9
 8007138:	080071f9 	.word	0x080071f9
 800713c:	080071cd 	.word	0x080071cd
 8007140:	080071f9 	.word	0x080071f9
 8007144:	080071f9 	.word	0x080071f9
 8007148:	080071f9 	.word	0x080071f9
 800714c:	080071f9 	.word	0x080071f9
 8007150:	080071f9 	.word	0x080071f9
 8007154:	080071f9 	.word	0x080071f9
 8007158:	080071f9 	.word	0x080071f9
 800715c:	080071e3 	.word	0x080071e3
 8007160:	080071f9 	.word	0x080071f9
 8007164:	080071f9 	.word	0x080071f9
 8007168:	080071f9 	.word	0x080071f9
 800716c:	080071f9 	.word	0x080071f9
 8007170:	080071f9 	.word	0x080071f9
 8007174:	080071f9 	.word	0x080071f9
 8007178:	080071f9 	.word	0x080071f9
 800717c:	08007201 	.word	0x08007201
 8007180:	080071f9 	.word	0x080071f9
 8007184:	080071f9 	.word	0x080071f9
 8007188:	080071f9 	.word	0x080071f9
 800718c:	080071f9 	.word	0x080071f9
 8007190:	080071f9 	.word	0x080071f9
 8007194:	080071f9 	.word	0x080071f9
 8007198:	080071f9 	.word	0x080071f9
 800719c:	08007201 	.word	0x08007201
 80071a0:	080071f9 	.word	0x080071f9
 80071a4:	080071f9 	.word	0x080071f9
 80071a8:	080071f9 	.word	0x080071f9
 80071ac:	080071f9 	.word	0x080071f9
 80071b0:	080071f9 	.word	0x080071f9
 80071b4:	080071f9 	.word	0x080071f9
 80071b8:	080071f9 	.word	0x080071f9
 80071bc:	08007201 	.word	0x08007201
 80071c0:	58024400 	.word	0x58024400
 80071c4:	58024800 	.word	0x58024800
 80071c8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071d0:	3308      	adds	r3, #8
 80071d2:	2101      	movs	r1, #1
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 ffc5 	bl	8008164 <RCCEx_PLL2_Config>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071e0:	e00f      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e6:	3328      	adds	r3, #40	@ 0x28
 80071e8:	2101      	movs	r1, #1
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 f86c 	bl	80082c8 <RCCEx_PLL3_Config>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071f6:	e004      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071fe:	e000      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007202:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10b      	bne.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800720a:	4bc0      	ldr	r3, [pc, #768]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800720c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007216:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800721a:	4abc      	ldr	r2, [pc, #752]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800721c:	430b      	orrs	r3, r1
 800721e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007220:	e003      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007222:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007226:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800722a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f002 0302 	and.w	r3, r2, #2
 8007236:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800723a:	2300      	movs	r3, #0
 800723c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007240:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007244:	460b      	mov	r3, r1
 8007246:	4313      	orrs	r3, r2
 8007248:	d043      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800724a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800724e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007252:	2b05      	cmp	r3, #5
 8007254:	d824      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007256:	a201      	add	r2, pc, #4	@ (adr r2, 800725c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	080072a9 	.word	0x080072a9
 8007260:	08007275 	.word	0x08007275
 8007264:	0800728b 	.word	0x0800728b
 8007268:	080072a9 	.word	0x080072a9
 800726c:	080072a9 	.word	0x080072a9
 8007270:	080072a9 	.word	0x080072a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007278:	3308      	adds	r3, #8
 800727a:	2101      	movs	r1, #1
 800727c:	4618      	mov	r0, r3
 800727e:	f000 ff71 	bl	8008164 <RCCEx_PLL2_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007288:	e00f      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800728a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800728e:	3328      	adds	r3, #40	@ 0x28
 8007290:	2101      	movs	r1, #1
 8007292:	4618      	mov	r0, r3
 8007294:	f001 f818 	bl	80082c8 <RCCEx_PLL3_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800729e:	e004      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80072a6:	e000      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80072a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10b      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072b2:	4b96      	ldr	r3, [pc, #600]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80072b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b6:	f023 0107 	bic.w	r1, r3, #7
 80072ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072c2:	4a92      	ldr	r2, [pc, #584]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80072c8:	e003      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f002 0304 	and.w	r3, r2, #4
 80072de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072e2:	2300      	movs	r3, #0
 80072e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072e8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4313      	orrs	r3, r2
 80072f0:	d043      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80072f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072fa:	2b05      	cmp	r3, #5
 80072fc:	d824      	bhi.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80072fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	08007351 	.word	0x08007351
 8007308:	0800731d 	.word	0x0800731d
 800730c:	08007333 	.word	0x08007333
 8007310:	08007351 	.word	0x08007351
 8007314:	08007351 	.word	0x08007351
 8007318:	08007351 	.word	0x08007351
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800731c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007320:	3308      	adds	r3, #8
 8007322:	2101      	movs	r1, #1
 8007324:	4618      	mov	r0, r3
 8007326:	f000 ff1d 	bl	8008164 <RCCEx_PLL2_Config>
 800732a:	4603      	mov	r3, r0
 800732c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007330:	e00f      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007336:	3328      	adds	r3, #40	@ 0x28
 8007338:	2101      	movs	r1, #1
 800733a:	4618      	mov	r0, r3
 800733c:	f000 ffc4 	bl	80082c8 <RCCEx_PLL3_Config>
 8007340:	4603      	mov	r3, r0
 8007342:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007346:	e004      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800734e:	e000      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007352:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800735a:	4b6c      	ldr	r3, [pc, #432]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800735c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800735e:	f023 0107 	bic.w	r1, r3, #7
 8007362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800736a:	4a68      	ldr	r2, [pc, #416]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800736c:	430b      	orrs	r3, r1
 800736e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007370:	e003      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007372:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007376:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800737a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f002 0320 	and.w	r3, r2, #32
 8007386:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800738a:	2300      	movs	r3, #0
 800738c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007394:	460b      	mov	r3, r1
 8007396:	4313      	orrs	r3, r2
 8007398:	d055      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800739a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800739e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073a6:	d033      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80073a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073ac:	d82c      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b2:	d02f      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80073b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b8:	d826      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80073ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073be:	d02b      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80073c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073c4:	d820      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80073c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073ca:	d012      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80073cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d0:	d81a      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d022      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80073d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073da:	d115      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073e0:	3308      	adds	r3, #8
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 febd 	bl	8008164 <RCCEx_PLL2_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073f0:	e015      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073f6:	3328      	adds	r3, #40	@ 0x28
 80073f8:	2102      	movs	r1, #2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 ff64 	bl	80082c8 <RCCEx_PLL3_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007406:	e00a      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800740e:	e006      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007410:	bf00      	nop
 8007412:	e004      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007414:	bf00      	nop
 8007416:	e002      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007418:	bf00      	nop
 800741a:	e000      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800741c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800741e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10b      	bne.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007426:	4b39      	ldr	r3, [pc, #228]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800742a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800742e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007436:	4a35      	ldr	r2, [pc, #212]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007438:	430b      	orrs	r3, r1
 800743a:	6553      	str	r3, [r2, #84]	@ 0x54
 800743c:	e003      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007442:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007452:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007456:	2300      	movs	r3, #0
 8007458:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800745c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007460:	460b      	mov	r3, r1
 8007462:	4313      	orrs	r3, r2
 8007464:	d058      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800746a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800746e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007472:	d033      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007474:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007478:	d82c      	bhi.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800747a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800747e:	d02f      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007484:	d826      	bhi.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007486:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800748a:	d02b      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800748c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007490:	d820      	bhi.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007492:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007496:	d012      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800749c:	d81a      	bhi.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d022      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80074a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074a6:	d115      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074ac:	3308      	adds	r3, #8
 80074ae:	2100      	movs	r1, #0
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fe57 	bl	8008164 <RCCEx_PLL2_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074bc:	e015      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074c2:	3328      	adds	r3, #40	@ 0x28
 80074c4:	2102      	movs	r1, #2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fefe 	bl	80082c8 <RCCEx_PLL3_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074d2:	e00a      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80074da:	e006      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80074dc:	bf00      	nop
 80074de:	e004      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80074e0:	bf00      	nop
 80074e2:	e002      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80074e4:	bf00      	nop
 80074e6:	e000      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80074e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10e      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074f2:	4b06      	ldr	r3, [pc, #24]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80074f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80074fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007502:	4a02      	ldr	r2, [pc, #8]	@ (800750c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007504:	430b      	orrs	r3, r1
 8007506:	6593      	str	r3, [r2, #88]	@ 0x58
 8007508:	e006      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800750a:	bf00      	nop
 800750c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007510:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007514:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007528:	2300      	movs	r3, #0
 800752a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800752e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007532:	460b      	mov	r3, r1
 8007534:	4313      	orrs	r3, r2
 8007536:	d055      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800753c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007540:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007544:	d033      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007546:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800754a:	d82c      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800754c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007550:	d02f      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007556:	d826      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007558:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800755c:	d02b      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800755e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007562:	d820      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007564:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007568:	d012      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800756a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800756e:	d81a      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d022      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007578:	d115      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800757a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800757e:	3308      	adds	r3, #8
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fdee 	bl	8008164 <RCCEx_PLL2_Config>
 8007588:	4603      	mov	r3, r0
 800758a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800758e:	e015      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007594:	3328      	adds	r3, #40	@ 0x28
 8007596:	2102      	movs	r1, #2
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fe95 	bl	80082c8 <RCCEx_PLL3_Config>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80075a4:	e00a      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80075ac:	e006      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80075ae:	bf00      	nop
 80075b0:	e004      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80075b2:	bf00      	nop
 80075b4:	e002      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80075b6:	bf00      	nop
 80075b8:	e000      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80075ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10b      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80075c4:	4ba1      	ldr	r3, [pc, #644]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80075c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80075cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075d4:	4a9d      	ldr	r2, [pc, #628]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80075d6:	430b      	orrs	r3, r1
 80075d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80075da:	e003      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80075e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f002 0308 	and.w	r3, r2, #8
 80075f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075f4:	2300      	movs	r3, #0
 80075f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80075fe:	460b      	mov	r3, r1
 8007600:	4313      	orrs	r3, r2
 8007602:	d01e      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800760c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007610:	d10c      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007616:	3328      	adds	r3, #40	@ 0x28
 8007618:	2102      	movs	r1, #2
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fe54 	bl	80082c8 <RCCEx_PLL3_Config>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800762c:	4b87      	ldr	r3, [pc, #540]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800762e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007630:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800763c:	4a83      	ldr	r2, [pc, #524]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800763e:	430b      	orrs	r3, r1
 8007640:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	f002 0310 	and.w	r3, r2, #16
 800764e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007652:	2300      	movs	r3, #0
 8007654:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007658:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800765c:	460b      	mov	r3, r1
 800765e:	4313      	orrs	r3, r2
 8007660:	d01e      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800766a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800766e:	d10c      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007674:	3328      	adds	r3, #40	@ 0x28
 8007676:	2102      	movs	r1, #2
 8007678:	4618      	mov	r0, r3
 800767a:	f000 fe25 	bl	80082c8 <RCCEx_PLL3_Config>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800768a:	4b70      	ldr	r3, [pc, #448]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800768c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007696:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800769a:	4a6c      	ldr	r2, [pc, #432]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800769c:	430b      	orrs	r3, r1
 800769e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80076ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076b0:	2300      	movs	r3, #0
 80076b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80076ba:	460b      	mov	r3, r1
 80076bc:	4313      	orrs	r3, r2
 80076be:	d03e      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80076c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076cc:	d022      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80076ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076d2:	d81b      	bhi.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80076d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076dc:	d00b      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80076de:	e015      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076e4:	3308      	adds	r3, #8
 80076e6:	2100      	movs	r1, #0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fd3b 	bl	8008164 <RCCEx_PLL2_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076f4:	e00f      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076fa:	3328      	adds	r3, #40	@ 0x28
 80076fc:	2102      	movs	r1, #2
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fde2 	bl	80082c8 <RCCEx_PLL3_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800770a:	e004      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007712:	e000      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007716:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10b      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800771e:	4b4b      	ldr	r3, [pc, #300]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007722:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800772a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800772e:	4a47      	ldr	r2, [pc, #284]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007730:	430b      	orrs	r3, r1
 8007732:	6593      	str	r3, [r2, #88]	@ 0x58
 8007734:	e003      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007736:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800773a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800773e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800774a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800774c:	2300      	movs	r3, #0
 800774e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007750:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007754:	460b      	mov	r3, r1
 8007756:	4313      	orrs	r3, r2
 8007758:	d03b      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800775a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007762:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007766:	d01f      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007768:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800776c:	d818      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800776e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007772:	d003      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007774:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007778:	d007      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800777a:	e011      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800777c:	4b33      	ldr	r3, [pc, #204]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007780:	4a32      	ldr	r2, [pc, #200]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007788:	e00f      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800778a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800778e:	3328      	adds	r3, #40	@ 0x28
 8007790:	2101      	movs	r1, #1
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fd98 	bl	80082c8 <RCCEx_PLL3_Config>
 8007798:	4603      	mov	r3, r0
 800779a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800779e:	e004      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80077a6:	e000      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80077a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10b      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077b2:	4b26      	ldr	r3, [pc, #152]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80077b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80077ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c2:	4a22      	ldr	r2, [pc, #136]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80077c4:	430b      	orrs	r3, r1
 80077c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80077c8:	e003      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80077d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80077de:	673b      	str	r3, [r7, #112]	@ 0x70
 80077e0:	2300      	movs	r3, #0
 80077e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80077e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80077e8:	460b      	mov	r3, r1
 80077ea:	4313      	orrs	r3, r2
 80077ec:	d034      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80077ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80077f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077fc:	d007      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80077fe:	e011      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007800:	4b12      	ldr	r3, [pc, #72]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007804:	4a11      	ldr	r2, [pc, #68]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800780a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800780c:	e00e      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800780e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007812:	3308      	adds	r3, #8
 8007814:	2102      	movs	r1, #2
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fca4 	bl	8008164 <RCCEx_PLL2_Config>
 800781c:	4603      	mov	r3, r0
 800781e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007822:	e003      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800782a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10d      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007834:	4b05      	ldr	r3, [pc, #20]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007838:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800783c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007842:	4a02      	ldr	r2, [pc, #8]	@ (800784c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007844:	430b      	orrs	r3, r1
 8007846:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007848:	e006      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800784a:	bf00      	nop
 800784c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007850:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007854:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007864:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007866:	2300      	movs	r3, #0
 8007868:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800786a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800786e:	460b      	mov	r3, r1
 8007870:	4313      	orrs	r3, r2
 8007872:	d00c      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007878:	3328      	adds	r3, #40	@ 0x28
 800787a:	2102      	movs	r1, #2
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fd23 	bl	80082c8 <RCCEx_PLL3_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800788e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800789a:	663b      	str	r3, [r7, #96]	@ 0x60
 800789c:	2300      	movs	r3, #0
 800789e:	667b      	str	r3, [r7, #100]	@ 0x64
 80078a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80078a4:	460b      	mov	r3, r1
 80078a6:	4313      	orrs	r3, r2
 80078a8:	d038      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80078aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078b6:	d018      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80078b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078bc:	d811      	bhi.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80078be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078c2:	d014      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80078c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078c8:	d80b      	bhi.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d011      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80078ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078d2:	d106      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d4:	4bc3      	ldr	r3, [pc, #780]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	4ac2      	ldr	r2, [pc, #776]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80078da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80078e0:	e008      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80078e8:	e004      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80078ea:	bf00      	nop
 80078ec:	e002      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80078f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10b      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078fc:	4bb9      	ldr	r3, [pc, #740]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80078fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007900:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800790c:	4ab5      	ldr	r2, [pc, #724]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800790e:	430b      	orrs	r3, r1
 8007910:	6553      	str	r3, [r2, #84]	@ 0x54
 8007912:	e003      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007914:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007918:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800791c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007928:	65bb      	str	r3, [r7, #88]	@ 0x58
 800792a:	2300      	movs	r3, #0
 800792c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800792e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007932:	460b      	mov	r3, r1
 8007934:	4313      	orrs	r3, r2
 8007936:	d009      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007938:	4baa      	ldr	r3, [pc, #680]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800793a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800793c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007946:	4aa7      	ldr	r2, [pc, #668]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007948:	430b      	orrs	r3, r1
 800794a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800794c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007954:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007958:	653b      	str	r3, [r7, #80]	@ 0x50
 800795a:	2300      	movs	r3, #0
 800795c:	657b      	str	r3, [r7, #84]	@ 0x54
 800795e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007962:	460b      	mov	r3, r1
 8007964:	4313      	orrs	r3, r2
 8007966:	d009      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007968:	4b9e      	ldr	r3, [pc, #632]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800796a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800796c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007976:	4a9b      	ldr	r2, [pc, #620]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007978:	430b      	orrs	r3, r1
 800797a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800797c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007988:	64bb      	str	r3, [r7, #72]	@ 0x48
 800798a:	2300      	movs	r3, #0
 800798c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800798e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007992:	460b      	mov	r3, r1
 8007994:	4313      	orrs	r3, r2
 8007996:	d009      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007998:	4b92      	ldr	r3, [pc, #584]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800799a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800799c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80079a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079a6:	4a8f      	ldr	r2, [pc, #572]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80079b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80079ba:	2300      	movs	r3, #0
 80079bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80079c2:	460b      	mov	r3, r1
 80079c4:	4313      	orrs	r3, r2
 80079c6:	d00e      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079c8:	4b86      	ldr	r3, [pc, #536]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	4a85      	ldr	r2, [pc, #532]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80079ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079d2:	6113      	str	r3, [r2, #16]
 80079d4:	4b83      	ldr	r3, [pc, #524]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80079d6:	6919      	ldr	r1, [r3, #16]
 80079d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80079e0:	4a80      	ldr	r2, [pc, #512]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80079e2:	430b      	orrs	r3, r1
 80079e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80079f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079f4:	2300      	movs	r3, #0
 80079f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80079fc:	460b      	mov	r3, r1
 80079fe:	4313      	orrs	r3, r2
 8007a00:	d009      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a02:	4b78      	ldr	r3, [pc, #480]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a06:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a10:	4a74      	ldr	r2, [pc, #464]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a12:	430b      	orrs	r3, r1
 8007a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007a22:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a24:	2300      	movs	r3, #0
 8007a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a28:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	d00a      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a32:	4b6c      	ldr	r3, [pc, #432]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a36:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a42:	4a68      	ldr	r2, [pc, #416]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007a44:	430b      	orrs	r3, r1
 8007a46:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	2100      	movs	r1, #0
 8007a52:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a5a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4313      	orrs	r3, r2
 8007a62:	d011      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a68:	3308      	adds	r3, #8
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fb79 	bl	8008164 <RCCEx_PLL2_Config>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007a78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	2100      	movs	r1, #0
 8007a92:	6239      	str	r1, [r7, #32]
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	d011      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	2101      	movs	r1, #1
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 fb59 	bl	8008164 <RCCEx_PLL2_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007ab8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ac4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	61b9      	str	r1, [r7, #24]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	d011      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ae8:	3308      	adds	r3, #8
 8007aea:	2102      	movs	r1, #2
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fb39 	bl	8008164 <RCCEx_PLL2_Config>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007af8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	2100      	movs	r1, #0
 8007b12:	6139      	str	r1, [r7, #16]
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	d011      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b28:	3328      	adds	r3, #40	@ 0x28
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fbcb 	bl	80082c8 <RCCEx_PLL3_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8007b38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	2100      	movs	r1, #0
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4313      	orrs	r3, r2
 8007b62:	d011      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b68:	3328      	adds	r3, #40	@ 0x28
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 fbab 	bl	80082c8 <RCCEx_PLL3_Config>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007b78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	2100      	movs	r1, #0
 8007b92:	6039      	str	r1, [r7, #0]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	607b      	str	r3, [r7, #4]
 8007b9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	d011      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ba8:	3328      	adds	r3, #40	@ 0x28
 8007baa:	2102      	movs	r1, #2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fb8b 	bl	80082c8 <RCCEx_PLL3_Config>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007bb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007bc8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	e000      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007be2:	bf00      	nop
 8007be4:	58024400 	.word	0x58024400

08007be8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007bec:	f7fe fde2 	bl	80067b4 <HAL_RCC_GetHCLKFreq>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	4b06      	ldr	r3, [pc, #24]	@ (8007c0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	091b      	lsrs	r3, r3, #4
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	4904      	ldr	r1, [pc, #16]	@ (8007c10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007bfe:	5ccb      	ldrb	r3, [r1, r3]
 8007c00:	f003 031f 	and.w	r3, r3, #31
 8007c04:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	0800ecf4 	.word	0x0800ecf4

08007c14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b089      	sub	sp, #36	@ 0x24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c1c:	4ba1      	ldr	r3, [pc, #644]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007c26:	4b9f      	ldr	r3, [pc, #636]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	0b1b      	lsrs	r3, r3, #12
 8007c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c32:	4b9c      	ldr	r3, [pc, #624]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	091b      	lsrs	r3, r3, #4
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007c3e:	4b99      	ldr	r3, [pc, #612]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c42:	08db      	lsrs	r3, r3, #3
 8007c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	fb02 f303 	mul.w	r3, r2, r3
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8111 	beq.w	8007e84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	f000 8083 	beq.w	8007d70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	f200 80a1 	bhi.w	8007db4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d056      	beq.n	8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c7e:	e099      	b.n	8007db4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c80:	4b88      	ldr	r3, [pc, #544]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0320 	and.w	r3, r3, #32
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d02d      	beq.n	8007ce8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c8c:	4b85      	ldr	r3, [pc, #532]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	08db      	lsrs	r3, r3, #3
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	4a84      	ldr	r2, [pc, #528]	@ (8007ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c98:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	ee07 3a90 	vmov	s15, r3
 8007ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ce6:	e087      	b.n	8007df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d2a:	e065      	b.n	8007df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3e:	4b59      	ldr	r3, [pc, #356]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d6e:	e043      	b.n	8007df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d82:	4b48      	ldr	r3, [pc, #288]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8a:	ee07 3a90 	vmov	s15, r3
 8007d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007db2:	e021      	b.n	8007df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc6:	4b37      	ldr	r3, [pc, #220]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007df6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007df8:	4b2a      	ldr	r3, [pc, #168]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfc:	0a5b      	lsrs	r3, r3, #9
 8007dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e1e:	ee17 2a90 	vmov	r2, s15
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007e26:	4b1f      	ldr	r3, [pc, #124]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2a:	0c1b      	lsrs	r3, r3, #16
 8007e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e30:	ee07 3a90 	vmov	s15, r3
 8007e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4c:	ee17 2a90 	vmov	r2, s15
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e54:	4b13      	ldr	r3, [pc, #76]	@ (8007ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e58:	0e1b      	lsrs	r3, r3, #24
 8007e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e7a:	ee17 2a90 	vmov	r2, s15
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e82:	e008      	b.n	8007e96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	609a      	str	r2, [r3, #8]
}
 8007e96:	bf00      	nop
 8007e98:	3724      	adds	r7, #36	@ 0x24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	58024400 	.word	0x58024400
 8007ea8:	03d09000 	.word	0x03d09000
 8007eac:	46000000 	.word	0x46000000
 8007eb0:	4c742400 	.word	0x4c742400
 8007eb4:	4a742400 	.word	0x4a742400
 8007eb8:	4af42400 	.word	0x4af42400

08007ebc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b089      	sub	sp, #36	@ 0x24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ec4:	4ba1      	ldr	r3, [pc, #644]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec8:	f003 0303 	and.w	r3, r3, #3
 8007ecc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007ece:	4b9f      	ldr	r3, [pc, #636]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed2:	0d1b      	lsrs	r3, r3, #20
 8007ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ed8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007eda:	4b9c      	ldr	r3, [pc, #624]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ede:	0a1b      	lsrs	r3, r3, #8
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007ee6:	4b99      	ldr	r3, [pc, #612]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eea:	08db      	lsrs	r3, r3, #3
 8007eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	fb02 f303 	mul.w	r3, r2, r3
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8111 	beq.w	800812c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	f000 8083 	beq.w	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	f200 80a1 	bhi.w	800805c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d056      	beq.n	8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f26:	e099      	b.n	800805c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f28:	4b88      	ldr	r3, [pc, #544]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0320 	and.w	r3, r3, #32
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d02d      	beq.n	8007f90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f34:	4b85      	ldr	r3, [pc, #532]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	08db      	lsrs	r3, r3, #3
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	4a84      	ldr	r2, [pc, #528]	@ (8008150 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f40:	fa22 f303 	lsr.w	r3, r2, r3
 8007f44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	ee07 3a90 	vmov	s15, r3
 8007f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	ee07 3a90 	vmov	s15, r3
 8007f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f8e:	e087      	b.n	80080a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008158 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fd2:	e065      	b.n	80080a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800815c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe6:	4b59      	ldr	r3, [pc, #356]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ffa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800800a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800800e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008016:	e043      	b.n	80080a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008022:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008160 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800802a:	4b48      	ldr	r3, [pc, #288]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800802c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800802e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800803a:	ed97 6a03 	vldr	s12, [r7, #12]
 800803e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800804a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800804e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800805a:	e021      	b.n	80080a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008066:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800815c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800806a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800806e:	4b37      	ldr	r3, [pc, #220]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008082:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800808a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800809e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80080a0:	4b2a      	ldr	r3, [pc, #168]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a4:	0a5b      	lsrs	r3, r3, #9
 80080a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80080be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c6:	ee17 2a90 	vmov	r2, s15
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80080ce:	4b1f      	ldr	r3, [pc, #124]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d2:	0c1b      	lsrs	r3, r3, #16
 80080d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f4:	ee17 2a90 	vmov	r2, s15
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80080fc:	4b13      	ldr	r3, [pc, #76]	@ (800814c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008100:	0e1b      	lsrs	r3, r3, #24
 8008102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008106:	ee07 3a90 	vmov	s15, r3
 800810a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008112:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008116:	edd7 6a07 	vldr	s13, [r7, #28]
 800811a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800811e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008122:	ee17 2a90 	vmov	r2, s15
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800812a:	e008      	b.n	800813e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	609a      	str	r2, [r3, #8]
}
 800813e:	bf00      	nop
 8008140:	3724      	adds	r7, #36	@ 0x24
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	58024400 	.word	0x58024400
 8008150:	03d09000 	.word	0x03d09000
 8008154:	46000000 	.word	0x46000000
 8008158:	4c742400 	.word	0x4c742400
 800815c:	4a742400 	.word	0x4a742400
 8008160:	4af42400 	.word	0x4af42400

08008164 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008172:	4b53      	ldr	r3, [pc, #332]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b03      	cmp	r3, #3
 800817c:	d101      	bne.n	8008182 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e099      	b.n	80082b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008182:	4b4f      	ldr	r3, [pc, #316]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a4e      	ldr	r2, [pc, #312]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008188:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800818c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800818e:	f7f9 ffb5 	bl	80020fc <HAL_GetTick>
 8008192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008194:	e008      	b.n	80081a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008196:	f7f9 ffb1 	bl	80020fc <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d901      	bls.n	80081a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e086      	b.n	80082b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081a8:	4b45      	ldr	r3, [pc, #276]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1f0      	bne.n	8008196 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081b4:	4b42      	ldr	r3, [pc, #264]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 80081b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	031b      	lsls	r3, r3, #12
 80081c2:	493f      	ldr	r1, [pc, #252]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	025b      	lsls	r3, r3, #9
 80081da:	b29b      	uxth	r3, r3
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	041b      	lsls	r3, r3, #16
 80081e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	061b      	lsls	r3, r3, #24
 80081f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081f8:	4931      	ldr	r1, [pc, #196]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081fe:	4b30      	ldr	r3, [pc, #192]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008202:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	492d      	ldr	r1, [pc, #180]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 800820c:	4313      	orrs	r3, r2
 800820e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008210:	4b2b      	ldr	r3, [pc, #172]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008214:	f023 0220 	bic.w	r2, r3, #32
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	4928      	ldr	r1, [pc, #160]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 800821e:	4313      	orrs	r3, r2
 8008220:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008222:	4b27      	ldr	r3, [pc, #156]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008226:	4a26      	ldr	r2, [pc, #152]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008228:	f023 0310 	bic.w	r3, r3, #16
 800822c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800822e:	4b24      	ldr	r3, [pc, #144]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008230:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008232:	4b24      	ldr	r3, [pc, #144]	@ (80082c4 <RCCEx_PLL2_Config+0x160>)
 8008234:	4013      	ands	r3, r2
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	69d2      	ldr	r2, [r2, #28]
 800823a:	00d2      	lsls	r2, r2, #3
 800823c:	4920      	ldr	r1, [pc, #128]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 800823e:	4313      	orrs	r3, r2
 8008240:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008242:	4b1f      	ldr	r3, [pc, #124]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008246:	4a1e      	ldr	r2, [pc, #120]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008248:	f043 0310 	orr.w	r3, r3, #16
 800824c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d106      	bne.n	8008262 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008254:	4b1a      	ldr	r3, [pc, #104]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008258:	4a19      	ldr	r2, [pc, #100]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 800825a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800825e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008260:	e00f      	b.n	8008282 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d106      	bne.n	8008276 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008268:	4b15      	ldr	r3, [pc, #84]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 800826a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826c:	4a14      	ldr	r2, [pc, #80]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 800826e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008272:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008274:	e005      	b.n	8008282 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008276:	4b12      	ldr	r3, [pc, #72]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827a:	4a11      	ldr	r2, [pc, #68]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 800827c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008280:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008282:	4b0f      	ldr	r3, [pc, #60]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a0e      	ldr	r2, [pc, #56]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 8008288:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800828c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800828e:	f7f9 ff35 	bl	80020fc <HAL_GetTick>
 8008292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008294:	e008      	b.n	80082a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008296:	f7f9 ff31 	bl	80020fc <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d901      	bls.n	80082a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e006      	b.n	80082b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082a8:	4b05      	ldr	r3, [pc, #20]	@ (80082c0 <RCCEx_PLL2_Config+0x15c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0f0      	beq.n	8008296 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	58024400 	.word	0x58024400
 80082c4:	ffff0007 	.word	0xffff0007

080082c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082d6:	4b53      	ldr	r3, [pc, #332]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80082d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d101      	bne.n	80082e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e099      	b.n	800841a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a4e      	ldr	r2, [pc, #312]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80082ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082f2:	f7f9 ff03 	bl	80020fc <HAL_GetTick>
 80082f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082f8:	e008      	b.n	800830c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082fa:	f7f9 feff 	bl	80020fc <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d901      	bls.n	800830c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e086      	b.n	800841a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800830c:	4b45      	ldr	r3, [pc, #276]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1f0      	bne.n	80082fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008318:	4b42      	ldr	r3, [pc, #264]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 800831a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	051b      	lsls	r3, r3, #20
 8008326:	493f      	ldr	r1, [pc, #252]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 8008328:	4313      	orrs	r3, r2
 800832a:	628b      	str	r3, [r1, #40]	@ 0x28
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	3b01      	subs	r3, #1
 8008332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	3b01      	subs	r3, #1
 800833c:	025b      	lsls	r3, r3, #9
 800833e:	b29b      	uxth	r3, r3
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	3b01      	subs	r3, #1
 8008348:	041b      	lsls	r3, r3, #16
 800834a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	3b01      	subs	r3, #1
 8008356:	061b      	lsls	r3, r3, #24
 8008358:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800835c:	4931      	ldr	r1, [pc, #196]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 800835e:	4313      	orrs	r3, r2
 8008360:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008362:	4b30      	ldr	r3, [pc, #192]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	492d      	ldr	r1, [pc, #180]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 8008370:	4313      	orrs	r3, r2
 8008372:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008374:	4b2b      	ldr	r3, [pc, #172]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 8008376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008378:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	4928      	ldr	r1, [pc, #160]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 8008382:	4313      	orrs	r3, r2
 8008384:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008386:	4b27      	ldr	r3, [pc, #156]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 8008388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838a:	4a26      	ldr	r2, [pc, #152]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 800838c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008390:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008392:	4b24      	ldr	r3, [pc, #144]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 8008394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008396:	4b24      	ldr	r3, [pc, #144]	@ (8008428 <RCCEx_PLL3_Config+0x160>)
 8008398:	4013      	ands	r3, r2
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	69d2      	ldr	r2, [r2, #28]
 800839e:	00d2      	lsls	r2, r2, #3
 80083a0:	4920      	ldr	r1, [pc, #128]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d106      	bne.n	80083c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083bc:	4a19      	ldr	r2, [pc, #100]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80083c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083c4:	e00f      	b.n	80083e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d106      	bne.n	80083da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083cc:	4b15      	ldr	r3, [pc, #84]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d0:	4a14      	ldr	r2, [pc, #80]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083d8:	e005      	b.n	80083e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083da:	4b12      	ldr	r3, [pc, #72]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083de:	4a11      	ldr	r2, [pc, #68]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 80083ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083f2:	f7f9 fe83 	bl	80020fc <HAL_GetTick>
 80083f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083f8:	e008      	b.n	800840c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083fa:	f7f9 fe7f 	bl	80020fc <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e006      	b.n	800841a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800840c:	4b05      	ldr	r3, [pc, #20]	@ (8008424 <RCCEx_PLL3_Config+0x15c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0f0      	beq.n	80083fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	58024400 	.word	0x58024400
 8008428:	ffff0007 	.word	0xffff0007

0800842c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e10f      	b.n	800865e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a87      	ldr	r2, [pc, #540]	@ (8008668 <HAL_SPI_Init+0x23c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00f      	beq.n	800846e <HAL_SPI_Init+0x42>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a86      	ldr	r2, [pc, #536]	@ (800866c <HAL_SPI_Init+0x240>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00a      	beq.n	800846e <HAL_SPI_Init+0x42>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a84      	ldr	r2, [pc, #528]	@ (8008670 <HAL_SPI_Init+0x244>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d005      	beq.n	800846e <HAL_SPI_Init+0x42>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	2b0f      	cmp	r3, #15
 8008468:	d901      	bls.n	800846e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e0f7      	b.n	800865e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 ff76 	bl	8009360 <SPI_GetPacketSize>
 8008474:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a7b      	ldr	r2, [pc, #492]	@ (8008668 <HAL_SPI_Init+0x23c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00c      	beq.n	800849a <HAL_SPI_Init+0x6e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a79      	ldr	r2, [pc, #484]	@ (800866c <HAL_SPI_Init+0x240>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d007      	beq.n	800849a <HAL_SPI_Init+0x6e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a78      	ldr	r2, [pc, #480]	@ (8008670 <HAL_SPI_Init+0x244>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d002      	beq.n	800849a <HAL_SPI_Init+0x6e>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b08      	cmp	r3, #8
 8008498:	d811      	bhi.n	80084be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800849e:	4a72      	ldr	r2, [pc, #456]	@ (8008668 <HAL_SPI_Init+0x23c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d009      	beq.n	80084b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a70      	ldr	r2, [pc, #448]	@ (800866c <HAL_SPI_Init+0x240>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d004      	beq.n	80084b8 <HAL_SPI_Init+0x8c>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a6f      	ldr	r2, [pc, #444]	@ (8008670 <HAL_SPI_Init+0x244>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d104      	bne.n	80084c2 <HAL_SPI_Init+0x96>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b10      	cmp	r3, #16
 80084bc:	d901      	bls.n	80084c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e0cd      	b.n	800865e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d106      	bne.n	80084dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7f8 fd0a 	bl	8000ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0201 	bic.w	r2, r2, #1
 80084f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80084fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008508:	d119      	bne.n	800853e <HAL_SPI_Init+0x112>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008512:	d103      	bne.n	800851c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10c      	bne.n	800853e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800852c:	d107      	bne.n	800853e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800853c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00f      	beq.n	800856a <HAL_SPI_Init+0x13e>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b06      	cmp	r3, #6
 8008550:	d90b      	bls.n	800856a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	e007      	b.n	800857a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008578:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69da      	ldr	r2, [r3, #28]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008582:	431a      	orrs	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858c:	ea42 0103 	orr.w	r1, r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	431a      	orrs	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085da:	ea42 0103 	orr.w	r1, r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d113      	bne.n	800861a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008604:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008618:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0201 	bic.w	r2, r2, #1
 8008628:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	40013000 	.word	0x40013000
 800866c:	40003800 	.word	0x40003800
 8008670:	40003c00 	.word	0x40003c00

08008674 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af02      	add	r7, sp, #8
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	4613      	mov	r3, r2
 8008682:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3320      	adds	r3, #32
 800868a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800868c:	f7f9 fd36 	bl	80020fc <HAL_GetTick>
 8008690:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b01      	cmp	r3, #1
 800869c:	d001      	beq.n	80086a2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800869e:	2302      	movs	r3, #2
 80086a0:	e1d1      	b.n	8008a46 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <HAL_SPI_Transmit+0x3a>
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e1c9      	b.n	8008a46 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d101      	bne.n	80086c0 <HAL_SPI_Transmit+0x4c>
 80086bc:	2302      	movs	r3, #2
 80086be:	e1c2      	b.n	8008a46 <HAL_SPI_Transmit+0x3d2>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2203      	movs	r2, #3
 80086cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	88fa      	ldrh	r2, [r7, #6]
 80086e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	88fa      	ldrh	r2, [r7, #6]
 80086ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008718:	d108      	bne.n	800872c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	e009      	b.n	8008740 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800873e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	4b96      	ldr	r3, [pc, #600]	@ (80089a0 <HAL_SPI_Transmit+0x32c>)
 8008748:	4013      	ands	r3, r2
 800874a:	88f9      	ldrh	r1, [r7, #6]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	430b      	orrs	r3, r1
 8008752:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0201 	orr.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800876c:	d107      	bne.n	800877e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800877c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	2b0f      	cmp	r3, #15
 8008784:	d947      	bls.n	8008816 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008786:	e03f      	b.n	8008808 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b02      	cmp	r3, #2
 8008794:	d114      	bne.n	80087c0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6812      	ldr	r2, [r2, #0]
 80087a0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087a6:	1d1a      	adds	r2, r3, #4
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	3b01      	subs	r3, #1
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087be:	e023      	b.n	8008808 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087c0:	f7f9 fc9c 	bl	80020fc <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d803      	bhi.n	80087d8 <HAL_SPI_Transmit+0x164>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d6:	d102      	bne.n	80087de <HAL_SPI_Transmit+0x16a>
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d114      	bne.n	8008808 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 fcf0 	bl	80091c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e11e      	b.n	8008a46 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800880e:	b29b      	uxth	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1b9      	bne.n	8008788 <HAL_SPI_Transmit+0x114>
 8008814:	e0f1      	b.n	80089fa <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	2b07      	cmp	r3, #7
 800881c:	f240 80e6 	bls.w	80089ec <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008820:	e05d      	b.n	80088de <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b02      	cmp	r3, #2
 800882e:	d132      	bne.n	8008896 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008836:	b29b      	uxth	r3, r3
 8008838:	2b01      	cmp	r3, #1
 800883a:	d918      	bls.n	800886e <HAL_SPI_Transmit+0x1fa>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d014      	beq.n	800886e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008854:	1d1a      	adds	r2, r3, #4
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008860:	b29b      	uxth	r3, r3
 8008862:	3b02      	subs	r3, #2
 8008864:	b29a      	uxth	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800886c:	e037      	b.n	80088de <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008872:	881a      	ldrh	r2, [r3, #0]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800887c:	1c9a      	adds	r2, r3, #2
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008888:	b29b      	uxth	r3, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008894:	e023      	b.n	80088de <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008896:	f7f9 fc31 	bl	80020fc <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d803      	bhi.n	80088ae <HAL_SPI_Transmit+0x23a>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ac:	d102      	bne.n	80088b4 <HAL_SPI_Transmit+0x240>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d114      	bne.n	80088de <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 fc85 	bl	80091c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e0b3      	b.n	8008a46 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d19b      	bne.n	8008822 <HAL_SPI_Transmit+0x1ae>
 80088ea:	e086      	b.n	80089fa <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d154      	bne.n	80089a4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008900:	b29b      	uxth	r3, r3
 8008902:	2b03      	cmp	r3, #3
 8008904:	d918      	bls.n	8008938 <HAL_SPI_Transmit+0x2c4>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890a:	2b40      	cmp	r3, #64	@ 0x40
 800890c:	d914      	bls.n	8008938 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6812      	ldr	r2, [r2, #0]
 8008918:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b04      	subs	r3, #4
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008936:	e059      	b.n	80089ec <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800893e:	b29b      	uxth	r3, r3
 8008940:	2b01      	cmp	r3, #1
 8008942:	d917      	bls.n	8008974 <HAL_SPI_Transmit+0x300>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d013      	beq.n	8008974 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008950:	881a      	ldrh	r2, [r3, #0]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800895a:	1c9a      	adds	r2, r3, #2
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008966:	b29b      	uxth	r3, r3
 8008968:	3b02      	subs	r3, #2
 800896a:	b29a      	uxth	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008972:	e03b      	b.n	80089ec <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3320      	adds	r3, #32
 800897e:	7812      	ldrb	r2, [r2, #0]
 8008980:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008992:	b29b      	uxth	r3, r3
 8008994:	3b01      	subs	r3, #1
 8008996:	b29a      	uxth	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800899e:	e025      	b.n	80089ec <HAL_SPI_Transmit+0x378>
 80089a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089a4:	f7f9 fbaa 	bl	80020fc <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d803      	bhi.n	80089bc <HAL_SPI_Transmit+0x348>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ba:	d102      	bne.n	80089c2 <HAL_SPI_Transmit+0x34e>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d114      	bne.n	80089ec <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 fbfe 	bl	80091c4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e02c      	b.n	8008a46 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f47f af79 	bne.w	80088ec <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2200      	movs	r2, #0
 8008a02:	2108      	movs	r1, #8
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fc7d 	bl	8009304 <SPI_WaitOnFlagUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d007      	beq.n	8008a20 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a16:	f043 0220 	orr.w	r2, r3, #32
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 fbcf 	bl	80091c4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e000      	b.n	8008a46 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008a44:	2300      	movs	r3, #0
  }
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop

08008a50 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d001      	beq.n	8008a6e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e126      	b.n	8008cbc <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <HAL_SPI_Transmit_DMA+0x2a>
 8008a74:	88fb      	ldrh	r3, [r7, #6]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e11e      	b.n	8008cbc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d101      	bne.n	8008a8c <HAL_SPI_Transmit_DMA+0x3c>
 8008a88:	2302      	movs	r3, #2
 8008a8a:	e117      	b.n	8008cbc <HAL_SPI_Transmit_DMA+0x26c>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2203      	movs	r2, #3
 8008a98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	88fa      	ldrh	r2, [r7, #6]
 8008aae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	88fa      	ldrh	r2, [r7, #6]
 8008ab6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008ae4:	d108      	bne.n	8008af8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	e009      	b.n	8008b0c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008b0a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	2b0f      	cmp	r3, #15
 8008b12:	d905      	bls.n	8008b20 <HAL_SPI_Transmit_DMA+0xd0>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b1e:	d10f      	bne.n	8008b40 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008b24:	2b07      	cmp	r3, #7
 8008b26:	d911      	bls.n	8008b4c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b32:	d00b      	beq.n	8008b4c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b38:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b3e:	d005      	beq.n	8008b4c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e0b7      	b.n	8008cbc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	2b07      	cmp	r3, #7
 8008b52:	d820      	bhi.n	8008b96 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b5e:	d109      	bne.n	8008b74 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	3301      	adds	r3, #1
 8008b6a:	105b      	asrs	r3, r3, #1
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b7e:	d11e      	bne.n	8008bbe <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	3303      	adds	r3, #3
 8008b8a:	109b      	asrs	r3, r3, #2
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008b94:	e013      	b.n	8008bbe <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	2b0f      	cmp	r3, #15
 8008b9c:	d80f      	bhi.n	8008bbe <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ba8:	d109      	bne.n	8008bbe <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	105b      	asrs	r3, r3, #1
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bc2:	4a40      	ldr	r2, [pc, #256]	@ (8008cc4 <HAL_SPI_Transmit_DMA+0x274>)
 8008bc4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bca:	4a3f      	ldr	r2, [pc, #252]	@ (8008cc8 <HAL_SPI_Transmit_DMA+0x278>)
 8008bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8008ccc <HAL_SPI_Transmit_DMA+0x27c>)
 8008bd4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bda:	2200      	movs	r2, #0
 8008bdc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008bec:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3320      	adds	r3, #32
 8008bfe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008c08:	f7f9 ffbe 	bl	8002b88 <HAL_DMA_Start_IT>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d011      	beq.n	8008c36 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c18:	f043 0210 	orr.w	r2, r3, #16
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e042      	b.n	8008cbc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c40:	d108      	bne.n	8008c54 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6859      	ldr	r1, [r3, #4]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	4b20      	ldr	r3, [pc, #128]	@ (8008cd0 <HAL_SPI_Transmit_DMA+0x280>)
 8008c4e:	400b      	ands	r3, r1
 8008c50:	6053      	str	r3, [r2, #4]
 8008c52:	e009      	b.n	8008c68 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8008cd0 <HAL_SPI_Transmit_DMA+0x280>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	88f9      	ldrh	r1, [r7, #6]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	6812      	ldr	r2, [r2, #0]
 8008c64:	430b      	orrs	r3, r1
 8008c66:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689a      	ldr	r2, [r3, #8]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c76:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	691a      	ldr	r2, [r3, #16]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8008c86:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f042 0201 	orr.w	r2, r2, #1
 8008c96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ca0:	d107      	bne.n	8008cb2 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cb0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	0800912f 	.word	0x0800912f
 8008cc8:	080090e9 	.word	0x080090e9
 8008ccc:	0800914b 	.word	0x0800914b
 8008cd0:	ffff0000 	.word	0xffff0000

08008cd4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	@ 0x28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008cec:	6a3a      	ldr	r2, [r7, #32]
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008d06:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3330      	adds	r3, #48	@ 0x30
 8008d0e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d010      	beq.n	8008d3c <HAL_SPI_IRQHandler+0x68>
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	f003 0308 	and.w	r3, r3, #8
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	699a      	ldr	r2, [r3, #24]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d32:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f9cd 	bl	80090d4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008d3a:	e192      	b.n	8009062 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d113      	bne.n	8008d6e <HAL_SPI_IRQHandler+0x9a>
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	f003 0320 	and.w	r3, r3, #32
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10e      	bne.n	8008d6e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	4798      	blx	r3
    handled = 1UL;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10f      	bne.n	8008d98 <HAL_SPI_IRQHandler+0xc4>
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d105      	bne.n	8008d98 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
    handled = 1UL;
 8008d94:	2301      	movs	r3, #1
 8008d96:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10f      	bne.n	8008dc2 <HAL_SPI_IRQHandler+0xee>
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00a      	beq.n	8008dc2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	4798      	blx	r3
    handled = 1UL;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 8147 	bne.w	8009058 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	f003 0308 	and.w	r3, r3, #8
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 808b 	beq.w	8008eec <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	699a      	ldr	r2, [r3, #24]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f042 0208 	orr.w	r2, r2, #8
 8008de4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699a      	ldr	r2, [r3, #24]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0210 	orr.w	r2, r2, #16
 8008df4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e04:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	691a      	ldr	r2, [r3, #16]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0208 	bic.w	r2, r2, #8
 8008e14:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d13d      	bne.n	8008ea0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008e24:	e036      	b.n	8008e94 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	2b0f      	cmp	r3, #15
 8008e2c:	d90b      	bls.n	8008e46 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008e38:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e3e:	1d1a      	adds	r2, r3, #4
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	665a      	str	r2, [r3, #100]	@ 0x64
 8008e44:	e01d      	b.n	8008e82 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	2b07      	cmp	r3, #7
 8008e4c:	d90b      	bls.n	8008e66 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	8812      	ldrh	r2, [r2, #0]
 8008e56:	b292      	uxth	r2, r2
 8008e58:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e5e:	1c9a      	adds	r2, r3, #2
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	665a      	str	r2, [r3, #100]	@ 0x64
 8008e64:	e00d      	b.n	8008e82 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e72:	7812      	ldrb	r2, [r2, #0]
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1c2      	bne.n	8008e26 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f98f 	bl	80091c4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d003      	beq.n	8008ec0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f901 	bl	80090c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008ebe:	e0d0      	b.n	8009062 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008ec0:	7cfb      	ldrb	r3, [r7, #19]
 8008ec2:	2b05      	cmp	r3, #5
 8008ec4:	d103      	bne.n	8008ece <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f8e6 	bl	8009098 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008ecc:	e0c6      	b.n	800905c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008ece:	7cfb      	ldrb	r3, [r7, #19]
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d103      	bne.n	8008edc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f8d5 	bl	8009084 <HAL_SPI_RxCpltCallback>
    return;
 8008eda:	e0bf      	b.n	800905c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008edc:	7cfb      	ldrb	r3, [r7, #19]
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	f040 80bc 	bne.w	800905c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f8c3 	bl	8009070 <HAL_SPI_TxCpltCallback>
    return;
 8008eea:	e0b7      	b.n	800905c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 80b5 	beq.w	8009062 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00f      	beq.n	8008f22 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f08:	f043 0204 	orr.w	r2, r3, #4
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	699a      	ldr	r2, [r3, #24]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f20:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00f      	beq.n	8008f4c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f32:	f043 0201 	orr.w	r2, r3, #1
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	699a      	ldr	r2, [r3, #24]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f4a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00f      	beq.n	8008f76 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f5c:	f043 0208 	orr.w	r2, r3, #8
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f74:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00f      	beq.n	8008fa0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	699a      	ldr	r2, [r3, #24]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0220 	orr.w	r2, r2, #32
 8008f9e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d05a      	beq.n	8009060 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0201 	bic.w	r2, r2, #1
 8008fb8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6919      	ldr	r1, [r3, #16]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	4b28      	ldr	r3, [pc, #160]	@ (8009068 <HAL_SPI_IRQHandler+0x394>)
 8008fc6:	400b      	ands	r3, r1
 8008fc8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008fd0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008fd4:	d138      	bne.n	8009048 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008fe4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d013      	beq.n	8009016 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800906c <HAL_SPI_IRQHandler+0x398>)
 8008ff4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fa fb4c 	bl	8003698 <HAL_DMA_Abort_IT>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d007      	beq.n	8009016 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800900c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800901a:	2b00      	cmp	r3, #0
 800901c:	d020      	beq.n	8009060 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009022:	4a12      	ldr	r2, [pc, #72]	@ (800906c <HAL_SPI_IRQHandler+0x398>)
 8009024:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800902a:	4618      	mov	r0, r3
 800902c:	f7fa fb34 	bl	8003698 <HAL_DMA_Abort_IT>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d014      	beq.n	8009060 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800903c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009046:	e00b      	b.n	8009060 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f835 	bl	80090c0 <HAL_SPI_ErrorCallback>
    return;
 8009056:	e003      	b.n	8009060 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009058:	bf00      	nop
 800905a:	e002      	b.n	8009062 <HAL_SPI_IRQHandler+0x38e>
    return;
 800905c:	bf00      	nop
 800905e:	e000      	b.n	8009062 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009060:	bf00      	nop
  }
}
 8009062:	3728      	adds	r7, #40	@ 0x28
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	fffffc94 	.word	0xfffffc94
 800906c:	08009191 	.word	0x08009191

08009070 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b07      	cmp	r3, #7
 8009100:	d011      	beq.n	8009126 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800910c:	d103      	bne.n	8009116 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f7ff ffae 	bl	8009070 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009114:	e007      	b.n	8009126 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	691a      	ldr	r2, [r3, #16]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f042 0208 	orr.w	r2, r2, #8
 8009124:	611a      	str	r2, [r3, #16]
}
 8009126:	bf00      	nop
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f7ff ffb5 	bl	80090ac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009156:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7fb fc45 	bl	80049e8 <HAL_DMA_GetError>
 800915e:	4603      	mov	r3, r0
 8009160:	2b02      	cmp	r3, #2
 8009162:	d011      	beq.n	8009188 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f82d 	bl	80091c4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009170:	f043 0210 	orr.w	r2, r3, #16
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f7ff ff9c 	bl	80090c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009188:	bf00      	nop
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff ff82 	bl	80090c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091bc:	bf00      	nop
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0208 	orr.w	r2, r2, #8
 80091e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0210 	orr.w	r2, r2, #16
 80091f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f022 0201 	bic.w	r2, r2, #1
 8009202:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6919      	ldr	r1, [r3, #16]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b3c      	ldr	r3, [pc, #240]	@ (8009300 <SPI_CloseTransfer+0x13c>)
 8009210:	400b      	ands	r3, r1
 8009212:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689a      	ldr	r2, [r3, #8]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009222:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b04      	cmp	r3, #4
 800922e:	d014      	beq.n	800925a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f003 0320 	and.w	r3, r3, #32
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00f      	beq.n	800925a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009240:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	699a      	ldr	r2, [r3, #24]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0220 	orr.w	r2, r2, #32
 8009258:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b03      	cmp	r3, #3
 8009264:	d014      	beq.n	8009290 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00f      	beq.n	8009290 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009276:	f043 0204 	orr.w	r2, r3, #4
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	699a      	ldr	r2, [r3, #24]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800928e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00f      	beq.n	80092ba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092a0:	f043 0201 	orr.w	r2, r3, #1
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699a      	ldr	r2, [r3, #24]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092b8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00f      	beq.n	80092e4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092ca:	f043 0208 	orr.w	r2, r3, #8
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	699a      	ldr	r2, [r3, #24]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092e2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	fffffc90 	.word	0xfffffc90

08009304 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	603b      	str	r3, [r7, #0]
 8009310:	4613      	mov	r3, r2
 8009312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009314:	e010      	b.n	8009338 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009316:	f7f8 fef1 	bl	80020fc <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	429a      	cmp	r2, r3
 8009324:	d803      	bhi.n	800932e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932c:	d102      	bne.n	8009334 <SPI_WaitOnFlagUntilTimeout+0x30>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d101      	bne.n	8009338 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e00f      	b.n	8009358 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	695a      	ldr	r2, [r3, #20]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4013      	ands	r3, r2
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	429a      	cmp	r2, r3
 8009346:	bf0c      	ite	eq
 8009348:	2301      	moveq	r3, #1
 800934a:	2300      	movne	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	461a      	mov	r2, r3
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	429a      	cmp	r2, r3
 8009354:	d0df      	beq.n	8009316 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800936c:	095b      	lsrs	r3, r3, #5
 800936e:	3301      	adds	r3, #1
 8009370:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	3301      	adds	r3, #1
 8009378:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	3307      	adds	r3, #7
 800937e:	08db      	lsrs	r3, r3, #3
 8009380:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	fb02 f303 	mul.w	r3, r2, r3
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e042      	b.n	800942e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d106      	bne.n	80093c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7f8 fc08 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2224      	movs	r2, #36	@ 0x24
 80093c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f022 0201 	bic.w	r2, r2, #1
 80093d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 fbd7 	bl	800ab94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fd68 	bl	8009ebc <UART_SetConfig>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d101      	bne.n	80093f6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e01b      	b.n	800942e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009404:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009414:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f042 0201 	orr.w	r2, r2, #1
 8009424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 fc56 	bl	800acd8 <UART_CheckIdleState>
 800942c:	4603      	mov	r3, r0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b08a      	sub	sp, #40	@ 0x28
 800943a:	af02      	add	r7, sp, #8
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	603b      	str	r3, [r7, #0]
 8009442:	4613      	mov	r3, r2
 8009444:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800944c:	2b20      	cmp	r3, #32
 800944e:	d17b      	bne.n	8009548 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <HAL_UART_Transmit+0x26>
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e074      	b.n	800954a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2221      	movs	r2, #33	@ 0x21
 800946c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009470:	f7f8 fe44 	bl	80020fc <HAL_GetTick>
 8009474:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	88fa      	ldrh	r2, [r7, #6]
 800947a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	88fa      	ldrh	r2, [r7, #6]
 8009482:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800948e:	d108      	bne.n	80094a2 <HAL_UART_Transmit+0x6c>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d104      	bne.n	80094a2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009498:	2300      	movs	r3, #0
 800949a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	61bb      	str	r3, [r7, #24]
 80094a0:	e003      	b.n	80094aa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80094aa:	e030      	b.n	800950e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2200      	movs	r2, #0
 80094b4:	2180      	movs	r1, #128	@ 0x80
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f001 fcb8 	bl	800ae2c <UART_WaitOnFlagUntilTimeout>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d005      	beq.n	80094ce <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2220      	movs	r2, #32
 80094c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e03d      	b.n	800954a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10b      	bne.n	80094ec <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	461a      	mov	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	3302      	adds	r3, #2
 80094e8:	61bb      	str	r3, [r7, #24]
 80094ea:	e007      	b.n	80094fc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	3301      	adds	r3, #1
 80094fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009502:	b29b      	uxth	r3, r3
 8009504:	3b01      	subs	r3, #1
 8009506:	b29a      	uxth	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009514:	b29b      	uxth	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1c8      	bne.n	80094ac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2200      	movs	r2, #0
 8009522:	2140      	movs	r1, #64	@ 0x40
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f001 fc81 	bl	800ae2c <UART_WaitOnFlagUntilTimeout>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d005      	beq.n	800953c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e006      	b.n	800954a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2220      	movs	r2, #32
 8009540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	e000      	b.n	800954a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009548:	2302      	movs	r3, #2
  }
}
 800954a:	4618      	mov	r0, r3
 800954c:	3720      	adds	r7, #32
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b09a      	sub	sp, #104	@ 0x68
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009564:	e853 3f00 	ldrex	r3, [r3]
 8009568:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800956a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800956c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009570:	667b      	str	r3, [r7, #100]	@ 0x64
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800957a:	657b      	str	r3, [r7, #84]	@ 0x54
 800957c:	653a      	str	r2, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009580:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1e6      	bne.n	800955c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3308      	adds	r3, #8
 8009594:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800959e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095a0:	4b46      	ldr	r3, [pc, #280]	@ (80096bc <HAL_UART_AbortReceive+0x168>)
 80095a2:	4013      	ands	r3, r2
 80095a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3308      	adds	r3, #8
 80095ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80095ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80095b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e5      	bne.n	800958e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d118      	bne.n	80095fc <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d0:	6a3b      	ldr	r3, [r7, #32]
 80095d2:	e853 3f00 	ldrex	r3, [r3]
 80095d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	f023 0310 	bic.w	r3, r3, #16
 80095de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e6      	bne.n	80095ca <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009606:	2b40      	cmp	r3, #64	@ 0x40
 8009608:	d13b      	bne.n	8009682 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3308      	adds	r3, #8
 8009610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	60bb      	str	r3, [r7, #8]
   return(result);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009620:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3308      	adds	r3, #8
 8009628:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800962a:	61ba      	str	r2, [r7, #24]
 800962c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	6979      	ldr	r1, [r7, #20]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	e841 2300 	strex	r3, r2, [r1]
 8009636:	613b      	str	r3, [r7, #16]
   return(result);
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e5      	bne.n	800960a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009644:	2b00      	cmp	r3, #0
 8009646:	d01c      	beq.n	8009682 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800964e:	2200      	movs	r2, #0
 8009650:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009658:	4618      	mov	r0, r3
 800965a:	f7f9 fcff 	bl	800305c <HAL_DMA_Abort>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00e      	beq.n	8009682 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800966a:	4618      	mov	r0, r3
 800966c:	f7fb f9bc 	bl	80049e8 <HAL_DMA_GetError>
 8009670:	4603      	mov	r3, r0
 8009672:	2b20      	cmp	r3, #32
 8009674:	d105      	bne.n	8009682 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2210      	movs	r2, #16
 800967a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800967e:	2303      	movs	r3, #3
 8009680:	e017      	b.n	80096b2 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	220f      	movs	r2, #15
 8009690:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	699a      	ldr	r2, [r3, #24]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f042 0208 	orr.w	r2, r2, #8
 80096a0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3768      	adds	r7, #104	@ 0x68
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	effffffe 	.word	0xeffffffe

080096c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b0ba      	sub	sp, #232	@ 0xe8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80096ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80096ee:	4013      	ands	r3, r2
 80096f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80096f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d11b      	bne.n	8009734 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009700:	f003 0320 	and.w	r3, r3, #32
 8009704:	2b00      	cmp	r3, #0
 8009706:	d015      	beq.n	8009734 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800970c:	f003 0320 	and.w	r3, r3, #32
 8009710:	2b00      	cmp	r3, #0
 8009712:	d105      	bne.n	8009720 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d009      	beq.n	8009734 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 8393 	beq.w	8009e50 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	4798      	blx	r3
      }
      return;
 8009732:	e38d      	b.n	8009e50 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 8123 	beq.w	8009984 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800973e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009742:	4b8d      	ldr	r3, [pc, #564]	@ (8009978 <HAL_UART_IRQHandler+0x2b8>)
 8009744:	4013      	ands	r3, r2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d106      	bne.n	8009758 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800974a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800974e:	4b8b      	ldr	r3, [pc, #556]	@ (800997c <HAL_UART_IRQHandler+0x2bc>)
 8009750:	4013      	ands	r3, r2
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 8116 	beq.w	8009984 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d011      	beq.n	8009788 <HAL_UART_IRQHandler+0xc8>
 8009764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00b      	beq.n	8009788 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2201      	movs	r2, #1
 8009776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800977e:	f043 0201 	orr.w	r2, r3, #1
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b00      	cmp	r3, #0
 8009792:	d011      	beq.n	80097b8 <HAL_UART_IRQHandler+0xf8>
 8009794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00b      	beq.n	80097b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2202      	movs	r2, #2
 80097a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ae:	f043 0204 	orr.w	r2, r3, #4
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d011      	beq.n	80097e8 <HAL_UART_IRQHandler+0x128>
 80097c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00b      	beq.n	80097e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2204      	movs	r2, #4
 80097d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097de:	f043 0202 	orr.w	r2, r3, #2
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ec:	f003 0308 	and.w	r3, r3, #8
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d017      	beq.n	8009824 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097f8:	f003 0320 	and.w	r3, r3, #32
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d105      	bne.n	800980c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009800:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009804:	4b5c      	ldr	r3, [pc, #368]	@ (8009978 <HAL_UART_IRQHandler+0x2b8>)
 8009806:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2208      	movs	r2, #8
 8009812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800981a:	f043 0208 	orr.w	r2, r3, #8
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800982c:	2b00      	cmp	r3, #0
 800982e:	d012      	beq.n	8009856 <HAL_UART_IRQHandler+0x196>
 8009830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009834:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00c      	beq.n	8009856 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800984c:	f043 0220 	orr.w	r2, r3, #32
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 82f9 	beq.w	8009e54 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009866:	f003 0320 	and.w	r3, r3, #32
 800986a:	2b00      	cmp	r3, #0
 800986c:	d013      	beq.n	8009896 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800986e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b00      	cmp	r3, #0
 8009878:	d105      	bne.n	8009886 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800987a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800987e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d007      	beq.n	8009896 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800989c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098aa:	2b40      	cmp	r3, #64	@ 0x40
 80098ac:	d005      	beq.n	80098ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d054      	beq.n	8009964 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f001 fc0c 	bl	800b0d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ca:	2b40      	cmp	r3, #64	@ 0x40
 80098cc:	d146      	bne.n	800995c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3308      	adds	r3, #8
 80098d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098dc:	e853 3f00 	ldrex	r3, [r3]
 80098e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3308      	adds	r3, #8
 80098f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80098fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1d9      	bne.n	80098ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009920:	2b00      	cmp	r3, #0
 8009922:	d017      	beq.n	8009954 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800992a:	4a15      	ldr	r2, [pc, #84]	@ (8009980 <HAL_UART_IRQHandler+0x2c0>)
 800992c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009934:	4618      	mov	r0, r3
 8009936:	f7f9 feaf 	bl	8003698 <HAL_DMA_Abort_IT>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d019      	beq.n	8009974 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800994e:	4610      	mov	r0, r2
 8009950:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009952:	e00f      	b.n	8009974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 faa7 	bl	8009ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995a:	e00b      	b.n	8009974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 faa3 	bl	8009ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009962:	e007      	b.n	8009974 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fa9f 	bl	8009ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009972:	e26f      	b.n	8009e54 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009974:	bf00      	nop
    return;
 8009976:	e26d      	b.n	8009e54 <HAL_UART_IRQHandler+0x794>
 8009978:	10000001 	.word	0x10000001
 800997c:	04000120 	.word	0x04000120
 8009980:	0800b38b 	.word	0x0800b38b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009988:	2b01      	cmp	r3, #1
 800998a:	f040 8203 	bne.w	8009d94 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800998e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009992:	f003 0310 	and.w	r3, r3, #16
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 81fc 	beq.w	8009d94 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800999c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a0:	f003 0310 	and.w	r3, r3, #16
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 81f5 	beq.w	8009d94 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2210      	movs	r2, #16
 80099b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099bc:	2b40      	cmp	r3, #64	@ 0x40
 80099be:	f040 816d 	bne.w	8009c9c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4aa4      	ldr	r2, [pc, #656]	@ (8009c5c <HAL_UART_IRQHandler+0x59c>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d068      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4aa1      	ldr	r2, [pc, #644]	@ (8009c60 <HAL_UART_IRQHandler+0x5a0>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d061      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a9f      	ldr	r2, [pc, #636]	@ (8009c64 <HAL_UART_IRQHandler+0x5a4>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d05a      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a9c      	ldr	r2, [pc, #624]	@ (8009c68 <HAL_UART_IRQHandler+0x5a8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d053      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a9a      	ldr	r2, [pc, #616]	@ (8009c6c <HAL_UART_IRQHandler+0x5ac>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d04c      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a97      	ldr	r2, [pc, #604]	@ (8009c70 <HAL_UART_IRQHandler+0x5b0>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d045      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a95      	ldr	r2, [pc, #596]	@ (8009c74 <HAL_UART_IRQHandler+0x5b4>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d03e      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a92      	ldr	r2, [pc, #584]	@ (8009c78 <HAL_UART_IRQHandler+0x5b8>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d037      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a90      	ldr	r2, [pc, #576]	@ (8009c7c <HAL_UART_IRQHandler+0x5bc>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d030      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a8d      	ldr	r2, [pc, #564]	@ (8009c80 <HAL_UART_IRQHandler+0x5c0>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d029      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a8b      	ldr	r2, [pc, #556]	@ (8009c84 <HAL_UART_IRQHandler+0x5c4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d022      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a88      	ldr	r2, [pc, #544]	@ (8009c88 <HAL_UART_IRQHandler+0x5c8>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d01b      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a86      	ldr	r2, [pc, #536]	@ (8009c8c <HAL_UART_IRQHandler+0x5cc>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d014      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a83      	ldr	r2, [pc, #524]	@ (8009c90 <HAL_UART_IRQHandler+0x5d0>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d00d      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a81      	ldr	r2, [pc, #516]	@ (8009c94 <HAL_UART_IRQHandler+0x5d4>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d006      	beq.n	8009aa2 <HAL_UART_IRQHandler+0x3e2>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a7e      	ldr	r2, [pc, #504]	@ (8009c98 <HAL_UART_IRQHandler+0x5d8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d106      	bne.n	8009ab0 <HAL_UART_IRQHandler+0x3f0>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	e005      	b.n	8009abc <HAL_UART_IRQHandler+0x3fc>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 80ad 	beq.w	8009c24 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ad0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	f080 80a5 	bcs.w	8009c24 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ae0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aea:	69db      	ldr	r3, [r3, #28]
 8009aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009af0:	f000 8087 	beq.w	8009c02 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b22:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009b2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1da      	bne.n	8009af4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3308      	adds	r3, #8
 8009b44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b50:	f023 0301 	bic.w	r3, r3, #1
 8009b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1e1      	bne.n	8009b3e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3308      	adds	r3, #8
 8009b9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009ba4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e3      	bne.n	8009b7a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bc8:	e853 3f00 	ldrex	r3, [r3]
 8009bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bd0:	f023 0310 	bic.w	r3, r3, #16
 8009bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009be2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009be4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009be8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bea:	e841 2300 	strex	r3, r2, [r1]
 8009bee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1e4      	bne.n	8009bc0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7f9 fa2d 	bl	800305c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2202      	movs	r2, #2
 8009c06:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7f6 fffd 	bl	8000c1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009c22:	e119      	b.n	8009e58 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	f040 8112 	bne.w	8009e58 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c40:	f040 810a 	bne.w	8009e58 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7f6 ffe2 	bl	8000c1c <HAL_UARTEx_RxEventCallback>
      return;
 8009c58:	e0fe      	b.n	8009e58 <HAL_UART_IRQHandler+0x798>
 8009c5a:	bf00      	nop
 8009c5c:	40020010 	.word	0x40020010
 8009c60:	40020028 	.word	0x40020028
 8009c64:	40020040 	.word	0x40020040
 8009c68:	40020058 	.word	0x40020058
 8009c6c:	40020070 	.word	0x40020070
 8009c70:	40020088 	.word	0x40020088
 8009c74:	400200a0 	.word	0x400200a0
 8009c78:	400200b8 	.word	0x400200b8
 8009c7c:	40020410 	.word	0x40020410
 8009c80:	40020428 	.word	0x40020428
 8009c84:	40020440 	.word	0x40020440
 8009c88:	40020458 	.word	0x40020458
 8009c8c:	40020470 	.word	0x40020470
 8009c90:	40020488 	.word	0x40020488
 8009c94:	400204a0 	.word	0x400204a0
 8009c98:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 80cf 	beq.w	8009e5c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009cbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 80ca 	beq.w	8009e5c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd0:	e853 3f00 	ldrex	r3, [r3]
 8009cd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009cea:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cf2:	e841 2300 	strex	r3, r2, [r1]
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1e4      	bne.n	8009cc8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3308      	adds	r3, #8
 8009d04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d08:	e853 3f00 	ldrex	r3, [r3]
 8009d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d0e:	6a3a      	ldr	r2, [r7, #32]
 8009d10:	4b55      	ldr	r3, [pc, #340]	@ (8009e68 <HAL_UART_IRQHandler+0x7a8>)
 8009d12:	4013      	ands	r3, r2
 8009d14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d22:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1e3      	bne.n	8009cfe <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2220      	movs	r2, #32
 8009d3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	e853 3f00 	ldrex	r3, [r3]
 8009d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 0310 	bic.w	r3, r3, #16
 8009d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d6c:	61fb      	str	r3, [r7, #28]
 8009d6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d70:	69b9      	ldr	r1, [r7, #24]
 8009d72:	69fa      	ldr	r2, [r7, #28]
 8009d74:	e841 2300 	strex	r3, r2, [r1]
 8009d78:	617b      	str	r3, [r7, #20]
   return(result);
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e4      	bne.n	8009d4a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2202      	movs	r2, #2
 8009d84:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7f6 ff45 	bl	8000c1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d92:	e063      	b.n	8009e5c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00e      	beq.n	8009dbe <HAL_UART_IRQHandler+0x6fe>
 8009da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009da4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d008      	beq.n	8009dbe <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009db4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f001 fb24 	bl	800b404 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dbc:	e051      	b.n	8009e62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d014      	beq.n	8009df4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d105      	bne.n	8009de2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d008      	beq.n	8009df4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d03a      	beq.n	8009e60 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	4798      	blx	r3
    }
    return;
 8009df2:	e035      	b.n	8009e60 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d009      	beq.n	8009e14 <HAL_UART_IRQHandler+0x754>
 8009e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d003      	beq.n	8009e14 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 face 	bl	800b3ae <UART_EndTransmit_IT>
    return;
 8009e12:	e026      	b.n	8009e62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d009      	beq.n	8009e34 <HAL_UART_IRQHandler+0x774>
 8009e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 fafd 	bl	800b42c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e32:	e016      	b.n	8009e62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d010      	beq.n	8009e62 <HAL_UART_IRQHandler+0x7a2>
 8009e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	da0c      	bge.n	8009e62 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 fae5 	bl	800b418 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e4e:	e008      	b.n	8009e62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e50:	bf00      	nop
 8009e52:	e006      	b.n	8009e62 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009e54:	bf00      	nop
 8009e56:	e004      	b.n	8009e62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e58:	bf00      	nop
 8009e5a:	e002      	b.n	8009e62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e5c:	bf00      	nop
 8009e5e:	e000      	b.n	8009e62 <HAL_UART_IRQHandler+0x7a2>
    return;
 8009e60:	bf00      	nop
  }
}
 8009e62:	37e8      	adds	r7, #232	@ 0xe8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	effffffe 	.word	0xeffffffe

08009e6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ec0:	b092      	sub	sp, #72	@ 0x48
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	689a      	ldr	r2, [r3, #8]
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	431a      	orrs	r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	4bbe      	ldr	r3, [pc, #760]	@ (800a1e4 <UART_SetConfig+0x328>)
 8009eec:	4013      	ands	r3, r2
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	6812      	ldr	r2, [r2, #0]
 8009ef2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4ab3      	ldr	r2, [pc, #716]	@ (800a1e8 <UART_SetConfig+0x32c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d004      	beq.n	8009f28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f24:	4313      	orrs	r3, r2
 8009f26:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	689a      	ldr	r2, [r3, #8]
 8009f2e:	4baf      	ldr	r3, [pc, #700]	@ (800a1ec <UART_SetConfig+0x330>)
 8009f30:	4013      	ands	r3, r2
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	6812      	ldr	r2, [r2, #0]
 8009f36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f38:	430b      	orrs	r3, r1
 8009f3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f42:	f023 010f 	bic.w	r1, r3, #15
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4aa6      	ldr	r2, [pc, #664]	@ (800a1f0 <UART_SetConfig+0x334>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d177      	bne.n	800a04c <UART_SetConfig+0x190>
 8009f5c:	4ba5      	ldr	r3, [pc, #660]	@ (800a1f4 <UART_SetConfig+0x338>)
 8009f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f64:	2b28      	cmp	r3, #40	@ 0x28
 8009f66:	d86d      	bhi.n	800a044 <UART_SetConfig+0x188>
 8009f68:	a201      	add	r2, pc, #4	@ (adr r2, 8009f70 <UART_SetConfig+0xb4>)
 8009f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6e:	bf00      	nop
 8009f70:	0800a015 	.word	0x0800a015
 8009f74:	0800a045 	.word	0x0800a045
 8009f78:	0800a045 	.word	0x0800a045
 8009f7c:	0800a045 	.word	0x0800a045
 8009f80:	0800a045 	.word	0x0800a045
 8009f84:	0800a045 	.word	0x0800a045
 8009f88:	0800a045 	.word	0x0800a045
 8009f8c:	0800a045 	.word	0x0800a045
 8009f90:	0800a01d 	.word	0x0800a01d
 8009f94:	0800a045 	.word	0x0800a045
 8009f98:	0800a045 	.word	0x0800a045
 8009f9c:	0800a045 	.word	0x0800a045
 8009fa0:	0800a045 	.word	0x0800a045
 8009fa4:	0800a045 	.word	0x0800a045
 8009fa8:	0800a045 	.word	0x0800a045
 8009fac:	0800a045 	.word	0x0800a045
 8009fb0:	0800a025 	.word	0x0800a025
 8009fb4:	0800a045 	.word	0x0800a045
 8009fb8:	0800a045 	.word	0x0800a045
 8009fbc:	0800a045 	.word	0x0800a045
 8009fc0:	0800a045 	.word	0x0800a045
 8009fc4:	0800a045 	.word	0x0800a045
 8009fc8:	0800a045 	.word	0x0800a045
 8009fcc:	0800a045 	.word	0x0800a045
 8009fd0:	0800a02d 	.word	0x0800a02d
 8009fd4:	0800a045 	.word	0x0800a045
 8009fd8:	0800a045 	.word	0x0800a045
 8009fdc:	0800a045 	.word	0x0800a045
 8009fe0:	0800a045 	.word	0x0800a045
 8009fe4:	0800a045 	.word	0x0800a045
 8009fe8:	0800a045 	.word	0x0800a045
 8009fec:	0800a045 	.word	0x0800a045
 8009ff0:	0800a035 	.word	0x0800a035
 8009ff4:	0800a045 	.word	0x0800a045
 8009ff8:	0800a045 	.word	0x0800a045
 8009ffc:	0800a045 	.word	0x0800a045
 800a000:	0800a045 	.word	0x0800a045
 800a004:	0800a045 	.word	0x0800a045
 800a008:	0800a045 	.word	0x0800a045
 800a00c:	0800a045 	.word	0x0800a045
 800a010:	0800a03d 	.word	0x0800a03d
 800a014:	2301      	movs	r3, #1
 800a016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01a:	e326      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a01c:	2304      	movs	r3, #4
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a022:	e322      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a024:	2308      	movs	r3, #8
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02a:	e31e      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a02c:	2310      	movs	r3, #16
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a032:	e31a      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a034:	2320      	movs	r3, #32
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03a:	e316      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a03c:	2340      	movs	r3, #64	@ 0x40
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a042:	e312      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a044:	2380      	movs	r3, #128	@ 0x80
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04a:	e30e      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a69      	ldr	r2, [pc, #420]	@ (800a1f8 <UART_SetConfig+0x33c>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d130      	bne.n	800a0b8 <UART_SetConfig+0x1fc>
 800a056:	4b67      	ldr	r3, [pc, #412]	@ (800a1f4 <UART_SetConfig+0x338>)
 800a058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a05a:	f003 0307 	and.w	r3, r3, #7
 800a05e:	2b05      	cmp	r3, #5
 800a060:	d826      	bhi.n	800a0b0 <UART_SetConfig+0x1f4>
 800a062:	a201      	add	r2, pc, #4	@ (adr r2, 800a068 <UART_SetConfig+0x1ac>)
 800a064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a068:	0800a081 	.word	0x0800a081
 800a06c:	0800a089 	.word	0x0800a089
 800a070:	0800a091 	.word	0x0800a091
 800a074:	0800a099 	.word	0x0800a099
 800a078:	0800a0a1 	.word	0x0800a0a1
 800a07c:	0800a0a9 	.word	0x0800a0a9
 800a080:	2300      	movs	r3, #0
 800a082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a086:	e2f0      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a088:	2304      	movs	r3, #4
 800a08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a08e:	e2ec      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a090:	2308      	movs	r3, #8
 800a092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a096:	e2e8      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a098:	2310      	movs	r3, #16
 800a09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09e:	e2e4      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a0a0:	2320      	movs	r3, #32
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0a6:	e2e0      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a0a8:	2340      	movs	r3, #64	@ 0x40
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ae:	e2dc      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a0b0:	2380      	movs	r3, #128	@ 0x80
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b6:	e2d8      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a4f      	ldr	r2, [pc, #316]	@ (800a1fc <UART_SetConfig+0x340>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d130      	bne.n	800a124 <UART_SetConfig+0x268>
 800a0c2:	4b4c      	ldr	r3, [pc, #304]	@ (800a1f4 <UART_SetConfig+0x338>)
 800a0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	d826      	bhi.n	800a11c <UART_SetConfig+0x260>
 800a0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d4 <UART_SetConfig+0x218>)
 800a0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d4:	0800a0ed 	.word	0x0800a0ed
 800a0d8:	0800a0f5 	.word	0x0800a0f5
 800a0dc:	0800a0fd 	.word	0x0800a0fd
 800a0e0:	0800a105 	.word	0x0800a105
 800a0e4:	0800a10d 	.word	0x0800a10d
 800a0e8:	0800a115 	.word	0x0800a115
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f2:	e2ba      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fa:	e2b6      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a0fc:	2308      	movs	r3, #8
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a102:	e2b2      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a104:	2310      	movs	r3, #16
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e2ae      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a10c:	2320      	movs	r3, #32
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e2aa      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a114:	2340      	movs	r3, #64	@ 0x40
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e2a6      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a11c:	2380      	movs	r3, #128	@ 0x80
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e2a2      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a35      	ldr	r2, [pc, #212]	@ (800a200 <UART_SetConfig+0x344>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d130      	bne.n	800a190 <UART_SetConfig+0x2d4>
 800a12e:	4b31      	ldr	r3, [pc, #196]	@ (800a1f4 <UART_SetConfig+0x338>)
 800a130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a132:	f003 0307 	and.w	r3, r3, #7
 800a136:	2b05      	cmp	r3, #5
 800a138:	d826      	bhi.n	800a188 <UART_SetConfig+0x2cc>
 800a13a:	a201      	add	r2, pc, #4	@ (adr r2, 800a140 <UART_SetConfig+0x284>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a159 	.word	0x0800a159
 800a144:	0800a161 	.word	0x0800a161
 800a148:	0800a169 	.word	0x0800a169
 800a14c:	0800a171 	.word	0x0800a171
 800a150:	0800a179 	.word	0x0800a179
 800a154:	0800a181 	.word	0x0800a181
 800a158:	2300      	movs	r3, #0
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15e:	e284      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a160:	2304      	movs	r3, #4
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a166:	e280      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a168:	2308      	movs	r3, #8
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16e:	e27c      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a170:	2310      	movs	r3, #16
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a176:	e278      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a178:	2320      	movs	r3, #32
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17e:	e274      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a180:	2340      	movs	r3, #64	@ 0x40
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a186:	e270      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a188:	2380      	movs	r3, #128	@ 0x80
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18e:	e26c      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a1b      	ldr	r2, [pc, #108]	@ (800a204 <UART_SetConfig+0x348>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d142      	bne.n	800a220 <UART_SetConfig+0x364>
 800a19a:	4b16      	ldr	r3, [pc, #88]	@ (800a1f4 <UART_SetConfig+0x338>)
 800a19c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a19e:	f003 0307 	and.w	r3, r3, #7
 800a1a2:	2b05      	cmp	r3, #5
 800a1a4:	d838      	bhi.n	800a218 <UART_SetConfig+0x35c>
 800a1a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ac <UART_SetConfig+0x2f0>)
 800a1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ac:	0800a1c5 	.word	0x0800a1c5
 800a1b0:	0800a1cd 	.word	0x0800a1cd
 800a1b4:	0800a1d5 	.word	0x0800a1d5
 800a1b8:	0800a1dd 	.word	0x0800a1dd
 800a1bc:	0800a209 	.word	0x0800a209
 800a1c0:	0800a211 	.word	0x0800a211
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ca:	e24e      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a1cc:	2304      	movs	r3, #4
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d2:	e24a      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a1d4:	2308      	movs	r3, #8
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1da:	e246      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a1dc:	2310      	movs	r3, #16
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e2:	e242      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a1e4:	cfff69f3 	.word	0xcfff69f3
 800a1e8:	58000c00 	.word	0x58000c00
 800a1ec:	11fff4ff 	.word	0x11fff4ff
 800a1f0:	40011000 	.word	0x40011000
 800a1f4:	58024400 	.word	0x58024400
 800a1f8:	40004400 	.word	0x40004400
 800a1fc:	40004800 	.word	0x40004800
 800a200:	40004c00 	.word	0x40004c00
 800a204:	40005000 	.word	0x40005000
 800a208:	2320      	movs	r3, #32
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20e:	e22c      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a210:	2340      	movs	r3, #64	@ 0x40
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a216:	e228      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a218:	2380      	movs	r3, #128	@ 0x80
 800a21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21e:	e224      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4ab1      	ldr	r2, [pc, #708]	@ (800a4ec <UART_SetConfig+0x630>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d176      	bne.n	800a318 <UART_SetConfig+0x45c>
 800a22a:	4bb1      	ldr	r3, [pc, #708]	@ (800a4f0 <UART_SetConfig+0x634>)
 800a22c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a22e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a232:	2b28      	cmp	r3, #40	@ 0x28
 800a234:	d86c      	bhi.n	800a310 <UART_SetConfig+0x454>
 800a236:	a201      	add	r2, pc, #4	@ (adr r2, 800a23c <UART_SetConfig+0x380>)
 800a238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23c:	0800a2e1 	.word	0x0800a2e1
 800a240:	0800a311 	.word	0x0800a311
 800a244:	0800a311 	.word	0x0800a311
 800a248:	0800a311 	.word	0x0800a311
 800a24c:	0800a311 	.word	0x0800a311
 800a250:	0800a311 	.word	0x0800a311
 800a254:	0800a311 	.word	0x0800a311
 800a258:	0800a311 	.word	0x0800a311
 800a25c:	0800a2e9 	.word	0x0800a2e9
 800a260:	0800a311 	.word	0x0800a311
 800a264:	0800a311 	.word	0x0800a311
 800a268:	0800a311 	.word	0x0800a311
 800a26c:	0800a311 	.word	0x0800a311
 800a270:	0800a311 	.word	0x0800a311
 800a274:	0800a311 	.word	0x0800a311
 800a278:	0800a311 	.word	0x0800a311
 800a27c:	0800a2f1 	.word	0x0800a2f1
 800a280:	0800a311 	.word	0x0800a311
 800a284:	0800a311 	.word	0x0800a311
 800a288:	0800a311 	.word	0x0800a311
 800a28c:	0800a311 	.word	0x0800a311
 800a290:	0800a311 	.word	0x0800a311
 800a294:	0800a311 	.word	0x0800a311
 800a298:	0800a311 	.word	0x0800a311
 800a29c:	0800a2f9 	.word	0x0800a2f9
 800a2a0:	0800a311 	.word	0x0800a311
 800a2a4:	0800a311 	.word	0x0800a311
 800a2a8:	0800a311 	.word	0x0800a311
 800a2ac:	0800a311 	.word	0x0800a311
 800a2b0:	0800a311 	.word	0x0800a311
 800a2b4:	0800a311 	.word	0x0800a311
 800a2b8:	0800a311 	.word	0x0800a311
 800a2bc:	0800a301 	.word	0x0800a301
 800a2c0:	0800a311 	.word	0x0800a311
 800a2c4:	0800a311 	.word	0x0800a311
 800a2c8:	0800a311 	.word	0x0800a311
 800a2cc:	0800a311 	.word	0x0800a311
 800a2d0:	0800a311 	.word	0x0800a311
 800a2d4:	0800a311 	.word	0x0800a311
 800a2d8:	0800a311 	.word	0x0800a311
 800a2dc:	0800a309 	.word	0x0800a309
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e6:	e1c0      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a2e8:	2304      	movs	r3, #4
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ee:	e1bc      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2f6:	e1b8      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2fe:	e1b4      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a300:	2320      	movs	r3, #32
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a306:	e1b0      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a308:	2340      	movs	r3, #64	@ 0x40
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30e:	e1ac      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a310:	2380      	movs	r3, #128	@ 0x80
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a316:	e1a8      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a75      	ldr	r2, [pc, #468]	@ (800a4f4 <UART_SetConfig+0x638>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d130      	bne.n	800a384 <UART_SetConfig+0x4c8>
 800a322:	4b73      	ldr	r3, [pc, #460]	@ (800a4f0 <UART_SetConfig+0x634>)
 800a324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	2b05      	cmp	r3, #5
 800a32c:	d826      	bhi.n	800a37c <UART_SetConfig+0x4c0>
 800a32e:	a201      	add	r2, pc, #4	@ (adr r2, 800a334 <UART_SetConfig+0x478>)
 800a330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a334:	0800a34d 	.word	0x0800a34d
 800a338:	0800a355 	.word	0x0800a355
 800a33c:	0800a35d 	.word	0x0800a35d
 800a340:	0800a365 	.word	0x0800a365
 800a344:	0800a36d 	.word	0x0800a36d
 800a348:	0800a375 	.word	0x0800a375
 800a34c:	2300      	movs	r3, #0
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a352:	e18a      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a354:	2304      	movs	r3, #4
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35a:	e186      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a35c:	2308      	movs	r3, #8
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a362:	e182      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a364:	2310      	movs	r3, #16
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36a:	e17e      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a36c:	2320      	movs	r3, #32
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a372:	e17a      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a374:	2340      	movs	r3, #64	@ 0x40
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e176      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a37c:	2380      	movs	r3, #128	@ 0x80
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e172      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a5b      	ldr	r2, [pc, #364]	@ (800a4f8 <UART_SetConfig+0x63c>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d130      	bne.n	800a3f0 <UART_SetConfig+0x534>
 800a38e:	4b58      	ldr	r3, [pc, #352]	@ (800a4f0 <UART_SetConfig+0x634>)
 800a390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	2b05      	cmp	r3, #5
 800a398:	d826      	bhi.n	800a3e8 <UART_SetConfig+0x52c>
 800a39a:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a0 <UART_SetConfig+0x4e4>)
 800a39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a0:	0800a3b9 	.word	0x0800a3b9
 800a3a4:	0800a3c1 	.word	0x0800a3c1
 800a3a8:	0800a3c9 	.word	0x0800a3c9
 800a3ac:	0800a3d1 	.word	0x0800a3d1
 800a3b0:	0800a3d9 	.word	0x0800a3d9
 800a3b4:	0800a3e1 	.word	0x0800a3e1
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e154      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e150      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e14c      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e148      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a3d8:	2320      	movs	r3, #32
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3de:	e144      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a3e0:	2340      	movs	r3, #64	@ 0x40
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e140      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a3e8:	2380      	movs	r3, #128	@ 0x80
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e13c      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a41      	ldr	r2, [pc, #260]	@ (800a4fc <UART_SetConfig+0x640>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	f040 8082 	bne.w	800a500 <UART_SetConfig+0x644>
 800a3fc:	4b3c      	ldr	r3, [pc, #240]	@ (800a4f0 <UART_SetConfig+0x634>)
 800a3fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a404:	2b28      	cmp	r3, #40	@ 0x28
 800a406:	d86d      	bhi.n	800a4e4 <UART_SetConfig+0x628>
 800a408:	a201      	add	r2, pc, #4	@ (adr r2, 800a410 <UART_SetConfig+0x554>)
 800a40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40e:	bf00      	nop
 800a410:	0800a4b5 	.word	0x0800a4b5
 800a414:	0800a4e5 	.word	0x0800a4e5
 800a418:	0800a4e5 	.word	0x0800a4e5
 800a41c:	0800a4e5 	.word	0x0800a4e5
 800a420:	0800a4e5 	.word	0x0800a4e5
 800a424:	0800a4e5 	.word	0x0800a4e5
 800a428:	0800a4e5 	.word	0x0800a4e5
 800a42c:	0800a4e5 	.word	0x0800a4e5
 800a430:	0800a4bd 	.word	0x0800a4bd
 800a434:	0800a4e5 	.word	0x0800a4e5
 800a438:	0800a4e5 	.word	0x0800a4e5
 800a43c:	0800a4e5 	.word	0x0800a4e5
 800a440:	0800a4e5 	.word	0x0800a4e5
 800a444:	0800a4e5 	.word	0x0800a4e5
 800a448:	0800a4e5 	.word	0x0800a4e5
 800a44c:	0800a4e5 	.word	0x0800a4e5
 800a450:	0800a4c5 	.word	0x0800a4c5
 800a454:	0800a4e5 	.word	0x0800a4e5
 800a458:	0800a4e5 	.word	0x0800a4e5
 800a45c:	0800a4e5 	.word	0x0800a4e5
 800a460:	0800a4e5 	.word	0x0800a4e5
 800a464:	0800a4e5 	.word	0x0800a4e5
 800a468:	0800a4e5 	.word	0x0800a4e5
 800a46c:	0800a4e5 	.word	0x0800a4e5
 800a470:	0800a4cd 	.word	0x0800a4cd
 800a474:	0800a4e5 	.word	0x0800a4e5
 800a478:	0800a4e5 	.word	0x0800a4e5
 800a47c:	0800a4e5 	.word	0x0800a4e5
 800a480:	0800a4e5 	.word	0x0800a4e5
 800a484:	0800a4e5 	.word	0x0800a4e5
 800a488:	0800a4e5 	.word	0x0800a4e5
 800a48c:	0800a4e5 	.word	0x0800a4e5
 800a490:	0800a4d5 	.word	0x0800a4d5
 800a494:	0800a4e5 	.word	0x0800a4e5
 800a498:	0800a4e5 	.word	0x0800a4e5
 800a49c:	0800a4e5 	.word	0x0800a4e5
 800a4a0:	0800a4e5 	.word	0x0800a4e5
 800a4a4:	0800a4e5 	.word	0x0800a4e5
 800a4a8:	0800a4e5 	.word	0x0800a4e5
 800a4ac:	0800a4e5 	.word	0x0800a4e5
 800a4b0:	0800a4dd 	.word	0x0800a4dd
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e0d6      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a4bc:	2304      	movs	r3, #4
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e0d2      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a4c4:	2308      	movs	r3, #8
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ca:	e0ce      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a4cc:	2310      	movs	r3, #16
 800a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d2:	e0ca      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a4d4:	2320      	movs	r3, #32
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4da:	e0c6      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a4dc:	2340      	movs	r3, #64	@ 0x40
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e0c2      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a4e4:	2380      	movs	r3, #128	@ 0x80
 800a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ea:	e0be      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a4ec:	40011400 	.word	0x40011400
 800a4f0:	58024400 	.word	0x58024400
 800a4f4:	40007800 	.word	0x40007800
 800a4f8:	40007c00 	.word	0x40007c00
 800a4fc:	40011800 	.word	0x40011800
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4aad      	ldr	r2, [pc, #692]	@ (800a7bc <UART_SetConfig+0x900>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d176      	bne.n	800a5f8 <UART_SetConfig+0x73c>
 800a50a:	4bad      	ldr	r3, [pc, #692]	@ (800a7c0 <UART_SetConfig+0x904>)
 800a50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a50e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a512:	2b28      	cmp	r3, #40	@ 0x28
 800a514:	d86c      	bhi.n	800a5f0 <UART_SetConfig+0x734>
 800a516:	a201      	add	r2, pc, #4	@ (adr r2, 800a51c <UART_SetConfig+0x660>)
 800a518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51c:	0800a5c1 	.word	0x0800a5c1
 800a520:	0800a5f1 	.word	0x0800a5f1
 800a524:	0800a5f1 	.word	0x0800a5f1
 800a528:	0800a5f1 	.word	0x0800a5f1
 800a52c:	0800a5f1 	.word	0x0800a5f1
 800a530:	0800a5f1 	.word	0x0800a5f1
 800a534:	0800a5f1 	.word	0x0800a5f1
 800a538:	0800a5f1 	.word	0x0800a5f1
 800a53c:	0800a5c9 	.word	0x0800a5c9
 800a540:	0800a5f1 	.word	0x0800a5f1
 800a544:	0800a5f1 	.word	0x0800a5f1
 800a548:	0800a5f1 	.word	0x0800a5f1
 800a54c:	0800a5f1 	.word	0x0800a5f1
 800a550:	0800a5f1 	.word	0x0800a5f1
 800a554:	0800a5f1 	.word	0x0800a5f1
 800a558:	0800a5f1 	.word	0x0800a5f1
 800a55c:	0800a5d1 	.word	0x0800a5d1
 800a560:	0800a5f1 	.word	0x0800a5f1
 800a564:	0800a5f1 	.word	0x0800a5f1
 800a568:	0800a5f1 	.word	0x0800a5f1
 800a56c:	0800a5f1 	.word	0x0800a5f1
 800a570:	0800a5f1 	.word	0x0800a5f1
 800a574:	0800a5f1 	.word	0x0800a5f1
 800a578:	0800a5f1 	.word	0x0800a5f1
 800a57c:	0800a5d9 	.word	0x0800a5d9
 800a580:	0800a5f1 	.word	0x0800a5f1
 800a584:	0800a5f1 	.word	0x0800a5f1
 800a588:	0800a5f1 	.word	0x0800a5f1
 800a58c:	0800a5f1 	.word	0x0800a5f1
 800a590:	0800a5f1 	.word	0x0800a5f1
 800a594:	0800a5f1 	.word	0x0800a5f1
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	0800a5e1 	.word	0x0800a5e1
 800a5a0:	0800a5f1 	.word	0x0800a5f1
 800a5a4:	0800a5f1 	.word	0x0800a5f1
 800a5a8:	0800a5f1 	.word	0x0800a5f1
 800a5ac:	0800a5f1 	.word	0x0800a5f1
 800a5b0:	0800a5f1 	.word	0x0800a5f1
 800a5b4:	0800a5f1 	.word	0x0800a5f1
 800a5b8:	0800a5f1 	.word	0x0800a5f1
 800a5bc:	0800a5e9 	.word	0x0800a5e9
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c6:	e050      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ce:	e04c      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d6:	e048      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5de:	e044      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e6:	e040      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a5e8:	2340      	movs	r3, #64	@ 0x40
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ee:	e03c      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a5f0:	2380      	movs	r3, #128	@ 0x80
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f6:	e038      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a71      	ldr	r2, [pc, #452]	@ (800a7c4 <UART_SetConfig+0x908>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d130      	bne.n	800a664 <UART_SetConfig+0x7a8>
 800a602:	4b6f      	ldr	r3, [pc, #444]	@ (800a7c0 <UART_SetConfig+0x904>)
 800a604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b05      	cmp	r3, #5
 800a60c:	d826      	bhi.n	800a65c <UART_SetConfig+0x7a0>
 800a60e:	a201      	add	r2, pc, #4	@ (adr r2, 800a614 <UART_SetConfig+0x758>)
 800a610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a614:	0800a62d 	.word	0x0800a62d
 800a618:	0800a635 	.word	0x0800a635
 800a61c:	0800a63d 	.word	0x0800a63d
 800a620:	0800a645 	.word	0x0800a645
 800a624:	0800a64d 	.word	0x0800a64d
 800a628:	0800a655 	.word	0x0800a655
 800a62c:	2302      	movs	r3, #2
 800a62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a632:	e01a      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a634:	2304      	movs	r3, #4
 800a636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63a:	e016      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a63c:	2308      	movs	r3, #8
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a642:	e012      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a644:	2310      	movs	r3, #16
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64a:	e00e      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a64c:	2320      	movs	r3, #32
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a652:	e00a      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a654:	2340      	movs	r3, #64	@ 0x40
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e006      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a65c:	2380      	movs	r3, #128	@ 0x80
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e002      	b.n	800a66a <UART_SetConfig+0x7ae>
 800a664:	2380      	movs	r3, #128	@ 0x80
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a55      	ldr	r2, [pc, #340]	@ (800a7c4 <UART_SetConfig+0x908>)
 800a670:	4293      	cmp	r3, r2
 800a672:	f040 80f8 	bne.w	800a866 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a676:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a67a:	2b20      	cmp	r3, #32
 800a67c:	dc46      	bgt.n	800a70c <UART_SetConfig+0x850>
 800a67e:	2b02      	cmp	r3, #2
 800a680:	db75      	blt.n	800a76e <UART_SetConfig+0x8b2>
 800a682:	3b02      	subs	r3, #2
 800a684:	2b1e      	cmp	r3, #30
 800a686:	d872      	bhi.n	800a76e <UART_SetConfig+0x8b2>
 800a688:	a201      	add	r2, pc, #4	@ (adr r2, 800a690 <UART_SetConfig+0x7d4>)
 800a68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68e:	bf00      	nop
 800a690:	0800a713 	.word	0x0800a713
 800a694:	0800a76f 	.word	0x0800a76f
 800a698:	0800a71b 	.word	0x0800a71b
 800a69c:	0800a76f 	.word	0x0800a76f
 800a6a0:	0800a76f 	.word	0x0800a76f
 800a6a4:	0800a76f 	.word	0x0800a76f
 800a6a8:	0800a72b 	.word	0x0800a72b
 800a6ac:	0800a76f 	.word	0x0800a76f
 800a6b0:	0800a76f 	.word	0x0800a76f
 800a6b4:	0800a76f 	.word	0x0800a76f
 800a6b8:	0800a76f 	.word	0x0800a76f
 800a6bc:	0800a76f 	.word	0x0800a76f
 800a6c0:	0800a76f 	.word	0x0800a76f
 800a6c4:	0800a76f 	.word	0x0800a76f
 800a6c8:	0800a73b 	.word	0x0800a73b
 800a6cc:	0800a76f 	.word	0x0800a76f
 800a6d0:	0800a76f 	.word	0x0800a76f
 800a6d4:	0800a76f 	.word	0x0800a76f
 800a6d8:	0800a76f 	.word	0x0800a76f
 800a6dc:	0800a76f 	.word	0x0800a76f
 800a6e0:	0800a76f 	.word	0x0800a76f
 800a6e4:	0800a76f 	.word	0x0800a76f
 800a6e8:	0800a76f 	.word	0x0800a76f
 800a6ec:	0800a76f 	.word	0x0800a76f
 800a6f0:	0800a76f 	.word	0x0800a76f
 800a6f4:	0800a76f 	.word	0x0800a76f
 800a6f8:	0800a76f 	.word	0x0800a76f
 800a6fc:	0800a76f 	.word	0x0800a76f
 800a700:	0800a76f 	.word	0x0800a76f
 800a704:	0800a76f 	.word	0x0800a76f
 800a708:	0800a761 	.word	0x0800a761
 800a70c:	2b40      	cmp	r3, #64	@ 0x40
 800a70e:	d02a      	beq.n	800a766 <UART_SetConfig+0x8aa>
 800a710:	e02d      	b.n	800a76e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a712:	f7fd fa69 	bl	8007be8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a716:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a718:	e02f      	b.n	800a77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a71a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fd fa78 	bl	8007c14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a728:	e027      	b.n	800a77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a72a:	f107 0318 	add.w	r3, r7, #24
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fd fbc4 	bl	8007ebc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a738:	e01f      	b.n	800a77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a73a:	4b21      	ldr	r3, [pc, #132]	@ (800a7c0 <UART_SetConfig+0x904>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0320 	and.w	r3, r3, #32
 800a742:	2b00      	cmp	r3, #0
 800a744:	d009      	beq.n	800a75a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a746:	4b1e      	ldr	r3, [pc, #120]	@ (800a7c0 <UART_SetConfig+0x904>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	08db      	lsrs	r3, r3, #3
 800a74c:	f003 0303 	and.w	r3, r3, #3
 800a750:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c8 <UART_SetConfig+0x90c>)
 800a752:	fa22 f303 	lsr.w	r3, r2, r3
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a758:	e00f      	b.n	800a77a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a75a:	4b1b      	ldr	r3, [pc, #108]	@ (800a7c8 <UART_SetConfig+0x90c>)
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a75e:	e00c      	b.n	800a77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a760:	4b1a      	ldr	r3, [pc, #104]	@ (800a7cc <UART_SetConfig+0x910>)
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a764:	e009      	b.n	800a77a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a76c:	e005      	b.n	800a77a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a76e:	2300      	movs	r3, #0
 800a770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a778:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 81ee 	beq.w	800ab5e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a786:	4a12      	ldr	r2, [pc, #72]	@ (800a7d0 <UART_SetConfig+0x914>)
 800a788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a78c:	461a      	mov	r2, r3
 800a78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a790:	fbb3 f3f2 	udiv	r3, r3, r2
 800a794:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	4613      	mov	r3, r2
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	4413      	add	r3, r2
 800a7a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d305      	bcc.n	800a7b2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d910      	bls.n	800a7d4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7b8:	e1d1      	b.n	800ab5e <UART_SetConfig+0xca2>
 800a7ba:	bf00      	nop
 800a7bc:	40011c00 	.word	0x40011c00
 800a7c0:	58024400 	.word	0x58024400
 800a7c4:	58000c00 	.word	0x58000c00
 800a7c8:	03d09000 	.word	0x03d09000
 800a7cc:	003d0900 	.word	0x003d0900
 800a7d0:	0800ed0c 	.word	0x0800ed0c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	60bb      	str	r3, [r7, #8]
 800a7da:	60fa      	str	r2, [r7, #12]
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e0:	4ac0      	ldr	r2, [pc, #768]	@ (800aae4 <UART_SetConfig+0xc28>)
 800a7e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	603b      	str	r3, [r7, #0]
 800a7ec:	607a      	str	r2, [r7, #4]
 800a7ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7f6:	f7f5 fdd3 	bl	80003a0 <__aeabi_uldivmod>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4610      	mov	r0, r2
 800a800:	4619      	mov	r1, r3
 800a802:	f04f 0200 	mov.w	r2, #0
 800a806:	f04f 0300 	mov.w	r3, #0
 800a80a:	020b      	lsls	r3, r1, #8
 800a80c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a810:	0202      	lsls	r2, r0, #8
 800a812:	6979      	ldr	r1, [r7, #20]
 800a814:	6849      	ldr	r1, [r1, #4]
 800a816:	0849      	lsrs	r1, r1, #1
 800a818:	2000      	movs	r0, #0
 800a81a:	460c      	mov	r4, r1
 800a81c:	4605      	mov	r5, r0
 800a81e:	eb12 0804 	adds.w	r8, r2, r4
 800a822:	eb43 0905 	adc.w	r9, r3, r5
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	469a      	mov	sl, r3
 800a82e:	4693      	mov	fp, r2
 800a830:	4652      	mov	r2, sl
 800a832:	465b      	mov	r3, fp
 800a834:	4640      	mov	r0, r8
 800a836:	4649      	mov	r1, r9
 800a838:	f7f5 fdb2 	bl	80003a0 <__aeabi_uldivmod>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4613      	mov	r3, r2
 800a842:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a84a:	d308      	bcc.n	800a85e <UART_SetConfig+0x9a2>
 800a84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a852:	d204      	bcs.n	800a85e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a85a:	60da      	str	r2, [r3, #12]
 800a85c:	e17f      	b.n	800ab5e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a864:	e17b      	b.n	800ab5e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a86e:	f040 80bd 	bne.w	800a9ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a872:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a876:	2b20      	cmp	r3, #32
 800a878:	dc48      	bgt.n	800a90c <UART_SetConfig+0xa50>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	db7b      	blt.n	800a976 <UART_SetConfig+0xaba>
 800a87e:	2b20      	cmp	r3, #32
 800a880:	d879      	bhi.n	800a976 <UART_SetConfig+0xaba>
 800a882:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <UART_SetConfig+0x9cc>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a913 	.word	0x0800a913
 800a88c:	0800a91b 	.word	0x0800a91b
 800a890:	0800a977 	.word	0x0800a977
 800a894:	0800a977 	.word	0x0800a977
 800a898:	0800a923 	.word	0x0800a923
 800a89c:	0800a977 	.word	0x0800a977
 800a8a0:	0800a977 	.word	0x0800a977
 800a8a4:	0800a977 	.word	0x0800a977
 800a8a8:	0800a933 	.word	0x0800a933
 800a8ac:	0800a977 	.word	0x0800a977
 800a8b0:	0800a977 	.word	0x0800a977
 800a8b4:	0800a977 	.word	0x0800a977
 800a8b8:	0800a977 	.word	0x0800a977
 800a8bc:	0800a977 	.word	0x0800a977
 800a8c0:	0800a977 	.word	0x0800a977
 800a8c4:	0800a977 	.word	0x0800a977
 800a8c8:	0800a943 	.word	0x0800a943
 800a8cc:	0800a977 	.word	0x0800a977
 800a8d0:	0800a977 	.word	0x0800a977
 800a8d4:	0800a977 	.word	0x0800a977
 800a8d8:	0800a977 	.word	0x0800a977
 800a8dc:	0800a977 	.word	0x0800a977
 800a8e0:	0800a977 	.word	0x0800a977
 800a8e4:	0800a977 	.word	0x0800a977
 800a8e8:	0800a977 	.word	0x0800a977
 800a8ec:	0800a977 	.word	0x0800a977
 800a8f0:	0800a977 	.word	0x0800a977
 800a8f4:	0800a977 	.word	0x0800a977
 800a8f8:	0800a977 	.word	0x0800a977
 800a8fc:	0800a977 	.word	0x0800a977
 800a900:	0800a977 	.word	0x0800a977
 800a904:	0800a977 	.word	0x0800a977
 800a908:	0800a969 	.word	0x0800a969
 800a90c:	2b40      	cmp	r3, #64	@ 0x40
 800a90e:	d02e      	beq.n	800a96e <UART_SetConfig+0xab2>
 800a910:	e031      	b.n	800a976 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a912:	f7fb ff7f 	bl	8006814 <HAL_RCC_GetPCLK1Freq>
 800a916:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a918:	e033      	b.n	800a982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a91a:	f7fb ff91 	bl	8006840 <HAL_RCC_GetPCLK2Freq>
 800a91e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a920:	e02f      	b.n	800a982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a926:	4618      	mov	r0, r3
 800a928:	f7fd f974 	bl	8007c14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a930:	e027      	b.n	800a982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a932:	f107 0318 	add.w	r3, r7, #24
 800a936:	4618      	mov	r0, r3
 800a938:	f7fd fac0 	bl	8007ebc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a940:	e01f      	b.n	800a982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a942:	4b69      	ldr	r3, [pc, #420]	@ (800aae8 <UART_SetConfig+0xc2c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0320 	and.w	r3, r3, #32
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d009      	beq.n	800a962 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a94e:	4b66      	ldr	r3, [pc, #408]	@ (800aae8 <UART_SetConfig+0xc2c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	08db      	lsrs	r3, r3, #3
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	4a64      	ldr	r2, [pc, #400]	@ (800aaec <UART_SetConfig+0xc30>)
 800a95a:	fa22 f303 	lsr.w	r3, r2, r3
 800a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a960:	e00f      	b.n	800a982 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a962:	4b62      	ldr	r3, [pc, #392]	@ (800aaec <UART_SetConfig+0xc30>)
 800a964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a966:	e00c      	b.n	800a982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a968:	4b61      	ldr	r3, [pc, #388]	@ (800aaf0 <UART_SetConfig+0xc34>)
 800a96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a96c:	e009      	b.n	800a982 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a96e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a974:	e005      	b.n	800a982 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a976:	2300      	movs	r3, #0
 800a978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80ea 	beq.w	800ab5e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98e:	4a55      	ldr	r2, [pc, #340]	@ (800aae4 <UART_SetConfig+0xc28>)
 800a990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a994:	461a      	mov	r2, r3
 800a996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a998:	fbb3 f3f2 	udiv	r3, r3, r2
 800a99c:	005a      	lsls	r2, r3, #1
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	085b      	lsrs	r3, r3, #1
 800a9a4:	441a      	add	r2, r3
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b2:	2b0f      	cmp	r3, #15
 800a9b4:	d916      	bls.n	800a9e4 <UART_SetConfig+0xb28>
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9bc:	d212      	bcs.n	800a9e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	f023 030f 	bic.w	r3, r3, #15
 800a9c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ca:	085b      	lsrs	r3, r3, #1
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	f003 0307 	and.w	r3, r3, #7
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a9e0:	60da      	str	r2, [r3, #12]
 800a9e2:	e0bc      	b.n	800ab5e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9ea:	e0b8      	b.n	800ab5e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9f0:	2b20      	cmp	r3, #32
 800a9f2:	dc4b      	bgt.n	800aa8c <UART_SetConfig+0xbd0>
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f2c0 8087 	blt.w	800ab08 <UART_SetConfig+0xc4c>
 800a9fa:	2b20      	cmp	r3, #32
 800a9fc:	f200 8084 	bhi.w	800ab08 <UART_SetConfig+0xc4c>
 800aa00:	a201      	add	r2, pc, #4	@ (adr r2, 800aa08 <UART_SetConfig+0xb4c>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa93 	.word	0x0800aa93
 800aa0c:	0800aa9b 	.word	0x0800aa9b
 800aa10:	0800ab09 	.word	0x0800ab09
 800aa14:	0800ab09 	.word	0x0800ab09
 800aa18:	0800aaa3 	.word	0x0800aaa3
 800aa1c:	0800ab09 	.word	0x0800ab09
 800aa20:	0800ab09 	.word	0x0800ab09
 800aa24:	0800ab09 	.word	0x0800ab09
 800aa28:	0800aab3 	.word	0x0800aab3
 800aa2c:	0800ab09 	.word	0x0800ab09
 800aa30:	0800ab09 	.word	0x0800ab09
 800aa34:	0800ab09 	.word	0x0800ab09
 800aa38:	0800ab09 	.word	0x0800ab09
 800aa3c:	0800ab09 	.word	0x0800ab09
 800aa40:	0800ab09 	.word	0x0800ab09
 800aa44:	0800ab09 	.word	0x0800ab09
 800aa48:	0800aac3 	.word	0x0800aac3
 800aa4c:	0800ab09 	.word	0x0800ab09
 800aa50:	0800ab09 	.word	0x0800ab09
 800aa54:	0800ab09 	.word	0x0800ab09
 800aa58:	0800ab09 	.word	0x0800ab09
 800aa5c:	0800ab09 	.word	0x0800ab09
 800aa60:	0800ab09 	.word	0x0800ab09
 800aa64:	0800ab09 	.word	0x0800ab09
 800aa68:	0800ab09 	.word	0x0800ab09
 800aa6c:	0800ab09 	.word	0x0800ab09
 800aa70:	0800ab09 	.word	0x0800ab09
 800aa74:	0800ab09 	.word	0x0800ab09
 800aa78:	0800ab09 	.word	0x0800ab09
 800aa7c:	0800ab09 	.word	0x0800ab09
 800aa80:	0800ab09 	.word	0x0800ab09
 800aa84:	0800ab09 	.word	0x0800ab09
 800aa88:	0800aafb 	.word	0x0800aafb
 800aa8c:	2b40      	cmp	r3, #64	@ 0x40
 800aa8e:	d037      	beq.n	800ab00 <UART_SetConfig+0xc44>
 800aa90:	e03a      	b.n	800ab08 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa92:	f7fb febf 	bl	8006814 <HAL_RCC_GetPCLK1Freq>
 800aa96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa98:	e03c      	b.n	800ab14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa9a:	f7fb fed1 	bl	8006840 <HAL_RCC_GetPCLK2Freq>
 800aa9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aaa0:	e038      	b.n	800ab14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fd f8b4 	bl	8007c14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab0:	e030      	b.n	800ab14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aab2:	f107 0318 	add.w	r3, r7, #24
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fd fa00 	bl	8007ebc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac0:	e028      	b.n	800ab14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aac2:	4b09      	ldr	r3, [pc, #36]	@ (800aae8 <UART_SetConfig+0xc2c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d012      	beq.n	800aaf4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aace:	4b06      	ldr	r3, [pc, #24]	@ (800aae8 <UART_SetConfig+0xc2c>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	08db      	lsrs	r3, r3, #3
 800aad4:	f003 0303 	and.w	r3, r3, #3
 800aad8:	4a04      	ldr	r2, [pc, #16]	@ (800aaec <UART_SetConfig+0xc30>)
 800aada:	fa22 f303 	lsr.w	r3, r2, r3
 800aade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aae0:	e018      	b.n	800ab14 <UART_SetConfig+0xc58>
 800aae2:	bf00      	nop
 800aae4:	0800ed0c 	.word	0x0800ed0c
 800aae8:	58024400 	.word	0x58024400
 800aaec:	03d09000 	.word	0x03d09000
 800aaf0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800aaf4:	4b24      	ldr	r3, [pc, #144]	@ (800ab88 <UART_SetConfig+0xccc>)
 800aaf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaf8:	e00c      	b.n	800ab14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aafa:	4b24      	ldr	r3, [pc, #144]	@ (800ab8c <UART_SetConfig+0xcd0>)
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aafe:	e009      	b.n	800ab14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab06:	e005      	b.n	800ab14 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab12:	bf00      	nop
    }

    if (pclk != 0U)
 800ab14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d021      	beq.n	800ab5e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1e:	4a1c      	ldr	r2, [pc, #112]	@ (800ab90 <UART_SetConfig+0xcd4>)
 800ab20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab24:	461a      	mov	r2, r3
 800ab26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab28:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	085b      	lsrs	r3, r3, #1
 800ab32:	441a      	add	r2, r3
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab40:	2b0f      	cmp	r3, #15
 800ab42:	d909      	bls.n	800ab58 <UART_SetConfig+0xc9c>
 800ab44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab4a:	d205      	bcs.n	800ab58 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	60da      	str	r2, [r3, #12]
 800ab56:	e002      	b.n	800ab5e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2200      	movs	r2, #0
 800ab72:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2200      	movs	r2, #0
 800ab78:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab7a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3748      	adds	r7, #72	@ 0x48
 800ab82:	46bd      	mov	sp, r7
 800ab84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab88:	03d09000 	.word	0x03d09000
 800ab8c:	003d0900 	.word	0x003d0900
 800ab90:	0800ed0c 	.word	0x0800ed0c

0800ab94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba0:	f003 0308 	and.w	r3, r3, #8
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00a      	beq.n	800abbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	430a      	orrs	r2, r1
 800abbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00a      	beq.n	800abe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	430a      	orrs	r2, r1
 800abde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe4:	f003 0302 	and.w	r3, r3, #2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00a      	beq.n	800ac02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac06:	f003 0304 	and.w	r3, r3, #4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00a      	beq.n	800ac24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	430a      	orrs	r2, r1
 800ac22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac28:	f003 0310 	and.w	r3, r3, #16
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00a      	beq.n	800ac46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	430a      	orrs	r2, r1
 800ac44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4a:	f003 0320 	and.w	r3, r3, #32
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00a      	beq.n	800ac68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	430a      	orrs	r2, r1
 800ac66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d01a      	beq.n	800acaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	430a      	orrs	r2, r1
 800ac88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac92:	d10a      	bne.n	800acaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	430a      	orrs	r2, r1
 800aca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00a      	beq.n	800accc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	430a      	orrs	r2, r1
 800acca:	605a      	str	r2, [r3, #4]
  }
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b098      	sub	sp, #96	@ 0x60
 800acdc:	af02      	add	r7, sp, #8
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ace8:	f7f7 fa08 	bl	80020fc <HAL_GetTick>
 800acec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 0308 	and.w	r3, r3, #8
 800acf8:	2b08      	cmp	r3, #8
 800acfa:	d12f      	bne.n	800ad5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad04:	2200      	movs	r2, #0
 800ad06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f88e 	bl	800ae2c <UART_WaitOnFlagUntilTimeout>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d022      	beq.n	800ad5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1e:	e853 3f00 	ldrex	r3, [r3]
 800ad22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	461a      	mov	r2, r3
 800ad32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad34:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad3c:	e841 2300 	strex	r3, r2, [r1]
 800ad40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1e6      	bne.n	800ad16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	e063      	b.n	800ae24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0304 	and.w	r3, r3, #4
 800ad66:	2b04      	cmp	r3, #4
 800ad68:	d149      	bne.n	800adfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad72:	2200      	movs	r2, #0
 800ad74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f857 	bl	800ae2c <UART_WaitOnFlagUntilTimeout>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d03c      	beq.n	800adfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8c:	e853 3f00 	ldrex	r3, [r3]
 800ad90:	623b      	str	r3, [r7, #32]
   return(result);
 800ad92:	6a3b      	ldr	r3, [r7, #32]
 800ad94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ada2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ada4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ada8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adaa:	e841 2300 	strex	r3, r2, [r1]
 800adae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e6      	bne.n	800ad84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3308      	adds	r3, #8
 800adbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f023 0301 	bic.w	r3, r3, #1
 800adcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3308      	adds	r3, #8
 800add4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800add6:	61fa      	str	r2, [r7, #28]
 800add8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adda:	69b9      	ldr	r1, [r7, #24]
 800addc:	69fa      	ldr	r2, [r7, #28]
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	617b      	str	r3, [r7, #20]
   return(result);
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e5      	bne.n	800adb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2220      	movs	r2, #32
 800adee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e012      	b.n	800ae24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2220      	movs	r2, #32
 800ae02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2220      	movs	r2, #32
 800ae0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3758      	adds	r7, #88	@ 0x58
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae3c:	e04f      	b.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae44:	d04b      	beq.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae46:	f7f7 f959 	bl	80020fc <HAL_GetTick>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	69ba      	ldr	r2, [r7, #24]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d302      	bcc.n	800ae5c <UART_WaitOnFlagUntilTimeout+0x30>
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e04e      	b.n	800aefe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0304 	and.w	r3, r3, #4
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d037      	beq.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b80      	cmp	r3, #128	@ 0x80
 800ae72:	d034      	beq.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2b40      	cmp	r3, #64	@ 0x40
 800ae78:	d031      	beq.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	69db      	ldr	r3, [r3, #28]
 800ae80:	f003 0308 	and.w	r3, r3, #8
 800ae84:	2b08      	cmp	r3, #8
 800ae86:	d110      	bne.n	800aeaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2208      	movs	r2, #8
 800ae8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 f921 	bl	800b0d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2208      	movs	r2, #8
 800ae9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e029      	b.n	800aefe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	69db      	ldr	r3, [r3, #28]
 800aeb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aeb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aeb8:	d111      	bne.n	800aede <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f000 f907 	bl	800b0d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2220      	movs	r2, #32
 800aece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e00f      	b.n	800aefe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	69da      	ldr	r2, [r3, #28]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	4013      	ands	r3, r2
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	bf0c      	ite	eq
 800aeee:	2301      	moveq	r3, #1
 800aef0:	2300      	movne	r3, #0
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	461a      	mov	r2, r3
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d0a0      	beq.n	800ae3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b096      	sub	sp, #88	@ 0x58
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	4613      	mov	r3, r2
 800af14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	88fa      	ldrh	r2, [r7, #6]
 800af20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2222      	movs	r2, #34	@ 0x22
 800af30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d02d      	beq.n	800af9a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af44:	4a40      	ldr	r2, [pc, #256]	@ (800b048 <UART_Start_Receive_DMA+0x140>)
 800af46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af4e:	4a3f      	ldr	r2, [pc, #252]	@ (800b04c <UART_Start_Receive_DMA+0x144>)
 800af50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af58:	4a3d      	ldr	r2, [pc, #244]	@ (800b050 <UART_Start_Receive_DMA+0x148>)
 800af5a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af62:	2200      	movs	r2, #0
 800af64:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3324      	adds	r3, #36	@ 0x24
 800af72:	4619      	mov	r1, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af78:	461a      	mov	r2, r3
 800af7a:	88fb      	ldrh	r3, [r7, #6]
 800af7c:	f7f7 fe04 	bl	8002b88 <HAL_DMA_Start_IT>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d009      	beq.n	800af9a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2210      	movs	r2, #16
 800af8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2220      	movs	r2, #32
 800af92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	e051      	b.n	800b03e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d018      	beq.n	800afd4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afaa:	e853 3f00 	ldrex	r3, [r3]
 800afae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800afb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afb6:	657b      	str	r3, [r7, #84]	@ 0x54
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	461a      	mov	r2, r3
 800afbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afc2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800afc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afc8:	e841 2300 	strex	r3, r2, [r1]
 800afcc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800afce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1e6      	bne.n	800afa2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3308      	adds	r3, #8
 800afda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afde:	e853 3f00 	ldrex	r3, [r3]
 800afe2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800afe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe6:	f043 0301 	orr.w	r3, r3, #1
 800afea:	653b      	str	r3, [r7, #80]	@ 0x50
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3308      	adds	r3, #8
 800aff2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aff4:	637a      	str	r2, [r7, #52]	@ 0x34
 800aff6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800affa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800affc:	e841 2300 	strex	r3, r2, [r1]
 800b000:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1e5      	bne.n	800afd4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3308      	adds	r3, #8
 800b00e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	e853 3f00 	ldrex	r3, [r3]
 800b016:	613b      	str	r3, [r7, #16]
   return(result);
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b01e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3308      	adds	r3, #8
 800b026:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b028:	623a      	str	r2, [r7, #32]
 800b02a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02c:	69f9      	ldr	r1, [r7, #28]
 800b02e:	6a3a      	ldr	r2, [r7, #32]
 800b030:	e841 2300 	strex	r3, r2, [r1]
 800b034:	61bb      	str	r3, [r7, #24]
   return(result);
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1e5      	bne.n	800b008 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3758      	adds	r7, #88	@ 0x58
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	0800b1a5 	.word	0x0800b1a5
 800b04c:	0800b2cd 	.word	0x0800b2cd
 800b050:	0800b30b 	.word	0x0800b30b

0800b054 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b054:	b480      	push	{r7}
 800b056:	b08f      	sub	sp, #60	@ 0x3c
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	e853 3f00 	ldrex	r3, [r3]
 800b068:	61fb      	str	r3, [r7, #28]
   return(result);
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b070:	637b      	str	r3, [r7, #52]	@ 0x34
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	461a      	mov	r2, r3
 800b078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b07c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b082:	e841 2300 	strex	r3, r2, [r1]
 800b086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1e6      	bne.n	800b05c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3308      	adds	r3, #8
 800b094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	e853 3f00 	ldrex	r3, [r3]
 800b09c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b0a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	3308      	adds	r3, #8
 800b0ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ae:	61ba      	str	r2, [r7, #24]
 800b0b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b2:	6979      	ldr	r1, [r7, #20]
 800b0b4:	69ba      	ldr	r2, [r7, #24]
 800b0b6:	e841 2300 	strex	r3, r2, [r1]
 800b0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1e5      	bne.n	800b08e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2220      	movs	r2, #32
 800b0c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b0ca:	bf00      	nop
 800b0cc:	373c      	adds	r7, #60	@ 0x3c
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b095      	sub	sp, #84	@ 0x54
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800b100:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b102:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b104:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b106:	e841 2300 	strex	r3, r2, [r1]
 800b10a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e6      	bne.n	800b0e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3308      	adds	r3, #8
 800b118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11a:	6a3b      	ldr	r3, [r7, #32]
 800b11c:	e853 3f00 	ldrex	r3, [r3]
 800b120:	61fb      	str	r3, [r7, #28]
   return(result);
 800b122:	69fa      	ldr	r2, [r7, #28]
 800b124:	4b1e      	ldr	r3, [pc, #120]	@ (800b1a0 <UART_EndRxTransfer+0xc8>)
 800b126:	4013      	ands	r3, r2
 800b128:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3308      	adds	r3, #8
 800b130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b132:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b134:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b136:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b138:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b13a:	e841 2300 	strex	r3, r2, [r1]
 800b13e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1e5      	bne.n	800b112 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d118      	bne.n	800b180 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	e853 3f00 	ldrex	r3, [r3]
 800b15a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f023 0310 	bic.w	r3, r3, #16
 800b162:	647b      	str	r3, [r7, #68]	@ 0x44
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	461a      	mov	r2, r3
 800b16a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b16c:	61bb      	str	r3, [r7, #24]
 800b16e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b170:	6979      	ldr	r1, [r7, #20]
 800b172:	69ba      	ldr	r2, [r7, #24]
 800b174:	e841 2300 	strex	r3, r2, [r1]
 800b178:	613b      	str	r3, [r7, #16]
   return(result);
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e6      	bne.n	800b14e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2220      	movs	r2, #32
 800b184:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b194:	bf00      	nop
 800b196:	3754      	adds	r7, #84	@ 0x54
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	effffffe 	.word	0xeffffffe

0800b1a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b09c      	sub	sp, #112	@ 0x70
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1ba:	d071      	beq.n	800b2a0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b1bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1cc:	e853 3f00 	ldrex	r3, [r3]
 800b1d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b1da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1ea:	e841 2300 	strex	r3, r2, [r1]
 800b1ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1e6      	bne.n	800b1c4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b200:	e853 3f00 	ldrex	r3, [r3]
 800b204:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b208:	f023 0301 	bic.w	r3, r3, #1
 800b20c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b20e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3308      	adds	r3, #8
 800b214:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b216:	647a      	str	r2, [r7, #68]	@ 0x44
 800b218:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b21c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b21e:	e841 2300 	strex	r3, r2, [r1]
 800b222:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1e5      	bne.n	800b1f6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b22a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3308      	adds	r3, #8
 800b230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b234:	e853 3f00 	ldrex	r3, [r3]
 800b238:	623b      	str	r3, [r7, #32]
   return(result);
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b240:	663b      	str	r3, [r7, #96]	@ 0x60
 800b242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3308      	adds	r3, #8
 800b248:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b24a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b252:	e841 2300 	strex	r3, r2, [r1]
 800b256:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1e5      	bne.n	800b22a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b25e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b260:	2220      	movs	r2, #32
 800b262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d118      	bne.n	800b2a0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b26e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	e853 3f00 	ldrex	r3, [r3]
 800b27a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f023 0310 	bic.w	r3, r3, #16
 800b282:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	461a      	mov	r2, r3
 800b28a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b28c:	61fb      	str	r3, [r7, #28]
 800b28e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b290:	69b9      	ldr	r1, [r7, #24]
 800b292:	69fa      	ldr	r2, [r7, #28]
 800b294:	e841 2300 	strex	r3, r2, [r1]
 800b298:	617b      	str	r3, [r7, #20]
   return(result);
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1e6      	bne.n	800b26e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d107      	bne.n	800b2be <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b2b8:	f7f5 fcb0 	bl	8000c1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2bc:	e002      	b.n	800b2c4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b2be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b2c0:	f7fe fdde 	bl	8009e80 <HAL_UART_RxCpltCallback>
}
 800b2c4:	bf00      	nop
 800b2c6:	3770      	adds	r7, #112	@ 0x70
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d109      	bne.n	800b2fc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2ee:	085b      	lsrs	r3, r3, #1
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7f5 fc91 	bl	8000c1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2fa:	e002      	b.n	800b302 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7fe fdc9 	bl	8009e94 <HAL_UART_RxHalfCpltCallback>
}
 800b302:	bf00      	nop
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b086      	sub	sp, #24
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b316:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b31e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b326:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b332:	2b80      	cmp	r3, #128	@ 0x80
 800b334:	d109      	bne.n	800b34a <UART_DMAError+0x40>
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	2b21      	cmp	r3, #33	@ 0x21
 800b33a:	d106      	bne.n	800b34a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	2200      	movs	r2, #0
 800b340:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b344:	6978      	ldr	r0, [r7, #20]
 800b346:	f7ff fe85 	bl	800b054 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b354:	2b40      	cmp	r3, #64	@ 0x40
 800b356:	d109      	bne.n	800b36c <UART_DMAError+0x62>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b22      	cmp	r3, #34	@ 0x22
 800b35c:	d106      	bne.n	800b36c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2200      	movs	r2, #0
 800b362:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b366:	6978      	ldr	r0, [r7, #20]
 800b368:	f7ff feb6 	bl	800b0d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b372:	f043 0210 	orr.w	r2, r3, #16
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b37c:	6978      	ldr	r0, [r7, #20]
 800b37e:	f7fe fd93 	bl	8009ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b382:	bf00      	nop
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b084      	sub	sp, #16
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f7fe fd81 	bl	8009ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3a6:	bf00      	nop
 800b3a8:	3710      	adds	r7, #16
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b088      	sub	sp, #32
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	e853 3f00 	ldrex	r3, [r3]
 800b3c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3ca:	61fb      	str	r3, [r7, #28]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	61bb      	str	r3, [r7, #24]
 800b3d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d8:	6979      	ldr	r1, [r7, #20]
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	e841 2300 	strex	r3, r2, [r1]
 800b3e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1e6      	bne.n	800b3b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2220      	movs	r2, #32
 800b3ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7fe fd38 	bl	8009e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3fc:	bf00      	nop
 800b3fe:	3720      	adds	r7, #32
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d101      	bne.n	800b456 <HAL_UARTEx_DisableFifoMode+0x16>
 800b452:	2302      	movs	r3, #2
 800b454:	e027      	b.n	800b4a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2224      	movs	r2, #36	@ 0x24
 800b462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f022 0201 	bic.w	r2, r2, #1
 800b47c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b484:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2220      	movs	r2, #32
 800b498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b084      	sub	sp, #16
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d101      	bne.n	800b4ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	e02d      	b.n	800b526 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2224      	movs	r2, #36	@ 0x24
 800b4d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f022 0201 	bic.w	r2, r2, #1
 800b4f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	430a      	orrs	r2, r1
 800b504:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f8a4 	bl	800b654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2220      	movs	r2, #32
 800b518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d101      	bne.n	800b546 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b542:	2302      	movs	r3, #2
 800b544:	e02d      	b.n	800b5a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2224      	movs	r2, #36	@ 0x24
 800b552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f022 0201 	bic.w	r2, r2, #1
 800b56c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	430a      	orrs	r2, r1
 800b580:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f866 	bl	800b654 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b08c      	sub	sp, #48	@ 0x30
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5be:	2b20      	cmp	r3, #32
 800b5c0:	d142      	bne.n	800b648 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b5c8:	88fb      	ldrh	r3, [r7, #6]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d101      	bne.n	800b5d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e03b      	b.n	800b64a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b5de:	88fb      	ldrh	r3, [r7, #6]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	68b9      	ldr	r1, [r7, #8]
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f7ff fc8f 	bl	800af08 <UART_Start_Receive_DMA>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b5f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d124      	bne.n	800b642 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d11d      	bne.n	800b63c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2210      	movs	r2, #16
 800b606:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	e853 3f00 	ldrex	r3, [r3]
 800b614:	617b      	str	r3, [r7, #20]
   return(result);
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f043 0310 	orr.w	r3, r3, #16
 800b61c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b626:	627b      	str	r3, [r7, #36]	@ 0x24
 800b628:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62a:	6a39      	ldr	r1, [r7, #32]
 800b62c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b62e:	e841 2300 	strex	r3, r2, [r1]
 800b632:	61fb      	str	r3, [r7, #28]
   return(result);
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1e6      	bne.n	800b608 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b63a:	e002      	b.n	800b642 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b642:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b646:	e000      	b.n	800b64a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b648:	2302      	movs	r3, #2
  }
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3730      	adds	r7, #48	@ 0x30
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b660:	2b00      	cmp	r3, #0
 800b662:	d108      	bne.n	800b676 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b674:	e031      	b.n	800b6da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b676:	2310      	movs	r3, #16
 800b678:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b67a:	2310      	movs	r3, #16
 800b67c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	0e5b      	lsrs	r3, r3, #25
 800b686:	b2db      	uxtb	r3, r3
 800b688:	f003 0307 	and.w	r3, r3, #7
 800b68c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	0f5b      	lsrs	r3, r3, #29
 800b696:	b2db      	uxtb	r3, r3
 800b698:	f003 0307 	and.w	r3, r3, #7
 800b69c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
 800b6a0:	7b3a      	ldrb	r2, [r7, #12]
 800b6a2:	4911      	ldr	r1, [pc, #68]	@ (800b6e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b6a4:	5c8a      	ldrb	r2, [r1, r2]
 800b6a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b6aa:	7b3a      	ldrb	r2, [r7, #12]
 800b6ac:	490f      	ldr	r1, [pc, #60]	@ (800b6ec <UARTEx_SetNbDataToProcess+0x98>)
 800b6ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	7b7a      	ldrb	r2, [r7, #13]
 800b6c0:	4909      	ldr	r1, [pc, #36]	@ (800b6e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b6c2:	5c8a      	ldrb	r2, [r1, r2]
 800b6c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6c8:	7b7a      	ldrb	r2, [r7, #13]
 800b6ca:	4908      	ldr	r1, [pc, #32]	@ (800b6ec <UARTEx_SetNbDataToProcess+0x98>)
 800b6cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b6da:	bf00      	nop
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	0800ed24 	.word	0x0800ed24
 800b6ec:	0800ed2c 	.word	0x0800ed2c

0800b6f0 <__cvt>:
 800b6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6f2:	ed2d 8b02 	vpush	{d8}
 800b6f6:	eeb0 8b40 	vmov.f64	d8, d0
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	4617      	mov	r7, r2
 800b6fe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b700:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b702:	ee18 2a90 	vmov	r2, s17
 800b706:	f025 0520 	bic.w	r5, r5, #32
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	bfb6      	itet	lt
 800b70e:	222d      	movlt	r2, #45	@ 0x2d
 800b710:	2200      	movge	r2, #0
 800b712:	eeb1 8b40 	vneglt.f64	d8, d0
 800b716:	2d46      	cmp	r5, #70	@ 0x46
 800b718:	460c      	mov	r4, r1
 800b71a:	701a      	strb	r2, [r3, #0]
 800b71c:	d004      	beq.n	800b728 <__cvt+0x38>
 800b71e:	2d45      	cmp	r5, #69	@ 0x45
 800b720:	d100      	bne.n	800b724 <__cvt+0x34>
 800b722:	3401      	adds	r4, #1
 800b724:	2102      	movs	r1, #2
 800b726:	e000      	b.n	800b72a <__cvt+0x3a>
 800b728:	2103      	movs	r1, #3
 800b72a:	ab03      	add	r3, sp, #12
 800b72c:	9301      	str	r3, [sp, #4]
 800b72e:	ab02      	add	r3, sp, #8
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	4622      	mov	r2, r4
 800b734:	4633      	mov	r3, r6
 800b736:	eeb0 0b48 	vmov.f64	d0, d8
 800b73a:	f000 fe2d 	bl	800c398 <_dtoa_r>
 800b73e:	2d47      	cmp	r5, #71	@ 0x47
 800b740:	d114      	bne.n	800b76c <__cvt+0x7c>
 800b742:	07fb      	lsls	r3, r7, #31
 800b744:	d50a      	bpl.n	800b75c <__cvt+0x6c>
 800b746:	1902      	adds	r2, r0, r4
 800b748:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b750:	bf08      	it	eq
 800b752:	9203      	streq	r2, [sp, #12]
 800b754:	2130      	movs	r1, #48	@ 0x30
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	4293      	cmp	r3, r2
 800b75a:	d319      	bcc.n	800b790 <__cvt+0xa0>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b760:	1a1b      	subs	r3, r3, r0
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	b005      	add	sp, #20
 800b766:	ecbd 8b02 	vpop	{d8}
 800b76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b76c:	2d46      	cmp	r5, #70	@ 0x46
 800b76e:	eb00 0204 	add.w	r2, r0, r4
 800b772:	d1e9      	bne.n	800b748 <__cvt+0x58>
 800b774:	7803      	ldrb	r3, [r0, #0]
 800b776:	2b30      	cmp	r3, #48	@ 0x30
 800b778:	d107      	bne.n	800b78a <__cvt+0x9a>
 800b77a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b782:	bf1c      	itt	ne
 800b784:	f1c4 0401 	rsbne	r4, r4, #1
 800b788:	6034      	strne	r4, [r6, #0]
 800b78a:	6833      	ldr	r3, [r6, #0]
 800b78c:	441a      	add	r2, r3
 800b78e:	e7db      	b.n	800b748 <__cvt+0x58>
 800b790:	1c5c      	adds	r4, r3, #1
 800b792:	9403      	str	r4, [sp, #12]
 800b794:	7019      	strb	r1, [r3, #0]
 800b796:	e7de      	b.n	800b756 <__cvt+0x66>

0800b798 <__exponent>:
 800b798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b79a:	2900      	cmp	r1, #0
 800b79c:	bfba      	itte	lt
 800b79e:	4249      	neglt	r1, r1
 800b7a0:	232d      	movlt	r3, #45	@ 0x2d
 800b7a2:	232b      	movge	r3, #43	@ 0x2b
 800b7a4:	2909      	cmp	r1, #9
 800b7a6:	7002      	strb	r2, [r0, #0]
 800b7a8:	7043      	strb	r3, [r0, #1]
 800b7aa:	dd29      	ble.n	800b800 <__exponent+0x68>
 800b7ac:	f10d 0307 	add.w	r3, sp, #7
 800b7b0:	461d      	mov	r5, r3
 800b7b2:	270a      	movs	r7, #10
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	fbb1 f6f7 	udiv	r6, r1, r7
 800b7ba:	fb07 1416 	mls	r4, r7, r6, r1
 800b7be:	3430      	adds	r4, #48	@ 0x30
 800b7c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b7c4:	460c      	mov	r4, r1
 800b7c6:	2c63      	cmp	r4, #99	@ 0x63
 800b7c8:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7cc:	4631      	mov	r1, r6
 800b7ce:	dcf1      	bgt.n	800b7b4 <__exponent+0x1c>
 800b7d0:	3130      	adds	r1, #48	@ 0x30
 800b7d2:	1e94      	subs	r4, r2, #2
 800b7d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b7d8:	1c41      	adds	r1, r0, #1
 800b7da:	4623      	mov	r3, r4
 800b7dc:	42ab      	cmp	r3, r5
 800b7de:	d30a      	bcc.n	800b7f6 <__exponent+0x5e>
 800b7e0:	f10d 0309 	add.w	r3, sp, #9
 800b7e4:	1a9b      	subs	r3, r3, r2
 800b7e6:	42ac      	cmp	r4, r5
 800b7e8:	bf88      	it	hi
 800b7ea:	2300      	movhi	r3, #0
 800b7ec:	3302      	adds	r3, #2
 800b7ee:	4403      	add	r3, r0
 800b7f0:	1a18      	subs	r0, r3, r0
 800b7f2:	b003      	add	sp, #12
 800b7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b7fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b7fe:	e7ed      	b.n	800b7dc <__exponent+0x44>
 800b800:	2330      	movs	r3, #48	@ 0x30
 800b802:	3130      	adds	r1, #48	@ 0x30
 800b804:	7083      	strb	r3, [r0, #2]
 800b806:	70c1      	strb	r1, [r0, #3]
 800b808:	1d03      	adds	r3, r0, #4
 800b80a:	e7f1      	b.n	800b7f0 <__exponent+0x58>
 800b80c:	0000      	movs	r0, r0
	...

0800b810 <_printf_float>:
 800b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	b08d      	sub	sp, #52	@ 0x34
 800b816:	460c      	mov	r4, r1
 800b818:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b81c:	4616      	mov	r6, r2
 800b81e:	461f      	mov	r7, r3
 800b820:	4605      	mov	r5, r0
 800b822:	f000 fca9 	bl	800c178 <_localeconv_r>
 800b826:	f8d0 b000 	ldr.w	fp, [r0]
 800b82a:	4658      	mov	r0, fp
 800b82c:	f7f4 fdb0 	bl	8000390 <strlen>
 800b830:	2300      	movs	r3, #0
 800b832:	930a      	str	r3, [sp, #40]	@ 0x28
 800b834:	f8d8 3000 	ldr.w	r3, [r8]
 800b838:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b83c:	6822      	ldr	r2, [r4, #0]
 800b83e:	9005      	str	r0, [sp, #20]
 800b840:	3307      	adds	r3, #7
 800b842:	f023 0307 	bic.w	r3, r3, #7
 800b846:	f103 0108 	add.w	r1, r3, #8
 800b84a:	f8c8 1000 	str.w	r1, [r8]
 800b84e:	ed93 0b00 	vldr	d0, [r3]
 800b852:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800bab0 <_printf_float+0x2a0>
 800b856:	eeb0 7bc0 	vabs.f64	d7, d0
 800b85a:	eeb4 7b46 	vcmp.f64	d7, d6
 800b85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b862:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b866:	dd24      	ble.n	800b8b2 <_printf_float+0xa2>
 800b868:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b870:	d502      	bpl.n	800b878 <_printf_float+0x68>
 800b872:	232d      	movs	r3, #45	@ 0x2d
 800b874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b878:	498f      	ldr	r1, [pc, #572]	@ (800bab8 <_printf_float+0x2a8>)
 800b87a:	4b90      	ldr	r3, [pc, #576]	@ (800babc <_printf_float+0x2ac>)
 800b87c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b880:	bf8c      	ite	hi
 800b882:	4688      	movhi	r8, r1
 800b884:	4698      	movls	r8, r3
 800b886:	f022 0204 	bic.w	r2, r2, #4
 800b88a:	2303      	movs	r3, #3
 800b88c:	6123      	str	r3, [r4, #16]
 800b88e:	6022      	str	r2, [r4, #0]
 800b890:	f04f 0a00 	mov.w	sl, #0
 800b894:	9700      	str	r7, [sp, #0]
 800b896:	4633      	mov	r3, r6
 800b898:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b89a:	4621      	mov	r1, r4
 800b89c:	4628      	mov	r0, r5
 800b89e:	f000 f9d1 	bl	800bc44 <_printf_common>
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	f040 8089 	bne.w	800b9ba <_printf_float+0x1aa>
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ac:	b00d      	add	sp, #52	@ 0x34
 800b8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b2:	eeb4 0b40 	vcmp.f64	d0, d0
 800b8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ba:	d709      	bvc.n	800b8d0 <_printf_float+0xc0>
 800b8bc:	ee10 3a90 	vmov	r3, s1
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	bfbc      	itt	lt
 800b8c4:	232d      	movlt	r3, #45	@ 0x2d
 800b8c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b8ca:	497d      	ldr	r1, [pc, #500]	@ (800bac0 <_printf_float+0x2b0>)
 800b8cc:	4b7d      	ldr	r3, [pc, #500]	@ (800bac4 <_printf_float+0x2b4>)
 800b8ce:	e7d5      	b.n	800b87c <_printf_float+0x6c>
 800b8d0:	6863      	ldr	r3, [r4, #4]
 800b8d2:	1c59      	adds	r1, r3, #1
 800b8d4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b8d8:	d139      	bne.n	800b94e <_printf_float+0x13e>
 800b8da:	2306      	movs	r3, #6
 800b8dc:	6063      	str	r3, [r4, #4]
 800b8de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6022      	str	r2, [r4, #0]
 800b8e6:	9303      	str	r3, [sp, #12]
 800b8e8:	ab0a      	add	r3, sp, #40	@ 0x28
 800b8ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b8ee:	ab09      	add	r3, sp, #36	@ 0x24
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	6861      	ldr	r1, [r4, #4]
 800b8f4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	f7ff fef9 	bl	800b6f0 <__cvt>
 800b8fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b904:	4680      	mov	r8, r0
 800b906:	d129      	bne.n	800b95c <_printf_float+0x14c>
 800b908:	1cc8      	adds	r0, r1, #3
 800b90a:	db02      	blt.n	800b912 <_printf_float+0x102>
 800b90c:	6863      	ldr	r3, [r4, #4]
 800b90e:	4299      	cmp	r1, r3
 800b910:	dd41      	ble.n	800b996 <_printf_float+0x186>
 800b912:	f1a9 0902 	sub.w	r9, r9, #2
 800b916:	fa5f f989 	uxtb.w	r9, r9
 800b91a:	3901      	subs	r1, #1
 800b91c:	464a      	mov	r2, r9
 800b91e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b922:	9109      	str	r1, [sp, #36]	@ 0x24
 800b924:	f7ff ff38 	bl	800b798 <__exponent>
 800b928:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b92a:	1813      	adds	r3, r2, r0
 800b92c:	2a01      	cmp	r2, #1
 800b92e:	4682      	mov	sl, r0
 800b930:	6123      	str	r3, [r4, #16]
 800b932:	dc02      	bgt.n	800b93a <_printf_float+0x12a>
 800b934:	6822      	ldr	r2, [r4, #0]
 800b936:	07d2      	lsls	r2, r2, #31
 800b938:	d501      	bpl.n	800b93e <_printf_float+0x12e>
 800b93a:	3301      	adds	r3, #1
 800b93c:	6123      	str	r3, [r4, #16]
 800b93e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b942:	2b00      	cmp	r3, #0
 800b944:	d0a6      	beq.n	800b894 <_printf_float+0x84>
 800b946:	232d      	movs	r3, #45	@ 0x2d
 800b948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b94c:	e7a2      	b.n	800b894 <_printf_float+0x84>
 800b94e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b952:	d1c4      	bne.n	800b8de <_printf_float+0xce>
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1c2      	bne.n	800b8de <_printf_float+0xce>
 800b958:	2301      	movs	r3, #1
 800b95a:	e7bf      	b.n	800b8dc <_printf_float+0xcc>
 800b95c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b960:	d9db      	bls.n	800b91a <_printf_float+0x10a>
 800b962:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b966:	d118      	bne.n	800b99a <_printf_float+0x18a>
 800b968:	2900      	cmp	r1, #0
 800b96a:	6863      	ldr	r3, [r4, #4]
 800b96c:	dd0b      	ble.n	800b986 <_printf_float+0x176>
 800b96e:	6121      	str	r1, [r4, #16]
 800b970:	b913      	cbnz	r3, 800b978 <_printf_float+0x168>
 800b972:	6822      	ldr	r2, [r4, #0]
 800b974:	07d0      	lsls	r0, r2, #31
 800b976:	d502      	bpl.n	800b97e <_printf_float+0x16e>
 800b978:	3301      	adds	r3, #1
 800b97a:	440b      	add	r3, r1
 800b97c:	6123      	str	r3, [r4, #16]
 800b97e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b980:	f04f 0a00 	mov.w	sl, #0
 800b984:	e7db      	b.n	800b93e <_printf_float+0x12e>
 800b986:	b913      	cbnz	r3, 800b98e <_printf_float+0x17e>
 800b988:	6822      	ldr	r2, [r4, #0]
 800b98a:	07d2      	lsls	r2, r2, #31
 800b98c:	d501      	bpl.n	800b992 <_printf_float+0x182>
 800b98e:	3302      	adds	r3, #2
 800b990:	e7f4      	b.n	800b97c <_printf_float+0x16c>
 800b992:	2301      	movs	r3, #1
 800b994:	e7f2      	b.n	800b97c <_printf_float+0x16c>
 800b996:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b99a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b99c:	4299      	cmp	r1, r3
 800b99e:	db05      	blt.n	800b9ac <_printf_float+0x19c>
 800b9a0:	6823      	ldr	r3, [r4, #0]
 800b9a2:	6121      	str	r1, [r4, #16]
 800b9a4:	07d8      	lsls	r0, r3, #31
 800b9a6:	d5ea      	bpl.n	800b97e <_printf_float+0x16e>
 800b9a8:	1c4b      	adds	r3, r1, #1
 800b9aa:	e7e7      	b.n	800b97c <_printf_float+0x16c>
 800b9ac:	2900      	cmp	r1, #0
 800b9ae:	bfd4      	ite	le
 800b9b0:	f1c1 0202 	rsble	r2, r1, #2
 800b9b4:	2201      	movgt	r2, #1
 800b9b6:	4413      	add	r3, r2
 800b9b8:	e7e0      	b.n	800b97c <_printf_float+0x16c>
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	055a      	lsls	r2, r3, #21
 800b9be:	d407      	bmi.n	800b9d0 <_printf_float+0x1c0>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	4642      	mov	r2, r8
 800b9c4:	4631      	mov	r1, r6
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	47b8      	blx	r7
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	d12a      	bne.n	800ba24 <_printf_float+0x214>
 800b9ce:	e76b      	b.n	800b8a8 <_printf_float+0x98>
 800b9d0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b9d4:	f240 80e0 	bls.w	800bb98 <_printf_float+0x388>
 800b9d8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b9dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e4:	d133      	bne.n	800ba4e <_printf_float+0x23e>
 800b9e6:	4a38      	ldr	r2, [pc, #224]	@ (800bac8 <_printf_float+0x2b8>)
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	47b8      	blx	r7
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	f43f af59 	beq.w	800b8a8 <_printf_float+0x98>
 800b9f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b9fa:	4543      	cmp	r3, r8
 800b9fc:	db02      	blt.n	800ba04 <_printf_float+0x1f4>
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	07d8      	lsls	r0, r3, #31
 800ba02:	d50f      	bpl.n	800ba24 <_printf_float+0x214>
 800ba04:	9b05      	ldr	r3, [sp, #20]
 800ba06:	465a      	mov	r2, fp
 800ba08:	4631      	mov	r1, r6
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	47b8      	blx	r7
 800ba0e:	3001      	adds	r0, #1
 800ba10:	f43f af4a 	beq.w	800b8a8 <_printf_float+0x98>
 800ba14:	f04f 0900 	mov.w	r9, #0
 800ba18:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba1c:	f104 0a1a 	add.w	sl, r4, #26
 800ba20:	45c8      	cmp	r8, r9
 800ba22:	dc09      	bgt.n	800ba38 <_printf_float+0x228>
 800ba24:	6823      	ldr	r3, [r4, #0]
 800ba26:	079b      	lsls	r3, r3, #30
 800ba28:	f100 8107 	bmi.w	800bc3a <_printf_float+0x42a>
 800ba2c:	68e0      	ldr	r0, [r4, #12]
 800ba2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba30:	4298      	cmp	r0, r3
 800ba32:	bfb8      	it	lt
 800ba34:	4618      	movlt	r0, r3
 800ba36:	e739      	b.n	800b8ac <_printf_float+0x9c>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	4628      	mov	r0, r5
 800ba40:	47b8      	blx	r7
 800ba42:	3001      	adds	r0, #1
 800ba44:	f43f af30 	beq.w	800b8a8 <_printf_float+0x98>
 800ba48:	f109 0901 	add.w	r9, r9, #1
 800ba4c:	e7e8      	b.n	800ba20 <_printf_float+0x210>
 800ba4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dc3b      	bgt.n	800bacc <_printf_float+0x2bc>
 800ba54:	4a1c      	ldr	r2, [pc, #112]	@ (800bac8 <_printf_float+0x2b8>)
 800ba56:	2301      	movs	r3, #1
 800ba58:	4631      	mov	r1, r6
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	47b8      	blx	r7
 800ba5e:	3001      	adds	r0, #1
 800ba60:	f43f af22 	beq.w	800b8a8 <_printf_float+0x98>
 800ba64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ba68:	ea59 0303 	orrs.w	r3, r9, r3
 800ba6c:	d102      	bne.n	800ba74 <_printf_float+0x264>
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	07d9      	lsls	r1, r3, #31
 800ba72:	d5d7      	bpl.n	800ba24 <_printf_float+0x214>
 800ba74:	9b05      	ldr	r3, [sp, #20]
 800ba76:	465a      	mov	r2, fp
 800ba78:	4631      	mov	r1, r6
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	47b8      	blx	r7
 800ba7e:	3001      	adds	r0, #1
 800ba80:	f43f af12 	beq.w	800b8a8 <_printf_float+0x98>
 800ba84:	f04f 0a00 	mov.w	sl, #0
 800ba88:	f104 0b1a 	add.w	fp, r4, #26
 800ba8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba8e:	425b      	negs	r3, r3
 800ba90:	4553      	cmp	r3, sl
 800ba92:	dc01      	bgt.n	800ba98 <_printf_float+0x288>
 800ba94:	464b      	mov	r3, r9
 800ba96:	e794      	b.n	800b9c2 <_printf_float+0x1b2>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	465a      	mov	r2, fp
 800ba9c:	4631      	mov	r1, r6
 800ba9e:	4628      	mov	r0, r5
 800baa0:	47b8      	blx	r7
 800baa2:	3001      	adds	r0, #1
 800baa4:	f43f af00 	beq.w	800b8a8 <_printf_float+0x98>
 800baa8:	f10a 0a01 	add.w	sl, sl, #1
 800baac:	e7ee      	b.n	800ba8c <_printf_float+0x27c>
 800baae:	bf00      	nop
 800bab0:	ffffffff 	.word	0xffffffff
 800bab4:	7fefffff 	.word	0x7fefffff
 800bab8:	0800ed38 	.word	0x0800ed38
 800babc:	0800ed34 	.word	0x0800ed34
 800bac0:	0800ed40 	.word	0x0800ed40
 800bac4:	0800ed3c 	.word	0x0800ed3c
 800bac8:	0800ed44 	.word	0x0800ed44
 800bacc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bace:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bad2:	4553      	cmp	r3, sl
 800bad4:	bfa8      	it	ge
 800bad6:	4653      	movge	r3, sl
 800bad8:	2b00      	cmp	r3, #0
 800bada:	4699      	mov	r9, r3
 800badc:	dc37      	bgt.n	800bb4e <_printf_float+0x33e>
 800bade:	2300      	movs	r3, #0
 800bae0:	9307      	str	r3, [sp, #28]
 800bae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bae6:	f104 021a 	add.w	r2, r4, #26
 800baea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800baec:	9907      	ldr	r1, [sp, #28]
 800baee:	9306      	str	r3, [sp, #24]
 800baf0:	eba3 0309 	sub.w	r3, r3, r9
 800baf4:	428b      	cmp	r3, r1
 800baf6:	dc31      	bgt.n	800bb5c <_printf_float+0x34c>
 800baf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafa:	459a      	cmp	sl, r3
 800bafc:	dc3b      	bgt.n	800bb76 <_printf_float+0x366>
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	07da      	lsls	r2, r3, #31
 800bb02:	d438      	bmi.n	800bb76 <_printf_float+0x366>
 800bb04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb06:	ebaa 0903 	sub.w	r9, sl, r3
 800bb0a:	9b06      	ldr	r3, [sp, #24]
 800bb0c:	ebaa 0303 	sub.w	r3, sl, r3
 800bb10:	4599      	cmp	r9, r3
 800bb12:	bfa8      	it	ge
 800bb14:	4699      	movge	r9, r3
 800bb16:	f1b9 0f00 	cmp.w	r9, #0
 800bb1a:	dc34      	bgt.n	800bb86 <_printf_float+0x376>
 800bb1c:	f04f 0800 	mov.w	r8, #0
 800bb20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb24:	f104 0b1a 	add.w	fp, r4, #26
 800bb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2a:	ebaa 0303 	sub.w	r3, sl, r3
 800bb2e:	eba3 0309 	sub.w	r3, r3, r9
 800bb32:	4543      	cmp	r3, r8
 800bb34:	f77f af76 	ble.w	800ba24 <_printf_float+0x214>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	465a      	mov	r2, fp
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	4628      	mov	r0, r5
 800bb40:	47b8      	blx	r7
 800bb42:	3001      	adds	r0, #1
 800bb44:	f43f aeb0 	beq.w	800b8a8 <_printf_float+0x98>
 800bb48:	f108 0801 	add.w	r8, r8, #1
 800bb4c:	e7ec      	b.n	800bb28 <_printf_float+0x318>
 800bb4e:	4642      	mov	r2, r8
 800bb50:	4631      	mov	r1, r6
 800bb52:	4628      	mov	r0, r5
 800bb54:	47b8      	blx	r7
 800bb56:	3001      	adds	r0, #1
 800bb58:	d1c1      	bne.n	800bade <_printf_float+0x2ce>
 800bb5a:	e6a5      	b.n	800b8a8 <_printf_float+0x98>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	4631      	mov	r1, r6
 800bb60:	4628      	mov	r0, r5
 800bb62:	9206      	str	r2, [sp, #24]
 800bb64:	47b8      	blx	r7
 800bb66:	3001      	adds	r0, #1
 800bb68:	f43f ae9e 	beq.w	800b8a8 <_printf_float+0x98>
 800bb6c:	9b07      	ldr	r3, [sp, #28]
 800bb6e:	9a06      	ldr	r2, [sp, #24]
 800bb70:	3301      	adds	r3, #1
 800bb72:	9307      	str	r3, [sp, #28]
 800bb74:	e7b9      	b.n	800baea <_printf_float+0x2da>
 800bb76:	9b05      	ldr	r3, [sp, #20]
 800bb78:	465a      	mov	r2, fp
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	47b8      	blx	r7
 800bb80:	3001      	adds	r0, #1
 800bb82:	d1bf      	bne.n	800bb04 <_printf_float+0x2f4>
 800bb84:	e690      	b.n	800b8a8 <_printf_float+0x98>
 800bb86:	9a06      	ldr	r2, [sp, #24]
 800bb88:	464b      	mov	r3, r9
 800bb8a:	4442      	add	r2, r8
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	4628      	mov	r0, r5
 800bb90:	47b8      	blx	r7
 800bb92:	3001      	adds	r0, #1
 800bb94:	d1c2      	bne.n	800bb1c <_printf_float+0x30c>
 800bb96:	e687      	b.n	800b8a8 <_printf_float+0x98>
 800bb98:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800bb9c:	f1b9 0f01 	cmp.w	r9, #1
 800bba0:	dc01      	bgt.n	800bba6 <_printf_float+0x396>
 800bba2:	07db      	lsls	r3, r3, #31
 800bba4:	d536      	bpl.n	800bc14 <_printf_float+0x404>
 800bba6:	2301      	movs	r3, #1
 800bba8:	4642      	mov	r2, r8
 800bbaa:	4631      	mov	r1, r6
 800bbac:	4628      	mov	r0, r5
 800bbae:	47b8      	blx	r7
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	f43f ae79 	beq.w	800b8a8 <_printf_float+0x98>
 800bbb6:	9b05      	ldr	r3, [sp, #20]
 800bbb8:	465a      	mov	r2, fp
 800bbba:	4631      	mov	r1, r6
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	47b8      	blx	r7
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	f43f ae71 	beq.w	800b8a8 <_printf_float+0x98>
 800bbc6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800bbca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd2:	f109 39ff 	add.w	r9, r9, #4294967295
 800bbd6:	d018      	beq.n	800bc0a <_printf_float+0x3fa>
 800bbd8:	464b      	mov	r3, r9
 800bbda:	f108 0201 	add.w	r2, r8, #1
 800bbde:	4631      	mov	r1, r6
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	47b8      	blx	r7
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	d10c      	bne.n	800bc02 <_printf_float+0x3f2>
 800bbe8:	e65e      	b.n	800b8a8 <_printf_float+0x98>
 800bbea:	2301      	movs	r3, #1
 800bbec:	465a      	mov	r2, fp
 800bbee:	4631      	mov	r1, r6
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	47b8      	blx	r7
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	f43f ae57 	beq.w	800b8a8 <_printf_float+0x98>
 800bbfa:	f108 0801 	add.w	r8, r8, #1
 800bbfe:	45c8      	cmp	r8, r9
 800bc00:	dbf3      	blt.n	800bbea <_printf_float+0x3da>
 800bc02:	4653      	mov	r3, sl
 800bc04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bc08:	e6dc      	b.n	800b9c4 <_printf_float+0x1b4>
 800bc0a:	f04f 0800 	mov.w	r8, #0
 800bc0e:	f104 0b1a 	add.w	fp, r4, #26
 800bc12:	e7f4      	b.n	800bbfe <_printf_float+0x3ee>
 800bc14:	2301      	movs	r3, #1
 800bc16:	4642      	mov	r2, r8
 800bc18:	e7e1      	b.n	800bbde <_printf_float+0x3ce>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	464a      	mov	r2, r9
 800bc1e:	4631      	mov	r1, r6
 800bc20:	4628      	mov	r0, r5
 800bc22:	47b8      	blx	r7
 800bc24:	3001      	adds	r0, #1
 800bc26:	f43f ae3f 	beq.w	800b8a8 <_printf_float+0x98>
 800bc2a:	f108 0801 	add.w	r8, r8, #1
 800bc2e:	68e3      	ldr	r3, [r4, #12]
 800bc30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc32:	1a5b      	subs	r3, r3, r1
 800bc34:	4543      	cmp	r3, r8
 800bc36:	dcf0      	bgt.n	800bc1a <_printf_float+0x40a>
 800bc38:	e6f8      	b.n	800ba2c <_printf_float+0x21c>
 800bc3a:	f04f 0800 	mov.w	r8, #0
 800bc3e:	f104 0919 	add.w	r9, r4, #25
 800bc42:	e7f4      	b.n	800bc2e <_printf_float+0x41e>

0800bc44 <_printf_common>:
 800bc44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc48:	4616      	mov	r6, r2
 800bc4a:	4698      	mov	r8, r3
 800bc4c:	688a      	ldr	r2, [r1, #8]
 800bc4e:	690b      	ldr	r3, [r1, #16]
 800bc50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc54:	4293      	cmp	r3, r2
 800bc56:	bfb8      	it	lt
 800bc58:	4613      	movlt	r3, r2
 800bc5a:	6033      	str	r3, [r6, #0]
 800bc5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc60:	4607      	mov	r7, r0
 800bc62:	460c      	mov	r4, r1
 800bc64:	b10a      	cbz	r2, 800bc6a <_printf_common+0x26>
 800bc66:	3301      	adds	r3, #1
 800bc68:	6033      	str	r3, [r6, #0]
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	0699      	lsls	r1, r3, #26
 800bc6e:	bf42      	ittt	mi
 800bc70:	6833      	ldrmi	r3, [r6, #0]
 800bc72:	3302      	addmi	r3, #2
 800bc74:	6033      	strmi	r3, [r6, #0]
 800bc76:	6825      	ldr	r5, [r4, #0]
 800bc78:	f015 0506 	ands.w	r5, r5, #6
 800bc7c:	d106      	bne.n	800bc8c <_printf_common+0x48>
 800bc7e:	f104 0a19 	add.w	sl, r4, #25
 800bc82:	68e3      	ldr	r3, [r4, #12]
 800bc84:	6832      	ldr	r2, [r6, #0]
 800bc86:	1a9b      	subs	r3, r3, r2
 800bc88:	42ab      	cmp	r3, r5
 800bc8a:	dc26      	bgt.n	800bcda <_printf_common+0x96>
 800bc8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc90:	6822      	ldr	r2, [r4, #0]
 800bc92:	3b00      	subs	r3, #0
 800bc94:	bf18      	it	ne
 800bc96:	2301      	movne	r3, #1
 800bc98:	0692      	lsls	r2, r2, #26
 800bc9a:	d42b      	bmi.n	800bcf4 <_printf_common+0xb0>
 800bc9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bca0:	4641      	mov	r1, r8
 800bca2:	4638      	mov	r0, r7
 800bca4:	47c8      	blx	r9
 800bca6:	3001      	adds	r0, #1
 800bca8:	d01e      	beq.n	800bce8 <_printf_common+0xa4>
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	6922      	ldr	r2, [r4, #16]
 800bcae:	f003 0306 	and.w	r3, r3, #6
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	bf02      	ittt	eq
 800bcb6:	68e5      	ldreq	r5, [r4, #12]
 800bcb8:	6833      	ldreq	r3, [r6, #0]
 800bcba:	1aed      	subeq	r5, r5, r3
 800bcbc:	68a3      	ldr	r3, [r4, #8]
 800bcbe:	bf0c      	ite	eq
 800bcc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcc4:	2500      	movne	r5, #0
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	bfc4      	itt	gt
 800bcca:	1a9b      	subgt	r3, r3, r2
 800bccc:	18ed      	addgt	r5, r5, r3
 800bcce:	2600      	movs	r6, #0
 800bcd0:	341a      	adds	r4, #26
 800bcd2:	42b5      	cmp	r5, r6
 800bcd4:	d11a      	bne.n	800bd0c <_printf_common+0xc8>
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	e008      	b.n	800bcec <_printf_common+0xa8>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	4652      	mov	r2, sl
 800bcde:	4641      	mov	r1, r8
 800bce0:	4638      	mov	r0, r7
 800bce2:	47c8      	blx	r9
 800bce4:	3001      	adds	r0, #1
 800bce6:	d103      	bne.n	800bcf0 <_printf_common+0xac>
 800bce8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf0:	3501      	adds	r5, #1
 800bcf2:	e7c6      	b.n	800bc82 <_printf_common+0x3e>
 800bcf4:	18e1      	adds	r1, r4, r3
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	2030      	movs	r0, #48	@ 0x30
 800bcfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bcfe:	4422      	add	r2, r4
 800bd00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd08:	3302      	adds	r3, #2
 800bd0a:	e7c7      	b.n	800bc9c <_printf_common+0x58>
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	4622      	mov	r2, r4
 800bd10:	4641      	mov	r1, r8
 800bd12:	4638      	mov	r0, r7
 800bd14:	47c8      	blx	r9
 800bd16:	3001      	adds	r0, #1
 800bd18:	d0e6      	beq.n	800bce8 <_printf_common+0xa4>
 800bd1a:	3601      	adds	r6, #1
 800bd1c:	e7d9      	b.n	800bcd2 <_printf_common+0x8e>
	...

0800bd20 <_printf_i>:
 800bd20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd24:	7e0f      	ldrb	r7, [r1, #24]
 800bd26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd28:	2f78      	cmp	r7, #120	@ 0x78
 800bd2a:	4691      	mov	r9, r2
 800bd2c:	4680      	mov	r8, r0
 800bd2e:	460c      	mov	r4, r1
 800bd30:	469a      	mov	sl, r3
 800bd32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd36:	d807      	bhi.n	800bd48 <_printf_i+0x28>
 800bd38:	2f62      	cmp	r7, #98	@ 0x62
 800bd3a:	d80a      	bhi.n	800bd52 <_printf_i+0x32>
 800bd3c:	2f00      	cmp	r7, #0
 800bd3e:	f000 80d1 	beq.w	800bee4 <_printf_i+0x1c4>
 800bd42:	2f58      	cmp	r7, #88	@ 0x58
 800bd44:	f000 80b8 	beq.w	800beb8 <_printf_i+0x198>
 800bd48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd50:	e03a      	b.n	800bdc8 <_printf_i+0xa8>
 800bd52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd56:	2b15      	cmp	r3, #21
 800bd58:	d8f6      	bhi.n	800bd48 <_printf_i+0x28>
 800bd5a:	a101      	add	r1, pc, #4	@ (adr r1, 800bd60 <_printf_i+0x40>)
 800bd5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd60:	0800bdb9 	.word	0x0800bdb9
 800bd64:	0800bdcd 	.word	0x0800bdcd
 800bd68:	0800bd49 	.word	0x0800bd49
 800bd6c:	0800bd49 	.word	0x0800bd49
 800bd70:	0800bd49 	.word	0x0800bd49
 800bd74:	0800bd49 	.word	0x0800bd49
 800bd78:	0800bdcd 	.word	0x0800bdcd
 800bd7c:	0800bd49 	.word	0x0800bd49
 800bd80:	0800bd49 	.word	0x0800bd49
 800bd84:	0800bd49 	.word	0x0800bd49
 800bd88:	0800bd49 	.word	0x0800bd49
 800bd8c:	0800becb 	.word	0x0800becb
 800bd90:	0800bdf7 	.word	0x0800bdf7
 800bd94:	0800be85 	.word	0x0800be85
 800bd98:	0800bd49 	.word	0x0800bd49
 800bd9c:	0800bd49 	.word	0x0800bd49
 800bda0:	0800beed 	.word	0x0800beed
 800bda4:	0800bd49 	.word	0x0800bd49
 800bda8:	0800bdf7 	.word	0x0800bdf7
 800bdac:	0800bd49 	.word	0x0800bd49
 800bdb0:	0800bd49 	.word	0x0800bd49
 800bdb4:	0800be8d 	.word	0x0800be8d
 800bdb8:	6833      	ldr	r3, [r6, #0]
 800bdba:	1d1a      	adds	r2, r3, #4
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6032      	str	r2, [r6, #0]
 800bdc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e09c      	b.n	800bf06 <_printf_i+0x1e6>
 800bdcc:	6833      	ldr	r3, [r6, #0]
 800bdce:	6820      	ldr	r0, [r4, #0]
 800bdd0:	1d19      	adds	r1, r3, #4
 800bdd2:	6031      	str	r1, [r6, #0]
 800bdd4:	0606      	lsls	r6, r0, #24
 800bdd6:	d501      	bpl.n	800bddc <_printf_i+0xbc>
 800bdd8:	681d      	ldr	r5, [r3, #0]
 800bdda:	e003      	b.n	800bde4 <_printf_i+0xc4>
 800bddc:	0645      	lsls	r5, r0, #25
 800bdde:	d5fb      	bpl.n	800bdd8 <_printf_i+0xb8>
 800bde0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bde4:	2d00      	cmp	r5, #0
 800bde6:	da03      	bge.n	800bdf0 <_printf_i+0xd0>
 800bde8:	232d      	movs	r3, #45	@ 0x2d
 800bdea:	426d      	negs	r5, r5
 800bdec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdf0:	4858      	ldr	r0, [pc, #352]	@ (800bf54 <_printf_i+0x234>)
 800bdf2:	230a      	movs	r3, #10
 800bdf4:	e011      	b.n	800be1a <_printf_i+0xfa>
 800bdf6:	6821      	ldr	r1, [r4, #0]
 800bdf8:	6833      	ldr	r3, [r6, #0]
 800bdfa:	0608      	lsls	r0, r1, #24
 800bdfc:	f853 5b04 	ldr.w	r5, [r3], #4
 800be00:	d402      	bmi.n	800be08 <_printf_i+0xe8>
 800be02:	0649      	lsls	r1, r1, #25
 800be04:	bf48      	it	mi
 800be06:	b2ad      	uxthmi	r5, r5
 800be08:	2f6f      	cmp	r7, #111	@ 0x6f
 800be0a:	4852      	ldr	r0, [pc, #328]	@ (800bf54 <_printf_i+0x234>)
 800be0c:	6033      	str	r3, [r6, #0]
 800be0e:	bf14      	ite	ne
 800be10:	230a      	movne	r3, #10
 800be12:	2308      	moveq	r3, #8
 800be14:	2100      	movs	r1, #0
 800be16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be1a:	6866      	ldr	r6, [r4, #4]
 800be1c:	60a6      	str	r6, [r4, #8]
 800be1e:	2e00      	cmp	r6, #0
 800be20:	db05      	blt.n	800be2e <_printf_i+0x10e>
 800be22:	6821      	ldr	r1, [r4, #0]
 800be24:	432e      	orrs	r6, r5
 800be26:	f021 0104 	bic.w	r1, r1, #4
 800be2a:	6021      	str	r1, [r4, #0]
 800be2c:	d04b      	beq.n	800bec6 <_printf_i+0x1a6>
 800be2e:	4616      	mov	r6, r2
 800be30:	fbb5 f1f3 	udiv	r1, r5, r3
 800be34:	fb03 5711 	mls	r7, r3, r1, r5
 800be38:	5dc7      	ldrb	r7, [r0, r7]
 800be3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be3e:	462f      	mov	r7, r5
 800be40:	42bb      	cmp	r3, r7
 800be42:	460d      	mov	r5, r1
 800be44:	d9f4      	bls.n	800be30 <_printf_i+0x110>
 800be46:	2b08      	cmp	r3, #8
 800be48:	d10b      	bne.n	800be62 <_printf_i+0x142>
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	07df      	lsls	r7, r3, #31
 800be4e:	d508      	bpl.n	800be62 <_printf_i+0x142>
 800be50:	6923      	ldr	r3, [r4, #16]
 800be52:	6861      	ldr	r1, [r4, #4]
 800be54:	4299      	cmp	r1, r3
 800be56:	bfde      	ittt	le
 800be58:	2330      	movle	r3, #48	@ 0x30
 800be5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be62:	1b92      	subs	r2, r2, r6
 800be64:	6122      	str	r2, [r4, #16]
 800be66:	f8cd a000 	str.w	sl, [sp]
 800be6a:	464b      	mov	r3, r9
 800be6c:	aa03      	add	r2, sp, #12
 800be6e:	4621      	mov	r1, r4
 800be70:	4640      	mov	r0, r8
 800be72:	f7ff fee7 	bl	800bc44 <_printf_common>
 800be76:	3001      	adds	r0, #1
 800be78:	d14a      	bne.n	800bf10 <_printf_i+0x1f0>
 800be7a:	f04f 30ff 	mov.w	r0, #4294967295
 800be7e:	b004      	add	sp, #16
 800be80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	f043 0320 	orr.w	r3, r3, #32
 800be8a:	6023      	str	r3, [r4, #0]
 800be8c:	4832      	ldr	r0, [pc, #200]	@ (800bf58 <_printf_i+0x238>)
 800be8e:	2778      	movs	r7, #120	@ 0x78
 800be90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	6831      	ldr	r1, [r6, #0]
 800be98:	061f      	lsls	r7, r3, #24
 800be9a:	f851 5b04 	ldr.w	r5, [r1], #4
 800be9e:	d402      	bmi.n	800bea6 <_printf_i+0x186>
 800bea0:	065f      	lsls	r7, r3, #25
 800bea2:	bf48      	it	mi
 800bea4:	b2ad      	uxthmi	r5, r5
 800bea6:	6031      	str	r1, [r6, #0]
 800bea8:	07d9      	lsls	r1, r3, #31
 800beaa:	bf44      	itt	mi
 800beac:	f043 0320 	orrmi.w	r3, r3, #32
 800beb0:	6023      	strmi	r3, [r4, #0]
 800beb2:	b11d      	cbz	r5, 800bebc <_printf_i+0x19c>
 800beb4:	2310      	movs	r3, #16
 800beb6:	e7ad      	b.n	800be14 <_printf_i+0xf4>
 800beb8:	4826      	ldr	r0, [pc, #152]	@ (800bf54 <_printf_i+0x234>)
 800beba:	e7e9      	b.n	800be90 <_printf_i+0x170>
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	f023 0320 	bic.w	r3, r3, #32
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	e7f6      	b.n	800beb4 <_printf_i+0x194>
 800bec6:	4616      	mov	r6, r2
 800bec8:	e7bd      	b.n	800be46 <_printf_i+0x126>
 800beca:	6833      	ldr	r3, [r6, #0]
 800becc:	6825      	ldr	r5, [r4, #0]
 800bece:	6961      	ldr	r1, [r4, #20]
 800bed0:	1d18      	adds	r0, r3, #4
 800bed2:	6030      	str	r0, [r6, #0]
 800bed4:	062e      	lsls	r6, r5, #24
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	d501      	bpl.n	800bede <_printf_i+0x1be>
 800beda:	6019      	str	r1, [r3, #0]
 800bedc:	e002      	b.n	800bee4 <_printf_i+0x1c4>
 800bede:	0668      	lsls	r0, r5, #25
 800bee0:	d5fb      	bpl.n	800beda <_printf_i+0x1ba>
 800bee2:	8019      	strh	r1, [r3, #0]
 800bee4:	2300      	movs	r3, #0
 800bee6:	6123      	str	r3, [r4, #16]
 800bee8:	4616      	mov	r6, r2
 800beea:	e7bc      	b.n	800be66 <_printf_i+0x146>
 800beec:	6833      	ldr	r3, [r6, #0]
 800beee:	1d1a      	adds	r2, r3, #4
 800bef0:	6032      	str	r2, [r6, #0]
 800bef2:	681e      	ldr	r6, [r3, #0]
 800bef4:	6862      	ldr	r2, [r4, #4]
 800bef6:	2100      	movs	r1, #0
 800bef8:	4630      	mov	r0, r6
 800befa:	f7f4 f9f9 	bl	80002f0 <memchr>
 800befe:	b108      	cbz	r0, 800bf04 <_printf_i+0x1e4>
 800bf00:	1b80      	subs	r0, r0, r6
 800bf02:	6060      	str	r0, [r4, #4]
 800bf04:	6863      	ldr	r3, [r4, #4]
 800bf06:	6123      	str	r3, [r4, #16]
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf0e:	e7aa      	b.n	800be66 <_printf_i+0x146>
 800bf10:	6923      	ldr	r3, [r4, #16]
 800bf12:	4632      	mov	r2, r6
 800bf14:	4649      	mov	r1, r9
 800bf16:	4640      	mov	r0, r8
 800bf18:	47d0      	blx	sl
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	d0ad      	beq.n	800be7a <_printf_i+0x15a>
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	079b      	lsls	r3, r3, #30
 800bf22:	d413      	bmi.n	800bf4c <_printf_i+0x22c>
 800bf24:	68e0      	ldr	r0, [r4, #12]
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	4298      	cmp	r0, r3
 800bf2a:	bfb8      	it	lt
 800bf2c:	4618      	movlt	r0, r3
 800bf2e:	e7a6      	b.n	800be7e <_printf_i+0x15e>
 800bf30:	2301      	movs	r3, #1
 800bf32:	4632      	mov	r2, r6
 800bf34:	4649      	mov	r1, r9
 800bf36:	4640      	mov	r0, r8
 800bf38:	47d0      	blx	sl
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	d09d      	beq.n	800be7a <_printf_i+0x15a>
 800bf3e:	3501      	adds	r5, #1
 800bf40:	68e3      	ldr	r3, [r4, #12]
 800bf42:	9903      	ldr	r1, [sp, #12]
 800bf44:	1a5b      	subs	r3, r3, r1
 800bf46:	42ab      	cmp	r3, r5
 800bf48:	dcf2      	bgt.n	800bf30 <_printf_i+0x210>
 800bf4a:	e7eb      	b.n	800bf24 <_printf_i+0x204>
 800bf4c:	2500      	movs	r5, #0
 800bf4e:	f104 0619 	add.w	r6, r4, #25
 800bf52:	e7f5      	b.n	800bf40 <_printf_i+0x220>
 800bf54:	0800ed46 	.word	0x0800ed46
 800bf58:	0800ed57 	.word	0x0800ed57

0800bf5c <std>:
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	b510      	push	{r4, lr}
 800bf60:	4604      	mov	r4, r0
 800bf62:	e9c0 3300 	strd	r3, r3, [r0]
 800bf66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf6a:	6083      	str	r3, [r0, #8]
 800bf6c:	8181      	strh	r1, [r0, #12]
 800bf6e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf70:	81c2      	strh	r2, [r0, #14]
 800bf72:	6183      	str	r3, [r0, #24]
 800bf74:	4619      	mov	r1, r3
 800bf76:	2208      	movs	r2, #8
 800bf78:	305c      	adds	r0, #92	@ 0x5c
 800bf7a:	f000 f8f4 	bl	800c166 <memset>
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb4 <std+0x58>)
 800bf80:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf82:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb8 <std+0x5c>)
 800bf84:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf86:	4b0d      	ldr	r3, [pc, #52]	@ (800bfbc <std+0x60>)
 800bf88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc0 <std+0x64>)
 800bf8c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc4 <std+0x68>)
 800bf90:	6224      	str	r4, [r4, #32]
 800bf92:	429c      	cmp	r4, r3
 800bf94:	d006      	beq.n	800bfa4 <std+0x48>
 800bf96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf9a:	4294      	cmp	r4, r2
 800bf9c:	d002      	beq.n	800bfa4 <std+0x48>
 800bf9e:	33d0      	adds	r3, #208	@ 0xd0
 800bfa0:	429c      	cmp	r4, r3
 800bfa2:	d105      	bne.n	800bfb0 <std+0x54>
 800bfa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfac:	f000 b958 	b.w	800c260 <__retarget_lock_init_recursive>
 800bfb0:	bd10      	pop	{r4, pc}
 800bfb2:	bf00      	nop
 800bfb4:	0800c0e1 	.word	0x0800c0e1
 800bfb8:	0800c103 	.word	0x0800c103
 800bfbc:	0800c13b 	.word	0x0800c13b
 800bfc0:	0800c15f 	.word	0x0800c15f
 800bfc4:	2400157c 	.word	0x2400157c

0800bfc8 <stdio_exit_handler>:
 800bfc8:	4a02      	ldr	r2, [pc, #8]	@ (800bfd4 <stdio_exit_handler+0xc>)
 800bfca:	4903      	ldr	r1, [pc, #12]	@ (800bfd8 <stdio_exit_handler+0x10>)
 800bfcc:	4803      	ldr	r0, [pc, #12]	@ (800bfdc <stdio_exit_handler+0x14>)
 800bfce:	f000 b869 	b.w	800c0a4 <_fwalk_sglue>
 800bfd2:	bf00      	nop
 800bfd4:	2400001c 	.word	0x2400001c
 800bfd8:	0800d851 	.word	0x0800d851
 800bfdc:	2400002c 	.word	0x2400002c

0800bfe0 <cleanup_stdio>:
 800bfe0:	6841      	ldr	r1, [r0, #4]
 800bfe2:	4b0c      	ldr	r3, [pc, #48]	@ (800c014 <cleanup_stdio+0x34>)
 800bfe4:	4299      	cmp	r1, r3
 800bfe6:	b510      	push	{r4, lr}
 800bfe8:	4604      	mov	r4, r0
 800bfea:	d001      	beq.n	800bff0 <cleanup_stdio+0x10>
 800bfec:	f001 fc30 	bl	800d850 <_fflush_r>
 800bff0:	68a1      	ldr	r1, [r4, #8]
 800bff2:	4b09      	ldr	r3, [pc, #36]	@ (800c018 <cleanup_stdio+0x38>)
 800bff4:	4299      	cmp	r1, r3
 800bff6:	d002      	beq.n	800bffe <cleanup_stdio+0x1e>
 800bff8:	4620      	mov	r0, r4
 800bffa:	f001 fc29 	bl	800d850 <_fflush_r>
 800bffe:	68e1      	ldr	r1, [r4, #12]
 800c000:	4b06      	ldr	r3, [pc, #24]	@ (800c01c <cleanup_stdio+0x3c>)
 800c002:	4299      	cmp	r1, r3
 800c004:	d004      	beq.n	800c010 <cleanup_stdio+0x30>
 800c006:	4620      	mov	r0, r4
 800c008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c00c:	f001 bc20 	b.w	800d850 <_fflush_r>
 800c010:	bd10      	pop	{r4, pc}
 800c012:	bf00      	nop
 800c014:	2400157c 	.word	0x2400157c
 800c018:	240015e4 	.word	0x240015e4
 800c01c:	2400164c 	.word	0x2400164c

0800c020 <global_stdio_init.part.0>:
 800c020:	b510      	push	{r4, lr}
 800c022:	4b0b      	ldr	r3, [pc, #44]	@ (800c050 <global_stdio_init.part.0+0x30>)
 800c024:	4c0b      	ldr	r4, [pc, #44]	@ (800c054 <global_stdio_init.part.0+0x34>)
 800c026:	4a0c      	ldr	r2, [pc, #48]	@ (800c058 <global_stdio_init.part.0+0x38>)
 800c028:	601a      	str	r2, [r3, #0]
 800c02a:	4620      	mov	r0, r4
 800c02c:	2200      	movs	r2, #0
 800c02e:	2104      	movs	r1, #4
 800c030:	f7ff ff94 	bl	800bf5c <std>
 800c034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c038:	2201      	movs	r2, #1
 800c03a:	2109      	movs	r1, #9
 800c03c:	f7ff ff8e 	bl	800bf5c <std>
 800c040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c044:	2202      	movs	r2, #2
 800c046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c04a:	2112      	movs	r1, #18
 800c04c:	f7ff bf86 	b.w	800bf5c <std>
 800c050:	240016b4 	.word	0x240016b4
 800c054:	2400157c 	.word	0x2400157c
 800c058:	0800bfc9 	.word	0x0800bfc9

0800c05c <__sfp_lock_acquire>:
 800c05c:	4801      	ldr	r0, [pc, #4]	@ (800c064 <__sfp_lock_acquire+0x8>)
 800c05e:	f000 b900 	b.w	800c262 <__retarget_lock_acquire_recursive>
 800c062:	bf00      	nop
 800c064:	240016bd 	.word	0x240016bd

0800c068 <__sfp_lock_release>:
 800c068:	4801      	ldr	r0, [pc, #4]	@ (800c070 <__sfp_lock_release+0x8>)
 800c06a:	f000 b8fb 	b.w	800c264 <__retarget_lock_release_recursive>
 800c06e:	bf00      	nop
 800c070:	240016bd 	.word	0x240016bd

0800c074 <__sinit>:
 800c074:	b510      	push	{r4, lr}
 800c076:	4604      	mov	r4, r0
 800c078:	f7ff fff0 	bl	800c05c <__sfp_lock_acquire>
 800c07c:	6a23      	ldr	r3, [r4, #32]
 800c07e:	b11b      	cbz	r3, 800c088 <__sinit+0x14>
 800c080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c084:	f7ff bff0 	b.w	800c068 <__sfp_lock_release>
 800c088:	4b04      	ldr	r3, [pc, #16]	@ (800c09c <__sinit+0x28>)
 800c08a:	6223      	str	r3, [r4, #32]
 800c08c:	4b04      	ldr	r3, [pc, #16]	@ (800c0a0 <__sinit+0x2c>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1f5      	bne.n	800c080 <__sinit+0xc>
 800c094:	f7ff ffc4 	bl	800c020 <global_stdio_init.part.0>
 800c098:	e7f2      	b.n	800c080 <__sinit+0xc>
 800c09a:	bf00      	nop
 800c09c:	0800bfe1 	.word	0x0800bfe1
 800c0a0:	240016b4 	.word	0x240016b4

0800c0a4 <_fwalk_sglue>:
 800c0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a8:	4607      	mov	r7, r0
 800c0aa:	4688      	mov	r8, r1
 800c0ac:	4614      	mov	r4, r2
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0b4:	f1b9 0901 	subs.w	r9, r9, #1
 800c0b8:	d505      	bpl.n	800c0c6 <_fwalk_sglue+0x22>
 800c0ba:	6824      	ldr	r4, [r4, #0]
 800c0bc:	2c00      	cmp	r4, #0
 800c0be:	d1f7      	bne.n	800c0b0 <_fwalk_sglue+0xc>
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c6:	89ab      	ldrh	r3, [r5, #12]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d907      	bls.n	800c0dc <_fwalk_sglue+0x38>
 800c0cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	d003      	beq.n	800c0dc <_fwalk_sglue+0x38>
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	4638      	mov	r0, r7
 800c0d8:	47c0      	blx	r8
 800c0da:	4306      	orrs	r6, r0
 800c0dc:	3568      	adds	r5, #104	@ 0x68
 800c0de:	e7e9      	b.n	800c0b4 <_fwalk_sglue+0x10>

0800c0e0 <__sread>:
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e8:	f000 f86c 	bl	800c1c4 <_read_r>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	bfab      	itete	ge
 800c0f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c0f4:	181b      	addge	r3, r3, r0
 800c0f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c0fa:	bfac      	ite	ge
 800c0fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c0fe:	81a3      	strhlt	r3, [r4, #12]
 800c100:	bd10      	pop	{r4, pc}

0800c102 <__swrite>:
 800c102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c106:	461f      	mov	r7, r3
 800c108:	898b      	ldrh	r3, [r1, #12]
 800c10a:	05db      	lsls	r3, r3, #23
 800c10c:	4605      	mov	r5, r0
 800c10e:	460c      	mov	r4, r1
 800c110:	4616      	mov	r6, r2
 800c112:	d505      	bpl.n	800c120 <__swrite+0x1e>
 800c114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c118:	2302      	movs	r3, #2
 800c11a:	2200      	movs	r2, #0
 800c11c:	f000 f840 	bl	800c1a0 <_lseek_r>
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	4632      	mov	r2, r6
 800c12e:	463b      	mov	r3, r7
 800c130:	4628      	mov	r0, r5
 800c132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c136:	f000 b857 	b.w	800c1e8 <_write_r>

0800c13a <__sseek>:
 800c13a:	b510      	push	{r4, lr}
 800c13c:	460c      	mov	r4, r1
 800c13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c142:	f000 f82d 	bl	800c1a0 <_lseek_r>
 800c146:	1c43      	adds	r3, r0, #1
 800c148:	89a3      	ldrh	r3, [r4, #12]
 800c14a:	bf15      	itete	ne
 800c14c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c14e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c152:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c156:	81a3      	strheq	r3, [r4, #12]
 800c158:	bf18      	it	ne
 800c15a:	81a3      	strhne	r3, [r4, #12]
 800c15c:	bd10      	pop	{r4, pc}

0800c15e <__sclose>:
 800c15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c162:	f000 b80d 	b.w	800c180 <_close_r>

0800c166 <memset>:
 800c166:	4402      	add	r2, r0
 800c168:	4603      	mov	r3, r0
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d100      	bne.n	800c170 <memset+0xa>
 800c16e:	4770      	bx	lr
 800c170:	f803 1b01 	strb.w	r1, [r3], #1
 800c174:	e7f9      	b.n	800c16a <memset+0x4>
	...

0800c178 <_localeconv_r>:
 800c178:	4800      	ldr	r0, [pc, #0]	@ (800c17c <_localeconv_r+0x4>)
 800c17a:	4770      	bx	lr
 800c17c:	24000168 	.word	0x24000168

0800c180 <_close_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4d06      	ldr	r5, [pc, #24]	@ (800c19c <_close_r+0x1c>)
 800c184:	2300      	movs	r3, #0
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	f7f5 fb2a 	bl	80017e4 <_close>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <_close_r+0x1a>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	b103      	cbz	r3, 800c19a <_close_r+0x1a>
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	240016b8 	.word	0x240016b8

0800c1a0 <_lseek_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4d07      	ldr	r5, [pc, #28]	@ (800c1c0 <_lseek_r+0x20>)
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	4608      	mov	r0, r1
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	602a      	str	r2, [r5, #0]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f7f5 fb3f 	bl	8001832 <_lseek>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d102      	bne.n	800c1be <_lseek_r+0x1e>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	b103      	cbz	r3, 800c1be <_lseek_r+0x1e>
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	240016b8 	.word	0x240016b8

0800c1c4 <_read_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d07      	ldr	r5, [pc, #28]	@ (800c1e4 <_read_r+0x20>)
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	4608      	mov	r0, r1
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	602a      	str	r2, [r5, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f7f5 facd 	bl	8001772 <_read>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_read_r+0x1e>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_read_r+0x1e>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	240016b8 	.word	0x240016b8

0800c1e8 <_write_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d07      	ldr	r5, [pc, #28]	@ (800c208 <_write_r+0x20>)
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	4608      	mov	r0, r1
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	602a      	str	r2, [r5, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	f7f5 fad8 	bl	80017ac <_write>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d102      	bne.n	800c206 <_write_r+0x1e>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	b103      	cbz	r3, 800c206 <_write_r+0x1e>
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	240016b8 	.word	0x240016b8

0800c20c <__errno>:
 800c20c:	4b01      	ldr	r3, [pc, #4]	@ (800c214 <__errno+0x8>)
 800c20e:	6818      	ldr	r0, [r3, #0]
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	24000028 	.word	0x24000028

0800c218 <__libc_init_array>:
 800c218:	b570      	push	{r4, r5, r6, lr}
 800c21a:	4d0d      	ldr	r5, [pc, #52]	@ (800c250 <__libc_init_array+0x38>)
 800c21c:	4c0d      	ldr	r4, [pc, #52]	@ (800c254 <__libc_init_array+0x3c>)
 800c21e:	1b64      	subs	r4, r4, r5
 800c220:	10a4      	asrs	r4, r4, #2
 800c222:	2600      	movs	r6, #0
 800c224:	42a6      	cmp	r6, r4
 800c226:	d109      	bne.n	800c23c <__libc_init_array+0x24>
 800c228:	4d0b      	ldr	r5, [pc, #44]	@ (800c258 <__libc_init_array+0x40>)
 800c22a:	4c0c      	ldr	r4, [pc, #48]	@ (800c25c <__libc_init_array+0x44>)
 800c22c:	f001 fe50 	bl	800ded0 <_init>
 800c230:	1b64      	subs	r4, r4, r5
 800c232:	10a4      	asrs	r4, r4, #2
 800c234:	2600      	movs	r6, #0
 800c236:	42a6      	cmp	r6, r4
 800c238:	d105      	bne.n	800c246 <__libc_init_array+0x2e>
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c240:	4798      	blx	r3
 800c242:	3601      	adds	r6, #1
 800c244:	e7ee      	b.n	800c224 <__libc_init_array+0xc>
 800c246:	f855 3b04 	ldr.w	r3, [r5], #4
 800c24a:	4798      	blx	r3
 800c24c:	3601      	adds	r6, #1
 800c24e:	e7f2      	b.n	800c236 <__libc_init_array+0x1e>
 800c250:	0800f0b4 	.word	0x0800f0b4
 800c254:	0800f0b4 	.word	0x0800f0b4
 800c258:	0800f0b4 	.word	0x0800f0b4
 800c25c:	0800f0b8 	.word	0x0800f0b8

0800c260 <__retarget_lock_init_recursive>:
 800c260:	4770      	bx	lr

0800c262 <__retarget_lock_acquire_recursive>:
 800c262:	4770      	bx	lr

0800c264 <__retarget_lock_release_recursive>:
 800c264:	4770      	bx	lr

0800c266 <memcpy>:
 800c266:	440a      	add	r2, r1
 800c268:	4291      	cmp	r1, r2
 800c26a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c26e:	d100      	bne.n	800c272 <memcpy+0xc>
 800c270:	4770      	bx	lr
 800c272:	b510      	push	{r4, lr}
 800c274:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c27c:	4291      	cmp	r1, r2
 800c27e:	d1f9      	bne.n	800c274 <memcpy+0xe>
 800c280:	bd10      	pop	{r4, pc}

0800c282 <quorem>:
 800c282:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c286:	6903      	ldr	r3, [r0, #16]
 800c288:	690c      	ldr	r4, [r1, #16]
 800c28a:	42a3      	cmp	r3, r4
 800c28c:	4607      	mov	r7, r0
 800c28e:	db7e      	blt.n	800c38e <quorem+0x10c>
 800c290:	3c01      	subs	r4, #1
 800c292:	f101 0814 	add.w	r8, r1, #20
 800c296:	00a3      	lsls	r3, r4, #2
 800c298:	f100 0514 	add.w	r5, r0, #20
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2a2:	9301      	str	r3, [sp, #4]
 800c2a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2b8:	d32e      	bcc.n	800c318 <quorem+0x96>
 800c2ba:	f04f 0a00 	mov.w	sl, #0
 800c2be:	46c4      	mov	ip, r8
 800c2c0:	46ae      	mov	lr, r5
 800c2c2:	46d3      	mov	fp, sl
 800c2c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2c8:	b298      	uxth	r0, r3
 800c2ca:	fb06 a000 	mla	r0, r6, r0, sl
 800c2ce:	0c02      	lsrs	r2, r0, #16
 800c2d0:	0c1b      	lsrs	r3, r3, #16
 800c2d2:	fb06 2303 	mla	r3, r6, r3, r2
 800c2d6:	f8de 2000 	ldr.w	r2, [lr]
 800c2da:	b280      	uxth	r0, r0
 800c2dc:	b292      	uxth	r2, r2
 800c2de:	1a12      	subs	r2, r2, r0
 800c2e0:	445a      	add	r2, fp
 800c2e2:	f8de 0000 	ldr.w	r0, [lr]
 800c2e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c2f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c2f4:	b292      	uxth	r2, r2
 800c2f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c2fa:	45e1      	cmp	r9, ip
 800c2fc:	f84e 2b04 	str.w	r2, [lr], #4
 800c300:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c304:	d2de      	bcs.n	800c2c4 <quorem+0x42>
 800c306:	9b00      	ldr	r3, [sp, #0]
 800c308:	58eb      	ldr	r3, [r5, r3]
 800c30a:	b92b      	cbnz	r3, 800c318 <quorem+0x96>
 800c30c:	9b01      	ldr	r3, [sp, #4]
 800c30e:	3b04      	subs	r3, #4
 800c310:	429d      	cmp	r5, r3
 800c312:	461a      	mov	r2, r3
 800c314:	d32f      	bcc.n	800c376 <quorem+0xf4>
 800c316:	613c      	str	r4, [r7, #16]
 800c318:	4638      	mov	r0, r7
 800c31a:	f001 f90d 	bl	800d538 <__mcmp>
 800c31e:	2800      	cmp	r0, #0
 800c320:	db25      	blt.n	800c36e <quorem+0xec>
 800c322:	4629      	mov	r1, r5
 800c324:	2000      	movs	r0, #0
 800c326:	f858 2b04 	ldr.w	r2, [r8], #4
 800c32a:	f8d1 c000 	ldr.w	ip, [r1]
 800c32e:	fa1f fe82 	uxth.w	lr, r2
 800c332:	fa1f f38c 	uxth.w	r3, ip
 800c336:	eba3 030e 	sub.w	r3, r3, lr
 800c33a:	4403      	add	r3, r0
 800c33c:	0c12      	lsrs	r2, r2, #16
 800c33e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c342:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c346:	b29b      	uxth	r3, r3
 800c348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c34c:	45c1      	cmp	r9, r8
 800c34e:	f841 3b04 	str.w	r3, [r1], #4
 800c352:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c356:	d2e6      	bcs.n	800c326 <quorem+0xa4>
 800c358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c35c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c360:	b922      	cbnz	r2, 800c36c <quorem+0xea>
 800c362:	3b04      	subs	r3, #4
 800c364:	429d      	cmp	r5, r3
 800c366:	461a      	mov	r2, r3
 800c368:	d30b      	bcc.n	800c382 <quorem+0x100>
 800c36a:	613c      	str	r4, [r7, #16]
 800c36c:	3601      	adds	r6, #1
 800c36e:	4630      	mov	r0, r6
 800c370:	b003      	add	sp, #12
 800c372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c376:	6812      	ldr	r2, [r2, #0]
 800c378:	3b04      	subs	r3, #4
 800c37a:	2a00      	cmp	r2, #0
 800c37c:	d1cb      	bne.n	800c316 <quorem+0x94>
 800c37e:	3c01      	subs	r4, #1
 800c380:	e7c6      	b.n	800c310 <quorem+0x8e>
 800c382:	6812      	ldr	r2, [r2, #0]
 800c384:	3b04      	subs	r3, #4
 800c386:	2a00      	cmp	r2, #0
 800c388:	d1ef      	bne.n	800c36a <quorem+0xe8>
 800c38a:	3c01      	subs	r4, #1
 800c38c:	e7ea      	b.n	800c364 <quorem+0xe2>
 800c38e:	2000      	movs	r0, #0
 800c390:	e7ee      	b.n	800c370 <quorem+0xee>
 800c392:	0000      	movs	r0, r0
 800c394:	0000      	movs	r0, r0
	...

0800c398 <_dtoa_r>:
 800c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39c:	ed2d 8b02 	vpush	{d8}
 800c3a0:	69c7      	ldr	r7, [r0, #28]
 800c3a2:	b091      	sub	sp, #68	@ 0x44
 800c3a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c3a8:	ec55 4b10 	vmov	r4, r5, d0
 800c3ac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c3ae:	9107      	str	r1, [sp, #28]
 800c3b0:	4681      	mov	r9, r0
 800c3b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3b4:	930d      	str	r3, [sp, #52]	@ 0x34
 800c3b6:	b97f      	cbnz	r7, 800c3d8 <_dtoa_r+0x40>
 800c3b8:	2010      	movs	r0, #16
 800c3ba:	f000 fd95 	bl	800cee8 <malloc>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	f8c9 001c 	str.w	r0, [r9, #28]
 800c3c4:	b920      	cbnz	r0, 800c3d0 <_dtoa_r+0x38>
 800c3c6:	4ba0      	ldr	r3, [pc, #640]	@ (800c648 <_dtoa_r+0x2b0>)
 800c3c8:	21ef      	movs	r1, #239	@ 0xef
 800c3ca:	48a0      	ldr	r0, [pc, #640]	@ (800c64c <_dtoa_r+0x2b4>)
 800c3cc:	f001 fa78 	bl	800d8c0 <__assert_func>
 800c3d0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c3d4:	6007      	str	r7, [r0, #0]
 800c3d6:	60c7      	str	r7, [r0, #12]
 800c3d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c3dc:	6819      	ldr	r1, [r3, #0]
 800c3de:	b159      	cbz	r1, 800c3f8 <_dtoa_r+0x60>
 800c3e0:	685a      	ldr	r2, [r3, #4]
 800c3e2:	604a      	str	r2, [r1, #4]
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	4093      	lsls	r3, r2
 800c3e8:	608b      	str	r3, [r1, #8]
 800c3ea:	4648      	mov	r0, r9
 800c3ec:	f000 fe72 	bl	800d0d4 <_Bfree>
 800c3f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	1e2b      	subs	r3, r5, #0
 800c3fa:	bfbb      	ittet	lt
 800c3fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c400:	9303      	strlt	r3, [sp, #12]
 800c402:	2300      	movge	r3, #0
 800c404:	2201      	movlt	r2, #1
 800c406:	bfac      	ite	ge
 800c408:	6033      	strge	r3, [r6, #0]
 800c40a:	6032      	strlt	r2, [r6, #0]
 800c40c:	4b90      	ldr	r3, [pc, #576]	@ (800c650 <_dtoa_r+0x2b8>)
 800c40e:	9e03      	ldr	r6, [sp, #12]
 800c410:	43b3      	bics	r3, r6
 800c412:	d110      	bne.n	800c436 <_dtoa_r+0x9e>
 800c414:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c416:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c420:	4323      	orrs	r3, r4
 800c422:	f000 84e6 	beq.w	800cdf2 <_dtoa_r+0xa5a>
 800c426:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c428:	4f8a      	ldr	r7, [pc, #552]	@ (800c654 <_dtoa_r+0x2bc>)
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 84e8 	beq.w	800ce00 <_dtoa_r+0xa68>
 800c430:	1cfb      	adds	r3, r7, #3
 800c432:	f000 bce3 	b.w	800cdfc <_dtoa_r+0xa64>
 800c436:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c43a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c442:	d10a      	bne.n	800c45a <_dtoa_r+0xc2>
 800c444:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c446:	2301      	movs	r3, #1
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c44c:	b113      	cbz	r3, 800c454 <_dtoa_r+0xbc>
 800c44e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c450:	4b81      	ldr	r3, [pc, #516]	@ (800c658 <_dtoa_r+0x2c0>)
 800c452:	6013      	str	r3, [r2, #0]
 800c454:	4f81      	ldr	r7, [pc, #516]	@ (800c65c <_dtoa_r+0x2c4>)
 800c456:	f000 bcd3 	b.w	800ce00 <_dtoa_r+0xa68>
 800c45a:	aa0e      	add	r2, sp, #56	@ 0x38
 800c45c:	a90f      	add	r1, sp, #60	@ 0x3c
 800c45e:	4648      	mov	r0, r9
 800c460:	eeb0 0b48 	vmov.f64	d0, d8
 800c464:	f001 f918 	bl	800d698 <__d2b>
 800c468:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c46c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c46e:	9001      	str	r0, [sp, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d045      	beq.n	800c500 <_dtoa_r+0x168>
 800c474:	eeb0 7b48 	vmov.f64	d7, d8
 800c478:	ee18 1a90 	vmov	r1, s17
 800c47c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c480:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c484:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c488:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c48c:	2500      	movs	r5, #0
 800c48e:	ee07 1a90 	vmov	s15, r1
 800c492:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c496:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c630 <_dtoa_r+0x298>
 800c49a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c49e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c638 <_dtoa_r+0x2a0>
 800c4a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c4a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c640 <_dtoa_r+0x2a8>
 800c4aa:	ee07 3a90 	vmov	s15, r3
 800c4ae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c4b2:	eeb0 7b46 	vmov.f64	d7, d6
 800c4b6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c4ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c4be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c6:	ee16 8a90 	vmov	r8, s13
 800c4ca:	d508      	bpl.n	800c4de <_dtoa_r+0x146>
 800c4cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c4d0:	eeb4 6b47 	vcmp.f64	d6, d7
 800c4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d8:	bf18      	it	ne
 800c4da:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c4de:	f1b8 0f16 	cmp.w	r8, #22
 800c4e2:	d82b      	bhi.n	800c53c <_dtoa_r+0x1a4>
 800c4e4:	495e      	ldr	r1, [pc, #376]	@ (800c660 <_dtoa_r+0x2c8>)
 800c4e6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c4ea:	ed91 7b00 	vldr	d7, [r1]
 800c4ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f6:	d501      	bpl.n	800c4fc <_dtoa_r+0x164>
 800c4f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	e01e      	b.n	800c53e <_dtoa_r+0x1a6>
 800c500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c502:	4413      	add	r3, r2
 800c504:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c508:	2920      	cmp	r1, #32
 800c50a:	bfc1      	itttt	gt
 800c50c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c510:	408e      	lslgt	r6, r1
 800c512:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c516:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c51a:	bfd6      	itet	le
 800c51c:	f1c1 0120 	rsble	r1, r1, #32
 800c520:	4331      	orrgt	r1, r6
 800c522:	fa04 f101 	lslle.w	r1, r4, r1
 800c526:	ee07 1a90 	vmov	s15, r1
 800c52a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c52e:	3b01      	subs	r3, #1
 800c530:	ee17 1a90 	vmov	r1, s15
 800c534:	2501      	movs	r5, #1
 800c536:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c53a:	e7a8      	b.n	800c48e <_dtoa_r+0xf6>
 800c53c:	2101      	movs	r1, #1
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	1e53      	subs	r3, r2, #1
 800c542:	9306      	str	r3, [sp, #24]
 800c544:	bf45      	ittet	mi
 800c546:	f1c2 0301 	rsbmi	r3, r2, #1
 800c54a:	9304      	strmi	r3, [sp, #16]
 800c54c:	2300      	movpl	r3, #0
 800c54e:	2300      	movmi	r3, #0
 800c550:	bf4c      	ite	mi
 800c552:	9306      	strmi	r3, [sp, #24]
 800c554:	9304      	strpl	r3, [sp, #16]
 800c556:	f1b8 0f00 	cmp.w	r8, #0
 800c55a:	910c      	str	r1, [sp, #48]	@ 0x30
 800c55c:	db18      	blt.n	800c590 <_dtoa_r+0x1f8>
 800c55e:	9b06      	ldr	r3, [sp, #24]
 800c560:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c564:	4443      	add	r3, r8
 800c566:	9306      	str	r3, [sp, #24]
 800c568:	2300      	movs	r3, #0
 800c56a:	9a07      	ldr	r2, [sp, #28]
 800c56c:	2a09      	cmp	r2, #9
 800c56e:	d845      	bhi.n	800c5fc <_dtoa_r+0x264>
 800c570:	2a05      	cmp	r2, #5
 800c572:	bfc4      	itt	gt
 800c574:	3a04      	subgt	r2, #4
 800c576:	9207      	strgt	r2, [sp, #28]
 800c578:	9a07      	ldr	r2, [sp, #28]
 800c57a:	f1a2 0202 	sub.w	r2, r2, #2
 800c57e:	bfcc      	ite	gt
 800c580:	2400      	movgt	r4, #0
 800c582:	2401      	movle	r4, #1
 800c584:	2a03      	cmp	r2, #3
 800c586:	d844      	bhi.n	800c612 <_dtoa_r+0x27a>
 800c588:	e8df f002 	tbb	[pc, r2]
 800c58c:	0b173634 	.word	0x0b173634
 800c590:	9b04      	ldr	r3, [sp, #16]
 800c592:	2200      	movs	r2, #0
 800c594:	eba3 0308 	sub.w	r3, r3, r8
 800c598:	9304      	str	r3, [sp, #16]
 800c59a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c59c:	f1c8 0300 	rsb	r3, r8, #0
 800c5a0:	e7e3      	b.n	800c56a <_dtoa_r+0x1d2>
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	9208      	str	r2, [sp, #32]
 800c5a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5a8:	eb08 0b02 	add.w	fp, r8, r2
 800c5ac:	f10b 0a01 	add.w	sl, fp, #1
 800c5b0:	4652      	mov	r2, sl
 800c5b2:	2a01      	cmp	r2, #1
 800c5b4:	bfb8      	it	lt
 800c5b6:	2201      	movlt	r2, #1
 800c5b8:	e006      	b.n	800c5c8 <_dtoa_r+0x230>
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	9208      	str	r2, [sp, #32]
 800c5be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5c0:	2a00      	cmp	r2, #0
 800c5c2:	dd29      	ble.n	800c618 <_dtoa_r+0x280>
 800c5c4:	4693      	mov	fp, r2
 800c5c6:	4692      	mov	sl, r2
 800c5c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	2004      	movs	r0, #4
 800c5d0:	f100 0614 	add.w	r6, r0, #20
 800c5d4:	4296      	cmp	r6, r2
 800c5d6:	d926      	bls.n	800c626 <_dtoa_r+0x28e>
 800c5d8:	6079      	str	r1, [r7, #4]
 800c5da:	4648      	mov	r0, r9
 800c5dc:	9305      	str	r3, [sp, #20]
 800c5de:	f000 fd39 	bl	800d054 <_Balloc>
 800c5e2:	9b05      	ldr	r3, [sp, #20]
 800c5e4:	4607      	mov	r7, r0
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d13e      	bne.n	800c668 <_dtoa_r+0x2d0>
 800c5ea:	4b1e      	ldr	r3, [pc, #120]	@ (800c664 <_dtoa_r+0x2cc>)
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800c5f2:	e6ea      	b.n	800c3ca <_dtoa_r+0x32>
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	e7e1      	b.n	800c5bc <_dtoa_r+0x224>
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	e7d3      	b.n	800c5a4 <_dtoa_r+0x20c>
 800c5fc:	2401      	movs	r4, #1
 800c5fe:	2200      	movs	r2, #0
 800c600:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c604:	f04f 3bff 	mov.w	fp, #4294967295
 800c608:	2100      	movs	r1, #0
 800c60a:	46da      	mov	sl, fp
 800c60c:	2212      	movs	r2, #18
 800c60e:	9109      	str	r1, [sp, #36]	@ 0x24
 800c610:	e7da      	b.n	800c5c8 <_dtoa_r+0x230>
 800c612:	2201      	movs	r2, #1
 800c614:	9208      	str	r2, [sp, #32]
 800c616:	e7f5      	b.n	800c604 <_dtoa_r+0x26c>
 800c618:	f04f 0b01 	mov.w	fp, #1
 800c61c:	46da      	mov	sl, fp
 800c61e:	465a      	mov	r2, fp
 800c620:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c624:	e7d0      	b.n	800c5c8 <_dtoa_r+0x230>
 800c626:	3101      	adds	r1, #1
 800c628:	0040      	lsls	r0, r0, #1
 800c62a:	e7d1      	b.n	800c5d0 <_dtoa_r+0x238>
 800c62c:	f3af 8000 	nop.w
 800c630:	636f4361 	.word	0x636f4361
 800c634:	3fd287a7 	.word	0x3fd287a7
 800c638:	8b60c8b3 	.word	0x8b60c8b3
 800c63c:	3fc68a28 	.word	0x3fc68a28
 800c640:	509f79fb 	.word	0x509f79fb
 800c644:	3fd34413 	.word	0x3fd34413
 800c648:	0800ed75 	.word	0x0800ed75
 800c64c:	0800ed8c 	.word	0x0800ed8c
 800c650:	7ff00000 	.word	0x7ff00000
 800c654:	0800ed71 	.word	0x0800ed71
 800c658:	0800ed45 	.word	0x0800ed45
 800c65c:	0800ed44 	.word	0x0800ed44
 800c660:	0800eee0 	.word	0x0800eee0
 800c664:	0800ede4 	.word	0x0800ede4
 800c668:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c66c:	f1ba 0f0e 	cmp.w	sl, #14
 800c670:	6010      	str	r0, [r2, #0]
 800c672:	d86e      	bhi.n	800c752 <_dtoa_r+0x3ba>
 800c674:	2c00      	cmp	r4, #0
 800c676:	d06c      	beq.n	800c752 <_dtoa_r+0x3ba>
 800c678:	f1b8 0f00 	cmp.w	r8, #0
 800c67c:	f340 80b4 	ble.w	800c7e8 <_dtoa_r+0x450>
 800c680:	4ac8      	ldr	r2, [pc, #800]	@ (800c9a4 <_dtoa_r+0x60c>)
 800c682:	f008 010f 	and.w	r1, r8, #15
 800c686:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c68a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c68e:	ed92 7b00 	vldr	d7, [r2]
 800c692:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c696:	f000 809b 	beq.w	800c7d0 <_dtoa_r+0x438>
 800c69a:	4ac3      	ldr	r2, [pc, #780]	@ (800c9a8 <_dtoa_r+0x610>)
 800c69c:	ed92 6b08 	vldr	d6, [r2, #32]
 800c6a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c6a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c6a8:	f001 010f 	and.w	r1, r1, #15
 800c6ac:	2203      	movs	r2, #3
 800c6ae:	48be      	ldr	r0, [pc, #760]	@ (800c9a8 <_dtoa_r+0x610>)
 800c6b0:	2900      	cmp	r1, #0
 800c6b2:	f040 808f 	bne.w	800c7d4 <_dtoa_r+0x43c>
 800c6b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c6ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c6be:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c6c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c6c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6c8:	2900      	cmp	r1, #0
 800c6ca:	f000 80b3 	beq.w	800c834 <_dtoa_r+0x49c>
 800c6ce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c6d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6da:	f140 80ab 	bpl.w	800c834 <_dtoa_r+0x49c>
 800c6de:	f1ba 0f00 	cmp.w	sl, #0
 800c6e2:	f000 80a7 	beq.w	800c834 <_dtoa_r+0x49c>
 800c6e6:	f1bb 0f00 	cmp.w	fp, #0
 800c6ea:	dd30      	ble.n	800c74e <_dtoa_r+0x3b6>
 800c6ec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c6f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c6f8:	f108 31ff 	add.w	r1, r8, #4294967295
 800c6fc:	9105      	str	r1, [sp, #20]
 800c6fe:	3201      	adds	r2, #1
 800c700:	465c      	mov	r4, fp
 800c702:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c706:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c70a:	ee07 2a90 	vmov	s15, r2
 800c70e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c712:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c716:	ee15 2a90 	vmov	r2, s11
 800c71a:	ec51 0b15 	vmov	r0, r1, d5
 800c71e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c722:	2c00      	cmp	r4, #0
 800c724:	f040 808a 	bne.w	800c83c <_dtoa_r+0x4a4>
 800c728:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c72c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c730:	ec41 0b17 	vmov	d7, r0, r1
 800c734:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73c:	f300 826a 	bgt.w	800cc14 <_dtoa_r+0x87c>
 800c740:	eeb1 7b47 	vneg.f64	d7, d7
 800c744:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c74c:	d423      	bmi.n	800c796 <_dtoa_r+0x3fe>
 800c74e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c752:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c754:	2a00      	cmp	r2, #0
 800c756:	f2c0 8129 	blt.w	800c9ac <_dtoa_r+0x614>
 800c75a:	f1b8 0f0e 	cmp.w	r8, #14
 800c75e:	f300 8125 	bgt.w	800c9ac <_dtoa_r+0x614>
 800c762:	4b90      	ldr	r3, [pc, #576]	@ (800c9a4 <_dtoa_r+0x60c>)
 800c764:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c768:	ed93 6b00 	vldr	d6, [r3]
 800c76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f280 80c8 	bge.w	800c904 <_dtoa_r+0x56c>
 800c774:	f1ba 0f00 	cmp.w	sl, #0
 800c778:	f300 80c4 	bgt.w	800c904 <_dtoa_r+0x56c>
 800c77c:	d10b      	bne.n	800c796 <_dtoa_r+0x3fe>
 800c77e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c782:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c786:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c78a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c792:	f2c0 823c 	blt.w	800cc0e <_dtoa_r+0x876>
 800c796:	2400      	movs	r4, #0
 800c798:	4625      	mov	r5, r4
 800c79a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c79c:	43db      	mvns	r3, r3
 800c79e:	9305      	str	r3, [sp, #20]
 800c7a0:	463e      	mov	r6, r7
 800c7a2:	f04f 0800 	mov.w	r8, #0
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	4648      	mov	r0, r9
 800c7aa:	f000 fc93 	bl	800d0d4 <_Bfree>
 800c7ae:	2d00      	cmp	r5, #0
 800c7b0:	f000 80a2 	beq.w	800c8f8 <_dtoa_r+0x560>
 800c7b4:	f1b8 0f00 	cmp.w	r8, #0
 800c7b8:	d005      	beq.n	800c7c6 <_dtoa_r+0x42e>
 800c7ba:	45a8      	cmp	r8, r5
 800c7bc:	d003      	beq.n	800c7c6 <_dtoa_r+0x42e>
 800c7be:	4641      	mov	r1, r8
 800c7c0:	4648      	mov	r0, r9
 800c7c2:	f000 fc87 	bl	800d0d4 <_Bfree>
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	4648      	mov	r0, r9
 800c7ca:	f000 fc83 	bl	800d0d4 <_Bfree>
 800c7ce:	e093      	b.n	800c8f8 <_dtoa_r+0x560>
 800c7d0:	2202      	movs	r2, #2
 800c7d2:	e76c      	b.n	800c6ae <_dtoa_r+0x316>
 800c7d4:	07cc      	lsls	r4, r1, #31
 800c7d6:	d504      	bpl.n	800c7e2 <_dtoa_r+0x44a>
 800c7d8:	ed90 6b00 	vldr	d6, [r0]
 800c7dc:	3201      	adds	r2, #1
 800c7de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c7e2:	1049      	asrs	r1, r1, #1
 800c7e4:	3008      	adds	r0, #8
 800c7e6:	e763      	b.n	800c6b0 <_dtoa_r+0x318>
 800c7e8:	d022      	beq.n	800c830 <_dtoa_r+0x498>
 800c7ea:	f1c8 0100 	rsb	r1, r8, #0
 800c7ee:	4a6d      	ldr	r2, [pc, #436]	@ (800c9a4 <_dtoa_r+0x60c>)
 800c7f0:	f001 000f 	and.w	r0, r1, #15
 800c7f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c7f8:	ed92 7b00 	vldr	d7, [r2]
 800c7fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c800:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c804:	4868      	ldr	r0, [pc, #416]	@ (800c9a8 <_dtoa_r+0x610>)
 800c806:	1109      	asrs	r1, r1, #4
 800c808:	2400      	movs	r4, #0
 800c80a:	2202      	movs	r2, #2
 800c80c:	b929      	cbnz	r1, 800c81a <_dtoa_r+0x482>
 800c80e:	2c00      	cmp	r4, #0
 800c810:	f43f af57 	beq.w	800c6c2 <_dtoa_r+0x32a>
 800c814:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c818:	e753      	b.n	800c6c2 <_dtoa_r+0x32a>
 800c81a:	07ce      	lsls	r6, r1, #31
 800c81c:	d505      	bpl.n	800c82a <_dtoa_r+0x492>
 800c81e:	ed90 6b00 	vldr	d6, [r0]
 800c822:	3201      	adds	r2, #1
 800c824:	2401      	movs	r4, #1
 800c826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c82a:	1049      	asrs	r1, r1, #1
 800c82c:	3008      	adds	r0, #8
 800c82e:	e7ed      	b.n	800c80c <_dtoa_r+0x474>
 800c830:	2202      	movs	r2, #2
 800c832:	e746      	b.n	800c6c2 <_dtoa_r+0x32a>
 800c834:	f8cd 8014 	str.w	r8, [sp, #20]
 800c838:	4654      	mov	r4, sl
 800c83a:	e762      	b.n	800c702 <_dtoa_r+0x36a>
 800c83c:	4a59      	ldr	r2, [pc, #356]	@ (800c9a4 <_dtoa_r+0x60c>)
 800c83e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c842:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c846:	9a08      	ldr	r2, [sp, #32]
 800c848:	ec41 0b17 	vmov	d7, r0, r1
 800c84c:	443c      	add	r4, r7
 800c84e:	b34a      	cbz	r2, 800c8a4 <_dtoa_r+0x50c>
 800c850:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c854:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c858:	463e      	mov	r6, r7
 800c85a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c85e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c862:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c866:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c86a:	ee14 2a90 	vmov	r2, s9
 800c86e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c872:	3230      	adds	r2, #48	@ 0x30
 800c874:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c878:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c880:	f806 2b01 	strb.w	r2, [r6], #1
 800c884:	d438      	bmi.n	800c8f8 <_dtoa_r+0x560>
 800c886:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c88a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c892:	d46e      	bmi.n	800c972 <_dtoa_r+0x5da>
 800c894:	42a6      	cmp	r6, r4
 800c896:	f43f af5a 	beq.w	800c74e <_dtoa_r+0x3b6>
 800c89a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c89e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c8a2:	e7e0      	b.n	800c866 <_dtoa_r+0x4ce>
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	463e      	mov	r6, r7
 800c8a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c8ac:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c8b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c8b4:	ee14 2a90 	vmov	r2, s9
 800c8b8:	3230      	adds	r2, #48	@ 0x30
 800c8ba:	f806 2b01 	strb.w	r2, [r6], #1
 800c8be:	42a6      	cmp	r6, r4
 800c8c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c8c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c8c8:	d119      	bne.n	800c8fe <_dtoa_r+0x566>
 800c8ca:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c8ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c8d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8da:	dc4a      	bgt.n	800c972 <_dtoa_r+0x5da>
 800c8dc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c8e0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8e8:	f57f af31 	bpl.w	800c74e <_dtoa_r+0x3b6>
 800c8ec:	460e      	mov	r6, r1
 800c8ee:	3901      	subs	r1, #1
 800c8f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c8f4:	2b30      	cmp	r3, #48	@ 0x30
 800c8f6:	d0f9      	beq.n	800c8ec <_dtoa_r+0x554>
 800c8f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c8fc:	e027      	b.n	800c94e <_dtoa_r+0x5b6>
 800c8fe:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c902:	e7d5      	b.n	800c8b0 <_dtoa_r+0x518>
 800c904:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c908:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c90c:	463e      	mov	r6, r7
 800c90e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c912:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c916:	ee15 3a10 	vmov	r3, s10
 800c91a:	3330      	adds	r3, #48	@ 0x30
 800c91c:	f806 3b01 	strb.w	r3, [r6], #1
 800c920:	1bf3      	subs	r3, r6, r7
 800c922:	459a      	cmp	sl, r3
 800c924:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c928:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c92c:	d132      	bne.n	800c994 <_dtoa_r+0x5fc>
 800c92e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c932:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c93a:	dc18      	bgt.n	800c96e <_dtoa_r+0x5d6>
 800c93c:	eeb4 7b46 	vcmp.f64	d7, d6
 800c940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c944:	d103      	bne.n	800c94e <_dtoa_r+0x5b6>
 800c946:	ee15 3a10 	vmov	r3, s10
 800c94a:	07db      	lsls	r3, r3, #31
 800c94c:	d40f      	bmi.n	800c96e <_dtoa_r+0x5d6>
 800c94e:	9901      	ldr	r1, [sp, #4]
 800c950:	4648      	mov	r0, r9
 800c952:	f000 fbbf 	bl	800d0d4 <_Bfree>
 800c956:	2300      	movs	r3, #0
 800c958:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c95a:	7033      	strb	r3, [r6, #0]
 800c95c:	f108 0301 	add.w	r3, r8, #1
 800c960:	6013      	str	r3, [r2, #0]
 800c962:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 824b 	beq.w	800ce00 <_dtoa_r+0xa68>
 800c96a:	601e      	str	r6, [r3, #0]
 800c96c:	e248      	b.n	800ce00 <_dtoa_r+0xa68>
 800c96e:	f8cd 8014 	str.w	r8, [sp, #20]
 800c972:	4633      	mov	r3, r6
 800c974:	461e      	mov	r6, r3
 800c976:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c97a:	2a39      	cmp	r2, #57	@ 0x39
 800c97c:	d106      	bne.n	800c98c <_dtoa_r+0x5f4>
 800c97e:	429f      	cmp	r7, r3
 800c980:	d1f8      	bne.n	800c974 <_dtoa_r+0x5dc>
 800c982:	9a05      	ldr	r2, [sp, #20]
 800c984:	3201      	adds	r2, #1
 800c986:	9205      	str	r2, [sp, #20]
 800c988:	2230      	movs	r2, #48	@ 0x30
 800c98a:	703a      	strb	r2, [r7, #0]
 800c98c:	781a      	ldrb	r2, [r3, #0]
 800c98e:	3201      	adds	r2, #1
 800c990:	701a      	strb	r2, [r3, #0]
 800c992:	e7b1      	b.n	800c8f8 <_dtoa_r+0x560>
 800c994:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c998:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a0:	d1b5      	bne.n	800c90e <_dtoa_r+0x576>
 800c9a2:	e7d4      	b.n	800c94e <_dtoa_r+0x5b6>
 800c9a4:	0800eee0 	.word	0x0800eee0
 800c9a8:	0800eeb8 	.word	0x0800eeb8
 800c9ac:	9908      	ldr	r1, [sp, #32]
 800c9ae:	2900      	cmp	r1, #0
 800c9b0:	f000 80e9 	beq.w	800cb86 <_dtoa_r+0x7ee>
 800c9b4:	9907      	ldr	r1, [sp, #28]
 800c9b6:	2901      	cmp	r1, #1
 800c9b8:	f300 80cb 	bgt.w	800cb52 <_dtoa_r+0x7ba>
 800c9bc:	2d00      	cmp	r5, #0
 800c9be:	f000 80c4 	beq.w	800cb4a <_dtoa_r+0x7b2>
 800c9c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c9c6:	9e04      	ldr	r6, [sp, #16]
 800c9c8:	461c      	mov	r4, r3
 800c9ca:	9305      	str	r3, [sp, #20]
 800c9cc:	9b04      	ldr	r3, [sp, #16]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	9304      	str	r3, [sp, #16]
 800c9d2:	9b06      	ldr	r3, [sp, #24]
 800c9d4:	2101      	movs	r1, #1
 800c9d6:	4413      	add	r3, r2
 800c9d8:	4648      	mov	r0, r9
 800c9da:	9306      	str	r3, [sp, #24]
 800c9dc:	f000 fc2e 	bl	800d23c <__i2b>
 800c9e0:	9b05      	ldr	r3, [sp, #20]
 800c9e2:	4605      	mov	r5, r0
 800c9e4:	b166      	cbz	r6, 800ca00 <_dtoa_r+0x668>
 800c9e6:	9a06      	ldr	r2, [sp, #24]
 800c9e8:	2a00      	cmp	r2, #0
 800c9ea:	dd09      	ble.n	800ca00 <_dtoa_r+0x668>
 800c9ec:	42b2      	cmp	r2, r6
 800c9ee:	9904      	ldr	r1, [sp, #16]
 800c9f0:	bfa8      	it	ge
 800c9f2:	4632      	movge	r2, r6
 800c9f4:	1a89      	subs	r1, r1, r2
 800c9f6:	9104      	str	r1, [sp, #16]
 800c9f8:	9906      	ldr	r1, [sp, #24]
 800c9fa:	1ab6      	subs	r6, r6, r2
 800c9fc:	1a8a      	subs	r2, r1, r2
 800c9fe:	9206      	str	r2, [sp, #24]
 800ca00:	b30b      	cbz	r3, 800ca46 <_dtoa_r+0x6ae>
 800ca02:	9a08      	ldr	r2, [sp, #32]
 800ca04:	2a00      	cmp	r2, #0
 800ca06:	f000 80c5 	beq.w	800cb94 <_dtoa_r+0x7fc>
 800ca0a:	2c00      	cmp	r4, #0
 800ca0c:	f000 80bf 	beq.w	800cb8e <_dtoa_r+0x7f6>
 800ca10:	4629      	mov	r1, r5
 800ca12:	4622      	mov	r2, r4
 800ca14:	4648      	mov	r0, r9
 800ca16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca18:	f000 fcc8 	bl	800d3ac <__pow5mult>
 800ca1c:	9a01      	ldr	r2, [sp, #4]
 800ca1e:	4601      	mov	r1, r0
 800ca20:	4605      	mov	r5, r0
 800ca22:	4648      	mov	r0, r9
 800ca24:	f000 fc20 	bl	800d268 <__multiply>
 800ca28:	9901      	ldr	r1, [sp, #4]
 800ca2a:	9005      	str	r0, [sp, #20]
 800ca2c:	4648      	mov	r0, r9
 800ca2e:	f000 fb51 	bl	800d0d4 <_Bfree>
 800ca32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca34:	1b1b      	subs	r3, r3, r4
 800ca36:	f000 80b0 	beq.w	800cb9a <_dtoa_r+0x802>
 800ca3a:	9905      	ldr	r1, [sp, #20]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4648      	mov	r0, r9
 800ca40:	f000 fcb4 	bl	800d3ac <__pow5mult>
 800ca44:	9001      	str	r0, [sp, #4]
 800ca46:	2101      	movs	r1, #1
 800ca48:	4648      	mov	r0, r9
 800ca4a:	f000 fbf7 	bl	800d23c <__i2b>
 800ca4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca50:	4604      	mov	r4, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 81da 	beq.w	800ce0c <_dtoa_r+0xa74>
 800ca58:	461a      	mov	r2, r3
 800ca5a:	4601      	mov	r1, r0
 800ca5c:	4648      	mov	r0, r9
 800ca5e:	f000 fca5 	bl	800d3ac <__pow5mult>
 800ca62:	9b07      	ldr	r3, [sp, #28]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	4604      	mov	r4, r0
 800ca68:	f300 80a0 	bgt.w	800cbac <_dtoa_r+0x814>
 800ca6c:	9b02      	ldr	r3, [sp, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f040 8096 	bne.w	800cba0 <_dtoa_r+0x808>
 800ca74:	9b03      	ldr	r3, [sp, #12]
 800ca76:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ca7a:	2a00      	cmp	r2, #0
 800ca7c:	f040 8092 	bne.w	800cba4 <_dtoa_r+0x80c>
 800ca80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ca84:	0d12      	lsrs	r2, r2, #20
 800ca86:	0512      	lsls	r2, r2, #20
 800ca88:	2a00      	cmp	r2, #0
 800ca8a:	f000 808d 	beq.w	800cba8 <_dtoa_r+0x810>
 800ca8e:	9b04      	ldr	r3, [sp, #16]
 800ca90:	3301      	adds	r3, #1
 800ca92:	9304      	str	r3, [sp, #16]
 800ca94:	9b06      	ldr	r3, [sp, #24]
 800ca96:	3301      	adds	r3, #1
 800ca98:	9306      	str	r3, [sp, #24]
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 81b9 	beq.w	800ce18 <_dtoa_r+0xa80>
 800caa6:	6922      	ldr	r2, [r4, #16]
 800caa8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800caac:	6910      	ldr	r0, [r2, #16]
 800caae:	f000 fb79 	bl	800d1a4 <__hi0bits>
 800cab2:	f1c0 0020 	rsb	r0, r0, #32
 800cab6:	9b06      	ldr	r3, [sp, #24]
 800cab8:	4418      	add	r0, r3
 800caba:	f010 001f 	ands.w	r0, r0, #31
 800cabe:	f000 8081 	beq.w	800cbc4 <_dtoa_r+0x82c>
 800cac2:	f1c0 0220 	rsb	r2, r0, #32
 800cac6:	2a04      	cmp	r2, #4
 800cac8:	dd73      	ble.n	800cbb2 <_dtoa_r+0x81a>
 800caca:	9b04      	ldr	r3, [sp, #16]
 800cacc:	f1c0 001c 	rsb	r0, r0, #28
 800cad0:	4403      	add	r3, r0
 800cad2:	9304      	str	r3, [sp, #16]
 800cad4:	9b06      	ldr	r3, [sp, #24]
 800cad6:	4406      	add	r6, r0
 800cad8:	4403      	add	r3, r0
 800cada:	9306      	str	r3, [sp, #24]
 800cadc:	9b04      	ldr	r3, [sp, #16]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	dd05      	ble.n	800caee <_dtoa_r+0x756>
 800cae2:	9901      	ldr	r1, [sp, #4]
 800cae4:	461a      	mov	r2, r3
 800cae6:	4648      	mov	r0, r9
 800cae8:	f000 fcba 	bl	800d460 <__lshift>
 800caec:	9001      	str	r0, [sp, #4]
 800caee:	9b06      	ldr	r3, [sp, #24]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dd05      	ble.n	800cb00 <_dtoa_r+0x768>
 800caf4:	4621      	mov	r1, r4
 800caf6:	461a      	mov	r2, r3
 800caf8:	4648      	mov	r0, r9
 800cafa:	f000 fcb1 	bl	800d460 <__lshift>
 800cafe:	4604      	mov	r4, r0
 800cb00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d060      	beq.n	800cbc8 <_dtoa_r+0x830>
 800cb06:	9801      	ldr	r0, [sp, #4]
 800cb08:	4621      	mov	r1, r4
 800cb0a:	f000 fd15 	bl	800d538 <__mcmp>
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	da5a      	bge.n	800cbc8 <_dtoa_r+0x830>
 800cb12:	f108 33ff 	add.w	r3, r8, #4294967295
 800cb16:	9305      	str	r3, [sp, #20]
 800cb18:	9901      	ldr	r1, [sp, #4]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	220a      	movs	r2, #10
 800cb1e:	4648      	mov	r0, r9
 800cb20:	f000 fafa 	bl	800d118 <__multadd>
 800cb24:	9b08      	ldr	r3, [sp, #32]
 800cb26:	9001      	str	r0, [sp, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f000 8177 	beq.w	800ce1c <_dtoa_r+0xa84>
 800cb2e:	4629      	mov	r1, r5
 800cb30:	2300      	movs	r3, #0
 800cb32:	220a      	movs	r2, #10
 800cb34:	4648      	mov	r0, r9
 800cb36:	f000 faef 	bl	800d118 <__multadd>
 800cb3a:	f1bb 0f00 	cmp.w	fp, #0
 800cb3e:	4605      	mov	r5, r0
 800cb40:	dc6e      	bgt.n	800cc20 <_dtoa_r+0x888>
 800cb42:	9b07      	ldr	r3, [sp, #28]
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	dc48      	bgt.n	800cbda <_dtoa_r+0x842>
 800cb48:	e06a      	b.n	800cc20 <_dtoa_r+0x888>
 800cb4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb4c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cb50:	e739      	b.n	800c9c6 <_dtoa_r+0x62e>
 800cb52:	f10a 34ff 	add.w	r4, sl, #4294967295
 800cb56:	42a3      	cmp	r3, r4
 800cb58:	db07      	blt.n	800cb6a <_dtoa_r+0x7d2>
 800cb5a:	f1ba 0f00 	cmp.w	sl, #0
 800cb5e:	eba3 0404 	sub.w	r4, r3, r4
 800cb62:	db0b      	blt.n	800cb7c <_dtoa_r+0x7e4>
 800cb64:	9e04      	ldr	r6, [sp, #16]
 800cb66:	4652      	mov	r2, sl
 800cb68:	e72f      	b.n	800c9ca <_dtoa_r+0x632>
 800cb6a:	1ae2      	subs	r2, r4, r3
 800cb6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb6e:	9e04      	ldr	r6, [sp, #16]
 800cb70:	4413      	add	r3, r2
 800cb72:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb74:	4652      	mov	r2, sl
 800cb76:	4623      	mov	r3, r4
 800cb78:	2400      	movs	r4, #0
 800cb7a:	e726      	b.n	800c9ca <_dtoa_r+0x632>
 800cb7c:	9a04      	ldr	r2, [sp, #16]
 800cb7e:	eba2 060a 	sub.w	r6, r2, sl
 800cb82:	2200      	movs	r2, #0
 800cb84:	e721      	b.n	800c9ca <_dtoa_r+0x632>
 800cb86:	9e04      	ldr	r6, [sp, #16]
 800cb88:	9d08      	ldr	r5, [sp, #32]
 800cb8a:	461c      	mov	r4, r3
 800cb8c:	e72a      	b.n	800c9e4 <_dtoa_r+0x64c>
 800cb8e:	9a01      	ldr	r2, [sp, #4]
 800cb90:	9205      	str	r2, [sp, #20]
 800cb92:	e752      	b.n	800ca3a <_dtoa_r+0x6a2>
 800cb94:	9901      	ldr	r1, [sp, #4]
 800cb96:	461a      	mov	r2, r3
 800cb98:	e751      	b.n	800ca3e <_dtoa_r+0x6a6>
 800cb9a:	9b05      	ldr	r3, [sp, #20]
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	e752      	b.n	800ca46 <_dtoa_r+0x6ae>
 800cba0:	2300      	movs	r3, #0
 800cba2:	e77b      	b.n	800ca9c <_dtoa_r+0x704>
 800cba4:	9b02      	ldr	r3, [sp, #8]
 800cba6:	e779      	b.n	800ca9c <_dtoa_r+0x704>
 800cba8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cbaa:	e778      	b.n	800ca9e <_dtoa_r+0x706>
 800cbac:	2300      	movs	r3, #0
 800cbae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbb0:	e779      	b.n	800caa6 <_dtoa_r+0x70e>
 800cbb2:	d093      	beq.n	800cadc <_dtoa_r+0x744>
 800cbb4:	9b04      	ldr	r3, [sp, #16]
 800cbb6:	321c      	adds	r2, #28
 800cbb8:	4413      	add	r3, r2
 800cbba:	9304      	str	r3, [sp, #16]
 800cbbc:	9b06      	ldr	r3, [sp, #24]
 800cbbe:	4416      	add	r6, r2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	e78a      	b.n	800cada <_dtoa_r+0x742>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	e7f5      	b.n	800cbb4 <_dtoa_r+0x81c>
 800cbc8:	f1ba 0f00 	cmp.w	sl, #0
 800cbcc:	f8cd 8014 	str.w	r8, [sp, #20]
 800cbd0:	46d3      	mov	fp, sl
 800cbd2:	dc21      	bgt.n	800cc18 <_dtoa_r+0x880>
 800cbd4:	9b07      	ldr	r3, [sp, #28]
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	dd1e      	ble.n	800cc18 <_dtoa_r+0x880>
 800cbda:	f1bb 0f00 	cmp.w	fp, #0
 800cbde:	f47f addc 	bne.w	800c79a <_dtoa_r+0x402>
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	465b      	mov	r3, fp
 800cbe6:	2205      	movs	r2, #5
 800cbe8:	4648      	mov	r0, r9
 800cbea:	f000 fa95 	bl	800d118 <__multadd>
 800cbee:	4601      	mov	r1, r0
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	9801      	ldr	r0, [sp, #4]
 800cbf4:	f000 fca0 	bl	800d538 <__mcmp>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	f77f adce 	ble.w	800c79a <_dtoa_r+0x402>
 800cbfe:	463e      	mov	r6, r7
 800cc00:	2331      	movs	r3, #49	@ 0x31
 800cc02:	f806 3b01 	strb.w	r3, [r6], #1
 800cc06:	9b05      	ldr	r3, [sp, #20]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	9305      	str	r3, [sp, #20]
 800cc0c:	e5c9      	b.n	800c7a2 <_dtoa_r+0x40a>
 800cc0e:	f8cd 8014 	str.w	r8, [sp, #20]
 800cc12:	4654      	mov	r4, sl
 800cc14:	4625      	mov	r5, r4
 800cc16:	e7f2      	b.n	800cbfe <_dtoa_r+0x866>
 800cc18:	9b08      	ldr	r3, [sp, #32]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f000 8102 	beq.w	800ce24 <_dtoa_r+0xa8c>
 800cc20:	2e00      	cmp	r6, #0
 800cc22:	dd05      	ble.n	800cc30 <_dtoa_r+0x898>
 800cc24:	4629      	mov	r1, r5
 800cc26:	4632      	mov	r2, r6
 800cc28:	4648      	mov	r0, r9
 800cc2a:	f000 fc19 	bl	800d460 <__lshift>
 800cc2e:	4605      	mov	r5, r0
 800cc30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d058      	beq.n	800cce8 <_dtoa_r+0x950>
 800cc36:	6869      	ldr	r1, [r5, #4]
 800cc38:	4648      	mov	r0, r9
 800cc3a:	f000 fa0b 	bl	800d054 <_Balloc>
 800cc3e:	4606      	mov	r6, r0
 800cc40:	b928      	cbnz	r0, 800cc4e <_dtoa_r+0x8b6>
 800cc42:	4b82      	ldr	r3, [pc, #520]	@ (800ce4c <_dtoa_r+0xab4>)
 800cc44:	4602      	mov	r2, r0
 800cc46:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cc4a:	f7ff bbbe 	b.w	800c3ca <_dtoa_r+0x32>
 800cc4e:	692a      	ldr	r2, [r5, #16]
 800cc50:	3202      	adds	r2, #2
 800cc52:	0092      	lsls	r2, r2, #2
 800cc54:	f105 010c 	add.w	r1, r5, #12
 800cc58:	300c      	adds	r0, #12
 800cc5a:	f7ff fb04 	bl	800c266 <memcpy>
 800cc5e:	2201      	movs	r2, #1
 800cc60:	4631      	mov	r1, r6
 800cc62:	4648      	mov	r0, r9
 800cc64:	f000 fbfc 	bl	800d460 <__lshift>
 800cc68:	1c7b      	adds	r3, r7, #1
 800cc6a:	9304      	str	r3, [sp, #16]
 800cc6c:	eb07 030b 	add.w	r3, r7, fp
 800cc70:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc72:	9b02      	ldr	r3, [sp, #8]
 800cc74:	f003 0301 	and.w	r3, r3, #1
 800cc78:	46a8      	mov	r8, r5
 800cc7a:	9308      	str	r3, [sp, #32]
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	9b04      	ldr	r3, [sp, #16]
 800cc80:	9801      	ldr	r0, [sp, #4]
 800cc82:	4621      	mov	r1, r4
 800cc84:	f103 3bff 	add.w	fp, r3, #4294967295
 800cc88:	f7ff fafb 	bl	800c282 <quorem>
 800cc8c:	4641      	mov	r1, r8
 800cc8e:	9002      	str	r0, [sp, #8]
 800cc90:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cc94:	9801      	ldr	r0, [sp, #4]
 800cc96:	f000 fc4f 	bl	800d538 <__mcmp>
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	9006      	str	r0, [sp, #24]
 800cc9e:	4621      	mov	r1, r4
 800cca0:	4648      	mov	r0, r9
 800cca2:	f000 fc65 	bl	800d570 <__mdiff>
 800cca6:	68c2      	ldr	r2, [r0, #12]
 800cca8:	4606      	mov	r6, r0
 800ccaa:	b9fa      	cbnz	r2, 800ccec <_dtoa_r+0x954>
 800ccac:	4601      	mov	r1, r0
 800ccae:	9801      	ldr	r0, [sp, #4]
 800ccb0:	f000 fc42 	bl	800d538 <__mcmp>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	4648      	mov	r0, r9
 800ccba:	920a      	str	r2, [sp, #40]	@ 0x28
 800ccbc:	f000 fa0a 	bl	800d0d4 <_Bfree>
 800ccc0:	9b07      	ldr	r3, [sp, #28]
 800ccc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccc4:	9e04      	ldr	r6, [sp, #16]
 800ccc6:	ea42 0103 	orr.w	r1, r2, r3
 800ccca:	9b08      	ldr	r3, [sp, #32]
 800cccc:	4319      	orrs	r1, r3
 800ccce:	d10f      	bne.n	800ccf0 <_dtoa_r+0x958>
 800ccd0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ccd4:	d028      	beq.n	800cd28 <_dtoa_r+0x990>
 800ccd6:	9b06      	ldr	r3, [sp, #24]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	dd02      	ble.n	800cce2 <_dtoa_r+0x94a>
 800ccdc:	9b02      	ldr	r3, [sp, #8]
 800ccde:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800cce2:	f88b a000 	strb.w	sl, [fp]
 800cce6:	e55e      	b.n	800c7a6 <_dtoa_r+0x40e>
 800cce8:	4628      	mov	r0, r5
 800ccea:	e7bd      	b.n	800cc68 <_dtoa_r+0x8d0>
 800ccec:	2201      	movs	r2, #1
 800ccee:	e7e2      	b.n	800ccb6 <_dtoa_r+0x91e>
 800ccf0:	9b06      	ldr	r3, [sp, #24]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	db04      	blt.n	800cd00 <_dtoa_r+0x968>
 800ccf6:	9907      	ldr	r1, [sp, #28]
 800ccf8:	430b      	orrs	r3, r1
 800ccfa:	9908      	ldr	r1, [sp, #32]
 800ccfc:	430b      	orrs	r3, r1
 800ccfe:	d120      	bne.n	800cd42 <_dtoa_r+0x9aa>
 800cd00:	2a00      	cmp	r2, #0
 800cd02:	ddee      	ble.n	800cce2 <_dtoa_r+0x94a>
 800cd04:	9901      	ldr	r1, [sp, #4]
 800cd06:	2201      	movs	r2, #1
 800cd08:	4648      	mov	r0, r9
 800cd0a:	f000 fba9 	bl	800d460 <__lshift>
 800cd0e:	4621      	mov	r1, r4
 800cd10:	9001      	str	r0, [sp, #4]
 800cd12:	f000 fc11 	bl	800d538 <__mcmp>
 800cd16:	2800      	cmp	r0, #0
 800cd18:	dc03      	bgt.n	800cd22 <_dtoa_r+0x98a>
 800cd1a:	d1e2      	bne.n	800cce2 <_dtoa_r+0x94a>
 800cd1c:	f01a 0f01 	tst.w	sl, #1
 800cd20:	d0df      	beq.n	800cce2 <_dtoa_r+0x94a>
 800cd22:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cd26:	d1d9      	bne.n	800ccdc <_dtoa_r+0x944>
 800cd28:	2339      	movs	r3, #57	@ 0x39
 800cd2a:	f88b 3000 	strb.w	r3, [fp]
 800cd2e:	4633      	mov	r3, r6
 800cd30:	461e      	mov	r6, r3
 800cd32:	3b01      	subs	r3, #1
 800cd34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cd38:	2a39      	cmp	r2, #57	@ 0x39
 800cd3a:	d052      	beq.n	800cde2 <_dtoa_r+0xa4a>
 800cd3c:	3201      	adds	r2, #1
 800cd3e:	701a      	strb	r2, [r3, #0]
 800cd40:	e531      	b.n	800c7a6 <_dtoa_r+0x40e>
 800cd42:	2a00      	cmp	r2, #0
 800cd44:	dd07      	ble.n	800cd56 <_dtoa_r+0x9be>
 800cd46:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cd4a:	d0ed      	beq.n	800cd28 <_dtoa_r+0x990>
 800cd4c:	f10a 0301 	add.w	r3, sl, #1
 800cd50:	f88b 3000 	strb.w	r3, [fp]
 800cd54:	e527      	b.n	800c7a6 <_dtoa_r+0x40e>
 800cd56:	9b04      	ldr	r3, [sp, #16]
 800cd58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd5a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d029      	beq.n	800cdb6 <_dtoa_r+0xa1e>
 800cd62:	9901      	ldr	r1, [sp, #4]
 800cd64:	2300      	movs	r3, #0
 800cd66:	220a      	movs	r2, #10
 800cd68:	4648      	mov	r0, r9
 800cd6a:	f000 f9d5 	bl	800d118 <__multadd>
 800cd6e:	45a8      	cmp	r8, r5
 800cd70:	9001      	str	r0, [sp, #4]
 800cd72:	f04f 0300 	mov.w	r3, #0
 800cd76:	f04f 020a 	mov.w	r2, #10
 800cd7a:	4641      	mov	r1, r8
 800cd7c:	4648      	mov	r0, r9
 800cd7e:	d107      	bne.n	800cd90 <_dtoa_r+0x9f8>
 800cd80:	f000 f9ca 	bl	800d118 <__multadd>
 800cd84:	4680      	mov	r8, r0
 800cd86:	4605      	mov	r5, r0
 800cd88:	9b04      	ldr	r3, [sp, #16]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	9304      	str	r3, [sp, #16]
 800cd8e:	e776      	b.n	800cc7e <_dtoa_r+0x8e6>
 800cd90:	f000 f9c2 	bl	800d118 <__multadd>
 800cd94:	4629      	mov	r1, r5
 800cd96:	4680      	mov	r8, r0
 800cd98:	2300      	movs	r3, #0
 800cd9a:	220a      	movs	r2, #10
 800cd9c:	4648      	mov	r0, r9
 800cd9e:	f000 f9bb 	bl	800d118 <__multadd>
 800cda2:	4605      	mov	r5, r0
 800cda4:	e7f0      	b.n	800cd88 <_dtoa_r+0x9f0>
 800cda6:	f1bb 0f00 	cmp.w	fp, #0
 800cdaa:	bfcc      	ite	gt
 800cdac:	465e      	movgt	r6, fp
 800cdae:	2601      	movle	r6, #1
 800cdb0:	443e      	add	r6, r7
 800cdb2:	f04f 0800 	mov.w	r8, #0
 800cdb6:	9901      	ldr	r1, [sp, #4]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	4648      	mov	r0, r9
 800cdbc:	f000 fb50 	bl	800d460 <__lshift>
 800cdc0:	4621      	mov	r1, r4
 800cdc2:	9001      	str	r0, [sp, #4]
 800cdc4:	f000 fbb8 	bl	800d538 <__mcmp>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	dcb0      	bgt.n	800cd2e <_dtoa_r+0x996>
 800cdcc:	d102      	bne.n	800cdd4 <_dtoa_r+0xa3c>
 800cdce:	f01a 0f01 	tst.w	sl, #1
 800cdd2:	d1ac      	bne.n	800cd2e <_dtoa_r+0x996>
 800cdd4:	4633      	mov	r3, r6
 800cdd6:	461e      	mov	r6, r3
 800cdd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cddc:	2a30      	cmp	r2, #48	@ 0x30
 800cdde:	d0fa      	beq.n	800cdd6 <_dtoa_r+0xa3e>
 800cde0:	e4e1      	b.n	800c7a6 <_dtoa_r+0x40e>
 800cde2:	429f      	cmp	r7, r3
 800cde4:	d1a4      	bne.n	800cd30 <_dtoa_r+0x998>
 800cde6:	9b05      	ldr	r3, [sp, #20]
 800cde8:	3301      	adds	r3, #1
 800cdea:	9305      	str	r3, [sp, #20]
 800cdec:	2331      	movs	r3, #49	@ 0x31
 800cdee:	703b      	strb	r3, [r7, #0]
 800cdf0:	e4d9      	b.n	800c7a6 <_dtoa_r+0x40e>
 800cdf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdf4:	4f16      	ldr	r7, [pc, #88]	@ (800ce50 <_dtoa_r+0xab8>)
 800cdf6:	b11b      	cbz	r3, 800ce00 <_dtoa_r+0xa68>
 800cdf8:	f107 0308 	add.w	r3, r7, #8
 800cdfc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cdfe:	6013      	str	r3, [r2, #0]
 800ce00:	4638      	mov	r0, r7
 800ce02:	b011      	add	sp, #68	@ 0x44
 800ce04:	ecbd 8b02 	vpop	{d8}
 800ce08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0c:	9b07      	ldr	r3, [sp, #28]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	f77f ae2c 	ble.w	800ca6c <_dtoa_r+0x6d4>
 800ce14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce18:	2001      	movs	r0, #1
 800ce1a:	e64c      	b.n	800cab6 <_dtoa_r+0x71e>
 800ce1c:	f1bb 0f00 	cmp.w	fp, #0
 800ce20:	f77f aed8 	ble.w	800cbd4 <_dtoa_r+0x83c>
 800ce24:	463e      	mov	r6, r7
 800ce26:	9801      	ldr	r0, [sp, #4]
 800ce28:	4621      	mov	r1, r4
 800ce2a:	f7ff fa2a 	bl	800c282 <quorem>
 800ce2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ce32:	f806 ab01 	strb.w	sl, [r6], #1
 800ce36:	1bf2      	subs	r2, r6, r7
 800ce38:	4593      	cmp	fp, r2
 800ce3a:	ddb4      	ble.n	800cda6 <_dtoa_r+0xa0e>
 800ce3c:	9901      	ldr	r1, [sp, #4]
 800ce3e:	2300      	movs	r3, #0
 800ce40:	220a      	movs	r2, #10
 800ce42:	4648      	mov	r0, r9
 800ce44:	f000 f968 	bl	800d118 <__multadd>
 800ce48:	9001      	str	r0, [sp, #4]
 800ce4a:	e7ec      	b.n	800ce26 <_dtoa_r+0xa8e>
 800ce4c:	0800ede4 	.word	0x0800ede4
 800ce50:	0800ed68 	.word	0x0800ed68

0800ce54 <_free_r>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	4605      	mov	r5, r0
 800ce58:	2900      	cmp	r1, #0
 800ce5a:	d041      	beq.n	800cee0 <_free_r+0x8c>
 800ce5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce60:	1f0c      	subs	r4, r1, #4
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	bfb8      	it	lt
 800ce66:	18e4      	addlt	r4, r4, r3
 800ce68:	f000 f8e8 	bl	800d03c <__malloc_lock>
 800ce6c:	4a1d      	ldr	r2, [pc, #116]	@ (800cee4 <_free_r+0x90>)
 800ce6e:	6813      	ldr	r3, [r2, #0]
 800ce70:	b933      	cbnz	r3, 800ce80 <_free_r+0x2c>
 800ce72:	6063      	str	r3, [r4, #4]
 800ce74:	6014      	str	r4, [r2, #0]
 800ce76:	4628      	mov	r0, r5
 800ce78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce7c:	f000 b8e4 	b.w	800d048 <__malloc_unlock>
 800ce80:	42a3      	cmp	r3, r4
 800ce82:	d908      	bls.n	800ce96 <_free_r+0x42>
 800ce84:	6820      	ldr	r0, [r4, #0]
 800ce86:	1821      	adds	r1, r4, r0
 800ce88:	428b      	cmp	r3, r1
 800ce8a:	bf01      	itttt	eq
 800ce8c:	6819      	ldreq	r1, [r3, #0]
 800ce8e:	685b      	ldreq	r3, [r3, #4]
 800ce90:	1809      	addeq	r1, r1, r0
 800ce92:	6021      	streq	r1, [r4, #0]
 800ce94:	e7ed      	b.n	800ce72 <_free_r+0x1e>
 800ce96:	461a      	mov	r2, r3
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	b10b      	cbz	r3, 800cea0 <_free_r+0x4c>
 800ce9c:	42a3      	cmp	r3, r4
 800ce9e:	d9fa      	bls.n	800ce96 <_free_r+0x42>
 800cea0:	6811      	ldr	r1, [r2, #0]
 800cea2:	1850      	adds	r0, r2, r1
 800cea4:	42a0      	cmp	r0, r4
 800cea6:	d10b      	bne.n	800cec0 <_free_r+0x6c>
 800cea8:	6820      	ldr	r0, [r4, #0]
 800ceaa:	4401      	add	r1, r0
 800ceac:	1850      	adds	r0, r2, r1
 800ceae:	4283      	cmp	r3, r0
 800ceb0:	6011      	str	r1, [r2, #0]
 800ceb2:	d1e0      	bne.n	800ce76 <_free_r+0x22>
 800ceb4:	6818      	ldr	r0, [r3, #0]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	6053      	str	r3, [r2, #4]
 800ceba:	4408      	add	r0, r1
 800cebc:	6010      	str	r0, [r2, #0]
 800cebe:	e7da      	b.n	800ce76 <_free_r+0x22>
 800cec0:	d902      	bls.n	800cec8 <_free_r+0x74>
 800cec2:	230c      	movs	r3, #12
 800cec4:	602b      	str	r3, [r5, #0]
 800cec6:	e7d6      	b.n	800ce76 <_free_r+0x22>
 800cec8:	6820      	ldr	r0, [r4, #0]
 800ceca:	1821      	adds	r1, r4, r0
 800cecc:	428b      	cmp	r3, r1
 800cece:	bf04      	itt	eq
 800ced0:	6819      	ldreq	r1, [r3, #0]
 800ced2:	685b      	ldreq	r3, [r3, #4]
 800ced4:	6063      	str	r3, [r4, #4]
 800ced6:	bf04      	itt	eq
 800ced8:	1809      	addeq	r1, r1, r0
 800ceda:	6021      	streq	r1, [r4, #0]
 800cedc:	6054      	str	r4, [r2, #4]
 800cede:	e7ca      	b.n	800ce76 <_free_r+0x22>
 800cee0:	bd38      	pop	{r3, r4, r5, pc}
 800cee2:	bf00      	nop
 800cee4:	240016c4 	.word	0x240016c4

0800cee8 <malloc>:
 800cee8:	4b02      	ldr	r3, [pc, #8]	@ (800cef4 <malloc+0xc>)
 800ceea:	4601      	mov	r1, r0
 800ceec:	6818      	ldr	r0, [r3, #0]
 800ceee:	f000 b825 	b.w	800cf3c <_malloc_r>
 800cef2:	bf00      	nop
 800cef4:	24000028 	.word	0x24000028

0800cef8 <sbrk_aligned>:
 800cef8:	b570      	push	{r4, r5, r6, lr}
 800cefa:	4e0f      	ldr	r6, [pc, #60]	@ (800cf38 <sbrk_aligned+0x40>)
 800cefc:	460c      	mov	r4, r1
 800cefe:	6831      	ldr	r1, [r6, #0]
 800cf00:	4605      	mov	r5, r0
 800cf02:	b911      	cbnz	r1, 800cf0a <sbrk_aligned+0x12>
 800cf04:	f000 fccc 	bl	800d8a0 <_sbrk_r>
 800cf08:	6030      	str	r0, [r6, #0]
 800cf0a:	4621      	mov	r1, r4
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	f000 fcc7 	bl	800d8a0 <_sbrk_r>
 800cf12:	1c43      	adds	r3, r0, #1
 800cf14:	d103      	bne.n	800cf1e <sbrk_aligned+0x26>
 800cf16:	f04f 34ff 	mov.w	r4, #4294967295
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	bd70      	pop	{r4, r5, r6, pc}
 800cf1e:	1cc4      	adds	r4, r0, #3
 800cf20:	f024 0403 	bic.w	r4, r4, #3
 800cf24:	42a0      	cmp	r0, r4
 800cf26:	d0f8      	beq.n	800cf1a <sbrk_aligned+0x22>
 800cf28:	1a21      	subs	r1, r4, r0
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	f000 fcb8 	bl	800d8a0 <_sbrk_r>
 800cf30:	3001      	adds	r0, #1
 800cf32:	d1f2      	bne.n	800cf1a <sbrk_aligned+0x22>
 800cf34:	e7ef      	b.n	800cf16 <sbrk_aligned+0x1e>
 800cf36:	bf00      	nop
 800cf38:	240016c0 	.word	0x240016c0

0800cf3c <_malloc_r>:
 800cf3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf40:	1ccd      	adds	r5, r1, #3
 800cf42:	f025 0503 	bic.w	r5, r5, #3
 800cf46:	3508      	adds	r5, #8
 800cf48:	2d0c      	cmp	r5, #12
 800cf4a:	bf38      	it	cc
 800cf4c:	250c      	movcc	r5, #12
 800cf4e:	2d00      	cmp	r5, #0
 800cf50:	4606      	mov	r6, r0
 800cf52:	db01      	blt.n	800cf58 <_malloc_r+0x1c>
 800cf54:	42a9      	cmp	r1, r5
 800cf56:	d904      	bls.n	800cf62 <_malloc_r+0x26>
 800cf58:	230c      	movs	r3, #12
 800cf5a:	6033      	str	r3, [r6, #0]
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d038 <_malloc_r+0xfc>
 800cf66:	f000 f869 	bl	800d03c <__malloc_lock>
 800cf6a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf6e:	461c      	mov	r4, r3
 800cf70:	bb44      	cbnz	r4, 800cfc4 <_malloc_r+0x88>
 800cf72:	4629      	mov	r1, r5
 800cf74:	4630      	mov	r0, r6
 800cf76:	f7ff ffbf 	bl	800cef8 <sbrk_aligned>
 800cf7a:	1c43      	adds	r3, r0, #1
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	d158      	bne.n	800d032 <_malloc_r+0xf6>
 800cf80:	f8d8 4000 	ldr.w	r4, [r8]
 800cf84:	4627      	mov	r7, r4
 800cf86:	2f00      	cmp	r7, #0
 800cf88:	d143      	bne.n	800d012 <_malloc_r+0xd6>
 800cf8a:	2c00      	cmp	r4, #0
 800cf8c:	d04b      	beq.n	800d026 <_malloc_r+0xea>
 800cf8e:	6823      	ldr	r3, [r4, #0]
 800cf90:	4639      	mov	r1, r7
 800cf92:	4630      	mov	r0, r6
 800cf94:	eb04 0903 	add.w	r9, r4, r3
 800cf98:	f000 fc82 	bl	800d8a0 <_sbrk_r>
 800cf9c:	4581      	cmp	r9, r0
 800cf9e:	d142      	bne.n	800d026 <_malloc_r+0xea>
 800cfa0:	6821      	ldr	r1, [r4, #0]
 800cfa2:	1a6d      	subs	r5, r5, r1
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	f7ff ffa6 	bl	800cef8 <sbrk_aligned>
 800cfac:	3001      	adds	r0, #1
 800cfae:	d03a      	beq.n	800d026 <_malloc_r+0xea>
 800cfb0:	6823      	ldr	r3, [r4, #0]
 800cfb2:	442b      	add	r3, r5
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	f8d8 3000 	ldr.w	r3, [r8]
 800cfba:	685a      	ldr	r2, [r3, #4]
 800cfbc:	bb62      	cbnz	r2, 800d018 <_malloc_r+0xdc>
 800cfbe:	f8c8 7000 	str.w	r7, [r8]
 800cfc2:	e00f      	b.n	800cfe4 <_malloc_r+0xa8>
 800cfc4:	6822      	ldr	r2, [r4, #0]
 800cfc6:	1b52      	subs	r2, r2, r5
 800cfc8:	d420      	bmi.n	800d00c <_malloc_r+0xd0>
 800cfca:	2a0b      	cmp	r2, #11
 800cfcc:	d917      	bls.n	800cffe <_malloc_r+0xc2>
 800cfce:	1961      	adds	r1, r4, r5
 800cfd0:	42a3      	cmp	r3, r4
 800cfd2:	6025      	str	r5, [r4, #0]
 800cfd4:	bf18      	it	ne
 800cfd6:	6059      	strne	r1, [r3, #4]
 800cfd8:	6863      	ldr	r3, [r4, #4]
 800cfda:	bf08      	it	eq
 800cfdc:	f8c8 1000 	streq.w	r1, [r8]
 800cfe0:	5162      	str	r2, [r4, r5]
 800cfe2:	604b      	str	r3, [r1, #4]
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f000 f82f 	bl	800d048 <__malloc_unlock>
 800cfea:	f104 000b 	add.w	r0, r4, #11
 800cfee:	1d23      	adds	r3, r4, #4
 800cff0:	f020 0007 	bic.w	r0, r0, #7
 800cff4:	1ac2      	subs	r2, r0, r3
 800cff6:	bf1c      	itt	ne
 800cff8:	1a1b      	subne	r3, r3, r0
 800cffa:	50a3      	strne	r3, [r4, r2]
 800cffc:	e7af      	b.n	800cf5e <_malloc_r+0x22>
 800cffe:	6862      	ldr	r2, [r4, #4]
 800d000:	42a3      	cmp	r3, r4
 800d002:	bf0c      	ite	eq
 800d004:	f8c8 2000 	streq.w	r2, [r8]
 800d008:	605a      	strne	r2, [r3, #4]
 800d00a:	e7eb      	b.n	800cfe4 <_malloc_r+0xa8>
 800d00c:	4623      	mov	r3, r4
 800d00e:	6864      	ldr	r4, [r4, #4]
 800d010:	e7ae      	b.n	800cf70 <_malloc_r+0x34>
 800d012:	463c      	mov	r4, r7
 800d014:	687f      	ldr	r7, [r7, #4]
 800d016:	e7b6      	b.n	800cf86 <_malloc_r+0x4a>
 800d018:	461a      	mov	r2, r3
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	42a3      	cmp	r3, r4
 800d01e:	d1fb      	bne.n	800d018 <_malloc_r+0xdc>
 800d020:	2300      	movs	r3, #0
 800d022:	6053      	str	r3, [r2, #4]
 800d024:	e7de      	b.n	800cfe4 <_malloc_r+0xa8>
 800d026:	230c      	movs	r3, #12
 800d028:	6033      	str	r3, [r6, #0]
 800d02a:	4630      	mov	r0, r6
 800d02c:	f000 f80c 	bl	800d048 <__malloc_unlock>
 800d030:	e794      	b.n	800cf5c <_malloc_r+0x20>
 800d032:	6005      	str	r5, [r0, #0]
 800d034:	e7d6      	b.n	800cfe4 <_malloc_r+0xa8>
 800d036:	bf00      	nop
 800d038:	240016c4 	.word	0x240016c4

0800d03c <__malloc_lock>:
 800d03c:	4801      	ldr	r0, [pc, #4]	@ (800d044 <__malloc_lock+0x8>)
 800d03e:	f7ff b910 	b.w	800c262 <__retarget_lock_acquire_recursive>
 800d042:	bf00      	nop
 800d044:	240016bc 	.word	0x240016bc

0800d048 <__malloc_unlock>:
 800d048:	4801      	ldr	r0, [pc, #4]	@ (800d050 <__malloc_unlock+0x8>)
 800d04a:	f7ff b90b 	b.w	800c264 <__retarget_lock_release_recursive>
 800d04e:	bf00      	nop
 800d050:	240016bc 	.word	0x240016bc

0800d054 <_Balloc>:
 800d054:	b570      	push	{r4, r5, r6, lr}
 800d056:	69c6      	ldr	r6, [r0, #28]
 800d058:	4604      	mov	r4, r0
 800d05a:	460d      	mov	r5, r1
 800d05c:	b976      	cbnz	r6, 800d07c <_Balloc+0x28>
 800d05e:	2010      	movs	r0, #16
 800d060:	f7ff ff42 	bl	800cee8 <malloc>
 800d064:	4602      	mov	r2, r0
 800d066:	61e0      	str	r0, [r4, #28]
 800d068:	b920      	cbnz	r0, 800d074 <_Balloc+0x20>
 800d06a:	4b18      	ldr	r3, [pc, #96]	@ (800d0cc <_Balloc+0x78>)
 800d06c:	4818      	ldr	r0, [pc, #96]	@ (800d0d0 <_Balloc+0x7c>)
 800d06e:	216b      	movs	r1, #107	@ 0x6b
 800d070:	f000 fc26 	bl	800d8c0 <__assert_func>
 800d074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d078:	6006      	str	r6, [r0, #0]
 800d07a:	60c6      	str	r6, [r0, #12]
 800d07c:	69e6      	ldr	r6, [r4, #28]
 800d07e:	68f3      	ldr	r3, [r6, #12]
 800d080:	b183      	cbz	r3, 800d0a4 <_Balloc+0x50>
 800d082:	69e3      	ldr	r3, [r4, #28]
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d08a:	b9b8      	cbnz	r0, 800d0bc <_Balloc+0x68>
 800d08c:	2101      	movs	r1, #1
 800d08e:	fa01 f605 	lsl.w	r6, r1, r5
 800d092:	1d72      	adds	r2, r6, #5
 800d094:	0092      	lsls	r2, r2, #2
 800d096:	4620      	mov	r0, r4
 800d098:	f000 fc30 	bl	800d8fc <_calloc_r>
 800d09c:	b160      	cbz	r0, 800d0b8 <_Balloc+0x64>
 800d09e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d0a2:	e00e      	b.n	800d0c2 <_Balloc+0x6e>
 800d0a4:	2221      	movs	r2, #33	@ 0x21
 800d0a6:	2104      	movs	r1, #4
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fc27 	bl	800d8fc <_calloc_r>
 800d0ae:	69e3      	ldr	r3, [r4, #28]
 800d0b0:	60f0      	str	r0, [r6, #12]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1e4      	bne.n	800d082 <_Balloc+0x2e>
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	bd70      	pop	{r4, r5, r6, pc}
 800d0bc:	6802      	ldr	r2, [r0, #0]
 800d0be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0c8:	e7f7      	b.n	800d0ba <_Balloc+0x66>
 800d0ca:	bf00      	nop
 800d0cc:	0800ed75 	.word	0x0800ed75
 800d0d0:	0800edf5 	.word	0x0800edf5

0800d0d4 <_Bfree>:
 800d0d4:	b570      	push	{r4, r5, r6, lr}
 800d0d6:	69c6      	ldr	r6, [r0, #28]
 800d0d8:	4605      	mov	r5, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	b976      	cbnz	r6, 800d0fc <_Bfree+0x28>
 800d0de:	2010      	movs	r0, #16
 800d0e0:	f7ff ff02 	bl	800cee8 <malloc>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	61e8      	str	r0, [r5, #28]
 800d0e8:	b920      	cbnz	r0, 800d0f4 <_Bfree+0x20>
 800d0ea:	4b09      	ldr	r3, [pc, #36]	@ (800d110 <_Bfree+0x3c>)
 800d0ec:	4809      	ldr	r0, [pc, #36]	@ (800d114 <_Bfree+0x40>)
 800d0ee:	218f      	movs	r1, #143	@ 0x8f
 800d0f0:	f000 fbe6 	bl	800d8c0 <__assert_func>
 800d0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0f8:	6006      	str	r6, [r0, #0]
 800d0fa:	60c6      	str	r6, [r0, #12]
 800d0fc:	b13c      	cbz	r4, 800d10e <_Bfree+0x3a>
 800d0fe:	69eb      	ldr	r3, [r5, #28]
 800d100:	6862      	ldr	r2, [r4, #4]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d108:	6021      	str	r1, [r4, #0]
 800d10a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d10e:	bd70      	pop	{r4, r5, r6, pc}
 800d110:	0800ed75 	.word	0x0800ed75
 800d114:	0800edf5 	.word	0x0800edf5

0800d118 <__multadd>:
 800d118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d11c:	690d      	ldr	r5, [r1, #16]
 800d11e:	4607      	mov	r7, r0
 800d120:	460c      	mov	r4, r1
 800d122:	461e      	mov	r6, r3
 800d124:	f101 0c14 	add.w	ip, r1, #20
 800d128:	2000      	movs	r0, #0
 800d12a:	f8dc 3000 	ldr.w	r3, [ip]
 800d12e:	b299      	uxth	r1, r3
 800d130:	fb02 6101 	mla	r1, r2, r1, r6
 800d134:	0c1e      	lsrs	r6, r3, #16
 800d136:	0c0b      	lsrs	r3, r1, #16
 800d138:	fb02 3306 	mla	r3, r2, r6, r3
 800d13c:	b289      	uxth	r1, r1
 800d13e:	3001      	adds	r0, #1
 800d140:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d144:	4285      	cmp	r5, r0
 800d146:	f84c 1b04 	str.w	r1, [ip], #4
 800d14a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d14e:	dcec      	bgt.n	800d12a <__multadd+0x12>
 800d150:	b30e      	cbz	r6, 800d196 <__multadd+0x7e>
 800d152:	68a3      	ldr	r3, [r4, #8]
 800d154:	42ab      	cmp	r3, r5
 800d156:	dc19      	bgt.n	800d18c <__multadd+0x74>
 800d158:	6861      	ldr	r1, [r4, #4]
 800d15a:	4638      	mov	r0, r7
 800d15c:	3101      	adds	r1, #1
 800d15e:	f7ff ff79 	bl	800d054 <_Balloc>
 800d162:	4680      	mov	r8, r0
 800d164:	b928      	cbnz	r0, 800d172 <__multadd+0x5a>
 800d166:	4602      	mov	r2, r0
 800d168:	4b0c      	ldr	r3, [pc, #48]	@ (800d19c <__multadd+0x84>)
 800d16a:	480d      	ldr	r0, [pc, #52]	@ (800d1a0 <__multadd+0x88>)
 800d16c:	21ba      	movs	r1, #186	@ 0xba
 800d16e:	f000 fba7 	bl	800d8c0 <__assert_func>
 800d172:	6922      	ldr	r2, [r4, #16]
 800d174:	3202      	adds	r2, #2
 800d176:	f104 010c 	add.w	r1, r4, #12
 800d17a:	0092      	lsls	r2, r2, #2
 800d17c:	300c      	adds	r0, #12
 800d17e:	f7ff f872 	bl	800c266 <memcpy>
 800d182:	4621      	mov	r1, r4
 800d184:	4638      	mov	r0, r7
 800d186:	f7ff ffa5 	bl	800d0d4 <_Bfree>
 800d18a:	4644      	mov	r4, r8
 800d18c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d190:	3501      	adds	r5, #1
 800d192:	615e      	str	r6, [r3, #20]
 800d194:	6125      	str	r5, [r4, #16]
 800d196:	4620      	mov	r0, r4
 800d198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d19c:	0800ede4 	.word	0x0800ede4
 800d1a0:	0800edf5 	.word	0x0800edf5

0800d1a4 <__hi0bits>:
 800d1a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	bf36      	itet	cc
 800d1ac:	0403      	lslcc	r3, r0, #16
 800d1ae:	2000      	movcs	r0, #0
 800d1b0:	2010      	movcc	r0, #16
 800d1b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d1b6:	bf3c      	itt	cc
 800d1b8:	021b      	lslcc	r3, r3, #8
 800d1ba:	3008      	addcc	r0, #8
 800d1bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1c0:	bf3c      	itt	cc
 800d1c2:	011b      	lslcc	r3, r3, #4
 800d1c4:	3004      	addcc	r0, #4
 800d1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1ca:	bf3c      	itt	cc
 800d1cc:	009b      	lslcc	r3, r3, #2
 800d1ce:	3002      	addcc	r0, #2
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	db05      	blt.n	800d1e0 <__hi0bits+0x3c>
 800d1d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d1d8:	f100 0001 	add.w	r0, r0, #1
 800d1dc:	bf08      	it	eq
 800d1de:	2020      	moveq	r0, #32
 800d1e0:	4770      	bx	lr

0800d1e2 <__lo0bits>:
 800d1e2:	6803      	ldr	r3, [r0, #0]
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	f013 0007 	ands.w	r0, r3, #7
 800d1ea:	d00b      	beq.n	800d204 <__lo0bits+0x22>
 800d1ec:	07d9      	lsls	r1, r3, #31
 800d1ee:	d421      	bmi.n	800d234 <__lo0bits+0x52>
 800d1f0:	0798      	lsls	r0, r3, #30
 800d1f2:	bf49      	itett	mi
 800d1f4:	085b      	lsrmi	r3, r3, #1
 800d1f6:	089b      	lsrpl	r3, r3, #2
 800d1f8:	2001      	movmi	r0, #1
 800d1fa:	6013      	strmi	r3, [r2, #0]
 800d1fc:	bf5c      	itt	pl
 800d1fe:	6013      	strpl	r3, [r2, #0]
 800d200:	2002      	movpl	r0, #2
 800d202:	4770      	bx	lr
 800d204:	b299      	uxth	r1, r3
 800d206:	b909      	cbnz	r1, 800d20c <__lo0bits+0x2a>
 800d208:	0c1b      	lsrs	r3, r3, #16
 800d20a:	2010      	movs	r0, #16
 800d20c:	b2d9      	uxtb	r1, r3
 800d20e:	b909      	cbnz	r1, 800d214 <__lo0bits+0x32>
 800d210:	3008      	adds	r0, #8
 800d212:	0a1b      	lsrs	r3, r3, #8
 800d214:	0719      	lsls	r1, r3, #28
 800d216:	bf04      	itt	eq
 800d218:	091b      	lsreq	r3, r3, #4
 800d21a:	3004      	addeq	r0, #4
 800d21c:	0799      	lsls	r1, r3, #30
 800d21e:	bf04      	itt	eq
 800d220:	089b      	lsreq	r3, r3, #2
 800d222:	3002      	addeq	r0, #2
 800d224:	07d9      	lsls	r1, r3, #31
 800d226:	d403      	bmi.n	800d230 <__lo0bits+0x4e>
 800d228:	085b      	lsrs	r3, r3, #1
 800d22a:	f100 0001 	add.w	r0, r0, #1
 800d22e:	d003      	beq.n	800d238 <__lo0bits+0x56>
 800d230:	6013      	str	r3, [r2, #0]
 800d232:	4770      	bx	lr
 800d234:	2000      	movs	r0, #0
 800d236:	4770      	bx	lr
 800d238:	2020      	movs	r0, #32
 800d23a:	4770      	bx	lr

0800d23c <__i2b>:
 800d23c:	b510      	push	{r4, lr}
 800d23e:	460c      	mov	r4, r1
 800d240:	2101      	movs	r1, #1
 800d242:	f7ff ff07 	bl	800d054 <_Balloc>
 800d246:	4602      	mov	r2, r0
 800d248:	b928      	cbnz	r0, 800d256 <__i2b+0x1a>
 800d24a:	4b05      	ldr	r3, [pc, #20]	@ (800d260 <__i2b+0x24>)
 800d24c:	4805      	ldr	r0, [pc, #20]	@ (800d264 <__i2b+0x28>)
 800d24e:	f240 1145 	movw	r1, #325	@ 0x145
 800d252:	f000 fb35 	bl	800d8c0 <__assert_func>
 800d256:	2301      	movs	r3, #1
 800d258:	6144      	str	r4, [r0, #20]
 800d25a:	6103      	str	r3, [r0, #16]
 800d25c:	bd10      	pop	{r4, pc}
 800d25e:	bf00      	nop
 800d260:	0800ede4 	.word	0x0800ede4
 800d264:	0800edf5 	.word	0x0800edf5

0800d268 <__multiply>:
 800d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	4617      	mov	r7, r2
 800d26e:	690a      	ldr	r2, [r1, #16]
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	429a      	cmp	r2, r3
 800d274:	bfa8      	it	ge
 800d276:	463b      	movge	r3, r7
 800d278:	4689      	mov	r9, r1
 800d27a:	bfa4      	itt	ge
 800d27c:	460f      	movge	r7, r1
 800d27e:	4699      	movge	r9, r3
 800d280:	693d      	ldr	r5, [r7, #16]
 800d282:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	6879      	ldr	r1, [r7, #4]
 800d28a:	eb05 060a 	add.w	r6, r5, sl
 800d28e:	42b3      	cmp	r3, r6
 800d290:	b085      	sub	sp, #20
 800d292:	bfb8      	it	lt
 800d294:	3101      	addlt	r1, #1
 800d296:	f7ff fedd 	bl	800d054 <_Balloc>
 800d29a:	b930      	cbnz	r0, 800d2aa <__multiply+0x42>
 800d29c:	4602      	mov	r2, r0
 800d29e:	4b41      	ldr	r3, [pc, #260]	@ (800d3a4 <__multiply+0x13c>)
 800d2a0:	4841      	ldr	r0, [pc, #260]	@ (800d3a8 <__multiply+0x140>)
 800d2a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d2a6:	f000 fb0b 	bl	800d8c0 <__assert_func>
 800d2aa:	f100 0414 	add.w	r4, r0, #20
 800d2ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d2b2:	4623      	mov	r3, r4
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	4573      	cmp	r3, lr
 800d2b8:	d320      	bcc.n	800d2fc <__multiply+0x94>
 800d2ba:	f107 0814 	add.w	r8, r7, #20
 800d2be:	f109 0114 	add.w	r1, r9, #20
 800d2c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d2c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d2ca:	9302      	str	r3, [sp, #8]
 800d2cc:	1beb      	subs	r3, r5, r7
 800d2ce:	3b15      	subs	r3, #21
 800d2d0:	f023 0303 	bic.w	r3, r3, #3
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	3715      	adds	r7, #21
 800d2d8:	42bd      	cmp	r5, r7
 800d2da:	bf38      	it	cc
 800d2dc:	2304      	movcc	r3, #4
 800d2de:	9301      	str	r3, [sp, #4]
 800d2e0:	9b02      	ldr	r3, [sp, #8]
 800d2e2:	9103      	str	r1, [sp, #12]
 800d2e4:	428b      	cmp	r3, r1
 800d2e6:	d80c      	bhi.n	800d302 <__multiply+0x9a>
 800d2e8:	2e00      	cmp	r6, #0
 800d2ea:	dd03      	ble.n	800d2f4 <__multiply+0x8c>
 800d2ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d055      	beq.n	800d3a0 <__multiply+0x138>
 800d2f4:	6106      	str	r6, [r0, #16]
 800d2f6:	b005      	add	sp, #20
 800d2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2fc:	f843 2b04 	str.w	r2, [r3], #4
 800d300:	e7d9      	b.n	800d2b6 <__multiply+0x4e>
 800d302:	f8b1 a000 	ldrh.w	sl, [r1]
 800d306:	f1ba 0f00 	cmp.w	sl, #0
 800d30a:	d01f      	beq.n	800d34c <__multiply+0xe4>
 800d30c:	46c4      	mov	ip, r8
 800d30e:	46a1      	mov	r9, r4
 800d310:	2700      	movs	r7, #0
 800d312:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d316:	f8d9 3000 	ldr.w	r3, [r9]
 800d31a:	fa1f fb82 	uxth.w	fp, r2
 800d31e:	b29b      	uxth	r3, r3
 800d320:	fb0a 330b 	mla	r3, sl, fp, r3
 800d324:	443b      	add	r3, r7
 800d326:	f8d9 7000 	ldr.w	r7, [r9]
 800d32a:	0c12      	lsrs	r2, r2, #16
 800d32c:	0c3f      	lsrs	r7, r7, #16
 800d32e:	fb0a 7202 	mla	r2, sl, r2, r7
 800d332:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d336:	b29b      	uxth	r3, r3
 800d338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d33c:	4565      	cmp	r5, ip
 800d33e:	f849 3b04 	str.w	r3, [r9], #4
 800d342:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d346:	d8e4      	bhi.n	800d312 <__multiply+0xaa>
 800d348:	9b01      	ldr	r3, [sp, #4]
 800d34a:	50e7      	str	r7, [r4, r3]
 800d34c:	9b03      	ldr	r3, [sp, #12]
 800d34e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d352:	3104      	adds	r1, #4
 800d354:	f1b9 0f00 	cmp.w	r9, #0
 800d358:	d020      	beq.n	800d39c <__multiply+0x134>
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	4647      	mov	r7, r8
 800d35e:	46a4      	mov	ip, r4
 800d360:	f04f 0a00 	mov.w	sl, #0
 800d364:	f8b7 b000 	ldrh.w	fp, [r7]
 800d368:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d36c:	fb09 220b 	mla	r2, r9, fp, r2
 800d370:	4452      	add	r2, sl
 800d372:	b29b      	uxth	r3, r3
 800d374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d378:	f84c 3b04 	str.w	r3, [ip], #4
 800d37c:	f857 3b04 	ldr.w	r3, [r7], #4
 800d380:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d384:	f8bc 3000 	ldrh.w	r3, [ip]
 800d388:	fb09 330a 	mla	r3, r9, sl, r3
 800d38c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d390:	42bd      	cmp	r5, r7
 800d392:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d396:	d8e5      	bhi.n	800d364 <__multiply+0xfc>
 800d398:	9a01      	ldr	r2, [sp, #4]
 800d39a:	50a3      	str	r3, [r4, r2]
 800d39c:	3404      	adds	r4, #4
 800d39e:	e79f      	b.n	800d2e0 <__multiply+0x78>
 800d3a0:	3e01      	subs	r6, #1
 800d3a2:	e7a1      	b.n	800d2e8 <__multiply+0x80>
 800d3a4:	0800ede4 	.word	0x0800ede4
 800d3a8:	0800edf5 	.word	0x0800edf5

0800d3ac <__pow5mult>:
 800d3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b0:	4615      	mov	r5, r2
 800d3b2:	f012 0203 	ands.w	r2, r2, #3
 800d3b6:	4607      	mov	r7, r0
 800d3b8:	460e      	mov	r6, r1
 800d3ba:	d007      	beq.n	800d3cc <__pow5mult+0x20>
 800d3bc:	4c25      	ldr	r4, [pc, #148]	@ (800d454 <__pow5mult+0xa8>)
 800d3be:	3a01      	subs	r2, #1
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3c6:	f7ff fea7 	bl	800d118 <__multadd>
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	10ad      	asrs	r5, r5, #2
 800d3ce:	d03d      	beq.n	800d44c <__pow5mult+0xa0>
 800d3d0:	69fc      	ldr	r4, [r7, #28]
 800d3d2:	b97c      	cbnz	r4, 800d3f4 <__pow5mult+0x48>
 800d3d4:	2010      	movs	r0, #16
 800d3d6:	f7ff fd87 	bl	800cee8 <malloc>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	61f8      	str	r0, [r7, #28]
 800d3de:	b928      	cbnz	r0, 800d3ec <__pow5mult+0x40>
 800d3e0:	4b1d      	ldr	r3, [pc, #116]	@ (800d458 <__pow5mult+0xac>)
 800d3e2:	481e      	ldr	r0, [pc, #120]	@ (800d45c <__pow5mult+0xb0>)
 800d3e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d3e8:	f000 fa6a 	bl	800d8c0 <__assert_func>
 800d3ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3f0:	6004      	str	r4, [r0, #0]
 800d3f2:	60c4      	str	r4, [r0, #12]
 800d3f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d3f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3fc:	b94c      	cbnz	r4, 800d412 <__pow5mult+0x66>
 800d3fe:	f240 2171 	movw	r1, #625	@ 0x271
 800d402:	4638      	mov	r0, r7
 800d404:	f7ff ff1a 	bl	800d23c <__i2b>
 800d408:	2300      	movs	r3, #0
 800d40a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d40e:	4604      	mov	r4, r0
 800d410:	6003      	str	r3, [r0, #0]
 800d412:	f04f 0900 	mov.w	r9, #0
 800d416:	07eb      	lsls	r3, r5, #31
 800d418:	d50a      	bpl.n	800d430 <__pow5mult+0x84>
 800d41a:	4631      	mov	r1, r6
 800d41c:	4622      	mov	r2, r4
 800d41e:	4638      	mov	r0, r7
 800d420:	f7ff ff22 	bl	800d268 <__multiply>
 800d424:	4631      	mov	r1, r6
 800d426:	4680      	mov	r8, r0
 800d428:	4638      	mov	r0, r7
 800d42a:	f7ff fe53 	bl	800d0d4 <_Bfree>
 800d42e:	4646      	mov	r6, r8
 800d430:	106d      	asrs	r5, r5, #1
 800d432:	d00b      	beq.n	800d44c <__pow5mult+0xa0>
 800d434:	6820      	ldr	r0, [r4, #0]
 800d436:	b938      	cbnz	r0, 800d448 <__pow5mult+0x9c>
 800d438:	4622      	mov	r2, r4
 800d43a:	4621      	mov	r1, r4
 800d43c:	4638      	mov	r0, r7
 800d43e:	f7ff ff13 	bl	800d268 <__multiply>
 800d442:	6020      	str	r0, [r4, #0]
 800d444:	f8c0 9000 	str.w	r9, [r0]
 800d448:	4604      	mov	r4, r0
 800d44a:	e7e4      	b.n	800d416 <__pow5mult+0x6a>
 800d44c:	4630      	mov	r0, r6
 800d44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d452:	bf00      	nop
 800d454:	0800eea8 	.word	0x0800eea8
 800d458:	0800ed75 	.word	0x0800ed75
 800d45c:	0800edf5 	.word	0x0800edf5

0800d460 <__lshift>:
 800d460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d464:	460c      	mov	r4, r1
 800d466:	6849      	ldr	r1, [r1, #4]
 800d468:	6923      	ldr	r3, [r4, #16]
 800d46a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d46e:	68a3      	ldr	r3, [r4, #8]
 800d470:	4607      	mov	r7, r0
 800d472:	4691      	mov	r9, r2
 800d474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d478:	f108 0601 	add.w	r6, r8, #1
 800d47c:	42b3      	cmp	r3, r6
 800d47e:	db0b      	blt.n	800d498 <__lshift+0x38>
 800d480:	4638      	mov	r0, r7
 800d482:	f7ff fde7 	bl	800d054 <_Balloc>
 800d486:	4605      	mov	r5, r0
 800d488:	b948      	cbnz	r0, 800d49e <__lshift+0x3e>
 800d48a:	4602      	mov	r2, r0
 800d48c:	4b28      	ldr	r3, [pc, #160]	@ (800d530 <__lshift+0xd0>)
 800d48e:	4829      	ldr	r0, [pc, #164]	@ (800d534 <__lshift+0xd4>)
 800d490:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d494:	f000 fa14 	bl	800d8c0 <__assert_func>
 800d498:	3101      	adds	r1, #1
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	e7ee      	b.n	800d47c <__lshift+0x1c>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f100 0114 	add.w	r1, r0, #20
 800d4a4:	f100 0210 	add.w	r2, r0, #16
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	4553      	cmp	r3, sl
 800d4ac:	db33      	blt.n	800d516 <__lshift+0xb6>
 800d4ae:	6920      	ldr	r0, [r4, #16]
 800d4b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4b4:	f104 0314 	add.w	r3, r4, #20
 800d4b8:	f019 091f 	ands.w	r9, r9, #31
 800d4bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4c4:	d02b      	beq.n	800d51e <__lshift+0xbe>
 800d4c6:	f1c9 0e20 	rsb	lr, r9, #32
 800d4ca:	468a      	mov	sl, r1
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	6818      	ldr	r0, [r3, #0]
 800d4d0:	fa00 f009 	lsl.w	r0, r0, r9
 800d4d4:	4310      	orrs	r0, r2
 800d4d6:	f84a 0b04 	str.w	r0, [sl], #4
 800d4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4de:	459c      	cmp	ip, r3
 800d4e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4e4:	d8f3      	bhi.n	800d4ce <__lshift+0x6e>
 800d4e6:	ebac 0304 	sub.w	r3, ip, r4
 800d4ea:	3b15      	subs	r3, #21
 800d4ec:	f023 0303 	bic.w	r3, r3, #3
 800d4f0:	3304      	adds	r3, #4
 800d4f2:	f104 0015 	add.w	r0, r4, #21
 800d4f6:	4560      	cmp	r0, ip
 800d4f8:	bf88      	it	hi
 800d4fa:	2304      	movhi	r3, #4
 800d4fc:	50ca      	str	r2, [r1, r3]
 800d4fe:	b10a      	cbz	r2, 800d504 <__lshift+0xa4>
 800d500:	f108 0602 	add.w	r6, r8, #2
 800d504:	3e01      	subs	r6, #1
 800d506:	4638      	mov	r0, r7
 800d508:	612e      	str	r6, [r5, #16]
 800d50a:	4621      	mov	r1, r4
 800d50c:	f7ff fde2 	bl	800d0d4 <_Bfree>
 800d510:	4628      	mov	r0, r5
 800d512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d516:	f842 0f04 	str.w	r0, [r2, #4]!
 800d51a:	3301      	adds	r3, #1
 800d51c:	e7c5      	b.n	800d4aa <__lshift+0x4a>
 800d51e:	3904      	subs	r1, #4
 800d520:	f853 2b04 	ldr.w	r2, [r3], #4
 800d524:	f841 2f04 	str.w	r2, [r1, #4]!
 800d528:	459c      	cmp	ip, r3
 800d52a:	d8f9      	bhi.n	800d520 <__lshift+0xc0>
 800d52c:	e7ea      	b.n	800d504 <__lshift+0xa4>
 800d52e:	bf00      	nop
 800d530:	0800ede4 	.word	0x0800ede4
 800d534:	0800edf5 	.word	0x0800edf5

0800d538 <__mcmp>:
 800d538:	690a      	ldr	r2, [r1, #16]
 800d53a:	4603      	mov	r3, r0
 800d53c:	6900      	ldr	r0, [r0, #16]
 800d53e:	1a80      	subs	r0, r0, r2
 800d540:	b530      	push	{r4, r5, lr}
 800d542:	d10e      	bne.n	800d562 <__mcmp+0x2a>
 800d544:	3314      	adds	r3, #20
 800d546:	3114      	adds	r1, #20
 800d548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d54c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d558:	4295      	cmp	r5, r2
 800d55a:	d003      	beq.n	800d564 <__mcmp+0x2c>
 800d55c:	d205      	bcs.n	800d56a <__mcmp+0x32>
 800d55e:	f04f 30ff 	mov.w	r0, #4294967295
 800d562:	bd30      	pop	{r4, r5, pc}
 800d564:	42a3      	cmp	r3, r4
 800d566:	d3f3      	bcc.n	800d550 <__mcmp+0x18>
 800d568:	e7fb      	b.n	800d562 <__mcmp+0x2a>
 800d56a:	2001      	movs	r0, #1
 800d56c:	e7f9      	b.n	800d562 <__mcmp+0x2a>
	...

0800d570 <__mdiff>:
 800d570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d574:	4689      	mov	r9, r1
 800d576:	4606      	mov	r6, r0
 800d578:	4611      	mov	r1, r2
 800d57a:	4648      	mov	r0, r9
 800d57c:	4614      	mov	r4, r2
 800d57e:	f7ff ffdb 	bl	800d538 <__mcmp>
 800d582:	1e05      	subs	r5, r0, #0
 800d584:	d112      	bne.n	800d5ac <__mdiff+0x3c>
 800d586:	4629      	mov	r1, r5
 800d588:	4630      	mov	r0, r6
 800d58a:	f7ff fd63 	bl	800d054 <_Balloc>
 800d58e:	4602      	mov	r2, r0
 800d590:	b928      	cbnz	r0, 800d59e <__mdiff+0x2e>
 800d592:	4b3f      	ldr	r3, [pc, #252]	@ (800d690 <__mdiff+0x120>)
 800d594:	f240 2137 	movw	r1, #567	@ 0x237
 800d598:	483e      	ldr	r0, [pc, #248]	@ (800d694 <__mdiff+0x124>)
 800d59a:	f000 f991 	bl	800d8c0 <__assert_func>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	b003      	add	sp, #12
 800d5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ac:	bfbc      	itt	lt
 800d5ae:	464b      	movlt	r3, r9
 800d5b0:	46a1      	movlt	r9, r4
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d5b8:	bfba      	itte	lt
 800d5ba:	461c      	movlt	r4, r3
 800d5bc:	2501      	movlt	r5, #1
 800d5be:	2500      	movge	r5, #0
 800d5c0:	f7ff fd48 	bl	800d054 <_Balloc>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	b918      	cbnz	r0, 800d5d0 <__mdiff+0x60>
 800d5c8:	4b31      	ldr	r3, [pc, #196]	@ (800d690 <__mdiff+0x120>)
 800d5ca:	f240 2145 	movw	r1, #581	@ 0x245
 800d5ce:	e7e3      	b.n	800d598 <__mdiff+0x28>
 800d5d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d5d4:	6926      	ldr	r6, [r4, #16]
 800d5d6:	60c5      	str	r5, [r0, #12]
 800d5d8:	f109 0310 	add.w	r3, r9, #16
 800d5dc:	f109 0514 	add.w	r5, r9, #20
 800d5e0:	f104 0e14 	add.w	lr, r4, #20
 800d5e4:	f100 0b14 	add.w	fp, r0, #20
 800d5e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d5ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	46d9      	mov	r9, fp
 800d5f4:	f04f 0c00 	mov.w	ip, #0
 800d5f8:	9b01      	ldr	r3, [sp, #4]
 800d5fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d5fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d602:	9301      	str	r3, [sp, #4]
 800d604:	fa1f f38a 	uxth.w	r3, sl
 800d608:	4619      	mov	r1, r3
 800d60a:	b283      	uxth	r3, r0
 800d60c:	1acb      	subs	r3, r1, r3
 800d60e:	0c00      	lsrs	r0, r0, #16
 800d610:	4463      	add	r3, ip
 800d612:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d616:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d620:	4576      	cmp	r6, lr
 800d622:	f849 3b04 	str.w	r3, [r9], #4
 800d626:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d62a:	d8e5      	bhi.n	800d5f8 <__mdiff+0x88>
 800d62c:	1b33      	subs	r3, r6, r4
 800d62e:	3b15      	subs	r3, #21
 800d630:	f023 0303 	bic.w	r3, r3, #3
 800d634:	3415      	adds	r4, #21
 800d636:	3304      	adds	r3, #4
 800d638:	42a6      	cmp	r6, r4
 800d63a:	bf38      	it	cc
 800d63c:	2304      	movcc	r3, #4
 800d63e:	441d      	add	r5, r3
 800d640:	445b      	add	r3, fp
 800d642:	461e      	mov	r6, r3
 800d644:	462c      	mov	r4, r5
 800d646:	4544      	cmp	r4, r8
 800d648:	d30e      	bcc.n	800d668 <__mdiff+0xf8>
 800d64a:	f108 0103 	add.w	r1, r8, #3
 800d64e:	1b49      	subs	r1, r1, r5
 800d650:	f021 0103 	bic.w	r1, r1, #3
 800d654:	3d03      	subs	r5, #3
 800d656:	45a8      	cmp	r8, r5
 800d658:	bf38      	it	cc
 800d65a:	2100      	movcc	r1, #0
 800d65c:	440b      	add	r3, r1
 800d65e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d662:	b191      	cbz	r1, 800d68a <__mdiff+0x11a>
 800d664:	6117      	str	r7, [r2, #16]
 800d666:	e79d      	b.n	800d5a4 <__mdiff+0x34>
 800d668:	f854 1b04 	ldr.w	r1, [r4], #4
 800d66c:	46e6      	mov	lr, ip
 800d66e:	0c08      	lsrs	r0, r1, #16
 800d670:	fa1c fc81 	uxtah	ip, ip, r1
 800d674:	4471      	add	r1, lr
 800d676:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d67a:	b289      	uxth	r1, r1
 800d67c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d680:	f846 1b04 	str.w	r1, [r6], #4
 800d684:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d688:	e7dd      	b.n	800d646 <__mdiff+0xd6>
 800d68a:	3f01      	subs	r7, #1
 800d68c:	e7e7      	b.n	800d65e <__mdiff+0xee>
 800d68e:	bf00      	nop
 800d690:	0800ede4 	.word	0x0800ede4
 800d694:	0800edf5 	.word	0x0800edf5

0800d698 <__d2b>:
 800d698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d69c:	460f      	mov	r7, r1
 800d69e:	2101      	movs	r1, #1
 800d6a0:	ec59 8b10 	vmov	r8, r9, d0
 800d6a4:	4616      	mov	r6, r2
 800d6a6:	f7ff fcd5 	bl	800d054 <_Balloc>
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	b930      	cbnz	r0, 800d6bc <__d2b+0x24>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	4b23      	ldr	r3, [pc, #140]	@ (800d740 <__d2b+0xa8>)
 800d6b2:	4824      	ldr	r0, [pc, #144]	@ (800d744 <__d2b+0xac>)
 800d6b4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d6b8:	f000 f902 	bl	800d8c0 <__assert_func>
 800d6bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6c4:	b10d      	cbz	r5, 800d6ca <__d2b+0x32>
 800d6c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d6ca:	9301      	str	r3, [sp, #4]
 800d6cc:	f1b8 0300 	subs.w	r3, r8, #0
 800d6d0:	d023      	beq.n	800d71a <__d2b+0x82>
 800d6d2:	4668      	mov	r0, sp
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	f7ff fd84 	bl	800d1e2 <__lo0bits>
 800d6da:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d6de:	b1d0      	cbz	r0, 800d716 <__d2b+0x7e>
 800d6e0:	f1c0 0320 	rsb	r3, r0, #32
 800d6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e8:	430b      	orrs	r3, r1
 800d6ea:	40c2      	lsrs	r2, r0
 800d6ec:	6163      	str	r3, [r4, #20]
 800d6ee:	9201      	str	r2, [sp, #4]
 800d6f0:	9b01      	ldr	r3, [sp, #4]
 800d6f2:	61a3      	str	r3, [r4, #24]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	bf0c      	ite	eq
 800d6f8:	2201      	moveq	r2, #1
 800d6fa:	2202      	movne	r2, #2
 800d6fc:	6122      	str	r2, [r4, #16]
 800d6fe:	b1a5      	cbz	r5, 800d72a <__d2b+0x92>
 800d700:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d704:	4405      	add	r5, r0
 800d706:	603d      	str	r5, [r7, #0]
 800d708:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d70c:	6030      	str	r0, [r6, #0]
 800d70e:	4620      	mov	r0, r4
 800d710:	b003      	add	sp, #12
 800d712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d716:	6161      	str	r1, [r4, #20]
 800d718:	e7ea      	b.n	800d6f0 <__d2b+0x58>
 800d71a:	a801      	add	r0, sp, #4
 800d71c:	f7ff fd61 	bl	800d1e2 <__lo0bits>
 800d720:	9b01      	ldr	r3, [sp, #4]
 800d722:	6163      	str	r3, [r4, #20]
 800d724:	3020      	adds	r0, #32
 800d726:	2201      	movs	r2, #1
 800d728:	e7e8      	b.n	800d6fc <__d2b+0x64>
 800d72a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d72e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d732:	6038      	str	r0, [r7, #0]
 800d734:	6918      	ldr	r0, [r3, #16]
 800d736:	f7ff fd35 	bl	800d1a4 <__hi0bits>
 800d73a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d73e:	e7e5      	b.n	800d70c <__d2b+0x74>
 800d740:	0800ede4 	.word	0x0800ede4
 800d744:	0800edf5 	.word	0x0800edf5

0800d748 <__sflush_r>:
 800d748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d750:	0716      	lsls	r6, r2, #28
 800d752:	4605      	mov	r5, r0
 800d754:	460c      	mov	r4, r1
 800d756:	d454      	bmi.n	800d802 <__sflush_r+0xba>
 800d758:	684b      	ldr	r3, [r1, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	dc02      	bgt.n	800d764 <__sflush_r+0x1c>
 800d75e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d760:	2b00      	cmp	r3, #0
 800d762:	dd48      	ble.n	800d7f6 <__sflush_r+0xae>
 800d764:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d766:	2e00      	cmp	r6, #0
 800d768:	d045      	beq.n	800d7f6 <__sflush_r+0xae>
 800d76a:	2300      	movs	r3, #0
 800d76c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d770:	682f      	ldr	r7, [r5, #0]
 800d772:	6a21      	ldr	r1, [r4, #32]
 800d774:	602b      	str	r3, [r5, #0]
 800d776:	d030      	beq.n	800d7da <__sflush_r+0x92>
 800d778:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	0759      	lsls	r1, r3, #29
 800d77e:	d505      	bpl.n	800d78c <__sflush_r+0x44>
 800d780:	6863      	ldr	r3, [r4, #4]
 800d782:	1ad2      	subs	r2, r2, r3
 800d784:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d786:	b10b      	cbz	r3, 800d78c <__sflush_r+0x44>
 800d788:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d78a:	1ad2      	subs	r2, r2, r3
 800d78c:	2300      	movs	r3, #0
 800d78e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d790:	6a21      	ldr	r1, [r4, #32]
 800d792:	4628      	mov	r0, r5
 800d794:	47b0      	blx	r6
 800d796:	1c43      	adds	r3, r0, #1
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	d106      	bne.n	800d7aa <__sflush_r+0x62>
 800d79c:	6829      	ldr	r1, [r5, #0]
 800d79e:	291d      	cmp	r1, #29
 800d7a0:	d82b      	bhi.n	800d7fa <__sflush_r+0xb2>
 800d7a2:	4a2a      	ldr	r2, [pc, #168]	@ (800d84c <__sflush_r+0x104>)
 800d7a4:	40ca      	lsrs	r2, r1
 800d7a6:	07d6      	lsls	r6, r2, #31
 800d7a8:	d527      	bpl.n	800d7fa <__sflush_r+0xb2>
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	6062      	str	r2, [r4, #4]
 800d7ae:	04d9      	lsls	r1, r3, #19
 800d7b0:	6922      	ldr	r2, [r4, #16]
 800d7b2:	6022      	str	r2, [r4, #0]
 800d7b4:	d504      	bpl.n	800d7c0 <__sflush_r+0x78>
 800d7b6:	1c42      	adds	r2, r0, #1
 800d7b8:	d101      	bne.n	800d7be <__sflush_r+0x76>
 800d7ba:	682b      	ldr	r3, [r5, #0]
 800d7bc:	b903      	cbnz	r3, 800d7c0 <__sflush_r+0x78>
 800d7be:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7c2:	602f      	str	r7, [r5, #0]
 800d7c4:	b1b9      	cbz	r1, 800d7f6 <__sflush_r+0xae>
 800d7c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7ca:	4299      	cmp	r1, r3
 800d7cc:	d002      	beq.n	800d7d4 <__sflush_r+0x8c>
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f7ff fb40 	bl	800ce54 <_free_r>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7d8:	e00d      	b.n	800d7f6 <__sflush_r+0xae>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	4628      	mov	r0, r5
 800d7de:	47b0      	blx	r6
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	1c50      	adds	r0, r2, #1
 800d7e4:	d1c9      	bne.n	800d77a <__sflush_r+0x32>
 800d7e6:	682b      	ldr	r3, [r5, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d0c6      	beq.n	800d77a <__sflush_r+0x32>
 800d7ec:	2b1d      	cmp	r3, #29
 800d7ee:	d001      	beq.n	800d7f4 <__sflush_r+0xac>
 800d7f0:	2b16      	cmp	r3, #22
 800d7f2:	d11e      	bne.n	800d832 <__sflush_r+0xea>
 800d7f4:	602f      	str	r7, [r5, #0]
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	e022      	b.n	800d840 <__sflush_r+0xf8>
 800d7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7fe:	b21b      	sxth	r3, r3
 800d800:	e01b      	b.n	800d83a <__sflush_r+0xf2>
 800d802:	690f      	ldr	r7, [r1, #16]
 800d804:	2f00      	cmp	r7, #0
 800d806:	d0f6      	beq.n	800d7f6 <__sflush_r+0xae>
 800d808:	0793      	lsls	r3, r2, #30
 800d80a:	680e      	ldr	r6, [r1, #0]
 800d80c:	bf08      	it	eq
 800d80e:	694b      	ldreq	r3, [r1, #20]
 800d810:	600f      	str	r7, [r1, #0]
 800d812:	bf18      	it	ne
 800d814:	2300      	movne	r3, #0
 800d816:	eba6 0807 	sub.w	r8, r6, r7
 800d81a:	608b      	str	r3, [r1, #8]
 800d81c:	f1b8 0f00 	cmp.w	r8, #0
 800d820:	dde9      	ble.n	800d7f6 <__sflush_r+0xae>
 800d822:	6a21      	ldr	r1, [r4, #32]
 800d824:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d826:	4643      	mov	r3, r8
 800d828:	463a      	mov	r2, r7
 800d82a:	4628      	mov	r0, r5
 800d82c:	47b0      	blx	r6
 800d82e:	2800      	cmp	r0, #0
 800d830:	dc08      	bgt.n	800d844 <__sflush_r+0xfc>
 800d832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d83a:	81a3      	strh	r3, [r4, #12]
 800d83c:	f04f 30ff 	mov.w	r0, #4294967295
 800d840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d844:	4407      	add	r7, r0
 800d846:	eba8 0800 	sub.w	r8, r8, r0
 800d84a:	e7e7      	b.n	800d81c <__sflush_r+0xd4>
 800d84c:	20400001 	.word	0x20400001

0800d850 <_fflush_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	690b      	ldr	r3, [r1, #16]
 800d854:	4605      	mov	r5, r0
 800d856:	460c      	mov	r4, r1
 800d858:	b913      	cbnz	r3, 800d860 <_fflush_r+0x10>
 800d85a:	2500      	movs	r5, #0
 800d85c:	4628      	mov	r0, r5
 800d85e:	bd38      	pop	{r3, r4, r5, pc}
 800d860:	b118      	cbz	r0, 800d86a <_fflush_r+0x1a>
 800d862:	6a03      	ldr	r3, [r0, #32]
 800d864:	b90b      	cbnz	r3, 800d86a <_fflush_r+0x1a>
 800d866:	f7fe fc05 	bl	800c074 <__sinit>
 800d86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d0f3      	beq.n	800d85a <_fflush_r+0xa>
 800d872:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d874:	07d0      	lsls	r0, r2, #31
 800d876:	d404      	bmi.n	800d882 <_fflush_r+0x32>
 800d878:	0599      	lsls	r1, r3, #22
 800d87a:	d402      	bmi.n	800d882 <_fflush_r+0x32>
 800d87c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d87e:	f7fe fcf0 	bl	800c262 <__retarget_lock_acquire_recursive>
 800d882:	4628      	mov	r0, r5
 800d884:	4621      	mov	r1, r4
 800d886:	f7ff ff5f 	bl	800d748 <__sflush_r>
 800d88a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d88c:	07da      	lsls	r2, r3, #31
 800d88e:	4605      	mov	r5, r0
 800d890:	d4e4      	bmi.n	800d85c <_fflush_r+0xc>
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	059b      	lsls	r3, r3, #22
 800d896:	d4e1      	bmi.n	800d85c <_fflush_r+0xc>
 800d898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d89a:	f7fe fce3 	bl	800c264 <__retarget_lock_release_recursive>
 800d89e:	e7dd      	b.n	800d85c <_fflush_r+0xc>

0800d8a0 <_sbrk_r>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	4d06      	ldr	r5, [pc, #24]	@ (800d8bc <_sbrk_r+0x1c>)
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	602b      	str	r3, [r5, #0]
 800d8ac:	f7f3 ffce 	bl	800184c <_sbrk>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d102      	bne.n	800d8ba <_sbrk_r+0x1a>
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	b103      	cbz	r3, 800d8ba <_sbrk_r+0x1a>
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
 800d8bc:	240016b8 	.word	0x240016b8

0800d8c0 <__assert_func>:
 800d8c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8c2:	4614      	mov	r4, r2
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	4b09      	ldr	r3, [pc, #36]	@ (800d8ec <__assert_func+0x2c>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4605      	mov	r5, r0
 800d8cc:	68d8      	ldr	r0, [r3, #12]
 800d8ce:	b14c      	cbz	r4, 800d8e4 <__assert_func+0x24>
 800d8d0:	4b07      	ldr	r3, [pc, #28]	@ (800d8f0 <__assert_func+0x30>)
 800d8d2:	9100      	str	r1, [sp, #0]
 800d8d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8d8:	4906      	ldr	r1, [pc, #24]	@ (800d8f4 <__assert_func+0x34>)
 800d8da:	462b      	mov	r3, r5
 800d8dc:	f000 f842 	bl	800d964 <fiprintf>
 800d8e0:	f000 f852 	bl	800d988 <abort>
 800d8e4:	4b04      	ldr	r3, [pc, #16]	@ (800d8f8 <__assert_func+0x38>)
 800d8e6:	461c      	mov	r4, r3
 800d8e8:	e7f3      	b.n	800d8d2 <__assert_func+0x12>
 800d8ea:	bf00      	nop
 800d8ec:	24000028 	.word	0x24000028
 800d8f0:	0800ee58 	.word	0x0800ee58
 800d8f4:	0800ee65 	.word	0x0800ee65
 800d8f8:	0800ee93 	.word	0x0800ee93

0800d8fc <_calloc_r>:
 800d8fc:	b570      	push	{r4, r5, r6, lr}
 800d8fe:	fba1 5402 	umull	r5, r4, r1, r2
 800d902:	b934      	cbnz	r4, 800d912 <_calloc_r+0x16>
 800d904:	4629      	mov	r1, r5
 800d906:	f7ff fb19 	bl	800cf3c <_malloc_r>
 800d90a:	4606      	mov	r6, r0
 800d90c:	b928      	cbnz	r0, 800d91a <_calloc_r+0x1e>
 800d90e:	4630      	mov	r0, r6
 800d910:	bd70      	pop	{r4, r5, r6, pc}
 800d912:	220c      	movs	r2, #12
 800d914:	6002      	str	r2, [r0, #0]
 800d916:	2600      	movs	r6, #0
 800d918:	e7f9      	b.n	800d90e <_calloc_r+0x12>
 800d91a:	462a      	mov	r2, r5
 800d91c:	4621      	mov	r1, r4
 800d91e:	f7fe fc22 	bl	800c166 <memset>
 800d922:	e7f4      	b.n	800d90e <_calloc_r+0x12>

0800d924 <__ascii_mbtowc>:
 800d924:	b082      	sub	sp, #8
 800d926:	b901      	cbnz	r1, 800d92a <__ascii_mbtowc+0x6>
 800d928:	a901      	add	r1, sp, #4
 800d92a:	b142      	cbz	r2, 800d93e <__ascii_mbtowc+0x1a>
 800d92c:	b14b      	cbz	r3, 800d942 <__ascii_mbtowc+0x1e>
 800d92e:	7813      	ldrb	r3, [r2, #0]
 800d930:	600b      	str	r3, [r1, #0]
 800d932:	7812      	ldrb	r2, [r2, #0]
 800d934:	1e10      	subs	r0, r2, #0
 800d936:	bf18      	it	ne
 800d938:	2001      	movne	r0, #1
 800d93a:	b002      	add	sp, #8
 800d93c:	4770      	bx	lr
 800d93e:	4610      	mov	r0, r2
 800d940:	e7fb      	b.n	800d93a <__ascii_mbtowc+0x16>
 800d942:	f06f 0001 	mvn.w	r0, #1
 800d946:	e7f8      	b.n	800d93a <__ascii_mbtowc+0x16>

0800d948 <__ascii_wctomb>:
 800d948:	4603      	mov	r3, r0
 800d94a:	4608      	mov	r0, r1
 800d94c:	b141      	cbz	r1, 800d960 <__ascii_wctomb+0x18>
 800d94e:	2aff      	cmp	r2, #255	@ 0xff
 800d950:	d904      	bls.n	800d95c <__ascii_wctomb+0x14>
 800d952:	228a      	movs	r2, #138	@ 0x8a
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	f04f 30ff 	mov.w	r0, #4294967295
 800d95a:	4770      	bx	lr
 800d95c:	700a      	strb	r2, [r1, #0]
 800d95e:	2001      	movs	r0, #1
 800d960:	4770      	bx	lr
	...

0800d964 <fiprintf>:
 800d964:	b40e      	push	{r1, r2, r3}
 800d966:	b503      	push	{r0, r1, lr}
 800d968:	4601      	mov	r1, r0
 800d96a:	ab03      	add	r3, sp, #12
 800d96c:	4805      	ldr	r0, [pc, #20]	@ (800d984 <fiprintf+0x20>)
 800d96e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d972:	6800      	ldr	r0, [r0, #0]
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	f000 f837 	bl	800d9e8 <_vfiprintf_r>
 800d97a:	b002      	add	sp, #8
 800d97c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d980:	b003      	add	sp, #12
 800d982:	4770      	bx	lr
 800d984:	24000028 	.word	0x24000028

0800d988 <abort>:
 800d988:	b508      	push	{r3, lr}
 800d98a:	2006      	movs	r0, #6
 800d98c:	f000 fa00 	bl	800dd90 <raise>
 800d990:	2001      	movs	r0, #1
 800d992:	f7f3 fee3 	bl	800175c <_exit>

0800d996 <__sfputc_r>:
 800d996:	6893      	ldr	r3, [r2, #8]
 800d998:	3b01      	subs	r3, #1
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	b410      	push	{r4}
 800d99e:	6093      	str	r3, [r2, #8]
 800d9a0:	da08      	bge.n	800d9b4 <__sfputc_r+0x1e>
 800d9a2:	6994      	ldr	r4, [r2, #24]
 800d9a4:	42a3      	cmp	r3, r4
 800d9a6:	db01      	blt.n	800d9ac <__sfputc_r+0x16>
 800d9a8:	290a      	cmp	r1, #10
 800d9aa:	d103      	bne.n	800d9b4 <__sfputc_r+0x1e>
 800d9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9b0:	f000 b932 	b.w	800dc18 <__swbuf_r>
 800d9b4:	6813      	ldr	r3, [r2, #0]
 800d9b6:	1c58      	adds	r0, r3, #1
 800d9b8:	6010      	str	r0, [r2, #0]
 800d9ba:	7019      	strb	r1, [r3, #0]
 800d9bc:	4608      	mov	r0, r1
 800d9be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <__sfputs_r>:
 800d9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	460f      	mov	r7, r1
 800d9ca:	4614      	mov	r4, r2
 800d9cc:	18d5      	adds	r5, r2, r3
 800d9ce:	42ac      	cmp	r4, r5
 800d9d0:	d101      	bne.n	800d9d6 <__sfputs_r+0x12>
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	e007      	b.n	800d9e6 <__sfputs_r+0x22>
 800d9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9da:	463a      	mov	r2, r7
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f7ff ffda 	bl	800d996 <__sfputc_r>
 800d9e2:	1c43      	adds	r3, r0, #1
 800d9e4:	d1f3      	bne.n	800d9ce <__sfputs_r+0xa>
 800d9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9e8 <_vfiprintf_r>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	460d      	mov	r5, r1
 800d9ee:	b09d      	sub	sp, #116	@ 0x74
 800d9f0:	4614      	mov	r4, r2
 800d9f2:	4698      	mov	r8, r3
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	b118      	cbz	r0, 800da00 <_vfiprintf_r+0x18>
 800d9f8:	6a03      	ldr	r3, [r0, #32]
 800d9fa:	b90b      	cbnz	r3, 800da00 <_vfiprintf_r+0x18>
 800d9fc:	f7fe fb3a 	bl	800c074 <__sinit>
 800da00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da02:	07d9      	lsls	r1, r3, #31
 800da04:	d405      	bmi.n	800da12 <_vfiprintf_r+0x2a>
 800da06:	89ab      	ldrh	r3, [r5, #12]
 800da08:	059a      	lsls	r2, r3, #22
 800da0a:	d402      	bmi.n	800da12 <_vfiprintf_r+0x2a>
 800da0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da0e:	f7fe fc28 	bl	800c262 <__retarget_lock_acquire_recursive>
 800da12:	89ab      	ldrh	r3, [r5, #12]
 800da14:	071b      	lsls	r3, r3, #28
 800da16:	d501      	bpl.n	800da1c <_vfiprintf_r+0x34>
 800da18:	692b      	ldr	r3, [r5, #16]
 800da1a:	b99b      	cbnz	r3, 800da44 <_vfiprintf_r+0x5c>
 800da1c:	4629      	mov	r1, r5
 800da1e:	4630      	mov	r0, r6
 800da20:	f000 f938 	bl	800dc94 <__swsetup_r>
 800da24:	b170      	cbz	r0, 800da44 <_vfiprintf_r+0x5c>
 800da26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da28:	07dc      	lsls	r4, r3, #31
 800da2a:	d504      	bpl.n	800da36 <_vfiprintf_r+0x4e>
 800da2c:	f04f 30ff 	mov.w	r0, #4294967295
 800da30:	b01d      	add	sp, #116	@ 0x74
 800da32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	0598      	lsls	r0, r3, #22
 800da3a:	d4f7      	bmi.n	800da2c <_vfiprintf_r+0x44>
 800da3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da3e:	f7fe fc11 	bl	800c264 <__retarget_lock_release_recursive>
 800da42:	e7f3      	b.n	800da2c <_vfiprintf_r+0x44>
 800da44:	2300      	movs	r3, #0
 800da46:	9309      	str	r3, [sp, #36]	@ 0x24
 800da48:	2320      	movs	r3, #32
 800da4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800da52:	2330      	movs	r3, #48	@ 0x30
 800da54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc04 <_vfiprintf_r+0x21c>
 800da58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da5c:	f04f 0901 	mov.w	r9, #1
 800da60:	4623      	mov	r3, r4
 800da62:	469a      	mov	sl, r3
 800da64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da68:	b10a      	cbz	r2, 800da6e <_vfiprintf_r+0x86>
 800da6a:	2a25      	cmp	r2, #37	@ 0x25
 800da6c:	d1f9      	bne.n	800da62 <_vfiprintf_r+0x7a>
 800da6e:	ebba 0b04 	subs.w	fp, sl, r4
 800da72:	d00b      	beq.n	800da8c <_vfiprintf_r+0xa4>
 800da74:	465b      	mov	r3, fp
 800da76:	4622      	mov	r2, r4
 800da78:	4629      	mov	r1, r5
 800da7a:	4630      	mov	r0, r6
 800da7c:	f7ff ffa2 	bl	800d9c4 <__sfputs_r>
 800da80:	3001      	adds	r0, #1
 800da82:	f000 80a7 	beq.w	800dbd4 <_vfiprintf_r+0x1ec>
 800da86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da88:	445a      	add	r2, fp
 800da8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800da8c:	f89a 3000 	ldrb.w	r3, [sl]
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 809f 	beq.w	800dbd4 <_vfiprintf_r+0x1ec>
 800da96:	2300      	movs	r3, #0
 800da98:	f04f 32ff 	mov.w	r2, #4294967295
 800da9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daa0:	f10a 0a01 	add.w	sl, sl, #1
 800daa4:	9304      	str	r3, [sp, #16]
 800daa6:	9307      	str	r3, [sp, #28]
 800daa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800daac:	931a      	str	r3, [sp, #104]	@ 0x68
 800daae:	4654      	mov	r4, sl
 800dab0:	2205      	movs	r2, #5
 800dab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dab6:	4853      	ldr	r0, [pc, #332]	@ (800dc04 <_vfiprintf_r+0x21c>)
 800dab8:	f7f2 fc1a 	bl	80002f0 <memchr>
 800dabc:	9a04      	ldr	r2, [sp, #16]
 800dabe:	b9d8      	cbnz	r0, 800daf8 <_vfiprintf_r+0x110>
 800dac0:	06d1      	lsls	r1, r2, #27
 800dac2:	bf44      	itt	mi
 800dac4:	2320      	movmi	r3, #32
 800dac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daca:	0713      	lsls	r3, r2, #28
 800dacc:	bf44      	itt	mi
 800dace:	232b      	movmi	r3, #43	@ 0x2b
 800dad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dad4:	f89a 3000 	ldrb.w	r3, [sl]
 800dad8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dada:	d015      	beq.n	800db08 <_vfiprintf_r+0x120>
 800dadc:	9a07      	ldr	r2, [sp, #28]
 800dade:	4654      	mov	r4, sl
 800dae0:	2000      	movs	r0, #0
 800dae2:	f04f 0c0a 	mov.w	ip, #10
 800dae6:	4621      	mov	r1, r4
 800dae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daec:	3b30      	subs	r3, #48	@ 0x30
 800daee:	2b09      	cmp	r3, #9
 800daf0:	d94b      	bls.n	800db8a <_vfiprintf_r+0x1a2>
 800daf2:	b1b0      	cbz	r0, 800db22 <_vfiprintf_r+0x13a>
 800daf4:	9207      	str	r2, [sp, #28]
 800daf6:	e014      	b.n	800db22 <_vfiprintf_r+0x13a>
 800daf8:	eba0 0308 	sub.w	r3, r0, r8
 800dafc:	fa09 f303 	lsl.w	r3, r9, r3
 800db00:	4313      	orrs	r3, r2
 800db02:	9304      	str	r3, [sp, #16]
 800db04:	46a2      	mov	sl, r4
 800db06:	e7d2      	b.n	800daae <_vfiprintf_r+0xc6>
 800db08:	9b03      	ldr	r3, [sp, #12]
 800db0a:	1d19      	adds	r1, r3, #4
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	9103      	str	r1, [sp, #12]
 800db10:	2b00      	cmp	r3, #0
 800db12:	bfbb      	ittet	lt
 800db14:	425b      	neglt	r3, r3
 800db16:	f042 0202 	orrlt.w	r2, r2, #2
 800db1a:	9307      	strge	r3, [sp, #28]
 800db1c:	9307      	strlt	r3, [sp, #28]
 800db1e:	bfb8      	it	lt
 800db20:	9204      	strlt	r2, [sp, #16]
 800db22:	7823      	ldrb	r3, [r4, #0]
 800db24:	2b2e      	cmp	r3, #46	@ 0x2e
 800db26:	d10a      	bne.n	800db3e <_vfiprintf_r+0x156>
 800db28:	7863      	ldrb	r3, [r4, #1]
 800db2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800db2c:	d132      	bne.n	800db94 <_vfiprintf_r+0x1ac>
 800db2e:	9b03      	ldr	r3, [sp, #12]
 800db30:	1d1a      	adds	r2, r3, #4
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	9203      	str	r2, [sp, #12]
 800db36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db3a:	3402      	adds	r4, #2
 800db3c:	9305      	str	r3, [sp, #20]
 800db3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc14 <_vfiprintf_r+0x22c>
 800db42:	7821      	ldrb	r1, [r4, #0]
 800db44:	2203      	movs	r2, #3
 800db46:	4650      	mov	r0, sl
 800db48:	f7f2 fbd2 	bl	80002f0 <memchr>
 800db4c:	b138      	cbz	r0, 800db5e <_vfiprintf_r+0x176>
 800db4e:	9b04      	ldr	r3, [sp, #16]
 800db50:	eba0 000a 	sub.w	r0, r0, sl
 800db54:	2240      	movs	r2, #64	@ 0x40
 800db56:	4082      	lsls	r2, r0
 800db58:	4313      	orrs	r3, r2
 800db5a:	3401      	adds	r4, #1
 800db5c:	9304      	str	r3, [sp, #16]
 800db5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db62:	4829      	ldr	r0, [pc, #164]	@ (800dc08 <_vfiprintf_r+0x220>)
 800db64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db68:	2206      	movs	r2, #6
 800db6a:	f7f2 fbc1 	bl	80002f0 <memchr>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d03f      	beq.n	800dbf2 <_vfiprintf_r+0x20a>
 800db72:	4b26      	ldr	r3, [pc, #152]	@ (800dc0c <_vfiprintf_r+0x224>)
 800db74:	bb1b      	cbnz	r3, 800dbbe <_vfiprintf_r+0x1d6>
 800db76:	9b03      	ldr	r3, [sp, #12]
 800db78:	3307      	adds	r3, #7
 800db7a:	f023 0307 	bic.w	r3, r3, #7
 800db7e:	3308      	adds	r3, #8
 800db80:	9303      	str	r3, [sp, #12]
 800db82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db84:	443b      	add	r3, r7
 800db86:	9309      	str	r3, [sp, #36]	@ 0x24
 800db88:	e76a      	b.n	800da60 <_vfiprintf_r+0x78>
 800db8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800db8e:	460c      	mov	r4, r1
 800db90:	2001      	movs	r0, #1
 800db92:	e7a8      	b.n	800dae6 <_vfiprintf_r+0xfe>
 800db94:	2300      	movs	r3, #0
 800db96:	3401      	adds	r4, #1
 800db98:	9305      	str	r3, [sp, #20]
 800db9a:	4619      	mov	r1, r3
 800db9c:	f04f 0c0a 	mov.w	ip, #10
 800dba0:	4620      	mov	r0, r4
 800dba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dba6:	3a30      	subs	r2, #48	@ 0x30
 800dba8:	2a09      	cmp	r2, #9
 800dbaa:	d903      	bls.n	800dbb4 <_vfiprintf_r+0x1cc>
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d0c6      	beq.n	800db3e <_vfiprintf_r+0x156>
 800dbb0:	9105      	str	r1, [sp, #20]
 800dbb2:	e7c4      	b.n	800db3e <_vfiprintf_r+0x156>
 800dbb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbb8:	4604      	mov	r4, r0
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e7f0      	b.n	800dba0 <_vfiprintf_r+0x1b8>
 800dbbe:	ab03      	add	r3, sp, #12
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	4b12      	ldr	r3, [pc, #72]	@ (800dc10 <_vfiprintf_r+0x228>)
 800dbc6:	a904      	add	r1, sp, #16
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f7fd fe21 	bl	800b810 <_printf_float>
 800dbce:	4607      	mov	r7, r0
 800dbd0:	1c78      	adds	r0, r7, #1
 800dbd2:	d1d6      	bne.n	800db82 <_vfiprintf_r+0x19a>
 800dbd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbd6:	07d9      	lsls	r1, r3, #31
 800dbd8:	d405      	bmi.n	800dbe6 <_vfiprintf_r+0x1fe>
 800dbda:	89ab      	ldrh	r3, [r5, #12]
 800dbdc:	059a      	lsls	r2, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_vfiprintf_r+0x1fe>
 800dbe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbe2:	f7fe fb3f 	bl	800c264 <__retarget_lock_release_recursive>
 800dbe6:	89ab      	ldrh	r3, [r5, #12]
 800dbe8:	065b      	lsls	r3, r3, #25
 800dbea:	f53f af1f 	bmi.w	800da2c <_vfiprintf_r+0x44>
 800dbee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbf0:	e71e      	b.n	800da30 <_vfiprintf_r+0x48>
 800dbf2:	ab03      	add	r3, sp, #12
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	462a      	mov	r2, r5
 800dbf8:	4b05      	ldr	r3, [pc, #20]	@ (800dc10 <_vfiprintf_r+0x228>)
 800dbfa:	a904      	add	r1, sp, #16
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f7fe f88f 	bl	800bd20 <_printf_i>
 800dc02:	e7e4      	b.n	800dbce <_vfiprintf_r+0x1e6>
 800dc04:	0800ee94 	.word	0x0800ee94
 800dc08:	0800ee9e 	.word	0x0800ee9e
 800dc0c:	0800b811 	.word	0x0800b811
 800dc10:	0800d9c5 	.word	0x0800d9c5
 800dc14:	0800ee9a 	.word	0x0800ee9a

0800dc18 <__swbuf_r>:
 800dc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1a:	460e      	mov	r6, r1
 800dc1c:	4614      	mov	r4, r2
 800dc1e:	4605      	mov	r5, r0
 800dc20:	b118      	cbz	r0, 800dc2a <__swbuf_r+0x12>
 800dc22:	6a03      	ldr	r3, [r0, #32]
 800dc24:	b90b      	cbnz	r3, 800dc2a <__swbuf_r+0x12>
 800dc26:	f7fe fa25 	bl	800c074 <__sinit>
 800dc2a:	69a3      	ldr	r3, [r4, #24]
 800dc2c:	60a3      	str	r3, [r4, #8]
 800dc2e:	89a3      	ldrh	r3, [r4, #12]
 800dc30:	071a      	lsls	r2, r3, #28
 800dc32:	d501      	bpl.n	800dc38 <__swbuf_r+0x20>
 800dc34:	6923      	ldr	r3, [r4, #16]
 800dc36:	b943      	cbnz	r3, 800dc4a <__swbuf_r+0x32>
 800dc38:	4621      	mov	r1, r4
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	f000 f82a 	bl	800dc94 <__swsetup_r>
 800dc40:	b118      	cbz	r0, 800dc4a <__swbuf_r+0x32>
 800dc42:	f04f 37ff 	mov.w	r7, #4294967295
 800dc46:	4638      	mov	r0, r7
 800dc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	6922      	ldr	r2, [r4, #16]
 800dc4e:	1a98      	subs	r0, r3, r2
 800dc50:	6963      	ldr	r3, [r4, #20]
 800dc52:	b2f6      	uxtb	r6, r6
 800dc54:	4283      	cmp	r3, r0
 800dc56:	4637      	mov	r7, r6
 800dc58:	dc05      	bgt.n	800dc66 <__swbuf_r+0x4e>
 800dc5a:	4621      	mov	r1, r4
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	f7ff fdf7 	bl	800d850 <_fflush_r>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	d1ed      	bne.n	800dc42 <__swbuf_r+0x2a>
 800dc66:	68a3      	ldr	r3, [r4, #8]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	60a3      	str	r3, [r4, #8]
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	6022      	str	r2, [r4, #0]
 800dc72:	701e      	strb	r6, [r3, #0]
 800dc74:	6962      	ldr	r2, [r4, #20]
 800dc76:	1c43      	adds	r3, r0, #1
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d004      	beq.n	800dc86 <__swbuf_r+0x6e>
 800dc7c:	89a3      	ldrh	r3, [r4, #12]
 800dc7e:	07db      	lsls	r3, r3, #31
 800dc80:	d5e1      	bpl.n	800dc46 <__swbuf_r+0x2e>
 800dc82:	2e0a      	cmp	r6, #10
 800dc84:	d1df      	bne.n	800dc46 <__swbuf_r+0x2e>
 800dc86:	4621      	mov	r1, r4
 800dc88:	4628      	mov	r0, r5
 800dc8a:	f7ff fde1 	bl	800d850 <_fflush_r>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d0d9      	beq.n	800dc46 <__swbuf_r+0x2e>
 800dc92:	e7d6      	b.n	800dc42 <__swbuf_r+0x2a>

0800dc94 <__swsetup_r>:
 800dc94:	b538      	push	{r3, r4, r5, lr}
 800dc96:	4b29      	ldr	r3, [pc, #164]	@ (800dd3c <__swsetup_r+0xa8>)
 800dc98:	4605      	mov	r5, r0
 800dc9a:	6818      	ldr	r0, [r3, #0]
 800dc9c:	460c      	mov	r4, r1
 800dc9e:	b118      	cbz	r0, 800dca8 <__swsetup_r+0x14>
 800dca0:	6a03      	ldr	r3, [r0, #32]
 800dca2:	b90b      	cbnz	r3, 800dca8 <__swsetup_r+0x14>
 800dca4:	f7fe f9e6 	bl	800c074 <__sinit>
 800dca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcac:	0719      	lsls	r1, r3, #28
 800dcae:	d422      	bmi.n	800dcf6 <__swsetup_r+0x62>
 800dcb0:	06da      	lsls	r2, r3, #27
 800dcb2:	d407      	bmi.n	800dcc4 <__swsetup_r+0x30>
 800dcb4:	2209      	movs	r2, #9
 800dcb6:	602a      	str	r2, [r5, #0]
 800dcb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcbc:	81a3      	strh	r3, [r4, #12]
 800dcbe:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc2:	e033      	b.n	800dd2c <__swsetup_r+0x98>
 800dcc4:	0758      	lsls	r0, r3, #29
 800dcc6:	d512      	bpl.n	800dcee <__swsetup_r+0x5a>
 800dcc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcca:	b141      	cbz	r1, 800dcde <__swsetup_r+0x4a>
 800dccc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcd0:	4299      	cmp	r1, r3
 800dcd2:	d002      	beq.n	800dcda <__swsetup_r+0x46>
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	f7ff f8bd 	bl	800ce54 <_free_r>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcde:	89a3      	ldrh	r3, [r4, #12]
 800dce0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dce4:	81a3      	strh	r3, [r4, #12]
 800dce6:	2300      	movs	r3, #0
 800dce8:	6063      	str	r3, [r4, #4]
 800dcea:	6923      	ldr	r3, [r4, #16]
 800dcec:	6023      	str	r3, [r4, #0]
 800dcee:	89a3      	ldrh	r3, [r4, #12]
 800dcf0:	f043 0308 	orr.w	r3, r3, #8
 800dcf4:	81a3      	strh	r3, [r4, #12]
 800dcf6:	6923      	ldr	r3, [r4, #16]
 800dcf8:	b94b      	cbnz	r3, 800dd0e <__swsetup_r+0x7a>
 800dcfa:	89a3      	ldrh	r3, [r4, #12]
 800dcfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd04:	d003      	beq.n	800dd0e <__swsetup_r+0x7a>
 800dd06:	4621      	mov	r1, r4
 800dd08:	4628      	mov	r0, r5
 800dd0a:	f000 f883 	bl	800de14 <__smakebuf_r>
 800dd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd12:	f013 0201 	ands.w	r2, r3, #1
 800dd16:	d00a      	beq.n	800dd2e <__swsetup_r+0x9a>
 800dd18:	2200      	movs	r2, #0
 800dd1a:	60a2      	str	r2, [r4, #8]
 800dd1c:	6962      	ldr	r2, [r4, #20]
 800dd1e:	4252      	negs	r2, r2
 800dd20:	61a2      	str	r2, [r4, #24]
 800dd22:	6922      	ldr	r2, [r4, #16]
 800dd24:	b942      	cbnz	r2, 800dd38 <__swsetup_r+0xa4>
 800dd26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd2a:	d1c5      	bne.n	800dcb8 <__swsetup_r+0x24>
 800dd2c:	bd38      	pop	{r3, r4, r5, pc}
 800dd2e:	0799      	lsls	r1, r3, #30
 800dd30:	bf58      	it	pl
 800dd32:	6962      	ldrpl	r2, [r4, #20]
 800dd34:	60a2      	str	r2, [r4, #8]
 800dd36:	e7f4      	b.n	800dd22 <__swsetup_r+0x8e>
 800dd38:	2000      	movs	r0, #0
 800dd3a:	e7f7      	b.n	800dd2c <__swsetup_r+0x98>
 800dd3c:	24000028 	.word	0x24000028

0800dd40 <_raise_r>:
 800dd40:	291f      	cmp	r1, #31
 800dd42:	b538      	push	{r3, r4, r5, lr}
 800dd44:	4605      	mov	r5, r0
 800dd46:	460c      	mov	r4, r1
 800dd48:	d904      	bls.n	800dd54 <_raise_r+0x14>
 800dd4a:	2316      	movs	r3, #22
 800dd4c:	6003      	str	r3, [r0, #0]
 800dd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd56:	b112      	cbz	r2, 800dd5e <_raise_r+0x1e>
 800dd58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd5c:	b94b      	cbnz	r3, 800dd72 <_raise_r+0x32>
 800dd5e:	4628      	mov	r0, r5
 800dd60:	f000 f830 	bl	800ddc4 <_getpid_r>
 800dd64:	4622      	mov	r2, r4
 800dd66:	4601      	mov	r1, r0
 800dd68:	4628      	mov	r0, r5
 800dd6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd6e:	f000 b817 	b.w	800dda0 <_kill_r>
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d00a      	beq.n	800dd8c <_raise_r+0x4c>
 800dd76:	1c59      	adds	r1, r3, #1
 800dd78:	d103      	bne.n	800dd82 <_raise_r+0x42>
 800dd7a:	2316      	movs	r3, #22
 800dd7c:	6003      	str	r3, [r0, #0]
 800dd7e:	2001      	movs	r0, #1
 800dd80:	e7e7      	b.n	800dd52 <_raise_r+0x12>
 800dd82:	2100      	movs	r1, #0
 800dd84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd88:	4620      	mov	r0, r4
 800dd8a:	4798      	blx	r3
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	e7e0      	b.n	800dd52 <_raise_r+0x12>

0800dd90 <raise>:
 800dd90:	4b02      	ldr	r3, [pc, #8]	@ (800dd9c <raise+0xc>)
 800dd92:	4601      	mov	r1, r0
 800dd94:	6818      	ldr	r0, [r3, #0]
 800dd96:	f7ff bfd3 	b.w	800dd40 <_raise_r>
 800dd9a:	bf00      	nop
 800dd9c:	24000028 	.word	0x24000028

0800dda0 <_kill_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	4d07      	ldr	r5, [pc, #28]	@ (800ddc0 <_kill_r+0x20>)
 800dda4:	2300      	movs	r3, #0
 800dda6:	4604      	mov	r4, r0
 800dda8:	4608      	mov	r0, r1
 800ddaa:	4611      	mov	r1, r2
 800ddac:	602b      	str	r3, [r5, #0]
 800ddae:	f7f3 fcc5 	bl	800173c <_kill>
 800ddb2:	1c43      	adds	r3, r0, #1
 800ddb4:	d102      	bne.n	800ddbc <_kill_r+0x1c>
 800ddb6:	682b      	ldr	r3, [r5, #0]
 800ddb8:	b103      	cbz	r3, 800ddbc <_kill_r+0x1c>
 800ddba:	6023      	str	r3, [r4, #0]
 800ddbc:	bd38      	pop	{r3, r4, r5, pc}
 800ddbe:	bf00      	nop
 800ddc0:	240016b8 	.word	0x240016b8

0800ddc4 <_getpid_r>:
 800ddc4:	f7f3 bcb2 	b.w	800172c <_getpid>

0800ddc8 <__swhatbuf_r>:
 800ddc8:	b570      	push	{r4, r5, r6, lr}
 800ddca:	460c      	mov	r4, r1
 800ddcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddd0:	2900      	cmp	r1, #0
 800ddd2:	b096      	sub	sp, #88	@ 0x58
 800ddd4:	4615      	mov	r5, r2
 800ddd6:	461e      	mov	r6, r3
 800ddd8:	da0d      	bge.n	800ddf6 <__swhatbuf_r+0x2e>
 800ddda:	89a3      	ldrh	r3, [r4, #12]
 800dddc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dde0:	f04f 0100 	mov.w	r1, #0
 800dde4:	bf14      	ite	ne
 800dde6:	2340      	movne	r3, #64	@ 0x40
 800dde8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ddec:	2000      	movs	r0, #0
 800ddee:	6031      	str	r1, [r6, #0]
 800ddf0:	602b      	str	r3, [r5, #0]
 800ddf2:	b016      	add	sp, #88	@ 0x58
 800ddf4:	bd70      	pop	{r4, r5, r6, pc}
 800ddf6:	466a      	mov	r2, sp
 800ddf8:	f000 f848 	bl	800de8c <_fstat_r>
 800ddfc:	2800      	cmp	r0, #0
 800ddfe:	dbec      	blt.n	800ddda <__swhatbuf_r+0x12>
 800de00:	9901      	ldr	r1, [sp, #4]
 800de02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de0a:	4259      	negs	r1, r3
 800de0c:	4159      	adcs	r1, r3
 800de0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de12:	e7eb      	b.n	800ddec <__swhatbuf_r+0x24>

0800de14 <__smakebuf_r>:
 800de14:	898b      	ldrh	r3, [r1, #12]
 800de16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de18:	079d      	lsls	r5, r3, #30
 800de1a:	4606      	mov	r6, r0
 800de1c:	460c      	mov	r4, r1
 800de1e:	d507      	bpl.n	800de30 <__smakebuf_r+0x1c>
 800de20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de24:	6023      	str	r3, [r4, #0]
 800de26:	6123      	str	r3, [r4, #16]
 800de28:	2301      	movs	r3, #1
 800de2a:	6163      	str	r3, [r4, #20]
 800de2c:	b003      	add	sp, #12
 800de2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de30:	ab01      	add	r3, sp, #4
 800de32:	466a      	mov	r2, sp
 800de34:	f7ff ffc8 	bl	800ddc8 <__swhatbuf_r>
 800de38:	9f00      	ldr	r7, [sp, #0]
 800de3a:	4605      	mov	r5, r0
 800de3c:	4639      	mov	r1, r7
 800de3e:	4630      	mov	r0, r6
 800de40:	f7ff f87c 	bl	800cf3c <_malloc_r>
 800de44:	b948      	cbnz	r0, 800de5a <__smakebuf_r+0x46>
 800de46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de4a:	059a      	lsls	r2, r3, #22
 800de4c:	d4ee      	bmi.n	800de2c <__smakebuf_r+0x18>
 800de4e:	f023 0303 	bic.w	r3, r3, #3
 800de52:	f043 0302 	orr.w	r3, r3, #2
 800de56:	81a3      	strh	r3, [r4, #12]
 800de58:	e7e2      	b.n	800de20 <__smakebuf_r+0xc>
 800de5a:	89a3      	ldrh	r3, [r4, #12]
 800de5c:	6020      	str	r0, [r4, #0]
 800de5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de62:	81a3      	strh	r3, [r4, #12]
 800de64:	9b01      	ldr	r3, [sp, #4]
 800de66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de6a:	b15b      	cbz	r3, 800de84 <__smakebuf_r+0x70>
 800de6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de70:	4630      	mov	r0, r6
 800de72:	f000 f81d 	bl	800deb0 <_isatty_r>
 800de76:	b128      	cbz	r0, 800de84 <__smakebuf_r+0x70>
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	f023 0303 	bic.w	r3, r3, #3
 800de7e:	f043 0301 	orr.w	r3, r3, #1
 800de82:	81a3      	strh	r3, [r4, #12]
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	431d      	orrs	r5, r3
 800de88:	81a5      	strh	r5, [r4, #12]
 800de8a:	e7cf      	b.n	800de2c <__smakebuf_r+0x18>

0800de8c <_fstat_r>:
 800de8c:	b538      	push	{r3, r4, r5, lr}
 800de8e:	4d07      	ldr	r5, [pc, #28]	@ (800deac <_fstat_r+0x20>)
 800de90:	2300      	movs	r3, #0
 800de92:	4604      	mov	r4, r0
 800de94:	4608      	mov	r0, r1
 800de96:	4611      	mov	r1, r2
 800de98:	602b      	str	r3, [r5, #0]
 800de9a:	f7f3 fcaf 	bl	80017fc <_fstat>
 800de9e:	1c43      	adds	r3, r0, #1
 800dea0:	d102      	bne.n	800dea8 <_fstat_r+0x1c>
 800dea2:	682b      	ldr	r3, [r5, #0]
 800dea4:	b103      	cbz	r3, 800dea8 <_fstat_r+0x1c>
 800dea6:	6023      	str	r3, [r4, #0]
 800dea8:	bd38      	pop	{r3, r4, r5, pc}
 800deaa:	bf00      	nop
 800deac:	240016b8 	.word	0x240016b8

0800deb0 <_isatty_r>:
 800deb0:	b538      	push	{r3, r4, r5, lr}
 800deb2:	4d06      	ldr	r5, [pc, #24]	@ (800decc <_isatty_r+0x1c>)
 800deb4:	2300      	movs	r3, #0
 800deb6:	4604      	mov	r4, r0
 800deb8:	4608      	mov	r0, r1
 800deba:	602b      	str	r3, [r5, #0]
 800debc:	f7f3 fcae 	bl	800181c <_isatty>
 800dec0:	1c43      	adds	r3, r0, #1
 800dec2:	d102      	bne.n	800deca <_isatty_r+0x1a>
 800dec4:	682b      	ldr	r3, [r5, #0]
 800dec6:	b103      	cbz	r3, 800deca <_isatty_r+0x1a>
 800dec8:	6023      	str	r3, [r4, #0]
 800deca:	bd38      	pop	{r3, r4, r5, pc}
 800decc:	240016b8 	.word	0x240016b8

0800ded0 <_init>:
 800ded0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded2:	bf00      	nop
 800ded4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ded6:	bc08      	pop	{r3}
 800ded8:	469e      	mov	lr, r3
 800deda:	4770      	bx	lr

0800dedc <_fini>:
 800dedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dede:	bf00      	nop
 800dee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dee2:	bc08      	pop	{r3}
 800dee4:	469e      	mov	lr, r3
 800dee6:	4770      	bx	lr
